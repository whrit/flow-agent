name: 🔍 Verification Pipeline

on:
  push:
    branches: [main, develop, alpha-*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      verification_mode:
        description: 'Verification mode'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - security-only

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  # Pre-verification setup and validation
  setup-verification:
    name: 🚀 Setup Verification
    runs-on: ubuntu-latest
    outputs:
      verification-id: ${{ steps.setup.outputs.verification-id }}
      test-matrix: ${{ steps.setup.outputs.test-matrix }}
      cache-key: ${{ steps.setup.outputs.cache-key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate verification ID
        id: setup
        run: |
          VERIFICATION_ID="verify-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          echo "verification-id=$VERIFICATION_ID" >> $GITHUB_OUTPUT
          echo "test-matrix={\"include\":[{\"os\":\"ubuntu-latest\",\"node\":\"18\"},{\"os\":\"ubuntu-latest\",\"node\":\"20\"},{\"os\":\"macos-latest\",\"node\":\"20\"},{\"os\":\"windows-latest\",\"node\":\"20\"}]}" >> $GITHUB_OUTPUT
          echo "cache-key=${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.setup.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-

  # Security verification
  security-verification:
    name: 🛡️ Security Verification
    runs-on: ubuntu-latest
    needs: setup-verification
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-verification.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate || true
          npm audit --audit-level=high --json > security-audit.json || true

      - name: License compliance check
        run: |
          echo "📋 Checking license compliance..."
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense' \
            --excludePrivatePackages \
            --json > license-report.json || true

      - name: Dependency vulnerability scan
        run: |
          echo "🔍 Scanning for vulnerabilities..."
          npx audit-ci --config .audit-ci.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ needs.setup-verification.outputs.verification-id }}
          path: |
            security-audit.json
            license-report.json
          retention-days: 30

  # Code quality verification
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    needs: setup-verification
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-verification.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: ESLint code analysis
        run: |
          echo "🔍 Running ESLint..."
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint

      - name: TypeScript type checking
        run: |
          echo "🔍 Type checking..."
          npm run typecheck

      - name: Format checking
        run: |
          echo "🎨 Checking code formatting..."
          npm run format
          git diff --exit-code || (echo "❌ Code is not properly formatted" && exit 1)

      - name: Complexity analysis
        run: |
          echo "📊 Analyzing code complexity..."
          npx complexity-report --format json --output complexity-report.json src/ || true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ needs.setup-verification.outputs.verification-id }}
          path: |
            eslint-report.json
            complexity-report.json
          retention-days: 30

  # Multi-platform testing
  test-verification:
    name: 🧪 Test Verification (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    needs: [setup-verification, security-verification]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-verification.outputs.test-matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          npm run test:unit

      - name: Run integration tests
        run: |
          echo "🔗 Running integration tests..."
          npm run test:integration

      - name: Run performance tests
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        run: |
          echo "⚡ Running performance tests..."
          npm run test:performance

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        run: |
          echo "📊 Generating coverage report..."
          npm run test:coverage
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}-${{ needs.setup-verification.outputs.verification-id }}
          path: |
            coverage/
            test-reports/
          retention-days: 30

  # Build verification
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [setup-verification, code-quality]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-verification.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: |
          echo "🔨 Building TypeScript..."
          npm run build:ts

      - name: Build binary
        run: |
          echo "📦 Building binary..."
          npm run build:binary || echo "⚠️ Binary build skipped (optional)"

      - name: Verify CLI functionality
        run: |
          echo "✅ Testing CLI functionality..."
          node dist/cli/main.js --version
          node dist/cli/main.js --help

      - name: Package for distribution
        run: |
          echo "📦 Creating package..."
          npm pack
          ls -la *.tgz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.setup-verification.outputs.verification-id }}
          path: |
            dist/
            bin/
            *.tgz
          retention-days: 30

  # Documentation verification
  docs-verification:
    name: 📚 Documentation Verification
    runs-on: ubuntu-latest
    needs: setup-verification
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check documentation files
        run: |
          echo "📋 Verifying documentation..."
          test -f README.md || (echo "❌ README.md missing" && exit 1)
          test -f CHANGELOG.md || (echo "❌ CHANGELOG.md missing" && exit 1)
          test -f LICENSE || (echo "❌ LICENSE missing" && exit 1)

      - name: Check links in documentation
        run: |
          echo "🔗 Checking documentation links..."
          npx markdown-link-check README.md || true
          npx markdown-link-check CHANGELOG.md || true

      - name: Validate package.json
        run: |
          echo "📦 Validating package.json..."
          npm pkg fix
          git diff --exit-code package.json || (echo "❌ package.json needs fixes" && exit 1)

  # Performance benchmarking
  performance-verification:
    name: ⚡ Performance Verification
    runs-on: ubuntu-latest
    needs: [setup-verification, build-verification]
    if: github.event_name == 'push' || github.event.inputs.verification_mode == 'full'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.setup-verification.outputs.verification-id }}

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          npm run test:benchmark || echo "⚠️ Benchmarks skipped"

      - name: Memory leak detection
        run: |
          echo "🔍 Checking for memory leaks..."
          node --expose-gc --max-old-space-size=128 dist/cli/main.js --version || true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ needs.setup-verification.outputs.verification-id }}
          path: |
            benchmark-results/
            performance-reports/
          retention-days: 30

  # Final verification report
  verification-report:
    name: 📊 Verification Report
    runs-on: ubuntu-latest
    needs: [
      setup-verification,
      security-verification,
      code-quality,
      test-verification,
      build-verification,
      docs-verification,
      performance-verification
    ]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: verification-reports/

      - name: Generate verification report
        run: |
          echo "📊 Generating verification report..."
          cat > verification-summary.md << 'EOF'
          # Verification Pipeline Report
          
          **Verification ID:** ${{ needs.setup-verification.outputs.verification-id }}
          **Timestamp:** $(date -u)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Results Summary
          
          | Component | Status |
          |-----------|--------|
          | Security | ${{ needs.security-verification.result }} |
          | Code Quality | ${{ needs.code-quality.result }} |
          | Tests | ${{ needs.test-verification.result }} |
          | Build | ${{ needs.build-verification.result }} |
          | Documentation | ${{ needs.docs-verification.result }} |
          | Performance | ${{ needs.performance-verification.result }} |
          
          ## Verification Status
          
          - ✅ **PASSED:** All critical verifications successful
          - 🔍 **REVIEW:** Check uploaded artifacts for detailed reports
          - 📊 **METRICS:** Performance and quality metrics available
          
          ## Next Steps
          
          1. Review detailed reports in artifacts
          2. Address any failing checks
          3. Proceed with deployment if all verifications pass
          
          ---
          *Generated by GitHub Actions Verification Pipeline*
          EOF

      - name: Upload verification summary
        uses: actions/upload-artifact@v4
        with:
          name: verification-summary-${{ needs.setup-verification.outputs.verification-id }}
          path: verification-summary.md
          retention-days: 90

      - name: Update status badges
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🏷️ Status badges updated for main branch"
          echo "[![Verification](https://img.shields.io/badge/verification-${{ job.status }}-${{ job.status == 'success' && 'green' || 'red' }})](https://github.com/${{ github.repository }}/actions)"

      - name: Post summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('verification-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Verification Pipeline Results\n\n${summary}`
            });