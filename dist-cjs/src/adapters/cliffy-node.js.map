{"version":3,"sources":["../../../src/adapters/cliffy-node.ts"],"sourcesContent":["/**\n * Cliffy Node.js Adapter\n *\n * This adapter provides Node.js-compatible implementations of Cliffy modules\n * by wrapping existing Node.js packages to match the Cliffy API.\n */\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport Table from 'cli-table3';\n\n// Colors adapter - map Cliffy colors to chalk\nexport const colors = {\n  green: chalk.green,\n  red: chalk.red,\n  yellow: chalk.yellow,\n  blue: chalk.blue,\n  gray: chalk.gray,\n  cyan: chalk.cyan,\n  magenta: chalk.magenta,\n  white: chalk.white,\n  black: chalk.black,\n  bold: chalk.bold,\n  dim: chalk.dim,\n  italic: chalk.italic,\n  underline: chalk.underline,\n  bgRed: chalk.bgRed,\n  bgGreen: chalk.bgGreen,\n  bgYellow: chalk.bgYellow,\n  bgBlue: chalk.bgBlue,\n};\n\n// Prompt adapter - map Cliffy prompt to inquirer\nexport const Input = async (options: { message: string; default?: string }) => {\n  const answers = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'value',\n      message: options.message,\n      default: options.default,\n    },\n  ]);\n  return answers.value;\n};\n\nexport const Confirm = async (options: { message: string; default?: boolean }) => {\n  const answers = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'value',\n      message: options.message,\n      default: options.default,\n    },\n  ]);\n  return answers.value;\n};\n\nexport const Select = async <T>(options: {\n  message: string;\n  options: Array<{ name: string; value: T }>;\n  default?: T;\n}): Promise<T> => {\n  const answers = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'value',\n      message: options.message,\n      choices: options.options.map((opt) => ({ name: opt.name, value: opt.value })),\n      default: options.default,\n    },\n  ]);\n  return answers.value;\n};\n\n// Table adapter - re-export cli-table3 with Cliffy-like API\nexport { Table };\n"],"names":["chalk","inquirer","Table","colors","green","red","yellow","blue","gray","cyan","magenta","white","black","bold","dim","italic","underline","bgRed","bgGreen","bgYellow","bgBlue","Input","options","answers","prompt","type","name","message","default","value","Confirm","Select","choices","map","opt"],"mappings":"AAOA,OAAOA,WAAW,QAAQ;AAC1B,OAAOC,cAAc,WAAW;AAChC,OAAOC,WAAW,aAAa;AAG/B,OAAO,MAAMC,SAAS;IACpBC,OAAOJ,MAAMI,KAAK;IAClBC,KAAKL,MAAMK,GAAG;IACdC,QAAQN,MAAMM,MAAM;IACpBC,MAAMP,MAAMO,IAAI;IAChBC,MAAMR,MAAMQ,IAAI;IAChBC,MAAMT,MAAMS,IAAI;IAChBC,SAASV,MAAMU,OAAO;IACtBC,OAAOX,MAAMW,KAAK;IAClBC,OAAOZ,MAAMY,KAAK;IAClBC,MAAMb,MAAMa,IAAI;IAChBC,KAAKd,MAAMc,GAAG;IACdC,QAAQf,MAAMe,MAAM;IACpBC,WAAWhB,MAAMgB,SAAS;IAC1BC,OAAOjB,MAAMiB,KAAK;IAClBC,SAASlB,MAAMkB,OAAO;IACtBC,UAAUnB,MAAMmB,QAAQ;IACxBC,QAAQpB,MAAMoB,MAAM;AACtB,EAAE;AAGF,OAAO,MAAMC,QAAQ,OAAOC;IAC1B,MAAMC,UAAU,MAAMtB,SAASuB,MAAM,CAAC;QACpC;YACEC,MAAM;YACNC,MAAM;YACNC,SAASL,QAAQK,OAAO;YACxBC,SAASN,QAAQM,OAAO;QAC1B;KACD;IACD,OAAOL,QAAQM,KAAK;AACtB,EAAE;AAEF,OAAO,MAAMC,UAAU,OAAOR;IAC5B,MAAMC,UAAU,MAAMtB,SAASuB,MAAM,CAAC;QACpC;YACEC,MAAM;YACNC,MAAM;YACNC,SAASL,QAAQK,OAAO;YACxBC,SAASN,QAAQM,OAAO;QAC1B;KACD;IACD,OAAOL,QAAQM,KAAK;AACtB,EAAE;AAEF,OAAO,MAAME,SAAS,OAAUT;IAK9B,MAAMC,UAAU,MAAMtB,SAASuB,MAAM,CAAC;QACpC;YACEC,MAAM;YACNC,MAAM;YACNC,SAASL,QAAQK,OAAO;YACxBK,SAASV,QAAQA,OAAO,CAACW,GAAG,CAAC,CAACC,MAAS,CAAA;oBAAER,MAAMQ,IAAIR,IAAI;oBAAEG,OAAOK,IAAIL,KAAK;gBAAC,CAAA;YAC1ED,SAASN,QAAQM,OAAO;QAC1B;KACD;IACD,OAAOL,QAAQM,KAAK;AACtB,EAAE;AAGF,SAAS3B,KAAK,GAAG"}