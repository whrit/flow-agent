{"version":3,"sources":["../../../src/cli/completion.ts"],"sourcesContent":["/**\n * Shell completion generator for Claude-Flow CLI\n */\n\nimport chalk from 'chalk';\nimport { promises as fs } from 'node:fs';\n\nexport class CompletionGenerator {\n  private commands = [\n    'start',\n    'agent',\n    'task',\n    'memory',\n    'config',\n    'status',\n    'monitor',\n    'session',\n    'workflow',\n    'repl',\n    'version',\n    'completion',\n  ];\n\n  private subcommands = {\n    agent: ['spawn', 'list', 'terminate', 'info'],\n    task: ['create', 'list', 'status', 'cancel', 'workflow'],\n    memory: ['query', 'export', 'import', 'stats', 'cleanup'],\n    config: ['show', 'get', 'set', 'init', 'validate'],\n    session: ['list', 'save', 'restore', 'delete', 'export', 'import', 'info', 'clean'],\n    workflow: ['run', 'validate', 'list', 'status', 'stop', 'template'],\n  };\n\n  async generate(shell: string, install: boolean = false): Promise<void> {\n    const detectedShell = shell === 'detect' ? await this.detectShell() : shell;\n\n    switch (detectedShell) {\n      case 'bash':\n        await this.generateBashCompletion(install);\n        break;\n      case 'zsh':\n        await this.generateZshCompletion(install);\n        break;\n      case 'fish':\n        await this.generateFishCompletion(install);\n        break;\n      default:\n        console.error(chalk.red(`Unsupported shell: ${detectedShell}`));\n        console.log(chalk.gray('Supported shells: bash, zsh, fish'));\n        break;\n    }\n  }\n\n  private async detectShell(): Promise<string> {\n    const shell = process.env['SHELL'] || '';\n\n    if (shell.includes('bash')) return 'bash';\n    if (shell.includes('zsh')) return 'zsh';\n    if (shell.includes('fish')) return 'fish';\n\n    console.log(chalk.yellow('Could not detect shell, defaulting to bash'));\n    return 'bash';\n  }\n\n  private async generateBashCompletion(install: boolean): Promise<void> {\n    const script = this.getBashCompletionScript();\n\n    if (install) {\n      await this.installBashCompletion(script);\n    } else {\n      console.log(script);\n    }\n  }\n\n  private async generateZshCompletion(install: boolean): Promise<void> {\n    const script = this.getZshCompletionScript();\n\n    if (install) {\n      await this.installZshCompletion(script);\n    } else {\n      console.log(script);\n    }\n  }\n\n  private async generateFishCompletion(install: boolean): Promise<void> {\n    const script = this.getFishCompletionScript();\n\n    if (install) {\n      await this.installFishCompletion(script);\n    } else {\n      console.log(script);\n    }\n  }\n\n  private getBashCompletionScript(): string {\n    return `# Claude-Flow bash completion\n_claude_flow_completion() {\n    local cur prev words cword\n    _init_completion || return\n\n    case \\${words[1]} in\n        agent)\n            case \\${words[2]} in\n                spawn)\n                    COMPREPLY=($(compgen -W \"coordinator researcher implementer analyst custom\" -- \"$cur\"))\n                    return\n                    ;;\n                terminate|info)\n                    # In production, this would complete with actual agent IDs\n                    COMPREPLY=($(compgen -W \"agent-001 agent-002 agent-003\" -- \"$cur\"))\n                    return\n                    ;;\n                *)\n                    COMPREPLY=($(compgen -W \"${this.subcommands.agent.join(' ')}\" -- \"$cur\"))\n                    return\n                    ;;\n            esac\n            ;;\n        task)\n            case \\${words[2]} in\n                create)\n                    if [[ \\${#words[@]} -eq 4 ]]; then\n                        COMPREPLY=($(compgen -W \"research implementation analysis coordination\" -- \"$cur\"))\n                    fi\n                    return\n                    ;;\n                status|cancel)\n                    # In production, this would complete with actual task IDs\n                    COMPREPLY=($(compgen -W \"task-001 task-002 task-003\" -- \"$cur\"))\n                    return\n                    ;;\n                workflow)\n                    COMPREPLY=($(compgen -f -X '!*.@(json|yaml|yml)' -- \"$cur\"))\n                    return\n                    ;;\n                *)\n                    COMPREPLY=($(compgen -W \"${this.subcommands.task.join(' ')}\" -- \"$cur\"))\n                    return\n                    ;;\n            esac\n            ;;\n        memory)\n            COMPREPLY=($(compgen -W \"${this.subcommands.memory.join(' ')}\" -- \"$cur\"))\n            return\n            ;;\n        config)\n            COMPREPLY=($(compgen -W \"${this.subcommands.config.join(' ')}\" -- \"$cur\"))\n            return\n            ;;\n        session)\n            case \\${words[2]} in\n                restore|delete|info|export)\n                    # In production, this would complete with actual session IDs\n                    COMPREPLY=($(compgen -W \"session-001 session-002 session-003\" -- \"$cur\"))\n                    return\n                    ;;\n                import)\n                    COMPREPLY=($(compgen -f -X '!*.@(json|yaml|yml)' -- \"$cur\"))\n                    return\n                    ;;\n                *)\n                    COMPREPLY=($(compgen -W \"${this.subcommands.session.join(' ')}\" -- \"$cur\"))\n                    return\n                    ;;\n            esac\n            ;;\n        workflow)\n            case \\${words[2]} in\n                run|validate)\n                    COMPREPLY=($(compgen -f -X '!*.@(json|yaml|yml)' -- \"$cur\"))\n                    return\n                    ;;\n                template)\n                    COMPREPLY=($(compgen -W \"research implementation coordination\" -- \"$cur\"))\n                    return\n                    ;;\n                status|stop)\n                    # In production, this would complete with actual workflow IDs\n                    COMPREPLY=($(compgen -W \"workflow-001 workflow-002 workflow-003\" -- \"$cur\"))\n                    return\n                    ;;\n                *)\n                    COMPREPLY=($(compgen -W \"${this.subcommands.workflow.join(' ')}\" -- \"$cur\"))\n                    return\n                    ;;\n            esac\n            ;;\n        completion)\n            COMPREPLY=($(compgen -W \"bash zsh fish\" -- \"$cur\"))\n            return\n            ;;\n        *)\n            COMPREPLY=($(compgen -W \"${this.commands.join(' ')}\" -- \"$cur\"))\n            return\n            ;;\n    esac\n}\n\ncomplete -F _claude_flow_completion claude-flow`;\n  }\n\n  private getZshCompletionScript(): string {\n    return `#compdef claude-flow\n\n# Claude-Flow zsh completion\n\n_claude_flow() {\n    local context state state_descr line\n    typeset -A opt_args\n\n    _arguments -C \\\\\n        '(-h --help)'{-h,--help}'[Show help information]' \\\\\n        '(-v --verbose)'{-v,--verbose}'[Enable verbose logging]' \\\\\n        '(-q --quiet)'{-q,--quiet}'[Suppress non-essential output]' \\\\\n        '(-c --config)'{-c,--config}'[Path to configuration file]:config file:_files -g \"*.json\"' \\\\\n        '--log-level[Set log level]:level:(debug info warn error)' \\\\\n        '--no-color[Disable colored output]' \\\\\n        '--json[Output in JSON format]' \\\\\n        '--profile[Use named configuration profile]:profile:' \\\\\n        '1: :_claude_flow_commands' \\\\\n        '*::arg:->args'\n\n    case $state in\n        args)\n            case $words[1] in\n                agent)\n                    _claude_flow_agent\n                    ;;\n                task)\n                    _claude_flow_task\n                    ;;\n                memory)\n                    _claude_flow_memory\n                    ;;\n                config)\n                    _claude_flow_config\n                    ;;\n                session)\n                    _claude_flow_session\n                    ;;\n                workflow)\n                    _claude_flow_workflow\n                    ;;\n                completion)\n                    _arguments \\\\\n                        '--install[Install completion script automatically]' \\\\\n                        '1: :(bash zsh fish)'\n                    ;;\n            esac\n            ;;\n    esac\n}\n\n_claude_flow_commands() {\n    local commands\n    commands=(\n        'start:Start the Claude-Flow orchestration system'\n        'agent:Manage Claude-Flow agents'\n        'task:Manage tasks'\n        'memory:Manage agent memory'\n        'config:Manage Claude-Flow configuration'\n        'status:Show Claude-Flow system status'\n        'monitor:Start live monitoring dashboard'\n        'session:Manage Claude-Flow sessions'\n        'workflow:Execute and manage workflows'\n        'repl:Start interactive REPL mode'\n        'version:Show detailed version information'\n        'completion:Generate shell completion scripts'\n    )\n    _describe 'commands' commands\n}\n\n_claude_flow_agent() {\n    case $words[2] in\n        spawn)\n            _arguments \\\\\n                '(-n --name)'{-n,--name}'[Agent name]:name:' \\\\\n                '(-p --priority)'{-p,--priority}'[Agent priority]:priority:' \\\\\n                '(-m --max-tasks)'{-m,--max-tasks}'[Maximum concurrent tasks]:max:' \\\\\n                '--system-prompt[Custom system prompt]:prompt:' \\\\\n                '1: :(coordinator researcher implementer analyst custom)'\n            ;;\n        terminate|info)\n            _arguments '1: :_claude_flow_agents'\n            ;;\n        *)\n            _arguments '1: :(${this.subcommands.agent.join(' ')})'\n            ;;\n    esac\n}\n\n_claude_flow_task() {\n    case $words[2] in\n        create)\n            _arguments \\\\\n                '(-p --priority)'{-p,--priority}'[Task priority]:priority:' \\\\\n                '(-d --dependencies)'{-d,--dependencies}'[Comma-separated dependency task IDs]:deps:' \\\\\n                '(-i --input)'{-i,--input}'[Task input as JSON]:input:' \\\\\n                '(-a --assign)'{-a,--assign}'[Assign to specific agent]:agent:_claude_flow_agents' \\\\\n                '1: :(research implementation analysis coordination)' \\\\\n                '2: :_message_or_description'\n            ;;\n        workflow)\n            _arguments '1: :_files -g \"*.json *.yaml *.yml\"'\n            ;;\n        status|cancel)\n            _arguments '1: :_claude_flow_tasks'\n            ;;\n        *)\n            _arguments '1: :(${this.subcommands.task.join(' ')})'\n            ;;\n    esac\n}\n\n_claude_flow_memory() {\n    _arguments '1: :(${this.subcommands.memory.join(' ')})'\n}\n\n_claude_flow_config() {\n    _arguments '1: :(${this.subcommands.config.join(' ')})'\n}\n\n_claude_flow_session() {\n    case $words[2] in\n        restore|delete|info|export)\n            _arguments '1: :_claude_flow_sessions'\n            ;;\n        import)\n            _arguments '1: :_files -g \"*.json *.yaml *.yml\"'\n            ;;\n        *)\n            _arguments '1: :(${this.subcommands.session.join(' ')})'\n            ;;\n    esac\n}\n\n_claude_flow_workflow() {\n    case $words[2] in\n        run|validate)\n            _arguments '1: :_files -g \"*.json *.yaml *.yml\"'\n            ;;\n        template)\n            _arguments '1: :(research implementation coordination)'\n            ;;\n        status|stop)\n            _arguments '1: :_claude_flow_workflows'\n            ;;\n        *)\n            _arguments '1: :(${this.subcommands.workflow.join(' ')})'\n            ;;\n    esac\n}\n\n# Helper functions for completion\n_claude_flow_agents() {\n    # In production, this would query the running orchestrator\n    local agents\n    agents=('agent-001:Coordinator Agent' 'agent-002:Research Agent' 'agent-003:Implementation Agent')\n    _describe 'agents' agents\n}\n\n_claude_flow_tasks() {\n    # In production, this would query the running orchestrator\n    local tasks\n    tasks=('task-001:Research Task' 'task-002:Analysis Task' 'task-003:Implementation Task')\n    _describe 'tasks' tasks\n}\n\n_claude_flow_sessions() {\n    # In production, this would query saved sessions\n    local sessions\n    sessions=('session-001:Research Session' 'session-002:Development Session' 'session-003:Analysis Session')\n    _describe 'sessions' sessions\n}\n\n_claude_flow_workflows() {\n    # In production, this would query running workflows\n    local workflows\n    workflows=('workflow-001:Research Workflow' 'workflow-002:Implementation Workflow')\n    _describe 'workflows' workflows\n}\n\n_message_or_description() {\n    _message 'task description'\n}\n\n_claude_flow \"$@\"`;\n  }\n\n  private getFishCompletionScript(): string {\n    return `# Claude-Flow fish completion\n\nfunction __fish_claude_flow_needs_command\n    set cmd (commandline -opc)\n    if [ (count $cmd) -eq 1 ]\n        return 0\n    end\n    return 1\nend\n\nfunction __fish_claude_flow_using_command\n    set cmd (commandline -opc)\n    if [ (count $cmd) -gt 1 ]\n        if [ $argv[1] = $cmd[2] ]\n            return 0\n        end\n    end\n    return 1\nend\n\n# Main commands\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'start' -d 'Start the Claude-Flow orchestration system'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'agent' -d 'Manage Claude-Flow agents'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'task' -d 'Manage tasks'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'memory' -d 'Manage agent memory'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'config' -d 'Manage Claude-Flow configuration'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'status' -d 'Show Claude-Flow system status'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'monitor' -d 'Start live monitoring dashboard'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'session' -d 'Manage Claude-Flow sessions'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'workflow' -d 'Execute and manage workflows'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'repl' -d 'Start interactive REPL mode'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'version' -d 'Show detailed version information'\ncomplete -f -c claude-flow -n '__fish_claude_flow_needs_command' -a 'completion' -d 'Generate shell completion scripts'\n\n# Global options\ncomplete -c claude-flow -s h -l help -d 'Show help information'\ncomplete -c claude-flow -s v -l verbose -d 'Enable verbose logging'\ncomplete -c claude-flow -s q -l quiet -d 'Suppress non-essential output'\ncomplete -c claude-flow -s c -l config -r -d 'Path to configuration file'\ncomplete -c claude-flow -l log-level -r -a 'debug info warn error' -d 'Set log level'\ncomplete -c claude-flow -l no-color -d 'Disable colored output'\ncomplete -c claude-flow -l json -d 'Output in JSON format'\ncomplete -c claude-flow -l profile -r -d 'Use named configuration profile'\n\n# Agent subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command agent' -a 'spawn' -d 'Spawn a new agent'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command agent' -a 'list' -d 'List all agents'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command agent' -a 'terminate' -d 'Terminate an agent'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command agent' -a 'info' -d 'Get agent information'\n\n# Task subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command task' -a 'create' -d 'Create a new task'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command task' -a 'list' -d 'List all tasks'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command task' -a 'status' -d 'Get task status'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command task' -a 'cancel' -d 'Cancel a task'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command task' -a 'workflow' -d 'Execute workflow from file'\n\n# Memory subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command memory' -a 'query' -d 'Query memory entries'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command memory' -a 'export' -d 'Export memory to file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command memory' -a 'import' -d 'Import memory from file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command memory' -a 'stats' -d 'Show memory statistics'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command memory' -a 'cleanup' -d 'Clean up old entries'\n\n# Config subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command config' -a 'show' -d 'Show current configuration'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command config' -a 'get' -d 'Get specific config value'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command config' -a 'set' -d 'Set config value'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command config' -a 'init' -d 'Initialize config file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command config' -a 'validate' -d 'Validate config file'\n\n# Session subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'list' -d 'List all saved sessions'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'save' -d 'Save current session state'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'restore' -d 'Restore a saved session'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'delete' -d 'Delete a saved session'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'export' -d 'Export session to file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'import' -d 'Import session from file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'info' -d 'Show detailed session information'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command session' -a 'clean' -d 'Clean up old sessions'\n\n# Workflow subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'run' -d 'Execute a workflow from file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'validate' -d 'Validate a workflow file'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'list' -d 'List running workflows'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'status' -d 'Show workflow execution status'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'stop' -d 'Stop a running workflow'\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command workflow' -a 'template' -d 'Generate workflow templates'\n\n# Completion subcommands\ncomplete -f -c claude-flow -n '__fish_claude_flow_using_command completion' -a 'bash zsh fish'`;\n  }\n\n  private async installBashCompletion(script: string): Promise<void> {\n    const possiblePaths = [\n      '/etc/bash_completion.d/claude-flow',\n      '/usr/local/etc/bash_completion.d/claude-flow',\n      `${process.env['HOME']}/.local/share/bash-completion/completions/claude-flow`,\n      `${process.env['HOME']}/.bash_completion.d/claude-flow`,\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const dir = path.substring(0, path.lastIndexOf('/'));\n        await Deno.mkdir(dir, { recursive: true });\n        await fs.writeFile(path, script);\n\n        console.log(chalk.green('✓ Bash completion installed'));\n        console.log(`${chalk.white('Location:')} ${path}`);\n        console.log(chalk.gray('Restart your shell or run: source ~/.bashrc'));\n        return;\n      } catch (error) {\n        // Try next path\n        continue;\n      }\n    }\n\n    console.error(chalk.red('Failed to install bash completion'));\n    console.log(\n      chalk.gray('You can manually save the completion script to a bash completion directory'),\n    );\n  }\n\n  private async installZshCompletion(script: string): Promise<void> {\n    const possiblePaths = [\n      `${process.env['HOME']}/.zsh/completions/_claude-flow`,\n      '/usr/local/share/zsh/site-functions/_claude-flow',\n      '/usr/share/zsh/site-functions/_claude-flow',\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const dir = path.substring(0, path.lastIndexOf('/'));\n        await Deno.mkdir(dir, { recursive: true });\n        await fs.writeFile(path, script);\n\n        console.log(chalk.green('✓ Zsh completion installed'));\n        console.log(`${chalk.white('Location:')} ${path}`);\n        console.log(chalk.gray('Restart your shell or run: autoload -U compinit && compinit'));\n        return;\n      } catch (error) {\n        // Try next path\n        continue;\n      }\n    }\n\n    console.error(chalk.red('Failed to install zsh completion'));\n    console.log(\n      chalk.gray('You can manually save the completion script to your zsh completion directory'),\n    );\n  }\n\n  private async installFishCompletion(script: string): Promise<void> {\n    const possiblePaths = [\n      `${process.env['HOME']}/.config/fish/completions/claude-flow.fish`,\n      '/usr/local/share/fish/completions/claude-flow.fish',\n      '/usr/share/fish/completions/claude-flow.fish',\n    ];\n\n    for (const path of possiblePaths) {\n      try {\n        const dir = path.substring(0, path.lastIndexOf('/'));\n        await Deno.mkdir(dir, { recursive: true });\n        await fs.writeFile(path, script);\n\n        console.log(chalk.green('✓ Fish completion installed'));\n        console.log(`${chalk.white('Location:')} ${path}`);\n        console.log(chalk.gray('Completions will be available in new fish sessions'));\n        return;\n      } catch (error) {\n        // Try next path\n        continue;\n      }\n    }\n\n    console.error(chalk.red('Failed to install fish completion'));\n    console.log(\n      chalk.gray('You can manually save the completion script to your fish completion directory'),\n    );\n  }\n}\n"],"names":["chalk","promises","fs","CompletionGenerator","commands","subcommands","agent","task","memory","config","session","workflow","generate","shell","install","detectedShell","detectShell","generateBashCompletion","generateZshCompletion","generateFishCompletion","console","error","red","log","gray","process","env","includes","yellow","script","getBashCompletionScript","installBashCompletion","getZshCompletionScript","installZshCompletion","getFishCompletionScript","installFishCompletion","join","possiblePaths","path","dir","substring","lastIndexOf","Deno","mkdir","recursive","writeFile","green","white"],"mappings":"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"}