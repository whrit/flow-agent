{"version":3,"sources":["../../../src/cli/maestro-cli-bridge.ts"],"sourcesContent":["/**\n * Maestro CLI Bridge - Optimization Implementation\n * \n * This bridge provides optimized CLI integration for the Maestro specifications-driven\n * development framework, implementing performance enhancements and intelligent features\n * while maintaining compatibility with existing infrastructure.\n * \n * Key optimizations:\n * - Parallel dependency initialization with caching\n * - Performance monitoring integration\n * - Configuration validation and management\n * - Intelligent error handling and recovery\n */\n\nimport { join } from 'path';\nimport chalk from 'chalk';\nimport { EventEmitter } from 'events';\n\n// Core infrastructure\nimport { Config } from '../utils/types.js';\nimport { SystemError } from '../utils/errors.js';\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { IMemoryManager } from '../memory/manager.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { Orchestrator } from '../core/orchestrator.js';\n\n// Maestro system\nimport { MaestroSwarmCoordinator, MaestroSwarmConfig } from '../maestro/maestro-swarm-coordinator.js';\n\n// Performance monitoring\nimport { agenticHookManager } from '../services/agentic-flow-hooks/index.js';\n\nexport interface MaestroCLIBridgeConfig {\n  enablePerformanceMonitoring: boolean;\n  initializationTimeout: number;\n  cacheEnabled: boolean;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface PerformanceMetrics {\n  operation: string;\n  duration: number;\n  success: boolean;\n  timestamp: number;\n  memoryUsage?: number;\n  error?: string;\n}\n\n/**\n * CLI Bridge for optimized Maestro integration\n */\nexport class MaestroCLIBridge {\n  private swarmCoordinator?: MaestroSwarmCoordinator;\n  private initializationCache: Map<string, any> = new Map();\n  private configCache?: Config;\n  private performanceMetrics: PerformanceMetrics[] = [];\n  private initialized: boolean = false;\n\n  constructor(\n    private bridgeConfig: Partial<MaestroCLIBridgeConfig> = {}\n  ) {\n    // Set default configuration\n    this.bridgeConfig = {\n      enablePerformanceMonitoring: true,\n      initializationTimeout: 30000, // 30 seconds\n      cacheEnabled: true,\n      logLevel: 'info',\n      ...this.bridgeConfig\n    };\n  }\n\n  /**\n   * Initialize orchestrator with parallel dependency loading and caching\n   */\n  async initializeOrchestrator(): Promise<MaestroSwarmCoordinator> {\n    const startTime = Date.now();\n\n    try {\n      if (this.swarmCoordinator && this.initialized) {\n        console.log(chalk.green('‚úÖ Using cached Maestro swarm coordinator'));\n        return this.swarmCoordinator;\n      }\n\n      console.log(chalk.blue('üöÄ Initializing Maestro orchestrator...'));\n\n      // Parallel initialization with caching\n      const [config, eventBus, logger, memoryManager, agentManager, mainOrchestrator] = \n        await Promise.all([\n          this.getOrCreateConfig(),\n          this.getOrCreateEventBus(),\n          this.getOrCreateLogger(),\n          this.getOrCreateMemoryManager(),\n          this.getOrCreateAgentManager(),\n          this.getOrCreateMainOrchestrator()\n        ]);\n\n      // Create optimized Maestro configuration\n      const maestroConfig = this.getOptimizedMaestroConfig();\n\n      // Initialize native swarm coordinator\n      this.swarmCoordinator = new MaestroSwarmCoordinator(\n        maestroConfig,\n        eventBus,\n        logger\n      );\n\n      // Initialize native hive mind swarm with performance monitoring\n      await this.executeWithMonitoring('swarm_init', async () => {\n        const swarmId = await this.swarmCoordinator!.initialize();\n        console.log(chalk.green(`‚úÖ Native hive mind swarm initialized: ${swarmId}`));\n      });\n\n      this.initialized = true;\n      const duration = Date.now() - startTime;\n      \n      console.log(chalk.green(`‚úÖ Maestro orchestrator ready (${duration}ms)`));\n      \n      // Report performance metrics\n      await this.reportPerformanceMetric('orchestrator_init', duration, true);\n\n      return this.swarmCoordinator;\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      await this.reportPerformanceMetric('orchestrator_init', duration, false, error instanceof Error ? error.message : String(error));\n      \n      console.error(chalk.red(`‚ùå Failed to initialize Maestro orchestrator: ${error instanceof Error ? error.message : String(error)}`));\n      throw error;\n    }\n  }\n\n  /**\n   * Execute operation with performance monitoring\n   */\n  async executeWithMonitoring<T>(\n    operation: string,\n    fn: () => Promise<T>,\n    context?: Record<string, any>\n  ): Promise<T> {\n    if (!this.bridgeConfig.enablePerformanceMonitoring) {\n      return await fn();\n    }\n\n    const startTime = Date.now();\n    const startMemory = process.memoryUsage().heapUsed;\n\n    try {\n      // Execute pre-operation hooks\n      await this.executePerformanceHook('performance-metric', {\n        metric: `${operation}_start`,\n        value: startTime,\n        unit: 'timestamp',\n        context: { operation, ...context }\n      });\n\n      const result = await fn();\n      \n      const endTime = Date.now();\n      const endMemory = process.memoryUsage().heapUsed;\n      const duration = endTime - startTime;\n      const memoryDelta = endMemory - startMemory;\n\n      // Record metrics\n      await this.reportPerformanceMetric(operation, duration, true, undefined, memoryDelta);\n\n      // Execute post-operation hooks\n      await this.executePerformanceHook('performance-metric', {\n        metric: `${operation}_complete`,\n        value: duration,\n        unit: 'milliseconds',\n        context: { \n          operation, \n          success: true, \n          memoryDelta: memoryDelta / 1024 / 1024, // MB\n          ...context \n        }\n      });\n\n      return result;\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const memoryDelta = process.memoryUsage().heapUsed - startMemory;\n\n      await this.reportPerformanceMetric(operation, duration, false, error instanceof Error ? error.message : String(error), memoryDelta);\n\n      // Execute error hooks\n      await this.executePerformanceHook('performance-metric', {\n        metric: `${operation}_error`,\n        value: duration,\n        unit: 'milliseconds',\n        context: { \n          operation, \n          success: false, \n          error: error instanceof Error ? error.message : String(error),\n          memoryDelta: memoryDelta / 1024 / 1024, // MB\n          ...context \n        }\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get optimized Maestro configuration\n   */\n  private getOptimizedMaestroConfig(): MaestroSwarmConfig {\n    return {\n      hiveMindConfig: {\n        name: 'maestro-specs-driven-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 86400000,\n        autoSpawn: true,\n        enableConsensus: true,\n        enableMemory: true,\n        enableCommunication: true\n      },\n      enableConsensusValidation: true,\n      enableLivingDocumentation: true,\n      enableSteeringIntegration: true,\n      specsDirectory: join(process.cwd(), 'docs', 'maestro', 'specs'),\n      steeringDirectory: join(process.cwd(), 'docs', 'maestro', 'steering')\n    };\n  }\n\n  /**\n   * Cached configuration management\n   */\n  private async getOrCreateConfig(): Promise<Config> {\n    const cacheKey = 'config';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create basic configuration - in a real implementation, this would load from file\n    const config: Config = {\n      env: (process.env.NODE_ENV as 'development' | 'production' | 'test') || 'development',\n      logLevel: this.bridgeConfig.logLevel || 'info',\n      enableMetrics: this.bridgeConfig.enablePerformanceMonitoring || true\n    };\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, config);\n    }\n\n    return config;\n  }\n\n  /**\n   * Cached event bus creation\n   */\n  private async getOrCreateEventBus(): Promise<IEventBus> {\n    const cacheKey = 'eventBus';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create simple event bus implementation\n    const eventBus: IEventBus = new EventEmitter() as any;\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, eventBus);\n    }\n\n    return eventBus;\n  }\n\n  /**\n   * Cached logger creation\n   */\n  private async getOrCreateLogger(): Promise<ILogger> {\n    const cacheKey = 'logger';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create simple logger implementation\n    const logger: ILogger = {\n      debug: (message: string, ...args: any[]) => {\n        if (this.bridgeConfig.logLevel === 'debug') {\n          console.log(chalk.gray(`[DEBUG] ${message}`), ...args);\n        }\n      },\n      info: (message: string, ...args: any[]) => {\n        console.log(chalk.blue(`[INFO] ${message}`), ...args);\n      },\n      warn: (message: string, ...args: any[]) => {\n        console.log(chalk.yellow(`[WARN] ${message}`), ...args);\n      },\n      error: (message: string, ...args: any[]) => {\n        console.log(chalk.red(`[ERROR] ${message}`), ...args);\n      },\n      configure: async (config: any) => { /* no-op */ },\n      level: this.bridgeConfig.logLevel\n    };\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, logger);\n    }\n\n    return logger;\n  }\n\n  /**\n   * Cached memory manager creation\n   */\n  private async getOrCreateMemoryManager(): Promise<IMemoryManager> {\n    const cacheKey = 'memoryManager';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create simple memory manager implementation\n    const memoryManager: IMemoryManager = {\n      initialize: async () => {},\n      shutdown: async () => {},\n      createBank: async (agentId: string) => `bank-${agentId}`,\n      closeBank: async (bankId: string) => {},\n      store: async (entry: any) => {},\n      retrieve: async (id: string) => undefined,\n      query: async (query: any) => [],\n      update: async (id: string, updates: any) => {},\n      delete: async (id: string) => {},\n      getHealthStatus: async () => ({ healthy: true }),\n      performMaintenance: async () => {}\n    };\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, memoryManager);\n    }\n\n    return memoryManager;\n  }\n\n  /**\n   * Cached agent manager creation\n   */\n  private async getOrCreateAgentManager(): Promise<AgentManager> {\n    const cacheKey = 'agentManager';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create agent manager - this would integrate with existing system\n    const config = await this.getOrCreateConfig();\n    const eventBus = await this.getOrCreateEventBus();\n    const logger = await this.getOrCreateLogger();\n    const memoryManager = await this.getOrCreateMemoryManager();\n    \n    const agentManager = new AgentManager(\n      { maxAgents: 10 }, // AgentManagerConfig\n      logger,\n      eventBus,\n      memoryManager as any // Cast to DistributedMemorySystem\n    );\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, agentManager);\n    }\n\n    return agentManager;\n  }\n\n  /**\n   * Cached main orchestrator creation\n   */\n  private async getOrCreateMainOrchestrator(): Promise<Orchestrator> {\n    const cacheKey = 'mainOrchestrator';\n    \n    if (this.bridgeConfig.cacheEnabled && this.initializationCache.has(cacheKey)) {\n      return this.initializationCache.get(cacheKey);\n    }\n\n    // Create main orchestrator with required parameters\n    const config = await this.getOrCreateConfig();\n    const eventBus = await this.getOrCreateEventBus();\n    const logger = await this.getOrCreateLogger();\n    const memoryManager = await this.getOrCreateMemoryManager();\n    \n    // Create mock dependencies for orchestrator\n    const mockTerminalManager = {} as any;\n    const mockCoordinationManager = {} as any;\n    const mockMCPServer = {} as any;\n    \n    const orchestrator = new Orchestrator(\n      config,\n      mockTerminalManager,\n      memoryManager,\n      mockCoordinationManager,\n      mockMCPServer,\n      eventBus,\n      logger\n    );\n\n    if (this.bridgeConfig.cacheEnabled) {\n      this.initializationCache.set(cacheKey, orchestrator);\n    }\n\n    return orchestrator;\n  }\n\n  /**\n   * Execute performance hooks\n   */\n  private async executePerformanceHook(type: string, data: any): Promise<void> {\n    try {\n      await agenticHookManager.executeHooks(type as any, data, {\n        sessionId: `maestro-cli-${Date.now()}`,\n        timestamp: Date.now(),\n        correlationId: `maestro-performance`,\n        metadata: { source: 'maestro-cli-bridge' },\n        memory: { namespace: 'maestro', provider: 'memory', cache: new Map() },\n        neural: { modelId: 'default', patterns: null as any, training: null as any },\n        performance: { metrics: new Map(), bottlenecks: [], optimizations: [] }\n      } as any);\n    } catch (error) {\n      // Don't let hook failures break the main operation\n      console.warn(chalk.yellow(`‚ö†Ô∏è  Performance hook failed: ${error instanceof Error ? error.message : String(error)}`));\n    }\n  }\n\n  /**\n   * Report performance metrics\n   */\n  private async reportPerformanceMetric(\n    operation: string,\n    duration: number,\n    success: boolean,\n    error?: string,\n    memoryUsage?: number\n  ): Promise<void> {\n    const metric: PerformanceMetrics = {\n      operation,\n      duration,\n      success,\n      timestamp: Date.now(),\n      memoryUsage,\n      error\n    };\n\n    this.performanceMetrics.push(metric);\n\n    // Keep only last 100 metrics\n    if (this.performanceMetrics.length > 100) {\n      this.performanceMetrics.shift();\n    }\n\n    // Log performance information\n    if (this.bridgeConfig.logLevel === 'debug') {\n      const memoryInfo = memoryUsage ? ` (${(memoryUsage / 1024 / 1024).toFixed(2)}MB)` : '';\n      console.log(\n        chalk.gray(\n          `[PERF] ${operation}: ${duration}ms ${success ? '‚úì' : '‚úó'}${memoryInfo}`\n        )\n      );\n    }\n  }\n\n  /**\n   * Get performance summary\n   */\n  getPerformanceSummary(): any {\n    const successful = this.performanceMetrics.filter(m => m.success);\n    const failed = this.performanceMetrics.filter(m => !m.success);\n    \n    const avgDuration = successful.length > 0 \n      ? successful.reduce((sum, m) => sum + m.duration, 0) / successful.length\n      : 0;\n\n    return {\n      totalOperations: this.performanceMetrics.length,\n      successfulOperations: successful.length,\n      failedOperations: failed.length,\n      successRate: this.performanceMetrics.length > 0 \n        ? (successful.length / this.performanceMetrics.length) * 100\n        : 0,\n      averageDuration: Math.round(avgDuration),\n      recentMetrics: this.performanceMetrics.slice(-10)\n    };\n  }\n\n  /**\n   * Validate configuration and environment\n   */\n  async validateConfiguration(): Promise<{ valid: boolean; issues: string[] }> {\n    const issues: string[] = [];\n\n    try {\n      // Check Node.js version\n      const nodeVersion = process.versions.node;\n      const majorVersion = parseInt(nodeVersion.split('.')[0]);\n      if (majorVersion < 16) {\n        issues.push(`Node.js version ${nodeVersion} is not supported. Minimum required: 16.0.0`);\n      }\n\n      // Check available memory\n      const memoryUsage = process.memoryUsage();\n      const availableMemory = memoryUsage.heapTotal;\n      if (availableMemory < 100 * 1024 * 1024) { // 100MB\n        issues.push('Low available memory detected. Maestro requires at least 100MB heap space');\n      }\n\n      // Check file system permissions\n      const specsDir = join(process.cwd(), 'docs', 'maestro', 'specs');\n      try {\n        const fs = await import('fs/promises');\n        await fs.access(specsDir, fs.constants.F_OK);\n      } catch {\n        // Directory doesn't exist, which is fine - it will be created\n      }\n\n      return {\n        valid: issues.length === 0,\n        issues\n      };\n\n    } catch (error) {\n      issues.push(`Configuration validation failed: ${error instanceof Error ? error.message : String(error)}`);\n      return { valid: false, issues };\n    }\n  }\n\n  /**\n   * Clear caches and reset state\n   */\n  clearCache(): void {\n    this.initializationCache.clear();\n    this.configCache = undefined;\n    this.initialized = false;\n    console.log(chalk.gray('üßπ Maestro CLI bridge cache cleared'));\n  }\n\n  /**\n   * Shutdown and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    if (this.swarmCoordinator) {\n      await this.swarmCoordinator.shutdown();\n    }\n    \n    this.clearCache();\n    this.performanceMetrics = [];\n    \n    console.log(chalk.green('‚úÖ Maestro CLI bridge shutdown complete'));\n  }\n}"],"names":["join","chalk","EventEmitter","AgentManager","Orchestrator","MaestroSwarmCoordinator","agenticHookManager","MaestroCLIBridge","swarmCoordinator","initializationCache","Map","configCache","performanceMetrics","initialized","bridgeConfig","enablePerformanceMonitoring","initializationTimeout","cacheEnabled","logLevel","initializeOrchestrator","startTime","Date","now","console","log","green","blue","config","eventBus","logger","memoryManager","agentManager","mainOrchestrator","Promise","all","getOrCreateConfig","getOrCreateEventBus","getOrCreateLogger","getOrCreateMemoryManager","getOrCreateAgentManager","getOrCreateMainOrchestrator","maestroConfig","getOptimizedMaestroConfig","executeWithMonitoring","swarmId","initialize","duration","reportPerformanceMetric","error","Error","message","String","red","operation","fn","context","startMemory","process","memoryUsage","heapUsed","executePerformanceHook","metric","value","unit","result","endTime","endMemory","memoryDelta","undefined","success","hiveMindConfig","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","autoSpawn","enableConsensus","enableMemory","enableCommunication","enableConsensusValidation","enableLivingDocumentation","enableSteeringIntegration","specsDirectory","cwd","steeringDirectory","cacheKey","has","get","env","NODE_ENV","enableMetrics","set","debug","args","gray","info","warn","yellow","configure","level","shutdown","createBank","agentId","closeBank","bankId","store","entry","retrieve","id","query","update","updates","delete","getHealthStatus","healthy","performMaintenance","mockTerminalManager","mockCoordinationManager","mockMCPServer","orchestrator","type","data","executeHooks","sessionId","timestamp","correlationId","metadata","source","memory","namespace","provider","cache","neural","modelId","patterns","training","performance","metrics","bottlenecks","optimizations","push","length","shift","memoryInfo","toFixed","getPerformanceSummary","successful","filter","m","failed","avgDuration","reduce","sum","totalOperations","successfulOperations","failedOperations","successRate","averageDuration","Math","round","recentMetrics","slice","validateConfiguration","issues","nodeVersion","versions","node","majorVersion","parseInt","split","availableMemory","heapTotal","specsDir","fs","access","constants","F_OK","valid","clearCache","clear"],"mappings":"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"}