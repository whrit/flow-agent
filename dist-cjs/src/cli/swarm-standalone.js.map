{"version":3,"sources":["../../../src/cli/swarm-standalone.js"],"sourcesContent":["/**\n * Standalone swarm executable for npm package\n * This handles swarm execution when installed via npm\n */\n\nimport { spawn } from 'node:child_process';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join } from 'node:path';\nimport { existsSync } from 'node:fs';\nimport { cwd, exit } from './node-compat.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Parse arguments\nconst args = [];\nconst flags = {};\n\nfor (let i = 0; i < Deno.args.length; i++) {\n  const arg = Deno.args[i];\n  if (arg.startsWith('--')) {\n    const flagName = arg.substring(2);\n    const nextArg = Deno.args[i + 1];\n\n    if (nextArg && !nextArg.startsWith('--')) {\n      flags[flagName] = nextArg;\n      i++; // Skip the next argument\n    } else {\n      flags[flagName] = true;\n    }\n  } else {\n    args.push(arg);\n  }\n}\n\nconst objective = args.join(' ');\n\nif (!objective && !flags.help) {\n  console.error('‚ùå Usage: swarm <objective>');\n  console.log(`\nüêù Claude Flow Advanced Swarm System\n\nUSAGE:\n  claude-flow swarm <objective> [options]\n\nEXAMPLES:\n  claude-flow swarm \"Build a REST API\" --strategy development\n  claude-flow swarm \"Research cloud architecture\" --strategy research --ui\n  claude-flow swarm \"Analyze data trends\" --strategy analysis --parallel\n  claude-flow swarm \"Optimize performance\" --distributed --monitor\n\nRun 'claude-flow swarm --help' for full options\n`);\n  process.exit(1);\n}\n\n// Try to find the swarm implementation\nconst possiblePaths = [\n  join(__dirname, '../../swarm-demo.ts'),\n  join(__dirname, '../../swarm-demo-enhanced.ts'),\n  join(__dirname, '../../../swarm-demo.ts'),\n];\n\nlet swarmPath = null;\nfor (const path of possiblePaths) {\n  if (existsSync(path)) {\n    swarmPath = path;\n    break;\n  }\n}\n\nif (!swarmPath) {\n  // Fallback to inline implementation without calling back to swarm.js\n  console.log('üêù Launching swarm system...');\n  console.log(`üìã Objective: ${objective}`);\n  console.log(`üéØ Strategy: ${flags.strategy || 'auto'}`);\n  console.log(`üèóÔ∏è  Mode: ${flags.mode || 'centralized'}`);\n  console.log(`ü§ñ Max Agents: ${flags['max-agents'] || 5}`);\n  console.log();\n\n  // Generate swarm ID\n  const swarmId = `swarm_${Math.random().toString(36).substring(2, 11)}_${Math.random().toString(36).substring(2, 11)}`;\n\n  if (flags['dry-run']) {\n    console.log(`üÜî Swarm ID: ${swarmId}`);\n    console.log(`üìä Max Tasks: ${flags['max-tasks'] || 100}`);\n    console.log(`‚è∞ Timeout: ${flags.timeout || 60} minutes`);\n    console.log(`üîÑ Parallel: ${flags.parallel || false}`);\n    console.log(`üåê Distributed: ${flags.distributed || false}`);\n    console.log(`üîç Monitoring: ${flags.monitor || false}`);\n    console.log(`üë• Review Mode: ${flags.review || false}`);\n    console.log(`üß™ Testing: ${flags.testing || false}`);\n    console.log(`üß† Memory Namespace: ${flags['memory-namespace'] || 'swarm'}`);\n    console.log(`üíæ Persistence: ${flags.persistence !== false}`);\n    console.log(`üîí Encryption: ${flags.encryption || false}`);\n    console.log(`üìä Quality Threshold: ${flags['quality-threshold'] || 0.8}`);\n    console.log();\n    console.log('üéõÔ∏è  Coordination Strategy:');\n    console.log(`  ‚Ä¢ Agent Selection: ${flags['agent-selection'] || 'capability-based'}`);\n    console.log(`  ‚Ä¢ Task Scheduling: ${flags['task-scheduling'] || 'priority'}`);\n    console.log(`  ‚Ä¢ Load Balancing: ${flags['load-balancing'] || 'work-stealing'}`);\n    console.log(`  ‚Ä¢ Fault Tolerance: ${flags['fault-tolerance'] || 'retry'}`);\n    console.log(`  ‚Ä¢ Communication: ${flags.communication || 'event-driven'}`);\n    console.log('‚ö†Ô∏è  DRY RUN - Advanced Swarm Configuration');\n    process.exit(0);\n  }\n\n  // Try to use Claude wrapper approach\n  try {\n    const { execSync } = await import('child_process');\n\n    // Check if claude command exists\n    try {\n      execSync('which claude', { stdio: 'ignore' });\n    } catch (e) {\n      // Claude not found, show fallback message\n      console.log(`‚úÖ Swarm initialized with ID: ${swarmId}`);\n      console.log('\\n‚ö†Ô∏è  Note: Advanced swarm features require Claude or local installation.');\n      console.log('Install Claude: https://claude.ai/code');\n      console.log('Or install locally: npm install -g claude-flow@latest');\n      console.log('\\nThe swarm system would coordinate the following:');\n      console.log('1. Agent spawning and task distribution');\n      console.log('2. Parallel execution of subtasks');\n      console.log('3. Memory sharing between agents');\n      console.log('4. Progress monitoring and reporting');\n      console.log('5. Result aggregation and quality checks');\n      process.exit(0);\n    }\n\n    // Claude is available, use it to run swarm\n    console.log('üöÄ Launching swarm via Claude wrapper...');\n\n    // Build the prompt for Claude\n    const swarmPrompt = `Execute a swarm coordination task with the following configuration:\n\nObjective: ${objective}\nStrategy: ${flags.strategy || 'auto'}\nMode: ${flags.mode || 'centralized'}\nMax Agents: ${flags['max-agents'] || 5}\nMax Tasks: ${flags['max-tasks'] || 100}\nTimeout: ${flags.timeout || 60} minutes\nParallel: ${flags.parallel || false}\nDistributed: ${flags.distributed || false}\nMonitor: ${flags.monitor || false}\nReview: ${flags.review || false}\nTesting: ${flags.testing || false}\nMemory Namespace: ${flags['memory-namespace'] || 'swarm'}\nQuality Threshold: ${flags['quality-threshold'] || 0.8}\n\nCoordination Strategy:\n- Agent Selection: ${flags['agent-selection'] || 'capability-based'}\n- Task Scheduling: ${flags['task-scheduling'] || 'priority'}\n- Load Balancing: ${flags['load-balancing'] || 'work-stealing'}\n- Fault Tolerance: ${flags['fault-tolerance'] || 'retry'}\n- Communication: ${flags.communication || 'event-driven'}\n\nPlease coordinate this swarm task by:\n1. Breaking down the objective into subtasks\n2. Assigning tasks to appropriate agent types\n3. Managing parallel execution where applicable\n4. Monitoring progress and handling failures\n5. Aggregating results and ensuring quality\n\nUse all available tools including file operations, web search, and code execution as needed.`;\n\n    // Execute Claude non-interactively by piping the prompt\n    const { spawn } = await import('child_process');\n\n    const claudeArgs = [];\n\n    // Add auto-permission flag if requested\n    if (flags.auto || flags['dangerously-skip-permissions']) {\n      claudeArgs.push('--dangerously-skip-permissions');\n    }\n\n    // Spawn claude process\n    const claudeProcess = spawn('claude', claudeArgs, {\n      stdio: ['pipe', 'inherit', 'inherit'],\n      shell: false,\n    });\n\n    // Write the prompt to stdin and close it\n    claudeProcess.stdin.write(swarmPrompt);\n    claudeProcess.stdin.end();\n\n    // Wait for the process to complete\n    await new Promise((resolve, reject) => {\n      claudeProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve();\n        } else {\n          reject(new Error(`Claude process exited with code ${code}`));\n        }\n      });\n\n      claudeProcess.on('error', (err) => {\n        reject(err);\n      });\n    });\n  } catch (error) {\n    // Fallback if Claude execution fails\n    console.log(`‚úÖ Swarm initialized with ID: ${swarmId}`);\n    console.log('\\n‚ö†Ô∏è  Note: Advanced swarm features require Claude or local installation.');\n    console.log('Install Claude: https://claude.ai/code');\n    console.log('Or install locally: npm install -g claude-flow@latest');\n    console.log('\\nThe swarm system would coordinate the following:');\n    console.log('1. Agent spawning and task distribution');\n    console.log('2. Parallel execution of subtasks');\n    console.log('3. Memory sharing between agents');\n    console.log('4. Progress monitoring and reporting');\n    console.log('5. Result aggregation and quality checks');\n  }\n\n  process.exit(0);\n} else {\n  // Run the swarm demo directly\n  const swarmArgs = [objective];\n  for (const [key, value] of Object.entries(flags)) {\n    swarmArgs.push(`--${key}`);\n    if (value !== true) {\n      swarmArgs.push(String(value));\n    }\n  }\n\n  const node = spawn('node', [swarmPath, ...swarmArgs], {\n    stdio: 'inherit',\n  });\n\n  node.on('exit', (code) => {\n    exit(code || 0);\n  });\n}\n"],"names":["spawn","fileURLToPath","dirname","join","existsSync","exit","__filename","url","__dirname","args","flags","i","Deno","length","arg","startsWith","flagName","substring","nextArg","push","objective","help","console","error","log","process","possiblePaths","swarmPath","path","strategy","mode","swarmId","Math","random","toString","timeout","parallel","distributed","monitor","review","testing","persistence","encryption","communication","execSync","stdio","e","swarmPrompt","claudeArgs","auto","claudeProcess","shell","stdin","write","end","Promise","resolve","reject","on","code","Error","err","swarmArgs","key","value","Object","entries","String","node"],"mappings":"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"}