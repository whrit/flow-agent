{"version":3,"sources":["../../../../src/cli/simple-commands/analysis.js"],"sourcesContent":["import {\n  printSuccess,\n  printError,\n  printWarning,\n  callRuvSwarmMCP,\n  checkRuvSwarmAvailable,\n} from '../utils.js';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport {\n  initializeMetrics,\n  getPerformanceReport,\n  getBottleneckAnalysis,\n  exportMetrics\n} from './performance-metrics.js';\nimport {\n  getRealTokenUsage,\n  calculateCost,\n  generateOptimizationSuggestions,\n  generateTokenUsageReport,\n  getAgentIcon,\n  trackTokens\n} from './token-tracker.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function setupTelemetry() {\n  console.log(`\\n🔧 TELEMETRY SETUP FOR TOKEN TRACKING\\n`);\n  console.log(`${'═'.repeat(60)}\\n`);\n  \n  // Check current status\n  const currentValue = process.env.CLAUDE_CODE_ENABLE_TELEMETRY;\n  const isEnabled = currentValue === '1';\n  \n  console.log(`📊 Current Status: ${isEnabled ? '✅ ENABLED' : '❌ DISABLED'}`);\n  console.log(`   Environment Variable: CLAUDE_CODE_ENABLE_TELEMETRY=${currentValue || 'not set'}\\n`);\n  \n  if (!isEnabled) {\n    // Set the environment variable for current session\n    process.env.CLAUDE_CODE_ENABLE_TELEMETRY = '1';\n    \n    console.log(`✅ Telemetry ENABLED for this session!\\n`);\n    \n    // Create or update .env file\n    const envPath = path.join(process.cwd(), '.env');\n    let envContent = '';\n    \n    try {\n      envContent = await fs.readFile(envPath, 'utf-8');\n    } catch (err) {\n      // .env doesn't exist yet\n    }\n    \n    // Check if telemetry is already in .env\n    if (!envContent.includes('CLAUDE_CODE_ENABLE_TELEMETRY')) {\n      envContent += `\\n# Enable token tracking for Claude API calls\\nCLAUDE_CODE_ENABLE_TELEMETRY=1\\n`;\n      \n      try {\n        await fs.writeFile(envPath, envContent);\n        console.log(`📝 Updated .env file with telemetry setting`);\n      } catch (err) {\n        console.log(`⚠️  Could not update .env file: ${err.message}`);\n      }\n    }\n    \n    // Also add to shell profile for persistence\n    console.log(`\\n📌 To make this permanent, add to your shell profile:`);\n    console.log(`   ${'-'.repeat(50)}`);\n    console.log(`   echo 'export CLAUDE_CODE_ENABLE_TELEMETRY=1' >> ~/.bashrc`);\n    console.log(`   ${'-'.repeat(50)}\\n`);\n  }\n  \n  // Initialize token tracking directory\n  const metricsDir = path.join(process.cwd(), '.claude-flow', 'metrics');\n  try {\n    await fs.mkdir(metricsDir, { recursive: true });\n    console.log(`📁 Token tracking directory: ${metricsDir}`);\n  } catch (err) {\n    // Directory already exists\n  }\n  \n  // Check for existing token data\n  const tokenFile = path.join(metricsDir, 'token-usage.json');\n  try {\n    const data = await fs.readFile(tokenFile, 'utf-8');\n    const tokenData = JSON.parse(data);\n    console.log(`\\n📊 Existing token data found:`);\n    console.log(`   • Total tokens tracked: ${tokenData.totals?.total || 0}`);\n    console.log(`   • Sessions recorded: ${Object.keys(tokenData.sessions || {}).length}`);\n  } catch (err) {\n    console.log(`\\n📊 No existing token data (will be created on first use)`);\n  }\n  \n  console.log(`\\n🚀 NEXT STEPS:`);\n  console.log(`   1. Run Claude commands with --claude flag`);\n  console.log(`   2. Example: ./claude-flow swarm \"analyze code\" --claude`);\n  console.log(`   3. Check usage: ./claude-flow analysis token-usage --breakdown`);\n  \n  console.log(`\\n${'═'.repeat(60)}`);\n  printSuccess(`Telemetry setup complete!`);\n}\n\nexport async function analysisAction(subArgs, flags) {\n  const subcommand = subArgs[0];\n  const options = flags;\n\n  if (options.help || options.h || !subcommand) {\n    showAnalysisHelp();\n    return;\n  }\n\n  // Handle telemetry setup\n  if (subcommand === 'setup-telemetry' || options['enable-telemetry']) {\n    await setupTelemetry();\n    if (subcommand === 'setup-telemetry') return;\n  }\n\n  try {\n    switch (subcommand) {\n      case 'bottleneck-detect':\n        await bottleneckDetectCommand(subArgs, flags);\n        break;\n      case 'performance-report':\n        await performanceReportCommand(subArgs, flags);\n        break;\n      case 'token-usage':\n        await tokenUsageCommand(subArgs, flags);\n        break;\n      case 'claude-monitor':\n        await claudeMonitorCommand(subArgs, flags);\n        break;\n      case 'claude-cost':\n        await claudeCostCommand(subArgs, flags);\n        break;\n      default:\n        printError(`Unknown analysis command: ${subcommand}`);\n        showAnalysisHelp();\n    }\n  } catch (err) {\n    printError(`Analysis command failed: ${err.message}`);\n  }\n}\n\nasync function bottleneckDetectCommand(subArgs, flags) {\n  const options = flags;\n  const scope = options.scope || 'system';\n  const target = options.target || 'all';\n\n  console.log(`🔍 Detecting performance bottlenecks...`);\n  console.log(`📊 Scope: ${scope}`);\n  console.log(`🎯 Target: ${target}`);\n\n  try {\n    // Initialize metrics system without starting monitoring\n    await initializeMetrics(false);\n    \n    // Get real bottleneck analysis\n    const analysis = await getBottleneckAnalysis(scope, target);\n    \n    printSuccess(`✅ Bottleneck analysis completed`);\n\n    console.log(`\\n📊 BOTTLENECK ANALYSIS RESULTS:`);\n    \n    analysis.bottlenecks.forEach((bottleneck) => {\n      const icon =\n        bottleneck.severity === 'critical'\n          ? '🔴'\n          : bottleneck.severity === 'warning'\n            ? '🟡'\n            : '🟢';\n      console.log(\n        `  ${icon} ${bottleneck.severity.toUpperCase()}: ${bottleneck.component} (${bottleneck.metric})`,\n      );\n      \n      // Show details if available\n      if (bottleneck.details) {\n        bottleneck.details.forEach(detail => {\n          console.log(`      - ${detail.type || detail.id}: ${detail.duration}s`);\n        });\n      }\n    });\n\n    if (analysis.recommendations.length > 0) {\n      console.log(`\\n💡 RECOMMENDATIONS:`);\n      analysis.recommendations.forEach((rec) => {\n        console.log(`  • ${rec}`);\n      });\n    }\n\n    console.log(`\\n📊 PERFORMANCE METRICS:`);\n    console.log(`  • Analysis duration: ${analysis.analysisDuration.toFixed(2)}ms`);\n    console.log(`  • Confidence score: ${(analysis.confidenceScore * 100).toFixed(0)}%`);\n    console.log(`  • Issues detected: ${analysis.issuesDetected}`);\n\n    // Save detailed report\n    const reportPath = path.join(process.cwd(), 'analysis-reports', `bottleneck-${Date.now()}.json`);\n    await fs.mkdir(path.dirname(reportPath), { recursive: true });\n    await fs.writeFile(reportPath, JSON.stringify(analysis, null, 2));\n    \n    console.log(`\\n📄 Detailed report saved to: ${reportPath}`);\n    \n  } catch (err) {\n    printError(`Bottleneck analysis failed: ${err.message}`);\n    console.log('\\nFalling back to simulated analysis...');\n    \n    // Fallback to simulated data\n    console.log(`\\n📊 BOTTLENECK ANALYSIS RESULTS (SIMULATED):`);\n    console.log(`  🔴 CRITICAL: Memory usage in agent spawn process (85% utilization)`);\n    console.log(`  🟡 WARNING: Task queue processing (12s avg)`);\n    console.log(`  🟢 GOOD: Neural training pipeline (optimal)`);\n    console.log(`  🟢 GOOD: Swarm coordination latency (within limits)`);\n  }\n}\n\nasync function performanceReportCommand(subArgs, flags) {\n  const options = flags;\n  const timeframe = options.timeframe || '24h';\n  const format = options.format || 'summary';\n\n  console.log(`📈 Generating performance report...`);\n  console.log(`⏰ Timeframe: ${timeframe}`);\n  console.log(`📋 Format: ${format}`);\n\n  try {\n    // Initialize metrics system without starting monitoring\n    await initializeMetrics(false);\n    \n    // Get real performance data\n    const report = await getPerformanceReport(timeframe);\n    \n    printSuccess(`✅ Performance report generated`);\n\n    console.log(`\\n📊 PERFORMANCE SUMMARY (${timeframe}):`);\n    console.log(`  🚀 Total tasks executed: ${report.summary.totalTasks}`);\n    console.log(`  ✅ Success rate: ${report.summary.successRate.toFixed(1)}%`);\n    console.log(`  ⏱️  Average execution time: ${report.summary.avgDuration.toFixed(1)}s`);\n    console.log(`  🤖 Agents spawned: ${report.summary.agentsSpawned}`);\n    console.log(`  💾 Memory efficiency: ${report.summary.memoryEfficiency.toFixed(0)}%`);\n    console.log(`  🧠 Neural learning events: ${report.summary.neuralEvents}`);\n\n    // Show trends if available\n    if (report.trends) {\n      console.log(`\\n📈 TRENDS:`);\n      if (report.trends.successRateChange !== 0) {\n        const trend = report.trends.successRateChange > 0 ? 'improved' : 'decreased';\n        console.log(`  • Task success rate ${trend} ${Math.abs(report.trends.successRateChange).toFixed(1)}% vs previous period`);\n      }\n      if (report.trends.durationChange !== 0) {\n        const trend = report.trends.durationChange < 0 ? 'reduced' : 'increased';\n        console.log(`  • Average execution time ${trend} by ${Math.abs(report.trends.durationChange / 1000).toFixed(1)}s`);\n      }\n      if (report.trends.taskVolumeChange !== 0) {\n        const trend = report.trends.taskVolumeChange > 0 ? 'increased' : 'decreased';\n        const percent = Math.abs((report.trends.taskVolumeChange / report.summary.totalTasks) * 100).toFixed(0);\n        console.log(`  • Task volume ${trend} ${percent}%`);\n      }\n    }\n\n    if (format === 'detailed' && report.agentMetrics) {\n      console.log(`\\n📊 DETAILED METRICS:`);\n      console.log(`  Agent Performance:`);\n      Object.entries(report.agentMetrics).forEach(([type, metrics]) => {\n        console.log(`    - ${type} agents: ${metrics.successRate.toFixed(0)}% success, ${(metrics.avgDuration / 1000).toFixed(1)}s avg`);\n      });\n    }\n\n    // Export full report\n    const reportPath = await exportMetrics(format === 'json' ? 'json' : 'html');\n    console.log(`\\n📄 Full report: ${reportPath}`);\n    \n  } catch (err) {\n    printError(`Failed to generate performance report: ${err.message}`);\n    printWarning('Showing simulated data as fallback...');\n    \n    // Fallback to simulated data\n    console.log(`\\n📊 PERFORMANCE SUMMARY (${timeframe}) - SIMULATED:`);\n    console.log(`  🚀 Total tasks executed: 127`);\n    console.log(`  ✅ Success rate: 94.5%`);\n    console.log(`  ⏱️  Average execution time: 8.3s`);\n    console.log(`  🤖 Agents spawned: 23`);\n    console.log(`  💾 Memory efficiency: 78%`);\n    console.log(`  🧠 Neural learning events: 45`);\n  }\n}\n\nasync function tokenUsageCommand(subArgs, flags) {\n  const options = flags;\n  const agent = options.agent || 'all';\n  const breakdown = options.breakdown || false;\n  const costAnalysis = options['cost-analysis'] || false;\n\n  console.log(`🔢 Analyzing token usage...`);\n  console.log(`🤖 Agent filter: ${agent}`);\n  console.log(`📊 Include breakdown: ${breakdown ? 'Yes' : 'No'}`);\n  console.log(`💰 Include cost analysis: ${costAnalysis ? 'Yes' : 'No'}`);\n\n  try {\n    // Get real token usage from Claude Code metrics\n    const tokenData = await getRealTokenUsage(agent);\n    \n    printSuccess(`✅ Token usage analysis completed`);\n\n    // Check if we have any data\n    if (tokenData.total === 0) {\n      // Show instructions when no data available\n      await showSimulatedTokenUsage(breakdown, costAnalysis);\n      \n      // Still generate empty report for consistency\n      const reportPath = await generateTokenUsageReport(tokenData, agent);\n      console.log(`\\n📄 Detailed usage log: ${reportPath}`);\n    } else {\n      // Display real token usage\n      console.log(`\\n🔢 TOKEN USAGE SUMMARY:`);\n      console.log(`  📝 Total tokens consumed: ${tokenData.total.toLocaleString()}`);\n      console.log(`  📥 Input tokens: ${tokenData.input.toLocaleString()} (${((tokenData.input / tokenData.total) * 100).toFixed(1)}%)`);\n      console.log(`  📤 Output tokens: ${tokenData.output.toLocaleString()} (${((tokenData.output / tokenData.total) * 100).toFixed(1)}%)`);\n      \n      if (costAnalysis) {\n        const cost = calculateCost(tokenData);\n        console.log(`  💰 Estimated cost: $${cost.total.toFixed(2)}`);\n        console.log(`     Input cost: $${cost.input.toFixed(2)}`);\n        console.log(`     Output cost: $${cost.output.toFixed(2)}`);\n      }\n\n      if (breakdown && tokenData.byAgent) {\n        console.log(`\\n📊 BREAKDOWN BY AGENT TYPE:`);\n        Object.entries(tokenData.byAgent).forEach(([agentType, usage]) => {\n          const percentage = ((usage / tokenData.total) * 100).toFixed(1);\n          const icon = getAgentIcon(agentType);\n          console.log(`  ${icon} ${agentType}: ${usage.toLocaleString()} tokens (${percentage}%)`);\n        });\n\n        console.log(`\\n💡 OPTIMIZATION OPPORTUNITIES:`);\n        const opportunities = generateOptimizationSuggestions(tokenData);\n        opportunities.forEach(suggestion => {\n          console.log(`  • ${suggestion}`);\n        });\n      }\n\n      // Generate real CSV report\n      const reportPath = await generateTokenUsageReport(tokenData, agent);\n      console.log(`\\n📄 Detailed usage log: ${reportPath}`);\n    }\n    \n  } catch (err) {\n    printError(`Failed to get real token usage: ${err.message}`);\n    printWarning('Falling back to help instructions...');\n    \n    // Fallback to instructions\n    await showSimulatedTokenUsage(breakdown, costAnalysis);\n  }\n}\n\nfunction showAnalysisHelp() {\n  console.log(`\n📊 Analysis Commands - Performance & Usage Analytics\n\nUSAGE:\n  claude-flow analysis <command> [options]\n\nCOMMANDS:\n  setup-telemetry      Configure token tracking for Claude API calls\n  bottleneck-detect    Detect performance bottlenecks in the system\n  performance-report   Generate comprehensive performance reports\n  token-usage          Analyze token consumption and costs\n  claude-monitor       Monitor Claude session for real-time token usage\n  claude-cost          Get current Claude session cost and usage\n\nGLOBAL OPTIONS:\n  --enable-telemetry   Enable token tracking for this session\n  --help, -h           Show this help message\n\nTELEMETRY SETUP:\n  claude-flow analysis setup-telemetry\n  \n  This command will:\n  • Set CLAUDE_CODE_ENABLE_TELEMETRY=1 in your environment\n  • Create .env file with telemetry settings\n  • Initialize token tracking directory\n  • Show current telemetry status\n\nBOTTLENECK DETECT OPTIONS:\n  --scope <scope>      Analysis scope (default: system)\n                       Options: system, swarm, agent, task, memory\n  --target <target>    Specific target to analyze (default: all)\n                       Examples: agent-id, swarm-id, task-type\n\nPERFORMANCE REPORT OPTIONS:\n  --timeframe <time>   Report timeframe (default: 24h)\n                       Options: 1h, 6h, 24h, 7d, 30d\n  --format <format>    Report format (default: summary)\n                       Options: summary, detailed, json, csv\n\nTOKEN USAGE OPTIONS:\n  --agent <agent>      Filter by agent type or ID (default: all)\n  --breakdown          Include detailed breakdown by agent type\n  --cost-analysis      Include cost projections and optimization\n  --enable-telemetry   Enable token tracking for this session\n\nCLAUDE MONITOR OPTIONS:\n  --interval <ms>      Update interval in milliseconds (default: 5000)\n  \n  Usage: claude-flow analysis claude-monitor [session-id] [--interval 3000]\n  \n  Monitors a Claude session for real-time token usage updates.\n  Session ID defaults to 'current' if not specified.\n\nCLAUDE COST OPTIONS:\n  Usage: claude-flow analysis claude-cost\n  \n  Retrieves the current Claude session's token usage and cost estimate.\n  Works best when run during or immediately after a Claude session.\n\nEXAMPLES:\n  # First-time setup for token tracking\n  claude-flow analysis setup-telemetry\n\n  # Token usage with telemetry enabled\n  claude-flow analysis token-usage --enable-telemetry --breakdown\n\n  # Detect system-wide bottlenecks\n  claude-flow analysis bottleneck-detect --scope system\n\n  # Weekly performance report\n  claude-flow analysis performance-report --timeframe 7d --format detailed\n\n  # Token usage with full analysis\n  claude-flow analysis token-usage --breakdown --cost-analysis\n\n  # Monitor Claude session in real-time\n  claude-flow analysis claude-monitor\n\n  # Get current Claude session cost\n  claude-flow analysis claude-cost\n\n  # Run Claude with automatic token tracking\n  CLAUDE_CODE_ENABLE_TELEMETRY=1 claude-flow swarm \"task\" --claude\n\n🎯 Analysis helps with:\n  • Token usage tracking & cost management\n  • Performance optimization\n  • Resource allocation\n  • Bottleneck identification\n  • Trend analysis\n\n💡 TIP: Run 'analysis setup-telemetry' first to enable token tracking!\n`);\n}\n\n// Helper functions for real token tracking are now imported from token-tracker.js\n\nasync function claudeMonitorCommand(subArgs, flags) {\n  const sessionId = subArgs[1] || 'current';\n  const interval = flags.interval || 5000;\n  \n  console.log(`📊 Starting Claude session monitor...`);\n  console.log(`   Session ID: ${sessionId}`);\n  console.log(`   Update interval: ${interval / 1000}s`);\n  console.log(`   Press Ctrl+C to stop monitoring\\n`);\n  \n  try {\n    // Import the telemetry module\n    const { monitorClaudeSession } = await import('./claude-telemetry.js');\n    \n    // Start monitoring\n    const stopMonitor = await monitorClaudeSession(sessionId, interval);\n    \n    // Handle graceful shutdown\n    process.on('SIGINT', () => {\n      stopMonitor();\n      process.exit(0);\n    });\n    \n    // Keep process running\n    await new Promise(() => {});\n  } catch (error) {\n    printError(`Failed to start Claude monitor: ${error.message}`);\n    console.log('\\n💡 TIP: Make sure Claude is installed and accessible');\n  }\n}\n\nasync function claudeCostCommand(subArgs, flags) {\n  console.log(`💰 Retrieving Claude session cost information...`);\n  \n  try {\n    // Import the telemetry module\n    const { extractCostCommand } = await import('./claude-telemetry.js');\n    \n    // Get cost data\n    const costData = await extractCostCommand();\n    \n    console.log('\\n📊 Current Session Usage:');\n    console.log(`   Input Tokens:  ${costData.tokens.input || 0}`);\n    console.log(`   Output Tokens: ${costData.tokens.output || 0}`);\n    console.log(`   Total Tokens:  ${costData.tokens.total || 0}`);\n    \n    if (costData.costs.length > 0) {\n      console.log(`   Estimated Cost: $${costData.costs[0]}`);\n    }\n    \n    // Also show pricing info\n    console.log('\\n💰 Claude 3 Pricing:');\n    console.log('   • Opus:   $15/1M input, $75/1M output');\n    console.log('   • Sonnet: $3/1M input, $15/1M output');\n    console.log('   • Haiku:  $0.25/1M input, $1.25/1M output');\n    \n  } catch (error) {\n    printError(`Failed to retrieve cost data: ${error.message}`);\n    console.log('\\n💡 TIP: Run this while Claude is active or immediately after');\n  }\n}\n\nasync function showSimulatedTokenUsage(breakdown, costAnalysis) {\n  // Show honest message about no data instead of fake numbers\n  console.log(`\\n🔢 TOKEN USAGE ANALYSIS:`);\n  console.log(`  ℹ️ No token usage data available yet.`);\n  \n  console.log(`\\n📋 QUICK SETUP - Choose one option:`);\n  console.log(`\\n  Option 1: Enable Telemetry (Recommended)`);\n  console.log(`  ┌────────────────────────────────────────────────────────┐`);\n  console.log(`  │ ./claude-flow analysis setup-telemetry                │`);\n  console.log(`  └────────────────────────────────────────────────────────┘`);\n  \n  console.log(`\\n  Option 2: Manual Environment Variable`);\n  console.log(`  ┌────────────────────────────────────────────────────────┐`);\n  console.log(`  │ export CLAUDE_CODE_ENABLE_TELEMETRY=1                 │`);\n  console.log(`  └────────────────────────────────────────────────────────┘`);\n  \n  console.log(`\\n  Option 3: Use --enable-telemetry Flag`);\n  console.log(`  ┌────────────────────────────────────────────────────────┐`);\n  console.log(`  │ ./claude-flow analysis token-usage --enable-telemetry │`);\n  console.log(`  └────────────────────────────────────────────────────────┘`);\n  \n  console.log(`\\n✅ AFTER SETUP:`);\n  console.log(`  1. Run Claude commands: ./claude-flow swarm \"task\" --claude`);\n  console.log(`  2. Token usage will be automatically tracked`);\n  console.log(`  3. Return here to see real metrics`);\n  \n  if (costAnalysis) {\n    console.log(`\\n💰 COST TRACKING:`);\n    console.log(`  • Claude 3 Opus: $15/1M input, $75/1M output tokens`);\n    console.log(`  • Claude 3 Sonnet: $3/1M input, $15/1M output tokens`);\n    console.log(`  • Claude 3 Haiku: $0.25/1M input, $1.25/1M output tokens`);\n  }\n\n  if (breakdown) {\n    console.log(`\\n📊 AGENT BREAKDOWN:`);\n    console.log(`  • Each agent type's usage tracked separately`);\n    console.log(`  • Identifies high-consumption agents`);\n    console.log(`  • Provides optimization recommendations`);\n  }\n\n  console.log(`\\n❓ TROUBLESHOOTING:`);\n  console.log(`  • Check telemetry status: echo $CLAUDE_CODE_ENABLE_TELEMETRY`);\n  console.log(`  • View raw data: cat .claude-flow/metrics/token-usage.json`);\n  console.log(`  • Reset tracking: rm -rf .claude-flow/metrics/token-usage.json`);\n}\n"],"names":["printSuccess","printError","printWarning","promises","fs","path","fileURLToPath","dirname","initializeMetrics","getPerformanceReport","getBottleneckAnalysis","exportMetrics","getRealTokenUsage","calculateCost","generateOptimizationSuggestions","generateTokenUsageReport","getAgentIcon","__filename","url","__dirname","setupTelemetry","console","log","repeat","currentValue","process","env","CLAUDE_CODE_ENABLE_TELEMETRY","isEnabled","envPath","join","cwd","envContent","readFile","err","includes","writeFile","message","metricsDir","mkdir","recursive","tokenFile","data","tokenData","JSON","parse","totals","total","Object","keys","sessions","length","analysisAction","subArgs","flags","subcommand","options","help","h","showAnalysisHelp","bottleneckDetectCommand","performanceReportCommand","tokenUsageCommand","claudeMonitorCommand","claudeCostCommand","scope","target","analysis","bottlenecks","forEach","bottleneck","icon","severity","toUpperCase","component","metric","details","detail","type","id","duration","recommendations","rec","analysisDuration","toFixed","confidenceScore","issuesDetected","reportPath","Date","now","stringify","timeframe","format","report","summary","totalTasks","successRate","avgDuration","agentsSpawned","memoryEfficiency","neuralEvents","trends","successRateChange","trend","Math","abs","durationChange","taskVolumeChange","percent","agentMetrics","entries","metrics","agent","breakdown","costAnalysis","showSimulatedTokenUsage","toLocaleString","input","output","cost","byAgent","agentType","usage","percentage","opportunities","suggestion","sessionId","interval","monitorClaudeSession","stopMonitor","on","exit","Promise","error","extractCostCommand","costData","tokens","costs"],"mappings":"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"}