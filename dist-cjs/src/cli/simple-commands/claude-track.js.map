{"version":3,"sources":["../../../../src/cli/simple-commands/claude-track.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Claude Token Tracking - Extracts token usage from Claude sessions\n * Works in background without interfering with Claude CLI\n */\n\nimport { spawn } from 'child_process';\nimport { trackTokens } from './token-tracker.js';\n\n/**\n * Parse token information from Claude telemetry output\n */\nfunction parseTokensFromTelemetry(data) {\n  try {\n    // Look for lines containing token information\n    const lines = data.split('\\n');\n    \n    for (const line of lines) {\n      if (line.includes('api_request') && line.includes('attributes')) {\n        // Try to extract from structured output\n        const match = line.match(/input_tokens['\":\\s]+(\\d+).*output_tokens['\":\\s]+(\\d+)/);\n        if (match) {\n          return {\n            inputTokens: parseInt(match[1]),\n            outputTokens: parseInt(match[2])\n          };\n        }\n      }\n      \n      // Also look for simpler patterns\n      if (line.includes('input_tokens:') || line.includes('output_tokens:')) {\n        const inputMatch = line.match(/input_tokens:\\s*'?(\\d+)'?/);\n        const outputMatch = line.match(/output_tokens:\\s*'?(\\d+)'?/);\n        \n        if (inputMatch || outputMatch) {\n          return {\n            inputTokens: inputMatch ? parseInt(inputMatch[1]) : 0,\n            outputTokens: outputMatch ? parseInt(outputMatch[1]) : 0\n          };\n        }\n      }\n    }\n  } catch (error) {\n    // Silently ignore parse errors\n  }\n  \n  return null;\n}\n\n/**\n * Background token tracker for Claude sessions\n */\nexport async function trackClaudeSession() {\n  console.log('🔍 Claude token tracker started (running in background)');\n  console.log('   Token usage will be saved to .claude-flow/metrics/token-usage.json');\n  \n  let totalInput = 0;\n  let totalOutput = 0;\n  let lastUpdate = Date.now();\n  \n  // Monitor Claude's telemetry output\n  process.stdin.on('data', async (data) => {\n    const output = data.toString();\n    const tokens = parseTokensFromTelemetry(output);\n    \n    if (tokens && (tokens.inputTokens > 0 || tokens.outputTokens > 0)) {\n      totalInput += tokens.inputTokens;\n      totalOutput += tokens.outputTokens;\n      \n      // Track tokens\n      await trackTokens({\n        sessionId: `claude-session-${Date.now()}`,\n        agentType: 'claude-cli',\n        command: 'interactive',\n        inputTokens: tokens.inputTokens,\n        outputTokens: tokens.outputTokens,\n        metadata: {\n          source: 'telemetry_stream'\n        }\n      });\n      \n      // Show update every 10 seconds max\n      if (Date.now() - lastUpdate > 10000) {\n        console.log(`📊 Token Update: Input: ${totalInput}, Output: ${totalOutput}`);\n        lastUpdate = Date.now();\n      }\n    }\n  });\n  \n  // Handle shutdown\n  process.on('SIGINT', () => {\n    console.log(`\\n📊 Session Total: Input: ${totalInput}, Output: ${totalOutput}`);\n    console.log('✅ Token tracking data saved');\n    process.exit(0);\n  });\n}\n\n// CLI interface\nif (import.meta.url === `file://${process.argv[1]}`) {\n  trackClaudeSession();\n}"],"names":["trackTokens","parseTokensFromTelemetry","data","lines","split","line","includes","match","inputTokens","parseInt","outputTokens","inputMatch","outputMatch","error","trackClaudeSession","console","log","totalInput","totalOutput","lastUpdate","Date","now","process","stdin","on","output","toString","tokens","sessionId","agentType","command","metadata","source","exit","url","argv"],"mappings":";AAQA,SAASA,WAAW,QAAQ,qBAAqB;AAKjD,SAASC,yBAAyBC,IAAI;IACpC,IAAI;QAEF,MAAMC,QAAQD,KAAKE,KAAK,CAAC;QAEzB,KAAK,MAAMC,QAAQF,MAAO;YACxB,IAAIE,KAAKC,QAAQ,CAAC,kBAAkBD,KAAKC,QAAQ,CAAC,eAAe;gBAE/D,MAAMC,QAAQF,KAAKE,KAAK,CAAC;gBACzB,IAAIA,OAAO;oBACT,OAAO;wBACLC,aAAaC,SAASF,KAAK,CAAC,EAAE;wBAC9BG,cAAcD,SAASF,KAAK,CAAC,EAAE;oBACjC;gBACF;YACF;YAGA,IAAIF,KAAKC,QAAQ,CAAC,oBAAoBD,KAAKC,QAAQ,CAAC,mBAAmB;gBACrE,MAAMK,aAAaN,KAAKE,KAAK,CAAC;gBAC9B,MAAMK,cAAcP,KAAKE,KAAK,CAAC;gBAE/B,IAAII,cAAcC,aAAa;oBAC7B,OAAO;wBACLJ,aAAaG,aAAaF,SAASE,UAAU,CAAC,EAAE,IAAI;wBACpDD,cAAcE,cAAcH,SAASG,WAAW,CAAC,EAAE,IAAI;oBACzD;gBACF;YACF;QACF;IACF,EAAE,OAAOC,OAAO,CAEhB;IAEA,OAAO;AACT;AAKA,OAAO,eAAeC;IACpBC,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZ,IAAIC,aAAa;IACjB,IAAIC,cAAc;IAClB,IAAIC,aAAaC,KAAKC,GAAG;IAGzBC,QAAQC,KAAK,CAACC,EAAE,CAAC,QAAQ,OAAOtB;QAC9B,MAAMuB,SAASvB,KAAKwB,QAAQ;QAC5B,MAAMC,SAAS1B,yBAAyBwB;QAExC,IAAIE,UAAWA,CAAAA,OAAOnB,WAAW,GAAG,KAAKmB,OAAOjB,YAAY,GAAG,CAAA,GAAI;YACjEO,cAAcU,OAAOnB,WAAW;YAChCU,eAAeS,OAAOjB,YAAY;YAGlC,MAAMV,YAAY;gBAChB4B,WAAW,CAAC,eAAe,EAAER,KAAKC,GAAG,IAAI;gBACzCQ,WAAW;gBACXC,SAAS;gBACTtB,aAAamB,OAAOnB,WAAW;gBAC/BE,cAAciB,OAAOjB,YAAY;gBACjCqB,UAAU;oBACRC,QAAQ;gBACV;YACF;YAGA,IAAIZ,KAAKC,GAAG,KAAKF,aAAa,OAAO;gBACnCJ,QAAQC,GAAG,CAAC,CAAC,wBAAwB,EAAEC,WAAW,UAAU,EAAEC,aAAa;gBAC3EC,aAAaC,KAAKC,GAAG;YACvB;QACF;IACF;IAGAC,QAAQE,EAAE,CAAC,UAAU;QACnBT,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAEC,WAAW,UAAU,EAAEC,aAAa;QAC9EH,QAAQC,GAAG,CAAC;QACZM,QAAQW,IAAI,CAAC;IACf;AACF;AAGA,IAAI,YAAYC,GAAG,KAAK,CAAC,OAAO,EAAEZ,QAAQa,IAAI,CAAC,EAAE,EAAE,EAAE;IACnDrB;AACF"}