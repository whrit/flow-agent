{"version":3,"sources":["../../../../../src/cli/simple-commands/init/executable-wrapper.js"],"sourcesContent":["// executable-wrapper.js - Create local executable wrapper\n\nimport { writeFile, chmod } from 'fs/promises';\nimport { platform } from 'os';\n\nexport async function createLocalExecutable(workingDir, dryRun = false) {\n  try {\n    if (platform() === 'win32') {\n      // Create Windows batch file\n      const wrapperScript = `@echo off\nREM Claude-Flow local wrapper\nREM This script ensures claude-flow runs from your project directory\n\nset PROJECT_DIR=%CD%\nset PWD=%PROJECT_DIR%\nset CLAUDE_WORKING_DIR=%PROJECT_DIR%\n\nREM Try to find claude-flow binary\nREM Check common locations for npm/npx installations\n\nREM 1. Local node_modules (npm install claude-flow)\nif exist \"%PROJECT_DIR%\\\\node_modules\\\\.bin\\\\claude-flow.cmd\" (\n  cd /d \"%PROJECT_DIR%\"\n  \"%PROJECT_DIR%\\\\node_modules\\\\.bin\\\\claude-flow.cmd\" %*\n  exit /b %ERRORLEVEL%\n)\n\nREM 2. Parent directory node_modules (monorepo setup)\nif exist \"%PROJECT_DIR%\\\\..\\\\node_modules\\\\.bin\\\\claude-flow.cmd\" (\n  cd /d \"%PROJECT_DIR%\"\n  \"%PROJECT_DIR%\\\\..\\\\node_modules\\\\.bin\\\\claude-flow.cmd\" %*\n  exit /b %ERRORLEVEL%\n)\n\nREM 3. Global installation (npm install -g claude-flow)\nwhere claude-flow >nul 2>nul\nif %ERRORLEVEL% EQU 0 (\n  cd /d \"%PROJECT_DIR%\"\n  claude-flow %*\n  exit /b %ERRORLEVEL%\n)\n\nREM 4. Fallback to npx (will download if needed)\ncd /d \"%PROJECT_DIR%\"\nnpx claude-flow@latest %*\n`;\n\n      // Write the Windows batch file\n      if (!dryRun) {\n        await writeFile(`${workingDir}/claude-flow.cmd`, wrapperScript, 'utf8');\n        console.log('  ✓ Created local claude-flow.cmd executable wrapper');\n        console.log('    You can now use: claude-flow instead of npx claude-flow');\n      }\n    } else {\n      // Check if we're in development mode (claude-code-flow repo)\n      const isDevelopment = workingDir.includes('claude-code-flow');\n      const devBinPath = isDevelopment\n        ? workingDir.split('claude-code-flow')[0] + 'claude-code-flow/bin/claude-flow'\n        : '';\n\n      // Create Unix/Linux/Mac shell script\n      const wrapperScript = `#!/usr/bin/env bash\n# Claude-Flow local wrapper\n# This script ensures claude-flow runs from your project directory\n\n# Save the current directory\nPROJECT_DIR=\"\\${PWD}\"\n\n# Set environment to ensure correct working directory\nexport PWD=\"\\${PROJECT_DIR}\"\nexport CLAUDE_WORKING_DIR=\"\\${PROJECT_DIR}\"\n\n# Try to find claude-flow binary\n# Check common locations for npm/npx installations\n\n${\n  isDevelopment\n    ? `# Development mode - use local bin\nif [ -f \"${devBinPath}\" ]; then\n  cd \"\\${PROJECT_DIR}\"\n  exec \"${devBinPath}\" \"$@\"\nfi\n\n`\n    : ''\n}# 1. Local node_modules (npm install claude-flow)\nif [ -f \"\\${PROJECT_DIR}/node_modules/.bin/claude-flow\" ]; then\n  cd \"\\${PROJECT_DIR}\"\n  exec \"\\${PROJECT_DIR}/node_modules/.bin/claude-flow\" \"$@\"\n\n# 2. Parent directory node_modules (monorepo setup)\nelif [ -f \"\\${PROJECT_DIR}/../node_modules/.bin/claude-flow\" ]; then\n  cd \"\\${PROJECT_DIR}\"\n  exec \"\\${PROJECT_DIR}/../node_modules/.bin/claude-flow\" \"$@\"\n\n# 3. Global installation (npm install -g claude-flow)\nelif command -v claude-flow &> /dev/null; then\n  cd \"\\${PROJECT_DIR}\"\n  exec claude-flow \"$@\"\n\n# 4. Fallback to npx (will download if needed)\nelse\n  cd \"\\${PROJECT_DIR}\"\n  exec npx claude-flow@latest \"$@\"\nfi\n`;\n\n      // Write the wrapper script\n      if (!dryRun) {\n        await writeFile(`${workingDir}/claude-flow`, wrapperScript, 'utf8');\n\n        // Make it executable\n        await chmod(`${workingDir}/claude-flow`, 0o755);\n\n        console.log('  ✓ Created local claude-flow executable wrapper');\n        console.log('    You can now use: ./claude-flow instead of npx claude-flow');\n      }\n    }\n  } catch (err) {\n    console.log(`  ⚠️  Could not create local executable: ${err.message}`);\n  }\n}\n"],"names":["writeFile","chmod","platform","createLocalExecutable","workingDir","dryRun","wrapperScript","console","log","isDevelopment","includes","devBinPath","split","err","message"],"mappings":"AAEA,SAASA,SAAS,EAAEC,KAAK,QAAQ,cAAc;AAC/C,SAASC,QAAQ,QAAQ,KAAK;AAE9B,OAAO,eAAeC,sBAAsBC,UAAU,EAAEC,SAAS,KAAK;IACpE,IAAI;QACF,IAAIH,eAAe,SAAS;YAE1B,MAAMI,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoC7B,CAAC;YAGK,IAAI,CAACD,QAAQ;gBACX,MAAML,UAAU,GAAGI,WAAW,gBAAgB,CAAC,EAAEE,eAAe;gBAChEC,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;QACF,OAAO;YAEL,MAAMC,gBAAgBL,WAAWM,QAAQ,CAAC;YAC1C,MAAMC,aAAaF,gBACfL,WAAWQ,KAAK,CAAC,mBAAmB,CAAC,EAAE,GAAG,qCAC1C;YAGJ,MAAMN,gBAAgB,CAAC;;;;;;;;;;;;;;AAc7B,EACEG,gBACI,CAAC;SACE,EAAEE,WAAW;;QAEd,EAAEA,WAAW;;;AAGrB,CAAC,GACK,GACL;;;;;;;;;;;;;;;;;;;;AAoBD,CAAC;YAGK,IAAI,CAACN,QAAQ;gBACX,MAAML,UAAU,GAAGI,WAAW,YAAY,CAAC,EAAEE,eAAe;gBAG5D,MAAML,MAAM,GAAGG,WAAW,YAAY,CAAC,EAAE;gBAEzCG,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC;YACd;QACF;IACF,EAAE,OAAOK,KAAK;QACZN,QAAQC,GAAG,CAAC,CAAC,yCAAyC,EAAEK,IAAIC,OAAO,EAAE;IACvE;AACF"}