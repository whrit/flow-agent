{"version":3,"sources":["../../../../../src/cli/simple-commands/init/agent-copier.js"],"sourcesContent":["// agent-copier.js - Copy all agent files during initialization\nimport { promises as fs } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n/**\n * Copy all agent files from the installed package to project directory\n */\nexport async function copyAgentFiles(targetDir, options = {}) {\n  const { force = false, dryRun = false } = options;\n  \n  // Path to agent files - try multiple locations\n  const packageAgentsDir = join(__dirname, '../../../../.claude/agents'); // From npm package\n  const localAgentsDir = '/workspaces/claude-code-flow/.claude/agents';   // Local development\n  const cwdAgentsDir = join(process.cwd(), '.claude/agents');              // Current working directory\n  \n  let sourceAgentsDir;\n  \n  // Try local development first, then package, then cwd\n  try {\n    await fs.access(localAgentsDir);\n    sourceAgentsDir = localAgentsDir;\n    console.log('  📁 Using local development agent files');\n  } catch {\n    try {\n      await fs.access(packageAgentsDir);\n      sourceAgentsDir = packageAgentsDir;\n      console.log('  📁 Using packaged agent files');\n    } catch {\n      try {\n        await fs.access(cwdAgentsDir);\n        sourceAgentsDir = cwdAgentsDir;\n        console.log('  📁 Using current directory agent files');\n      } catch {\n        console.log('  ⚠️  No agent files found in any location');\n        return { success: false, error: 'Agent files not found' };\n      }\n    }\n  }\n  const targetAgentsDir = join(targetDir, '.claude/agents');\n  \n  console.log('📁 Copying agent system files...');\n  console.log(`  📂 Source: ${sourceAgentsDir}`);\n  console.log(`  📂 Target: ${targetAgentsDir}`);\n  \n  try {\n    \n    // Create target directory\n    if (!dryRun) {\n      await fs.mkdir(targetAgentsDir, { recursive: true });\n    }\n    \n    const copiedFiles = [];\n    const errors = [];\n    \n    // Recursively copy all agent files\n    async function copyRecursive(srcDir, destDir) {\n      const items = await fs.readdir(srcDir, { withFileTypes: true });\n      \n      for (const item of items) {\n        const srcPath = join(srcDir, item.name);\n        const destPath = join(destDir, item.name);\n        \n        if (item.isDirectory()) {\n          if (!dryRun) {\n            await fs.mkdir(destPath, { recursive: true });\n          }\n          await copyRecursive(srcPath, destPath);\n        } else if (item.isFile() && item.name.endsWith('.md')) {\n          try {\n            // Check if file already exists\n            let shouldCopy = force;\n            if (!force) {\n              try {\n                await fs.access(destPath);\n                // File exists, skip unless force is true\n                continue;\n              } catch {\n                // File doesn't exist, safe to copy\n                shouldCopy = true;\n              }\n            }\n            \n            if (shouldCopy && !dryRun) {\n              const content = await fs.readFile(srcPath, 'utf8');\n              await fs.writeFile(destPath, content, 'utf8');\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            } else if (dryRun) {\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            }\n          } catch (err) {\n            errors.push(`Failed to copy ${item.name}: ${err.message}`);\n          }\n        }\n      }\n    }\n    \n    await copyRecursive(sourceAgentsDir, targetAgentsDir);\n    \n    if (!dryRun && copiedFiles.length > 0) {\n      console.log(`  ✅ Copied ${copiedFiles.length} agent files`);\n      console.log('  📋 Agent system initialized with 64 specialized agents');\n      console.log('  🎯 Available categories: Core, Swarm, Consensus, Performance, GitHub, SPARC, Testing');\n    } else if (dryRun) {\n      console.log(`  [DRY RUN] Would copy ${copiedFiles.length} agent files`);\n    }\n    \n    if (errors.length > 0) {\n      console.log('  ⚠️  Some agent files could not be copied:');\n      errors.forEach(error => console.log(`    - ${error}`));\n    }\n    \n    return {\n      success: true,\n      copiedFiles,\n      errors,\n      totalAgents: copiedFiles.length\n    };\n    \n  } catch (err) {\n    console.log(`  ❌ Failed to copy agent files: ${err.message}`);\n    return {\n      success: false,\n      error: err.message,\n      copiedFiles: [],\n      errors: [err.message]\n    };\n  }\n}\n\n/**\n * Create agent directories structure\n */\nexport async function createAgentDirectories(targetDir, dryRun = false) {\n  const agentDirs = [\n    '.claude',\n    '.claude/agents',\n    '.claude/agents/core',\n    '.claude/agents/swarm', \n    '.claude/agents/hive-mind',\n    '.claude/agents/consensus',\n    '.claude/agents/optimization',\n    '.claude/agents/github',\n    '.claude/agents/sparc',\n    '.claude/agents/testing',\n    '.claude/agents/testing/unit',\n    '.claude/agents/testing/validation',\n    '.claude/agents/templates',\n    '.claude/agents/analysis',\n    '.claude/agents/analysis/code-review',\n    '.claude/agents/architecture',\n    '.claude/agents/architecture/system-design',\n    '.claude/agents/data',\n    '.claude/agents/data/ml',\n    '.claude/agents/development',\n    '.claude/agents/development/backend',\n    '.claude/agents/devops',\n    '.claude/agents/devops/ci-cd',\n    '.claude/agents/documentation',\n    '.claude/agents/documentation/api-docs',\n    '.claude/agents/specialized',\n    '.claude/agents/specialized/mobile',\n    '.claude/agents/flow-nexus',\n    '.claude/commands',\n    '.claude/commands/flow-nexus'\n  ];\n  \n  if (dryRun) {\n    console.log(`  [DRY RUN] Would create ${agentDirs.length} agent directories`);\n    return;\n  }\n  \n  for (const dir of agentDirs) {\n    await fs.mkdir(join(targetDir, dir), { recursive: true });\n  }\n  \n  console.log(`  ✅ Created ${agentDirs.length} agent directories`);\n}\n\n/**\n * Validate agent system after copying\n */\n/**\n * Copy all command files from the installed package to project directory\n */\nexport async function copyCommandFiles(targetDir, options = {}) {\n  const { force = false, dryRun = false } = options;\n  \n  // Path to command files - try multiple locations\n  const packageCommandsDir = join(__dirname, '../../../../.claude/commands'); // From npm package\n  const localCommandsDir = '/workspaces/claude-code-flow/.claude/commands';   // Local development\n  const cwdCommandsDir = join(process.cwd(), '.claude/commands');              // Current working directory\n  \n  let sourceCommandsDir;\n  \n  // Try local development first, then package, then cwd\n  try {\n    await fs.access(localCommandsDir);\n    sourceCommandsDir = localCommandsDir;\n    console.log('  📁 Using local development command files');\n  } catch {\n    try {\n      await fs.access(packageCommandsDir);\n      sourceCommandsDir = packageCommandsDir;\n      console.log('  📁 Using packaged command files');\n    } catch {\n      try {\n        await fs.access(cwdCommandsDir);\n        sourceCommandsDir = cwdCommandsDir;\n        console.log('  📁 Using current directory command files');\n      } catch {\n        console.log('  ⚠️  No command files found in any location');\n        return { success: false, error: 'Command files not found' };\n      }\n    }\n  }\n  \n  const targetCommandsDir = join(targetDir, '.claude/commands');\n  \n  console.log('📁 Copying command system files...');\n  console.log(`  📂 Source: ${sourceCommandsDir}`);\n  console.log(`  📂 Target: ${targetCommandsDir}`);\n  \n  try {\n    // Create target directory\n    if (!dryRun) {\n      await fs.mkdir(targetCommandsDir, { recursive: true });\n    }\n    \n    const copiedFiles = [];\n    const errors = [];\n    \n    // Recursively copy all command files\n    async function copyRecursive(srcDir, destDir) {\n      const items = await fs.readdir(srcDir, { withFileTypes: true });\n      \n      for (const item of items) {\n        const srcPath = join(srcDir, item.name);\n        const destPath = join(destDir, item.name);\n        \n        if (item.isDirectory()) {\n          if (!dryRun) {\n            await fs.mkdir(destPath, { recursive: true });\n          }\n          await copyRecursive(srcPath, destPath);\n        } else if (item.isFile() && item.name.endsWith('.md')) {\n          try {\n            // Check if file already exists\n            let shouldCopy = force;\n            if (!force) {\n              try {\n                await fs.access(destPath);\n                // File exists, skip unless force is true\n                continue;\n              } catch {\n                // File doesn't exist, safe to copy\n                shouldCopy = true;\n              }\n            }\n            \n            if (shouldCopy && !dryRun) {\n              const content = await fs.readFile(srcPath, 'utf8');\n              await fs.writeFile(destPath, content, 'utf8');\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            } else if (dryRun) {\n              copiedFiles.push(destPath.replace(targetDir + '/', ''));\n            }\n          } catch (err) {\n            errors.push(`Failed to copy ${item.name}: ${err.message}`);\n          }\n        }\n      }\n    }\n    \n    await copyRecursive(sourceCommandsDir, targetCommandsDir);\n    \n    if (!dryRun && copiedFiles.length > 0) {\n      console.log(`  ✅ Copied ${copiedFiles.length} command files`);\n      console.log('  📋 Command system initialized with comprehensive documentation');\n      console.log('  🎯 Available categories: Analysis, Automation, GitHub, Hooks, Memory, Flow Nexus');\n    } else if (dryRun) {\n      console.log(`  [DRY RUN] Would copy ${copiedFiles.length} command files`);\n    }\n    \n    if (errors.length > 0) {\n      console.log('  ⚠️  Some command files could not be copied:');\n      errors.forEach(error => console.log(`    - ${error}`));\n    }\n    \n    return {\n      success: true,\n      copiedFiles,\n      errors,\n      totalCommands: copiedFiles.length\n    };\n    \n  } catch (err) {\n    console.log(`  ❌ Failed to copy command files: ${err.message}`);\n    return {\n      success: false,\n      error: err.message,\n      copiedFiles: [],\n      errors: [err.message]\n    };\n  }\n}\n\nexport async function validateAgentSystem(targetDir) {\n  const agentsDir = join(targetDir, '.claude/agents');\n  \n  try {\n    const categories = await fs.readdir(agentsDir, { withFileTypes: true });\n    const agentCategories = categories.filter(item => item.isDirectory()).map(item => item.name);\n    \n    let totalAgents = 0;\n    for (const category of agentCategories) {\n      const categoryPath = join(agentsDir, category);\n      const items = await fs.readdir(categoryPath, { withFileTypes: true });\n      const agentFiles = items.filter(item => item.isFile() && item.name.endsWith('.md'));\n      totalAgents += agentFiles.length;\n    }\n    \n    console.log('  🔍 Agent system validation:');\n    console.log(`    • Categories: ${agentCategories.length}`);\n    console.log(`    • Total agents: ${totalAgents}`);\n    console.log(`    • Categories: ${agentCategories.join(', ')}`);\n    \n    return {\n      valid: totalAgents > 50, // Should have at least 50+ agents\n      categories: agentCategories.length,\n      totalAgents,\n      categoryNames: agentCategories\n    };\n    \n  } catch (err) {\n    console.log(`  ⚠️  Agent system validation failed: ${err.message}`);\n    return {\n      valid: false,\n      error: err.message\n    };\n  }\n}"],"names":["promises","fs","join","dirname","fileURLToPath","__filename","url","__dirname","copyAgentFiles","targetDir","options","force","dryRun","packageAgentsDir","localAgentsDir","cwdAgentsDir","process","cwd","sourceAgentsDir","access","console","log","success","error","targetAgentsDir","mkdir","recursive","copiedFiles","errors","copyRecursive","srcDir","destDir","items","readdir","withFileTypes","item","srcPath","name","destPath","isDirectory","isFile","endsWith","shouldCopy","content","readFile","writeFile","push","replace","err","message","length","forEach","totalAgents","createAgentDirectories","agentDirs","dir","copyCommandFiles","packageCommandsDir","localCommandsDir","cwdCommandsDir","sourceCommandsDir","targetCommandsDir","totalCommands","validateAgentSystem","agentsDir","categories","agentCategories","filter","map","category","categoryPath","agentFiles","valid","categoryNames"],"mappings":"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"}