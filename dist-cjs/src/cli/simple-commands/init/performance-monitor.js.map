{"version":3,"sources":["../../../../../src/cli/simple-commands/init/performance-monitor.js"],"sourcesContent":["// performance-monitor.js - Performance monitoring for batch operations\nimport { printInfo } from '../../utils.js';\n\nexport class PerformanceMonitor {\n  constructor(options = {}) {\n    this.enabled = options.enabled !== false;\n    this.logLevel = options.logLevel || 'info';\n    this.memoryCheckInterval = options.memoryCheckInterval || 5000; // 5 seconds\n    this.maxMemoryMB = options.maxMemoryMB || 1024; // 1GB default limit\n\n    this.metrics = {\n      startTime: null,\n      endTime: null,\n      peakMemoryMB: 0,\n      averageMemoryMB: 0,\n      operationCount: 0,\n      memoryReadings: [],\n      errors: [],\n      warnings: [],\n    };\n\n    this.memoryMonitor = null;\n  }\n\n  start() {\n    if (!this.enabled) return;\n\n    this.metrics.startTime = Date.now();\n    this.startMemoryMonitoring();\n\n    if (this.logLevel === 'debug') {\n      console.log('üîç Performance monitoring started');\n    }\n  }\n\n  stop() {\n    if (!this.enabled) return;\n\n    this.metrics.endTime = Date.now();\n    this.stopMemoryMonitoring();\n    this.calculateAverages();\n\n    if (this.logLevel === 'debug') {\n      console.log('üîç Performance monitoring stopped');\n    }\n  }\n\n  startMemoryMonitoring() {\n    if (typeof Deno !== 'undefined' && Deno.memoryUsage) {\n      this.memoryMonitor = setInterval(() => {\n        const memUsage = Deno.memoryUsage();\n        const memoryMB = memUsage.rss / 1024 / 1024;\n\n        this.metrics.memoryReadings.push({\n          timestamp: Date.now(),\n          memoryMB: memoryMB,\n        });\n\n        if (memoryMB > this.metrics.peakMemoryMB) {\n          this.metrics.peakMemoryMB = memoryMB;\n        }\n\n        // Check memory limit\n        if (memoryMB > this.maxMemoryMB) {\n          this.metrics.warnings.push({\n            timestamp: Date.now(),\n            type: 'memory',\n            message: `Memory usage ${memoryMB.toFixed(1)}MB exceeds limit ${this.maxMemoryMB}MB`,\n          });\n        }\n      }, this.memoryCheckInterval);\n    }\n  }\n\n  stopMemoryMonitoring() {\n    if (this.memoryMonitor) {\n      clearInterval(this.memoryMonitor);\n      this.memoryMonitor = null;\n    }\n  }\n\n  calculateAverages() {\n    if (this.metrics.memoryReadings.length > 0) {\n      const totalMemory = this.metrics.memoryReadings.reduce(\n        (sum, reading) => sum + reading.memoryMB,\n        0,\n      );\n      this.metrics.averageMemoryMB = totalMemory / this.metrics.memoryReadings.length;\n    }\n  }\n\n  recordOperation(operationType, details = {}) {\n    if (!this.enabled) return;\n\n    this.metrics.operationCount++;\n\n    if (this.logLevel === 'debug') {\n      console.log(`üìä Operation: ${operationType}`, details);\n    }\n  }\n\n  recordError(error, context = {}) {\n    if (!this.enabled) return;\n\n    this.metrics.errors.push({\n      timestamp: Date.now(),\n      error: error.message || error,\n      context,\n    });\n\n    if (this.logLevel === 'debug') {\n      console.log('‚ùå Error recorded:', error.message || error);\n    }\n  }\n\n  recordWarning(message, context = {}) {\n    if (!this.enabled) return;\n\n    this.metrics.warnings.push({\n      timestamp: Date.now(),\n      type: 'warning',\n      message,\n      context,\n    });\n\n    if (this.logLevel === 'debug') {\n      console.log('‚ö†Ô∏è Warning recorded:', message);\n    }\n  }\n\n  getMetrics() {\n    const duration = this.metrics.endTime - this.metrics.startTime;\n\n    return {\n      ...this.metrics,\n      duration,\n      operationsPerSecond: this.metrics.operationCount / (duration / 1000),\n      memoryEfficiency: this.metrics.peakMemoryMB < this.maxMemoryMB * 0.8 ? 'good' : 'warning',\n    };\n  }\n\n  generateReport() {\n    if (!this.enabled) return 'Performance monitoring disabled';\n\n    const metrics = this.getMetrics();\n\n    let report = '\\nüìä Performance Report\\n';\n    report += '====================\\n';\n    report += `Duration: ${(metrics.duration / 1000).toFixed(2)}s\\n`;\n    report += `Operations: ${metrics.operationCount}\\n`;\n    report += `Operations/sec: ${metrics.operationsPerSecond.toFixed(2)}\\n`;\n    report += `Peak Memory: ${metrics.peakMemoryMB.toFixed(1)}MB\\n`;\n    report += `Average Memory: ${metrics.averageMemoryMB.toFixed(1)}MB\\n`;\n    report += `Memory Efficiency: ${metrics.memoryEfficiency}\\n`;\n\n    if (metrics.errors.length > 0) {\n      report += `\\n‚ùå Errors: ${metrics.errors.length}\\n`;\n      metrics.errors.slice(-3).forEach((error) => {\n        report += `  - ${error.error}\\n`;\n      });\n    }\n\n    if (metrics.warnings.length > 0) {\n      report += `\\n‚ö†Ô∏è  Warnings: ${metrics.warnings.length}\\n`;\n      metrics.warnings.slice(-3).forEach((warning) => {\n        report += `  - ${warning.message}\\n`;\n      });\n    }\n\n    return report;\n  }\n\n  // Real-time monitoring display\n  displayRealTimeStats() {\n    if (!this.enabled) return;\n\n    const currentTime = Date.now();\n    const elapsed = this.metrics.startTime ? (currentTime - this.metrics.startTime) / 1000 : 0;\n\n    let currentMemory = '‚Äî';\n    if (typeof Deno !== 'undefined' && Deno.memoryUsage) {\n      const memUsage = Deno.memoryUsage();\n      currentMemory = `${(memUsage.rss / 1024 / 1024).toFixed(1)}MB`;\n    }\n\n    console.log(\n      `‚è±Ô∏è  ${elapsed.toFixed(1)}s | üíæ ${currentMemory} | üîÑ ${this.metrics.operationCount} ops`,\n    );\n  }\n}\n\n// Resource threshold monitor\nexport class ResourceThresholdMonitor {\n  constructor(options = {}) {\n    this.maxMemoryMB = options.maxMemoryMB || 1024;\n    this.maxCPUPercent = options.maxCPUPercent || 80;\n    this.checkInterval = options.checkInterval || 2000;\n\n    this.isMonitoring = false;\n    this.monitorInterval = null;\n    this.callbacks = {\n      memoryWarning: options.onMemoryWarning || (() => {}),\n      memoryError: options.onMemoryError || (() => {}),\n      cpuWarning: options.onCPUWarning || (() => {}),\n    };\n  }\n\n  start() {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    this.monitorInterval = setInterval(() => {\n      this.checkResources();\n    }, this.checkInterval);\n  }\n\n  stop() {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    if (this.monitorInterval) {\n      clearInterval(this.monitorInterval);\n      this.monitorInterval = null;\n    }\n  }\n\n  checkResources() {\n    if (typeof Deno !== 'undefined' && Deno.memoryUsage) {\n      const memUsage = Deno.memoryUsage();\n      const memoryMB = memUsage.rss / 1024 / 1024;\n\n      const warningThreshold = this.maxMemoryMB * 0.8;\n      const errorThreshold = this.maxMemoryMB * 0.95;\n\n      if (memoryMB > errorThreshold) {\n        this.callbacks.memoryError(memoryMB, this.maxMemoryMB);\n      } else if (memoryMB > warningThreshold) {\n        this.callbacks.memoryWarning(memoryMB, this.maxMemoryMB);\n      }\n    }\n  }\n\n  static createDefaultCallbacks() {\n    return {\n      onMemoryWarning: (current, max) => {\n        printInfo(`‚ö†Ô∏è Memory usage high: ${current.toFixed(1)}MB / ${max}MB`);\n      },\n      onMemoryError: (current, max) => {\n        console.error(`‚ùå Memory usage critical: ${current.toFixed(1)}MB / ${max}MB`);\n        console.error('Consider reducing batch size or max concurrency');\n      },\n      onCPUWarning: (percent) => {\n        printInfo(`‚ö†Ô∏è CPU usage high: ${percent}%`);\n      },\n    };\n  }\n}\n\n// Batch operation optimizer\nexport class BatchOptimizer {\n  static calculateOptimalConcurrency(projectCount, systemSpecs = {}) {\n    const {\n      cpuCores = 4,\n      memoryGB = 8,\n      diskSpeed = 'ssd', // 'ssd' or 'hdd'\n    } = systemSpecs;\n\n    let optimal = Math.min(\n      cpuCores * 2, // 2x CPU cores\n      Math.floor(memoryGB / 0.5), // 500MB per project\n      projectCount, // Can't exceed project count\n      20, // Hard limit\n    );\n\n    // Adjust for disk speed\n    if (diskSpeed === 'hdd') {\n      optimal = Math.ceil(optimal * 0.7); // Reduce for HDD\n    }\n\n    return Math.max(1, optimal);\n  }\n\n  static estimateCompletionTime(projectCount, options = {}) {\n    const {\n      concurrency = 5,\n      template = 'basic',\n      sparc = false,\n      averageTimePerProject = 15, // seconds\n    } = options;\n\n    let timeMultiplier = 1;\n\n    // Adjust for template complexity\n    const templateMultipliers = {\n      basic: 1,\n      'web-api': 1.2,\n      'react-app': 1.5,\n      microservice: 1.8,\n      'cli-tool': 1.1,\n    };\n    timeMultiplier *= templateMultipliers[template] || 1;\n\n    // Adjust for SPARC\n    if (sparc) {\n      timeMultiplier *= 1.3;\n    }\n\n    const adjustedTime = averageTimePerProject * timeMultiplier;\n    const totalSequentialTime = projectCount * adjustedTime;\n    const parallelTime = Math.ceil(projectCount / concurrency) * adjustedTime;\n\n    return {\n      sequential: totalSequentialTime,\n      parallel: parallelTime,\n      savings: totalSequentialTime - parallelTime,\n      savingsPercent: (((totalSequentialTime - parallelTime) / totalSequentialTime) * 100).toFixed(\n        1,\n      ),\n    };\n  }\n\n  static generateRecommendations(projectCount, options = {}) {\n    const recommendations = [];\n\n    if (projectCount > 10) {\n      recommendations.push('Consider using parallel processing for better performance');\n    }\n\n    if (projectCount > 20) {\n      recommendations.push('Use configuration files for better organization');\n      recommendations.push('Consider breaking into smaller batches');\n    }\n\n    if (options.sparc && projectCount > 5) {\n      recommendations.push('SPARC initialization adds overhead - monitor memory usage');\n    }\n\n    if (options.template === 'microservice' && projectCount > 3) {\n      recommendations.push('Microservice template is complex - consider lower concurrency');\n    }\n\n    return recommendations;\n  }\n}\n"],"names":["printInfo","PerformanceMonitor","options","enabled","logLevel","memoryCheckInterval","maxMemoryMB","metrics","startTime","endTime","peakMemoryMB","averageMemoryMB","operationCount","memoryReadings","errors","warnings","memoryMonitor","start","Date","now","startMemoryMonitoring","console","log","stop","stopMemoryMonitoring","calculateAverages","Deno","memoryUsage","setInterval","memUsage","memoryMB","rss","push","timestamp","type","message","toFixed","clearInterval","length","totalMemory","reduce","sum","reading","recordOperation","operationType","details","recordError","error","context","recordWarning","getMetrics","duration","operationsPerSecond","memoryEfficiency","generateReport","report","slice","forEach","warning","displayRealTimeStats","currentTime","elapsed","currentMemory","ResourceThresholdMonitor","maxCPUPercent","checkInterval","isMonitoring","monitorInterval","callbacks","memoryWarning","onMemoryWarning","memoryError","onMemoryError","cpuWarning","onCPUWarning","checkResources","warningThreshold","errorThreshold","createDefaultCallbacks","current","max","percent","BatchOptimizer","calculateOptimalConcurrency","projectCount","systemSpecs","cpuCores","memoryGB","diskSpeed","optimal","Math","min","floor","ceil","estimateCompletionTime","concurrency","template","sparc","averageTimePerProject","timeMultiplier","templateMultipliers","basic","microservice","adjustedTime","totalSequentialTime","parallelTime","sequential","parallel","savings","savingsPercent","generateRecommendations","recommendations"],"mappings":"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"}