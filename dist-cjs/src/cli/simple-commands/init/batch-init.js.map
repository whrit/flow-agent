{"version":3,"sources":["../../../../../src/cli/simple-commands/init/batch-init.js"],"sourcesContent":["// batch-init.js - Batch initialization features with parallel processing\nimport { printSuccess, printError, printWarning, printInfo } from '../../utils.js';\nimport { promises as fs } from 'fs';\nimport { cwd, exit, existsSync } from '../../node-compat.js';\nimport process from 'process';\nimport {\n  PerformanceMonitor,\n  ResourceThresholdMonitor,\n  BatchOptimizer,\n} from './performance-monitor.js';\nimport { initCommand } from './index.js';\nimport { createSparcStructureManually } from './sparc-structure.js';\nimport { createClaudeSlashCommands } from './claude-commands/slash-commands.js';\nimport {\n  createSparcClaudeMd,\n  createFullClaudeMd,\n  createMinimalClaudeMd,\n} from './templates/claude-md.js';\nimport { createFullMemoryBankMd, createMinimalMemoryBankMd } from './templates/memory-bank-md.js';\nimport {\n  createFullCoordinationMd,\n  createMinimalCoordinationMd,\n} from './templates/coordination-md.js';\nimport { createAgentsReadme, createSessionsReadme } from './templates/readme-files.js';\n\n// Progress tracking for batch operations\nclass BatchProgressTracker {\n  constructor(totalProjects) {\n    this.totalProjects = totalProjects;\n    this.completed = 0;\n    this.failed = 0;\n    this.inProgress = new Map();\n    this.startTime = Date.now();\n  }\n\n  startProject(projectName) {\n    this.inProgress.set(projectName, Date.now());\n    this.updateDisplay();\n  }\n\n  completeProject(projectName, success = true) {\n    this.inProgress.delete(projectName);\n    if (success) {\n      this.completed++;\n    } else {\n      this.failed++;\n    }\n    this.updateDisplay();\n  }\n\n  updateDisplay() {\n    const elapsed = Math.floor((Date.now() - this.startTime) / 1000);\n    const progress = Math.floor(((this.completed + this.failed) / this.totalProjects) * 100);\n\n    console.clear();\n    console.log('🚀 Batch Initialization Progress');\n    console.log('================================');\n    console.log(`Total Projects: ${this.totalProjects}`);\n    console.log(`Completed: ${this.completed} ✅`);\n    console.log(`Failed: ${this.failed} ❌`);\n    console.log(`In Progress: ${this.inProgress.size} 🔄`);\n    console.log(`Progress: ${progress}% [${this.getProgressBar(progress)}]`);\n    console.log(`Elapsed Time: ${elapsed}s`);\n\n    if (this.inProgress.size > 0) {\n      console.log('\\nActive Projects:');\n      for (const [project, startTime] of this.inProgress) {\n        const projectElapsed = Math.floor((Date.now() - startTime) / 1000);\n        console.log(`  - ${project} (${projectElapsed}s)`);\n      }\n    }\n  }\n\n  getProgressBar(progress) {\n    const filled = Math.floor(progress / 5);\n    const empty = 20 - filled;\n    return '█'.repeat(filled) + '░'.repeat(empty);\n  }\n\n  getReport() {\n    const elapsed = Math.floor((Date.now() - this.startTime) / 1000);\n    return {\n      total: this.totalProjects,\n      completed: this.completed,\n      failed: this.failed,\n      elapsedTime: elapsed,\n      successRate:\n        this.totalProjects > 0 ? ((this.completed / this.totalProjects) * 100).toFixed(1) : 0,\n    };\n  }\n}\n\n// Resource management to prevent overload\nclass ResourceManager {\n  constructor(maxConcurrency = 5, maxMemoryMB = 1024) {\n    this.maxConcurrency = maxConcurrency;\n    this.maxMemoryMB = maxMemoryMB;\n    this.currentTasks = 0;\n    this.queue = [];\n  }\n\n  async acquire() {\n    while (this.currentTasks >= this.maxConcurrency) {\n      await new Promise((resolve) => {\n        this.queue.push(resolve);\n      });\n    }\n    this.currentTasks++;\n  }\n\n  release() {\n    this.currentTasks--;\n    if (this.queue.length > 0) {\n      const resolve = this.queue.shift();\n      resolve();\n    }\n  }\n\n  async withResource(fn) {\n    await this.acquire();\n    try {\n      return await fn();\n    } finally {\n      this.release();\n    }\n  }\n}\n\n// Project template definitions\nconst PROJECT_TEMPLATES = {\n  'web-api': {\n    name: 'Web API',\n    description: 'RESTful API with Express.js',\n    extraDirs: ['src', 'src/controllers', 'src/models', 'src/routes', 'tests'],\n    extraFiles: {\n      'package.json': {\n        name: '{{PROJECT_NAME}}',\n        version: '1.0.0',\n        type: 'module',\n        scripts: {\n          start: 'node src/index.js',\n          dev: 'nodemon src/index.js',\n          test: 'jest',\n        },\n        dependencies: {\n          express: '^4.18.0',\n          cors: '^2.8.5',\n          dotenv: '^16.0.0',\n        },\n      },\n      'src/index.js': `import express from 'express';\nimport cors from 'cors';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.json({ message: 'Welcome to {{PROJECT_NAME}} API' });\n});\n\napp.listen(PORT, () => {\n  console.log(\\`Server running on port \\${PORT}\\`);\n});\n`,\n    },\n  },\n  'react-app': {\n    name: 'React Application',\n    description: 'Modern React app with TypeScript',\n    extraDirs: ['src', 'src/components', 'src/hooks', 'src/services', 'public'],\n    extraFiles: {\n      'package.json': {\n        name: '{{PROJECT_NAME}}',\n        version: '0.1.0',\n        private: true,\n        dependencies: {\n          react: '^18.2.0',\n          'react-dom': '^18.2.0',\n          'react-scripts': '5.0.1',\n          typescript: '^4.9.5',\n        },\n        scripts: {\n          start: 'react-scripts start',\n          build: 'react-scripts build',\n          test: 'react-scripts test',\n        },\n      },\n      'tsconfig.json': {\n        compilerOptions: {\n          target: 'es5',\n          lib: ['dom', 'es2015'],\n          jsx: 'react-jsx',\n          module: 'esnext',\n          moduleResolution: 'node',\n          strict: true,\n          esModuleInterop: true,\n          skipLibCheck: true,\n          forceConsistentCasingInFileNames: true,\n        },\n      },\n    },\n  },\n  microservice: {\n    name: 'Microservice',\n    description: 'Containerized microservice with Docker',\n    extraDirs: ['src', 'config', 'tests', 'scripts'],\n    extraFiles: {\n      Dockerfile: `FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 8080\nCMD [\"node\", \"src/index.js\"]\n`,\n      'docker-compose.yml': `version: '3.8'\nservices:\n  {{PROJECT_NAME}}:\n    build: .\n    ports:\n      - \"8080:8080\"\n    environment:\n      - NODE_ENV={{ENVIRONMENT}}\n      - PORT=8080\n    restart: unless-stopped\n`,\n      '.dockerignore': `node_modules\nnpm-debug.log\n.env\n.git\n.gitignore\nREADME.md\n.DS_Store\ncoverage\n.nyc_output\n`,\n    },\n  },\n  'cli-tool': {\n    name: 'CLI Tool',\n    description: 'Command-line interface tool',\n    extraDirs: ['src', 'src/commands', 'src/utils', 'tests'],\n    extraFiles: {\n      'package.json': {\n        name: '{{PROJECT_NAME}}',\n        version: '1.0.0',\n        type: 'module',\n        bin: {\n          '{{PROJECT_NAME}}': './src/cli.js',\n        },\n        scripts: {\n          test: 'jest',\n          lint: 'eslint src/',\n        },\n      },\n      'src/cli.js': `#!/usr/bin/env node\nimport { Command } from 'commander';\n\nconst program = new Command();\n\nprogram\n  .name('{{PROJECT_NAME}}')\n  .description('{{PROJECT_DESCRIPTION}}')\n  .version('1.0.0');\n\nprogram\n  .command('hello')\n  .description('Say hello')\n  .option('-n, --name <name>', 'name to greet', 'World')\n  .action((options) => {\n    console.log(\\`Hello, \\${options.name}!\\`);\n  });\n\nprogram.parse();\n`,\n    },\n  },\n};\n\n// Environment configurations\nconst ENVIRONMENT_CONFIGS = {\n  dev: {\n    name: 'development',\n    features: ['debug', 'hot-reload', 'verbose-logging'],\n    config: {\n      NODE_ENV: 'development',\n      DEBUG: 'true',\n      LOG_LEVEL: 'debug',\n    },\n  },\n  staging: {\n    name: 'staging',\n    features: ['testing', 'monitoring'],\n    config: {\n      NODE_ENV: 'staging',\n      DEBUG: 'false',\n      LOG_LEVEL: 'info',\n    },\n  },\n  prod: {\n    name: 'production',\n    features: ['optimization', 'security', 'monitoring'],\n    config: {\n      NODE_ENV: 'production',\n      DEBUG: 'false',\n      LOG_LEVEL: 'error',\n    },\n  },\n};\n\n// Initialize a single project with options\nasync function initializeProject(projectPath, options = {}) {\n  const {\n    template = null,\n    environment = 'dev',\n    sparc = false,\n    minimal = false,\n    force = false,\n    customConfig = {},\n  } = options;\n\n  try {\n    // Get absolute project path\n    const currentDir = cwd();\n    const absoluteProjectPath = projectPath.startsWith('/')\n      ? projectPath\n      : `${currentDir}/${projectPath}`;\n\n    // Create project directory\n    await fs.mkdir(absoluteProjectPath, { recursive: true });\n\n    // Change to project directory\n    const originalDir = cwd();\n    process.chdir(absoluteProjectPath);\n\n    // Initialize base structure\n    const directories = [\n      'memory',\n      'memory/agents',\n      'memory/sessions',\n      'coordination',\n      'coordination/memory_bank',\n      'coordination/subtasks',\n      'coordination/orchestration',\n      '.claude',\n      '.claude/commands',\n      '.claude/commands/sparc',\n      '.claude/logs',\n    ];\n\n    // Add template-specific directories\n    if (template && PROJECT_TEMPLATES[template]) {\n      const templateConfig = PROJECT_TEMPLATES[template];\n      if (templateConfig.extraDirs) {\n        directories.push(...templateConfig.extraDirs);\n      }\n    }\n\n    // Create all directories in parallel\n    await Promise.all(\n      directories.map((dir) => fs.mkdir(dir, { recursive: true }).catch(() => {})),\n    );\n\n    // Create configuration files in parallel\n    const fileCreationTasks = [];\n\n    // CLAUDE.md\n    const claudeMd = sparc\n      ? createSparcClaudeMd()\n      : minimal\n        ? createMinimalClaudeMd()\n        : createFullClaudeMd();\n    fileCreationTasks.push(fs.writeFile('CLAUDE.md', claudeMd));\n\n    // memory-bank.md\n    const memoryBankMd = minimal ? createMinimalMemoryBankMd() : createFullMemoryBankMd();\n    fileCreationTasks.push(fs.writeFile('memory-bank.md', memoryBankMd));\n\n    // coordination.md\n    const coordinationMd = minimal ? createMinimalCoordinationMd() : createFullCoordinationMd();\n    fileCreationTasks.push(fs.writeFile('coordination.md', coordinationMd));\n\n    // README files\n    fileCreationTasks.push(\n      fs.writeFile('memory/agents/README.md', createAgentsReadme()),\n      fs.writeFile('memory/sessions/README.md', createSessionsReadme()),\n    );\n\n    // Persistence database\n    const initialData = {\n      agents: [],\n      tasks: [],\n      environment: environment,\n      template: template,\n      customConfig: customConfig,\n      lastUpdated: Date.now(),\n    };\n    fileCreationTasks.push(\n      fs.writeFile('memory/claude-flow-data.json', JSON.stringify(initialData, null, 2)),\n    );\n\n    // Environment configuration\n    if (ENVIRONMENT_CONFIGS[environment]) {\n      const envConfig = ENVIRONMENT_CONFIGS[environment];\n      const envContent = Object.entries(envConfig.config)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('\\n');\n      fileCreationTasks.push(fs.writeFile('.env', envContent));\n    }\n\n    // Template-specific files\n    if (template && PROJECT_TEMPLATES[template]) {\n      const templateConfig = PROJECT_TEMPLATES[template];\n      if (templateConfig.extraFiles) {\n        for (const [filePath, content] of Object.entries(templateConfig.extraFiles)) {\n          let fileContent =\n            typeof content === 'object' ? JSON.stringify(content, null, 2) : content;\n\n          // Replace template variables\n          fileContent = fileContent\n            .replace(/{{PROJECT_NAME}}/g, projectPath.split('/').pop())\n            .replace(/{{PROJECT_DESCRIPTION}}/g, templateConfig.description)\n            .replace(/{{ENVIRONMENT}}/g, environment);\n\n          fileCreationTasks.push(fs.writeFile(filePath, fileContent));\n        }\n      }\n    }\n\n    // Execute all file creation tasks in parallel\n    await Promise.all(fileCreationTasks);\n\n    // SPARC initialization if requested\n    if (sparc) {\n      await createSparcStructureManually();\n      await createClaudeSlashCommands(projectPath);\n    }\n\n    // Change back to original directory\n    process.chdir(originalDir);\n\n    return { success: true, projectPath: absoluteProjectPath };\n  } catch (error) {\n    return { success: false, projectPath, error: error.message };\n  }\n}\n\n// Batch initialization with parallel processing\nexport async function batchInitCommand(projects, options = {}) {\n  const {\n    parallel = true,\n    maxConcurrency = 5,\n    template = null,\n    environments = ['dev'],\n    sparc = false,\n    minimal = false,\n    force = false,\n    progressTracking = true,\n    performanceMonitoring = true,\n  } = options;\n\n  if (!projects || projects.length === 0) {\n    printError('No projects specified for batch initialization');\n    return;\n  }\n\n  const totalProjects = projects.length * environments.length;\n  const tracker = progressTracking ? new BatchProgressTracker(totalProjects) : null;\n  const resourceManager = new ResourceManager(parallel ? maxConcurrency : 1);\n\n  // Initialize performance monitoring\n  const perfMonitor = new PerformanceMonitor({\n    enabled: performanceMonitoring,\n    logLevel: 'info',\n  });\n\n  const resourceMonitor = new ResourceThresholdMonitor({\n    maxMemoryMB: 2048,\n    ...ResourceThresholdMonitor.createDefaultCallbacks(),\n  });\n\n  // Calculate optimal settings\n  const optimalConcurrency = BatchOptimizer.calculateOptimalConcurrency(totalProjects);\n  const timeEstimate = BatchOptimizer.estimateCompletionTime(totalProjects, options);\n  const recommendations = BatchOptimizer.generateRecommendations(totalProjects, options);\n\n  if (maxConcurrency > optimalConcurrency) {\n    printWarning(`Concurrency ${maxConcurrency} may be too high. Optimal: ${optimalConcurrency}`);\n  }\n\n  perfMonitor.start();\n  resourceMonitor.start();\n\n  printSuccess(\n    `Starting batch initialization for ${projects.length} projects across ${environments.length} environments`,\n  );\n  console.log(`Template: ${template || 'default'}`);\n  console.log(`Parallelism: ${parallel ? `Yes (max ${maxConcurrency} concurrent)` : 'No'}`);\n  console.log(`SPARC: ${sparc ? 'Enabled' : 'Disabled'}\\n`);\n\n  const results = [];\n  const initTasks = [];\n\n  for (const project of projects) {\n    for (const env of environments) {\n      const projectPath = environments.length > 1 ? `${project}-${env}` : project;\n\n      const initTask = async () => {\n        if (tracker) tracker.startProject(projectPath);\n        perfMonitor.recordOperation('project-init-start', {\n          projectPath,\n          template,\n          environment: env,\n        });\n\n        const result = await resourceManager.withResource(async () => {\n          return await initializeProject(projectPath, {\n            template,\n            environment: env,\n            sparc,\n            minimal,\n            force,\n          });\n        });\n\n        if (result.success) {\n          perfMonitor.recordOperation('project-init-success', { projectPath });\n        } else {\n          perfMonitor.recordError(result.error, { projectPath, template, environment: env });\n        }\n\n        if (tracker) tracker.completeProject(projectPath, result.success);\n        results.push(result);\n      };\n\n      if (parallel) {\n        initTasks.push(initTask());\n      } else {\n        await initTask();\n      }\n    }\n  }\n\n  if (parallel) {\n    await Promise.all(initTasks);\n  }\n\n  // Final report\n  console.log('\\n\\n📊 Batch Initialization Report');\n  console.log('================================');\n\n  if (tracker) {\n    const report = tracker.getReport();\n    console.log(`Total Projects: ${report.total}`);\n    console.log(`Successful: ${report.completed} ✅`);\n    console.log(`Failed: ${report.failed} ❌`);\n    console.log(`Success Rate: ${report.successRate}%`);\n    console.log(`Total Time: ${report.elapsedTime}s`);\n    console.log(`Average Time per Project: ${(report.elapsedTime / report.total).toFixed(1)}s`);\n  }\n\n  // List successful projects\n  const successful = results.filter((r) => r.success);\n  if (successful.length > 0) {\n    console.log('\\n✅ Successfully initialized:');\n    successful.forEach((r) => console.log(`  - ${r.projectPath}`));\n  }\n\n  // List failed projects\n  const failed = results.filter((r) => !r.success);\n  if (failed.length > 0) {\n    console.log('\\n❌ Failed to initialize:');\n    failed.forEach((r) => console.log(`  - ${r.projectPath}: ${r.error}`));\n  }\n\n  // Stop monitoring and generate performance report\n  perfMonitor.stop();\n  resourceMonitor.stop();\n\n  if (performanceMonitoring) {\n    console.log(perfMonitor.generateReport());\n\n    // Show recommendations\n    if (recommendations.length > 0) {\n      console.log('\\n💡 Recommendations:');\n      recommendations.forEach((rec) => console.log(`  • ${rec}`));\n    }\n  }\n\n  return results;\n}\n\n// Parse batch initialization config from file\nexport async function parseBatchConfig(configFile) {\n  try {\n    const content = await fs.readFile(configFile, 'utf8');\n    return JSON.parse(content);\n  } catch (error) {\n    printError(`Failed to read batch config file: ${error.message}`);\n    return null;\n  }\n}\n\n// Create batch initialization from config file\nexport async function batchInitFromConfig(configFile, options = {}) {\n  const config = await parseBatchConfig(configFile);\n  if (!config) return;\n\n  const { projects = [], baseOptions = {}, projectConfigs = {} } = config;\n\n  // Merge options with config\n  const mergedOptions = { ...baseOptions, ...options };\n\n  // If projectConfigs are specified, use them for individual project customization\n  if (Object.keys(projectConfigs).length > 0) {\n    const results = [];\n    const resourceManager = new ResourceManager(mergedOptions.maxConcurrency || 5);\n\n    for (const [projectName, projectConfig] of Object.entries(projectConfigs)) {\n      const projectOptions = { ...mergedOptions, ...projectConfig };\n      const result = await resourceManager.withResource(async () => {\n        return await initializeProject(projectName, projectOptions);\n      });\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  // Otherwise, use standard batch init\n  return await batchInitCommand(projects, mergedOptions);\n}\n\n// Validation for batch operations\nexport function validateBatchOptions(options) {\n  const errors = [];\n\n  if (options.maxConcurrency && (options.maxConcurrency < 1 || options.maxConcurrency > 20)) {\n    errors.push('maxConcurrency must be between 1 and 20');\n  }\n\n  if (options.template && !PROJECT_TEMPLATES[options.template]) {\n    errors.push(\n      `Unknown template: ${options.template}. Available: ${Object.keys(PROJECT_TEMPLATES).join(', ')}`,\n    );\n  }\n\n  if (options.environments) {\n    for (const env of options.environments) {\n      if (!ENVIRONMENT_CONFIGS[env]) {\n        errors.push(\n          `Unknown environment: ${env}. Available: ${Object.keys(ENVIRONMENT_CONFIGS).join(', ')}`,\n        );\n      }\n    }\n  }\n\n  return errors;\n}\n\n// Export template and environment configurations for external use\nexport { PROJECT_TEMPLATES, ENVIRONMENT_CONFIGS };\n"],"names":["printSuccess","printError","printWarning","promises","fs","cwd","process","PerformanceMonitor","ResourceThresholdMonitor","BatchOptimizer","createSparcStructureManually","createClaudeSlashCommands","createSparcClaudeMd","createFullClaudeMd","createMinimalClaudeMd","createFullMemoryBankMd","createMinimalMemoryBankMd","createFullCoordinationMd","createMinimalCoordinationMd","createAgentsReadme","createSessionsReadme","BatchProgressTracker","totalProjects","completed","failed","inProgress","Map","startTime","Date","now","startProject","projectName","set","updateDisplay","completeProject","success","delete","elapsed","Math","floor","progress","console","clear","log","size","getProgressBar","project","projectElapsed","filled","empty","repeat","getReport","total","elapsedTime","successRate","toFixed","ResourceManager","maxConcurrency","maxMemoryMB","currentTasks","queue","acquire","Promise","resolve","push","release","length","shift","withResource","fn","PROJECT_TEMPLATES","name","description","extraDirs","extraFiles","version","type","scripts","start","dev","test","dependencies","express","cors","dotenv","private","react","typescript","build","compilerOptions","target","lib","jsx","module","moduleResolution","strict","esModuleInterop","skipLibCheck","forceConsistentCasingInFileNames","microservice","Dockerfile","bin","lint","ENVIRONMENT_CONFIGS","features","config","NODE_ENV","DEBUG","LOG_LEVEL","staging","prod","initializeProject","projectPath","options","template","environment","sparc","minimal","force","customConfig","currentDir","absoluteProjectPath","startsWith","mkdir","recursive","originalDir","chdir","directories","templateConfig","all","map","dir","catch","fileCreationTasks","claudeMd","writeFile","memoryBankMd","coordinationMd","initialData","agents","tasks","lastUpdated","JSON","stringify","envConfig","envContent","Object","entries","key","value","join","filePath","content","fileContent","replace","split","pop","error","message","batchInitCommand","projects","parallel","environments","progressTracking","performanceMonitoring","tracker","resourceManager","perfMonitor","enabled","logLevel","resourceMonitor","createDefaultCallbacks","optimalConcurrency","calculateOptimalConcurrency","timeEstimate","estimateCompletionTime","recommendations","generateRecommendations","results","initTasks","env","initTask","recordOperation","result","recordError","report","successful","filter","r","forEach","stop","generateReport","rec","parseBatchConfig","configFile","readFile","parse","batchInitFromConfig","baseOptions","projectConfigs","mergedOptions","keys","projectConfig","projectOptions","validateBatchOptions","errors"],"mappings":"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"}