{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/post-init-validator.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// post-init-validator.js - Post-initialization verification checks\n\nexport class PostInitValidator {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n  }\n\n  /**\n   * Check file integrity (existence, size, readability)\n   */\n  async checkFileIntegrity() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      files: {},\n    };\n\n    const expectedFiles = [\n      { path: 'CLAUDE.md', minSize: 100 },\n      { path: 'memory-bank.md', minSize: 50 },\n      { path: 'coordination.md', minSize: 50 },\n      { path: 'memory/claude-flow-data.json', minSize: 10 },\n      { path: 'memory/agents/README.md', minSize: 10 },\n      { path: 'memory/sessions/README.md', minSize: 10 },\n      { path: 'claude-flow', minSize: 50, executable: true },\n    ];\n\n    for (const file of expectedFiles) {\n      const filePath = `${this.workingDir}/${file.path}`;\n\n      try {\n        const stat = await fs.stat(filePath);\n\n        // Check if it exists and is a file\n        if (!stat.isFile) {\n          result.success = false;\n          result.errors.push(`Expected file but found directory: ${file.path}`);\n          result.files[file.path] = { status: 'not_file' };\n          continue;\n        }\n\n        // Check file size\n        if (stat.size < file.minSize) {\n          result.success = false;\n          result.errors.push(\n            `File too small: ${file.path} (${stat.size} bytes, expected >= ${file.minSize})`,\n          );\n          result.files[file.path] = { status: 'too_small', size: stat.size };\n          continue;\n        }\n\n        // Check if executable (if required)\n        if (file.executable && Deno.build.os !== 'windows') {\n          const isExecutable = (stat.mode & 0o111) !== 0;\n          if (!isExecutable) {\n            result.warnings.push(`File not executable: ${file.path}`);\n            result.files[file.path] = { status: 'not_executable', size: stat.size };\n            continue;\n          }\n        }\n\n        // Try to read the file\n        try {\n          await fs.readFile(filePath, 'utf8');\n          result.files[file.path] = { status: 'ok', size: stat.size };\n        } catch (readError) {\n          result.success = false;\n          result.errors.push(`Cannot read file: ${file.path} - ${readError.message}`);\n          result.files[file.path] = { status: 'unreadable', size: stat.size };\n        }\n      } catch (error) {\n        result.success = false;\n        result.errors.push(`File not found: ${file.path}`);\n        result.files[file.path] = { status: 'missing' };\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check completeness of initialization\n   */\n  async checkCompleteness() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      missing: [],\n    };\n\n    const requiredDirs = [\n      'memory',\n      'memory/agents',\n      'memory/sessions',\n      'coordination',\n      'coordination/memory_bank',\n      'coordination/subtasks',\n      'coordination/orchestration',\n      '.claude',\n      '.claude/commands',\n      '.claude/logs',\n    ];\n\n    const optionalDirs = [\n      '.roo',\n      '.roo/templates',\n      '.roo/workflows',\n      '.roo/modes',\n      '.roo/configs',\n      '.claude/commands/sparc',\n    ];\n\n    // Check required directories\n    for (const dir of requiredDirs) {\n      const dirPath = `${this.workingDir}/${dir}`;\n\n      try {\n        const stat = await fs.stat(dirPath);\n        if (!stat.isDirectory) {\n          result.success = false;\n          result.errors.push(`Expected directory but found file: ${dir}`);\n          result.missing.push(dir);\n        }\n      } catch {\n        result.success = false;\n        result.errors.push(`Required directory missing: ${dir}`);\n        result.missing.push(dir);\n      }\n    }\n\n    // Check optional directories (SPARC-related)\n    for (const dir of optionalDirs) {\n      const dirPath = `${this.workingDir}/${dir}`;\n\n      try {\n        await fs.stat(dirPath);\n      } catch {\n        if (dir.includes('.roo') || dir.includes('sparc')) {\n          result.warnings.push(`Optional SPARC directory missing: ${dir}`);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate directory structure and organization\n   */\n  async validateStructure() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      structure: {},\n    };\n\n    try {\n      // Check memory structure\n      const memoryStructure = await this.validateMemoryStructure();\n      result.structure.memory = memoryStructure;\n      if (!memoryStructure.valid) {\n        result.warnings.push('Memory directory structure is incomplete');\n      }\n\n      // Check coordination structure\n      const coordinationStructure = await this.validateCoordinationStructure();\n      result.structure.coordination = coordinationStructure;\n      if (!coordinationStructure.valid) {\n        result.warnings.push('Coordination directory structure is incomplete');\n      }\n\n      // Check Claude integration structure\n      const claudeStructure = await this.validateClaudeStructure();\n      result.structure.claude = claudeStructure;\n      if (!claudeStructure.valid) {\n        result.warnings.push('Claude integration structure is incomplete');\n      }\n\n      // Check SPARC structure (if present)\n      const sparcExists = await this.checkSparcExists();\n      if (sparcExists) {\n        const sparcStructure = await this.validateSparcStructure();\n        result.structure.sparc = sparcStructure;\n        if (!sparcStructure.valid) {\n          result.warnings.push('SPARC structure is incomplete');\n        }\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Structure validation failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check permissions on created files and directories\n   */\n  async checkPermissions() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      permissions: {},\n    };\n\n    const itemsToCheck = [\n      { path: 'CLAUDE.md', type: 'file', requiredMode: 0o644 },\n      { path: 'memory-bank.md', type: 'file', requiredMode: 0o644 },\n      { path: 'coordination.md', type: 'file', requiredMode: 0o644 },\n      { path: 'claude-flow', type: 'file', requiredMode: 0o755 },\n      { path: 'memory', type: 'dir', requiredMode: 0o755 },\n      { path: 'coordination', type: 'dir', requiredMode: 0o755 },\n      { path: '.claude', type: 'dir', requiredMode: 0o755 },\n    ];\n\n    // Skip permission checks on Windows\n    if (Deno.build.os === 'windows') {\n      result.warnings.push('Permission checks skipped on Windows');\n      return result;\n    }\n\n    for (const item of itemsToCheck) {\n      const itemPath = `${this.workingDir}/${item.path}`;\n\n      try {\n        const stat = await fs.stat(itemPath);\n        const actualMode = stat.mode & 0o777;\n        const expectedMode = item.requiredMode;\n\n        result.permissions[item.path] = {\n          actual: actualMode.toString(8),\n          expected: expectedMode.toString(8),\n          correct: actualMode === expectedMode,\n        };\n\n        if (actualMode !== expectedMode) {\n          result.warnings.push(\n            `Incorrect permissions on ${item.path}: ` +\n              `${actualMode.toString(8)} (expected ${expectedMode.toString(8)})`,\n          );\n        }\n      } catch (error) {\n        result.warnings.push(`Could not check permissions for ${item.path}: ${error.message}`);\n      }\n    }\n\n    return result;\n  }\n\n  // Helper methods\n\n  async validateMemoryStructure() {\n    const structure = {\n      valid: true,\n      dirs: [],\n      files: [],\n    };\n\n    const expectedDirs = ['agents', 'sessions'];\n    const expectedFiles = ['claude-flow-data.json', 'agents/README.md', 'sessions/README.md'];\n\n    for (const dir of expectedDirs) {\n      try {\n        await fs.stat(`${this.workingDir}/memory/${dir}`);\n        structure.dirs.push(dir);\n      } catch {\n        structure.valid = false;\n      }\n    }\n\n    for (const file of expectedFiles) {\n      try {\n        await fs.stat(`${this.workingDir}/memory/${file}`);\n        structure.files.push(file);\n      } catch {\n        structure.valid = false;\n      }\n    }\n\n    return structure;\n  }\n\n  async validateCoordinationStructure() {\n    const structure = {\n      valid: true,\n      dirs: [],\n    };\n\n    const expectedDirs = ['memory_bank', 'subtasks', 'orchestration'];\n\n    for (const dir of expectedDirs) {\n      try {\n        await fs.stat(`${this.workingDir}/coordination/${dir}`);\n        structure.dirs.push(dir);\n      } catch {\n        structure.valid = false;\n      }\n    }\n\n    return structure;\n  }\n\n  async validateClaudeStructure() {\n    const structure = {\n      valid: true,\n      dirs: [],\n      hasCommands: false,\n    };\n\n    const expectedDirs = ['commands', 'logs'];\n\n    for (const dir of expectedDirs) {\n      try {\n        await fs.stat(`${this.workingDir}/.claude/${dir}`);\n        structure.dirs.push(dir);\n      } catch {\n        structure.valid = false;\n      }\n    }\n\n    // Check if there are any command files\n    try {\n      const entries = [];\n      for await (const entry of fs.readdir(`${this.workingDir}/.claude/commands`)) {\n        if (entry.isFile && entry.name.endsWith('.js')) {\n          entries.push(entry.name);\n        }\n      }\n      structure.hasCommands = entries.length > 0;\n      structure.commandCount = entries.length;\n    } catch {\n      structure.hasCommands = false;\n    }\n\n    return structure;\n  }\n\n  async checkSparcExists() {\n    try {\n      await fs.stat(`${this.workingDir}/.roomodes`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async validateSparcStructure() {\n    const structure = {\n      valid: true,\n      hasRoomodes: false,\n      hasRooDir: false,\n      dirs: [],\n    };\n\n    // Check .roomodes file\n    try {\n      const stat = await fs.stat(`${this.workingDir}/.roomodes`);\n      structure.hasRoomodes = stat.isFile;\n    } catch {\n      structure.valid = false;\n    }\n\n    // Check .roo directory\n    try {\n      const stat = await fs.stat(`${this.workingDir}/.roo`);\n      structure.hasRooDir = stat.isDirectory;\n\n      if (structure.hasRooDir) {\n        const expectedDirs = ['templates', 'workflows', 'modes', 'configs'];\n        for (const dir of expectedDirs) {\n          try {\n            await fs.stat(`${this.workingDir}/.roo/${dir}`);\n            structure.dirs.push(dir);\n          } catch {\n            // Optional subdirectories\n          }\n        }\n      }\n    } catch {\n      // .roo directory is optional\n    }\n\n    return structure;\n  }\n}\n"],"names":["promises","fs","PostInitValidator","workingDir","checkFileIntegrity","result","success","errors","warnings","files","expectedFiles","path","minSize","executable","file","filePath","stat","isFile","push","status","size","Deno","build","os","isExecutable","mode","readFile","readError","message","error","checkCompleteness","missing","requiredDirs","optionalDirs","dir","dirPath","isDirectory","includes","validateStructure","structure","memoryStructure","validateMemoryStructure","memory","valid","coordinationStructure","validateCoordinationStructure","coordination","claudeStructure","validateClaudeStructure","claude","sparcExists","checkSparcExists","sparcStructure","validateSparcStructure","sparc","checkPermissions","permissions","itemsToCheck","type","requiredMode","item","itemPath","actualMode","expectedMode","actual","toString","expected","correct","dirs","expectedDirs","hasCommands","entries","entry","readdir","name","endsWith","length","commandCount","hasRoomodes","hasRooDir"],"mappings":"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"}