{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/health-checker.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// health-checker.js - System health checks for SPARC initialization\n\nexport class HealthChecker {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n  }\n\n  /**\n   * Check SPARC mode availability\n   */\n  async checkModeAvailability() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      modes: {\n        total: 0,\n        available: 0,\n        unavailable: [],\n      },\n    };\n\n    try {\n      // Get expected modes\n      const expectedModes = [\n        'architect',\n        'code',\n        'tdd',\n        'spec-pseudocode',\n        'integration',\n        'debug',\n        'security-review',\n        'refinement-optimization-mode',\n        'docs-writer',\n        'devops',\n        'mcp',\n        'swarm',\n      ];\n\n      result.modes.total = expectedModes.length;\n\n      // Check each mode\n      for (const mode of expectedModes) {\n        const isAvailable = await this.checkSingleModeAvailability(mode);\n        if (isAvailable) {\n          result.modes.available++;\n        } else {\n          result.modes.unavailable.push(mode);\n        }\n      }\n\n      // Determine overall success\n      if (result.modes.available === 0) {\n        result.success = false;\n        result.errors.push('No SPARC modes are available');\n      } else if (result.modes.unavailable.length > 0) {\n        result.warnings.push(\n          `${result.modes.unavailable.length} modes unavailable: ${result.modes.unavailable.join(', ')}`,\n        );\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Mode availability check failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check template integrity\n   */\n  async checkTemplateIntegrity() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      templates: {\n        found: [],\n        missing: [],\n        corrupted: [],\n      },\n    };\n\n    try {\n      // Check for template directories\n      const templateDirs = ['.roo/templates', '.claude/commands'];\n\n      for (const dir of templateDirs) {\n        const dirPath = `${this.workingDir}/${dir}`;\n\n        try {\n          const stat = await Deno.stat(dirPath);\n          if (stat.isDirectory) {\n            const templateCheck = await this.checkTemplateDirectory(dirPath);\n            result.templates.found.push(...templateCheck.found);\n            result.templates.missing.push(...templateCheck.missing);\n            result.templates.corrupted.push(...templateCheck.corrupted);\n          }\n        } catch {\n          result.templates.missing.push(dir);\n        }\n      }\n\n      // Check core template files\n      const coreTemplates = ['CLAUDE.md', 'memory-bank.md', 'coordination.md'];\n\n      for (const template of coreTemplates) {\n        const templatePath = `${this.workingDir}/${template}`;\n\n        try {\n          const content = await fs.readFile(templatePath, 'utf8');\n          if (content.length < 50) {\n            result.templates.corrupted.push(template);\n          } else {\n            result.templates.found.push(template);\n          }\n        } catch {\n          result.templates.missing.push(template);\n        }\n      }\n\n      // Assess results\n      if (result.templates.corrupted.length > 0) {\n        result.success = false;\n        result.errors.push(`Corrupted templates: ${result.templates.corrupted.join(', ')}`);\n      }\n\n      if (result.templates.missing.length > 0) {\n        result.warnings.push(`Missing templates: ${result.templates.missing.join(', ')}`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Template integrity check failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check configuration consistency\n   */\n  async checkConfigConsistency() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      consistency: {},\n    };\n\n    try {\n      // Check consistency between .roomodes and available commands\n      const roomodesCheck = await this.checkRoomodesConsistency();\n      result.consistency.roomodes = roomodesCheck;\n      if (!roomodesCheck.consistent) {\n        result.warnings.push('Inconsistency between .roomodes and available commands');\n      }\n\n      // Check consistency between CLAUDE.md and actual setup\n      const claudeCheck = await this.checkClaudeConfigConsistency();\n      result.consistency.claude = claudeCheck;\n      if (!claudeCheck.consistent) {\n        result.warnings.push('Inconsistency between CLAUDE.md and actual setup');\n      }\n\n      // Check memory configuration consistency\n      const memoryCheck = await this.checkMemoryConsistency();\n      result.consistency.memory = memoryCheck;\n      if (!memoryCheck.consistent) {\n        result.warnings.push('Memory configuration inconsistency detected');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Configuration consistency check failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check system resources\n   */\n  async checkSystemResources() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      resources: {},\n    };\n\n    try {\n      // Check disk space\n      const diskCheck = await this.checkDiskSpace();\n      result.resources.disk = diskCheck;\n      if (!diskCheck.adequate) {\n        result.warnings.push('Low disk space detected');\n      }\n\n      // Check memory usage\n      const memoryCheck = await this.checkMemoryUsage();\n      result.resources.memory = memoryCheck;\n      if (!memoryCheck.adequate) {\n        result.warnings.push('High memory usage detected');\n      }\n\n      // Check file descriptors\n      const fdCheck = await this.checkFileDescriptors();\n      result.resources.fileDescriptors = fdCheck;\n      if (!fdCheck.adequate) {\n        result.warnings.push('Many open file descriptors');\n      }\n\n      // Check process limits\n      const processCheck = await this.checkProcessLimits();\n      result.resources.processes = processCheck;\n      if (!processCheck.adequate) {\n        result.warnings.push('Process limits may affect operation');\n      }\n    } catch (error) {\n      result.warnings.push(`System resource check failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Run comprehensive health diagnostics\n   */\n  async runDiagnostics() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      diagnostics: {},\n      timestamp: new Date().toISOString(),\n    };\n\n    try {\n      // File system health\n      const fsHealth = await this.checkFileSystemHealth();\n      result.diagnostics.filesystem = fsHealth;\n      if (!fsHealth.healthy) {\n        result.success = false;\n        result.errors.push(...fsHealth.errors);\n      }\n\n      // Process health\n      const processHealth = await this.checkProcessHealth();\n      result.diagnostics.processes = processHealth;\n      if (!processHealth.healthy) {\n        result.warnings.push(...processHealth.warnings);\n      }\n\n      // Network health (for external dependencies)\n      const networkHealth = await this.checkNetworkHealth();\n      result.diagnostics.network = networkHealth;\n      if (!networkHealth.healthy) {\n        result.warnings.push(...networkHealth.warnings);\n      }\n\n      // Integration health\n      const integrationHealth = await this.checkIntegrationHealth();\n      result.diagnostics.integration = integrationHealth;\n      if (!integrationHealth.healthy) {\n        result.warnings.push(...integrationHealth.warnings);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Health diagnostics failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  // Helper methods\n\n  async checkSingleModeAvailability(mode) {\n    try {\n      // Check if mode exists in .roomodes\n      const roomodesPath = `${this.workingDir}/.roomodes`;\n      const content = await fs.readFile(roomodesPath, 'utf8');\n      const config = JSON.parse(content);\n\n      return !!(config.modes && config.modes[mode]);\n    } catch {\n      return false;\n    }\n  }\n\n  async checkTemplateDirectory(dirPath) {\n    const result = {\n      found: [],\n      missing: [],\n      corrupted: [],\n    };\n\n    try {\n      for await (const entry of Deno.readDir(dirPath)) {\n        if (entry.isFile) {\n          const filePath = `${dirPath}/${entry.name}`;\n\n          try {\n            const stat = await Deno.stat(filePath);\n            if (stat.size === 0) {\n              result.corrupted.push(entry.name);\n            } else {\n              result.found.push(entry.name);\n            }\n          } catch {\n            result.corrupted.push(entry.name);\n          }\n        }\n      }\n    } catch {\n      // Directory not accessible\n    }\n\n    return result;\n  }\n\n  async checkRoomodesConsistency() {\n    const result = {\n      consistent: true,\n      issues: [],\n    };\n\n    try {\n      // Compare .roomodes with slash commands\n      const roomodesPath = `${this.workingDir}/.roomodes`;\n      const content = await fs.readFile(roomodesPath, 'utf8');\n      const config = JSON.parse(content);\n\n      if (config.modes) {\n        const commandsDir = `${this.workingDir}/.claude/commands`;\n\n        try {\n          const commandFiles = [];\n          for await (const entry of Deno.readDir(commandsDir)) {\n            if (entry.isFile && entry.name.endsWith('.js')) {\n              commandFiles.push(entry.name.replace('.js', ''));\n            }\n          }\n\n          const modeNames = Object.keys(config.modes);\n          for (const mode of modeNames) {\n            if (!commandFiles.some((cmd) => cmd.includes(mode))) {\n              result.consistent = false;\n              result.issues.push(`Mode ${mode} has no corresponding command`);\n            }\n          }\n        } catch {\n          result.consistent = false;\n          result.issues.push('Cannot access commands directory');\n        }\n      }\n    } catch {\n      result.consistent = false;\n      result.issues.push('Cannot read .roomodes file');\n    }\n\n    return result;\n  }\n\n  async checkClaudeConfigConsistency() {\n    const result = {\n      consistent: true,\n      issues: [],\n    };\n\n    try {\n      const claudePath = `${this.workingDir}/CLAUDE.md`;\n      const content = await fs.readFile(claudePath, 'utf8');\n\n      // Check if mentioned commands exist\n      const mentionedCommands = ['claude-flow sparc', 'npm run build', 'npm run test'];\n\n      for (const command of mentionedCommands) {\n        if (content.includes(command)) {\n          // Check if the command is actually available\n          const parts = command.split(' ');\n          if (parts[0] === 'claude-flow') {\n            const executablePath = `${this.workingDir}/claude-flow`;\n            try {\n              await Deno.stat(executablePath);\n            } catch {\n              result.consistent = false;\n              result.issues.push(`Command ${command} mentioned but executable not found`);\n            }\n          }\n        }\n      }\n    } catch {\n      result.consistent = false;\n      result.issues.push('Cannot read CLAUDE.md');\n    }\n\n    return result;\n  }\n\n  async checkMemoryConsistency() {\n    const result = {\n      consistent: true,\n      issues: [],\n    };\n\n    try {\n      // Check if memory structure matches documentation\n      const memoryDataPath = `${this.workingDir}/memory/claude-flow-data.json`;\n      const data = JSON.parse(await fs.readFile(memoryDataPath, 'utf8'));\n\n      // Basic structure validation\n      if (!data.agents || !data.tasks) {\n        result.consistent = false;\n        result.issues.push('Memory data structure incomplete');\n      }\n\n      // Check directory structure\n      const expectedDirs = ['agents', 'sessions'];\n      for (const dir of expectedDirs) {\n        try {\n          await Deno.stat(`${this.workingDir}/memory/${dir}`);\n        } catch {\n          result.consistent = false;\n          result.issues.push(`Memory directory missing: ${dir}`);\n        }\n      }\n    } catch {\n      result.consistent = false;\n      result.issues.push('Cannot validate memory structure');\n    }\n\n    return result;\n  }\n\n  async checkDiskSpace() {\n    const result = {\n      adequate: true,\n      available: 0,\n      used: 0,\n    };\n\n    try {\n      const command = new Deno.Command('df', {\n        args: ['-k', this.workingDir],\n        stdout: 'piped',\n      });\n\n      const { stdout, success } = await command.output();\n\n      if (success) {\n        const output = new TextDecoder().decode(stdout);\n        const lines = output.trim().split('\\n');\n\n        if (lines.length >= 2) {\n          const parts = lines[1].split(/\\s+/);\n          if (parts.length >= 4) {\n            result.available = parseInt(parts[3]) / 1024; // MB\n            result.used = parseInt(parts[2]) / 1024; // MB\n            result.adequate = result.available > 100; // At least 100MB\n          }\n        }\n      }\n    } catch {\n      // Can't check - assume adequate\n      result.adequate = true;\n    }\n\n    return result;\n  }\n\n  async checkMemoryUsage() {\n    const result = {\n      adequate: true,\n      available: 0,\n      used: 0,\n    };\n\n    try {\n      // This is a simplified check - could be enhanced\n      const command = new Deno.Command('free', {\n        args: ['-m'],\n        stdout: 'piped',\n      });\n\n      const { stdout, success } = await command.output();\n\n      if (success) {\n        const output = new TextDecoder().decode(stdout);\n        const lines = output.trim().split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('Mem:')) {\n            const parts = line.split(/\\s+/);\n            if (parts.length >= 3) {\n              result.available = parseInt(parts[6] || parts[3]); // Available\n              result.used = parseInt(parts[2]); // Used\n              result.adequate = result.available > 100; // At least 100MB\n            }\n            break;\n          }\n        }\n      }\n    } catch {\n      // Can't check - assume adequate\n      result.adequate = true;\n    }\n\n    return result;\n  }\n\n  async checkFileDescriptors() {\n    const result = {\n      adequate: true,\n      open: 0,\n      limit: 0,\n    };\n\n    try {\n      // Check current process file descriptors\n      const command = new Deno.Command('sh', {\n        args: ['-c', 'lsof -p $$ | wc -l'],\n        stdout: 'piped',\n      });\n\n      const { stdout, success } = await command.output();\n\n      if (success) {\n        const count = parseInt(new TextDecoder().decode(stdout).trim());\n        result.open = count;\n        result.adequate = count < 100; // Arbitrary threshold\n      }\n    } catch {\n      // Can't check - assume adequate\n      result.adequate = true;\n    }\n\n    return result;\n  }\n\n  async checkProcessLimits() {\n    const result = {\n      adequate: true,\n      limits: {},\n    };\n\n    try {\n      const command = new Deno.Command('ulimit', {\n        args: ['-a'],\n        stdout: 'piped',\n      });\n\n      const { stdout, success } = await command.output();\n\n      if (success) {\n        const output = new TextDecoder().decode(stdout);\n        // Parse ulimit output for important limits\n        result.adequate = !output.includes('0'); // Very basic check\n      }\n    } catch {\n      // Can't check - assume adequate\n      result.adequate = true;\n    }\n\n    return result;\n  }\n\n  async checkFileSystemHealth() {\n    return {\n      healthy: true,\n      errors: [],\n      readWrite: true,\n      permissions: true,\n    };\n  }\n\n  async checkProcessHealth() {\n    return {\n      healthy: true,\n      warnings: [],\n      processes: [],\n    };\n  }\n\n  async checkNetworkHealth() {\n    return {\n      healthy: true,\n      warnings: [],\n      connectivity: true,\n    };\n  }\n\n  async checkIntegrationHealth() {\n    return {\n      healthy: true,\n      warnings: [],\n      integrations: {},\n    };\n  }\n}\n"],"names":["promises","fs","HealthChecker","workingDir","checkModeAvailability","result","success","errors","warnings","modes","total","available","unavailable","expectedModes","length","mode","isAvailable","checkSingleModeAvailability","push","join","error","message","checkTemplateIntegrity","templates","found","missing","corrupted","templateDirs","dir","dirPath","stat","Deno","isDirectory","templateCheck","checkTemplateDirectory","coreTemplates","template","templatePath","content","readFile","checkConfigConsistency","consistency","roomodesCheck","checkRoomodesConsistency","roomodes","consistent","claudeCheck","checkClaudeConfigConsistency","claude","memoryCheck","checkMemoryConsistency","memory","checkSystemResources","resources","diskCheck","checkDiskSpace","disk","adequate","checkMemoryUsage","fdCheck","checkFileDescriptors","fileDescriptors","processCheck","checkProcessLimits","processes","runDiagnostics","diagnostics","timestamp","Date","toISOString","fsHealth","checkFileSystemHealth","filesystem","healthy","processHealth","checkProcessHealth","networkHealth","checkNetworkHealth","network","integrationHealth","checkIntegrationHealth","integration","roomodesPath","config","JSON","parse","entry","readDir","isFile","filePath","name","size","issues","commandsDir","commandFiles","endsWith","replace","modeNames","Object","keys","some","cmd","includes","claudePath","mentionedCommands","command","parts","split","executablePath","memoryDataPath","data","agents","tasks","expectedDirs","used","Command","args","stdout","output","TextDecoder","decode","lines","trim","parseInt","line","startsWith","open","limit","count","limits","readWrite","permissions","connectivity","integrations"],"mappings":"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"}