{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/config-validator.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// config-validator.js - Configuration file validation\n\nexport class ConfigValidator {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n  }\n\n  /**\n   * Validate .roomodes configuration file\n   */\n  async validateRoomodes() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      config: null,\n    };\n\n    const roomodesPath = `${this.workingDir}/.roomodes`;\n\n    try {\n      // Check if file exists\n      const stat = await fs.stat(roomodesPath);\n      if (!stat.isFile) {\n        result.success = false;\n        result.errors.push('.roomodes exists but is not a file');\n        return result;\n      }\n\n      // Read and parse JSON\n      const content = await fs.readFile(roomodesPath, 'utf8');\n\n      try {\n        const config = JSON.parse(content);\n        result.config = config;\n\n        // Validate structure\n        const validationResult = this.validateRoomodesStructure(config);\n        if (!validationResult.valid) {\n          result.success = false;\n          result.errors.push(...validationResult.errors);\n        }\n        result.warnings.push(...validationResult.warnings);\n      } catch (jsonError) {\n        result.success = false;\n        result.errors.push(`Invalid JSON in .roomodes: ${jsonError.message}`);\n      }\n    } catch (error) {\n      if (error instanceof Deno.errors.NotFound) {\n        result.warnings.push('.roomodes file not found - SPARC features may not be available');\n      } else {\n        result.success = false;\n        result.errors.push(`Could not read .roomodes: ${error.message}`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate CLAUDE.md configuration\n   */\n  async validateClaudeMd() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      content: null,\n    };\n\n    const claudeMdPath = `${this.workingDir}/CLAUDE.md`;\n\n    try {\n      const content = await fs.readFile(claudeMdPath, 'utf8');\n      result.content = content;\n\n      // Check for required sections\n      const requiredSections = [\n        '# Claude Code Configuration',\n        '## Project Overview',\n        '## SPARC Development Commands',\n      ];\n\n      for (const section of requiredSections) {\n        if (!content.includes(section)) {\n          result.warnings.push(`Missing recommended section: ${section}`);\n        }\n      }\n\n      // Check for important command patterns\n      const importantCommands = ['npx claude-flow sparc', 'npm run build', 'npm run test'];\n\n      for (const command of importantCommands) {\n        if (!content.includes(command)) {\n          result.warnings.push(`Missing important command reference: ${command}`);\n        }\n      }\n\n      // Check file size\n      if (content.length < 100) {\n        result.success = false;\n        result.errors.push('CLAUDE.md appears to be too short or empty');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Could not read CLAUDE.md: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate memory configuration\n   */\n  async validateMemoryConfig() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      data: null,\n    };\n\n    const memoryDataPath = `${this.workingDir}/memory/claude-flow-data.json`;\n\n    try {\n      const content = await fs.readFile(memoryDataPath, 'utf8');\n\n      try {\n        const data = JSON.parse(content);\n        result.data = data;\n\n        // Validate structure\n        const validationResult = this.validateMemoryDataStructure(data);\n        if (!validationResult.valid) {\n          result.success = false;\n          result.errors.push(...validationResult.errors);\n        }\n        result.warnings.push(...validationResult.warnings);\n      } catch (jsonError) {\n        result.success = false;\n        result.errors.push(`Invalid JSON in memory data: ${jsonError.message}`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Could not read memory data: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate coordination configuration\n   */\n  async validateCoordinationConfig() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      content: null,\n    };\n\n    const coordinationPath = `${this.workingDir}/coordination.md`;\n\n    try {\n      const content = await fs.readFile(coordinationPath, 'utf8');\n      result.content = content;\n\n      // Check for required sections\n      const requiredSections = [\n        '# Multi-Agent Coordination',\n        '## Agent Coordination Patterns',\n        '## Memory Management',\n      ];\n\n      for (const section of requiredSections) {\n        if (!content.includes(section)) {\n          result.warnings.push(`Missing recommended section in coordination.md: ${section}`);\n        }\n      }\n\n      // Check file size\n      if (content.length < 50) {\n        result.warnings.push('coordination.md appears to be very short');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Could not read coordination.md: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate executable configuration\n   */\n  async validateExecutable() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n    };\n\n    const executablePath = `${this.workingDir}/claude-flow`;\n\n    try {\n      const stat = await fs.stat(executablePath);\n\n      if (!stat.isFile) {\n        result.success = false;\n        result.errors.push('claude-flow executable is not a file');\n        return result;\n      }\n\n      // Check if executable (on Unix systems)\n      if (Deno.build.os !== 'windows') {\n        const isExecutable = (stat.mode & 0o111) !== 0;\n        if (!isExecutable) {\n          result.warnings.push('claude-flow file is not executable');\n        }\n      }\n\n      // Read and validate content\n      const content = await fs.readFile(executablePath, 'utf8');\n\n      // Check for required elements\n      if (content.includes('#!/usr/bin/env')) {\n        // Script file\n        if (!content.includes('claude-flow') && !content.includes('deno run')) {\n          result.warnings.push('Executable script may not be properly configured');\n        }\n      } else {\n        result.warnings.push('Executable may not have proper shebang');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Could not validate executable: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  // Helper methods\n\n  validateRoomodesStructure(config) {\n    const result = {\n      valid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    // Check top-level structure\n    if (typeof config !== 'object' || config === null) {\n      result.valid = false;\n      result.errors.push('.roomodes must be a JSON object');\n      return result;\n    }\n\n    // Check for required fields\n    const requiredFields = ['modes', 'version'];\n    for (const field of requiredFields) {\n      if (!(field in config)) {\n        result.warnings.push(`Missing recommended field in .roomodes: ${field}`);\n      }\n    }\n\n    // Validate modes if present\n    if ('modes' in config) {\n      if (typeof config.modes !== 'object' || config.modes === null) {\n        result.valid = false;\n        result.errors.push('.roomodes modes must be an object');\n      } else {\n        // Check each mode\n        for (const [modeName, modeConfig] of Object.entries(config.modes)) {\n          const modeValidation = this.validateModeConfig(modeName, modeConfig);\n          if (!modeValidation.valid) {\n            result.warnings.push(...modeValidation.errors.map((err) => `Mode ${modeName}: ${err}`));\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  validateModeConfig(modeName, modeConfig) {\n    const result = {\n      valid: true,\n      errors: [],\n    };\n\n    if (typeof modeConfig !== 'object' || modeConfig === null) {\n      result.valid = false;\n      result.errors.push('mode configuration must be an object');\n      return result;\n    }\n\n    // Check for recommended fields\n    const recommendedFields = ['description', 'persona', 'tools'];\n    for (const field of recommendedFields) {\n      if (!(field in modeConfig)) {\n        result.errors.push(`missing recommended field: ${field}`);\n      }\n    }\n\n    // Validate specific fields\n    if ('tools' in modeConfig && !Array.isArray(modeConfig.tools)) {\n      result.errors.push('tools must be an array');\n    }\n\n    if ('description' in modeConfig && typeof modeConfig.description !== 'string') {\n      result.errors.push('description must be a string');\n    }\n\n    return result;\n  }\n\n  validateMemoryDataStructure(data) {\n    const result = {\n      valid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    if (typeof data !== 'object' || data === null) {\n      result.valid = false;\n      result.errors.push('Memory data must be a JSON object');\n      return result;\n    }\n\n    // Check for required fields\n    const requiredFields = ['agents', 'tasks', 'lastUpdated'];\n    for (const field of requiredFields) {\n      if (!(field in data)) {\n        result.warnings.push(`Missing field in memory data: ${field}`);\n      }\n    }\n\n    // Validate field types\n    if ('agents' in data && !Array.isArray(data.agents)) {\n      result.errors.push('agents must be an array');\n    }\n\n    if ('tasks' in data && !Array.isArray(data.tasks)) {\n      result.errors.push('tasks must be an array');\n    }\n\n    if ('lastUpdated' in data && typeof data.lastUpdated !== 'number') {\n      result.warnings.push('lastUpdated should be a timestamp number');\n    }\n\n    return result;\n  }\n}\n"],"names":["promises","fs","ConfigValidator","workingDir","validateRoomodes","result","success","errors","warnings","config","roomodesPath","stat","isFile","push","content","readFile","JSON","parse","validationResult","validateRoomodesStructure","valid","jsonError","message","error","Deno","NotFound","validateClaudeMd","claudeMdPath","requiredSections","section","includes","importantCommands","command","length","validateMemoryConfig","data","memoryDataPath","validateMemoryDataStructure","validateCoordinationConfig","coordinationPath","validateExecutable","executablePath","build","os","isExecutable","mode","requiredFields","field","modes","modeName","modeConfig","Object","entries","modeValidation","validateModeConfig","map","err","recommendedFields","Array","isArray","tools","description","agents","tasks","lastUpdated"],"mappings":"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"}