{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/pre-init-validator.js"],"sourcesContent":["// pre-init-validator.js - Pre-initialization validation checks\n\nimport { printWarning } from '../../../utils.js';\n\nexport class PreInitValidator {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n  }\n\n  /**\n   * Check file system permissions\n   */\n  async checkPermissions() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Test write permission in working directory\n      const testFile = `${this.workingDir}/.claude-flow-permission-test`;\n      await Deno.writeTextFile(testFile, 'test');\n      await Deno.remove(testFile);\n\n      // Test directory creation permission\n      const testDir = `${this.workingDir}/.claude-flow-dir-test`;\n      await Deno.mkdir(testDir);\n      await Deno.remove(testDir);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Insufficient permissions in ${this.workingDir}: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check available disk space\n   */\n  async checkDiskSpace() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Get disk usage information\n      const command = new Deno.Command('df', {\n        args: ['-k', this.workingDir],\n        stdout: 'piped',\n        stderr: 'piped',\n      });\n\n      const { stdout, success } = await command.output();\n\n      if (success) {\n        const output = new TextDecoder().decode(stdout);\n        const lines = output.trim().split('\\n');\n\n        if (lines.length >= 2) {\n          const dataLine = lines[1];\n          const parts = dataLine.split(/\\s+/);\n\n          if (parts.length >= 4) {\n            const availableKB = parseInt(parts[3]);\n            const availableMB = availableKB / 1024;\n\n            // Require at least 100MB free space\n            if (availableMB < 100) {\n              result.success = false;\n              result.errors.push(\n                `Insufficient disk space: ${availableMB.toFixed(2)}MB available (minimum 100MB required)`,\n              );\n            } else if (availableMB < 500) {\n              result.warnings.push(`Low disk space: ${availableMB.toFixed(2)}MB available`);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      // Non-critical - just warn if we can't check disk space\n      result.warnings.push(`Could not check disk space: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check for existing files and conflicts\n   */\n  async checkConflicts(force = false) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      conflicts: [],\n    };\n\n    const criticalFiles = [\n      'CLAUDE.md',\n      'memory-bank.md',\n      'coordination.md',\n      '.roomodes',\n      'memory/claude-flow-data.json',\n    ];\n\n    const criticalDirs = ['.roo', '.claude', 'memory', 'coordination'];\n\n    // Check critical files\n    for (const file of criticalFiles) {\n      try {\n        const stat = await Deno.stat(`${this.workingDir}/${file}`);\n        if (stat.isFile) {\n          result.conflicts.push(file);\n          if (!force) {\n            result.success = false;\n            result.errors.push(`File already exists: ${file}`);\n          } else {\n            result.warnings.push(`File will be overwritten: ${file}`);\n          }\n        }\n      } catch {\n        // File doesn't exist - good\n      }\n    }\n\n    // Check critical directories\n    for (const dir of criticalDirs) {\n      try {\n        const stat = await Deno.stat(`${this.workingDir}/${dir}`);\n        if (stat.isDirectory) {\n          // Check if directory has important content\n          const entries = [];\n          for await (const entry of Deno.readDir(`${this.workingDir}/${dir}`)) {\n            entries.push(entry.name);\n          }\n\n          if (entries.length > 0) {\n            result.conflicts.push(`${dir}/ (${entries.length} items)`);\n            if (!force) {\n              result.warnings.push(`Directory exists with content: ${dir}/`);\n            }\n          }\n        }\n      } catch {\n        // Directory doesn't exist - good\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check for required dependencies\n   */\n  async checkDependencies() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      dependencies: {},\n    };\n\n    const dependencies = [\n      { name: 'node', command: 'node', args: ['--version'], required: true },\n      { name: 'npm', command: 'npm', args: ['--version'], required: true },\n      { name: 'git', command: 'git', args: ['--version'], required: false },\n      { name: 'npx', command: 'npx', args: ['--version'], required: true },\n    ];\n\n    for (const dep of dependencies) {\n      try {\n        const command = new Deno.Command(dep.command, {\n          args: dep.args,\n          stdout: 'piped',\n          stderr: 'piped',\n        });\n\n        const { stdout, success } = await command.output();\n\n        if (success) {\n          const version = new TextDecoder().decode(stdout).trim();\n          result.dependencies[dep.name] = {\n            available: true,\n            version,\n          };\n        } else {\n          throw new Error('Command failed');\n        }\n      } catch (error) {\n        result.dependencies[dep.name] = {\n          available: false,\n          error: error.message,\n        };\n\n        if (dep.required) {\n          result.success = false;\n          result.errors.push(`Required dependency '${dep.name}' is not available`);\n        } else {\n          result.warnings.push(`Optional dependency '${dep.name}' is not available`);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check environment variables and configuration\n   */\n  async checkEnvironment() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      environment: {},\n    };\n\n    // Check for important environment variables\n    const envVars = [\n      { name: 'HOME', required: false },\n      { name: 'PATH', required: true },\n      { name: 'PWD', required: false },\n      { name: 'CLAUDE_FLOW_DEBUG', required: false },\n    ];\n\n    for (const envVar of envVars) {\n      const value = Deno.env.get(envVar.name);\n\n      if (value) {\n        result.environment[envVar.name] = 'set';\n      } else {\n        result.environment[envVar.name] = 'not set';\n\n        if (envVar.required) {\n          result.success = false;\n          result.errors.push(`Required environment variable ${envVar.name} is not set`);\n        }\n      }\n    }\n\n    // Check if we're in a git repository\n    try {\n      const command = new Deno.Command('git', {\n        args: ['rev-parse', '--git-dir'],\n        cwd: this.workingDir,\n        stdout: 'piped',\n        stderr: 'piped',\n      });\n\n      const { success } = await command.output();\n      result.environment.gitRepo = success;\n\n      if (!success) {\n        result.warnings.push('Not in a git repository - version control recommended');\n      }\n    } catch {\n      result.environment.gitRepo = false;\n      result.warnings.push('Could not check git repository status');\n    }\n\n    return result;\n  }\n\n  /**\n   * Run all pre-initialization checks\n   */\n  async runAllChecks(options = {}) {\n    const results = {\n      permissions: await this.checkPermissions(),\n      diskSpace: await this.checkDiskSpace(),\n      conflicts: await this.checkConflicts(options.force),\n      dependencies: await this.checkDependencies(),\n      environment: await this.checkEnvironment(),\n    };\n\n    const overallSuccess = Object.values(results).every((r) => r.success);\n    const allErrors = Object.values(results).flatMap((r) => r.errors || []);\n    const allWarnings = Object.values(results).flatMap((r) => r.warnings || []);\n\n    return {\n      success: overallSuccess,\n      results,\n      errors: allErrors,\n      warnings: allWarnings,\n    };\n  }\n}\n"],"names":["PreInitValidator","workingDir","checkPermissions","result","success","errors","warnings","testFile","Deno","writeTextFile","remove","testDir","mkdir","error","push","message","checkDiskSpace","command","Command","args","stdout","stderr","output","TextDecoder","decode","lines","trim","split","length","dataLine","parts","availableKB","parseInt","availableMB","toFixed","checkConflicts","force","conflicts","criticalFiles","criticalDirs","file","stat","isFile","dir","isDirectory","entries","entry","readDir","name","checkDependencies","dependencies","required","dep","version","available","Error","checkEnvironment","environment","envVars","envVar","value","env","get","cwd","gitRepo","runAllChecks","options","results","permissions","diskSpace","overallSuccess","Object","values","every","r","allErrors","flatMap","allWarnings"],"mappings":"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"}