{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/index.js"],"sourcesContent":["// validation/index.js - Comprehensive validation system for SPARC initialization\n\nimport { PreInitValidator } from './pre-init-validator.js';\nimport { PostInitValidator } from './post-init-validator.js';\nimport { ConfigValidator } from './config-validator.js';\nimport { ModeValidator } from './mode-validator.js';\nimport { HealthChecker } from './health-checker.js';\n\n/**\n * Main validation orchestrator\n */\nexport class ValidationSystem {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n    this.preInitValidator = new PreInitValidator(workingDir);\n    this.postInitValidator = new PostInitValidator(workingDir);\n    this.configValidator = new ConfigValidator(workingDir);\n    this.modeValidator = new ModeValidator(workingDir);\n    this.healthChecker = new HealthChecker(workingDir);\n  }\n\n  /**\n   * Run all pre-initialization checks\n   * @returns {Object} Validation result with status and details\n   */\n  async validatePreInit(options = {}) {\n    const results = {\n      success: true,\n      checks: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Check permissions\n      const permissionCheck = await this.preInitValidator.checkPermissions();\n      results.checks.permissions = permissionCheck;\n      if (!permissionCheck.success) {\n        results.success = false;\n        results.errors.push(...permissionCheck.errors);\n      }\n\n      // Check disk space\n      const spaceCheck = await this.preInitValidator.checkDiskSpace();\n      results.checks.diskSpace = spaceCheck;\n      if (!spaceCheck.success) {\n        results.success = false;\n        results.errors.push(...spaceCheck.errors);\n      }\n\n      // Check for conflicts\n      const conflictCheck = await this.preInitValidator.checkConflicts(options.force);\n      results.checks.conflicts = conflictCheck;\n      if (!conflictCheck.success && !options.force) {\n        results.success = false;\n        results.errors.push(...conflictCheck.errors);\n      } else if (conflictCheck.warnings.length > 0) {\n        results.warnings.push(...conflictCheck.warnings);\n      }\n\n      // Check dependencies\n      const depCheck = await this.preInitValidator.checkDependencies();\n      results.checks.dependencies = depCheck;\n      if (!depCheck.success) {\n        results.warnings.push(...depCheck.errors);\n      }\n\n      // Check environment\n      const envCheck = await this.preInitValidator.checkEnvironment();\n      results.checks.environment = envCheck;\n      if (!envCheck.success) {\n        results.warnings.push(...envCheck.errors);\n      }\n    } catch (error) {\n      results.success = false;\n      results.errors.push(`Pre-initialization validation failed: ${error.message}`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Run all post-initialization verification checks\n   * @returns {Object} Verification result with status and details\n   */\n  async validatePostInit() {\n    const results = {\n      success: true,\n      checks: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Check file integrity\n      const integrityCheck = await this.postInitValidator.checkFileIntegrity();\n      results.checks.fileIntegrity = integrityCheck;\n      if (!integrityCheck.success) {\n        results.success = false;\n        results.errors.push(...integrityCheck.errors);\n      }\n\n      // Check completeness\n      const completenessCheck = await this.postInitValidator.checkCompleteness();\n      results.checks.completeness = completenessCheck;\n      if (!completenessCheck.success) {\n        results.success = false;\n        results.errors.push(...completenessCheck.errors);\n      }\n\n      // Validate structure\n      const structureCheck = await this.postInitValidator.validateStructure();\n      results.checks.structure = structureCheck;\n      if (!structureCheck.success) {\n        results.success = false;\n        results.errors.push(...structureCheck.errors);\n      }\n\n      // Check permissions on created files\n      const permissionCheck = await this.postInitValidator.checkPermissions();\n      results.checks.permissions = permissionCheck;\n      if (!permissionCheck.success) {\n        results.warnings.push(...permissionCheck.errors);\n      }\n    } catch (error) {\n      results.success = false;\n      results.errors.push(`Post-initialization validation failed: ${error.message}`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate configuration files\n   * @returns {Object} Configuration validation result\n   */\n  async validateConfiguration() {\n    const results = {\n      success: true,\n      checks: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Validate roomodes config\n      const roomodesCheck = await this.configValidator.validateRoomodes();\n      results.checks.roomodes = roomodesCheck;\n      if (!roomodesCheck.success) {\n        results.success = false;\n        results.errors.push(...roomodesCheck.errors);\n      }\n\n      // Validate CLAUDE.md\n      const claudeMdCheck = await this.configValidator.validateClaudeMd();\n      results.checks.claudeMd = claudeMdCheck;\n      if (!claudeMdCheck.success) {\n        results.warnings.push(...claudeMdCheck.errors);\n      }\n\n      // Validate memory configuration\n      const memoryCheck = await this.configValidator.validateMemoryConfig();\n      results.checks.memory = memoryCheck;\n      if (!memoryCheck.success) {\n        results.warnings.push(...memoryCheck.errors);\n      }\n\n      // Validate coordination configuration\n      const coordinationCheck = await this.configValidator.validateCoordinationConfig();\n      results.checks.coordination = coordinationCheck;\n      if (!coordinationCheck.success) {\n        results.warnings.push(...coordinationCheck.errors);\n      }\n    } catch (error) {\n      results.success = false;\n      results.errors.push(`Configuration validation failed: ${error.message}`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Test SPARC mode functionality\n   * @returns {Object} Mode functionality test results\n   */\n  async testModeFunctionality() {\n    const results = {\n      success: true,\n      modes: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Test each SPARC mode\n      const modeTests = await this.modeValidator.testAllModes();\n      results.modes = modeTests.modes;\n\n      if (!modeTests.success) {\n        results.success = false;\n        results.errors.push(...modeTests.errors);\n      }\n\n      if (modeTests.warnings.length > 0) {\n        results.warnings.push(...modeTests.warnings);\n      }\n    } catch (error) {\n      results.success = false;\n      results.errors.push(`Mode functionality testing failed: ${error.message}`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Run comprehensive health checks\n   * @returns {Object} Health check results\n   */\n  async runHealthChecks() {\n    const results = {\n      success: true,\n      health: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Check SPARC mode availability\n      const modeHealth = await this.healthChecker.checkModeAvailability();\n      results.health.modes = modeHealth;\n      if (!modeHealth.success) {\n        results.warnings.push(...modeHealth.errors);\n      }\n\n      // Check template integrity\n      const templateHealth = await this.healthChecker.checkTemplateIntegrity();\n      results.health.templates = templateHealth;\n      if (!templateHealth.success) {\n        results.success = false;\n        results.errors.push(...templateHealth.errors);\n      }\n\n      // Check configuration consistency\n      const configHealth = await this.healthChecker.checkConfigConsistency();\n      results.health.configuration = configHealth;\n      if (!configHealth.success) {\n        results.warnings.push(...configHealth.errors);\n      }\n\n      // Check system resources\n      const resourceHealth = await this.healthChecker.checkSystemResources();\n      results.health.resources = resourceHealth;\n      if (!resourceHealth.success) {\n        results.warnings.push(...resourceHealth.errors);\n      }\n    } catch (error) {\n      results.success = false;\n      results.errors.push(`Health check failed: ${error.message}`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Generate validation report\n   */\n  generateReport(validationResults) {\n    const report = [];\n    report.push('=== SPARC Initialization Validation Report ===\\n');\n\n    // Summary\n    const totalChecks = Object.keys(validationResults).reduce((acc, key) => {\n      if (typeof validationResults[key] === 'object' && validationResults[key].checks) {\n        return acc + Object.keys(validationResults[key].checks).length;\n      }\n      return acc;\n    }, 0);\n\n    const failedChecks = validationResults.errors?.length || 0;\n    const warnings = validationResults.warnings?.length || 0;\n\n    report.push(`Summary: ${totalChecks} checks performed`);\n    report.push(`Status: ${validationResults.success ? '✅ PASSED' : '❌ FAILED'}`);\n    report.push(`Errors: ${failedChecks}`);\n    report.push(`Warnings: ${warnings}\\n`);\n\n    // Detailed results\n    for (const [phase, results] of Object.entries(validationResults)) {\n      if (typeof results === 'object' && results.checks) {\n        report.push(`\\n${phase.toUpperCase()} Phase:`);\n        for (const [check, result] of Object.entries(results.checks)) {\n          const status = result.success ? '✓' : '✗';\n          report.push(`  ${status} ${check}: ${result.message || 'Completed'}`);\n        }\n      }\n    }\n\n    // Errors\n    if (validationResults.errors?.length > 0) {\n      report.push('\\n❌ ERRORS:');\n      validationResults.errors.forEach((error) => {\n        report.push(`  - ${error}`);\n      });\n    }\n\n    // Warnings\n    if (validationResults.warnings?.length > 0) {\n      report.push('\\n⚠️  WARNINGS:');\n      validationResults.warnings.forEach((warning) => {\n        report.push(`  - ${warning}`);\n      });\n    }\n\n    report.push('\\n=== End of Report ===');\n    return report.join('\\n');\n  }\n}\n\n/**\n * Run full validation suite\n */\nexport async function runFullValidation(workingDir, options = {}) {\n  const validator = new ValidationSystem(workingDir);\n  const results = {\n    success: true,\n    errors: [],\n    warnings: [],\n  };\n\n  // Pre-init validation\n  if (!options.skipPreInit) {\n    const preInitResults = await validator.validatePreInit(options);\n    results.preInit = preInitResults;\n    if (!preInitResults.success) {\n      results.success = false;\n      results.errors.push(...preInitResults.errors);\n      results.warnings.push(...preInitResults.warnings);\n      return results; // Stop if pre-init fails\n    }\n  }\n\n  // Post-init validation (if applicable)\n  if (options.postInit) {\n    const postInitResults = await validator.validatePostInit();\n    results.postInit = postInitResults;\n    if (!postInitResults.success) {\n      results.success = false;\n      results.errors.push(...postInitResults.errors);\n    }\n    results.warnings.push(...postInitResults.warnings);\n  }\n\n  // Configuration validation\n  if (!options.skipConfig) {\n    const configResults = await validator.validateConfiguration();\n    results.configuration = configResults;\n    if (!configResults.success) {\n      results.success = false;\n      results.errors.push(...configResults.errors);\n    }\n    results.warnings.push(...configResults.warnings);\n  }\n\n  // Mode functionality testing\n  if (!options.skipModeTest) {\n    const modeResults = await validator.testModeFunctionality();\n    results.modeFunctionality = modeResults;\n    if (!modeResults.success) {\n      results.success = false;\n      results.errors.push(...modeResults.errors);\n    }\n    results.warnings.push(...modeResults.warnings);\n  }\n\n  // Health checks\n  const healthResults = await validator.runHealthChecks();\n  results.health = healthResults;\n  if (!healthResults.success) {\n    results.success = false;\n    results.errors.push(...healthResults.errors);\n  }\n  results.warnings.push(...healthResults.warnings);\n\n  // Generate report\n  results.report = validator.generateReport(results);\n\n  return results;\n}\n"],"names":["PreInitValidator","PostInitValidator","ConfigValidator","ModeValidator","HealthChecker","ValidationSystem","workingDir","preInitValidator","postInitValidator","configValidator","modeValidator","healthChecker","validatePreInit","options","results","success","checks","errors","warnings","permissionCheck","checkPermissions","permissions","push","spaceCheck","checkDiskSpace","diskSpace","conflictCheck","checkConflicts","force","conflicts","length","depCheck","checkDependencies","dependencies","envCheck","checkEnvironment","environment","error","message","validatePostInit","integrityCheck","checkFileIntegrity","fileIntegrity","completenessCheck","checkCompleteness","completeness","structureCheck","validateStructure","structure","validateConfiguration","roomodesCheck","validateRoomodes","roomodes","claudeMdCheck","validateClaudeMd","claudeMd","memoryCheck","validateMemoryConfig","memory","coordinationCheck","validateCoordinationConfig","coordination","testModeFunctionality","modes","modeTests","testAllModes","runHealthChecks","health","modeHealth","checkModeAvailability","templateHealth","checkTemplateIntegrity","templates","configHealth","checkConfigConsistency","configuration","resourceHealth","checkSystemResources","resources","generateReport","validationResults","report","totalChecks","Object","keys","reduce","acc","key","failedChecks","phase","entries","toUpperCase","check","result","status","forEach","warning","join","runFullValidation","validator","skipPreInit","preInitResults","preInit","postInit","postInitResults","skipConfig","configResults","skipModeTest","modeResults","modeFunctionality","healthResults"],"mappings":"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"}