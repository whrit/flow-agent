{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/validation/test-runner.js"],"sourcesContent":["// test-runner.js - Test runner for validation and rollback systems\n\nimport { ValidationSystem } from './index.js';\nimport { promises as fs } from 'fs';\nimport { RollbackSystem } from '../rollback/index.js';\nimport { printSuccess, printError, printWarning } from '../../../utils.js';\n\n/**\n * Test runner for validation and rollback systems\n */\nexport class ValidationTestRunner {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n    this.validationSystem = new ValidationSystem(workingDir);\n    this.rollbackSystem = new RollbackSystem(workingDir);\n    this.testResults = [];\n  }\n\n  /**\n   * Run all validation and rollback tests\n   */\n  async runAllTests() {\n    console.log('🧪 Running validation and rollback system tests...');\n\n    const tests = [\n      { name: 'Pre-init Validation', test: () => this.testPreInitValidation() },\n      { name: 'Post-init Validation', test: () => this.testPostInitValidation() },\n      { name: 'Configuration Validation', test: () => this.testConfigValidation() },\n      { name: 'Mode Functionality', test: () => this.testModeFunctionality() },\n      { name: 'Health Checks', test: () => this.testHealthChecks() },\n      { name: 'Backup System', test: () => this.testBackupSystem() },\n      { name: 'Rollback System', test: () => this.testRollbackSystem() },\n      { name: 'State Tracking', test: () => this.testStateTracking() },\n      { name: 'Recovery Procedures', test: () => this.testRecoveryProcedures() },\n      { name: 'Atomic Operations', test: () => this.testAtomicOperations() },\n    ];\n\n    for (const testCase of tests) {\n      console.log(`\\n🔬 Testing: ${testCase.name}`);\n\n      try {\n        const result = await testCase.test();\n        this.testResults.push({\n          name: testCase.name,\n          success: result.success,\n          details: result,\n        });\n\n        if (result.success) {\n          printSuccess(`✅ ${testCase.name} passed`);\n        } else {\n          printError(`❌ ${testCase.name} failed`);\n          if (result.errors) {\n            result.errors.forEach((error) => console.error(`  - ${error}`));\n          }\n        }\n      } catch (error) {\n        this.testResults.push({\n          name: testCase.name,\n          success: false,\n          error: error.message,\n        });\n        printError(`❌ ${testCase.name} threw exception: ${error.message}`);\n      }\n    }\n\n    this.generateTestReport();\n  }\n\n  /**\n   * Test pre-initialization validation\n   */\n  async testPreInitValidation() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Test with normal conditions\n      const normalValidation = await this.validationSystem.validatePreInit();\n      result.details.normal = normalValidation;\n\n      if (!normalValidation.success && normalValidation.errors.length > 0) {\n        // Some failures are expected in test environment\n        result.details.expectedFailures = normalValidation.errors;\n      }\n\n      // Test with force flag\n      const forceValidation = await this.validationSystem.validatePreInit({ force: true });\n      result.details.force = forceValidation;\n\n      result.success = true; // Pre-init validation tested successfully\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Pre-init validation test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test post-initialization validation\n   */\n  async testPostInitValidation() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Create minimal test files for validation\n      await this.createTestFiles();\n\n      const postValidation = await this.validationSystem.validatePostInit();\n      result.details.postValidation = postValidation;\n\n      // Clean up test files\n      await this.cleanupTestFiles();\n\n      result.success = true;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Post-init validation test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test configuration validation\n   */\n  async testConfigValidation() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Create test configuration files\n      await this.createTestConfigs();\n\n      const configValidation = await this.validationSystem.validateConfiguration();\n      result.details.configValidation = configValidation;\n\n      // Clean up test configs\n      await this.cleanupTestConfigs();\n\n      result.success = true;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Config validation test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test mode functionality\n   */\n  async testModeFunctionality() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Create test SPARC configuration\n      await this.createTestSparcConfig();\n\n      const modeTests = await this.validationSystem.testModeFunctionality();\n      result.details.modeTests = modeTests;\n\n      // Clean up test SPARC config\n      await this.cleanupTestSparcConfig();\n\n      result.success = true;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Mode functionality test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test health checks\n   */\n  async testHealthChecks() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      const healthChecks = await this.validationSystem.runHealthChecks();\n      result.details.healthChecks = healthChecks;\n\n      result.success = true;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Health checks test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test backup system\n   */\n  async testBackupSystem() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Test backup creation\n      const backupResult = await this.rollbackSystem.backupManager.createBackup(\n        'test',\n        'Test backup',\n      );\n      result.details.backupCreation = backupResult;\n\n      if (!backupResult.success) {\n        result.success = false;\n        result.errors.push('Backup creation failed');\n        return result;\n      }\n\n      // Test backup listing\n      const backups = await this.rollbackSystem.backupManager.listBackups();\n      result.details.backupListing = { count: backups.length };\n\n      // Test backup deletion\n      if (backupResult.id) {\n        const deleteResult = await this.rollbackSystem.backupManager.deleteBackup(backupResult.id);\n        result.details.backupDeletion = deleteResult;\n\n        if (!deleteResult.success) {\n          result.errors.push('Backup deletion failed');\n        }\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Backup system test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test rollback system\n   */\n  async testRollbackSystem() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      // Test rollback system validation\n      const rollbackValidation = await this.rollbackSystem.validateRollbackSystem();\n      result.details.rollbackValidation = rollbackValidation;\n\n      if (!rollbackValidation.success) {\n        result.errors.push(...rollbackValidation.errors);\n      }\n\n      // Test rollback point listing\n      const rollbackPoints = await this.rollbackSystem.listRollbackPoints();\n      result.details.rollbackPoints = {\n        count: rollbackPoints.rollbackPoints.length,\n        checkpoints: rollbackPoints.checkpoints.length,\n      };\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Rollback system test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test state tracking\n   */\n  async testStateTracking() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      const stateTracker = this.rollbackSystem.stateTracker;\n\n      // Test checkpoint creation\n      const checkpoint = await stateTracker.createCheckpoint('test-phase', { test: true });\n      result.details.checkpointCreation = checkpoint;\n\n      if (!checkpoint.success) {\n        result.errors.push('Checkpoint creation failed');\n      }\n\n      // Test rollback point recording\n      const rollbackPoint = await stateTracker.recordRollbackPoint('test', { testData: true });\n      result.details.rollbackPointCreation = rollbackPoint;\n\n      if (!rollbackPoint.success) {\n        result.errors.push('Rollback point creation failed');\n      }\n\n      // Test state validation\n      const stateValidation = await stateTracker.validateStateTracking();\n      result.details.stateValidation = stateValidation;\n\n      if (!stateValidation.success) {\n        result.errors.push(...stateValidation.errors);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`State tracking test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test recovery procedures\n   */\n  async testRecoveryProcedures() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      const recoveryManager = this.rollbackSystem.recoveryManager;\n\n      // Test recovery system validation\n      const recoveryValidation = await recoveryManager.validateRecoverySystem();\n      result.details.recoveryValidation = recoveryValidation;\n\n      if (!recoveryValidation.success) {\n        result.errors.push(...recoveryValidation.errors);\n      }\n\n      // Test generic recovery\n      const genericRecovery = await recoveryManager.performRecovery('test-failure', { test: true });\n      result.details.genericRecovery = genericRecovery;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Recovery procedures test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Test atomic operations\n   */\n  async testAtomicOperations() {\n    const result = { success: true, errors: [], details: {} };\n\n    try {\n      const { createAtomicOperation } = await import('../rollback/index.js');\n\n      // Test atomic operation creation\n      const atomicOp = createAtomicOperation(this.rollbackSystem, 'test-operation');\n\n      // Test begin\n      const beginResult = await atomicOp.begin();\n      result.details.atomicBegin = { success: beginResult };\n\n      if (!beginResult) {\n        result.errors.push('Atomic operation begin failed');\n        return result;\n      }\n\n      // Test commit\n      await atomicOp.commit();\n      result.details.atomicCommit = { success: true };\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Atomic operations test failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Generate test report\n   */\n  generateTestReport() {\n    console.log('\\n' + '='.repeat(60));\n    console.log('🧪 VALIDATION & ROLLBACK SYSTEM TEST REPORT');\n    console.log('='.repeat(60));\n\n    const passed = this.testResults.filter((test) => test.success).length;\n    const failed = this.testResults.filter((test) => !test.success).length;\n    const total = this.testResults.length;\n\n    console.log(`\\n📊 Summary: ${passed}/${total} tests passed`);\n\n    if (failed === 0) {\n      printSuccess('🎉 All tests passed!');\n    } else {\n      printError(`❌ ${failed} tests failed`);\n    }\n\n    console.log('\\n📋 Test Results:');\n    this.testResults.forEach((test) => {\n      const status = test.success ? '✅' : '❌';\n      console.log(`  ${status} ${test.name}`);\n\n      if (!test.success && test.error) {\n        console.log(`    Error: ${test.error}`);\n      }\n    });\n\n    console.log('\\n' + '='.repeat(60));\n\n    // Overall system health assessment\n    const healthScore = (passed / total) * 100;\n    console.log(`\\n🏥 System Health Score: ${healthScore.toFixed(1)}%`);\n\n    if (healthScore >= 90) {\n      printSuccess('🟢 Excellent - System is fully operational');\n    } else if (healthScore >= 70) {\n      printWarning('🟡 Good - System is mostly operational with minor issues');\n    } else if (healthScore >= 50) {\n      printWarning('🟠 Fair - System has some significant issues');\n    } else {\n      printError('🔴 Poor - System has major issues requiring attention');\n    }\n  }\n\n  // Helper methods for creating test files\n\n  async createTestFiles() {\n    try {\n      await fs.mkdir(`${this.workingDir}/test-temp`, { recursive: true });\n      await fs.writeFile(`${this.workingDir}/test-temp/CLAUDE.md`, '# Test CLAUDE.md', 'utf8');\n      await fs.writeFile(`${this.workingDir}/test-temp/memory-bank.md`, '# Test Memory Bank', 'utf8');\n    } catch {\n      // Test files creation failed - not critical for testing\n    }\n  }\n\n  async cleanupTestFiles() {\n    try {\n      await fs.unlink(`${this.workingDir}/test-temp`, { recursive: true });\n    } catch {\n      // Cleanup failed - not critical\n    }\n  }\n\n  async createTestConfigs() {\n    try {\n      const testConfig = {\n        version: '1.0',\n        modes: {\n          'test-mode': {\n            description: 'Test mode for validation',\n          },\n        },\n      };\n\n      await fs.writeFile(\n        `${this.workingDir}/test-roomodes`, JSON.stringify(testConfig, null, 2, 'utf8'),\n      );\n    } catch {\n      // Test config creation failed - not critical\n    }\n  }\n\n  async cleanupTestConfigs() {\n    try {\n      await fs.unlink(`${this.workingDir}/test-roomodes`);\n    } catch {\n      // Cleanup failed - not critical\n    }\n  }\n\n  async createTestSparcConfig() {\n    try {\n      await this.createTestConfigs();\n      await fs.mkdir(`${this.workingDir}/test-roo`, { recursive: true });\n    } catch {\n      // Test SPARC config creation failed - not critical\n    }\n  }\n\n  async cleanupTestSparcConfig() {\n    try {\n      await this.cleanupTestConfigs();\n      await fs.unlink(`${this.workingDir}/test-roo`, { recursive: true });\n    } catch {\n      // Cleanup failed - not critical\n    }\n  }\n}\n\n/**\n * Run validation and rollback tests\n */\nexport async function runValidationTests(workingDir) {\n  const testRunner = new ValidationTestRunner(workingDir);\n  await testRunner.runAllTests();\n  return testRunner.testResults;\n}\n"],"names":["ValidationSystem","promises","fs","RollbackSystem","printSuccess","printError","printWarning","ValidationTestRunner","workingDir","validationSystem","rollbackSystem","testResults","runAllTests","console","log","tests","name","test","testPreInitValidation","testPostInitValidation","testConfigValidation","testModeFunctionality","testHealthChecks","testBackupSystem","testRollbackSystem","testStateTracking","testRecoveryProcedures","testAtomicOperations","testCase","result","push","success","details","errors","forEach","error","message","generateTestReport","normalValidation","validatePreInit","normal","length","expectedFailures","forceValidation","force","createTestFiles","postValidation","validatePostInit","cleanupTestFiles","createTestConfigs","configValidation","validateConfiguration","cleanupTestConfigs","createTestSparcConfig","modeTests","cleanupTestSparcConfig","healthChecks","runHealthChecks","backupResult","backupManager","createBackup","backupCreation","backups","listBackups","backupListing","count","id","deleteResult","deleteBackup","backupDeletion","rollbackValidation","validateRollbackSystem","rollbackPoints","listRollbackPoints","checkpoints","stateTracker","checkpoint","createCheckpoint","checkpointCreation","rollbackPoint","recordRollbackPoint","testData","rollbackPointCreation","stateValidation","validateStateTracking","recoveryManager","recoveryValidation","validateRecoverySystem","genericRecovery","performRecovery","createAtomicOperation","atomicOp","beginResult","begin","atomicBegin","commit","atomicCommit","repeat","passed","filter","failed","total","status","healthScore","toFixed","mkdir","recursive","writeFile","unlink","testConfig","version","modes","description","JSON","stringify","runValidationTests","testRunner"],"mappings":"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"}