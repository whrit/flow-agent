{"version":3,"sources":["../../../../../src/cli/simple-commands/init/help.js"],"sourcesContent":["// help.js - Help text for init command\n\nexport function showInitHelp() {\n  console.log('Initialize Claude Code integration files with Claude Flow v2.0.0');\n  console.log();\n  console.log('Usage: claude-flow init [options]');\n  console.log();\n  console.log('üöÄ DEFAULT BEHAVIOR:');\n  console.log('  claude-flow init     Initialize with Claude Flow v2.0.0 enhanced features');\n  console.log('                       Creates CLAUDE.md & .claude/commands for MCP integration');\n  console.log();\n  console.log('Standard Options:');\n  console.log('  --force, -f          Overwrite existing files (also updates .gitignore)');\n  console.log('  --dry-run, -d        Preview what would be created without making changes');\n  console.log('  --help, -h           Show this help message');\n  console.log();\n  console.log('Alternative Initialization Modes:');\n  console.log('  --basic              Use basic initialization (pre-v2.0.0 behavior)');\n  console.log('  --sparc, -s          Initialize with SPARC development environment');\n  console.log('  --minimal, -m        Create minimal configuration files');\n  console.log('  --modes <list>       Initialize only specific SPARC modes (comma-separated)');\n  console.log('  --skip-mcp           Skip automatic MCP server setup in Claude Code');\n  console.log('  --monitoring         Enable token usage tracking and telemetry setup');\n  console.log();\n  console.log('Verification & Pair Programming:');\n  console.log('  --verify             Initialize with Truth Verification System enabled');\n  console.log('  --pair               Initialize with Pair Programming mode enabled');\n  console.log('                       (These options create verification-focused CLAUDE.md)');\n  console.log();\n  console.log('Advanced Options:');\n  console.log('  --enhanced, --safe   Enhanced initialization with validation and rollback');\n  console.log('  --validate           Run validation checks only');\n  console.log('  --validate-only      Validate without initializing');\n  console.log('  --rollback           Rollback previous initialization');\n  console.log('  --list-backups       List available backups and rollback points');\n  console.log();\n  console.log('Validation & Rollback Options:');\n  console.log('  --skip-pre-validation    Skip pre-initialization checks');\n  console.log('  --skip-backup           Skip backup creation');\n  console.log('  --rollback --full       Perform full system rollback');\n  console.log('  --rollback --partial --phase <name>  Rollback specific phase');\n  console.log('  --validate --skip-pre-init           Skip pre-init validation');\n  console.log('  --validate --skip-config            Skip configuration validation');\n  console.log('  --validate --skip-mode-test         Skip SPARC mode testing');\n  console.log();\n  console.log('Examples:');\n  console.log('üåä CLAUDE FLOW v2.0.0 (DEFAULT):');\n  console.log('  claude-flow init                    # ‚≠ê DEFAULT: Full Claude Flow v2.0.0 setup');\n  console.log('  claude-flow init --force            # Overwrite existing configuration');\n  console.log('  claude-flow init --dry-run          # Preview what will be created');\n  console.log('  claude-flow init --monitoring       # Initialize with token tracking enabled');\n  console.log();\n  console.log('üöÄ STANDARD INITIALIZATION:');\n  console.log('  npx claude-flow@latest init --sparc --force  # ‚≠ê RECOMMENDED: Optimized setup');\n  console.log('  npx claude-flow@latest init --sparc          # Standard SPARC setup');\n  console.log(\n    '  claude-flow init --sparc --force             # Optimized setup (existing project)',\n  );\n  console.log('  claude-flow init --sparc --modes architect,tdd,code  # Selective initialization');\n  console.log('  claude-flow init --dry-run --sparc          # Preview initialization');\n  console.log('  claude-flow init --minimal                  # Minimal setup');\n  console.log();\n  console.log('üîç VERIFICATION & PAIR PROGRAMMING:');\n  console.log('  claude-flow init --verify                   # Truth Verification System setup');\n  console.log('  claude-flow init --pair                     # Pair Programming mode setup');\n  console.log('  claude-flow init --verify --pair            # Both verification and pairing');\n  console.log('  npx claude-flow@alpha init --verify --pair  # Complete verification setup');\n  console.log();\n  console.log('üîÑ VALIDATION & ROLLBACK:');\n  console.log('  claude-flow init --validate                 # Validate existing setup');\n  console.log('  claude-flow init --rollback --full          # Full system rollback');\n  console.log('  claude-flow init --rollback --partial --phase sparc-init  # Rollback SPARC only');\n  console.log('  claude-flow init --list-backups             # Show available backups');\n  console.log();\n  console.log('What gets created:');\n  console.log('  ‚Ä¢ .claude/settings.json - Claude Code configuration with hooks');\n  console.log('  ‚Ä¢ .claude/settings.local.json - Pre-approved MCP permissions (no prompts!)');\n  console.log('  ‚Ä¢ .mcp.json - Project-scoped MCP server configuration');\n  console.log('  ‚Ä¢ claude-flow.config.json - Claude Flow features and performance settings');\n  console.log('  ‚Ä¢ .claude/commands/ directory with 20+ Claude Code slash commands');\n  console.log('  ‚Ä¢ CLAUDE.md with project instructions (v2.0.0 enhanced by default)');\n  console.log('  ‚Ä¢ memory/ directory for persistent context storage');\n  console.log('  ‚Ä¢ coordination/ directory for agent orchestration');\n  console.log('  ‚Ä¢ ./claude-flow local executable wrapper');\n  console.log('  ‚Ä¢ .gitignore entries for Claude Flow generated files');\n  console.log('  ‚Ä¢ Automatic MCP server setup if Claude Code CLI is installed');\n  console.log('  ‚Ä¢ Pre-configured for TDD, architecture, and code generation');\n  console.log();\n  console.log('Claude Code Slash Commands Created:');\n  console.log('  ‚Ä¢ /sparc - Execute SPARC methodology workflows');\n  console.log('  ‚Ä¢ /sparc-<mode> - Run specific SPARC modes (17+ modes)');\n  console.log('  ‚Ä¢ /claude-flow-help - Show all claude-flow commands');\n  console.log('  ‚Ä¢ /claude-flow-memory - Interact with memory system');\n  console.log('  ‚Ä¢ /claude-flow-swarm - Coordinate multi-agent swarms');\n  console.log();\n  console.log('Available SPARC modes:');\n  console.log('  ‚Ä¢ architect - System design and architecture');\n  console.log('  ‚Ä¢ code - Clean, modular implementation');\n  console.log('  ‚Ä¢ tdd - Test-driven development');\n  console.log('  ‚Ä¢ debug - Advanced debugging and optimization');\n  console.log('  ‚Ä¢ security-review - Security analysis and hardening');\n  console.log('  ‚Ä¢ docs-writer - Documentation creation');\n  console.log('  ‚Ä¢ integration - System integration');\n  console.log('  ‚Ä¢ swarm - Multi-agent coordination');\n  console.log('  ‚Ä¢ spec-pseudocode - Requirements and specifications');\n  console.log('  ‚Ä¢ devops - Deployment and infrastructure');\n  console.log('  ‚Ä¢ And 7+ more specialized modes...');\n  console.log();\n  console.log('Learn more: https://github.com/ruvnet/claude-code-flow');\n}\n"],"names":["showInitHelp","console","log"],"mappings":"AAEA,OAAO,SAASA;IACdC,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CACT;IAEFD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;AACd"}