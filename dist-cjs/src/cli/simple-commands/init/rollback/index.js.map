{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/rollback/index.js"],"sourcesContent":["// rollback/index.js - Comprehensive rollback system for SPARC initialization\n\nimport { BackupManager } from './backup-manager.js';\nimport { RollbackExecutor } from './rollback-executor.js';\nimport { StateTracker } from './state-tracker.js';\nimport { RecoveryManager } from './recovery-manager.js';\nimport { printSuccess, printError, printWarning } from '../../../utils.js';\n\n/**\n * Main rollback orchestrator\n */\nexport class RollbackSystem {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n    this.backupManager = new BackupManager(workingDir);\n    this.rollbackExecutor = new RollbackExecutor(workingDir);\n    this.stateTracker = new StateTracker(workingDir);\n    this.recoveryManager = new RecoveryManager(workingDir);\n  }\n\n  /**\n   * Create backup before initialization\n   */\n  async createPreInitBackup() {\n    const result = {\n      success: true,\n      backupId: null,\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      console.log('🔄 Creating pre-initialization backup...');\n\n      const backup = await this.backupManager.createBackup('pre-init');\n      result.backupId = backup.id;\n      result.success = backup.success;\n\n      if (backup.success) {\n        printSuccess(`Backup created: ${backup.id}`);\n        console.log(`  📁 Backup location: ${backup.location}`);\n\n        // Record rollback point\n        await this.stateTracker.recordRollbackPoint('pre-init', {\n          backupId: backup.id,\n          timestamp: Date.now(),\n          state: 'clean',\n        });\n      } else {\n        result.errors.push(...backup.errors);\n        printError('Failed to create backup');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Backup creation failed: ${error.message}`);\n      printError(`Backup failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Create checkpoint during initialization\n   */\n  async createCheckpoint(phase, data = {}) {\n    const result = {\n      success: true,\n      checkpointId: null,\n      errors: [],\n    };\n\n    try {\n      const checkpoint = await this.stateTracker.createCheckpoint(phase, data);\n      result.checkpointId = checkpoint.id;\n      result.success = checkpoint.success;\n\n      if (!checkpoint.success) {\n        result.errors.push(...checkpoint.errors);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Checkpoint creation failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Perform full rollback to pre-initialization state\n   */\n  async performFullRollback(backupId = null) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      console.log('🔄 Performing full rollback...');\n\n      // Find the appropriate backup\n      const targetBackup = backupId || (await this.findLatestPreInitBackup());\n      if (!targetBackup) {\n        result.success = false;\n        result.errors.push('No suitable backup found for rollback');\n        return result;\n      }\n\n      // Execute rollback\n      const rollbackResult = await this.rollbackExecutor.executeFullRollback(targetBackup);\n      result.success = rollbackResult.success;\n      result.errors.push(...rollbackResult.errors);\n      result.warnings.push(...rollbackResult.warnings);\n      result.actions.push(...rollbackResult.actions);\n\n      if (rollbackResult.success) {\n        printSuccess('Full rollback completed successfully');\n\n        // Update state tracking\n        await this.stateTracker.recordRollback(targetBackup, 'full');\n      } else {\n        printError('Full rollback failed');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Rollback failed: ${error.message}`);\n      printError(`Rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Perform partial rollback to specific checkpoint\n   */\n  async performPartialRollback(phase, checkpointId = null) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      console.log(`🔄 Performing partial rollback for phase: ${phase}`);\n\n      // Find checkpoint\n      const checkpoint = checkpointId || (await this.findLatestCheckpoint(phase));\n      if (!checkpoint) {\n        result.success = false;\n        result.errors.push(`No checkpoint found for phase: ${phase}`);\n        return result;\n      }\n\n      // Execute partial rollback\n      const rollbackResult = await this.rollbackExecutor.executePartialRollback(phase, checkpoint);\n      result.success = rollbackResult.success;\n      result.errors.push(...rollbackResult.errors);\n      result.warnings.push(...rollbackResult.warnings);\n      result.actions.push(...rollbackResult.actions);\n\n      if (rollbackResult.success) {\n        printSuccess(`Partial rollback completed for phase: ${phase}`);\n\n        // Update state tracking\n        await this.stateTracker.recordRollback(checkpoint, 'partial', phase);\n      } else {\n        printError(`Partial rollback failed for phase: ${phase}`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Partial rollback failed: ${error.message}`);\n      printError(`Partial rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Auto-recovery from common failures\n   */\n  async performAutoRecovery(failureType, context = {}) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      recoveryActions: [],\n    };\n\n    try {\n      console.log(`🔧 Attempting auto-recovery for: ${failureType}`);\n\n      const recoveryResult = await this.recoveryManager.performRecovery(failureType, context);\n      result.success = recoveryResult.success;\n      result.errors.push(...recoveryResult.errors);\n      result.warnings.push(...recoveryResult.warnings);\n      result.recoveryActions.push(...recoveryResult.actions);\n\n      if (recoveryResult.success) {\n        printSuccess(`Auto-recovery completed for: ${failureType}`);\n      } else {\n        printWarning(`Auto-recovery failed for: ${failureType}`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Auto-recovery failed: ${error.message}`);\n      printError(`Auto-recovery failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * List available rollback points\n   */\n  async listRollbackPoints() {\n    const result = {\n      success: true,\n      rollbackPoints: [],\n      checkpoints: [],\n      errors: [],\n    };\n\n    try {\n      // Get rollback points\n      const rollbackPoints = await this.stateTracker.getRollbackPoints();\n      result.rollbackPoints = rollbackPoints;\n\n      // Get checkpoints\n      const checkpoints = await this.stateTracker.getCheckpoints();\n      result.checkpoints = checkpoints;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to list rollback points: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Clean up old backups and checkpoints\n   */\n  async cleanupOldBackups(keepCount = 5) {\n    const result = {\n      success: true,\n      cleaned: [],\n      errors: [],\n    };\n\n    try {\n      const cleanupResult = await this.backupManager.cleanupOldBackups(keepCount);\n      result.success = cleanupResult.success;\n      result.cleaned = cleanupResult.cleaned;\n      result.errors.push(...cleanupResult.errors);\n\n      if (cleanupResult.success) {\n        console.log(`🗑️  Cleaned up ${cleanupResult.cleaned.length} old backups`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Cleanup failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate rollback system integrity\n   */\n  async validateRollbackSystem() {\n    const result = {\n      success: true,\n      checks: {},\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Check backup system\n      const backupCheck = await this.backupManager.validateBackupSystem();\n      result.checks.backup = backupCheck;\n      if (!backupCheck.success) {\n        result.success = false;\n        result.errors.push(...backupCheck.errors);\n      }\n\n      // Check state tracking\n      const stateCheck = await this.stateTracker.validateStateTracking();\n      result.checks.stateTracking = stateCheck;\n      if (!stateCheck.success) {\n        result.warnings.push(...stateCheck.errors);\n      }\n\n      // Check recovery system\n      const recoveryCheck = await this.recoveryManager.validateRecoverySystem();\n      result.checks.recovery = recoveryCheck;\n      if (!recoveryCheck.success) {\n        result.warnings.push(...recoveryCheck.errors);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Rollback system validation failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  // Helper methods\n\n  async findLatestPreInitBackup() {\n    try {\n      const rollbackPoints = await this.stateTracker.getRollbackPoints();\n      const preInitPoints = rollbackPoints.filter((point) => point.type === 'pre-init');\n\n      if (preInitPoints.length > 0) {\n        return preInitPoints.sort((a, b) => b.timestamp - a.timestamp)[0].backupId;\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  async findLatestCheckpoint(phase) {\n    try {\n      const checkpoints = await this.stateTracker.getCheckpoints();\n      const phaseCheckpoints = checkpoints.filter((checkpoint) => checkpoint.phase === phase);\n\n      if (phaseCheckpoints.length > 0) {\n        return phaseCheckpoints.sort((a, b) => b.timestamp - a.timestamp)[0];\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Atomic operation wrapper\n */\nexport class AtomicOperation {\n  constructor(rollbackSystem, operationName) {\n    this.rollbackSystem = rollbackSystem;\n    this.operationName = operationName;\n    this.checkpointId = null;\n    this.completed = false;\n  }\n\n  /**\n   * Begin atomic operation\n   */\n  async begin() {\n    const checkpoint = await this.rollbackSystem.createCheckpoint(`atomic-${this.operationName}`, {\n      operation: this.operationName,\n      started: Date.now(),\n    });\n\n    this.checkpointId = checkpoint.checkpointId;\n    return checkpoint.success;\n  }\n\n  /**\n   * Commit atomic operation\n   */\n  async commit() {\n    this.completed = true;\n\n    // Mark checkpoint as committed\n    if (this.checkpointId) {\n      await this.rollbackSystem.stateTracker.updateCheckpoint(this.checkpointId, {\n        status: 'committed',\n        completed: Date.now(),\n      });\n    }\n  }\n\n  /**\n   * Rollback atomic operation\n   */\n  async rollback() {\n    if (this.checkpointId && !this.completed) {\n      await this.rollbackSystem.performPartialRollback(\n        `atomic-${this.operationName}`,\n        this.checkpointId,\n      );\n    }\n  }\n}\n\n/**\n * Create and manage atomic operations\n */\nexport function createAtomicOperation(rollbackSystem, operationName) {\n  return new AtomicOperation(rollbackSystem, operationName);\n}\n"],"names":["BackupManager","RollbackExecutor","StateTracker","RecoveryManager","printSuccess","printError","printWarning","RollbackSystem","workingDir","backupManager","rollbackExecutor","stateTracker","recoveryManager","createPreInitBackup","result","success","backupId","errors","warnings","console","log","backup","createBackup","id","location","recordRollbackPoint","timestamp","Date","now","state","push","error","message","createCheckpoint","phase","data","checkpointId","checkpoint","performFullRollback","actions","targetBackup","findLatestPreInitBackup","rollbackResult","executeFullRollback","recordRollback","performPartialRollback","findLatestCheckpoint","executePartialRollback","performAutoRecovery","failureType","context","recoveryActions","recoveryResult","performRecovery","listRollbackPoints","rollbackPoints","checkpoints","getRollbackPoints","getCheckpoints","cleanupOldBackups","keepCount","cleaned","cleanupResult","length","validateRollbackSystem","checks","backupCheck","validateBackupSystem","stateCheck","validateStateTracking","stateTracking","recoveryCheck","validateRecoverySystem","recovery","preInitPoints","filter","point","type","sort","a","b","phaseCheckpoints","AtomicOperation","rollbackSystem","operationName","completed","begin","operation","started","commit","updateCheckpoint","status","rollback","createAtomicOperation"],"mappings":"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"}