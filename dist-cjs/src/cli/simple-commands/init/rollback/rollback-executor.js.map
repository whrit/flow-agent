{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/rollback/rollback-executor.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// rollback-executor.js - Execute rollback operations\n\nexport class RollbackExecutor {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n  }\n\n  /**\n   * Execute full rollback to pre-initialization state\n   */\n  async executeFullRollback(backupId) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      console.log(`ðŸ”„ Executing full rollback to backup: ${backupId}`);\n\n      // Step 1: Remove initialization artifacts\n      const cleanupResult = await this.cleanupInitializationArtifacts();\n      result.actions.push(...cleanupResult.actions);\n      if (!cleanupResult.success) {\n        result.warnings.push(...cleanupResult.errors);\n      }\n\n      // Step 2: Restore from backup\n      const restoreResult = await this.restoreFromBackup(backupId);\n      result.actions.push(...restoreResult.actions);\n      if (!restoreResult.success) {\n        result.success = false;\n        result.errors.push(...restoreResult.errors);\n        return result;\n      }\n\n      // Step 3: Verify rollback\n      const verifyResult = await this.verifyRollback();\n      result.actions.push(...verifyResult.actions);\n      if (!verifyResult.success) {\n        result.warnings.push(...verifyResult.errors);\n      }\n\n      console.log('  âœ… Full rollback completed');\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Full rollback execution failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Execute partial rollback for specific component\n   */\n  async executePartialRollback(phase, checkpoint) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      console.log(`ðŸ”„ Executing partial rollback for phase: ${phase}`);\n\n      // Determine rollback strategy based on phase\n      let rollbackResult;\n\n      switch (phase) {\n        case 'sparc-init':\n          rollbackResult = await this.rollbackSparcInitialization();\n          break;\n        case 'claude-commands':\n          rollbackResult = await this.rollbackClaudeCommands();\n          break;\n        case 'memory-setup':\n          rollbackResult = await this.rollbackMemorySetup();\n          break;\n        case 'coordination-setup':\n          rollbackResult = await this.rollbackCoordinationSetup();\n          break;\n        case 'executable-creation':\n          rollbackResult = await this.rollbackExecutableCreation();\n          break;\n        default:\n          rollbackResult = await this.rollbackGenericPhase(phase, checkpoint);\n          break;\n      }\n\n      result.success = rollbackResult.success;\n      result.errors.push(...rollbackResult.errors);\n      result.warnings.push(...rollbackResult.warnings);\n      result.actions.push(...rollbackResult.actions);\n\n      if (rollbackResult.success) {\n        console.log(`  âœ… Partial rollback completed for phase: ${phase}`);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Partial rollback execution failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Rollback SPARC initialization\n   */\n  async rollbackSparcInitialization() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      const itemsToRemove = ['.roomodes', '.roo', '.claude/commands/sparc'];\n\n      for (const item of itemsToRemove) {\n        const itemPath = `${this.workingDir}/${item}`;\n\n        try {\n          const stat = await fs.stat(itemPath);\n\n          if (stat.isFile) {\n            await fs.unlink(itemPath);\n            result.actions.push(`Removed file: ${item}`);\n          } else if (stat.isDirectory) {\n            await fs.unlink(itemPath, { recursive: true });\n            result.actions.push(`Removed directory: ${item}`);\n          }\n        } catch {\n          // Item doesn't exist - that's fine\n          result.actions.push(`Item not found (already clean): ${item}`);\n        }\n      }\n\n      // Remove SPARC-specific content from CLAUDE.md\n      await this.removeSPARCContentFromClaudeMd();\n      result.actions.push('Cleaned SPARC content from CLAUDE.md');\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`SPARC rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Rollback Claude commands\n   */\n  async rollbackClaudeCommands() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      const commandsDir = `${this.workingDir}/.claude/commands`;\n\n      try {\n        // Remove all command files\n        for await (const entry of fs.readdir(commandsDir)) {\n          if (entry.isFile && entry.name.endsWith('.js')) {\n            await fs.unlink(`${commandsDir}/${entry.name}`);\n            result.actions.push(`Removed command: ${entry.name}`);\n          } else if (entry.isDirectory) {\n            await fs.unlink(`${commandsDir}/${entry.name}`, { recursive: true });\n            result.actions.push(`Removed command directory: ${entry.name}`);\n          }\n        }\n      } catch {\n        result.actions.push('Commands directory was already clean');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Claude commands rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Rollback memory setup\n   */\n  async rollbackMemorySetup() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      const memoryItems = ['memory/claude-flow-data.json', 'memory/agents', 'memory/sessions'];\n\n      for (const item of memoryItems) {\n        const itemPath = `${this.workingDir}/${item}`;\n\n        try {\n          const stat = await fs.stat(itemPath);\n\n          if (stat.isFile) {\n            await fs.unlink(itemPath);\n            result.actions.push(`Removed memory file: ${item}`);\n          } else if (stat.isDirectory) {\n            await fs.unlink(itemPath, { recursive: true });\n            result.actions.push(`Removed memory directory: ${item}`);\n          }\n        } catch {\n          result.actions.push(`Memory item not found: ${item}`);\n        }\n      }\n\n      // Keep memory directory but clean it\n      try {\n        await fs.mkdir(`${this.workingDir}/memory`, { recursive: true });\n        result.actions.push('Recreated clean memory directory');\n      } catch {\n        result.warnings.push('Could not recreate memory directory');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Memory setup rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Rollback coordination setup\n   */\n  async rollbackCoordinationSetup() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      const coordinationDir = `${this.workingDir}/coordination`;\n\n      try {\n        await fs.unlink(coordinationDir, { recursive: true });\n        result.actions.push('Removed coordination directory');\n      } catch {\n        result.actions.push('Coordination directory was already clean');\n      }\n\n      // Remove coordination.md\n      try {\n        await fs.unlink(`${this.workingDir}/coordination.md`);\n        result.actions.push('Removed coordination.md');\n      } catch {\n        result.actions.push('coordination.md was already clean');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Coordination setup rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Rollback executable creation\n   */\n  async rollbackExecutableCreation() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      const executablePath = `${this.workingDir}/claude-flow`;\n\n      try {\n        await fs.unlink(executablePath);\n        result.actions.push('Removed claude-flow executable');\n      } catch {\n        result.actions.push('claude-flow executable was already clean');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Executable rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Generic phase rollback\n   */\n  async rollbackGenericPhase(phase, checkpoint) {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n      actions: [],\n    };\n\n    try {\n      // Use checkpoint data to determine what to rollback\n      if (checkpoint && checkpoint.data) {\n        const actions = checkpoint.data.actions || [];\n\n        // Reverse the actions\n        for (const action of actions.reverse()) {\n          const rollbackResult = await this.reverseAction(action);\n          if (rollbackResult.success) {\n            result.actions.push(rollbackResult.description);\n          } else {\n            result.warnings.push(`Could not reverse action: ${action.type}`);\n          }\n        }\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Generic phase rollback failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Clean up all initialization artifacts\n   */\n  async cleanupInitializationArtifacts() {\n    const result = {\n      success: true,\n      errors: [],\n      actions: [],\n    };\n\n    try {\n      const artifactsToRemove = [\n        'CLAUDE.md',\n        'memory-bank.md',\n        'coordination.md',\n        'claude-flow',\n        '.roomodes',\n        '.roo',\n        '.claude',\n        'memory',\n        'coordination',\n      ];\n\n      for (const artifact of artifactsToRemove) {\n        const artifactPath = `${this.workingDir}/${artifact}`;\n\n        try {\n          const stat = await fs.stat(artifactPath);\n\n          if (stat.isFile) {\n            await fs.unlink(artifactPath);\n            result.actions.push(`Removed file: ${artifact}`);\n          } else if (stat.isDirectory) {\n            await fs.unlink(artifactPath, { recursive: true });\n            result.actions.push(`Removed directory: ${artifact}`);\n          }\n        } catch {\n          // Artifact doesn't exist - that's fine\n          result.actions.push(`Artifact not found: ${artifact}`);\n        }\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Cleanup failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Restore from backup\n   */\n  async restoreFromBackup(backupId) {\n    const result = {\n      success: true,\n      errors: [],\n      actions: [],\n    };\n\n    try {\n      // This would typically use the BackupManager\n      // For now, we'll simulate the restoration\n      result.actions.push(`Restored from backup: ${backupId}`);\n\n      // In a real implementation, this would:\n      // 1. Read the backup manifest\n      // 2. Restore each file and directory\n      // 3. Set correct permissions\n      // 4. Verify restoration\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Restore from backup failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Verify rollback completed successfully\n   */\n  async verifyRollback() {\n    const result = {\n      success: true,\n      errors: [],\n      actions: [],\n    };\n\n    try {\n      const expectedCleanItems = [\n        'CLAUDE.md',\n        'memory-bank.md',\n        'coordination.md',\n        '.roomodes',\n        '.roo',\n        'claude-flow',\n      ];\n\n      let foundArtifacts = 0;\n      for (const item of expectedCleanItems) {\n        try {\n          await fs.stat(`${this.workingDir}/${item}`);\n          foundArtifacts++;\n        } catch {\n          // Item doesn't exist - good\n        }\n      }\n\n      if (foundArtifacts > 0) {\n        result.success = false;\n        result.errors.push(`Rollback incomplete: ${foundArtifacts} artifacts still present`);\n      } else {\n        result.actions.push('Rollback verification passed');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Rollback verification failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Remove SPARC content from CLAUDE.md\n   */\n  async removeSPARCContentFromClaudeMd() {\n    try {\n      const claudePath = `${this.workingDir}/CLAUDE.md`;\n\n      try {\n        const content = await fs.readFile(claudePath, 'utf8');\n\n        // Remove SPARC-specific sections\n        const cleanedContent = content\n          .replace(/## SPARC Development Commands[\\s\\S]*?(?=##|\\n#|\\n$)/g, '')\n          .replace(/### SPARC[\\s\\S]*?(?=###|\\n##|\\n#|\\n$)/g, '')\n          .replace(/\\n{3,}/g, '\\n\\n') // Clean up multiple newlines\n          .trim();\n\n        await fs.writeFile(claudePath, cleanedContent, 'utf8');\n      } catch {\n        // File doesn't exist or can't be modified\n      }\n    } catch {\n      // Error handling CLAUDE.md - continue silently\n    }\n  }\n\n  /**\n   * Reverse a specific action\n   */\n  async reverseAction(action) {\n    const result = {\n      success: true,\n      description: '',\n    };\n\n    try {\n      switch (action.type) {\n        case 'file_created':\n          await fs.unlink(action.path);\n          result.description = `Removed created file: ${action.path}`;\n          break;\n\n        case 'directory_created':\n          await fs.unlink(action.path, { recursive: true });\n          result.description = `Removed created directory: ${action.path}`;\n          break;\n\n        case 'file_modified':\n          if (action.backup) {\n            await fs.writeFile(action.path, action.backup, 'utf8');\n            result.description = `Restored modified file: ${action.path}`;\n          }\n          break;\n\n        default:\n          result.success = false;\n          result.description = `Unknown action type: ${action.type}`;\n          break;\n      }\n    } catch (error) {\n      result.success = false;\n      result.description = `Failed to reverse action: ${error.message}`;\n    }\n\n    return result;\n  }\n}\n"],"names":["promises","fs","RollbackExecutor","workingDir","executeFullRollback","backupId","result","success","errors","warnings","actions","console","log","cleanupResult","cleanupInitializationArtifacts","push","restoreResult","restoreFromBackup","verifyResult","verifyRollback","error","message","executePartialRollback","phase","checkpoint","rollbackResult","rollbackSparcInitialization","rollbackClaudeCommands","rollbackMemorySetup","rollbackCoordinationSetup","rollbackExecutableCreation","rollbackGenericPhase","itemsToRemove","item","itemPath","stat","isFile","unlink","isDirectory","recursive","removeSPARCContentFromClaudeMd","commandsDir","entry","readdir","name","endsWith","memoryItems","mkdir","coordinationDir","executablePath","data","action","reverse","reverseAction","description","type","artifactsToRemove","artifact","artifactPath","expectedCleanItems","foundArtifacts","claudePath","content","readFile","cleanedContent","replace","trim","writeFile","path","backup"],"mappings":"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"}