{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/rollback/state-tracker.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// state-tracker.js - Track initialization state and rollback points\n\nexport class StateTracker {\n  constructor(workingDir) {\n    this.workingDir = workingDir;\n    this.stateFile = `${workingDir}/.claude-flow-state.json`;\n  }\n\n  /**\n   * Record a rollback point\n   */\n  async recordRollbackPoint(type, data) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n\n      const rollbackPoint = {\n        id: this.generateId(),\n        type,\n        timestamp: Date.now(),\n        data,\n        ...data,\n      };\n\n      state.rollbackPoints = state.rollbackPoints || [];\n      state.rollbackPoints.push(rollbackPoint);\n\n      // Keep only the last 10 rollback points\n      if (state.rollbackPoints.length > 10) {\n        state.rollbackPoints = state.rollbackPoints.slice(-10);\n      }\n\n      await this.saveState(state);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to record rollback point: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Create a checkpoint\n   */\n  async createCheckpoint(phase, data) {\n    const result = {\n      success: true,\n      id: null,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n\n      const checkpoint = {\n        id: this.generateId(),\n        phase,\n        timestamp: Date.now(),\n        data,\n        status: 'active',\n      };\n\n      result.id = checkpoint.id;\n\n      state.checkpoints = state.checkpoints || [];\n      state.checkpoints.push(checkpoint);\n\n      // Keep only the last 20 checkpoints\n      if (state.checkpoints.length > 20) {\n        state.checkpoints = state.checkpoints.slice(-20);\n      }\n\n      await this.saveState(state);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to create checkpoint: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Update a checkpoint\n   */\n  async updateCheckpoint(checkpointId, updates) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n\n      if (state.checkpoints) {\n        const checkpoint = state.checkpoints.find((cp) => cp.id === checkpointId);\n        if (checkpoint) {\n          Object.assign(checkpoint, updates);\n          await this.saveState(state);\n        } else {\n          result.success = false;\n          result.errors.push(`Checkpoint not found: ${checkpointId}`);\n        }\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to update checkpoint: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Record a rollback operation\n   */\n  async recordRollback(targetId, rollbackType, phase = null) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n\n      const rollbackRecord = {\n        id: this.generateId(),\n        targetId,\n        rollbackType,\n        phase,\n        timestamp: Date.now(),\n        status: 'completed',\n      };\n\n      state.rollbackHistory = state.rollbackHistory || [];\n      state.rollbackHistory.push(rollbackRecord);\n\n      // Keep only the last 50 rollback records\n      if (state.rollbackHistory.length > 50) {\n        state.rollbackHistory = state.rollbackHistory.slice(-50);\n      }\n\n      await this.saveState(state);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to record rollback: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Get rollback points\n   */\n  async getRollbackPoints() {\n    try {\n      const state = await this.loadState();\n      return state.rollbackPoints || [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Get checkpoints\n   */\n  async getCheckpoints() {\n    try {\n      const state = await this.loadState();\n      return state.checkpoints || [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Get rollback history\n   */\n  async getRollbackHistory() {\n    try {\n      const state = await this.loadState();\n      return state.rollbackHistory || [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Track file operation\n   */\n  async trackFileOperation(operation, filePath, metadata = {}) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n\n      const fileOp = {\n        id: this.generateId(),\n        operation, // 'create', 'modify', 'delete'\n        filePath,\n        timestamp: Date.now(),\n        metadata,\n      };\n\n      state.fileOperations = state.fileOperations || [];\n      state.fileOperations.push(fileOp);\n\n      // Keep only the last 100 file operations\n      if (state.fileOperations.length > 100) {\n        state.fileOperations = state.fileOperations.slice(-100);\n      }\n\n      await this.saveState(state);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to track file operation: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Get current initialization phase\n   */\n  async getCurrentPhase() {\n    try {\n      const state = await this.loadState();\n      return state.currentPhase || 'not-started';\n    } catch {\n      return 'not-started';\n    }\n  }\n\n  /**\n   * Set current initialization phase\n   */\n  async setCurrentPhase(phase) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n      state.currentPhase = phase;\n      state.phaseTimestamp = Date.now();\n\n      // Track phase transitions\n      state.phaseHistory = state.phaseHistory || [];\n      state.phaseHistory.push({\n        phase,\n        timestamp: Date.now(),\n      });\n\n      await this.saveState(state);\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Failed to set phase: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Get initialization statistics\n   */\n  async getInitializationStats() {\n    try {\n      const state = await this.loadState();\n\n      return {\n        rollbackPoints: (state.rollbackPoints || []).length,\n        checkpoints: (state.checkpoints || []).length,\n        rollbackHistory: (state.rollbackHistory || []).length,\n        fileOperations: (state.fileOperations || []).length,\n        currentPhase: state.currentPhase || 'not-started',\n        lastActivity: state.lastActivity || 0,\n        phaseHistory: state.phaseHistory || [],\n      };\n    } catch {\n      return {\n        rollbackPoints: 0,\n        checkpoints: 0,\n        rollbackHistory: 0,\n        fileOperations: 0,\n        currentPhase: 'not-started',\n        lastActivity: 0,\n        phaseHistory: [],\n      };\n    }\n  }\n\n  /**\n   * Clean up old state data\n   */\n  async cleanupOldState(daysToKeep = 7) {\n    const result = {\n      success: true,\n      cleaned: 0,\n      errors: [],\n    };\n\n    try {\n      const state = await this.loadState();\n      const cutoffTime = Date.now() - daysToKeep * 24 * 60 * 60 * 1000;\n\n      let cleaned = 0;\n\n      // Clean rollback points\n      if (state.rollbackPoints) {\n        const before = state.rollbackPoints.length;\n        state.rollbackPoints = state.rollbackPoints.filter((rp) => rp.timestamp > cutoffTime);\n        cleaned += before - state.rollbackPoints.length;\n      }\n\n      // Clean checkpoints\n      if (state.checkpoints) {\n        const before = state.checkpoints.length;\n        state.checkpoints = state.checkpoints.filter((cp) => cp.timestamp > cutoffTime);\n        cleaned += before - state.checkpoints.length;\n      }\n\n      // Clean file operations\n      if (state.fileOperations) {\n        const before = state.fileOperations.length;\n        state.fileOperations = state.fileOperations.filter((fo) => fo.timestamp > cutoffTime);\n        cleaned += before - state.fileOperations.length;\n      }\n\n      result.cleaned = cleaned;\n\n      if (cleaned > 0) {\n        await this.saveState(state);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`State cleanup failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate state tracking system\n   */\n  async validateStateTracking() {\n    const result = {\n      success: true,\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Test state file access\n      const state = await this.loadState();\n\n      // Test write access\n      state.lastValidation = Date.now();\n      await this.saveState(state);\n\n      // Validate state structure\n      const validationResult = this.validateStateStructure(state);\n      if (!validationResult.valid) {\n        result.warnings.push(...validationResult.issues);\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`State tracking validation failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Export state for backup\n   */\n  async exportState() {\n    try {\n      const state = await this.loadState();\n      return {\n        success: true,\n        data: state,\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Import state from backup\n   */\n  async importState(stateData) {\n    const result = {\n      success: true,\n      errors: [],\n    };\n\n    try {\n      if (this.validateStateStructure(stateData).valid) {\n        await this.saveState(stateData);\n      } else {\n        result.success = false;\n        result.errors.push('Invalid state data structure');\n      }\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`State import failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  // Helper methods\n\n  async loadState() {\n    try {\n      const content = await fs.readFile(this.stateFile, 'utf8');\n      return JSON.parse(content);\n    } catch {\n      // Return default state if file doesn't exist or is invalid\n      return {\n        version: '1.0',\n        created: Date.now(),\n        lastActivity: Date.now(),\n        rollbackPoints: [],\n        checkpoints: [],\n        rollbackHistory: [],\n        fileOperations: [],\n        currentPhase: 'not-started',\n        phaseHistory: [],\n      };\n    }\n  }\n\n  async saveState(state) {\n    state.lastActivity = Date.now();\n    state.version = '1.0';\n\n    await fs.writeFile(this.stateFile, JSON.stringify(state, null, 2, 'utf8'));\n  }\n\n  generateId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  validateStateStructure(state) {\n    const result = {\n      valid: true,\n      issues: [],\n    };\n\n    if (!state || typeof state !== 'object') {\n      result.valid = false;\n      result.issues.push('State must be an object');\n      return result;\n    }\n\n    // Check required fields\n    const requiredFields = ['version', 'created', 'lastActivity'];\n    for (const field of requiredFields) {\n      if (!(field in state)) {\n        result.issues.push(`Missing required field: ${field}`);\n      }\n    }\n\n    // Check array fields\n    const arrayFields = ['rollbackPoints', 'checkpoints', 'rollbackHistory', 'fileOperations'];\n    for (const field of arrayFields) {\n      if (field in state && !Array.isArray(state[field])) {\n        result.issues.push(`Field ${field} must be an array`);\n      }\n    }\n\n    return result;\n  }\n}\n"],"names":["promises","fs","StateTracker","workingDir","stateFile","recordRollbackPoint","type","data","result","success","errors","state","loadState","rollbackPoint","id","generateId","timestamp","Date","now","rollbackPoints","push","length","slice","saveState","error","message","createCheckpoint","phase","checkpoint","status","checkpoints","updateCheckpoint","checkpointId","updates","find","cp","Object","assign","recordRollback","targetId","rollbackType","rollbackRecord","rollbackHistory","getRollbackPoints","getCheckpoints","getRollbackHistory","trackFileOperation","operation","filePath","metadata","fileOp","fileOperations","getCurrentPhase","currentPhase","setCurrentPhase","phaseTimestamp","phaseHistory","getInitializationStats","lastActivity","cleanupOldState","daysToKeep","cleaned","cutoffTime","before","filter","rp","fo","validateStateTracking","warnings","lastValidation","validationResult","validateStateStructure","valid","issues","exportState","importState","stateData","content","readFile","JSON","parse","version","created","writeFile","stringify","Math","random","toString","substr","requiredFields","field","arrayFields","Array","isArray"],"mappings":"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"}