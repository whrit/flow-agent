{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/claude-commands/sparc-commands.js"],"sourcesContent":["// sparc-commands.js - SPARC-specific slash commands\n\n// Create SPARC mode slash command\nexport function createSparcSlashCommand(mode) {\n  // Extract the full description without truncation\n  const fullDescription =\n    mode.roleDefinition.length > 100\n      ? `${mode.roleDefinition.substring(0, 97)}...`\n      : mode.roleDefinition;\n\n  return `---\nname: sparc-${mode.slug}\ndescription: ${mode.name} - ${fullDescription}\n---\n\n# ${mode.name}\n\n## Role Definition\n${mode.roleDefinition}\n\n## Custom Instructions\n${mode.customInstructions}\n\n## Available Tools\n${\n  Array.isArray(mode.groups)\n    ? mode.groups\n        .map((g) => {\n          if (typeof g === 'string') {\n            return `- **${g}**: ${getToolDescription(g)}`;\n          } else if (Array.isArray(g)) {\n            return `- **${g[0]}**: ${g[1]?.description || getToolDescription(g[0])} ${g[1]?.fileRegex ? `(Files matching: ${g[1].fileRegex})` : ''}`;\n          }\n          return `- ${JSON.stringify(g)}`;\n        })\n        .join('\\n')\n    : 'None'\n}\n\n## Usage\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"${mode.slug}\",\n  task_description: \"${getExampleTask(mode.slug)}\",\n  options: {\n    namespace: \"${mode.slug}\",\n    non_interactive: false\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run ${mode.slug} \"${getExampleTask(mode.slug)}\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run ${mode.slug} \"${getExampleTask(mode.slug)}\"\n\n# With namespace\nnpx claude-flow sparc run ${mode.slug} \"your task\" --namespace ${mode.slug}\n\n# Non-interactive mode\nnpx claude-flow sparc run ${mode.slug} \"your task\" --non-interactive\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run ${mode.slug} \"${getExampleTask(mode.slug)}\"\n\\`\\`\\`\n\n## Memory Integration\n\n### Using MCP Tools (Preferred)\n\\`\\`\\`javascript\n// Store mode-specific context\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"${mode.slug}_context\",\n  value: \"important decisions\",\n  namespace: \"${mode.slug}\"\n}\n\n// Query previous work\nmcp__claude-flow__memory_search {\n  pattern: \"${mode.slug}\",\n  namespace: \"${mode.slug}\",\n  limit: 5\n}\n\\`\\`\\`\n\n### Using NPX CLI (Fallback)\n\\`\\`\\`bash\n# Store mode-specific context\nnpx claude-flow memory store \"${mode.slug}_context\" \"important decisions\" --namespace ${mode.slug}\n\n# Query previous work\nnpx claude-flow memory query \"${mode.slug}\" --limit 5\n\\`\\`\\`\n`;\n}\n\n// Helper function to get tool descriptions\nfunction getToolDescription(tool) {\n  const toolDescriptions = {\n    read: 'File reading and viewing',\n    edit: 'File modification and creation',\n    browser: 'Web browsing capabilities',\n    mcp: 'Model Context Protocol tools',\n    command: 'Command execution',\n  };\n  return toolDescriptions[tool] || 'Tool access';\n}\n\n// Helper function to get example tasks\nfunction getExampleTask(slug) {\n  const examples = {\n    architect: 'design microservices architecture',\n    code: 'implement REST API endpoints',\n    tdd: 'create user authentication tests',\n    debug: 'fix memory leak in service',\n    'security-review': 'audit API security',\n    'docs-writer': 'create API documentation',\n    integration: 'connect payment service',\n    'post-deployment-monitoring-mode': 'monitor production metrics',\n    'refinement-optimization-mode': 'optimize database queries',\n    devops: 'deploy to AWS Lambda',\n    'supabase-admin': 'create user authentication schema',\n    'spec-pseudocode': 'define payment flow requirements',\n    mcp: 'integrate with external API',\n    swarm: 'build complete feature with tests',\n    sparc: 'orchestrate authentication system',\n    ask: 'help me choose the right mode',\n    tutorial: 'guide me through SPARC methodology',\n  };\n  return examples[slug] || 'implement feature';\n}\n\n// Create main SPARC command\nexport function createMainSparcCommand(modes) {\n  const modeList = modes.map((m) => `- \\`/sparc-${m.slug}\\` - ${m.name}`).join('\\n');\n\n  // Find the sparc orchestrator mode for its full description\n  const sparcMode = modes.find((m) => m.slug === 'sparc');\n  const sparcDescription = sparcMode\n    ? sparcMode.roleDefinition\n    : 'SPARC orchestrator for complex workflows';\n  const sparcInstructions = sparcMode ? sparcMode.customInstructions : '';\n\n  return `---\nname: sparc\ndescription: Execute SPARC methodology workflows with Claude-Flow\n---\n\n# ‚ö°Ô∏è SPARC Development Methodology\n\n${sparcDescription}\n\n## SPARC Workflow\n\n${sparcInstructions.split('\\n').slice(0, 10).join('\\n')}\n\n## Available SPARC Modes\n\n${modeList}\n\n## Quick Start\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\n// Run SPARC orchestrator (default)\nmcp__claude-flow__sparc_mode {\n  mode: \"sparc\",\n  task_description: \"build complete authentication system\"\n}\n\n// Run a specific mode\nmcp__claude-flow__sparc_mode {\n  mode: \"architect\",\n  task_description: \"design API structure\"\n}\n\n// TDD workflow\nmcp__claude-flow__sparc_mode {\n  mode: \"tdd\",\n  task_description: \"implement user authentication\",\n  options: {workflow: \"full\"}\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Run SPARC orchestrator (default)\nnpx claude-flow sparc \"build complete authentication system\"\n\n# Run a specific mode\nnpx claude-flow sparc run architect \"design API structure\"\nnpx claude-flow sparc run tdd \"implement user service\"\n\n# Execute full TDD workflow\nnpx claude-flow sparc tdd \"implement user authentication\"\n\n# List all modes with details\nnpx claude-flow sparc modes --verbose\n\n# For alpha features\nnpx claude-flow@alpha sparc run <mode> \"your task\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc \"build complete authentication system\"\n./claude-flow sparc run architect \"design API structure\"\n\\`\\`\\`\n\n## SPARC Methodology Phases\n\n1. **üìã Specification**: Define requirements, constraints, and acceptance criteria\n2. **üß† Pseudocode**: Create detailed logic flows and algorithmic planning\n3. **üèóÔ∏è Architecture**: Design system structure, APIs, and component boundaries\n4. **üîÑ Refinement**: Implement with TDD (Red-Green-Refactor cycle)\n5. **‚úÖ Completion**: Integrate, document, and validate against requirements\n\n## Memory Integration\n\n### Using MCP Tools (Preferred)\n\\`\\`\\`javascript\n// Store specifications\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"spec_auth\",\n  value: \"OAuth2 + JWT requirements\",\n  namespace: \"spec\"\n}\n\n// Store architectural decisions\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"arch_decisions\",\n  value: \"Microservices with API Gateway\",\n  namespace: \"architecture\"\n}\n\\`\\`\\`\n\n### Using NPX CLI (Fallback)\n\\`\\`\\`bash\n# Store specifications\nnpx claude-flow memory store \"spec_auth\" \"OAuth2 + JWT requirements\" --namespace spec\n\n# Store architectural decisions\n./claude-flow memory store \"arch_api\" \"RESTful microservices design\" --namespace arch\n\n# Query previous work\n./claude-flow memory query \"authentication\" --limit 10\n\n# Export project memory\n./claude-flow memory export sparc-project-backup.json\n\\`\\`\\`\n\n## Advanced Swarm Mode\n\nFor complex tasks requiring multiple agents with timeout-free execution:\n\\`\\`\\`bash\n# Development swarm with monitoring\n./claude-flow swarm \"Build e-commerce platform\" --strategy development --monitor --review\n\n# Background optimization swarm\n./claude-flow swarm \"Optimize system performance\" --strategy optimization --background\n\n# Distributed research swarm\n./claude-flow swarm \"Analyze market trends\" --strategy research --distributed --ui\n\\`\\`\\`\n\n## Non-Interactive Mode\n\nFor CI/CD integration and automation:\n\\`\\`\\`bash\n./claude-flow sparc run code \"implement API\" --non-interactive\n./claude-flow sparc tdd \"user tests\" --non-interactive --enable-permissions\n\\`\\`\\`\n\n## Best Practices\n\n‚úÖ **Modular Design**: Keep files under 500 lines\n‚úÖ **Environment Safety**: Never hardcode secrets or env values\n‚úÖ **Test-First**: Always write tests before implementation\n‚úÖ **Memory Usage**: Store important decisions and context\n‚úÖ **Task Completion**: All tasks should end with \\`attempt_completion\\`\n\nSee \\`/claude-flow-help\\` for all available commands.\n`;\n}\n"],"names":["createSparcSlashCommand","mode","fullDescription","roleDefinition","length","substring","slug","name","customInstructions","Array","isArray","groups","map","g","getToolDescription","description","fileRegex","JSON","stringify","join","getExampleTask","tool","toolDescriptions","read","edit","browser","mcp","command","examples","architect","code","tdd","debug","integration","devops","swarm","sparc","ask","tutorial","createMainSparcCommand","modes","modeList","m","sparcMode","find","sparcDescription","sparcInstructions","split","slice"],"mappings":"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"}