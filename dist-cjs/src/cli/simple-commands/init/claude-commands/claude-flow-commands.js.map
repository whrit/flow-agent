{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/claude-commands/claude-flow-commands.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// claude-flow-commands.js - Claude-Flow specific slash commands\n\n// Create Claude-Flow specific commands\nexport async function createClaudeFlowCommands(workingDir) {\n  // Help command\n  const helpCommand = `---\nname: claude-flow-help\ndescription: Show Claude-Flow commands and usage\n---\n\n# Claude-Flow Commands\n\n## üåä Claude-Flow: Agent Orchestration Platform\n\nClaude-Flow is the ultimate multi-terminal orchestration platform that revolutionizes how you work with Claude Code.\n\n## Core Commands\n\n### üöÄ System Management\n- \\`./claude-flow start\\` - Start orchestration system\n- \\`./claude-flow start --ui\\` - Start with interactive process management UI\n- \\`./claude-flow status\\` - Check system status\n- \\`./claude-flow monitor\\` - Real-time monitoring\n- \\`./claude-flow stop\\` - Stop orchestration\n\n### ü§ñ Agent Management\n- \\`./claude-flow agent spawn <type>\\` - Create new agent\n- \\`./claude-flow agent list\\` - List active agents\n- \\`./claude-flow agent info <id>\\` - Agent details\n- \\`./claude-flow agent terminate <id>\\` - Stop agent\n\n### üìã Task Management\n- \\`./claude-flow task create <type> \"description\"\\` - Create task\n- \\`./claude-flow task list\\` - List all tasks\n- \\`./claude-flow task status <id>\\` - Task status\n- \\`./claude-flow task cancel <id>\\` - Cancel task\n- \\`./claude-flow task workflow <file>\\` - Execute workflow\n\n### üß† Memory Operations\n- \\`./claude-flow memory store \"key\" \"value\"\\` - Store data\n- \\`./claude-flow memory query \"search\"\\` - Search memory\n- \\`./claude-flow memory stats\\` - Memory statistics\n- \\`./claude-flow memory export <file>\\` - Export memory\n- \\`./claude-flow memory import <file>\\` - Import memory\n\n### ‚ö° SPARC Development\n- \\`./claude-flow sparc \"task\"\\` - Run SPARC orchestrator\n- \\`./claude-flow sparc modes\\` - List all 17+ SPARC modes\n- \\`./claude-flow sparc run <mode> \"task\"\\` - Run specific mode\n- \\`./claude-flow sparc tdd \"feature\"\\` - TDD workflow\n- \\`./claude-flow sparc info <mode>\\` - Mode details\n\n### üêù Swarm Coordination\n- \\`./claude-flow swarm \"task\" --strategy <type>\\` - Start swarm\n- \\`./claude-flow swarm \"task\" --background\\` - Long-running swarm\n- \\`./claude-flow swarm \"task\" --monitor\\` - With monitoring\n- \\`./claude-flow swarm \"task\" --ui\\` - Interactive UI\n- \\`./claude-flow swarm \"task\" --distributed\\` - Distributed coordination\n\n### üåç MCP Integration\n- \\`./claude-flow mcp status\\` - MCP server status\n- \\`./claude-flow mcp tools\\` - List available tools\n- \\`./claude-flow mcp config\\` - Show configuration\n- \\`./claude-flow mcp logs\\` - View MCP logs\n\n### ü§ñ Claude Integration\n- \\`./claude-flow claude spawn \"task\"\\` - Spawn Claude with enhanced guidance\n- \\`./claude-flow claude batch <file>\\` - Execute workflow configuration\n\n## üåü Quick Examples\n\n### Initialize with SPARC:\n\\`\\`\\`bash\nnpx -y claude-flow@latest init --sparc\n\\`\\`\\`\n\n### Start a development swarm:\n\\`\\`\\`bash\n./claude-flow swarm \"Build REST API\" --strategy development --monitor --review\n\\`\\`\\`\n\n### Run TDD workflow:\n\\`\\`\\`bash\n./claude-flow sparc tdd \"user authentication\"\n\\`\\`\\`\n\n### Store project context:\n\\`\\`\\`bash\n./claude-flow memory store \"project_requirements\" \"e-commerce platform specs\" --namespace project\n\\`\\`\\`\n\n### Spawn specialized agents:\n\\`\\`\\`bash\n./claude-flow agent spawn researcher --name \"Senior Researcher\" --priority 8\n./claude-flow agent spawn developer --name \"Lead Developer\" --priority 9\n\\`\\`\\`\n\n## üéØ Best Practices\n- Use \\`./claude-flow\\` instead of \\`npx claude-flow\\` after initialization\n- Store important context in memory for cross-session persistence\n- Use swarm mode for complex tasks requiring multiple agents\n- Enable monitoring for real-time progress tracking\n- Use background mode for tasks > 30 minutes\n\n## üìö Resources\n- Documentation: https://github.com/ruvnet/claude-code-flow/docs\n- Examples: https://github.com/ruvnet/claude-code-flow/examples\n- Issues: https://github.com/ruvnet/claude-code-flow/issues\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-help.md`, helpCommand, 'utf8');\n  console.log('  ‚úì Created slash command: /claude-flow-help');\n\n  // Memory command\n  const memoryCommand = `---\nname: claude-flow-memory\ndescription: Interact with Claude-Flow memory system\n---\n\n# üß† Claude-Flow Memory System\n\nThe memory system provides persistent storage for cross-session and cross-agent collaboration with CRDT-based conflict resolution.\n\n## Store Information\n\\`\\`\\`bash\n# Store with default namespace\n./claude-flow memory store \"key\" \"value\"\n\n# Store with specific namespace\n./claude-flow memory store \"architecture_decisions\" \"microservices with API gateway\" --namespace arch\n\\`\\`\\`\n\n## Query Memory\n\\`\\`\\`bash\n# Search across all namespaces\n./claude-flow memory query \"authentication\"\n\n# Search with filters\n./claude-flow memory query \"API design\" --namespace arch --limit 10\n\\`\\`\\`\n\n## Memory Statistics\n\\`\\`\\`bash\n# Show overall statistics\n./claude-flow memory stats\n\n# Show namespace-specific stats\n./claude-flow memory stats --namespace project\n\\`\\`\\`\n\n## Export/Import\n\\`\\`\\`bash\n# Export all memory\n./claude-flow memory export full-backup.json\n\n# Export specific namespace\n./claude-flow memory export project-backup.json --namespace project\n\n# Import memory\n./claude-flow memory import backup.json\n\\`\\`\\`\n\n## Cleanup Operations\n\\`\\`\\`bash\n# Clean entries older than 30 days\n./claude-flow memory cleanup --days 30\n\n# Clean specific namespace\n./claude-flow memory cleanup --namespace temp --days 7\n\\`\\`\\`\n\n## üóÇÔ∏è Namespaces\n- **default** - General storage\n- **agents** - Agent-specific data and state\n- **tasks** - Task information and results\n- **sessions** - Session history and context\n- **swarm** - Swarm coordination and objectives\n- **project** - Project-specific context\n- **spec** - Requirements and specifications\n- **arch** - Architecture decisions\n- **impl** - Implementation notes\n- **test** - Test results and coverage\n- **debug** - Debug logs and fixes\n\n## üéØ Best Practices\n\n### Naming Conventions\n- Use descriptive, searchable keys\n- Include timestamp for time-sensitive data\n- Prefix with component name for clarity\n\n### Organization\n- Use namespaces to categorize data\n- Store related data together\n- Keep values concise but complete\n\n### Maintenance\n- Regular backups with export\n- Clean old data periodically\n- Monitor storage statistics\n- Compress large values\n\n## Examples\n\n### Store SPARC context:\n\\`\\`\\`bash\n./claude-flow memory store \"spec_auth_requirements\" \"OAuth2 + JWT with refresh tokens\" --namespace spec\n./claude-flow memory store \"arch_api_design\" \"RESTful microservices with GraphQL gateway\" --namespace arch\n./claude-flow memory store \"test_coverage_auth\" \"95% coverage, all tests passing\" --namespace test\n\\`\\`\\`\n\n### Query project decisions:\n\\`\\`\\`bash\n./claude-flow memory query \"authentication\" --namespace arch --limit 5\n./claude-flow memory query \"test results\" --namespace test\n\\`\\`\\`\n\n### Backup project memory:\n\\`\\`\\`bash\n./claude-flow memory export project-$(date +%Y%m%d).json --namespace project\n\\`\\`\\`\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-memory.md`, memoryCommand, 'utf8');\n  console.log('  ‚úì Created slash command: /claude-flow-memory');\n\n  // Swarm command\n  const swarmCommand = `---\nname: claude-flow-swarm\ndescription: Coordinate multi-agent swarms for complex tasks\n---\n\n# üêù Claude-Flow Swarm Coordination\n\nAdvanced multi-agent coordination system with timeout-free execution, distributed memory sharing, and intelligent load balancing.\n\n## Basic Usage\n\\`\\`\\`bash\n./claude-flow swarm \"your complex task\" --strategy <type> [options]\n\\`\\`\\`\n\n## üéØ Swarm Strategies\n- **auto** - Automatic strategy selection based on task analysis\n- **development** - Code implementation with review and testing\n- **research** - Information gathering and synthesis\n- **analysis** - Data processing and pattern identification\n- **testing** - Comprehensive quality assurance\n- **optimization** - Performance tuning and refactoring\n- **maintenance** - System updates and bug fixes\n\n## ü§ñ Agent Types\n- **coordinator** - Plans and delegates tasks to other agents\n- **developer** - Writes code and implements solutions\n- **researcher** - Gathers and analyzes information\n- **analyzer** - Identifies patterns and generates insights\n- **tester** - Creates and runs tests for quality assurance\n- **reviewer** - Performs code and design reviews\n- **documenter** - Creates documentation and guides\n- **monitor** - Tracks performance and system health\n- **specialist** - Domain-specific expert agents\n\n## üîÑ Coordination Modes\n- **centralized** - Single coordinator manages all agents (default)\n- **distributed** - Multiple coordinators share management\n- **hierarchical** - Tree structure with nested coordination\n- **mesh** - Peer-to-peer agent collaboration\n- **hybrid** - Mixed coordination strategies\n\n## ‚öôÔ∏è Common Options\n- \\`--strategy <type>\\` - Execution strategy\n- \\`--mode <type>\\` - Coordination mode\n- \\`--max-agents <n>\\` - Maximum concurrent agents (default: 5)\n- \\`--timeout <minutes>\\` - Timeout in minutes (default: 60)\n- \\`--background\\` - Run in background for tasks > 30 minutes\n- \\`--monitor\\` - Enable real-time monitoring\n- \\`--ui\\` - Launch terminal UI interface\n- \\`--parallel\\` - Enable parallel execution\n- \\`--distributed\\` - Enable distributed coordination\n- \\`--review\\` - Enable peer review process\n- \\`--testing\\` - Include automated testing\n- \\`--encryption\\` - Enable data encryption\n- \\`--verbose\\` - Detailed logging output\n- \\`--dry-run\\` - Show configuration without executing\n\n## üåü Examples\n\n### Development Swarm with Review\n\\`\\`\\`bash\n./claude-flow swarm \"Build e-commerce REST API\" \\\\\n  --strategy development \\\\\n  --monitor \\\\\n  --review \\\\\n  --testing\n\\`\\`\\`\n\n### Long-Running Research Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"Analyze AI market trends 2024-2025\" \\\\\n  --strategy research \\\\\n  --background \\\\\n  --distributed \\\\\n  --max-agents 8\n\\`\\`\\`\n\n### Performance Optimization Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"Optimize database queries and API performance\" \\\\\n  --strategy optimization \\\\\n  --testing \\\\\n  --parallel \\\\\n  --monitor\n\\`\\`\\`\n\n### Enterprise Development Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"Implement secure payment processing system\" \\\\\n  --strategy development \\\\\n  --mode distributed \\\\\n  --max-agents 10 \\\\\n  --parallel \\\\\n  --monitor \\\\\n  --review \\\\\n  --testing \\\\\n  --encryption \\\\\n  --verbose\n\\`\\`\\`\n\n### Testing and QA Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"Comprehensive security audit and testing\" \\\\\n  --strategy testing \\\\\n  --review \\\\\n  --verbose \\\\\n  --max-agents 6\n\\`\\`\\`\n\n## üìä Monitoring and Control\n\n### Real-time monitoring:\n\\`\\`\\`bash\n# Monitor swarm activity\n./claude-flow monitor\n\n# Monitor specific component\n./claude-flow monitor --focus swarm\n\\`\\`\\`\n\n### Check swarm status:\n\\`\\`\\`bash\n# Overall system status\n./claude-flow status\n\n# Detailed swarm status\n./claude-flow status --verbose\n\\`\\`\\`\n\n### View agent activity:\n\\`\\`\\`bash\n# List all agents\n./claude-flow agent list\n\n# Agent details\n./claude-flow agent info <agent-id>\n\\`\\`\\`\n\n## üíæ Memory Integration\n\nSwarms automatically use distributed memory for collaboration:\n\n\\`\\`\\`bash\n# Store swarm objectives\n./claude-flow memory store \"swarm_objective\" \"Build scalable API\" --namespace swarm\n\n# Query swarm progress\n./claude-flow memory query \"swarm_progress\" --namespace swarm\n\n# Export swarm memory\n./claude-flow memory export swarm-results.json --namespace swarm\n\\`\\`\\`\n\n## üéØ Key Features\n\n### Timeout-Free Execution\n- Background mode for long-running tasks\n- State persistence across sessions\n- Automatic checkpoint recovery\n\n### Work Stealing & Load Balancing\n- Dynamic task redistribution\n- Automatic agent scaling\n- Resource-aware scheduling\n\n### Circuit Breakers & Fault Tolerance\n- Automatic retry with exponential backoff\n- Graceful degradation\n- Health monitoring and recovery\n\n### Real-Time Collaboration\n- Cross-agent communication\n- Shared memory access\n- Event-driven coordination\n\n### Enterprise Security\n- Role-based access control\n- Audit logging\n- Data encryption\n- Input validation\n\n## üîß Advanced Configuration\n\n### Dry run to preview:\n\\`\\`\\`bash\n./claude-flow swarm \"Test task\" --dry-run --strategy development\n\\`\\`\\`\n\n### Custom quality thresholds:\n\\`\\`\\`bash\n./claude-flow swarm \"High quality API\" \\\\\n  --strategy development \\\\\n  --quality-threshold 0.95\n\\`\\`\\`\n\n### Scheduling algorithms:\n- FIFO (First In, First Out)\n- Priority-based\n- Deadline-driven\n- Shortest Job First\n- Critical Path\n- Resource-aware\n- Adaptive\n\nFor detailed documentation, see: https://github.com/ruvnet/claude-code-flow/docs/swarm-system.md\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-swarm.md`, swarmCommand, 'utf8');\n  console.log('  ‚úì Created slash command: /claude-flow-swarm');\n}\n"],"names":["promises","fs","createClaudeFlowCommands","workingDir","helpCommand","writeFile","console","log","memoryCommand","swarmCommand"],"mappings":"AAAA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AAIpC,OAAO,eAAeC,yBAAyBC,UAAU;IAEvD,MAAMC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGvB,CAAC;IAEC,MAAMH,GAAGI,SAAS,CAAC,GAAGF,WAAW,qCAAqC,CAAC,EAAEC,aAAa;IACtFE,QAAQC,GAAG,CAAC;IAGZ,MAAMC,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GzB,CAAC;IAEC,MAAMP,GAAGI,SAAS,CAAC,GAAGF,WAAW,uCAAuC,CAAC,EAAEK,eAAe;IAC1FF,QAAQC,GAAG,CAAC;IAGZ,MAAME,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6MxB,CAAC;IAEC,MAAMR,GAAGI,SAAS,CAAC,GAAGF,WAAW,sCAAsC,CAAC,EAAEM,cAAc;IACxFH,QAAQC,GAAG,CAAC;AACd"}