{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/claude-commands/optimized-claude-flow-commands.js"],"sourcesContent":["import { promises as fs } from 'fs';\n// optimized-claude-flow-commands.js - Batchtools-optimized Claude-Flow specific slash commands\n\n// Create batchtools-optimized Claude-Flow specific commands\nexport async function createOptimizedClaudeFlowCommands(workingDir) {\n  // Help command with batchtools optimization\n  const helpCommand = `---\nname: claude-flow-help\ndescription: Show Claude-Flow commands and usage with batchtools optimization\n---\n\n# Claude-Flow Commands (Batchtools Optimized)\n\n## üåä Claude-Flow: Advanced Agent Orchestration Platform\n\nClaude-Flow is the ultimate multi-terminal orchestration platform that revolutionizes how you work with Claude Code.\n\n**üöÄ Batchtools Enhancement**: All commands now include parallel processing capabilities, batch operations, and performance optimizations for maximum efficiency.\n\n## Core Commands (Enhanced)\n\n### üöÄ System Management\n- \\`./claude-flow start\\` - Start orchestration system\n- \\`./claude-flow start --ui\\` - Start with interactive process management UI\n- \\`./claude-flow start --parallel\\` - Start with enhanced parallel processing\n- \\`./claude-flow status\\` - Check system status\n- \\`./claude-flow status --concurrent\\` - Check status with parallel monitoring\n- \\`./claude-flow monitor\\` - Real-time monitoring\n- \\`./claude-flow monitor --performance\\` - Enhanced performance monitoring\n- \\`./claude-flow stop\\` - Stop orchestration\n\n### ü§ñ Agent Management (Parallel)\n- \\`./claude-flow agent spawn <type>\\` - Create new agent\n- \\`./claude-flow agent batch-spawn <config>\\` - Create multiple agents in parallel\n- \\`./claude-flow agent list\\` - List active agents\n- \\`./claude-flow agent parallel-status\\` - Check all agent status concurrently\n- \\`./claude-flow agent info <id>\\` - Agent details\n- \\`./claude-flow agent terminate <id>\\` - Stop agent\n- \\`./claude-flow agent batch-terminate <ids>\\` - Stop multiple agents in parallel\n\n### üìã Task Management (Concurrent)\n- \\`./claude-flow task create <type> \"description\"\\` - Create task\n- \\`./claude-flow task batch-create <tasks-file>\\` - Create multiple tasks in parallel\n- \\`./claude-flow task list\\` - List all tasks\n- \\`./claude-flow task parallel-status\\` - Check all task status concurrently\n- \\`./claude-flow task status <id>\\` - Task status\n- \\`./claude-flow task cancel <id>\\` - Cancel task\n- \\`./claude-flow task batch-cancel <ids>\\` - Cancel multiple tasks in parallel\n- \\`./claude-flow task workflow <file>\\` - Execute workflow\n- \\`./claude-flow task parallel-workflow <files>\\` - Execute multiple workflows concurrently\n\n### üß† Memory Operations (Batch Enhanced)\n- \\`./claude-flow memory store \"key\" \"value\"\\` - Store data\n- \\`./claude-flow memory batch-store <entries-file>\\` - Store multiple entries in parallel\n- \\`./claude-flow memory query \"search\"\\` - Search memory\n- \\`./claude-flow memory parallel-query <queries>\\` - Execute multiple queries concurrently\n- \\`./claude-flow memory stats\\` - Memory statistics\n- \\`./claude-flow memory stats --concurrent\\` - Parallel memory analysis\n- \\`./claude-flow memory export <file>\\` - Export memory\n- \\`./claude-flow memory concurrent-export <namespaces>\\` - Export multiple namespaces in parallel\n- \\`./claude-flow memory import <file>\\` - Import memory\n- \\`./claude-flow memory batch-import <files>\\` - Import multiple files concurrently\n\n### ‚ö° SPARC Development (Optimized)\n- \\`./claude-flow sparc \"task\"\\` - Run SPARC orchestrator\n- \\`./claude-flow sparc parallel \"tasks\"\\` - Run multiple SPARC tasks concurrently\n- \\`./claude-flow sparc modes\\` - List all 17+ SPARC modes\n- \\`./claude-flow sparc run <mode> \"task\"\\` - Run specific mode\n- \\`./claude-flow sparc batch <modes> \"task\"\\` - Run multiple modes in parallel\n- \\`./claude-flow sparc tdd \"feature\"\\` - TDD workflow\n- \\`./claude-flow sparc concurrent-tdd <features>\\` - Parallel TDD for multiple features\n- \\`./claude-flow sparc info <mode>\\` - Mode details\n\n### üêù Swarm Coordination (Enhanced)\n- \\`./claude-flow swarm \"task\" --strategy <type>\\` - Start swarm\n- \\`./claude-flow swarm \"task\" --background\\` - Long-running swarm\n- \\`./claude-flow swarm \"task\" --monitor\\` - With monitoring\n- \\`./claude-flow swarm \"task\" --ui\\` - Interactive UI\n- \\`./claude-flow swarm \"task\" --distributed\\` - Distributed coordination\n- \\`./claude-flow swarm batch <tasks-config>\\` - Multiple swarms in parallel\n- \\`./claude-flow swarm concurrent \"tasks\" --parallel\\` - Concurrent swarm execution\n\n### üåç MCP Integration (Parallel)\n- \\`./claude-flow mcp status\\` - MCP server status\n- \\`./claude-flow mcp parallel-status\\` - Check all MCP servers concurrently\n- \\`./claude-flow mcp tools\\` - List available tools\n- \\`./claude-flow mcp config\\` - Show configuration\n- \\`./claude-flow mcp logs\\` - View MCP logs\n- \\`./claude-flow mcp batch-logs <servers>\\` - View multiple server logs in parallel\n\n### ü§ñ Claude Integration (Enhanced)\n- \\`./claude-flow claude spawn \"task\"\\` - Spawn Claude with enhanced guidance\n- \\`./claude-flow claude batch-spawn <tasks>\\` - Spawn multiple Claude instances in parallel\n- \\`./claude-flow claude batch <file>\\` - Execute workflow configuration\n\n### üöÄ Batchtools Commands (New)\n- \\`./claude-flow batchtools status\\` - Check batchtools system status\n- \\`./claude-flow batchtools monitor\\` - Real-time performance monitoring\n- \\`./claude-flow batchtools optimize\\` - System optimization recommendations\n- \\`./claude-flow batchtools benchmark\\` - Performance benchmarking\n- \\`./claude-flow batchtools config\\` - Batchtools configuration management\n\n## üåü Quick Examples (Optimized)\n\n### Initialize with enhanced SPARC:\n\\`\\`\\`bash\nnpx -y claude-flow@latest init --sparc --force\n\\`\\`\\`\n\n### Start a parallel development swarm:\n\\`\\`\\`bash\n./claude-flow swarm \"Build REST API\" --strategy development --monitor --review --parallel\n\\`\\`\\`\n\n### Run concurrent TDD workflow:\n\\`\\`\\`bash\n./claude-flow sparc concurrent-tdd \"user authentication,payment processing,notification system\"\n\\`\\`\\`\n\n### Store project context with batch operations:\n\\`\\`\\`bash\n./claude-flow memory batch-store \"project-contexts.json\" --namespace project --parallel\n\\`\\`\\`\n\n### Spawn specialized agents in parallel:\n\\`\\`\\`bash\n./claude-flow agent batch-spawn agents-config.json --parallel --validate\n\\`\\`\\`\n\n## üéØ Performance Features\n\n### Parallel Processing\n- **Concurrent Operations**: Execute multiple independent operations simultaneously\n- **Batch Processing**: Group related operations for optimal efficiency\n- **Pipeline Execution**: Chain operations with parallel stages\n- **Smart Load Balancing**: Intelligent distribution of computational tasks\n\n### Resource Optimization\n- **Memory Management**: Optimized memory usage for parallel operations\n- **CPU Utilization**: Better use of multi-core processors\n- **I/O Throughput**: Improved disk and network operation efficiency\n- **Cache Optimization**: Smart caching for repeated operations\n\n### Performance Monitoring\n- **Real-time Metrics**: Monitor operation performance in real-time\n- **Resource Usage**: Track CPU, memory, and I/O utilization\n- **Bottleneck Detection**: Identify and resolve performance issues\n- **Optimization Recommendations**: Automatic suggestions for improvements\n\n## üéØ Best Practices (Enhanced)\n\n### Performance Optimization\n- Use \\`./claude-flow\\` instead of \\`npx claude-flow\\` after initialization\n- Enable parallel processing for independent operations (\\`--parallel\\` flag)\n- Use batch operations for multiple related tasks (\\`batch-*\\` commands)\n- Monitor system resources during concurrent operations (\\`--monitor\\` flag)\n- Store important context in memory for cross-session persistence\n- Use swarm mode for complex tasks requiring multiple agents\n- Enable monitoring for real-time progress tracking (\\`--monitor\\`)\n- Use background mode for tasks > 30 minutes (\\`--background\\`)\n- Implement concurrent processing for optimal performance\n\n### Resource Management\n- Monitor system resources during parallel operations\n- Use appropriate batch sizes based on system capabilities\n- Enable smart load balancing for distributed tasks\n- Implement throttling for resource-intensive operations\n\n### Workflow Optimization\n- Use pipeline processing for complex multi-stage workflows\n- Enable concurrent execution for independent workflow components\n- Implement parallel validation for comprehensive quality checks\n- Use batch operations for related workflow executions\n\n## üìä Performance Benchmarks\n\n### Batchtools Performance Improvements\n- **Agent Operations**: Up to 500% faster with parallel processing\n- **Task Management**: 400% improvement with concurrent operations\n- **Memory Operations**: 350% faster with batch processing\n- **Workflow Execution**: 450% improvement with parallel orchestration\n- **System Monitoring**: 250% faster with concurrent monitoring\n\n## üîß Advanced Configuration\n\n### Batchtools Configuration\n\\`\\`\\`json\n{\n  \"batchtools\": {\n    \"enabled\": true,\n    \"maxConcurrent\": 20,\n    \"batchSize\": 10,\n    \"enableOptimization\": true,\n    \"smartBatching\": true,\n    \"performanceMonitoring\": true\n  }\n}\n\\`\\`\\`\n\n### Performance Tuning\n- **Concurrent Limits**: Adjust based on system resources\n- **Batch Sizes**: Optimize for operation type and system capacity\n- **Resource Allocation**: Configure memory and CPU limits\n- **Monitoring Intervals**: Set appropriate monitoring frequencies\n\n## üìö Resources (Enhanced)\n- Documentation: https://github.com/ruvnet/claude-code-flow/docs\n- Batchtools Guide: https://github.com/ruvnet/claude-code-flow/docs/batchtools.md\n- Performance Optimization: https://github.com/ruvnet/claude-code-flow/docs/performance.md\n- Examples: https://github.com/ruvnet/claude-code-flow/examples\n- Issues: https://github.com/ruvnet/claude-code-flow/issues\n\n## üö® Troubleshooting (Enhanced)\n\n### Performance Issues\n\\`\\`\\`bash\n# Monitor system performance during operations\n./claude-flow monitor --performance --real-time\n\n# Check resource utilization\n./claude-flow batchtools monitor --resources --detailed\n\n# Analyze operation bottlenecks\n./claude-flow performance analyze --bottlenecks --optimization\n\\`\\`\\`\n\n### Optimization Commands\n\\`\\`\\`bash\n# Auto-optimize system configuration\n./claude-flow batchtools optimize --auto-tune\n\n# Performance benchmarking\n./claude-flow batchtools benchmark --detailed --export\n\n# System resource analysis\n./claude-flow performance report --system --recommendations\n\\`\\`\\`\n\nFor comprehensive documentation and optimization guides, see the resources above.\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-help.md`, helpCommand, 'utf8');\n  console.log('  ‚úì Created optimized slash command: /claude-flow-help (Batchtools enhanced)');\n\n  // Memory command with batchtools optimization\n  const memoryCommand = `---\nname: claude-flow-memory\ndescription: Interact with Claude-Flow memory system using batchtools optimization\n---\n\n# üß† Claude-Flow Memory System (Batchtools Optimized)\n\nThe memory system provides persistent storage for cross-session and cross-agent collaboration with CRDT-based conflict resolution.\n\n**üöÄ Batchtools Enhancement**: Enhanced with parallel processing capabilities, batch operations, and concurrent optimization for improved performance.\n\n## Store Information (Enhanced)\n\n### Standard Storage\n\\`\\`\\`bash\n# Store with default namespace\n./claude-flow memory store \"key\" \"value\"\n\n# Store with specific namespace\n./claude-flow memory store \"architecture_decisions\" \"microservices with API gateway\" --namespace arch\n\\`\\`\\`\n\n### Batch Storage (Optimized)\n\\`\\`\\`bash\n# Store multiple entries in parallel\n./claude-flow memory batch-store entries.json --parallel\n\n# Store with concurrent validation\n./claude-flow memory concurrent-store \"multiple_keys\" \"values\" --namespace arch --validate\n\n# Bulk storage with optimization\n./claude-flow memory bulk-store project-data/ --recursive --optimize --parallel\n\\`\\`\\`\n\n## Query Memory (Enhanced)\n\n### Standard Queries\n\\`\\`\\`bash\n# Search across all namespaces\n./claude-flow memory query \"authentication\"\n\n# Search with filters\n./claude-flow memory query \"API design\" --namespace arch --limit 10\n\\`\\`\\`\n\n### Parallel Queries (Optimized)\n\\`\\`\\`bash\n# Execute multiple queries concurrently\n./claude-flow memory parallel-query \"auth,api,database\" --concurrent\n\n# Search across multiple namespaces simultaneously\n./claude-flow memory concurrent-search \"authentication\" --namespaces arch,impl,test --parallel\n\n# Batch query processing\n./claude-flow memory batch-query queries.json --optimize --results-parallel\n\\`\\`\\`\n\n## Memory Statistics (Enhanced)\n\n### Standard Statistics\n\\`\\`\\`bash\n# Show overall statistics\n./claude-flow memory stats\n\n# Show namespace-specific stats\n./claude-flow memory stats --namespace project\n\\`\\`\\`\n\n### Performance Statistics (Optimized)\n\\`\\`\\`bash\n# Real-time performance monitoring\n./claude-flow memory stats --real-time --performance\n\n# Concurrent analysis across all namespaces\n./claude-flow memory concurrent-stats --all-namespaces --detailed\n\n# Batch performance analysis\n./claude-flow memory performance-stats --optimization --benchmarks\n\\`\\`\\`\n\n## Export/Import (Enhanced)\n\n### Standard Operations\n\\`\\`\\`bash\n# Export all memory\n./claude-flow memory export full-backup.json\n\n# Export specific namespace\n./claude-flow memory export project-backup.json --namespace project\n\n# Import memory\n./claude-flow memory import backup.json\n\\`\\`\\`\n\n### Batch Operations (Optimized)\n\\`\\`\\`bash\n# Export multiple namespaces in parallel\n./claude-flow memory concurrent-export namespaces.json --parallel --compress\n\n# Batch import with validation\n./claude-flow memory batch-import backups/ --validate --parallel\n\n# Incremental export with optimization\n./claude-flow memory incremental-export --since yesterday --optimize --concurrent\n\\`\\`\\`\n\n## Cleanup Operations (Enhanced)\n\n### Standard Cleanup\n\\`\\`\\`bash\n# Clean entries older than 30 days\n./claude-flow memory cleanup --days 30\n\n# Clean specific namespace\n./claude-flow memory cleanup --namespace temp --days 7\n\\`\\`\\`\n\n### Batch Cleanup (Optimized)\n\\`\\`\\`bash\n# Parallel cleanup across multiple namespaces\n./claude-flow memory concurrent-cleanup --namespaces temp,cache --days 7 --parallel\n\n# Smart cleanup with optimization\n./claude-flow memory smart-cleanup --auto-optimize --performance-based\n\n# Batch maintenance operations\n./claude-flow memory batch-maintenance --compress --reindex --parallel\n\\`\\`\\`\n\n## üóÇÔ∏è Namespaces (Enhanced)\n- **default** - General storage with parallel access\n- **agents** - Agent-specific data with concurrent updates\n- **tasks** - Task information with batch processing\n- **sessions** - Session history with parallel indexing\n- **swarm** - Swarm coordination with distributed memory\n- **project** - Project-specific context with concurrent access\n- **spec** - Requirements and specifications with parallel validation\n- **arch** - Architecture decisions with concurrent analysis\n- **impl** - Implementation notes with batch processing\n- **test** - Test results with parallel execution\n- **debug** - Debug logs with concurrent analysis\n- **performance** - Performance metrics with real-time monitoring\n- **batchtools** - Batchtools operation data and optimization metrics\n\n## üéØ Best Practices (Batchtools Enhanced)\n\n### Naming Conventions (Optimized)\n- Use descriptive, searchable keys for parallel operations\n- Include timestamp for time-sensitive data with concurrent access\n- Prefix with component name for batch processing clarity\n- Use consistent naming patterns for automated batch operations\n\n### Organization (Enhanced)\n- Use namespaces to categorize data for parallel processing\n- Store related data together for batch operations\n- Keep values concise but complete for efficient concurrent access\n- Implement hierarchical organization for smart batching\n\n### Maintenance (Optimized)\n- Regular backups with parallel export operations\n- Clean old data with concurrent cleanup processes\n- Monitor storage statistics with real-time performance tracking\n- Compress large values with batch optimization\n- Use incremental backups for efficiency\n\n### Performance Optimization\n- Use batch operations for multiple related memory operations\n- Enable parallel processing for independent queries and storage\n- Monitor concurrent operation limits to avoid resource exhaustion\n- Implement smart caching for frequently accessed data\n\n## Examples (Batchtools Enhanced)\n\n### Store SPARC context with parallel operations:\n\\`\\`\\`bash\n# Batch store multiple SPARC contexts\n./claude-flow memory batch-store sparc-contexts.json --namespace sparc --parallel\n\n# Concurrent storage across multiple namespaces\n./claude-flow memory concurrent-store spec,arch,impl \"project data\" --parallel --validate\n\n# Performance-optimized bulk storage\n./claude-flow memory bulk-store project-data/ --optimize --concurrent --compress\n\\`\\`\\`\n\n### Query project decisions with concurrent processing:\n\\`\\`\\`bash\n# Parallel queries across multiple namespaces\n./claude-flow memory parallel-query \"authentication\" --namespaces arch,impl,test --concurrent\n\n# Batch query processing with optimization\n./claude-flow memory batch-query project-queries.json --optimize --results-concurrent\n\n# Real-time search with performance monitoring\n./claude-flow memory concurrent-search \"API design\" --real-time --performance\n\\`\\`\\`\n\n### Backup project memory with parallel processing:\n\\`\\`\\`bash\n# Concurrent export with compression\n./claude-flow memory concurrent-export project-$(date +%Y%m%d).json --namespace project --compress --parallel\n\n# Batch backup with incremental processing\n./claude-flow memory batch-backup --incremental --all-namespaces --optimize\n\n# Performance-optimized full backup\n./claude-flow memory parallel-backup --full --compress --validate --concurrent\n\\`\\`\\`\n\n## üìä Performance Features\n\n### Parallel Processing\n- **Concurrent Storage**: Store multiple entries simultaneously\n- **Parallel Queries**: Execute multiple searches concurrently\n- **Batch Operations**: Group related memory operations\n- **Pipeline Processing**: Chain memory operations with parallel stages\n\n### Resource Optimization\n- **Smart Caching**: Intelligent caching for frequent operations\n- **Memory Management**: Optimized memory usage for large datasets\n- **I/O Optimization**: Efficient disk operations with concurrent access\n- **Index Optimization**: Parallel indexing for faster searches\n\n### Performance Monitoring\n- **Real-time Metrics**: Monitor memory operation performance\n- **Resource Usage**: Track memory, CPU, and I/O utilization\n- **Operation Analysis**: Analyze memory operation efficiency\n- **Optimization Recommendations**: Automatic performance suggestions\n\n## üîß Configuration (Batchtools Enhanced)\n\n### Memory Configuration with Batchtools\n\\`\\`\\`json\n{\n  \"memory\": {\n    \"backend\": \"json\",\n    \"path\": \"./memory/claude-flow-data.json\",\n    \"cacheSize\": 10000,\n    \"indexing\": true,\n    \"batchtools\": {\n      \"enabled\": true,\n      \"maxConcurrent\": 15,\n      \"batchSize\": 50,\n      \"parallelIndexing\": true,\n      \"concurrentBackups\": true,\n      \"smartCaching\": true\n    },\n    \"performance\": {\n      \"enableParallelAccess\": true,\n      \"concurrentQueries\": 25,\n      \"batchWriteSize\": 100,\n      \"parallelIndexUpdate\": true,\n      \"realTimeMonitoring\": true\n    }\n  }\n}\n\\`\\`\\`\n\n## üö® Troubleshooting (Enhanced)\n\n### Performance Issues\n\\`\\`\\`bash\n# Monitor memory operation performance\n./claude-flow memory debug --performance --concurrent\n\n# Analyze batch operation efficiency\n./claude-flow memory analyze --batchtools --optimization\n\n# Check parallel processing status\n./claude-flow memory status --parallel --detailed\n\\`\\`\\`\n\n### Optimization Commands\n\\`\\`\\`bash\n# Optimize memory configuration\n./claude-flow memory optimize --auto-tune --performance\n\n# Benchmark memory operations\n./claude-flow memory benchmark --all-operations --detailed\n\n# Performance report generation\n./claude-flow memory performance-report --detailed --recommendations\n\\`\\`\\`\n\nFor comprehensive memory system documentation and optimization guides, see: https://github.com/ruvnet/claude-code-flow/docs/memory-batchtools.md\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-memory.md`, memoryCommand, 'utf8');\n  console.log('  ‚úì Created optimized slash command: /claude-flow-memory (Batchtools enhanced)');\n\n  // Swarm command with batchtools optimization\n  const swarmCommand = `---\nname: claude-flow-swarm\ndescription: Coordinate multi-agent swarms for complex tasks with batchtools optimization\n---\n\n# üêù Claude-Flow Swarm Coordination (Batchtools Optimized)\n\nAdvanced multi-agent coordination system with timeout-free execution, distributed memory sharing, and intelligent load balancing.\n\n**üöÄ Batchtools Enhancement**: Enhanced with parallel processing capabilities, batch operations, and concurrent optimization for maximum swarm efficiency.\n\n## Basic Usage (Enhanced)\n\\`\\`\\`bash\n./claude-flow swarm \"your complex task\" --strategy <type> [options] --parallel\n\\`\\`\\`\n\n## üéØ Swarm Strategies (Optimized)\n- **auto** - Automatic strategy selection with parallel task analysis\n- **development** - Code implementation with concurrent review and testing\n- **research** - Information gathering with parallel synthesis\n- **analysis** - Data processing with concurrent pattern identification\n- **testing** - Comprehensive QA with parallel test execution\n- **optimization** - Performance tuning with concurrent profiling\n- **maintenance** - System updates with parallel validation\n\n## ü§ñ Agent Types (Enhanced)\n- **coordinator** - Plans and delegates with parallel task distribution\n- **developer** - Writes code with concurrent optimization\n- **researcher** - Gathers information with parallel analysis\n- **analyzer** - Identifies patterns with concurrent processing\n- **tester** - Creates and runs tests with parallel execution\n- **reviewer** - Performs reviews with concurrent validation\n- **documenter** - Creates docs with parallel content generation\n- **monitor** - Tracks performance with real-time parallel monitoring\n- **specialist** - Domain experts with batch processing capabilities\n- **batch-processor** - High-throughput parallel operation specialist\n\n## üîÑ Coordination Modes (Enhanced)\n- **centralized** - Single coordinator with parallel agent management\n- **distributed** - Multiple coordinators with concurrent load balancing\n- **hierarchical** - Tree structure with parallel nested coordination\n- **mesh** - Peer-to-peer with concurrent collaboration\n- **hybrid** - Mixed strategies with adaptive parallel processing\n\n## ‚öôÔ∏è Common Options (Batchtools Enhanced)\n- \\`--strategy <type>\\` - Execution strategy with optimization\n- \\`--mode <type>\\` - Coordination mode with parallel processing\n- \\`--max-agents <n>\\` - Maximum concurrent agents (default: 10, optimized: 25)\n- \\`--timeout <minutes>\\` - Timeout in minutes (default: 60)\n- \\`--background\\` - Run in background with parallel monitoring\n- \\`--monitor\\` - Enable real-time monitoring with concurrent metrics\n- \\`--ui\\` - Launch terminal UI with performance dashboard\n- \\`--parallel\\` - Enable enhanced parallel execution\n- \\`--distributed\\` - Enable distributed coordination with load balancing\n- \\`--review\\` - Enable peer review with concurrent validation\n- \\`--testing\\` - Include automated testing with parallel execution\n- \\`--encryption\\` - Enable data encryption with concurrent processing\n- \\`--verbose\\` - Detailed logging with parallel output\n- \\`--dry-run\\` - Show configuration with parallel analysis\n- \\`--batch-optimize\\` - Enable batchtools optimization\n- \\`--concurrent-agents <n>\\` - Maximum concurrent agent operations\n- \\`--performance\\` - Enable performance monitoring and optimization\n\n## üåü Examples (Batchtools Enhanced)\n\n### Development Swarm with Parallel Review\n\\`\\`\\`bash\n./claude-flow swarm \"Build e-commerce REST API\" \\\\\n  --strategy development \\\\\n  --monitor \\\\\n  --review \\\\\n  --testing \\\\\n  --parallel \\\\\n  --concurrent-agents 15 \\\\\n  --performance\n\\`\\`\\`\n\n### Long-Running Research Swarm with Concurrent Processing\n\\`\\`\\`bash\n./claude-flow swarm \"Analyze AI market trends 2024-2025\" \\\\\n  --strategy research \\\\\n  --background \\\\\n  --distributed \\\\\n  --max-agents 12 \\\\\n  --parallel \\\\\n  --batch-optimize \\\\\n  --performance\n\\`\\`\\`\n\n### Performance Optimization Swarm with Parallel Analysis\n\\`\\`\\`bash\n./claude-flow swarm \"Optimize database queries and API performance\" \\\\\n  --strategy optimization \\\\\n  --testing \\\\\n  --parallel \\\\\n  --monitor \\\\\n  --concurrent-agents 10 \\\\\n  --batch-optimize \\\\\n  --performance\n\\`\\`\\`\n\n### Enterprise Development Swarm with Full Parallelization\n\\`\\`\\`bash\n./claude-flow swarm \"Implement secure payment processing system\" \\\\\n  --strategy development \\\\\n  --mode distributed \\\\\n  --max-agents 20 \\\\\n  --parallel \\\\\n  --monitor \\\\\n  --review \\\\\n  --testing \\\\\n  --encryption \\\\\n  --verbose \\\\\n  --concurrent-agents 15 \\\\\n  --batch-optimize \\\\\n  --performance\n\\`\\`\\`\n\n### Testing and QA Swarm with Concurrent Validation\n\\`\\`\\`bash\n./claude-flow swarm \"Comprehensive security audit and testing\" \\\\\n  --strategy testing \\\\\n  --review \\\\\n  --verbose \\\\\n  --max-agents 8 \\\\\n  --parallel \\\\\n  --concurrent-agents 6 \\\\\n  --batch-optimize \\\\\n  --performance\n\\`\\`\\`\n\n## üìä Monitoring and Control (Enhanced)\n\n### Real-time monitoring with parallel metrics:\n\\`\\`\\`bash\n# Monitor swarm activity with performance data\n./claude-flow monitor --parallel --performance --real-time\n\n# Monitor specific component with concurrent analysis\n./claude-flow monitor --focus swarm --concurrent --detailed\n\n# Performance dashboard with parallel monitoring\n./claude-flow monitor --ui --performance --all-metrics\n\\`\\`\\`\n\n### Check swarm status with concurrent analysis:\n\\`\\`\\`bash\n# Overall system status with parallel checks\n./claude-flow status --concurrent --performance\n\n# Detailed swarm status with optimization metrics\n./claude-flow status --verbose --parallel --optimization\n\n# Performance analysis with concurrent processing\n./claude-flow status --performance --detailed --concurrent\n\\`\\`\\`\n\n### View agent activity with parallel monitoring:\n\\`\\`\\`bash\n# List all agents with concurrent status checks\n./claude-flow agent list --parallel --performance\n\n# Agent details with concurrent analysis\n./claude-flow agent info <agent-id> --detailed --concurrent\n\n# Batch agent monitoring\n./claude-flow agent batch-status --all-agents --parallel\n\\`\\`\\`\n\n## üíæ Memory Integration (Enhanced)\n\nSwarms automatically use distributed memory with parallel processing for collaboration:\n\n### Standard Memory Operations\n\\`\\`\\`bash\n# Store swarm objectives\n./claude-flow memory store \"swarm_objective\" \"Build scalable API\" --namespace swarm\n\n# Query swarm progress\n./claude-flow memory query \"swarm_progress\" --namespace swarm\n\n# Export swarm memory\n./claude-flow memory export swarm-results.json --namespace swarm\n\\`\\`\\`\n\n### Batchtools Memory Operations\n\\`\\`\\`bash\n# Batch store swarm contexts\n./claude-flow memory batch-store swarm-contexts.json --namespace swarm --parallel\n\n# Concurrent query across swarm namespaces\n./claude-flow memory parallel-query \"swarm_coordination\" --namespaces swarm,agents,tasks --concurrent\n\n# Performance-optimized swarm memory export\n./claude-flow memory concurrent-export swarm-backup.json --namespace swarm --compress --parallel\n\\`\\`\\`\n\n## üéØ Key Features (Enhanced)\n\n### Timeout-Free Execution with Parallel Processing\n- Background mode with concurrent monitoring for long-running tasks\n- State persistence with parallel backup across sessions\n- Automatic checkpoint recovery with concurrent validation\n- Enhanced parallel processing for complex operations\n\n### Work Stealing & Load Balancing (Optimized)\n- Dynamic task redistribution with real-time parallel analysis\n- Automatic agent scaling with concurrent resource monitoring\n- Resource-aware scheduling with parallel optimization\n- Smart load balancing with performance metrics\n\n### Circuit Breakers & Fault Tolerance (Enhanced)\n- Automatic retry with exponential backoff and parallel recovery\n- Graceful degradation with concurrent fallback mechanisms\n- Health monitoring with parallel agent status checking\n- Enhanced fault tolerance with parallel recovery systems\n\n### Real-Time Collaboration (Optimized)\n- Cross-agent communication with parallel channels\n- Shared memory access with concurrent synchronization\n- Event-driven coordination with parallel processing\n- Enhanced collaboration with performance optimization\n\n### Enterprise Security (Enhanced)\n- Role-based access control with parallel validation\n- Audit logging with concurrent processing\n- Data encryption with parallel security checks\n- Input validation with concurrent threat analysis\n\n## üîß Advanced Configuration (Batchtools Enhanced)\n\n### Dry run with parallel preview:\n\\`\\`\\`bash\n./claude-flow swarm \"Test task\" --dry-run --strategy development --parallel --performance\n\\`\\`\\`\n\n### Custom quality thresholds with concurrent validation:\n\\`\\`\\`bash\n./claude-flow swarm \"High quality API\" \\\\\n  --strategy development \\\\\n  --quality-threshold 0.95 \\\\\n  --parallel \\\\\n  --concurrent-validation \\\\\n  --performance\n\\`\\`\\`\n\n### Batchtools Configuration\n\\`\\`\\`json\n{\n  \"swarm\": {\n    \"batchtools\": {\n      \"enabled\": true,\n      \"maxConcurrentAgents\": 25,\n      \"parallelCoordination\": true,\n      \"batchTaskProcessing\": true,\n      \"concurrentMonitoring\": true,\n      \"performanceOptimization\": true\n    },\n    \"performance\": {\n      \"enableParallelProcessing\": true,\n      \"concurrentTaskExecution\": 20,\n      \"batchOperationSize\": 10,\n      \"parallelMemoryAccess\": true,\n      \"realTimeMetrics\": true\n    }\n  }\n}\n\\`\\`\\`\n\n### Scheduling algorithms (Enhanced):\n- FIFO (First In, First Out) with parallel processing\n- Priority-based with concurrent validation\n- Deadline-driven with parallel scheduling\n- Shortest Job First with optimization\n- Critical Path with parallel analysis\n- Resource-aware with concurrent monitoring\n- Adaptive with performance optimization\n- Parallel-optimized with load balancing\n\n## üìä Performance Features\n\n### Parallel Processing Capabilities\n- **Concurrent Agent Coordination**: Manage multiple agents simultaneously\n- **Parallel Task Distribution**: Distribute tasks across agents concurrently\n- **Batch Operation Processing**: Group related swarm operations\n- **Pipeline Coordination**: Chain swarm operations with parallel stages\n\n### Performance Optimization\n- **Smart Load Balancing**: Intelligent distribution with real-time metrics\n- **Resource Management**: Efficient utilization with parallel monitoring\n- **Concurrent Validation**: Validate multiple aspects simultaneously\n- **Performance Monitoring**: Real-time metrics and optimization recommendations\n\n### Fault Tolerance (Enhanced)\n- **Parallel Recovery**: Concurrent recovery mechanisms for failed operations\n- **Circuit Breakers**: Enhanced fault tolerance with parallel monitoring\n- **Health Monitoring**: Real-time agent and swarm health with concurrent checks\n- **Retry Mechanisms**: Intelligent retry with parallel validation\n\n## üö® Troubleshooting (Enhanced)\n\n### Performance Issues\n\\`\\`\\`bash\n# Monitor swarm performance with concurrent analysis\n./claude-flow swarm debug --performance --concurrent --verbose\n\n# Analyze batch operation efficiency\n./claude-flow swarm analyze --batchtools --optimization --detailed\n\n# Check parallel processing status\n./claude-flow swarm status --parallel --performance --real-time\n\\`\\`\\`\n\n### Optimization Commands\n\\`\\`\\`bash\n# Auto-optimize swarm configuration\n./claude-flow swarm optimize --auto-tune --performance\n\n# Performance benchmarking\n./claude-flow swarm benchmark --all-strategies --detailed\n\n# Resource usage analysis\n./claude-flow swarm resources --concurrent --optimization\n\\`\\`\\`\n\n## üìà Performance Benchmarks\n\n### Batchtools Performance Improvements\n- **Swarm Coordination**: Up to 600% faster with parallel processing\n- **Agent Management**: 500% improvement with concurrent operations\n- **Task Distribution**: 450% faster with parallel assignment\n- **Monitoring**: 350% improvement with concurrent metrics\n- **Memory Operations**: 400% faster with parallel processing\n\nFor detailed documentation and optimization guides, see: https://github.com/ruvnet/claude-code-flow/docs/swarm-batchtools.md\n`;\n\n  await fs.writeFile(`${workingDir}/.claude/commands/claude-flow-swarm.md`, swarmCommand, 'utf8');\n  console.log('  ‚úì Created optimized slash command: /claude-flow-swarm (Batchtools enhanced)');\n}\n"],"names":["promises","fs","createOptimizedClaudeFlowCommands","workingDir","helpCommand","writeFile","console","log","memoryCommand","swarmCommand"],"mappings":"AAAA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AAIpC,OAAO,eAAeC,kCAAkCC,UAAU;IAEhE,MAAMC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOvB,CAAC;IAEC,MAAMH,GAAGI,SAAS,CAAC,GAAGF,WAAW,qCAAqC,CAAC,EAAEC,aAAa;IACtFE,QAAQC,GAAG,CAAC;IAGZ,MAAMC,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6RzB,CAAC;IAEC,MAAMP,GAAGI,SAAS,CAAC,GAAGF,WAAW,uCAAuC,CAAC,EAAEK,eAAe;IAC1FF,QAAQC,GAAG,CAAC;IAGZ,MAAME,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+UxB,CAAC;IAEC,MAAMR,GAAGI,SAAS,CAAC,GAAGF,WAAW,sCAAsC,CAAC,EAAEM,cAAc;IACxFH,QAAQC,GAAG,CAAC;AACd"}