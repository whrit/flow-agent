{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/templates/verification-claude-md.js"],"sourcesContent":["// verification-claude-md.js - Verification and Pair Programming CLAUDE.md template\n\nexport function createVerificationClaudeMd() {\n  return `# Claude Code Configuration - Truth Verification & Pair Programming Environment\n\n## 🔍 VERIFICATION-FIRST DEVELOPMENT\n\nThis project enforces **\"truth is enforced, not assumed\"** with mandatory verification for all operations.\n\n### 🎯 Truth Verification System Active\n- **Threshold**: 0.95 (95% accuracy required)\n- **Mode**: Strict verification with auto-rollback\n- **Pair Programming**: Real-time collaborative development\n- **Background Monitoring**: Continuous validation enabled\n\n## 🚨 CRITICAL: VERIFICATION COMMANDS\n\n### Initialize Verification System\n\\`\\`\\`bash\n# Set verification mode (strict/moderate/development)\n./claude-flow verify init strict     # 95% threshold, auto-rollback\n./claude-flow verify init moderate   # 85% threshold, no auto-rollback\n./claude-flow verify init development # 75% threshold, for prototyping\n\\`\\`\\`\n\n### Run Verification\n\\`\\`\\`bash\n# Verify specific tasks\n./claude-flow verify verify task-123 --agent coder\n./claude-flow verify verify task-456 --agent reviewer --threshold 0.90\n\n# Check truth scores\n./claude-flow truth                  # View current truth scores\n./claude-flow truth --report         # Generate detailed report\n./claude-flow truth --analyze        # Analyze failure patterns\n\\`\\`\\`\n\n### Pair Programming Mode\n\\`\\`\\`bash\n# Start pair programming with real-time verification\n./claude-flow pair --start           # Begin collaborative session\n./claude-flow pair --start --mode strict  # Production-quality pairing\n./claude-flow pair --verify --threshold 0.90  # Custom threshold\n\n# Background monitoring (use run_in_background: true)\n./claude-flow pair --start --monitor # Continuous monitoring dashboard\n\\`\\`\\`\n\n## 📊 VERIFICATION REQUIREMENTS BY AGENT TYPE\n\n### Coder Agents\n- **Compile**: Code must compile without errors (35% weight)\n- **Test**: All tests must pass (25% weight)\n- **Lint**: Code quality checks (20% weight)\n- **Typecheck**: Type safety verification (20% weight)\n\n### Reviewer Agents\n- **Code Analysis**: Static code analysis\n- **Security Scan**: Vulnerability detection\n- **Performance Check**: Regression testing\n\n### Tester Agents\n- **Unit Tests**: Component-level testing\n- **Integration Tests**: System-wide validation\n- **Coverage Check**: Minimum coverage thresholds\n\n### Planner Agents\n- **Task Decomposition**: Valid task breakdown\n- **Dependency Check**: Dependency validation\n- **Feasibility**: Resource analysis\n\n## 🔄 BACKGROUND TASK MANAGEMENT\n\n### Running Verification in Background\n\\`\\`\\`javascript\n// Use run_in_background parameter for continuous monitoring\n{\n  \"tool\": \"Bash\",\n  \"command\": \"./claude-flow pair --start --monitor\",\n  \"run_in_background\": true  // Enables background execution\n}\n\\`\\`\\`\n\n### Managing Background Tasks\n\\`\\`\\`bash\n# Interactive management\n/bashes                      # View all background tasks\n\n# Check specific verification task\n\"Check status of bash_1\"     # Via prompt to Claude\n\n# Monitor verification output\n\"Show output from bash_1\"    # Real-time monitoring\n\n# Kill verification session\n\"Kill bash_1\"                # Stop background verification\n\\`\\`\\`\n\n## 🚨 CRITICAL: CONCURRENT VERIFICATION\n\n**MANDATORY**: All verification operations MUST be concurrent:\n\n### ✅ CORRECT - Parallel Verification\n\\`\\`\\`javascript\n[Single Message]:\n  // Initialize verification for multiple tasks\n  - Bash(\"./claude-flow verify verify task-1 --agent coder\")\n  - Bash(\"./claude-flow verify verify task-2 --agent reviewer\")\n  - Bash(\"./claude-flow verify verify task-3 --agent tester\")\n  \n  // Check all truth scores\n  - Bash(\"./claude-flow truth --json\")\n  \n  // Start monitoring in background\n  - Bash(\"./claude-flow pair --start --monitor\", run_in_background: true)\n\\`\\`\\`\n\n### ❌ WRONG - Sequential Verification\n\\`\\`\\`javascript\nMessage 1: Verify task-1\nMessage 2: Verify task-2\nMessage 3: Check truth score\n// This is 3x slower!\n\\`\\`\\`\n\n## 📈 VERIFICATION METRICS & THRESHOLDS\n\n### Target Metrics\n- **Truth Accuracy Rate**: >95%\n- **Integration Success Rate**: >90%\n- **Automated Rollback Frequency**: <5%\n- **Human Intervention Rate**: <10%\n\n### Verification Modes\n| Mode | Threshold | Auto-Rollback | Use Case |\n|------|-----------|---------------|----------|\n| **Strict** | 0.95 | ✅ Enabled | Production |\n| **Moderate** | 0.85 | ❌ Disabled | Development |\n| **Development** | 0.75 | ❌ Disabled | Prototyping |\n\n## 🤝 PAIR PROGRAMMING WORKFLOW\n\n### 1. Start Session\n\\`\\`\\`bash\n# Initialize pair programming with verification\n./claude-flow pair --start --mode strict\n\\`\\`\\`\n\n### 2. Real-time Verification Cycle\n\\`\\`\\`\nDeveloper writes code\n    ↓\nAI agent reviews in real-time\n    ↓\nVerification engine checks:\n  - Compilation (35%)\n  - Tests (25%)\n  - Linting (20%)\n  - Type safety (20%)\n    ↓\nTruth score calculated\n    ↓\nPass (>0.95) → Accept change\nFail (<0.95) → Suggest fixes or rollback\n\\`\\`\\`\n\n### 3. Continuous Monitoring\n\\`\\`\\`bash\n# Monitor in background\n./claude-flow pair --start --monitor &\n\n# Check verification output\n/bashes  # Interactive view\n\"Check bash_1 output\"  # Via prompt\n\\`\\`\\`\n\n## 🔒 SECURITY & AUDIT FEATURES\n\n### Cryptographic Verification\n- All verification results are cryptographically signed\n- SHA256 checksums for integrity\n- Immutable audit trail\n\n### Byzantine Fault Tolerance\n- Protection against incorrect agents\n- Consensus requirements (2/3+ majority)\n- Automatic agent quarantine\n\n### Audit Trail\n\\`\\`\\`bash\n# View verification history\ncat .swarm/verification-memory.json | jq .history\n\n# Check agent reliability\n./claude-flow truth --agent coder --detailed\n\\`\\`\\`\n\n## 🚀 QUICK START VERIFICATION WORKFLOW\n\n### Step 1: Initialize Project with Verification\n\\`\\`\\`bash\n# Initialize with verification-first approach\nnpx claude-flow@alpha init --verify --pair\n\n# Set up strict verification\n./claude-flow verify init strict\n\\`\\`\\`\n\n### Step 2: Start Development with Pair Programming\n\\`\\`\\`bash\n# Start pair programming session\n./claude-flow pair --start --mode strict --monitor &\n\n# Monitor verification (background task)\n/bashes  # Check bash_1 status\n\\`\\`\\`\n\n### Step 3: Develop with Continuous Verification\n\\`\\`\\`bash\n# All changes are automatically verified\n# Truth scores maintained above 0.95\n# Auto-rollback on verification failures\n\\`\\`\\`\n\n### Step 4: Check Truth Metrics\n\\`\\`\\`bash\n# View current truth scores\n./claude-flow truth\n\n# Generate detailed report\n./claude-flow truth --report --export metrics.json\n\\`\\`\\`\n\n## 📋 VERIFICATION CHECKLIST\n\nBefore ANY operation:\n- ✅ Is verification system initialized?\n- ✅ Is pair programming mode active?\n- ✅ Are background monitors running?\n- ✅ Is truth threshold configured correctly?\n- ✅ Are all agents configured for verification?\n\n## 🛠️ BUILD COMMANDS WITH VERIFICATION\n\n### Standard Commands (with verification)\n- \\`npm run build\\`: Build with verification checks\n- \\`npm run test\\`: Test with truth scoring\n- \\`npm run lint\\`: Lint with verification tracking\n- \\`npm run typecheck\\`: Type check with validation\n\n### Verification Commands\n- \\`./claude-flow verify status\\`: Check system status\n- \\`./claude-flow verify verify <task>\\`: Run verification\n- \\`./claude-flow truth\\`: View truth scores\n- \\`./claude-flow pair --start\\`: Begin pair programming\n\n## 💾 PERSISTENT VERIFICATION MEMORY\n\nVerification data stored in:\n- \\`.swarm/verification-memory.json\\`: Verification history\n- \\`.swarm/memory.db\\`: Persistent swarm memory\n- \\`.claude/verification-config.json\\`: Custom configuration\n\n## 🎯 AGENT VERIFICATION PATTERNS\n\n### Full-Stack Development with Verification\n\\`\\`\\`javascript\n// Deploy agents with verification requirements\nTask(\"System architecture\", \"Design with verification\", \"system-architect\")\nTask(\"Backend APIs\", \"Implement with 95% accuracy\", \"backend-dev\")\nTask(\"Frontend\", \"Build with validation\", \"mobile-dev\")\nTask(\"Testing\", \"Comprehensive verification\", \"tester\")\nTask(\"Review\", \"Verify all changes\", \"reviewer\")\n\\`\\`\\`\n\n### Verification-First TDD\n\\`\\`\\`javascript\n// TDD with mandatory verification\nTask(\"Write failing tests\", \"Verify test quality\", \"tester\")\nTask(\"Implement code\", \"Verify implementation\", \"coder\")\nTask(\"Refactor\", \"Verify improvements\", \"reviewer\")\nTask(\"Validate\", \"Final verification\", \"production-validator\")\n\\`\\`\\`\n\n## ⚡ PERFORMANCE WITH VERIFICATION\n\n### Optimized Verification\n- **Parallel Checks**: Run all verifications concurrently\n- **Cached Results**: Skip unchanged file verification\n- **Smart Batching**: Group related verifications\n- **Background Execution**: Non-blocking verification\n\n### Expected Performance\n- Verification overhead: <10% for most operations\n- Truth score calculation: <500ms\n- Rollback execution: <2 seconds\n- Background monitoring: Minimal impact\n\n## 🔄 AUTOMATED WORKFLOWS\n\n### CI/CD Integration\n\\`\\`\\`yaml\n# .github/workflows/verification.yml\n- name: Run Verification\n  run: |\n    npx claude-flow verify init strict\n    npx claude-flow verify verify \\${{ github.run_id }}\n    npx claude-flow truth --threshold 0.95\n\\`\\`\\`\n\n### Pre-commit Hooks\n\\`\\`\\`bash\n# .git/hooks/pre-commit\n#!/bin/bash\nnpx claude-flow verify verify pre-commit --agent coder\nSCORE=\\$(npx claude-flow truth --json | jq .averageScore)\nif [ \"\\$SCORE\" -lt \"0.85\" ]; then\n  echo \"❌ Commit blocked: Truth score \\$SCORE below threshold\"\n  exit 1\nfi\n\\`\\`\\`\n\n## 📚 DOCUMENTATION\n\n- [Truth Verification System](https://github.com/ruvnet/claude-flow/wiki/Truth-Verification-System)\n- [Pair Programming Guide](https://github.com/ruvnet/claude-flow/wiki/Pair-Programming-System)\n- [Background Commands](https://github.com/ruvnet/claude-flow/wiki/background-commands)\n- [Agent Verification](https://github.com/ruvnet/claude-flow/wiki/Agent-Verification)\n\n## 🚨 IMPORTANT REMINDERS\n\n1. **Truth is Enforced**: Every operation requires verification\n2. **Parallel Execution**: All verifications run concurrently\n3. **Background Monitoring**: Use run_in_background for continuous checks\n4. **Persistent Memory**: All verification data is saved\n5. **Auto-Rollback**: Failed verifications trigger automatic recovery\n\n---\n\nRemember: **\"Truth is enforced, not assumed\"** - All operations require verification!\n`;\n}\n\nexport function createVerificationSettingsJson() {\n  return JSON.stringify({\n    \"version\": \"1.0.0\",\n    \"verification\": {\n      \"enabled\": true,\n      \"mode\": \"strict\",\n      \"threshold\": 0.95,\n      \"autoRollback\": true,\n      \"requireConsensus\": true\n    },\n    \"pairProgramming\": {\n      \"enabled\": true,\n      \"mode\": \"strict\",\n      \"realTimeVerification\": true,\n      \"continuousMonitoring\": true,\n      \"backgroundExecution\": true\n    },\n    \"agentVerification\": {\n      \"coder\": {\n        \"checks\": [\"compile\", \"test\", \"lint\", \"typecheck\"],\n        \"weights\": {\n          \"compile\": 0.35,\n          \"test\": 0.25,\n          \"lint\": 0.20,\n          \"typecheck\": 0.20\n        }\n      },\n      \"reviewer\": {\n        \"checks\": [\"code-analysis\", \"security-scan\", \"performance-check\"],\n        \"weights\": {\n          \"code-analysis\": 0.40,\n          \"security-scan\": 0.35,\n          \"performance-check\": 0.25\n        }\n      },\n      \"tester\": {\n        \"checks\": [\"unit-tests\", \"integration-tests\", \"coverage-check\"],\n        \"weights\": {\n          \"unit-tests\": 0.35,\n          \"integration-tests\": 0.35,\n          \"coverage-check\": 0.30\n        }\n      },\n      \"planner\": {\n        \"checks\": [\"task-decomposition\", \"dependency-check\", \"feasibility\"],\n        \"weights\": {\n          \"task-decomposition\": 0.40,\n          \"dependency-check\": 0.30,\n          \"feasibility\": 0.30\n        }\n      }\n    },\n    \"backgroundTasks\": {\n      \"autoBackground\": {\n        \"enabled\": true,\n        \"patterns\": [\n          \"./claude-flow pair --start\",\n          \"./claude-flow verify verify\",\n          \"./claude-flow truth --monitor\",\n          \"*--monitor*\",\n          \"*--watch*\"\n        ]\n      }\n    },\n    \"metrics\": {\n      \"targets\": {\n        \"truthAccuracy\": 0.95,\n        \"integrationSuccess\": 0.90,\n        \"rollbackFrequency\": 0.05,\n        \"humanIntervention\": 0.10\n      }\n    },\n    \"hooks\": {\n      \"pre-commit\": {\n        \"enabled\": true,\n        \"commands\": [\n          \"npx claude-flow verify verify pre-commit --agent coder\"\n        ],\n        \"threshold\": 0.85\n      },\n      \"post-task\": {\n        \"enabled\": true,\n        \"commands\": [\n          \"npx claude-flow truth --json\",\n          \"npx claude-flow verify status\"\n        ]\n      }\n    }\n  }, null, 2);\n}"],"names":["createVerificationClaudeMd","createVerificationSettingsJson","JSON","stringify"],"mappings":"AAEA,OAAO,SAASA;IACd,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiVV,CAAC;AACD;AAEA,OAAO,SAASC;IACd,OAAOC,KAAKC,SAAS,CAAC;QACpB,WAAW;QACX,gBAAgB;YACd,WAAW;YACX,QAAQ;YACR,aAAa;YACb,gBAAgB;YAChB,oBAAoB;QACtB;QACA,mBAAmB;YACjB,WAAW;YACX,QAAQ;YACR,wBAAwB;YACxB,wBAAwB;YACxB,uBAAuB;QACzB;QACA,qBAAqB;YACnB,SAAS;gBACP,UAAU;oBAAC;oBAAW;oBAAQ;oBAAQ;iBAAY;gBAClD,WAAW;oBACT,WAAW;oBACX,QAAQ;oBACR,QAAQ;oBACR,aAAa;gBACf;YACF;YACA,YAAY;gBACV,UAAU;oBAAC;oBAAiB;oBAAiB;iBAAoB;gBACjE,WAAW;oBACT,iBAAiB;oBACjB,iBAAiB;oBACjB,qBAAqB;gBACvB;YACF;YACA,UAAU;gBACR,UAAU;oBAAC;oBAAc;oBAAqB;iBAAiB;gBAC/D,WAAW;oBACT,cAAc;oBACd,qBAAqB;oBACrB,kBAAkB;gBACpB;YACF;YACA,WAAW;gBACT,UAAU;oBAAC;oBAAsB;oBAAoB;iBAAc;gBACnE,WAAW;oBACT,sBAAsB;oBACtB,oBAAoB;oBACpB,eAAe;gBACjB;YACF;QACF;QACA,mBAAmB;YACjB,kBAAkB;gBAChB,WAAW;gBACX,YAAY;oBACV;oBACA;oBACA;oBACA;oBACA;iBACD;YACH;QACF;QACA,WAAW;YACT,WAAW;gBACT,iBAAiB;gBACjB,sBAAsB;gBACtB,qBAAqB;gBACrB,qBAAqB;YACvB;QACF;QACA,SAAS;YACP,cAAc;gBACZ,WAAW;gBACX,YAAY;oBACV;iBACD;gBACD,aAAa;YACf;YACA,aAAa;gBACX,WAAW;gBACX,YAAY;oBACV;oBACA;iBACD;YACH;QACF;IACF,GAAG,MAAM;AACX"}