{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/templates/sparc-modes.js"],"sourcesContent":["// sparc-modes.js - SPARC mode file templates\n\nexport function createSparcModesOverview() {\n  return `# SPARC Modes Overview\n\nSPARC (Specification, Planning, Architecture, Review, Code) is a comprehensive development methodology with 17 specialized modes.\n\n## Available Modes\n\n### Core Orchestration Modes\n- **orchestrator**: Multi-agent task orchestration\n- **swarm-coordinator**: Specialized swarm management\n- **workflow-manager**: Process automation\n- **batch-executor**: Parallel task execution\n\n### Development Modes  \n- **coder**: Autonomous code generation\n- **architect**: System design\n- **reviewer**: Code review\n- **tdd**: Test-driven development\n\n### Analysis and Research Modes\n- **researcher**: Deep research capabilities\n- **analyzer**: Code and data analysis\n- **optimizer**: Performance optimization\n\n### Creative and Support Modes\n- **designer**: UI/UX design\n- **innovator**: Creative problem solving\n- **documenter**: Documentation generation\n- **debugger**: Systematic debugging\n- **tester**: Comprehensive testing\n- **memory-manager**: Knowledge management\n\n## Usage\n\\`\\`\\`bash\n# Run a specific mode\n./claude-flow sparc run <mode> \"task description\"\n\n# List all modes\n./claude-flow sparc modes\n\n# Get help for a mode\n./claude-flow sparc help <mode>\n\\`\\`\\`\n`;\n}\n\nexport function createSwarmStrategyTemplates() {\n  return {\n    'analysis.md': createAnalysisStrategy(),\n    'development.md': createDevelopmentStrategy(),\n    'examples.md': createExamplesStrategy(),\n    'maintenance.md': createMaintenanceStrategy(),\n    'optimization.md': createOptimizationStrategy(),\n    'research.md': createResearchStrategy(),\n    'testing.md': createTestingStrategy(),\n  };\n}\n\nfunction createAnalysisStrategy() {\n  return `# Analysis Swarm Strategy\n\n## Purpose\nComprehensive analysis through distributed agent coordination.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"mesh\",\n  strategy: \"analysis\",\n  maxAgents: 6\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"analyze system performance\",\n  strategy: \"distributed\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"analyze system performance\" --strategy analysis\n\n# For alpha features\nnpx claude-flow@alpha swarm \"analyze system performance\" --strategy analysis\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"analyze system performance\" --strategy analysis\n\\`\\`\\`\n\n## Agent Roles\n- Data Collector: Gathers metrics and logs\n- Pattern Analyzer: Identifies trends and anomalies\n- Report Generator: Creates comprehensive reports\n- Insight Synthesizer: Combines findings\n\n## Coordination Modes\n- Mesh: For exploratory analysis\n- Pipeline: For sequential processing\n- Hierarchical: For complex systems\n`;\n}\n\nfunction createDevelopmentStrategy() {\n  return `# Development Swarm Strategy\n\n## Purpose\nCoordinated development through specialized agent teams.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"hierarchical\",\n  strategy: \"development\",\n  maxAgents: 8\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"build feature X\",\n  strategy: \"parallel\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"build feature X\" --strategy development\n\n# For alpha features\nnpx claude-flow@alpha swarm \"build feature X\" --strategy development\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"build feature X\" --strategy development\n\\`\\`\\`\n\n## Agent Roles\n- Architect: Designs system structure\n- Frontend Developer: Implements UI\n- Backend Developer: Creates APIs\n- Database Specialist: Manages data layer\n- Integration Expert: Connects components\n\n## Best Practices\n- Use hierarchical mode for large projects\n- Enable parallel execution\n- Implement continuous testing\n`;\n}\n\nfunction createExamplesStrategy() {\n  return `# Examples Swarm Strategy\n\n## Common Swarm Patterns\n\n### Research Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"research AI trends\" \\\\\n  --strategy research \\\\\n  --mode distributed \\\\\n  --max-agents 6 \\\\\n  --parallel\n\\`\\`\\`\n\n### Development Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"build REST API\" \\\\\n  --strategy development \\\\\n  --mode hierarchical \\\\\n  --monitor \\\\\n  --output sqlite\n\\`\\`\\`\n\n### Analysis Swarm\n\\`\\`\\`bash\n./claude-flow swarm \"analyze codebase\" \\\\\n  --strategy analysis \\\\\n  --mode mesh \\\\\n  --parallel \\\\\n  --timeout 300\n\\`\\`\\`\n`;\n}\n\nfunction createMaintenanceStrategy() {\n  return `# Maintenance Swarm Strategy\n\n## Purpose\nSystem maintenance and updates through coordinated agents.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"hierarchical\",\n  strategy: \"maintenance\",\n  maxAgents: 5\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"update dependencies\",\n  strategy: \"sequential\",\n  priority: \"high\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"update dependencies\" --strategy maintenance\n\n# For alpha features\nnpx claude-flow@alpha swarm \"update dependencies\" --strategy maintenance\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"update dependencies\" --strategy maintenance\n\\`\\`\\`\n\n## Agent Roles\n- Dependency Analyzer: Checks for updates\n- Security Scanner: Identifies vulnerabilities\n- Test Runner: Validates changes\n- Documentation Updater: Maintains docs\n\n## Safety Features\n- Automatic backups\n- Rollback capability\n- Incremental updates\n`;\n}\n\nfunction createOptimizationStrategy() {\n  return `# Optimization Swarm Strategy\n\n## Purpose\nPerformance optimization through specialized analysis.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"mesh\",\n  strategy: \"optimization\",\n  maxAgents: 6\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"optimize performance\",\n  strategy: \"parallel\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"optimize performance\" --strategy optimization\n\n# For alpha features\nnpx claude-flow@alpha swarm \"optimize performance\" --strategy optimization\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"optimize performance\" --strategy optimization\n\\`\\`\\`\n\n## Agent Roles\n- Performance Profiler: Identifies bottlenecks\n- Memory Analyzer: Detects leaks\n- Code Optimizer: Implements improvements\n- Benchmark Runner: Measures impact\n\n## Optimization Areas\n- Execution speed\n- Memory usage\n- Network efficiency\n- Bundle size\n`;\n}\n\nfunction createResearchStrategy() {\n  return `# Research Swarm Strategy\n\n## Purpose\nDeep research through parallel information gathering.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"distributed\",\n  strategy: \"research\",\n  maxAgents: 6\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"research topic X\",\n  strategy: \"parallel\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"research topic X\" --strategy research\n\n# For alpha features\nnpx claude-flow@alpha swarm \"research topic X\" --strategy research\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"research topic X\" --strategy research\n\\`\\`\\`\n\n## Agent Roles\n- Web Researcher: Searches online sources\n- Academic Researcher: Analyzes papers\n- Data Analyst: Processes findings\n- Report Writer: Synthesizes results\n\n## Research Methods\n- Parallel web searches\n- Cross-reference validation\n- Source credibility assessment\n`;\n}\n\nfunction createTestingStrategy() {\n  return `# Testing Swarm Strategy\n\n## Purpose\nComprehensive testing through distributed execution.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__swarm_init {\n  topology: \"distributed\",\n  strategy: \"testing\",\n  maxAgents: 5\n}\n\nmcp__claude-flow__task_orchestrate {\n  task: \"test application\",\n  strategy: \"parallel\"\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow swarm \"test application\" --strategy testing\n\n# For alpha features\nnpx claude-flow@alpha swarm \"test application\" --strategy testing\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow swarm \"test application\" --strategy testing\n\\`\\`\\`\n\n## Agent Roles\n- Unit Tester: Tests individual components\n- Integration Tester: Validates interactions\n- E2E Tester: Tests user flows\n- Performance Tester: Measures metrics\n- Security Tester: Finds vulnerabilities\n\n## Test Coverage\n- Code coverage analysis\n- Edge case identification\n- Regression prevention\n`;\n}\n\nexport function createSparcModeTemplates() {\n  return {\n    'analyzer.md': createAnalyzerMode(),\n    'architect.md': createArchitectMode(),\n    'batch-executor.md': createBatchExecutorMode(),\n    'coder.md': createCoderMode(),\n    'debugger.md': createDebuggerMode(),\n    'designer.md': createDesignerMode(),\n    'documenter.md': createDocumenterMode(),\n    'innovator.md': createInnovatorMode(),\n    'memory-manager.md': createMemoryManagerMode(),\n    'optimizer.md': createOptimizerMode(),\n    'orchestrator.md': createOrchestratorMode(),\n    'researcher.md': createResearcherMode(),\n    'reviewer.md': createReviewerMode(),\n    'swarm-coordinator.md': createSwarmCoordinatorMode(),\n    'tdd.md': createTddMode(),\n    'tester.md': createTesterMode(),\n    'workflow-manager.md': createWorkflowManagerMode(),\n  };\n}\n\nfunction createAnalyzerMode() {\n  return `# SPARC Analyzer Mode\n\n## Purpose\nDeep code and data analysis with batch processing capabilities.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"analyzer\",\n  task_description: \"analyze codebase performance\",\n  options: {\n    parallel: true,\n    detailed: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run analyzer \"analyze codebase performance\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run analyzer \"analyze codebase performance\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run analyzer \"analyze codebase performance\"\n\\`\\`\\`\n\n## Core Capabilities\n- Code analysis with parallel file processing\n- Data pattern recognition\n- Performance profiling\n- Memory usage analysis\n- Dependency mapping\n\n## Batch Operations\n- Parallel file analysis using concurrent Read operations\n- Batch pattern matching with Grep tool\n- Simultaneous metric collection\n- Aggregated reporting\n\n## Output Format\n- Detailed analysis reports\n- Performance metrics\n- Improvement recommendations\n- Visualizations when applicable\n`;\n}\n\nfunction createArchitectMode() {\n  return `# SPARC Architect Mode\n\n## Purpose\nSystem design with Memory-based coordination for scalable architectures.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"architect\",\n  task_description: \"design microservices architecture\",\n  options: {\n    detailed: true,\n    memory_enabled: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run architect \"design microservices architecture\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run architect \"design microservices architecture\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run architect \"design microservices architecture\"\n\\`\\`\\`\n\n## Core Capabilities\n- System architecture design\n- Component interface definition\n- Database schema design\n- API contract specification\n- Infrastructure planning\n\n## Memory Integration\n- Store architecture decisions in Memory\n- Share component specifications across agents\n- Maintain design consistency\n- Track architectural evolution\n\n## Design Patterns\n- Microservices\n- Event-driven architecture\n- Domain-driven design\n- Hexagonal architecture\n- CQRS and Event Sourcing\n`;\n}\n\nfunction createBatchExecutorMode() {\n  return `# SPARC Batch Executor Mode\n\n## Purpose\nParallel task execution specialist using batch operations.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"batch-executor\",\n  task_description: \"process multiple files\",\n  options: {\n    parallel: true,\n    batch_size: 10\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run batch-executor \"process multiple files\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run batch-executor \"process multiple files\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run batch-executor \"process multiple files\"\n\\`\\`\\`\n\n## Core Capabilities\n- Parallel file operations\n- Concurrent task execution\n- Resource optimization\n- Load balancing\n- Progress tracking\n\n## Execution Patterns\n- Parallel Read/Write operations\n- Concurrent Edit operations\n- Batch file transformations\n- Distributed processing\n- Pipeline orchestration\n\n## Performance Features\n- Dynamic resource allocation\n- Automatic load balancing\n- Progress monitoring\n- Error recovery\n- Result aggregation\n`;\n}\n\nfunction createCoderMode() {\n  return `# SPARC Coder Mode\n\n## Purpose\nAutonomous code generation with batch file operations.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"coder\",\n  task_description: \"implement user authentication\",\n  options: {\n    test_driven: true,\n    parallel_edits: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run coder \"implement user authentication\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run coder \"implement user authentication\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run coder \"implement user authentication\"\n\\`\\`\\`\n\n## Core Capabilities\n- Feature implementation\n- Code refactoring\n- Bug fixes\n- API development\n- Algorithm implementation\n\n## Batch Operations\n- Parallel file creation\n- Concurrent code modifications\n- Batch import updates\n- Test file generation\n- Documentation updates\n\n## Code Quality\n- ES2022 standards\n- Type safety with TypeScript\n- Comprehensive error handling\n- Performance optimization\n- Security best practices\n`;\n}\n\nfunction createDebuggerMode() {\n  return `# SPARC Debugger Mode\n\n## Purpose\nSystematic debugging with TodoWrite and Memory integration.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"debugger\",\n  task_description: \"fix authentication issues\",\n  options: {\n    verbose: true,\n    trace: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run debugger \"fix authentication issues\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run debugger \"fix authentication issues\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run debugger \"fix authentication issues\"\n\\`\\`\\`\n\n## Core Capabilities\n- Issue reproduction\n- Root cause analysis\n- Stack trace analysis\n- Memory leak detection\n- Performance bottleneck identification\n\n## Debugging Workflow\n1. Create debugging plan with TodoWrite\n2. Systematic issue investigation\n3. Store findings in Memory\n4. Track fix progress\n5. Verify resolution\n\n## Tools Integration\n- Error log analysis\n- Breakpoint simulation\n- Variable inspection\n- Call stack tracing\n- Memory profiling\n`;\n}\n\nfunction createDesignerMode() {\n  return `# SPARC Designer Mode\n\n## Purpose\nUI/UX design with Memory coordination for consistent experiences.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"designer\",\n  task_description: \"create dashboard UI\",\n  options: {\n    design_system: true,\n    responsive: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run designer \"create dashboard UI\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run designer \"create dashboard UI\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run designer \"create dashboard UI\"\n\\`\\`\\`\n\n## Core Capabilities\n- Interface design\n- Component architecture\n- Design system creation\n- Accessibility planning\n- Responsive layouts\n\n## Design Process\n- User research insights\n- Wireframe creation\n- Component design\n- Interaction patterns\n- Design token management\n\n## Memory Coordination\n- Store design decisions\n- Share component specs\n- Maintain consistency\n- Track design evolution\n`;\n}\n\nfunction createDocumenterMode() {\n  return `# SPARC Documenter Mode\n\n## Purpose\nDocumentation with batch file operations for comprehensive docs.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"documenter\",\n  task_description: \"create API documentation\",\n  options: {\n    format: \"markdown\",\n    include_examples: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run documenter \"create API documentation\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run documenter \"create API documentation\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run documenter \"create API documentation\"\n\\`\\`\\`\n\n## Core Capabilities\n- API documentation\n- Code documentation\n- User guides\n- Architecture docs\n- README files\n\n## Documentation Types\n- Markdown documentation\n- JSDoc comments\n- API specifications\n- Integration guides\n- Deployment docs\n\n## Batch Features\n- Parallel doc generation\n- Bulk file updates\n- Cross-reference management\n- Example generation\n- Diagram creation\n`;\n}\n\nfunction createInnovatorMode() {\n  return `# SPARC Innovator Mode\n\n## Purpose\nCreative problem solving with WebSearch and Memory integration.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"innovator\",\n  task_description: \"innovative solutions for scaling\",\n  options: {\n    research_depth: \"comprehensive\",\n    creativity_level: \"high\"\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run innovator \"innovative solutions for scaling\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run innovator \"innovative solutions for scaling\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run innovator \"innovative solutions for scaling\"\n\\`\\`\\`\n\n## Core Capabilities\n- Creative ideation\n- Solution brainstorming\n- Technology exploration\n- Pattern innovation\n- Proof of concept\n\n## Innovation Process\n- Divergent thinking phase\n- Research and exploration\n- Convergent synthesis\n- Prototype planning\n- Feasibility analysis\n\n## Knowledge Sources\n- WebSearch for trends\n- Memory for context\n- Cross-domain insights\n- Pattern recognition\n- Analogical reasoning\n`;\n}\n\nfunction createMemoryManagerMode() {\n  return `# SPARC Memory Manager Mode\n\n## Purpose\nKnowledge management with Memory tools for persistent insights.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"memory-manager\",\n  task_description: \"organize project knowledge\",\n  options: {\n    namespace: \"project\",\n    auto_organize: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run memory-manager \"organize project knowledge\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run memory-manager \"organize project knowledge\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run memory-manager \"organize project knowledge\"\n\\`\\`\\`\n\n## Core Capabilities\n- Knowledge organization\n- Information retrieval\n- Context management\n- Insight preservation\n- Cross-session persistence\n\n## Memory Strategies\n- Hierarchical organization\n- Tag-based categorization\n- Temporal tracking\n- Relationship mapping\n- Priority management\n\n## Knowledge Operations\n- Store critical insights\n- Retrieve relevant context\n- Update knowledge base\n- Merge related information\n- Archive obsolete data\n`;\n}\n\nfunction createOptimizerMode() {\n  return `# SPARC Optimizer Mode\n\n## Purpose\nPerformance optimization with systematic analysis and improvements.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"optimizer\",\n  task_description: \"optimize application performance\",\n  options: {\n    profile: true,\n    benchmark: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run optimizer \"optimize application performance\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run optimizer \"optimize application performance\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run optimizer \"optimize application performance\"\n\\`\\`\\`\n\n## Core Capabilities\n- Performance profiling\n- Code optimization\n- Resource optimization\n- Algorithm improvement\n- Scalability enhancement\n\n## Optimization Areas\n- Execution speed\n- Memory usage\n- Network efficiency\n- Database queries\n- Bundle size\n\n## Systematic Approach\n1. Baseline measurement\n2. Bottleneck identification\n3. Optimization implementation\n4. Impact verification\n5. Continuous monitoring\n`;\n}\n\nfunction createOrchestratorMode() {\n  return `# SPARC Orchestrator Mode\n\n## Purpose\nMulti-agent task orchestration with TodoWrite/TodoRead/Task/Memory.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"orchestrator\",\n  task_description: \"coordinate feature development\",\n  options: {\n    parallel: true,\n    monitor: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run orchestrator \"coordinate feature development\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run orchestrator \"coordinate feature development\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run orchestrator \"coordinate feature development\"\n\\`\\`\\`\n\n## Core Capabilities\n- Task decomposition\n- Agent coordination\n- Resource allocation\n- Progress tracking\n- Result synthesis\n\n## Orchestration Patterns\n- Hierarchical coordination\n- Parallel execution\n- Sequential pipelines\n- Event-driven flows\n- Adaptive strategies\n\n## Coordination Tools\n- TodoWrite for planning\n- Task for agent launch\n- Memory for sharing\n- Progress monitoring\n- Result aggregation\n`;\n}\n\nfunction createResearcherMode() {\n  return `# SPARC Researcher Mode\n\n## Purpose\nDeep research with parallel WebSearch/WebFetch and Memory coordination.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"researcher\",\n  task_description: \"research AI trends 2024\",\n  options: {\n    depth: \"comprehensive\",\n    sources: [\"academic\", \"industry\", \"news\"]\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run researcher \"research AI trends 2024\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run researcher \"research AI trends 2024\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run researcher \"research AI trends 2024\"\n\\`\\`\\`\n\n## Core Capabilities\n- Information gathering\n- Source evaluation\n- Trend analysis\n- Competitive research\n- Technology assessment\n\n## Research Methods\n- Parallel web searches\n- Academic paper analysis\n- Industry report synthesis\n- Expert opinion gathering\n- Data compilation\n\n## Memory Integration\n- Store research findings\n- Build knowledge graphs\n- Track information sources\n- Cross-reference insights\n- Maintain research history\n`;\n}\n\nfunction createReviewerMode() {\n  return `# SPARC Reviewer Mode\n\n## Purpose\nCode review using batch file analysis for comprehensive reviews.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"reviewer\",\n  task_description: \"review pull request #123\",\n  options: {\n    security_check: true,\n    performance_check: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run reviewer \"review pull request #123\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run reviewer \"review pull request #123\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run reviewer \"review pull request #123\"\n\\`\\`\\`\n\n## Core Capabilities\n- Code quality assessment\n- Security review\n- Performance analysis\n- Best practices check\n- Documentation review\n\n## Review Criteria\n- Code correctness\n- Design patterns\n- Error handling\n- Test coverage\n- Maintainability\n\n## Batch Analysis\n- Parallel file review\n- Pattern detection\n- Dependency checking\n- Consistency validation\n- Automated reporting\n`;\n}\n\nfunction createSwarmCoordinatorMode() {\n  return `# SPARC Swarm Coordinator Mode\n\n## Purpose\nSpecialized swarm management with batch coordination capabilities.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"swarm-coordinator\",\n  task_description: \"manage development swarm\",\n  options: {\n    topology: \"hierarchical\",\n    max_agents: 10\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run swarm-coordinator \"manage development swarm\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run swarm-coordinator \"manage development swarm\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run swarm-coordinator \"manage development swarm\"\n\\`\\`\\`\n\n## Core Capabilities\n- Swarm initialization\n- Agent management\n- Task distribution\n- Load balancing\n- Result collection\n\n## Coordination Modes\n- Hierarchical swarms\n- Mesh networks\n- Pipeline coordination\n- Adaptive strategies\n- Hybrid approaches\n\n## Management Features\n- Dynamic scaling\n- Resource optimization\n- Failure recovery\n- Performance monitoring\n- Quality assurance\n`;\n}\n\nfunction createTddMode() {\n  return `# SPARC TDD Mode\n\n## Purpose\nTest-driven development with TodoWrite planning and comprehensive testing.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"tdd\",\n  task_description: \"shopping cart feature\",\n  options: {\n    coverage_target: 90,\n    test_framework: \"jest\"\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run tdd \"shopping cart feature\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run tdd \"shopping cart feature\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run tdd \"shopping cart feature\"\n\\`\\`\\`\n\n## Core Capabilities\n- Test-first development\n- Red-green-refactor cycle\n- Test suite design\n- Coverage optimization\n- Continuous testing\n\n## TDD Workflow\n1. Write failing tests\n2. Implement minimum code\n3. Make tests pass\n4. Refactor code\n5. Repeat cycle\n\n## Testing Strategies\n- Unit testing\n- Integration testing\n- End-to-end testing\n- Performance testing\n- Security testing\n`;\n}\n\nfunction createTesterMode() {\n  return `# SPARC Tester Mode\n\n## Purpose\nComprehensive testing with parallel execution capabilities.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"tester\",\n  task_description: \"full regression suite\",\n  options: {\n    parallel: true,\n    coverage: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run tester \"full regression suite\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run tester \"full regression suite\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run tester \"full regression suite\"\n\\`\\`\\`\n\n## Core Capabilities\n- Test planning\n- Test execution\n- Bug detection\n- Coverage analysis\n- Report generation\n\n## Test Types\n- Unit tests\n- Integration tests\n- E2E tests\n- Performance tests\n- Security tests\n\n## Parallel Features\n- Concurrent test runs\n- Distributed testing\n- Load testing\n- Cross-browser testing\n- Multi-environment validation\n`;\n}\n\nfunction createWorkflowManagerMode() {\n  return `# SPARC Workflow Manager Mode\n\n## Purpose\nProcess automation with TodoWrite planning and Task execution.\n\n## Activation\n\n### Option 1: Using MCP Tools (Preferred in Claude Code)\n\\`\\`\\`javascript\nmcp__claude-flow__sparc_mode {\n  mode: \"workflow-manager\",\n  task_description: \"automate deployment\",\n  options: {\n    pipeline: \"ci-cd\",\n    rollback_enabled: true\n  }\n}\n\\`\\`\\`\n\n### Option 2: Using NPX CLI (Fallback when MCP not available)\n\\`\\`\\`bash\n# Use when running from terminal or MCP tools unavailable\nnpx claude-flow sparc run workflow-manager \"automate deployment\"\n\n# For alpha features\nnpx claude-flow@alpha sparc run workflow-manager \"automate deployment\"\n\\`\\`\\`\n\n### Option 3: Local Installation\n\\`\\`\\`bash\n# If claude-flow is installed locally\n./claude-flow sparc run workflow-manager \"automate deployment\"\n\\`\\`\\`\n\n## Core Capabilities\n- Workflow design\n- Process automation\n- Pipeline creation\n- Event handling\n- State management\n\n## Workflow Patterns\n- Sequential flows\n- Parallel branches\n- Conditional logic\n- Loop iterations\n- Error handling\n\n## Automation Features\n- Trigger management\n- Task scheduling\n- Progress tracking\n- Result validation\n- Rollback capability\n`;\n}\n"],"names":["createSparcModesOverview","createSwarmStrategyTemplates","createAnalysisStrategy","createDevelopmentStrategy","createExamplesStrategy","createMaintenanceStrategy","createOptimizationStrategy","createResearchStrategy","createTestingStrategy","createSparcModeTemplates","createAnalyzerMode","createArchitectMode","createBatchExecutorMode","createCoderMode","createDebuggerMode","createDesignerMode","createDocumenterMode","createInnovatorMode","createMemoryManagerMode","createOptimizerMode","createOrchestratorMode","createResearcherMode","createReviewerMode","createSwarmCoordinatorMode","createTddMode","createTesterMode","createWorkflowManagerMode"],"mappings":"AAEA,OAAO,SAASA;IACd,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CV,CAAC;AACD;AAEA,OAAO,SAASC;IACd,OAAO;QACL,eAAeC;QACf,kBAAkBC;QAClB,eAAeC;QACf,kBAAkBC;QAClB,mBAAmBC;QACnB,eAAeC;QACf,cAAcC;IAChB;AACF;AAEA,SAASN;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CV,CAAC;AACD;AAEA,OAAO,SAASC;IACd,OAAO;QACL,eAAeC;QACf,gBAAgBC;QAChB,qBAAqBC;QACrB,YAAYC;QACZ,eAAeC;QACf,eAAeC;QACf,iBAAiBC;QACjB,gBAAgBC;QAChB,qBAAqBC;QACrB,gBAAgBC;QAChB,mBAAmBC;QACnB,iBAAiBC;QACjB,eAAeC;QACf,wBAAwBC;QACxB,UAAUC;QACV,aAAaC;QACb,uBAAuBC;IACzB;AACF;AAEA,SAAShB;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD"}