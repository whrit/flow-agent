{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/templates/safe-hook-patterns.js"],"sourcesContent":["/**\n * Safe Hook Patterns - Templates for safe Claude Code hook configurations\n *\n * These patterns prevent infinite loops that could cost thousands of dollars\n * by avoiding recursive hook execution when hooks call 'claude' commands.\n */\n\n/**\n * DANGEROUS PATTERN - DO NOT USE\n * This creates an infinite loop that can cost thousands of dollars!\n */\nexport const DANGEROUS_PATTERN_EXAMPLE = {\n  name: 'DANGEROUS: Stop hook calling claude command',\n  description: '❌ NEVER USE THIS - Creates infinite recursion loop',\n  pattern: {\n    hooks: {\n      Stop: [\n        {\n          matcher: '',\n          hooks: [\n            {\n              type: 'command',\n              command: 'claude -c -p \"Update all changes to history.md\"',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  problems: [\n    '🚨 Creates infinite loop: Stop → claude command → Stop → claude command...',\n    '💰 Can cost $3600+ per day by bypassing rate limits',\n    '🚫 Makes system unresponsive',\n    '⚡ No built-in protection in Claude Code',\n  ],\n};\n\n/**\n * SAFE PATTERN 1: Flag-based updates\n * Set a flag instead of calling claude directly\n */\nexport const SAFE_FLAG_PATTERN = {\n  name: 'Safe Pattern: Flag-based updates',\n  description: '✅ Set flag when update needed, run manually',\n  pattern: {\n    hooks: {\n      Stop: [\n        {\n          matcher: '',\n          hooks: [\n            {\n              type: 'command',\n              command:\n                'bash -c \\'echo \"History update needed at $(date)\" > ~/.claude/needs_update && echo \"📝 History update flagged. Run: claude -c -p \\\\\"Update history.md\\\\\"\"\\'',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  benefits: [\n    '✅ No recursion - just sets a flag',\n    '💰 Zero risk of infinite API calls',\n    '🔄 User controls when update runs',\n    '📝 Clear instructions for manual execution',\n  ],\n  usage: [\n    '1. Hook sets flag when update is needed',\n    '2. User sees notification',\n    '3. User manually runs: claude -c -p \"Update history.md\"',\n    '4. Update runs once safely',\n  ],\n};\n\n/**\n * SAFE PATTERN 2: PostToolUse hooks instead of Stop hooks\n * React to specific tool usage rather than session end\n */\nexport const SAFE_POST_TOOL_PATTERN = {\n  name: 'Safe Pattern: PostToolUse hooks',\n  description: '✅ React to specific file operations instead of Stop events',\n  pattern: {\n    hooks: {\n      PostToolUse: [\n        {\n          matcher: 'Write|Edit|MultiEdit',\n          hooks: [\n            {\n              type: 'command',\n              command: \"echo 'File modified: {file}' >> ~/.claude/modifications.log\",\n            },\n          ],\n        },\n      ],\n    },\n  },\n  benefits: [\n    '✅ Only triggers on actual file changes',\n    '🎯 More precise than Stop hooks',\n    '📝 Logs specific modifications',\n    '🔄 No risk of Stop hook recursion',\n  ],\n  usage: [\n    '1. Triggers only when files are written/edited',\n    '2. Logs the specific file that was modified',\n    '3. Can be used for change tracking',\n    '4. Safe to use with any logging command',\n  ],\n};\n\n/**\n * SAFE PATTERN 3: Conditional execution with skip-hooks\n * Check for hook context before executing claude commands\n */\nexport const SAFE_CONDITIONAL_PATTERN = {\n  name: 'Safe Pattern: Conditional execution with context check',\n  description: '✅ Check if running in hook context before calling claude',\n  pattern: {\n    hooks: {\n      Stop: [\n        {\n          matcher: '',\n          hooks: [\n            {\n              type: 'command',\n              command:\n                'bash -c \\'if [ -z \"$CLAUDE_HOOK_CONTEXT\" ]; then claude -c -p \"Update history.md\" --skip-hooks; else echo \"Skipping update - in hook context\"; fi\\'',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  benefits: [\n    '✅ Checks hook context before execution',\n    '🛡️ Uses --skip-hooks flag for safety',\n    '🔄 Prevents recursive hook calls',\n    '📊 Provides clear feedback',\n  ],\n  usage: [\n    '1. Checks CLAUDE_HOOK_CONTEXT environment variable',\n    '2. Only runs claude if not in hook context',\n    '3. Uses --skip-hooks to prevent triggering more hooks',\n    '4. Shows clear message when skipping',\n  ],\n};\n\n/**\n * SAFE PATTERN 4: Batch processing with scheduled execution\n * Accumulate changes and process them on a schedule\n */\nexport const SAFE_BATCH_PATTERN = {\n  name: 'Safe Pattern: Batch processing with scheduled execution',\n  description: '✅ Accumulate changes and process them separately',\n  pattern: {\n    hooks: {\n      Stop: [\n        {\n          matcher: '',\n          hooks: [\n            {\n              type: 'command',\n              command: 'echo \"$(date): Session ended\" >> ~/.claude/session_log.txt',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  additionalSetup: {\n    cronJob: '# Add to crontab (run every hour):\\n# 0 * * * * /path/to/update-history.sh',\n    updateScript: `#!/bin/bash\n# update-history.sh - Safe batch update script\nLOCK_FILE=\"~/.claude/update.lock\"\nLOG_FILE=\"~/.claude/session_log.txt\"\n\n# Check if update is already running\nif [ -f \"$LOCK_FILE\" ]; then\n    echo \"Update already in progress\"\n    exit 1\nfi\n\n# Create lock file\ntouch \"$LOCK_FILE\"\n\n# Check if there are new sessions to process\nif [ -f \"$LOG_FILE\" ] && [ -s \"$LOG_FILE\" ]; then\n    echo \"Processing accumulated changes...\"\n    claude -c -p \"Update history.md with recent session data\" --skip-hooks\n    \n    # Archive the log\n    mv \"$LOG_FILE\" \"~/.claude/session_log_$(date +%Y%m%d_%H%M%S).txt\"\nfi\n\n# Remove lock file\nrm \"$LOCK_FILE\"`,\n  },\n  benefits: [\n    '✅ No risk of recursion',\n    '⏰ Scheduled processing prevents overload',\n    '🔒 Lock file prevents concurrent updates',\n    '📦 Batches multiple sessions efficiently',\n  ],\n};\n\n/**\n * SAFE PATTERN 5: Database/file-based queue system\n * Use external queue for processing commands\n */\nexport const SAFE_QUEUE_PATTERN = {\n  name: 'Safe Pattern: Queue-based command processing',\n  description: '✅ Queue commands for external processing',\n  pattern: {\n    hooks: {\n      Stop: [\n        {\n          matcher: '',\n          hooks: [\n            {\n              type: 'command',\n              command:\n                'echo \\'{\"command\": \"update-history\", \"timestamp\": \"\\'$(date -Iseconds)\\'\", \"session\": \"\\'$CLAUDE_SESSION_ID\\'\"}\\' >> ~/.claude/command_queue.jsonl',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  processor: `#!/usr/bin/env python3\n# queue-processor.py - Safe command queue processor\nimport json\nimport subprocess\nimport time\nimport os\nfrom pathlib import Path\n\nQUEUE_FILE = Path.home() / '.claude' / 'command_queue.jsonl'\nPROCESSING_INTERVAL = 300  # 5 minutes\n\ndef process_queue():\n    if not QUEUE_FILE.exists():\n        return\n    \n    # Read and clear queue atomically\n    with open(QUEUE_FILE, 'r') as f:\n        lines = f.readlines()\n    \n    # Clear the queue\n    QUEUE_FILE.unlink()\n    \n    # Process commands\n    for line in lines:\n        try:\n            cmd_data = json.loads(line.strip())\n            if cmd_data['command'] == 'update-history':\n                print(f\"Processing history update for session {cmd_data['session']}\")\n                subprocess.run([\n                    'claude', '-c', '-p', 'Update history.md', '--skip-hooks'\n                ], check=True)\n                time.sleep(2)  # Rate limiting\n        except Exception as e:\n            print(f\"Error processing command: {e}\")\n\nif __name__ == '__main__':\n    while True:\n        try:\n            process_queue()\n            time.sleep(PROCESSING_INTERVAL)\n        except KeyboardInterrupt:\n            break`,\n  benefits: [\n    '✅ Complete separation of hook and claude execution',\n    '⏰ Rate limited processing',\n    '🔄 Handles multiple queued commands',\n    '🛡️ No risk of infinite loops',\n  ],\n};\n\n/**\n * Get all safe patterns for documentation generation\n */\nexport const ALL_SAFE_PATTERNS = [\n  SAFE_FLAG_PATTERN,\n  SAFE_POST_TOOL_PATTERN,\n  SAFE_CONDITIONAL_PATTERN,\n  SAFE_BATCH_PATTERN,\n  SAFE_QUEUE_PATTERN,\n];\n\n/**\n * Generate safe hooks documentation\n */\nexport function generateSafeHooksGuide() {\n  return `# 🛡️ Safe Hook Patterns for Claude Code\n\n⚠️ **CRITICAL WARNING**: Stop hooks that call 'claude' commands create infinite loops that can cost thousands of dollars per day!\n\n## 🚨 DANGEROUS PATTERN (NEVER USE)\n\n${DANGEROUS_PATTERN_EXAMPLE.description}\n\n\\`\\`\\`json\n${JSON.stringify(DANGEROUS_PATTERN_EXAMPLE.pattern, null, 2)}\n\\`\\`\\`\n\n**Problems:**\n${DANGEROUS_PATTERN_EXAMPLE.problems.map((p) => `- ${p}`).join('\\n')}\n\n---\n\n## ✅ SAFE PATTERNS\n\n${ALL_SAFE_PATTERNS.map(\n  (pattern) => `\n### ${pattern.name}\n\n${pattern.description}\n\n**Configuration:**\n\\`\\`\\`json\n${JSON.stringify(pattern.pattern, null, 2)}\n\\`\\`\\`\n\n**Benefits:**\n${pattern.benefits.map((b) => `- ${b}`).join('\\n')}\n\n${\n  pattern.usage\n    ? `**Usage:**\n${pattern.usage.map((u, i) => `${i + 1}. ${u}`).join('\\n')}`\n    : ''\n}\n\n${\n  pattern.additionalSetup\n    ? `**Additional Setup:**\n${\n  pattern.additionalSetup.cronJob\n    ? `\n**Cron Job:**\n\\`\\`\\`bash\n${pattern.additionalSetup.cronJob}\n\\`\\`\\`\n`\n    : ''\n}\n\n${\n  pattern.additionalSetup.updateScript\n    ? `\n**Update Script:**\n\\`\\`\\`bash\n${pattern.additionalSetup.updateScript}\n\\`\\`\\`\n`\n    : ''\n}`\n    : ''\n}\n\n${\n  pattern.processor\n    ? `\n**Queue Processor:**\n\\`\\`\\`python\n${pattern.processor}\n\\`\\`\\`\n`\n    : ''\n}\n\n---\n`,\n).join('')}\n\n## 🚀 Quick Migration Guide\n\n### If you currently have this DANGEROUS pattern:\n\\`\\`\\`json\n{\n  \"hooks\": {\n    \"Stop\": [{\"hooks\": [{\"type\": \"command\", \"command\": \"claude -c -p 'Update history'\"}]}]\n  }\n}\n\\`\\`\\`\n\n### Replace with this SAFE pattern:\n\\`\\`\\`json\n{\n  \"hooks\": {\n    \"Stop\": [{\"hooks\": [{\"type\": \"command\", \"command\": \"touch ~/.claude/needs_update && echo 'Run: claude -c -p \\\"Update history\\\"'\"}]}]\n  }\n}\n\\`\\`\\`\n\n## 🛡️ Hook Safety Tools\n\nUse claude-flow's built-in safety tools:\n\n\\`\\`\\`bash\n# Check your configuration for dangerous patterns\nclaude-flow hook-safety validate\n\n# Enable safe mode (skips all hooks)\nclaude-flow hook-safety safe-mode\n\n# Check current safety status\nclaude-flow hook-safety status\n\n# Reset circuit breakers if triggered\nclaude-flow hook-safety reset\n\\`\\`\\`\n\n## 📚 Additional Resources\n\n- Issue #166: https://github.com/ruvnet/claude-flow/issues/166\n- Claude Code Hooks Documentation: https://docs.anthropic.com/en/docs/claude-code/hooks\n- Reddit Discussion: https://www.reddit.com/r/ClaudeAI/comments/1ltvi6x/anyone_else_accidentally_create_an_infinite_loop/\n\n---\n\n**Remember**: When in doubt, use flag-based patterns or PostToolUse hooks instead of Stop hooks!\n`;\n}\n\nexport default {\n  DANGEROUS_PATTERN_EXAMPLE,\n  ALL_SAFE_PATTERNS,\n  generateSafeHooksGuide,\n};\n"],"names":["DANGEROUS_PATTERN_EXAMPLE","name","description","pattern","hooks","Stop","matcher","type","command","problems","SAFE_FLAG_PATTERN","benefits","usage","SAFE_POST_TOOL_PATTERN","PostToolUse","SAFE_CONDITIONAL_PATTERN","SAFE_BATCH_PATTERN","additionalSetup","cronJob","updateScript","SAFE_QUEUE_PATTERN","processor","ALL_SAFE_PATTERNS","generateSafeHooksGuide","JSON","stringify","map","p","join","b","u","i"],"mappings":"AAWA,OAAO,MAAMA,4BAA4B;IACvCC,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLC,MAAM;gBACJ;oBACEC,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SAAS;wBACX;qBACD;gBACH;aACD;QACH;IACF;IACAC,UAAU;QACR;QACA;QACA;QACA;KACD;AACH,EAAE;AAMF,OAAO,MAAMC,oBAAoB;IAC/BT,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLC,MAAM;gBACJ;oBACEC,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SACE;wBACJ;qBACD;gBACH;aACD;QACH;IACF;IACAG,UAAU;QACR;QACA;QACA;QACA;KACD;IACDC,OAAO;QACL;QACA;QACA;QACA;KACD;AACH,EAAE;AAMF,OAAO,MAAMC,yBAAyB;IACpCZ,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLU,aAAa;gBACX;oBACER,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SAAS;wBACX;qBACD;gBACH;aACD;QACH;IACF;IACAG,UAAU;QACR;QACA;QACA;QACA;KACD;IACDC,OAAO;QACL;QACA;QACA;QACA;KACD;AACH,EAAE;AAMF,OAAO,MAAMG,2BAA2B;IACtCd,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLC,MAAM;gBACJ;oBACEC,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SACE;wBACJ;qBACD;gBACH;aACD;QACH;IACF;IACAG,UAAU;QACR;QACA;QACA;QACA;KACD;IACDC,OAAO;QACL;QACA;QACA;QACA;KACD;AACH,EAAE;AAMF,OAAO,MAAMI,qBAAqB;IAChCf,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLC,MAAM;gBACJ;oBACEC,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SAAS;wBACX;qBACD;gBACH;aACD;QACH;IACF;IACAS,iBAAiB;QACfC,SAAS;QACTC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;eAwBJ,CAAC;IACd;IACAR,UAAU;QACR;QACA;QACA;QACA;KACD;AACH,EAAE;AAMF,OAAO,MAAMS,qBAAqB;IAChCnB,MAAM;IACNC,aAAa;IACbC,SAAS;QACPC,OAAO;YACLC,MAAM;gBACJ;oBACEC,SAAS;oBACTF,OAAO;wBACL;4BACEG,MAAM;4BACNC,SACE;wBACJ;qBACD;gBACH;aACD;QACH;IACF;IACAa,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAyCG,CAAC;IAChBV,UAAU;QACR;QACA;QACA;QACA;KACD;AACH,EAAE;AAKF,OAAO,MAAMW,oBAAoB;IAC/BZ;IACAG;IACAE;IACAC;IACAI;CACD,CAAC;AAKF,OAAO,SAASG;IACd,OAAO,CAAC;;;;;;AAMV,EAAEvB,0BAA0BE,WAAW,CAAC;;;AAGxC,EAAEsB,KAAKC,SAAS,CAACzB,0BAA0BG,OAAO,EAAE,MAAM,GAAG;;;;AAI7D,EAAEH,0BAA0BS,QAAQ,CAACiB,GAAG,CAAC,CAACC,IAAM,CAAC,EAAE,EAAEA,GAAG,EAAEC,IAAI,CAAC,MAAM;;;;;;AAMrE,EAAEN,kBAAkBI,GAAG,CACrB,CAACvB,UAAY,CAAC;IACZ,EAAEA,QAAQF,IAAI,CAAC;;AAEnB,EAAEE,QAAQD,WAAW,CAAC;;;;AAItB,EAAEsB,KAAKC,SAAS,CAACtB,QAAQA,OAAO,EAAE,MAAM,GAAG;;;;AAI3C,EAAEA,QAAQQ,QAAQ,CAACe,GAAG,CAAC,CAACG,IAAM,CAAC,EAAE,EAAEA,GAAG,EAAED,IAAI,CAAC,MAAM;;AAEnD,EACEzB,QAAQS,KAAK,GACT,CAAC;AACP,EAAET,QAAQS,KAAK,CAACc,GAAG,CAAC,CAACI,GAAGC,IAAM,GAAGA,IAAI,EAAE,EAAE,EAAED,GAAG,EAAEF,IAAI,CAAC,OAAO,GACtD,GACL;;AAED,EACEzB,QAAQc,eAAe,GACnB,CAAC;AACP,EACEd,QAAQc,eAAe,CAACC,OAAO,GAC3B,CAAC;;;AAGP,EAAEf,QAAQc,eAAe,CAACC,OAAO,CAAC;;AAElC,CAAC,GACK,GACL;;AAED,EACEf,QAAQc,eAAe,CAACE,YAAY,GAChC,CAAC;;;AAGP,EAAEhB,QAAQc,eAAe,CAACE,YAAY,CAAC;;AAEvC,CAAC,GACK,IACJ,GACI,GACL;;AAED,EACEhB,QAAQkB,SAAS,GACb,CAAC;;;AAGP,EAAElB,QAAQkB,SAAS,CAAC;;AAEpB,CAAC,GACK,GACL;;;AAGD,CAAC,EACCO,IAAI,CAAC,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDX,CAAC;AACD;AAEA,eAAe;IACb5B;IACAsB;IACAC;AACF,EAAE"}