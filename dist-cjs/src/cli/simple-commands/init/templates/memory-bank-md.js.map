{"version":3,"sources":["../../../../../../src/cli/simple-commands/init/templates/memory-bank-md.js"],"sourcesContent":["// memory-bank-md.js - Memory Bank templates\n\nexport function createMinimalMemoryBankMd() {\n  return `# Memory Bank\n\n## Quick Reference\n- Project uses SQLite for memory persistence\n- Memory is organized by namespaces\n- Query with \\`npx claude-flow memory query <search>\\`\n\n## Storage Location\n- Database: \\`./memory/claude-flow-data.json\\`\n- Sessions: \\`./memory/sessions/\\`\n`;\n}\n\nexport function createFullMemoryBankMd() {\n  return `# Memory Bank Configuration\n\n## Overview\nThe Claude-Flow memory system provides persistent storage and intelligent retrieval of information across agent sessions. It uses a hybrid approach combining SQL databases with semantic search capabilities.\n\n## Storage Backends\n- **Primary**: JSON database (\\`./memory/claude-flow-data.json\\`)\n- **Sessions**: File-based storage in \\`./memory/sessions/\\`\n- **Cache**: In-memory cache for frequently accessed data\n\n## Memory Organization\n- **Namespaces**: Logical groupings of related information\n- **Sessions**: Time-bound conversation contexts\n- **Indexing**: Automatic content indexing for fast retrieval\n- **Replication**: Optional distributed storage support\n\n## Commands\n- \\`npx claude-flow memory query <search>\\`: Search stored information\n- \\`npx claude-flow memory stats\\`: Show memory usage statistics\n- \\`npx claude-flow memory export <file>\\`: Export memory to file\n- \\`npx claude-flow memory import <file>\\`: Import memory from file\n\n## Configuration\nMemory settings are configured in \\`claude-flow.config.json\\`:\n\\`\\`\\`json\n{\n  \"memory\": {\n    \"backend\": \"json\",\n    \"path\": \"./memory/claude-flow-data.json\",\n    \"cacheSize\": 1000,\n    \"indexing\": true,\n    \"namespaces\": [\"default\", \"agents\", \"tasks\", \"sessions\"],\n    \"retentionPolicy\": {\n      \"sessions\": \"30d\",\n      \"tasks\": \"90d\",\n      \"agents\": \"permanent\"\n    }\n  }\n}\n\\`\\`\\`\n\n## Best Practices\n- Use descriptive namespaces for different data types\n- Regular memory exports for backup purposes\n- Monitor memory usage with stats command\n- Clean up old sessions periodically\n\n## Memory Types\n- **Episodic**: Conversation and interaction history\n- **Semantic**: Factual knowledge and relationships\n- **Procedural**: Task patterns and workflows\n- **Meta**: System configuration and preferences\n\n## Integration Notes\n- Memory is automatically synchronized across agents\n- Search supports both exact match and semantic similarity\n- Memory contents are private to your local instance\n- No data is sent to external services without explicit commands\n`;\n}\n\n// Create optimized Memory Bank with batchtools support\nexport async function createOptimizedMemoryBankMd() {\n  return `# Memory Bank Configuration (Batchtools Optimized)\n\n## Overview\nThe Claude-Flow memory system provides persistent storage and intelligent retrieval of information across agent sessions. It uses a hybrid approach combining SQL databases with semantic search capabilities.\n\n**ðŸš€ Batchtools Enhancement**: This configuration includes parallel processing capabilities for memory operations, batch storage, and concurrent retrieval optimizations.\n\n## Storage Backends (Enhanced)\n- **Primary**: JSON database (\\`./memory/claude-flow-data.json\\`) with parallel access\n- **Sessions**: File-based storage in \\`./memory/sessions/\\` with concurrent operations\n- **Cache**: In-memory cache with batch updates for frequently accessed data\n- **Index**: Parallel indexing system for faster search and retrieval\n- **Backup**: Concurrent backup system with automatic versioning\n\n## Batchtools Memory Features\n\n### Parallel Operations\n- **Concurrent Storage**: Store multiple entries simultaneously\n- **Batch Retrieval**: Query multiple namespaces in parallel\n- **Parallel Indexing**: Build and update indexes concurrently\n- **Concurrent Backups**: Export/import operations with parallel processing\n\n### Performance Optimizations\n- **Smart Batching**: Group related memory operations for efficiency\n- **Pipeline Processing**: Chain memory operations with parallel stages\n- **Resource Management**: Efficient memory usage with parallel access patterns\n- **Concurrent Validation**: Validate data integrity across multiple operations\n\n## Commands (Batchtools Enhanced)\n\n### Standard Commands\n- \\`npx claude-flow memory query <search>\\`: Search stored information\n- \\`npx claude-flow memory stats\\`: Show memory usage statistics\n- \\`npx claude-flow memory export <file>\\`: Export memory to file\n- \\`npx claude-flow memory import <file>\\`: Import memory from file\n\n### Batchtools Commands\n- \\`npx claude-flow memory batch-store <entries-file>\\`: Store multiple entries in parallel\n- \\`npx claude-flow memory parallel-query <queries-file>\\`: Execute multiple queries concurrently\n- \\`npx claude-flow memory concurrent-export <namespaces>\\`: Export multiple namespaces simultaneously\n- \\`npx claude-flow memory batch-cleanup <retention-config>\\`: Clean up multiple namespaces in parallel\n\n## Configuration (Enhanced)\nMemory settings are configured in \\`claude-flow.config.json\\` with batchtools optimizations:\n\\`\\`\\`json\n{\n  \"memory\": {\n    \"backend\": \"json\",\n    \"path\": \"./memory/claude-flow-data.json\",\n    \"cacheSize\": 5000,\n    \"indexing\": true,\n    \"batchtools\": {\n      \"enabled\": true,\n      \"maxConcurrent\": 10,\n      \"batchSize\": 100,\n      \"parallelIndexing\": true,\n      \"concurrentBackups\": true\n    },\n    \"namespaces\": [\"default\", \"agents\", \"tasks\", \"sessions\", \"sparc\", \"batchtools\"],\n    \"retentionPolicy\": {\n      \"sessions\": \"30d\",\n      \"tasks\": \"90d\",\n      \"agents\": \"permanent\",\n      \"sparc\": \"180d\",\n      \"batchtools\": \"60d\"\n    },\n    \"performance\": {\n      \"enableParallelAccess\": true,\n      \"concurrentQueries\": 20,\n      \"batchWriteSize\": 50,\n      \"parallelIndexUpdate\": true\n    }\n  }\n}\n\\`\\`\\`\n\n## Batchtools Integration\n\n### Parallel Storage Patterns\n\\`\\`\\`bash\n# Store SPARC workflow data in parallel\nnpx claude-flow memory batch-store sparc-data.json --namespace sparc --parallel\n\n# Concurrent query across multiple namespaces\nnpx claude-flow memory parallel-query \"authentication design\" --namespaces arch,impl,test\n\n# Batch export with parallel compression\nnpx claude-flow memory concurrent-export project-backup --compress --parallel\n\\`\\`\\`\n\n### Performance Monitoring\n\\`\\`\\`bash\n# Monitor concurrent operations\nnpx claude-flow memory stats --concurrent --verbose\n\n# Analyze batch operation performance\nnpx claude-flow memory performance-report --batchtools\n\n# Check parallel indexing status\nnpx claude-flow memory index-status --parallel\n\\`\\`\\`\n\n## Memory Organization (Enhanced)\n\n### Namespace Structure\n- **default**: General storage with parallel access\n- **agents**: Agent data with concurrent updates\n- **tasks**: Task information with batch processing\n- **sessions**: Session contexts with parallel indexing\n- **sparc**: SPARC methodology data with concurrent operations\n- **batchtools**: Performance metrics and optimization data\n\n### Memory Types (Optimized)\n- **Episodic**: Conversation history with parallel retrieval\n- **Semantic**: Knowledge base with concurrent search\n- **Procedural**: Workflow patterns with batch analysis\n- **Meta**: System configuration with parallel validation\n- **Performance**: Batchtools metrics and optimization data\n\n## Best Practices (Batchtools Enhanced)\n\n### Performance Optimization\n- Use batch operations for multiple related memory operations\n- Enable parallel processing for independent operations\n- Monitor concurrent operation limits to avoid resource exhaustion\n- Implement smart batching for related data storage\n\n### Data Management\n- Use concurrent exports for regular backup schedules\n- Implement parallel cleanup routines for maintenance\n- Enable batch validation for data integrity checks\n- Use parallel indexing for improved search performance\n\n### Resource Management\n- Monitor memory usage with concurrent operations\n- Implement throttling for batch operations under heavy load\n- Use parallel processing judiciously based on system resources\n- Balance concurrent operations with system stability\n\n## Performance Benchmarks\n\n### Batchtools Performance Improvements\n- **Storage Operations**: Up to 400% faster with parallel writes\n- **Query Performance**: 300% improvement with concurrent searches\n- **Export/Import**: 250% faster with parallel processing\n- **Index Updates**: 350% improvement with concurrent indexing\n- **Cleanup Operations**: 200% faster with batch processing\n\n## Integration Notes (Enhanced)\n- Memory is automatically synchronized across agents with parallel updates\n- Search supports both exact match and semantic similarity with concurrent processing\n- Memory contents are private to your local instance with enhanced security\n- No data is sent to external services without explicit commands\n- Batchtools operations are logged for performance analysis and debugging\n- Concurrent operations include automatic retry and error recovery mechanisms\n\n## Troubleshooting Batchtools\n\n### Common Issues\n- **Concurrent Limit Exceeded**: Reduce maxConcurrent setting in configuration\n- **Batch Size Too Large**: Decrease batchSize for memory-constrained systems\n- **Index Lock Conflicts**: Enable parallelIndexing with appropriate locking\n- **Resource Exhaustion**: Monitor system resources during concurrent operations\n\n### Debug Commands\n\\`\\`\\`bash\n# Check concurrent operation status\nnpx claude-flow memory debug --concurrent\n\n# Analyze batch operation performance\nnpx claude-flow memory analyze --batchtools --verbose\n\n# Validate parallel index integrity\nnpx claude-flow memory index-validate --parallel --repair\n\\`\\`\\`\n\nFor more information about memory system optimization, see: https://github.com/ruvnet/claude-code-flow/docs/memory-batchtools.md\n`;\n}\n"],"names":["createMinimalMemoryBankMd","createFullMemoryBankMd","createOptimizedMemoryBankMd"],"mappings":"AAEA,OAAO,SAASA;IACd,OAAO,CAAC;;;;;;;;;;AAUV,CAAC;AACD;AAEA,OAAO,SAASC;IACd,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DV,CAAC;AACD;AAGA,OAAO,eAAeC;IACpB,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLV,CAAC;AACD"}