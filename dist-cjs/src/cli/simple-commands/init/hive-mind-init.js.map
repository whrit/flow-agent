{"version":3,"sources":["../../../../../src/cli/simple-commands/init/hive-mind-init.js"],"sourcesContent":["/**\n * Hive Mind Initialization Module for Claude Flow v2.0.0\n * Provides comprehensive hive-mind system setup for the init process\n */\n\nimport { promises as fs } from 'fs';\nimport { existsSync } from 'fs';\nimport path from 'path';\nimport { printSuccess, printError, printWarning } from '../../utils.js';\n\n/**\n * Default hive-mind configuration\n */\nexport const DEFAULT_HIVE_CONFIG = {\n  version: '2.0.0',\n  initialized: new Date().toISOString(),\n  system: {\n    enabled: true,\n    autoStart: false,\n    maxRetries: 3,\n    healthCheckInterval: 30000,\n  },\n  queen: {\n    type: 'strategic',\n    name: 'Queen-Genesis',\n    capabilities: [\n      'task-decomposition',\n      'consensus-building',\n      'resource-allocation',\n      'quality-assessment',\n      'conflict-resolution'\n    ],\n    decisionThreshold: 0.75,\n    adaptiveLearning: true,\n  },\n  workers: {\n    maxWorkers: 8,\n    defaultCapabilities: [\n      'code-analysis',\n      'implementation',\n      'testing',\n      'documentation'\n    ],\n    autoScale: true,\n    scaleThreshold: 0.8,\n    specializedRoles: [\n      'architect',\n      'researcher',\n      'implementer',\n      'tester',\n      'reviewer'\n    ],\n  },\n  consensus: {\n    algorithm: 'weighted-majority',\n    minimumParticipants: 3,\n    timeoutMs: 30000,\n    requiredConsensus: 0.67,\n    votingMethods: ['majority', 'weighted', 'unanimous', 'quorum'],\n  },\n  memory: {\n    enabled: true,\n    size: 100,\n    persistenceMode: 'database',\n    sharedMemoryNamespace: 'hive-collective',\n    retentionDays: 30,\n    compressionEnabled: true,\n    encryptionEnabled: false,\n  },\n  communication: {\n    protocol: 'secure-messaging',\n    encryption: false,\n    messageQueue: {\n      maxSize: 1000,\n      priorityLevels: 5,\n      batchProcessing: true,\n    },\n    channels: [\n      'task-coordination',\n      'knowledge-sharing',\n      'consensus-voting',\n      'error-reporting',\n      'performance-metrics'\n    ],\n  },\n  integration: {\n    mcpTools: {\n      enabled: true,\n      parallel: true,\n      timeout: 60000,\n      fallbackMode: 'sequential',\n    },\n    claudeCode: {\n      enabled: true,\n      autoSpawn: true,\n      coordination: true,\n      sharedContext: true,\n    },\n    github: {\n      enabled: false,\n      autoCommit: false,\n      branchStrategy: 'feature',\n    },\n  },\n  monitoring: {\n    enabled: true,\n    metricsCollection: true,\n    performanceTracking: true,\n    healthChecks: true,\n    alerting: {\n      enabled: false,\n      thresholds: {\n        errorRate: 0.1,\n        responseTime: 5000,\n        consensusFailures: 3,\n      },\n    },\n  },\n};\n\n/**\n * Database schema for hive-mind system\n */\nexport const HIVE_DB_SCHEMA = {\n  swarms: `\n    CREATE TABLE IF NOT EXISTS swarms (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      objective TEXT,\n      status TEXT DEFAULT 'active',\n      queen_type TEXT DEFAULT 'strategic',\n      topology TEXT DEFAULT 'hierarchical',\n      max_agents INTEGER DEFAULT 8,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      metadata TEXT DEFAULT '{}'\n    );\n  `,\n  agents: `\n    CREATE TABLE IF NOT EXISTS agents (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT,\n      name TEXT NOT NULL,\n      type TEXT NOT NULL,\n      role TEXT,\n      capabilities TEXT DEFAULT '[]',\n      status TEXT DEFAULT 'active',\n      performance_score REAL DEFAULT 0.5,\n      task_count INTEGER DEFAULT 0,\n      success_rate REAL DEFAULT 1.0,\n      last_active DATETIME DEFAULT CURRENT_TIMESTAMP,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      metadata TEXT DEFAULT '{}',\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id)\n    );\n  `,\n  tasks: `\n    CREATE TABLE IF NOT EXISTS tasks (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT,\n      agent_id TEXT,\n      name TEXT NOT NULL,\n      description TEXT,\n      status TEXT DEFAULT 'pending',\n      priority INTEGER DEFAULT 3,\n      complexity REAL DEFAULT 0.5,\n      estimated_time INTEGER,\n      actual_time INTEGER,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      started_at DATETIME,\n      completed_at DATETIME,\n      metadata TEXT DEFAULT '{}',\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id),\n      FOREIGN KEY (agent_id) REFERENCES agents (id)\n    );\n  `,\n  messages: `\n    CREATE TABLE IF NOT EXISTS messages (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT,\n      sender_id TEXT,\n      recipient_id TEXT,\n      channel TEXT DEFAULT 'general',\n      type TEXT DEFAULT 'info',\n      content TEXT NOT NULL,\n      priority INTEGER DEFAULT 3,\n      consensus_vote REAL,\n      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n      processed BOOLEAN DEFAULT 0,\n      metadata TEXT DEFAULT '{}',\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id),\n      FOREIGN KEY (sender_id) REFERENCES agents (id),\n      FOREIGN KEY (recipient_id) REFERENCES agents (id)\n    );\n  `,\n  consensus_votes: `\n    CREATE TABLE IF NOT EXISTS consensus_votes (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT,\n      proposal_id TEXT NOT NULL,\n      agent_id TEXT,\n      vote REAL NOT NULL,\n      weight REAL DEFAULT 1.0,\n      justification TEXT,\n      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id),\n      FOREIGN KEY (agent_id) REFERENCES agents (id)\n    );\n  `,\n  knowledge_base: `\n    CREATE TABLE IF NOT EXISTS knowledge_base (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT,\n      category TEXT DEFAULT 'general',\n      title TEXT NOT NULL,\n      content TEXT NOT NULL,\n      tags TEXT DEFAULT '[]',\n      confidence REAL DEFAULT 0.5,\n      source_agent_id TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      access_count INTEGER DEFAULT 0,\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id),\n      FOREIGN KEY (source_agent_id) REFERENCES agents (id)\n    );\n  `,\n  performance_metrics: `\n    CREATE TABLE IF NOT EXISTS performance_metrics (\n      id TEXT PRIMARY KEY,\n      entity_type TEXT NOT NULL,\n      entity_id TEXT NOT NULL,\n      metric_name TEXT NOT NULL,\n      metric_value REAL NOT NULL,\n      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n      metadata TEXT DEFAULT '{}'\n    );\n  `,\n  sessions: `\n    CREATE TABLE IF NOT EXISTS sessions (\n      id TEXT PRIMARY KEY,\n      swarm_id TEXT NOT NULL,\n      swarm_name TEXT NOT NULL,\n      objective TEXT,\n      status TEXT DEFAULT 'active',\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      paused_at DATETIME,\n      resumed_at DATETIME,\n      completion_percentage REAL DEFAULT 0,\n      checkpoint_data TEXT,\n      metadata TEXT,\n      parent_pid INTEGER,\n      child_pids TEXT,\n      FOREIGN KEY (swarm_id) REFERENCES swarms (id)\n    );\n  `,\n};\n\n/**\n * Create hive-mind directory structure\n */\nexport async function createHiveMindDirectories(workingDir, dryRun = false) {\n  const directories = [\n    '.hive-mind',\n    '.hive-mind/sessions',\n    '.hive-mind/memory',\n    '.hive-mind/logs',\n    '.hive-mind/backups',\n    '.hive-mind/config',\n    '.hive-mind/templates',\n    '.hive-mind/exports',\n  ];\n\n  console.log('  üìÅ Creating hive-mind directory structure...');\n\n  for (const dir of directories) {\n    const fullPath = path.join(workingDir, dir);\n    if (!dryRun) {\n      await fs.mkdir(fullPath, { recursive: true });\n    } else {\n      console.log(`    [DRY RUN] Would create: ${dir}`);\n    }\n  }\n\n  if (!dryRun) {\n    console.log('  ‚úÖ Hive-mind directories created');\n  }\n}\n\n/**\n * Initialize collective memory database\n */\nexport async function initializeCollectiveMemoryDatabase(workingDir, dryRun = false) {\n  console.log('  üß† Initializing collective memory database...');\n\n  if (dryRun) {\n    console.log('    [DRY RUN] Would initialize hive.db with full schema');\n    console.log('    [DRY RUN] Would create indexes for performance optimization');\n    console.log('    [DRY RUN] Would insert default data and configurations');\n    return;\n  }\n\n  try {\n    // Dynamic import for better-sqlite3 with proper error handling\n    let Database;\n    try {\n      Database = (await import('better-sqlite3')).default;\n    } catch (err) {\n      console.log('    ‚ö†Ô∏è  better-sqlite3 not available, using fallback memory database');\n      return await createFallbackMemoryDatabase(workingDir);\n    }\n\n    const hivePath = path.join(workingDir, '.hive-mind', 'hive.db');\n    const hiveDb = new Database(hivePath);\n    \n    // Enable WAL mode for better concurrency\n    hiveDb.pragma('journal_mode = WAL');\n    hiveDb.pragma('synchronous = NORMAL');\n    hiveDb.pragma('cache_size = 1000');\n    hiveDb.pragma('temp_store = MEMORY');\n\n    // Create all tables\n    console.log('    üìã Creating database schema...');\n    for (const [tableName, schema] of Object.entries(HIVE_DB_SCHEMA)) {\n      hiveDb.exec(schema);\n    }\n\n    // Create indexes for performance\n    console.log('    üîç Creating performance indexes...');\n    const indexes = [\n      'CREATE INDEX IF NOT EXISTS idx_agents_swarm_id ON agents(swarm_id);',\n      'CREATE INDEX IF NOT EXISTS idx_agents_status ON agents(status);',\n      'CREATE INDEX IF NOT EXISTS idx_tasks_swarm_id ON tasks(swarm_id);',\n      'CREATE INDEX IF NOT EXISTS idx_tasks_agent_id ON tasks(agent_id);',\n      'CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);',\n      'CREATE INDEX IF NOT EXISTS idx_messages_swarm_id ON messages(swarm_id);',\n      'CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp);',\n      'CREATE INDEX IF NOT EXISTS idx_consensus_votes_swarm_id ON consensus_votes(swarm_id);',\n      'CREATE INDEX IF NOT EXISTS idx_knowledge_base_swarm_id ON knowledge_base(swarm_id);',\n      'CREATE INDEX IF NOT EXISTS idx_knowledge_base_category ON knowledge_base(category);',\n      'CREATE INDEX IF NOT EXISTS idx_performance_metrics_entity ON performance_metrics(entity_type, entity_id);',\n      'CREATE INDEX IF NOT EXISTS idx_sessions_swarm_id ON sessions(swarm_id);',\n    ];\n\n    for (const index of indexes) {\n      hiveDb.exec(index);\n    }\n\n    // Insert initial metadata\n    const insertInitialData = hiveDb.prepare(`\n      INSERT OR IGNORE INTO knowledge_base (id, category, title, content, confidence)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n\n    const initialKnowledge = [\n      ['init-1', 'system', 'Hive Mind System Initialization', 'Hive mind system successfully initialized with full database schema and configuration.', 1.0],\n      ['init-2', 'capabilities', 'Default Agent Capabilities', JSON.stringify(DEFAULT_HIVE_CONFIG.workers.defaultCapabilities), 0.9],\n      ['init-3', 'consensus', 'Consensus Algorithms', JSON.stringify(DEFAULT_HIVE_CONFIG.consensus), 1.0],\n      ['init-4', 'queen', 'Queen Configuration', JSON.stringify(DEFAULT_HIVE_CONFIG.queen), 1.0],\n    ];\n\n    for (const knowledge of initialKnowledge) {\n      insertInitialData.run(...knowledge);\n    }\n\n    hiveDb.close();\n    console.log('  ‚úÖ Collective memory database initialized with full schema');\n\n  } catch (err) {\n    console.log(`    ‚ö†Ô∏è  Could not initialize hive database: ${err.message}`);\n    return await createFallbackMemoryDatabase(workingDir);\n  }\n}\n\n/**\n * Create fallback memory database when SQLite is not available\n */\nasync function createFallbackMemoryDatabase(workingDir) {\n  console.log('    üìÑ Creating fallback JSON memory database...');\n  \n  const fallbackDb = {\n    metadata: {\n      type: 'fallback',\n      initialized: new Date().toISOString(),\n      warning: 'Using JSON fallback - install better-sqlite3 for full database features'\n    },\n    swarms: [],\n    agents: [],\n    tasks: [],\n    messages: [],\n    consensus_votes: [],\n    knowledge_base: [\n      {\n        id: 'init-1',\n        category: 'system',\n        title: 'Fallback Memory System',\n        content: 'Using JSON-based fallback memory system. Install better-sqlite3 for full database features.',\n        confidence: 1.0,\n        created_at: new Date().toISOString()\n      }\n    ],\n    performance_metrics: [],\n    sessions: []\n  };\n\n  const fallbackPath = path.join(workingDir, '.hive-mind', 'memory.json');\n  await fs.writeFile(fallbackPath, JSON.stringify(fallbackDb, null, 2), 'utf8');\n  \n  console.log('  ‚úÖ Fallback memory database created');\n  return true;\n}\n\n/**\n * Create default queen and worker configurations\n */\nexport async function createDefaultConfigurations(workingDir, dryRun = false) {\n  console.log('  üëë Creating default queen and worker configurations...');\n\n  if (dryRun) {\n    console.log('    [DRY RUN] Would create queen configurations');\n    console.log('    [DRY RUN] Would create worker configurations');\n    console.log('    [DRY RUN] Would create role templates');\n    return;\n  }\n\n  const configDir = path.join(workingDir, '.hive-mind', 'config');\n\n  // Queen configurations\n  const queenConfigs = {\n    strategic: {\n      name: 'Strategic Queen',\n      description: 'Focuses on long-term planning and high-level coordination',\n      capabilities: [\n        'strategic-planning',\n        'resource-optimization',\n        'risk-assessment',\n        'quality-oversight',\n        'team-coordination'\n      ],\n      decisionStyle: 'analytical',\n      planningHorizon: 'long-term',\n      adaptability: 0.7,\n      specialties: ['architecture', 'planning', 'coordination']\n    },\n    tactical: {\n      name: 'Tactical Queen',\n      description: 'Focuses on execution efficiency and immediate problem-solving',\n      capabilities: [\n        'task-optimization',\n        'rapid-response',\n        'resource-allocation',\n        'performance-monitoring',\n        'conflict-resolution'\n      ],\n      decisionStyle: 'pragmatic',\n      planningHorizon: 'short-term',\n      adaptability: 0.9,\n      specialties: ['execution', 'optimization', 'troubleshooting']\n    },\n    adaptive: {\n      name: 'Adaptive Queen',\n      description: 'Dynamically adjusts approach based on context and feedback',\n      capabilities: [\n        'pattern-recognition',\n        'adaptive-learning',\n        'context-switching',\n        'feedback-integration',\n        'dynamic-planning'\n      ],\n      decisionStyle: 'flexible',\n      planningHorizon: 'adaptive',\n      adaptability: 1.0,\n      specialties: ['learning', 'adaptation', 'context-awareness']\n    }\n  };\n\n  // Worker role templates\n  const workerTemplates = {\n    architect: {\n      name: 'System Architect',\n      description: 'Designs system architecture and technical specifications',\n      capabilities: [\n        'system-design',\n        'architecture-patterns',\n        'scalability-planning',\n        'technology-selection',\n        'documentation'\n      ],\n      complexity: 0.9,\n      autonomy: 0.8,\n      collaboration: 0.7\n    },\n    researcher: {\n      name: 'Research Specialist',\n      description: 'Conducts research and gathers information for informed decisions',\n      capabilities: [\n        'information-gathering',\n        'analysis',\n        'trend-identification',\n        'competitive-research',\n        'reporting'\n      ],\n      complexity: 0.7,\n      autonomy: 0.9,\n      collaboration: 0.6\n    },\n    implementer: {\n      name: 'Implementation Specialist',\n      description: 'Translates designs into working code and solutions',\n      capabilities: [\n        'coding',\n        'debugging',\n        'integration',\n        'optimization',\n        'deployment'\n      ],\n      complexity: 0.8,\n      autonomy: 0.7,\n      collaboration: 0.8\n    },\n    tester: {\n      name: 'Quality Assurance Specialist',\n      description: 'Ensures quality through testing and validation',\n      capabilities: [\n        'testing',\n        'validation',\n        'quality-assurance',\n        'automation',\n        'reporting'\n      ],\n      complexity: 0.6,\n      autonomy: 0.8,\n      collaboration: 0.7\n    },\n    reviewer: {\n      name: 'Code Review Specialist',\n      description: 'Reviews code quality and provides improvement suggestions',\n      capabilities: [\n        'code-review',\n        'quality-assessment',\n        'best-practices',\n        'mentoring',\n        'documentation-review'\n      ],\n      complexity: 0.8,\n      autonomy: 0.8,\n      collaboration: 0.9\n    }\n  };\n\n  // Save configurations\n  await fs.writeFile(\n    path.join(configDir, 'queens.json'),\n    JSON.stringify(queenConfigs, null, 2),\n    'utf8'\n  );\n\n  await fs.writeFile(\n    path.join(configDir, 'workers.json'),\n    JSON.stringify(workerTemplates, null, 2),\n    'utf8'\n  );\n\n  console.log('  ‚úÖ Default configurations created');\n}\n\n/**\n * Create hive-mind config file with sensible defaults\n */\nexport async function createHiveMindConfig(workingDir, customConfig = {}, dryRun = false) {\n  console.log('  ‚öôÔ∏è Creating hive-mind configuration file...');\n\n  if (dryRun) {\n    console.log('    [DRY RUN] Would create config.json with merged settings');\n    return;\n  }\n\n  // Merge custom config with defaults\n  const config = mergeDeep(DEFAULT_HIVE_CONFIG, customConfig);\n  \n  const configPath = path.join(workingDir, '.hive-mind', 'config.json');\n  await fs.writeFile(configPath, JSON.stringify(config, null, 2), 'utf8');\n  \n  console.log('  ‚úÖ Hive-mind configuration created');\n  return config;\n}\n\n/**\n * Create initial README and documentation files\n */\nexport async function createHiveMindDocumentation(workingDir, dryRun = false) {\n  console.log('  üìö Creating hive-mind documentation...');\n\n  if (dryRun) {\n    console.log('    [DRY RUN] Would create README.md and documentation files');\n    return;\n  }\n\n  const readmeContent = `# Hive Mind System\n\nThis directory contains the Claude Flow Hive Mind system configuration and data.\n\n## Directory Structure\n\n- **config/**: Configuration files for queens, workers, and system settings\n- **sessions/**: Active and historical session data\n- **memory/**: Collective memory and knowledge base\n- **logs/**: System and debug logs\n- **backups/**: Automated backups of system state\n- **templates/**: Templates for agents and workflows\n- **exports/**: Exported data and reports\n\n## Database Files\n\n- **hive.db**: Main SQLite database (or memory.json as fallback)\n- **config.json**: Primary system configuration\n\n## Getting Started\n\n1. Initialize: \\`npx claude-flow@alpha hive-mind init\\`\n2. Spawn swarm: \\`npx claude-flow@alpha hive-mind spawn \"your objective\"\\`\n3. Check status: \\`npx claude-flow@alpha hive-mind status\\`\n\n## Features\n\n- **Collective Intelligence**: Multiple AI agents working together\n- **Consensus Building**: Democratic decision-making process\n- **Adaptive Learning**: System improves over time\n- **Fault Tolerance**: Self-healing and recovery capabilities\n- **Performance Monitoring**: Real-time metrics and optimization\n\n## Configuration\n\nEdit \\`.hive-mind/config.json\\` to customize:\n- Queen type and capabilities\n- Worker specializations\n- Consensus algorithms\n- Memory settings\n- Integration options\n\nFor more information, see the [Hive Mind Documentation](https://github.com/ruvnet/claude-flow/docs/hive-mind.md).\n`;\n\n  await fs.writeFile(\n    path.join(workingDir, '.hive-mind', 'README.md'),\n    readmeContent,\n    'utf8'\n  );\n\n  console.log('  ‚úÖ Hive-mind documentation created');\n}\n\n/**\n * Complete hive-mind initialization\n */\nexport async function initializeHiveMind(workingDir, options = {}, dryRun = false) {\n  console.log('üß† Initializing Hive Mind System...');\n\n  try {\n    // Create directory structure\n    await createHiveMindDirectories(workingDir, dryRun);\n\n    // Initialize collective memory database\n    await initializeCollectiveMemoryDatabase(workingDir, dryRun);\n\n    // Create default configurations\n    await createDefaultConfigurations(workingDir, dryRun);\n\n    // Create main config file\n    await createHiveMindConfig(workingDir, options.config || {}, dryRun);\n\n    // Create documentation\n    await createHiveMindDocumentation(workingDir, dryRun);\n\n    if (!dryRun) {\n      printSuccess('üß† Hive Mind System initialized successfully');\n    } else {\n      console.log('[DRY RUN] Hive Mind System would be fully initialized');\n    }\n\n    return {\n      success: true,\n      features: [\n        'Collective memory database',\n        'Queen and worker configurations',\n        'Consensus mechanisms',\n        'Performance monitoring',\n        'Session management',\n        'Knowledge base'\n      ]\n    };\n\n  } catch (error) {\n    printError(`Failed to initialize Hive Mind System: ${error.message}`);\n    return {\n      success: false,\n      error: error.message,\n      rollbackRequired: true\n    };\n  }\n}\n\n/**\n * Get hive-mind initialization status for init summary\n */\nexport function getHiveMindStatus(workingDir) {\n  const configPath = path.join(workingDir, '.hive-mind', 'config.json');\n  const dbPath = path.join(workingDir, '.hive-mind', 'hive.db');\n  const fallbackPath = path.join(workingDir, '.hive-mind', 'memory.json');\n\n  const status = {\n    configured: existsSync(configPath),\n    database: existsSync(dbPath) ? 'sqlite' : existsSync(fallbackPath) ? 'fallback' : 'none',\n    directories: existsSync(path.join(workingDir, '.hive-mind')),\n  };\n\n  return status;\n}\n\n/**\n * Rollback hive-mind initialization (cleanup on failure)\n */\nexport async function rollbackHiveMindInit(workingDir) {\n  console.log('üîÑ Rolling back hive-mind initialization...');\n  \n  try {\n    const hiveMindDir = path.join(workingDir, '.hive-mind');\n    if (existsSync(hiveMindDir)) {\n      await fs.rmdir(hiveMindDir, { recursive: true });\n      console.log('  ‚úÖ Hive-mind directory removed');\n    }\n    return { success: true };\n  } catch (error) {\n    printError(`Failed to rollback hive-mind initialization: ${error.message}`);\n    return { success: false, error: error.message };\n  }\n}\n\n/**\n * Deep merge utility for configuration objects\n */\nfunction mergeDeep(target, source) {\n  const output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target))\n          Object.assign(output, { [key]: source[key] });\n        else\n          output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\n\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}"],"names":["promises","fs","existsSync","path","printSuccess","printError","DEFAULT_HIVE_CONFIG","version","initialized","Date","toISOString","system","enabled","autoStart","maxRetries","healthCheckInterval","queen","type","name","capabilities","decisionThreshold","adaptiveLearning","workers","maxWorkers","defaultCapabilities","autoScale","scaleThreshold","specializedRoles","consensus","algorithm","minimumParticipants","timeoutMs","requiredConsensus","votingMethods","memory","size","persistenceMode","sharedMemoryNamespace","retentionDays","compressionEnabled","encryptionEnabled","communication","protocol","encryption","messageQueue","maxSize","priorityLevels","batchProcessing","channels","integration","mcpTools","parallel","timeout","fallbackMode","claudeCode","autoSpawn","coordination","sharedContext","github","autoCommit","branchStrategy","monitoring","metricsCollection","performanceTracking","healthChecks","alerting","thresholds","errorRate","responseTime","consensusFailures","HIVE_DB_SCHEMA","swarms","agents","tasks","messages","consensus_votes","knowledge_base","performance_metrics","sessions","createHiveMindDirectories","workingDir","dryRun","directories","console","log","dir","fullPath","join","mkdir","recursive","initializeCollectiveMemoryDatabase","Database","default","err","createFallbackMemoryDatabase","hivePath","hiveDb","pragma","tableName","schema","Object","entries","exec","indexes","index","insertInitialData","prepare","initialKnowledge","JSON","stringify","knowledge","run","close","message","fallbackDb","metadata","warning","id","category","title","content","confidence","created_at","fallbackPath","writeFile","createDefaultConfigurations","configDir","queenConfigs","strategic","description","decisionStyle","planningHorizon","adaptability","specialties","tactical","adaptive","workerTemplates","architect","complexity","autonomy","collaboration","researcher","implementer","tester","reviewer","createHiveMindConfig","customConfig","config","mergeDeep","configPath","createHiveMindDocumentation","readmeContent","initializeHiveMind","options","success","features","error","rollbackRequired","getHiveMindStatus","dbPath","status","configured","database","rollbackHiveMindInit","hiveMindDir","rmdir","target","source","output","assign","isObject","keys","forEach","key","item","Array","isArray"],"mappings":"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"}