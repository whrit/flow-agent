{"version":3,"sources":["../../../../src/cli/simple-commands/hive-mind-wizard.js"],"sourcesContent":["const chalk = require('chalk');\nconst path = require('path');\nconst fs = require('fs');\nconst Database = require('better-sqlite3');\n\n// Interactive Wizard Implementation\nasync function runInteractiveWizard() {\n  console.log(chalk.blue.bold('🐝 Welcome to the Hive Mind Setup Wizard!'));\n  console.log(chalk.gray('This wizard will help you create your first intelligent AI swarm.\\n'));\n\n  try {\n    // Check if system is initialized\n    const configPath = path.join(process.cwd(), '.hive-mind', 'config.json');\n    let config = { initialized: false };\n\n    if (fs.existsSync(configPath)) {\n      config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n    }\n\n    if (!config.initialized) {\n      console.log(chalk.yellow('📋 Step 1: Initializing Hive Mind System...'));\n      await initializeHiveMind();\n      console.log(chalk.green('✅ Hive Mind system initialized!\\n'));\n    } else {\n      console.log(chalk.green('✅ Hive Mind system already initialized!\\n'));\n    }\n\n    // Guided objective input\n    console.log(chalk.blue('📋 Step 2: Define Your Objective'));\n    console.log(chalk.gray('What would you like your Hive Mind swarm to accomplish?'));\n    console.log(chalk.gray('Examples:'));\n    console.log(chalk.gray('  • \"Build a REST API for user management\"'));\n    console.log(chalk.gray('  • \"Research and analyze market trends\"'));\n    console.log(chalk.gray('  • \"Optimize database performance\"'));\n    console.log(chalk.gray('  • \"Create comprehensive test suite\"\\n'));\n\n    const objective = 'Build a modern web application'; // Placeholder for demo\n    console.log(chalk.cyan(`💡 Using example objective: \"${objective}\"`));\n    console.log(chalk.gray('(In full wizard, this would be interactive input)\\n'));\n\n    // Configuration selection\n    console.log(chalk.blue('📋 Step 3: Choose Configuration'));\n    console.log(chalk.gray('Based on your objective, here are recommended settings:\\n'));\n\n    const swarmConfig = {\n      topology: 'hierarchical',\n      coordination: 'queen',\n      agents: 5,\n      complexity: 'medium',\n    };\n\n    console.log(chalk.cyan('📊 Recommended Configuration:'));\n    console.log(chalk.gray(`  • Topology: ${swarmConfig.topology} (best for structured tasks)`));\n    console.log(\n      chalk.gray(`  • Coordination: ${swarmConfig.coordination} (fastest decision making)`),\n    );\n    console.log(\n      chalk.gray(`  • Agent Count: ${swarmConfig.agents} (optimal for medium complexity)`),\n    );\n    console.log(chalk.gray(`  • Complexity: ${swarmConfig.complexity}\\n`));\n\n    // Create the swarm\n    console.log(chalk.blue('📋 Step 4: Creating Your Swarm...'));\n    console.log(chalk.gray('🔄 Spawning intelligent agents...'));\n\n    const result = await createSwarm(objective, swarmConfig);\n\n    if (result.success) {\n      console.log(chalk.green('🎉 Swarm created successfully!\\n'));\n\n      console.log(chalk.blue.bold('🐝 Your Hive Mind is Ready!'));\n      console.log(chalk.gray('Your intelligent swarm has been created and is ready to work.\\n'));\n\n      console.log(chalk.cyan('📱 Next Steps:'));\n      console.log(chalk.gray('  • View status: claude-flow hive-mind status'));\n      console.log(chalk.gray('  • Monitor progress: claude-flow hive-mind metrics'));\n      console.log(chalk.gray('  • Create another swarm: claude-flow hive-mind wizard'));\n      console.log(chalk.gray('  • Learn more: claude-flow help hive-mind\\n'));\n\n      console.log(chalk.green.bold('🚀 Happy swarming!'));\n    } else {\n      console.log(chalk.red('❌ Failed to create swarm. Please try again.'));\n    }\n  } catch (error) {\n    console.log(chalk.red(`❌ Wizard error: ${error.message}`));\n    console.log(chalk.gray('You can try manual setup with: claude-flow hive-mind init'));\n  }\n}\n\n// Initialize Hive Mind system\nasync function initializeHiveMind() {\n  const hiveMindDir = path.join(process.cwd(), '.hive-mind');\n\n  // Create directory if it doesn't exist\n  if (!fs.existsSync(hiveMindDir)) {\n    fs.mkdirSync(hiveMindDir, { recursive: true });\n  }\n\n  // Create configuration file\n  const config = {\n    version: '2.0.0',\n    initialized: new Date().toISOString(),\n    defaults: {\n      queenType: 'strategic',\n      maxWorkers: 8,\n      consensusAlgorithm: 'majority',\n      memorySize: 100,\n      autoScale: true,\n      encryption: false,\n    },\n    mcpTools: {\n      enabled: true,\n      parallel: true,\n      timeout: 60000,\n    },\n  };\n\n  const configPath = path.join(hiveMindDir, 'config.json');\n  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n  // Initialize SQLite database\n  const dbPath = path.join(hiveMindDir, 'hive.db');\n  const db = new sqlite3.Database(dbPath);\n\n  await new Promise((resolve, reject) => {\n    db.serialize(() => {\n      // Create tables\n      db.run(`\n                CREATE TABLE IF NOT EXISTS swarms (\n                    id TEXT PRIMARY KEY,\n                    name TEXT NOT NULL,\n                    objective TEXT,\n                    status TEXT DEFAULT 'active',\n                    queen_type TEXT DEFAULT 'strategic',\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n                )\n            `);\n\n      db.run(`\n                CREATE TABLE IF NOT EXISTS agents (\n                    id TEXT PRIMARY KEY,\n                    swarm_id TEXT,\n                    name TEXT NOT NULL,\n                    type TEXT NOT NULL,\n                    role TEXT,\n                    status TEXT DEFAULT 'idle',\n                    capabilities TEXT,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (swarm_id) REFERENCES swarms(id)\n                )\n            `);\n\n      db.run(`\n                CREATE TABLE IF NOT EXISTS tasks (\n                    id TEXT PRIMARY KEY,\n                    swarm_id TEXT,\n                    description TEXT,\n                    status TEXT DEFAULT 'pending',\n                    result TEXT,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (swarm_id) REFERENCES swarms(id)\n                )\n            `);\n\n      db.run(`\n                CREATE TABLE IF NOT EXISTS collective_memory (\n                    id TEXT PRIMARY KEY,\n                    swarm_id TEXT,\n                    key TEXT NOT NULL,\n                    value TEXT,\n                    ttl INTEGER,\n                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (swarm_id) REFERENCES swarms(id)\n                )\n            `);\n\n      db.close((err) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  });\n}\n\n// Enhanced swarm creation with better UX\nasync function createSwarm(objective, config) {\n  try {\n    // Simulate swarm creation with progress indication\n    const steps = [\n      'Initializing swarm topology...',\n      'Spawning Queen coordinator...',\n      'Creating worker agents...',\n      'Establishing communication protocols...',\n      'Setting up collective memory...',\n      'Activating swarm intelligence...',\n    ];\n\n    for (let i = 0; i < steps.length; i++) {\n      process.stdout.write(chalk.gray(`  ${steps[i]} `));\n      await new Promise((resolve) => setTimeout(resolve, 500)); // Simulate work\n      console.log(chalk.green('✓'));\n    }\n\n    const swarmId = `swarm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const queenId = `queen-${Date.now()}`;\n\n    // Open database\n    const dbPath = path.join(process.cwd(), '.hive-mind', 'hive.db');\n    const db = new sqlite3.Database(dbPath);\n\n    await new Promise((resolve, reject) => {\n      db.serialize(() => {\n        // Create swarm record\n        const insertSwarm = db.prepare(`\n                    INSERT INTO swarms (id, name, objective, status, queen_type, created_at, updated_at)\n                    VALUES (?, ?, ?, ?, ?, ?, ?)\n                `);\n\n        insertSwarm.run(\n          swarmId,\n          `hive-${Date.now()}`,\n          objective,\n          'active',\n          config.coordination,\n          new Date().toISOString(),\n          new Date().toISOString(),\n        );\n\n        // Create agents\n        const insertAgent = db.prepare(`\n                    INSERT INTO agents (id, swarm_id, name, type, role, status, capabilities, created_at)\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n                `);\n\n        // Create Queen\n        insertAgent.run(\n          queenId,\n          swarmId,\n          'Queen Coordinator',\n          'coordinator',\n          'queen',\n          'active',\n          JSON.stringify(['orchestration', 'strategy', 'coordination']),\n          new Date().toISOString(),\n        );\n\n        // Create worker agents\n        const workerTypes = ['researcher', 'coder', 'analyst', 'tester'];\n        for (let i = 0; i < config.agents - 1; i++) {\n          const agentType = workerTypes[i % workerTypes.length];\n          insertAgent.run(\n            `agent-${Date.now()}-${i}`,\n            swarmId,\n            `${agentType.charAt(0).toUpperCase() + agentType.slice(1)} Worker ${i + 1}`,\n            agentType,\n            'worker',\n            'idle',\n            JSON.stringify([agentType, 'collaboration']),\n            new Date().toISOString(),\n          );\n        }\n\n        insertSwarm.finalize();\n        insertAgent.finalize();\n\n        db.close((err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n    });\n\n    return { success: true, swarmId, queenId };\n  } catch (error) {\n    console.error('Error creating swarm:', error);\n    return { success: false, error: error.message };\n  }\n}\n\nmodule.exports = { runInteractiveWizard };\n"],"names":["chalk","require","path","fs","Database","runInteractiveWizard","console","log","blue","bold","gray","configPath","join","process","cwd","config","initialized","existsSync","JSON","parse","readFileSync","yellow","initializeHiveMind","green","objective","cyan","swarmConfig","topology","coordination","agents","complexity","result","createSwarm","success","red","error","message","hiveMindDir","mkdirSync","recursive","version","Date","toISOString","defaults","queenType","maxWorkers","consensusAlgorithm","memorySize","autoScale","encryption","mcpTools","enabled","parallel","timeout","writeFileSync","stringify","dbPath","db","sqlite3","Promise","resolve","reject","serialize","run","close","err","steps","i","length","stdout","write","setTimeout","swarmId","now","Math","random","toString","substr","queenId","insertSwarm","prepare","insertAgent","workerTypes","agentType","charAt","toUpperCase","slice","finalize","module","exports"],"mappings":"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"}