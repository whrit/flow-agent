{"version":3,"sources":["../../../../src/cli/simple-commands/process-ui-enhanced.js"],"sourcesContent":["// process-ui-enhanced.js - Enhanced process management UI with multiple views - v2.0.0-alpha.83\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { compat } from '../runtime-detector.js';\nimport SwarmWebUIIntegration from './swarm-webui-integration.js';\n\n// Simple color utilities\nconst colors = {\n  cyan: (text) => `\\x1b[36m${text}\\x1b[0m`,\n  gray: (text) => `\\x1b[90m${text}\\x1b[0m`,\n  white: (text) => `\\x1b[37m${text}\\x1b[0m`,\n  yellow: (text) => `\\x1b[33m${text}\\x1b[0m`,\n  green: (text) => `\\x1b[32m${text}\\x1b[0m`,\n  red: (text) => `\\x1b[31m${text}\\x1b[0m`,\n  blue: (text) => `\\x1b[34m${text}\\x1b[0m`,\n  magenta: (text) => `\\x1b[35m${text}\\x1b[0m`,\n  bold: (text) => `\\x1b[1m${text}\\x1b[0m`,\n  dim: (text) => `\\x1b[2m${text}\\x1b[0m`,\n};\n\nconst PROCESSES = [\n  { id: 'event-bus', name: 'Event Bus', description: 'Central event distribution system' },\n  { id: 'orchestrator', name: 'Orchestrator', description: 'Main coordination engine' },\n  { id: 'memory-manager', name: 'Memory Manager', description: 'Persistent memory system' },\n  { id: 'terminal-pool', name: 'Terminal Pool', description: 'Terminal session management' },\n  { id: 'mcp-server', name: 'MCP Server', description: 'Model Context Protocol server' },\n  { id: 'coordinator', name: 'Coordinator', description: 'Task coordination service' },\n];\n\n// View modes\nconst VIEWS = {\n  PROCESSES: 'processes',\n  STATUS: 'status',\n  ORCHESTRATION: 'orchestration',\n  MEMORY: 'memory',\n  LOGS: 'logs',\n  HELP: 'help',\n};\n\nexport class EnhancedProcessUI {\n  constructor() {\n    this.processes = new Map();\n    this.running = true;\n    this.selectedIndex = 0;\n    this.currentView = VIEWS.PROCESSES;\n    this.agents = [];\n    this.tasks = [];\n    this.memoryStats = {\n      totalEntries: 0,\n      totalSize: 0,\n      namespaces: [],\n    };\n    this.logs = [];\n    this.systemStats = {\n      uptime: 0,\n      totalTasks: 0,\n      completedTasks: 0,\n      activeAgents: 0,\n      memoryUsage: 0,\n      cpuUsage: 0,\n    };\n\n    // Initialize swarm integration\n    this.swarmIntegration = new SwarmWebUIIntegration(this);\n\n    // Initialize process states\n    PROCESSES.forEach((p) => {\n      this.processes.set(p.id, {\n        ...p,\n        status: 'stopped',\n        pid: null,\n        uptime: 0,\n        cpu: Math.random() * 5,\n        memory: Math.random() * 100,\n      });\n    });\n\n    // Start system uptime counter\n    setInterval(() => {\n      this.systemStats.uptime++;\n    }, 1000);\n\n    // Initialize swarm (this will create mock data)\n    this.initializeSwarm();\n  }\n\n  async initializeSwarm() {\n    // Initialize swarm with mock data\n    await this.swarmIntegration.initializeSwarm('hierarchical', 8);\n\n    // Mock memory namespaces\n    this.memoryStats = {\n      totalEntries: 42,\n      totalSize: '156.3 KB',\n      namespaces: [\n        { name: 'sparc', entries: 15, size: '45.2 KB' },\n        { name: 'agents', entries: 12, size: '38.7 KB' },\n        { name: 'tasks', entries: 8, size: '24.1 KB' },\n        { name: 'system', entries: 7, size: '48.3 KB' },\n      ],\n    };\n\n    // Initial logs\n    this.logs = [\n      { time: new Date(), level: 'info', message: 'System initialized' },\n      { time: new Date(), level: 'success', message: 'All processes ready' },\n      { time: new Date(), level: 'success', message: 'Swarm orchestration active' },\n    ];\n  }\n\n  async start() {\n    // Clear screen\n    console.clear();\n\n    // Show welcome\n    printSuccess('🧠 Claude-Flow Process Management UI v2.0.0-alpha.80');\n    console.log('─'.repeat(80));\n    console.log();\n\n    // Initial render\n    this.render();\n\n    // Main UI loop\n    while (this.running) {\n      await this.handleInput();\n      if (this.running) {\n        this.render();\n      }\n    }\n  }\n\n  render() {\n    // Clear screen and move cursor to top\n    console.log('\\x1b[2J\\x1b[H');\n\n    // Header with navigation\n    this.renderHeader();\n\n    // Main content based on current view\n    switch (this.currentView) {\n      case VIEWS.PROCESSES:\n        this.renderProcessView();\n        break;\n      case VIEWS.STATUS:\n        this.renderStatusView();\n        break;\n      case VIEWS.ORCHESTRATION:\n        this.renderOrchestrationView();\n        break;\n      case VIEWS.MEMORY:\n        this.renderMemoryView();\n        break;\n      case VIEWS.LOGS:\n        this.renderLogsView();\n        break;\n      case VIEWS.HELP:\n        this.renderHelpView();\n        break;\n    }\n\n    // Footer with controls\n    this.renderFooter();\n  }\n\n  renderHeader() {\n    console.log(colors.cyan(colors.bold('🧠 Claude-Flow Process Manager')));\n    console.log(colors.gray('─'.repeat(80)));\n\n    // Navigation tabs\n    const tabs = [\n      { key: '1', view: VIEWS.PROCESSES, label: 'Processes' },\n      { key: '2', view: VIEWS.STATUS, label: 'Status' },\n      { key: '3', view: VIEWS.ORCHESTRATION, label: 'Orchestration' },\n      { key: '4', view: VIEWS.MEMORY, label: 'Memory' },\n      { key: '5', view: VIEWS.LOGS, label: 'Logs' },\n      { key: '6', view: VIEWS.HELP, label: 'Help' },\n    ];\n\n    let tabLine = '';\n    tabs.forEach((tab) => {\n      const isActive = this.currentView === tab.view;\n      const label = isActive ? colors.yellow(`[${tab.label}]`) : colors.gray(`${tab.label}`);\n      tabLine += `  ${colors.bold(tab.key)}:${label}`;\n    });\n\n    console.log(tabLine);\n    console.log(colors.gray('─'.repeat(80)));\n    console.log();\n  }\n\n  renderProcessView() {\n    console.log(colors.white(colors.bold('Process Management')));\n    console.log();\n\n    let index = 0;\n    for (const [id, process] of this.processes) {\n      const selected = index === this.selectedIndex;\n      const prefix = selected ? colors.yellow('▶ ') : '  ';\n      const status = this.getStatusIcon(process.status);\n      const name = selected ? colors.yellow(process.name) : colors.white(process.name);\n\n      console.log(`${prefix}${status} ${name}`);\n      console.log(`     ${colors.gray(process.description)}`);\n\n      if (process.status === 'running') {\n        const stats = colors.dim(\n          `PID: ${process.pid} | Uptime: ${this.formatUptime(process.uptime)} | CPU: ${process.cpu.toFixed(1)}% | Mem: ${process.memory.toFixed(0)}MB`,\n        );\n        console.log(`     ${stats}`);\n      }\n      console.log();\n\n      index++;\n    }\n\n    // Quick stats\n    const running = Array.from(this.processes.values()).filter(\n      (p) => p.status === 'running',\n    ).length;\n    console.log(colors.gray('─'.repeat(80)));\n    console.log(\n      colors.white(\n        `Total: ${this.processes.size} | Running: ${colors.green(running)} | Stopped: ${colors.gray(this.processes.size - running)}`,\n      ),\n    );\n  }\n\n  renderStatusView() {\n    console.log(colors.white(colors.bold('System Status')));\n    console.log();\n\n    // System overview\n    console.log(colors.cyan('📊 System Overview'));\n    console.log(`  Uptime: ${colors.green(this.formatUptime(this.systemStats.uptime))}`);\n    console.log(`  Process Health: ${this.getHealthBar()}`);\n    console.log();\n\n    // Resource usage\n    console.log(colors.cyan('💻 Resource Usage'));\n    console.log(\n      `  CPU Usage: ${this.getUsageBar(this.systemStats.cpuUsage, 100)} ${this.systemStats.cpuUsage}%`,\n    );\n    console.log(\n      `  Memory: ${this.getUsageBar(this.systemStats.memoryUsage, 100)} ${this.systemStats.memoryUsage}%`,\n    );\n    console.log();\n\n    // Activity metrics\n    console.log(colors.cyan('📈 Activity Metrics'));\n    console.log(\n      `  Active Agents: ${colors.yellow(this.agents.filter((a) => a.status === 'working').length)}/${this.agents.length}`,\n    );\n    console.log(`  Total Tasks: ${this.tasks.length}`);\n    console.log(\n      `  Completed: ${colors.green(this.tasks.filter((t) => t.status === 'completed').length)}`,\n    );\n    console.log(\n      `  In Progress: ${colors.yellow(this.tasks.filter((t) => t.status === 'in_progress').length)}`,\n    );\n    console.log(\n      `  Pending: ${colors.gray(this.tasks.filter((t) => t.status === 'pending').length)}`,\n    );\n    console.log();\n\n    // Recent events\n    console.log(colors.cyan('🔔 Recent Events'));\n    this.logs.slice(-3).forEach((log) => {\n      const time = log.time.toLocaleTimeString();\n      const icon = log.level === 'success' ? '✓' : log.level === 'warning' ? '⚠' : 'ℹ';\n      const color =\n        log.level === 'success'\n          ? colors.green\n          : log.level === 'warning'\n            ? colors.yellow\n            : colors.blue;\n      console.log(`  ${colors.gray(time)} ${color(icon)} ${log.message}`);\n    });\n  }\n\n  renderOrchestrationView() {\n    console.log(colors.white(colors.bold('Swarm Orchestration Management')));\n    console.log();\n\n    // Swarm metrics\n    const metrics = this.swarmIntegration.getSwarmMetrics();\n    if (metrics) {\n      console.log(colors.cyan('🐝 Swarm Status'));\n      console.log(`  Swarm ID: ${colors.yellow(metrics.swarmId)}`);\n      console.log(\n        `  Agents: ${colors.green(metrics.agents.active)}/${metrics.agents.total} active`,\n      );\n      console.log(\n        `  Tasks: ${colors.yellow(metrics.tasks.inProgress)} in progress, ${colors.green(metrics.tasks.completed)} completed`,\n      );\n      console.log(`  Efficiency: ${metrics.efficiency}%`);\n      console.log();\n    }\n\n    // Agents section\n    console.log(colors.cyan('🤖 Active Agents'));\n    console.log();\n    this.agents.forEach((agent, index) => {\n      const selected = this.currentView === VIEWS.ORCHESTRATION && index === this.selectedIndex;\n      const prefix = selected ? colors.yellow('▶ ') : '  ';\n      const statusIcon = agent.status === 'working' ? colors.green('●') : colors.gray('○');\n      const name = selected ? colors.yellow(agent.name) : colors.white(agent.name);\n\n      console.log(`${prefix}${statusIcon} ${name} (${agent.type})`);\n      console.log(`     ID: ${agent.id} | Tasks: ${agent.tasks} | Status: ${agent.status}`);\n      if (agent.capabilities && agent.capabilities.length > 0) {\n        console.log(`     Capabilities: ${colors.dim(agent.capabilities.join(', '))}`);\n      }\n      console.log();\n    });\n\n    console.log(colors.gray('─'.repeat(40)));\n\n    // Tasks section\n    console.log(colors.cyan('📋 Task Queue'));\n    console.log();\n    this.tasks.slice(0, 5).forEach((task) => {\n      const statusColor =\n        task.status === 'completed'\n          ? colors.green\n          : task.status === 'in_progress'\n            ? colors.yellow\n            : colors.gray;\n      const status = statusColor(`[${task.status}]`);\n      const priority =\n        task.priority === 'high'\n          ? colors.red(`[${task.priority}]`)\n          : task.priority === 'medium'\n            ? colors.yellow(`[${task.priority}]`)\n            : colors.gray(`[${task.priority}]`);\n      console.log(`  ${status} ${priority} ${task.description}`);\n      if (task.assignedTo) {\n        const agent = this.agents.find((a) => a.id === task.assignedTo);\n        console.log(`       Assigned to: ${agent ? agent.name : task.assignedTo}`);\n      }\n    });\n\n    if (this.tasks.length > 5) {\n      console.log(colors.gray(`  ... and ${this.tasks.length - 5} more tasks`));\n    }\n  }\n\n  renderMemoryView() {\n    console.log(colors.white(colors.bold('Memory Bank Management')));\n    console.log();\n\n    // Overview\n    console.log(colors.cyan('💾 Memory Overview'));\n    console.log(`  Total Entries: ${colors.yellow(this.memoryStats.totalEntries)}`);\n    console.log(`  Total Size: ${colors.yellow(this.memoryStats.totalSize)}`);\n    console.log();\n\n    // Namespaces\n    console.log(colors.cyan('📁 Namespaces'));\n    console.log();\n    this.memoryStats.namespaces.forEach((ns, index) => {\n      const selected = this.currentView === VIEWS.MEMORY && index === this.selectedIndex;\n      const prefix = selected ? colors.yellow('▶ ') : '  ';\n      const name = selected ? colors.yellow(ns.name) : colors.white(ns.name);\n\n      console.log(`${prefix}${name}`);\n      console.log(`     Entries: ${ns.entries} | Size: ${ns.size}`);\n      console.log();\n    });\n\n    // Recent operations\n    console.log(colors.gray('─'.repeat(40)));\n    console.log(colors.cyan('🔄 Recent Operations'));\n    console.log(`  ${colors.green('✓')} Stored: config.api.key`);\n    console.log(`  ${colors.blue('↓')} Retrieved: sparc.modes`);\n    console.log(`  ${colors.yellow('✎')} Updated: agent.status`);\n  }\n\n  renderLogsView() {\n    console.log(colors.white(colors.bold('System Logs')));\n    console.log();\n\n    // Log filters\n    console.log(colors.cyan('🔍 Filters: ') + colors.gray('[A]ll [I]nfo [W]arning [E]rror'));\n    console.log(colors.gray('─'.repeat(80)));\n    console.log();\n\n    // Display logs\n    const displayLogs = this.logs.slice(-15);\n    displayLogs.forEach((log) => {\n      const time = log.time.toLocaleTimeString();\n      let icon, color;\n\n      switch (log.level) {\n        case 'success':\n          icon = '✓';\n          color = colors.green;\n          break;\n        case 'warning':\n          icon = '⚠';\n          color = colors.yellow;\n          break;\n        case 'error':\n          icon = '✗';\n          color = colors.red;\n          break;\n        default:\n          icon = 'ℹ';\n          color = colors.blue;\n      }\n\n      console.log(`${colors.gray(time)} ${color(icon)} ${log.message}`);\n    });\n\n    if (this.logs.length > 15) {\n      console.log();\n      console.log(colors.gray(`Showing last 15 of ${this.logs.length} logs`));\n    }\n  }\n\n  renderHelpView() {\n    console.log(colors.white(colors.bold('Help & Documentation')));\n    console.log();\n\n    console.log(colors.cyan('🎯 Navigation'));\n    console.log(`  ${colors.yellow('1-6')}     Switch between views`);\n    console.log(`  ${colors.yellow('Tab')}     Cycle through views`);\n    console.log(`  ${colors.yellow('↑/↓')}     Navigate items (when available)`);\n    console.log();\n\n    console.log(colors.cyan('⚡ Process Controls'));\n    console.log(`  ${colors.yellow('Space')}   Toggle selected process`);\n    console.log(`  ${colors.yellow('A')}       Start all processes`);\n    console.log(`  ${colors.yellow('Z')}       Stop all processes`);\n    console.log(`  ${colors.yellow('R')}       Restart all processes`);\n    console.log();\n\n    console.log(colors.cyan('🤖 Swarm Orchestration'));\n    console.log(`  ${colors.yellow('N')}       Spawn new agent`);\n    console.log(`  ${colors.yellow('T')}       Create new task`);\n    console.log(`  ${colors.yellow('D')}       Complete task`);\n    console.log(`  ${colors.yellow('S')}       Show swarm metrics`);\n    console.log();\n\n    console.log(colors.cyan('💾 Memory Operations'));\n    console.log(`  ${colors.yellow('S')}       Store new entry`);\n    console.log(`  ${colors.yellow('G')}       Get/search entries`);\n    console.log(`  ${colors.yellow('C')}       Clear namespace`);\n    console.log();\n\n    console.log(colors.cyan('🔧 Other'));\n    console.log(`  ${colors.yellow('L')}       Clear logs`);\n    console.log(`  ${colors.yellow('H/?')}     Show this help`);\n    console.log(`  ${colors.yellow('Q')}       Quit`);\n  }\n\n  renderFooter() {\n    console.log();\n    console.log(colors.gray('─'.repeat(80)));\n\n    // Context-sensitive controls\n    let controls = '';\n    switch (this.currentView) {\n      case VIEWS.PROCESSES:\n        controls = `${colors.yellow('Space')} Toggle | ${colors.yellow('A')} Start All | ${colors.yellow('Z')} Stop All | ${colors.yellow('R')} Restart`;\n        break;\n      case VIEWS.ORCHESTRATION:\n        controls = `${colors.yellow('N')} New Agent | ${colors.yellow('T')} New Task | ${colors.yellow('D')} Complete | ${colors.yellow('S')} Metrics`;\n        break;\n      case VIEWS.MEMORY:\n        controls = `${colors.yellow('S')} Store | ${colors.yellow('G')} Get | ${colors.yellow('C')} Clear`;\n        break;\n      case VIEWS.LOGS:\n        controls = `${colors.yellow('L')} Clear | ${colors.yellow('F')} Filter`;\n        break;\n      default:\n        controls = `${colors.yellow('Tab')} Next View | ${colors.yellow('?')} Help`;\n    }\n\n    console.log(`${controls} | ${colors.yellow('Q')} Quit`);\n    console.log(colors.gray('─'.repeat(80)));\n  }\n\n  getStatusIcon(status) {\n    switch (status) {\n      case 'running':\n        return colors.green('●');\n      case 'stopped':\n        return colors.gray('○');\n      case 'error':\n        return colors.red('✗');\n      case 'starting':\n        return colors.yellow('◐');\n      default:\n        return colors.gray('?');\n    }\n  }\n\n  getHealthBar() {\n    const running = Array.from(this.processes.values()).filter(\n      (p) => p.status === 'running',\n    ).length;\n    const total = this.processes.size;\n    const percentage = (running / total) * 100;\n    const filled = Math.round(percentage / 10);\n    const bar = '█'.repeat(filled) + '░'.repeat(10 - filled);\n    const color = percentage >= 80 ? colors.green : percentage >= 50 ? colors.yellow : colors.red;\n    return color(bar) + ` ${percentage.toFixed(0)}%`;\n  }\n\n  getUsageBar(value, max) {\n    const percentage = (value / max) * 100;\n    const filled = Math.round(percentage / 10);\n    const bar = '▓'.repeat(filled) + '░'.repeat(10 - filled);\n    const color = percentage >= 80 ? colors.red : percentage >= 50 ? colors.yellow : colors.green;\n    return color(bar);\n  }\n\n  formatUptime(seconds) {\n    if (seconds < 60) return `${seconds}s`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  }\n\n  async handleInput() {\n    const terminal = compat.terminal;\n\n    await terminal.write('\\nCommand: ');\n\n    const buf = new Uint8Array(1024);\n    const n = await terminal.read(buf);\n    if (n === null) return;\n\n    const rawInput = terminal.decoder.decode(buf.subarray(0, n)).trim();\n    const input = rawInput.split('\\n')[0].toLowerCase();\n\n    // Global commands\n    switch (input) {\n      case 'q':\n      case 'quit':\n        this.running = false;\n        console.clear();\n        printSuccess('Goodbye!');\n        compat.terminal.exit(0);\n        break;\n\n      case '1':\n        this.currentView = VIEWS.PROCESSES;\n        this.selectedIndex = 0;\n        break;\n\n      case '2':\n        this.currentView = VIEWS.STATUS;\n        this.selectedIndex = 0;\n        break;\n\n      case '3':\n        this.currentView = VIEWS.ORCHESTRATION;\n        this.selectedIndex = 0;\n        break;\n\n      case '4':\n        this.currentView = VIEWS.MEMORY;\n        this.selectedIndex = 0;\n        break;\n\n      case '5':\n        this.currentView = VIEWS.LOGS;\n        this.selectedIndex = 0;\n        break;\n\n      case '6':\n      case '?':\n      case 'h':\n      case 'help':\n        this.currentView = VIEWS.HELP;\n        break;\n\n      case 'tab':\n      case '\\t':\n        // Cycle through views\n        const viewKeys = Object.values(VIEWS);\n        const currentIndex = viewKeys.indexOf(this.currentView);\n        this.currentView = viewKeys[(currentIndex + 1) % viewKeys.length];\n        this.selectedIndex = 0;\n        break;\n\n      default:\n        // View-specific commands\n        await this.handleViewSpecificInput(input);\n    }\n\n    // Update system stats\n    this.updateSystemStats();\n  }\n\n  async handleViewSpecificInput(input) {\n    switch (this.currentView) {\n      case VIEWS.PROCESSES:\n        await this.handleProcessInput(input);\n        break;\n      case VIEWS.ORCHESTRATION:\n        await this.handleOrchestrationInput(input);\n        break;\n      case VIEWS.MEMORY:\n        await this.handleMemoryInput(input);\n        break;\n      case VIEWS.LOGS:\n        await this.handleLogsInput(input);\n        break;\n    }\n  }\n\n  async handleProcessInput(input) {\n    switch (input) {\n      case 'a':\n        await this.startAll();\n        break;\n\n      case 'z':\n        await this.stopAll();\n        break;\n\n      case 'r':\n        await this.restartAll();\n        break;\n\n      case ' ':\n      case 'space':\n      case 'enter':\n      case '':\n        await this.toggleSelected();\n        break;\n\n      case 'up':\n      case 'k':\n        this.selectedIndex = Math.max(0, this.selectedIndex - 1);\n        break;\n\n      case 'down':\n      case 'j':\n        this.selectedIndex = Math.min(this.processes.size - 1, this.selectedIndex + 1);\n        break;\n    }\n  }\n\n  async handleOrchestrationInput(input) {\n    switch (input) {\n      case 'n':\n        // Spawn new agent\n        const agentTypes = ['researcher', 'coder', 'analyst', 'coordinator', 'tester'];\n        const randomType = agentTypes[Math.floor(Math.random() * agentTypes.length)];\n        await this.swarmIntegration.spawnAgent(randomType);\n        break;\n\n      case 't':\n        // Create new task\n        const sampleTasks = [\n          'Implement new feature',\n          'Fix critical bug',\n          'Optimize performance',\n          'Update documentation',\n          'Review code quality',\n        ];\n        const randomTask = sampleTasks[Math.floor(Math.random() * sampleTasks.length)];\n        await this.swarmIntegration.createTask(randomTask, 'medium');\n        break;\n\n      case 'd':\n        // Complete selected task (simulate)\n        if (this.tasks.length > 0) {\n          const pendingTasks = this.tasks.filter((t) => t.status === 'in_progress');\n          if (pendingTasks.length > 0) {\n            const taskToComplete = pendingTasks[0];\n            await this.swarmIntegration.completeTask(taskToComplete.id);\n          } else {\n            this.addLog('info', 'No in-progress tasks to complete');\n          }\n        }\n        break;\n\n      case 's':\n        // Show swarm metrics\n        const metrics = this.swarmIntegration.getSwarmMetrics();\n        if (metrics) {\n          this.addLog(\n            'info',\n            `Swarm efficiency: ${metrics.efficiency}% (${metrics.tasks.completed}/${metrics.tasks.total} tasks completed)`,\n          );\n        }\n        break;\n    }\n  }\n\n  async handleMemoryInput(input) {\n    switch (input) {\n      case 's':\n        this.addLog('info', 'Memory storage not yet implemented');\n        break;\n\n      case 'g':\n        this.addLog('info', 'Memory retrieval not yet implemented');\n        break;\n\n      case 'c':\n        this.addLog('warning', 'Memory clearing not yet implemented');\n        break;\n    }\n  }\n\n  async handleLogsInput(input) {\n    switch (input) {\n      case 'l':\n        this.logs = [];\n        this.addLog('info', 'Logs cleared');\n        break;\n\n      case 'f':\n        this.addLog('info', 'Log filtering not yet implemented');\n        break;\n    }\n  }\n\n  addLog(level, message) {\n    this.logs.push({\n      time: new Date(),\n      level,\n      message,\n    });\n  }\n\n  updateSystemStats() {\n    // Update random stats for demo\n    this.systemStats.cpuUsage = Math.min(\n      100,\n      Math.max(0, this.systemStats.cpuUsage + (Math.random() - 0.5) * 10),\n    );\n    this.systemStats.memoryUsage = Math.min(\n      100,\n      Math.max(0, this.systemStats.memoryUsage + (Math.random() - 0.5) * 5),\n    );\n\n    // Update process stats\n    for (const [id, process] of this.processes) {\n      if (process.status === 'running') {\n        process.uptime++;\n        process.cpu = Math.min(100, Math.max(0, process.cpu + (Math.random() - 0.5) * 2));\n        process.memory = Math.min(200, Math.max(10, process.memory + (Math.random() - 0.5) * 5));\n      }\n    }\n  }\n\n  async toggleSelected() {\n    const process = Array.from(this.processes.values())[this.selectedIndex];\n    if (process.status === 'stopped') {\n      await this.startProcess(process.id);\n    } else {\n      await this.stopProcess(process.id);\n    }\n  }\n\n  async startProcess(id) {\n    const process = this.processes.get(id);\n    if (!process) return;\n\n    this.addLog('info', `Starting ${process.name}...`);\n    process.status = 'starting';\n\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    process.status = 'running';\n    process.pid = Math.floor(Math.random() * 10000) + 1000;\n    process.uptime = 0;\n\n    this.addLog('success', `${process.name} started successfully`);\n  }\n\n  async stopProcess(id) {\n    const process = this.processes.get(id);\n    if (!process) return;\n\n    this.addLog('info', `Stopping ${process.name}...`);\n    process.status = 'stopped';\n    process.pid = null;\n    process.uptime = 0;\n\n    await new Promise((resolve) => setTimeout(resolve, 300));\n    this.addLog('success', `${process.name} stopped`);\n  }\n\n  async startAll() {\n    this.addLog('info', 'Starting all processes...');\n    for (const [id, process] of this.processes) {\n      if (process.status === 'stopped') {\n        await this.startProcess(id);\n      }\n    }\n    this.addLog('success', 'All processes started');\n  }\n\n  async stopAll() {\n    this.addLog('info', 'Stopping all processes...');\n    for (const [id, process] of this.processes) {\n      if (process.status === 'running') {\n        await this.stopProcess(id);\n      }\n    }\n    this.addLog('success', 'All processes stopped');\n  }\n\n  async restartAll() {\n    await this.stopAll();\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    await this.startAll();\n  }\n}\n\nexport async function launchEnhancedUI() {\n  const ui = new EnhancedProcessUI();\n  await ui.start();\n}\n"],"names":["printSuccess","compat","SwarmWebUIIntegration","colors","cyan","text","gray","white","yellow","green","red","blue","magenta","bold","dim","PROCESSES","id","name","description","VIEWS","STATUS","ORCHESTRATION","MEMORY","LOGS","HELP","EnhancedProcessUI","processes","Map","running","selectedIndex","currentView","agents","tasks","memoryStats","totalEntries","totalSize","namespaces","logs","systemStats","uptime","totalTasks","completedTasks","activeAgents","memoryUsage","cpuUsage","swarmIntegration","forEach","p","set","status","pid","cpu","Math","random","memory","setInterval","initializeSwarm","entries","size","time","Date","level","message","start","console","clear","log","repeat","render","handleInput","renderHeader","renderProcessView","renderStatusView","renderOrchestrationView","renderMemoryView","renderLogsView","renderHelpView","renderFooter","tabs","key","view","label","tabLine","tab","isActive","index","process","selected","prefix","getStatusIcon","stats","formatUptime","toFixed","Array","from","values","filter","length","getHealthBar","getUsageBar","a","t","slice","toLocaleTimeString","icon","color","metrics","getSwarmMetrics","swarmId","active","total","inProgress","completed","efficiency","agent","statusIcon","type","capabilities","join","task","statusColor","priority","assignedTo","find","ns","displayLogs","controls","percentage","filled","round","bar","value","max","seconds","floor","hours","minutes","terminal","write","buf","Uint8Array","n","read","rawInput","decoder","decode","subarray","trim","input","split","toLowerCase","exit","viewKeys","Object","currentIndex","indexOf","handleViewSpecificInput","updateSystemStats","handleProcessInput","handleOrchestrationInput","handleMemoryInput","handleLogsInput","startAll","stopAll","restartAll","toggleSelected","min","agentTypes","randomType","spawnAgent","sampleTasks","randomTask","createTask","pendingTasks","taskToComplete","completeTask","addLog","push","startProcess","stopProcess","get","Promise","resolve","setTimeout","launchEnhancedUI","ui"],"mappings":"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"}