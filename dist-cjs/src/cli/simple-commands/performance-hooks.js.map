{"version":3,"sources":["../../../../src/cli/simple-commands/performance-hooks.js"],"sourcesContent":["/**\n * Performance Tracking Hooks\n * Integrates with all Claude Flow operations to track real performance metrics\n */\n\nimport {\n  trackTaskExecution,\n  trackAgentActivity,\n  trackNeuralEvent,\n  initializeMetrics\n} from './performance-metrics.js';\nimport { performance } from 'perf_hooks';\n\n// Track active operations\nconst activeOperations = new Map();\n\n// Initialize performance tracking\nexport async function initializePerformanceTracking() {\n  await initializeMetrics();\n  \n  // Hook into global events if available\n  if (global.claudeFlowHooks) {\n    global.claudeFlowHooks.on('task:start', onTaskStart);\n    global.claudeFlowHooks.on('task:end', onTaskEnd);\n    global.claudeFlowHooks.on('agent:spawn', onAgentSpawn);\n    global.claudeFlowHooks.on('agent:action', onAgentAction);\n    global.claudeFlowHooks.on('neural:event', onNeuralEvent);\n  }\n}\n\n// Task tracking\nexport function onTaskStart(taskId, taskType, metadata = {}) {\n  activeOperations.set(taskId, {\n    type: 'task',\n    taskType,\n    startTime: performance.now(),\n    metadata\n  });\n}\n\nexport async function onTaskEnd(taskId, success = true, error = null) {\n  const operation = activeOperations.get(taskId);\n  if (!operation) return;\n  \n  const duration = performance.now() - operation.startTime;\n  activeOperations.delete(taskId);\n  \n  await trackTaskExecution(\n    taskId,\n    operation.taskType,\n    success,\n    duration,\n    {\n      ...operation.metadata,\n      error: error ? error.message : undefined\n    }\n  );\n}\n\n// Agent tracking\nexport async function onAgentSpawn(agentId, agentType, metadata = {}) {\n  const startTime = performance.now();\n  \n  await trackAgentActivity(\n    agentId,\n    agentType,\n    'spawn',\n    performance.now() - startTime,\n    true\n  );\n}\n\nexport function onAgentActionStart(agentId, agentType, action) {\n  const key = `${agentId}:${action}`;\n  activeOperations.set(key, {\n    type: 'agent',\n    agentId,\n    agentType,\n    action,\n    startTime: performance.now()\n  });\n}\n\nexport async function onAgentAction(agentId, agentType, action, success = true) {\n  const key = `${agentId}:${action}`;\n  const operation = activeOperations.get(key);\n  \n  if (operation) {\n    const duration = performance.now() - operation.startTime;\n    activeOperations.delete(key);\n    \n    await trackAgentActivity(\n      agentId,\n      agentType,\n      action,\n      duration,\n      success\n    );\n  } else {\n    // Quick action without start tracking\n    await trackAgentActivity(\n      agentId,\n      agentType,\n      action,\n      0,\n      success\n    );\n  }\n}\n\n// Neural event tracking\nexport async function onNeuralEvent(eventType, metadata = {}) {\n  await trackNeuralEvent(eventType, metadata);\n}\n\n// Wrapper functions for easy integration\nexport function wrapTaskExecution(taskId, taskType, fn, metadata = {}) {\n  return async (...args) => {\n    onTaskStart(taskId, taskType, metadata);\n    try {\n      const result = await fn(...args);\n      await onTaskEnd(taskId, true);\n      return result;\n    } catch (error) {\n      await onTaskEnd(taskId, false, error);\n      throw error;\n    }\n  };\n}\n\nexport function wrapAgentAction(agentId, agentType, action, fn) {\n  return async (...args) => {\n    onAgentActionStart(agentId, agentType, action);\n    try {\n      const result = await fn(...args);\n      await onAgentAction(agentId, agentType, action, true);\n      return result;\n    } catch (error) {\n      await onAgentAction(agentId, agentType, action, false);\n      throw error;\n    }\n  };\n}\n\n// Integration helpers for existing commands\nexport function trackCommand(commandName) {\n  return function decorator(target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    \n    descriptor.value = async function(...args) {\n      const taskId = `cmd-${commandName}-${Date.now()}`;\n      return wrapTaskExecution(taskId, commandName, originalMethod.bind(this))(...args);\n    };\n    \n    return descriptor;\n  };\n}\n\n// Manual tracking for commands that don't use decorators\nexport async function trackCommandExecution(commandName, fn, ...args) {\n  const taskId = `cmd-${commandName}-${Date.now()}`;\n  return wrapTaskExecution(taskId, commandName, fn)(...args);\n}\n\n// Export a simple API for manual tracking\nexport const performanceTracker = {\n  startTask: onTaskStart,\n  endTask: onTaskEnd,\n  trackAgent: onAgentAction,\n  trackNeural: onNeuralEvent,\n  wrapTask: wrapTaskExecution,\n  wrapAgent: wrapAgentAction\n};"],"names":["trackTaskExecution","trackAgentActivity","trackNeuralEvent","initializeMetrics","performance","activeOperations","Map","initializePerformanceTracking","global","claudeFlowHooks","on","onTaskStart","onTaskEnd","onAgentSpawn","onAgentAction","onNeuralEvent","taskId","taskType","metadata","set","type","startTime","now","success","error","operation","get","duration","delete","message","undefined","agentId","agentType","onAgentActionStart","action","key","eventType","wrapTaskExecution","fn","args","result","wrapAgentAction","trackCommand","commandName","decorator","target","propertyKey","descriptor","originalMethod","value","Date","bind","trackCommandExecution","performanceTracker","startTask","endTask","trackAgent","trackNeural","wrapTask","wrapAgent"],"mappings":"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"}