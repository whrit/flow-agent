{"version":3,"sources":["../../../../src/cli/simple-commands/realtime-update-system.js"],"sourcesContent":["/**\n * Real-time Update System for Claude-Flow Web UI\n * Provides event-driven architecture for live data updates\n * Supports WebSocket-like functionality and progressive loading\n */\n\nexport class RealtimeUpdateSystem {\n  constructor(ui) {\n    this.ui = ui;\n    this.subscribers = new Map(); // Event type -> Set of callbacks\n    this.updateQueues = new Map(); // View -> Queue of pending updates\n    this.updateTimers = new Map(); // View -> Timer for batched updates\n    this.batchDelay = 100; // ms to batch updates\n    this.eventHistory = []; // Keep last 100 events\n    this.maxHistorySize = 100;\n\n    // Performance monitoring\n    this.updateMetrics = {\n      totalUpdates: 0,\n      updateLatency: [],\n      batchedUpdates: 0,\n      droppedUpdates: 0,\n    };\n\n    this.initializeSystem();\n  }\n\n  /**\n   * Initialize the real-time update system\n   */\n  initializeSystem() {\n    // Setup system event listeners\n    this.setupSystemEvents();\n\n    // Initialize update queues for all views\n    this.initializeUpdateQueues();\n\n    // Start performance monitoring\n    this.startPerformanceMonitoring();\n\n    this.ui.addLog('success', 'Real-time update system initialized');\n  }\n\n  /**\n   * Setup system-level event listeners\n   */\n  setupSystemEvents() {\n    // Listen for tool execution events\n    this.subscribe('tool_start', (data) => {\n      this.broadcastUpdate('tools', {\n        type: 'execution_start',\n        toolName: data.toolName,\n        executionId: data.executionId,\n        timestamp: Date.now(),\n      });\n    });\n\n    this.subscribe('tool_complete', (data) => {\n      this.broadcastUpdate('tools', {\n        type: 'execution_complete',\n        toolName: data.toolName,\n        executionId: data.executionId,\n        result: data.result,\n        timestamp: Date.now(),\n      });\n\n      // Update relevant views based on tool type\n      this.updateRelatedViews(data.toolName, data.result);\n    });\n\n    this.subscribe('tool_error', (data) => {\n      this.broadcastUpdate('tools', {\n        type: 'execution_error',\n        toolName: data.toolName,\n        executionId: data.executionId,\n        error: data.error,\n        timestamp: Date.now(),\n      });\n    });\n\n    // Listen for swarm events\n    this.subscribe('swarm_status_change', (data) => {\n      this.broadcastUpdate('orchestration', {\n        type: 'swarm_update',\n        swarmId: data.swarmId,\n        status: data.status,\n        timestamp: Date.now(),\n      });\n    });\n\n    // Listen for memory events\n    this.subscribe('memory_change', (data) => {\n      this.broadcastUpdate('memory', {\n        type: 'memory_update',\n        namespace: data.namespace,\n        operation: data.operation,\n        timestamp: Date.now(),\n      });\n    });\n  }\n\n  /**\n   * Initialize update queues for all views\n   */\n  initializeUpdateQueues() {\n    const views = [\n      'neural',\n      'analysis',\n      'workflow',\n      'github',\n      'daa',\n      'system',\n      'tools',\n      'orchestration',\n      'memory',\n    ];\n    views.forEach((view) => {\n      this.updateQueues.set(view, []);\n    });\n  }\n\n  /**\n   * Subscribe to specific event types\n   */\n  subscribe(eventType, callback) {\n    if (!this.subscribers.has(eventType)) {\n      this.subscribers.set(eventType, new Set());\n    }\n    this.subscribers.get(eventType).add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const subs = this.subscribers.get(eventType);\n      if (subs) {\n        subs.delete(callback);\n      }\n    };\n  }\n\n  /**\n   * Emit event to all subscribers\n   */\n  emit(eventType, data) {\n    const timestamp = Date.now();\n\n    // Add to event history\n    this.eventHistory.push({\n      type: eventType,\n      data,\n      timestamp,\n    });\n\n    // Trim history if too large\n    if (this.eventHistory.length > this.maxHistorySize) {\n      this.eventHistory.shift();\n    }\n\n    // Notify subscribers\n    const subscribers = this.subscribers.get(eventType);\n    if (subscribers) {\n      subscribers.forEach((callback) => {\n        try {\n          callback(data, timestamp);\n        } catch (error) {\n          console.error(`Error in event subscriber for ${eventType}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Broadcast update to specific view\n   */\n  broadcastUpdate(viewName, updateData) {\n    const queue = this.updateQueues.get(viewName);\n    if (!queue) return;\n\n    // Add update to queue\n    queue.push({\n      ...updateData,\n      id: `update_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n    });\n\n    // Schedule batched update\n    this.scheduleBatchedUpdate(viewName);\n\n    this.updateMetrics.totalUpdates++;\n  }\n\n  /**\n   * Schedule batched update for a view\n   */\n  scheduleBatchedUpdate(viewName) {\n    // Clear existing timer\n    const existingTimer = this.updateTimers.get(viewName);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Schedule new batched update\n    const timer = setTimeout(() => {\n      this.processBatchedUpdates(viewName);\n    }, this.batchDelay);\n\n    this.updateTimers.set(viewName, timer);\n  }\n\n  /**\n   * Process batched updates for a view\n   */\n  processBatchedUpdates(viewName) {\n    const queue = this.updateQueues.get(viewName);\n    if (!queue || queue.length === 0) return;\n\n    const startTime = Date.now();\n\n    // Group updates by type\n    const groupedUpdates = this.groupUpdatesByType(queue);\n\n    // Apply updates\n    this.applyUpdatesToView(viewName, groupedUpdates);\n\n    // Clear processed updates\n    queue.length = 0;\n\n    // Update metrics\n    const latency = Date.now() - startTime;\n    this.updateMetrics.updateLatency.push(latency);\n    this.updateMetrics.batchedUpdates++;\n\n    // Keep only last 100 latency measurements\n    if (this.updateMetrics.updateLatency.length > 100) {\n      this.updateMetrics.updateLatency.shift();\n    }\n\n    // Clear timer\n    this.updateTimers.delete(viewName);\n  }\n\n  /**\n   * Group updates by type for efficient processing\n   */\n  groupUpdatesByType(updates) {\n    const grouped = new Map();\n\n    updates.forEach((update) => {\n      if (!grouped.has(update.type)) {\n        grouped.set(update.type, []);\n      }\n      grouped.get(update.type).push(update);\n    });\n\n    return grouped;\n  }\n\n  /**\n   * Apply grouped updates to a specific view\n   */\n  applyUpdatesToView(viewName, groupedUpdates) {\n    try {\n      // Different views handle updates differently\n      switch (viewName) {\n        case 'neural':\n          this.applyNeuralUpdates(groupedUpdates);\n          break;\n        case 'analysis':\n          this.applyAnalysisUpdates(groupedUpdates);\n          break;\n        case 'workflow':\n          this.applyWorkflowUpdates(groupedUpdates);\n          break;\n        case 'tools':\n          this.applyToolsUpdates(groupedUpdates);\n          break;\n        case 'orchestration':\n          this.applyOrchestrationUpdates(groupedUpdates);\n          break;\n        case 'memory':\n          this.applyMemoryUpdates(groupedUpdates);\n          break;\n        default:\n          this.applyGenericUpdates(viewName, groupedUpdates);\n      }\n\n      // Trigger UI refresh if this is the current view\n      if (this.ui.currentView === viewName) {\n        this.requestUIRefresh();\n      }\n    } catch (error) {\n      console.error(`Error applying updates to ${viewName}:`, error);\n      this.updateMetrics.droppedUpdates++;\n    }\n  }\n\n  /**\n   * Apply neural-specific updates\n   */\n  applyNeuralUpdates(groupedUpdates) {\n    const neuralData = this.ui.enhancedViews?.viewData?.get('neural');\n    if (!neuralData) return;\n\n    // Handle training job updates\n    const trainingUpdates = groupedUpdates.get('training_progress');\n    if (trainingUpdates) {\n      trainingUpdates.forEach((update) => {\n        const existingJob = neuralData.trainingJobs.find((job) => job.id === update.jobId);\n        if (existingJob) {\n          Object.assign(existingJob, update.data);\n        } else {\n          neuralData.trainingJobs.push({\n            id: update.jobId,\n            ...update.data,\n            startTime: update.timestamp,\n          });\n        }\n      });\n    }\n\n    // Handle model updates\n    const modelUpdates = groupedUpdates.get('model_update');\n    if (modelUpdates) {\n      modelUpdates.forEach((update) => {\n        const existingModel = neuralData.models.find((model) => model.id === update.modelId);\n        if (existingModel) {\n          Object.assign(existingModel, update.data);\n        } else {\n          neuralData.models.push({\n            id: update.modelId,\n            ...update.data,\n            createdAt: update.timestamp,\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Apply analysis-specific updates\n   */\n  applyAnalysisUpdates(groupedUpdates) {\n    const analysisData = this.ui.enhancedViews?.viewData?.get('analysis');\n    if (!analysisData) return;\n\n    // Handle performance report updates\n    const reportUpdates = groupedUpdates.get('performance_report');\n    if (reportUpdates) {\n      reportUpdates.forEach((update) => {\n        analysisData.reports.unshift({\n          id: update.reportId || `report_${update.timestamp}`,\n          ...update.data,\n          timestamp: update.timestamp,\n        });\n\n        // Keep only last 50 reports\n        if (analysisData.reports.length > 50) {\n          analysisData.reports = analysisData.reports.slice(0, 50);\n        }\n      });\n    }\n\n    // Handle metrics updates\n    const metricsUpdates = groupedUpdates.get('metrics_update');\n    if (metricsUpdates) {\n      metricsUpdates.forEach((update) => {\n        analysisData.metrics.push({\n          ...update.data,\n          timestamp: update.timestamp,\n        });\n\n        // Keep only last 100 metric points\n        if (analysisData.metrics.length > 100) {\n          analysisData.metrics.shift();\n        }\n      });\n    }\n  }\n\n  /**\n   * Apply tools-specific updates\n   */\n  applyToolsUpdates(groupedUpdates) {\n    // Handle execution updates\n    const executionUpdates = groupedUpdates.get('execution_start');\n    if (executionUpdates) {\n      executionUpdates.forEach((update) => {\n        this.ui.addLog('info', `🔧 Started: ${update.toolName}`);\n      });\n    }\n\n    const completionUpdates = groupedUpdates.get('execution_complete');\n    if (completionUpdates) {\n      completionUpdates.forEach((update) => {\n        this.ui.addLog('success', `✅ Completed: ${update.toolName}`);\n\n        // Show result summary if available\n        if (update.result && update.result.summary) {\n          this.ui.addLog('info', `📋 ${update.result.summary}`);\n        }\n      });\n    }\n\n    const errorUpdates = groupedUpdates.get('execution_error');\n    if (errorUpdates) {\n      errorUpdates.forEach((update) => {\n        this.ui.addLog('error', `❌ Failed: ${update.toolName} - ${update.error}`);\n      });\n    }\n  }\n\n  /**\n   * Apply orchestration-specific updates\n   */\n  applyOrchestrationUpdates(groupedUpdates) {\n    // Handle swarm updates\n    const swarmUpdates = groupedUpdates.get('swarm_update');\n    if (swarmUpdates) {\n      swarmUpdates.forEach((update) => {\n        // Update swarm integration data\n        if (this.ui.swarmIntegration) {\n          this.ui.swarmIntegration.updateSwarmStatus();\n        }\n\n        this.ui.addLog('info', `🐝 Swarm ${update.swarmId}: ${update.status}`);\n      });\n    }\n  }\n\n  /**\n   * Apply memory-specific updates\n   */\n  applyMemoryUpdates(groupedUpdates) {\n    // Handle memory operation updates\n    const memoryUpdates = groupedUpdates.get('memory_update');\n    if (memoryUpdates) {\n      memoryUpdates.forEach((update) => {\n        // Update memory stats\n        if (this.ui.memoryStats) {\n          const namespace = this.ui.memoryStats.namespaces.find(\n            (ns) => ns.name === update.namespace,\n          );\n          if (namespace) {\n            // Update existing namespace stats\n            if (update.operation === 'store') {\n              namespace.entries++;\n            } else if (update.operation === 'delete') {\n              namespace.entries = Math.max(0, namespace.entries - 1);\n            }\n          }\n        }\n\n        this.ui.addLog('info', `💾 Memory ${update.operation} in ${update.namespace}`);\n      });\n    }\n  }\n\n  /**\n   * Apply generic updates for other views\n   */\n  applyGenericUpdates(viewName, groupedUpdates) {\n    // Log generic updates\n    groupedUpdates.forEach((updates, type) => {\n      updates.forEach((update) => {\n        this.ui.addLog('info', `📡 ${viewName}: ${type} update`);\n      });\n    });\n  }\n\n  /**\n   * Update related views based on tool execution\n   */\n  updateRelatedViews(toolName, result) {\n    // Map tool names to affected views\n    const toolViewMap = {\n      // Neural tools affect neural view\n      neural_train: ['neural'],\n      neural_predict: ['neural'],\n      neural_status: ['neural'],\n      model_save: ['neural'],\n      model_load: ['neural'],\n\n      // Analysis tools affect analysis view\n      performance_report: ['analysis'],\n      bottleneck_analyze: ['analysis'],\n      token_usage: ['analysis'],\n      benchmark_run: ['analysis'],\n\n      // Swarm tools affect orchestration view\n      swarm_init: ['orchestration'],\n      agent_spawn: ['orchestration'],\n      task_orchestrate: ['orchestration'],\n\n      // Memory tools affect memory view\n      memory_usage: ['memory'],\n      memory_search: ['memory'],\n      memory_backup: ['memory'],\n    };\n\n    const affectedViews = toolViewMap[toolName] || [];\n\n    affectedViews.forEach((viewName) => {\n      this.broadcastUpdate(viewName, {\n        type: 'tool_result',\n        toolName,\n        result,\n        timestamp: Date.now(),\n      });\n    });\n  }\n\n  /**\n   * Request UI refresh (throttled)\n   */\n  requestUIRefresh() {\n    if (this.refreshThrottle) return;\n\n    this.refreshThrottle = setTimeout(() => {\n      if (this.ui && typeof this.ui.render === 'function') {\n        this.ui.render();\n      }\n      this.refreshThrottle = null;\n    }, 50); // Throttle to max 20 FPS\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  startPerformanceMonitoring() {\n    setInterval(() => {\n      this.reportPerformanceMetrics();\n    }, 60000); // Report every minute\n  }\n\n  /**\n   * Report performance metrics\n   */\n  reportPerformanceMetrics() {\n    const avgLatency =\n      this.updateMetrics.updateLatency.length > 0\n        ? this.updateMetrics.updateLatency.reduce((a, b) => a + b, 0) /\n          this.updateMetrics.updateLatency.length\n        : 0;\n\n    const queueSizes = Array.from(this.updateQueues.values()).map((q) => q.length);\n    const totalQueueSize = queueSizes.reduce((a, b) => a + b, 0);\n\n    this.emit('performance_metrics', {\n      totalUpdates: this.updateMetrics.totalUpdates,\n      averageLatency: avgLatency,\n      batchedUpdates: this.updateMetrics.batchedUpdates,\n      droppedUpdates: this.updateMetrics.droppedUpdates,\n      totalQueueSize,\n      eventHistorySize: this.eventHistory.length,\n    });\n  }\n\n  /**\n   * Get system status\n   */\n  getStatus() {\n    const queueSizes = {};\n    this.updateQueues.forEach((queue, viewName) => {\n      queueSizes[viewName] = queue.length;\n    });\n\n    return {\n      subscribers: this.subscribers.size,\n      queueSizes,\n      metrics: this.updateMetrics,\n      eventHistorySize: this.eventHistory.length,\n      activeTimers: this.updateTimers.size,\n    };\n  }\n\n  /**\n   * Create progressive loading handler\n   */\n  createProgressiveLoader(viewName, dataLoader, options = {}) {\n    const { chunkSize = 10, delay = 100, onProgress = null, onComplete = null } = options;\n\n    return async () => {\n      try {\n        const data = await dataLoader();\n\n        if (!Array.isArray(data)) {\n          // Non-array data, load immediately\n          this.broadcastUpdate(viewName, {\n            type: 'data_loaded',\n            data,\n            timestamp: Date.now(),\n          });\n\n          if (onComplete) onComplete(data);\n          return;\n        }\n\n        // Progressive loading for arrays\n        for (let i = 0; i < data.length; i += chunkSize) {\n          const chunk = data.slice(i, i + chunkSize);\n\n          this.broadcastUpdate(viewName, {\n            type: 'data_chunk',\n            chunk,\n            progress: {\n              loaded: Math.min(i + chunkSize, data.length),\n              total: data.length,\n              percentage: Math.min(((i + chunkSize) / data.length) * 100, 100),\n            },\n            timestamp: Date.now(),\n          });\n\n          if (onProgress) {\n            onProgress({\n              loaded: Math.min(i + chunkSize, data.length),\n              total: data.length,\n              percentage: Math.min(((i + chunkSize) / data.length) * 100, 100),\n            });\n          }\n\n          // Small delay between chunks to prevent blocking\n          if (i + chunkSize < data.length) {\n            await new Promise((resolve) => setTimeout(resolve, delay));\n          }\n        }\n\n        if (onComplete) onComplete(data);\n      } catch (error) {\n        this.broadcastUpdate(viewName, {\n          type: 'data_error',\n          error: error.message,\n          timestamp: Date.now(),\n        });\n      }\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Clear all timers\n    this.updateTimers.forEach((timer) => clearTimeout(timer));\n    this.updateTimers.clear();\n\n    // Clear refresh throttle\n    if (this.refreshThrottle) {\n      clearTimeout(this.refreshThrottle);\n    }\n\n    // Clear all subscribers\n    this.subscribers.clear();\n\n    // Clear update queues\n    this.updateQueues.clear();\n\n    this.ui.addLog('info', 'Real-time update system cleaned up');\n  }\n}\n\nexport default RealtimeUpdateSystem;\n"],"names":["RealtimeUpdateSystem","ui","subscribers","Map","updateQueues","updateTimers","batchDelay","eventHistory","maxHistorySize","updateMetrics","totalUpdates","updateLatency","batchedUpdates","droppedUpdates","initializeSystem","setupSystemEvents","initializeUpdateQueues","startPerformanceMonitoring","addLog","subscribe","data","broadcastUpdate","type","toolName","executionId","timestamp","Date","now","result","updateRelatedViews","error","swarmId","status","namespace","operation","views","forEach","view","set","eventType","callback","has","Set","get","add","subs","delete","emit","push","length","shift","console","viewName","updateData","queue","id","Math","random","toString","substr","scheduleBatchedUpdate","existingTimer","clearTimeout","timer","setTimeout","processBatchedUpdates","startTime","groupedUpdates","groupUpdatesByType","applyUpdatesToView","latency","updates","grouped","update","applyNeuralUpdates","applyAnalysisUpdates","applyWorkflowUpdates","applyToolsUpdates","applyOrchestrationUpdates","applyMemoryUpdates","applyGenericUpdates","currentView","requestUIRefresh","neuralData","enhancedViews","viewData","trainingUpdates","existingJob","trainingJobs","find","job","jobId","Object","assign","modelUpdates","existingModel","models","model","modelId","createdAt","analysisData","reportUpdates","reports","unshift","reportId","slice","metricsUpdates","metrics","executionUpdates","completionUpdates","summary","errorUpdates","swarmUpdates","swarmIntegration","updateSwarmStatus","memoryUpdates","memoryStats","namespaces","ns","name","entries","max","toolViewMap","neural_train","neural_predict","neural_status","model_save","model_load","performance_report","bottleneck_analyze","token_usage","benchmark_run","swarm_init","agent_spawn","task_orchestrate","memory_usage","memory_search","memory_backup","affectedViews","refreshThrottle","render","setInterval","reportPerformanceMetrics","avgLatency","reduce","a","b","queueSizes","Array","from","values","map","q","totalQueueSize","averageLatency","eventHistorySize","getStatus","size","activeTimers","createProgressiveLoader","dataLoader","options","chunkSize","delay","onProgress","onComplete","isArray","i","chunk","progress","loaded","min","total","percentage","Promise","resolve","message","cleanup","clear"],"mappings":"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"}