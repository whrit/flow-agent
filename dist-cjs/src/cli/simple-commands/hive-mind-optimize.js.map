{"version":3,"sources":["../../../../src/cli/simple-commands/hive-mind-optimize.js"],"sourcesContent":["/**\n * Hive Mind Database Optimization Command\n *\n * Safe optimization of existing hive mind databases without breaking compatibility\n */\n\nimport { cwd, exit } from '../node-compat.js';\nimport path from 'path';\nimport { existsSync } from 'fs';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport {\n  optimizeHiveMindDatabase,\n  performMaintenance,\n  generateOptimizationReport,\n} from './hive-mind/db-optimizer.js';\n\n/**\n * Show help for hive-mind-optimize command\n */\nfunction showOptimizeHelp() {\n  console.log(`\n${chalk.yellow('🔧 Hive Mind Database Optimization')}\n\n${chalk.bold('USAGE:')}\n  claude-flow hive-mind-optimize [options]\n\n${chalk.bold('OPTIONS:')}\n  --auto              Run optimization without prompts\n  --vacuum            Vacuum database (requires exclusive access)\n  --clean-memory      Clean old memory entries\n  --archive-tasks     Archive completed tasks\n  --check-integrity   Run integrity check\n  --report            Generate optimization report only\n  --memory-days <n>   Memory retention days (default: 30)\n  --task-days <n>     Task retention days (default: 7)\n  --verbose           Show detailed output\n\n${chalk.bold('EXAMPLES:')}\n  ${chalk.gray('# Interactive optimization')}\n  claude-flow hive-mind-optimize\n\n  ${chalk.gray('# Auto-optimize with all features')}\n  claude-flow hive-mind-optimize --auto --vacuum --clean-memory --archive-tasks\n\n  ${chalk.gray('# Generate report only')}\n  claude-flow hive-mind-optimize --report\n\n  ${chalk.gray('# Custom retention periods')}\n  claude-flow hive-mind-optimize --clean-memory --memory-days 60 --task-days 14\n\n${chalk.bold('FEATURES:')}\n  ${chalk.cyan('🚀')} Performance indexes for faster queries\n  ${chalk.cyan('📊')} Query optimization and statistics\n  ${chalk.cyan('🧹')} Memory cleanup and archiving\n  ${chalk.cyan('📈')} Performance tracking tables\n  ${chalk.cyan('🔍')} Behavioral pattern analysis\n  ${chalk.cyan('💾')} Backward-compatible upgrades\n\n${chalk.bold('SAFETY:')}\n  • All changes are backward-compatible\n  • Existing data is preserved\n  • Automatic backups before major operations\n  • Rollback capability on errors\n`);\n}\n\n/**\n * Main optimization command handler\n */\nexport async function hiveMindOptimizeCommand(args, flags) {\n  // Show help if requested\n  if (flags.help || flags.h) {\n    showOptimizeHelp();\n    return;\n  }\n\n  // Check if hive mind is initialized\n  const hiveMindDir = path.join(cwd(), '.hive-mind');\n  const dbPath = path.join(hiveMindDir, 'hive.db');\n\n  if (!existsSync(dbPath)) {\n    console.error(chalk.red('Error: Hive Mind database not found'));\n    console.log('Run \"claude-flow hive-mind init\" first');\n    exit(1);\n  }\n\n  // Generate report only\n  if (flags.report) {\n    await generateReport(dbPath);\n    return;\n  }\n\n  // Auto mode or interactive\n  if (flags.auto) {\n    await runOptimization(dbPath, {\n      vacuum: flags.vacuum || false,\n      cleanMemory: flags['clean-memory'] || false,\n      archiveTasks: flags['archive-tasks'] || false,\n      checkIntegrity: flags['check-integrity'] || false,\n      memoryRetentionDays: flags['memory-days'] || 30,\n      taskRetentionDays: flags['task-days'] || 7,\n      verbose: flags.verbose || false,\n    });\n  } else {\n    await interactiveOptimization(dbPath, flags);\n  }\n}\n\n/**\n * Interactive optimization wizard\n */\nasync function interactiveOptimization(dbPath, flags) {\n  console.log(chalk.yellow('\\n🔧 Hive Mind Database Optimization Wizard\\n'));\n\n  // Generate current report\n  const report = await generateOptimizationReport(dbPath);\n\n  if (report) {\n    console.log(chalk.cyan('Current Database Status:'));\n    console.log(`  Schema Version: ${report.schemaVersion}`);\n    console.log(`  Tables: ${Object.keys(report.tables).length}`);\n    console.log(`  Indexes: ${report.indexes.length}`);\n\n    let totalSize = 0;\n    let totalRows = 0;\n    Object.entries(report.tables).forEach(([name, stats]) => {\n      totalSize += stats.sizeBytes;\n      totalRows += stats.rowCount;\n    });\n\n    console.log(`  Total Size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);\n    console.log(`  Total Rows: ${totalRows.toLocaleString()}`);\n    console.log('');\n  }\n\n  // Check what optimizations are needed\n  const schemaVersion = report?.schemaVersion || 1.0;\n  const needsOptimization = schemaVersion < 1.5;\n\n  if (!needsOptimization) {\n    console.log(chalk.green('✓ Database is already fully optimized!\\n'));\n\n    const { maintenance } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'maintenance',\n        message: 'Would you like to perform maintenance tasks?',\n        default: true,\n      },\n    ]);\n\n    if (!maintenance) {\n      console.log(chalk.gray('No changes made.'));\n      return;\n    }\n  } else {\n    console.log(\n      chalk.yellow(`⚠ Database can be optimized from version ${schemaVersion} to 1.5\\n`),\n    );\n  }\n\n  // Ask for optimization options\n  const answers = await inquirer.prompt([\n    {\n      type: 'checkbox',\n      name: 'operations',\n      message: 'Select operations to perform:',\n      choices: [\n        {\n          name: 'Apply performance optimizations',\n          value: 'optimize',\n          checked: needsOptimization,\n          disabled: !needsOptimization,\n        },\n        {\n          name: 'Clean old memory entries',\n          value: 'cleanMemory',\n          checked: true,\n        },\n        {\n          name: 'Archive completed tasks',\n          value: 'archiveTasks',\n          checked: true,\n        },\n        {\n          name: 'Vacuum database (requires exclusive access)',\n          value: 'vacuum',\n          checked: false,\n        },\n        {\n          name: 'Check database integrity',\n          value: 'checkIntegrity',\n          checked: true,\n        },\n      ],\n    },\n    {\n      type: 'number',\n      name: 'memoryDays',\n      message: 'Memory retention days:',\n      default: 30,\n      when: (answers) => answers.operations.includes('cleanMemory'),\n    },\n    {\n      type: 'number',\n      name: 'taskDays',\n      message: 'Task retention days:',\n      default: 7,\n      when: (answers) => answers.operations.includes('archiveTasks'),\n    },\n    {\n      type: 'confirm',\n      name: 'confirm',\n      message: 'Proceed with optimization?',\n      default: true,\n    },\n  ]);\n\n  if (!answers.confirm) {\n    console.log(chalk.gray('Optimization cancelled.'));\n    return;\n  }\n\n  // Create backup if doing major operations\n  if (answers.operations.includes('optimize') || answers.operations.includes('vacuum')) {\n    console.log(chalk.blue('\\n📦 Creating backup...'));\n    await createBackup(dbPath);\n  }\n\n  // Run optimization\n  const options = {\n    vacuum: answers.operations.includes('vacuum'),\n    cleanMemory: answers.operations.includes('cleanMemory'),\n    archiveTasks: answers.operations.includes('archiveTasks'),\n    checkIntegrity: answers.operations.includes('checkIntegrity'),\n    memoryRetentionDays: answers.memoryDays || 30,\n    taskRetentionDays: answers.taskDays || 7,\n    verbose: flags.verbose || false,\n  };\n\n  await runOptimization(dbPath, options);\n}\n\n/**\n * Run database optimization\n */\nasync function runOptimization(dbPath, options) {\n  console.log(chalk.blue('\\n🚀 Starting optimization...\\n'));\n\n  // Run schema optimization\n  const result = await optimizeHiveMindDatabase(dbPath, options);\n\n  if (!result.success) {\n    console.error(chalk.red('\\n❌ Optimization failed:', result.error));\n    exit(1);\n  }\n\n  // Run maintenance tasks\n  if (options.cleanMemory || options.archiveTasks || options.checkIntegrity) {\n    console.log(chalk.blue('\\n🧹 Running maintenance tasks...\\n'));\n    await performMaintenance(dbPath, options);\n  }\n\n  // Generate final report\n  console.log(chalk.blue('\\n📊 Generating optimization report...\\n'));\n  await generateReport(dbPath);\n\n  console.log(chalk.green('\\n✅ Optimization complete!\\n'));\n\n  // Show tips\n  console.log(chalk.bold('💡 Tips:'));\n  console.log('  • Monitor performance with: claude-flow hive-mind metrics');\n  console.log('  • Schedule regular maintenance: claude-flow hive-mind-optimize --auto');\n  console.log('  • Check swarm status: claude-flow hive-mind status');\n}\n\n/**\n * Generate and display optimization report\n */\nasync function generateReport(dbPath) {\n  const report = await generateOptimizationReport(dbPath);\n\n  if (!report) {\n    console.error(chalk.red('Failed to generate report'));\n    return;\n  }\n\n  console.log(chalk.bold('\\n📊 Database Optimization Report\\n'));\n  console.log(chalk.cyan('Schema Version:'), report.schemaVersion);\n  console.log(chalk.cyan('Indexes:'), report.indexes.length);\n\n  console.log(chalk.cyan('\\nTable Statistics:'));\n  Object.entries(report.tables).forEach(([name, stats]) => {\n    const sizeMB = (stats.sizeBytes / 1024 / 1024).toFixed(2);\n    console.log(`  ${name}: ${stats.rowCount.toLocaleString()} rows (${sizeMB} MB)`);\n  });\n\n  if (report.performance.avgTaskCompletionMinutes > 0) {\n    console.log(chalk.cyan('\\nPerformance Metrics:'));\n    console.log(\n      `  Avg Task Completion: ${report.performance.avgTaskCompletionMinutes.toFixed(1)} minutes`,\n    );\n  }\n\n  // Optimization suggestions\n  console.log(chalk.cyan('\\nOptimization Status:'));\n  if (report.schemaVersion >= 1.5) {\n    console.log(chalk.green('  ✓ Database is fully optimized'));\n  } else {\n    console.log(chalk.yellow(`  ⚠ Can be upgraded from v${report.schemaVersion} to v1.5`));\n    console.log(chalk.gray('    Run: claude-flow hive-mind-optimize'));\n  }\n\n  // Check for large tables\n  const largeMemoryTable = report.tables.collective_memory?.rowCount > 10000;\n  const largeTaskTable = report.tables.tasks?.rowCount > 50000;\n\n  if (largeMemoryTable || largeTaskTable) {\n    console.log(chalk.cyan('\\nMaintenance Recommendations:'));\n    if (largeMemoryTable) {\n      console.log(chalk.yellow('  • Consider cleaning old memory entries'));\n    }\n    if (largeTaskTable) {\n      console.log(chalk.yellow('  • Consider archiving completed tasks'));\n    }\n  }\n}\n\n/**\n * Create database backup\n */\nasync function createBackup(dbPath) {\n  try {\n    const { execSync } = await import('child_process');\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupPath = dbPath.replace('.db', `-backup-${timestamp}.db`);\n\n    execSync(`cp \"${dbPath}\" \"${backupPath}\"`);\n    console.log(chalk.green(`✓ Backup created: ${path.basename(backupPath)}`));\n\n    return backupPath;\n  } catch (error) {\n    console.error(chalk.yellow('⚠ Backup failed:', error.message));\n    const { proceed } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'proceed',\n        message: 'Continue without backup?',\n        default: false,\n      },\n    ]);\n\n    if (!proceed) {\n      exit(1);\n    }\n  }\n}\n\n// Export for CLI\nexport default hiveMindOptimizeCommand;\n"],"names":["cwd","exit","path","existsSync","chalk","inquirer","optimizeHiveMindDatabase","performMaintenance","generateOptimizationReport","showOptimizeHelp","console","log","yellow","bold","gray","cyan","hiveMindOptimizeCommand","args","flags","help","h","hiveMindDir","join","dbPath","error","red","report","generateReport","auto","runOptimization","vacuum","cleanMemory","archiveTasks","checkIntegrity","memoryRetentionDays","taskRetentionDays","verbose","interactiveOptimization","schemaVersion","Object","keys","tables","length","indexes","totalSize","totalRows","entries","forEach","name","stats","sizeBytes","rowCount","toFixed","toLocaleString","needsOptimization","green","maintenance","prompt","type","message","default","answers","choices","value","checked","disabled","when","operations","includes","confirm","blue","createBackup","options","memoryDays","taskDays","result","success","sizeMB","performance","avgTaskCompletionMinutes","largeMemoryTable","collective_memory","largeTaskTable","tasks","execSync","timestamp","Date","toISOString","replace","backupPath","basename","proceed"],"mappings":"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"}