{"version":3,"sources":["../../../../src/cli/simple-commands/memory.js"],"sourcesContent":["// memory.js - Memory management commands\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport { getUnifiedMemory } from '../../memory/unified-memory-manager.js';\n\nexport async function memoryCommand(subArgs, flags) {\n  const memorySubcommand = subArgs[0];\n  const memoryStore = './memory/memory-store.json';\n  \n  // Extract namespace from flags or subArgs\n  const namespace = flags?.namespace || flags?.ns || getNamespaceFromArgs(subArgs) || 'default';\n\n  // Helper to load memory data\n  async function loadMemory() {\n    try {\n      const content = await fs.readFile(memoryStore, 'utf8');\n      return JSON.parse(content);\n    } catch {\n      return {};\n    }\n  }\n\n  // Helper to save memory data\n  async function saveMemory(data) {\n    await fs.mkdir('./memory', { recursive: true });\n    await fs.writeFile(memoryStore, JSON.stringify(data, null, 2, 'utf8'));\n  }\n\n  switch (memorySubcommand) {\n    case 'store':\n      await storeMemory(subArgs, loadMemory, saveMemory, namespace);\n      break;\n\n    case 'query':\n      await queryMemory(subArgs, loadMemory, namespace);\n      break;\n\n    case 'stats':\n      await showMemoryStats(loadMemory);\n      break;\n\n    case 'export':\n      await exportMemory(subArgs, loadMemory, namespace);\n      break;\n\n    case 'import':\n      await importMemory(subArgs, saveMemory, loadMemory);\n      break;\n\n    case 'clear':\n      await clearMemory(subArgs, saveMemory, namespace);\n      break;\n\n    case 'list':\n      await listNamespaces(loadMemory);\n      break;\n\n    default:\n      showMemoryHelp();\n  }\n}\n\nasync function storeMemory(subArgs, loadMemory, saveMemory, namespace) {\n  const key = subArgs[1];\n  const value = subArgs.slice(2).join(' ');\n\n  if (!key || !value) {\n    printError('Usage: memory store <key> <value> [--namespace <ns>]');\n    return;\n  }\n\n  try {\n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      data[namespace] = [];\n    }\n\n    // Remove existing entry with same key\n    data[namespace] = data[namespace].filter((e) => e.key !== key);\n\n    // Add new entry\n    data[namespace].push({\n      key,\n      value,\n      namespace,\n      timestamp: Date.now(),\n    });\n\n    await saveMemory(data);\n    printSuccess('Stored successfully');\n    console.log(`üìù Key: ${key}`);\n    console.log(`üì¶ Namespace: ${namespace}`);\n    console.log(`üíæ Size: ${new TextEncoder().encode(value).length} bytes`);\n  } catch (err) {\n    printError(`Failed to store: ${err.message}`);\n  }\n}\n\nasync function queryMemory(subArgs, loadMemory, namespace) {\n  const search = subArgs.slice(1).join(' ');\n\n  if (!search) {\n    printError('Usage: memory query <search> [--namespace <ns>]');\n    return;\n  }\n\n  try {\n    const data = await loadMemory();\n    const results = [];\n\n    for (const [ns, entries] of Object.entries(data)) {\n      if (namespace && ns !== namespace) continue;\n\n      for (const entry of entries) {\n        if (entry.key.includes(search) || entry.value.includes(search)) {\n          results.push(entry);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      printWarning('No results found');\n      return;\n    }\n\n    printSuccess(`Found ${results.length} results:`);\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp - a.timestamp);\n\n    for (const entry of results.slice(0, 10)) {\n      console.log(`\\nüìå ${entry.key}`);\n      console.log(`   Namespace: ${entry.namespace}`);\n      console.log(\n        `   Value: ${entry.value.substring(0, 100)}${entry.value.length > 100 ? '...' : ''}`,\n      );\n      console.log(`   Stored: ${new Date(entry.timestamp).toLocaleString()}`);\n    }\n\n    if (results.length > 10) {\n      console.log(`\\n... and ${results.length - 10} more results`);\n    }\n  } catch (err) {\n    printError(`Failed to query: ${err.message}`);\n  }\n}\n\nasync function showMemoryStats(loadMemory) {\n  try {\n    const data = await loadMemory();\n    let totalEntries = 0;\n    const namespaceStats = {};\n\n    for (const [namespace, entries] of Object.entries(data)) {\n      namespaceStats[namespace] = entries.length;\n      totalEntries += entries.length;\n    }\n\n    printSuccess('Memory Bank Statistics:');\n    console.log(`   Total Entries: ${totalEntries}`);\n    console.log(`   Namespaces: ${Object.keys(data).length}`);\n    console.log(\n      `   Size: ${(new TextEncoder().encode(JSON.stringify(data)).length / 1024).toFixed(2)} KB`,\n    );\n\n    if (Object.keys(data).length > 0) {\n      console.log('\\nüìÅ Namespace Breakdown:');\n      for (const [namespace, count] of Object.entries(namespaceStats)) {\n        console.log(`   ${namespace}: ${count} entries`);\n      }\n    }\n  } catch (err) {\n    printError(`Failed to get stats: ${err.message}`);\n  }\n}\n\nasync function exportMemory(subArgs, loadMemory, namespace) {\n  const filename = subArgs[1] || `memory-export-${Date.now()}.json`;\n\n  try {\n    const data = await loadMemory();\n\n    let exportData = data;\n    if (namespace) {\n      exportData = { [namespace]: data[namespace] || [] };\n    }\n\n    await fs.writeFile(filename, JSON.stringify(exportData, null, 2, 'utf8'));\n    printSuccess(`Memory exported to ${filename}`);\n\n    let totalEntries = 0;\n    for (const entries of Object.values(exportData)) {\n      totalEntries += entries.length;\n    }\n    console.log(\n      `üì¶ Exported ${totalEntries} entries from ${Object.keys(exportData).length} namespace(s)`,\n    );\n  } catch (err) {\n    printError(`Failed to export memory: ${err.message}`);\n  }\n}\n\nasync function importMemory(subArgs, saveMemory, loadMemory) {\n  const filename = subArgs[1];\n\n  if (!filename) {\n    printError('Usage: memory import <filename>');\n    return;\n  }\n\n  try {\n    const importContent = await fs.readFile(filename, 'utf8');\n    const importData = JSON.parse(importContent);\n\n    // Load existing memory\n    const existingData = await loadMemory();\n\n    // Merge imported data\n    let totalImported = 0;\n    for (const [namespace, entries] of Object.entries(importData)) {\n      if (!existingData[namespace]) {\n        existingData[namespace] = [];\n      }\n\n      // Add entries that don't already exist (by key)\n      const existingKeys = new Set(existingData[namespace].map((e) => e.key));\n      const newEntries = entries.filter((e) => !existingKeys.has(e.key));\n\n      existingData[namespace].push(...newEntries);\n      totalImported += newEntries.length;\n    }\n\n    await saveMemory(existingData);\n    printSuccess(`Imported ${totalImported} new entries from ${filename}`);\n  } catch (err) {\n    printError(`Failed to import memory: ${err.message}`);\n  }\n}\n\nasync function clearMemory(subArgs, saveMemory, namespace) {\n  if (!namespace || namespace === 'default') {\n    const nsFromArgs = getNamespaceFromArgs(subArgs);\n    if (!nsFromArgs) {\n      printError('Usage: memory clear --namespace <namespace>');\n      printWarning('This will clear all entries in the specified namespace');\n      return;\n    }\n    namespace = nsFromArgs;\n  }\n\n  try {\n    // Helper to load memory data\n    async function loadMemory() {\n      try {\n        const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n        return JSON.parse(content);\n      } catch {\n        return {};\n      }\n    }\n    \n    const data = await loadMemory();\n\n    if (!data[namespace]) {\n      printWarning(`Namespace '${namespace}' does not exist`);\n      return;\n    }\n\n    const entryCount = data[namespace].length;\n    delete data[namespace];\n\n    await saveMemory(data);\n    printSuccess(`Cleared ${entryCount} entries from namespace '${namespace}'`);\n  } catch (err) {\n    printError(`Failed to clear memory: ${err.message}`);\n  }\n}\n\nasync function listNamespaces(loadMemory) {\n  try {\n    const data = await loadMemory();\n    const namespaces = Object.keys(data);\n\n    if (namespaces.length === 0) {\n      printWarning('No namespaces found');\n      return;\n    }\n\n    printSuccess('Available namespaces:');\n    for (const namespace of namespaces) {\n      const count = data[namespace].length;\n      console.log(`  ${namespace} (${count} entries)`);\n    }\n  } catch (err) {\n    printError(`Failed to list namespaces: ${err.message}`);\n  }\n}\n\nfunction getNamespaceFromArgs(subArgs) {\n  const namespaceIndex = subArgs.indexOf('--namespace');\n  if (namespaceIndex !== -1 && namespaceIndex + 1 < subArgs.length) {\n    return subArgs[namespaceIndex + 1];\n  }\n\n  const nsIndex = subArgs.indexOf('--ns');\n  if (nsIndex !== -1 && nsIndex + 1 < subArgs.length) {\n    return subArgs[nsIndex + 1];\n  }\n\n  return null;\n}\n\n// Helper to load memory data (needed for import function)\nasync function loadMemory() {\n  try {\n    const content = await fs.readFile('./memory/memory-store.json', 'utf8');\n    return JSON.parse(content);\n  } catch {\n    return {};\n  }\n}\n\nfunction showMemoryHelp() {\n  console.log('Memory commands:');\n  console.log('  store <key> <value>    Store a key-value pair');\n  console.log('  query <search>         Search for entries');\n  console.log('  stats                  Show memory statistics');\n  console.log('  export [filename]      Export memory to file');\n  console.log('  import <filename>      Import memory from file');\n  console.log('  clear --namespace <ns> Clear a namespace');\n  console.log('  list                   List all namespaces');\n  console.log();\n  console.log('Options:');\n  console.log('  --namespace <ns>       Specify namespace for operations');\n  console.log('  --ns <ns>              Short form of --namespace');\n  console.log();\n  console.log('Examples:');\n  console.log('  memory store previous_work \"Research findings from yesterday\"');\n  console.log('  memory query research --namespace sparc');\n  console.log('  memory export backup.json --namespace default');\n  console.log('  memory import project-memory.json');\n  console.log('  memory stats');\n}\n"],"names":["printSuccess","printError","printWarning","promises","fs","memoryCommand","subArgs","flags","memorySubcommand","memoryStore","namespace","ns","getNamespaceFromArgs","loadMemory","content","readFile","JSON","parse","saveMemory","data","mkdir","recursive","writeFile","stringify","storeMemory","queryMemory","showMemoryStats","exportMemory","importMemory","clearMemory","listNamespaces","showMemoryHelp","key","value","slice","join","filter","e","push","timestamp","Date","now","console","log","TextEncoder","encode","length","err","message","search","results","entries","Object","entry","includes","sort","a","b","substring","toLocaleString","totalEntries","namespaceStats","keys","toFixed","count","filename","exportData","values","importContent","importData","existingData","totalImported","existingKeys","Set","map","newEntries","has","nsFromArgs","entryCount","namespaces","namespaceIndex","indexOf","nsIndex"],"mappings":"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"}