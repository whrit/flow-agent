{"version":3,"sources":["../../../../src/cli/simple-commands/pair-autofix-only.js"],"sourcesContent":["/**\n * Pair Programming with Recursive Auto-Fix Stream Chaining\n * Automatically fixes and improves code until verification threshold is met\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { spawn, exec } from 'child_process';\nimport { promisify } from 'util';\nimport readline from 'readline';\n\nconst execAsync = promisify(exec);\n\nclass AutoFixPairSession {\n  constructor(options = {}) {\n    this.sessionId = `pair_${Date.now()}`;\n    this.mode = options.mode || 'switch';\n    this.agent = options.agent || 'auto';\n    this.verify = options.verify || false;\n    this.autoFix = options.autoFix || false; // New: Enable recursive auto-fix\n    this.test = options.test || false;\n    this.threshold = options.threshold || 0.95;\n    this.maxIterations = options.maxIterations || 5; // Max fix attempts\n    this.startTime = new Date();\n    this.status = 'active';\n    this.currentRole = 'driver';\n    this.verificationScores = [];\n    this.fixHistory = [];\n    this.currentIteration = 0;\n    this.rl = null;\n  }\n\n  async start() {\n    await this.saveSession();\n    this.showWelcome();\n    \n    if (this.verify && this.autoFix) {\n      console.log('\\nüîÑ Auto-Fix Mode Enabled');\n      console.log('  ‚Ä¢ Will automatically fix issues until threshold is met');\n      console.log(`  ‚Ä¢ Maximum iterations: ${this.maxIterations}`);\n      console.log(`  ‚Ä¢ Target threshold: ${this.threshold}`);\n      \n      // Start the recursive fix loop\n      await this.recursiveFixLoop();\n    } else if (this.verify) {\n      await this.runVerification();\n    }\n    \n    await this.startInteractiveMode();\n  }\n\n  /**\n   * Recursive stream-chaining loop that fixes issues until threshold is met\n   */\n  async recursiveFixLoop() {\n    console.log('\\nüöÄ Starting Recursive Auto-Fix Loop...');\n    console.log('‚îÅ'.repeat(50));\n    \n    let score = 0;\n    this.currentIteration = 0;\n    \n    while (score < this.threshold && this.currentIteration < this.maxIterations) {\n      this.currentIteration++;\n      console.log(`\\nüìç Iteration ${this.currentIteration}/${this.maxIterations}`);\n      \n      // Step 1: Run verification\n      const verificationResult = await this.runVerification();\n      score = verificationResult.score;\n      \n      if (score >= this.threshold) {\n        console.log(`\\n‚ú® Threshold met! Score: ${score.toFixed(2)} >= ${this.threshold}`);\n        break;\n      }\n      \n      // Step 2: Identify issues\n      const issues = this.identifyIssues(verificationResult);\n      console.log(`\\nüîç Issues found: ${issues.length}`);\n      issues.forEach(issue => console.log(`  ‚Ä¢ ${issue.type}: ${issue.description}`));\n      \n      // Step 3: Create fix chain\n      if (issues.length > 0) {\n        console.log('\\nüîó Creating stream-chain to fix issues...');\n        await this.createFixChain(issues);\n      }\n      \n      // Step 4: Wait a bit before next iteration\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \n    if (score < this.threshold) {\n      console.log(`\\n‚ö†Ô∏è Max iterations reached. Final score: ${score.toFixed(2)}`);\n      console.log('üí° Manual intervention may be required.');\n    } else {\n      console.log(`\\nüéâ Success! All issues fixed. Final score: ${score.toFixed(2)}`);\n    }\n    \n    // Show fix history\n    this.showFixHistory();\n  }\n\n  /**\n   * Create a stream chain to fix identified issues\n   */\n  async createFixChain(issues) {\n    const chains = [];\n    \n    for (const issue of issues) {\n      let chainCommand = null;\n      \n      switch (issue.type) {\n        case 'lint':\n          chainCommand = this.createLintFixChain();\n          break;\n        case 'typecheck':\n          chainCommand = this.createTypeFixChain();\n          break;\n        case 'build':\n          chainCommand = this.createBuildFixChain();\n          break;\n        case 'test':\n          chainCommand = this.createTestFixChain();\n          break;\n      }\n      \n      if (chainCommand) {\n        chains.push(chainCommand);\n      }\n    }\n    \n    // Execute fix chains\n    for (const chain of chains) {\n      console.log(`  üîß Executing: ${chain.description}`);\n      await this.executeChain(chain);\n      \n      // Record fix attempt\n      this.fixHistory.push({\n        iteration: this.currentIteration,\n        type: chain.type,\n        command: chain.command,\n        timestamp: new Date()\n      });\n    }\n  }\n\n  /**\n   * Create lint fix chain using stream-chaining\n   */\n  createLintFixChain() {\n    return {\n      type: 'lint',\n      description: 'Auto-fix linting issues',\n      command: async () => {\n        console.log('    Running: npm run lint --fix');\n        \n        // First, try auto-fix\n        try {\n          await execAsync('npm run lint -- --fix 2>&1 || true');\n          console.log('    ‚úÖ Linting auto-fix applied');\n        } catch (error) {\n          console.log('    ‚ö†Ô∏è Some linting issues require manual fixes');\n        }\n        \n        // If complex issues remain, use Claude stream chain\n        const { stdout: lintOutput } = await execAsync('npm run lint 2>&1 || true');\n        if (lintOutput.includes('error')) {\n          console.log('    ü§ñ Using Claude to fix remaining issues...');\n          await this.executeClaudeFixChain('lint', lintOutput);\n        }\n      }\n    };\n  }\n\n  /**\n   * Create TypeScript fix chain\n   */\n  createTypeFixChain() {\n    return {\n      type: 'typecheck',\n      description: 'Fix TypeScript errors',\n      command: async () => {\n        console.log('    Analyzing TypeScript errors...');\n        \n        // Get type errors\n        const { stdout: typeErrors } = await execAsync('npm run typecheck 2>&1 || true');\n        \n        if (typeErrors.includes('error')) {\n          console.log('    ü§ñ Using Claude to fix type errors...');\n          await this.executeClaudeFixChain('typescript', typeErrors);\n        }\n      }\n    };\n  }\n\n  /**\n   * Create build fix chain\n   */\n  createBuildFixChain() {\n    return {\n      type: 'build',\n      description: 'Fix build errors',\n      command: async () => {\n        console.log('    Analyzing build errors...');\n        \n        const { stdout: buildErrors } = await execAsync('npm run build 2>&1 || true');\n        \n        if (buildErrors.includes('error')) {\n          console.log('    ü§ñ Using Claude to fix build errors...');\n          await this.executeClaudeFixChain('build', buildErrors);\n        }\n      }\n    };\n  }\n\n  /**\n   * Create test fix chain\n   */\n  createTestFixChain() {\n    return {\n      type: 'test',\n      description: 'Fix failing tests',\n      command: async () => {\n        console.log('    Analyzing test failures...');\n        \n        const { stdout: testOutput } = await execAsync('npm test 2>&1 || true');\n        \n        if (testOutput.includes('fail')) {\n          console.log('    ü§ñ Using Claude to fix test failures...');\n          await this.executeClaudeFixChain('test', testOutput);\n        }\n      }\n    };\n  }\n\n  /**\n   * Execute Claude stream chain to fix specific issues\n   */\n  async executeClaudeFixChain(type, errorOutput) {\n    const prompts = {\n      lint: `Fix these ESLint errors. Output only the corrected code:\\n\\n${errorOutput}`,\n      typescript: `Fix these TypeScript errors. Output only the corrected code:\\n\\n${errorOutput}`,\n      build: `Fix these build errors. Output only the corrected code:\\n\\n${errorOutput}`,\n      test: `Fix these test failures. Output only the corrected code:\\n\\n${errorOutput}`\n    };\n\n    return new Promise((resolve, reject) => {\n      // Create stream chain using Claude\n      const claude = spawn('claude', [\n        '-p',\n        '--output-format', 'stream-json',\n        prompts[type]\n      ]);\n\n      let output = '';\n      \n      claude.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n\n      claude.on('close', (code) => {\n        if (code === 0) {\n          // Parse and apply fixes\n          this.applyClaudeFixes(type, output);\n          resolve();\n        } else {\n          reject(new Error(`Claude fix chain failed with code ${code}`));\n        }\n      });\n\n      claude.on('error', (error) => {\n        console.error('    ‚ùå Claude chain error:', error.message);\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Apply fixes suggested by Claude\n   */\n  async applyClaudeFixes(type, streamOutput) {\n    try {\n      // Extract content from stream-json output\n      const fixes = this.extractFixesFromStream(streamOutput);\n      \n      if (fixes && fixes.length > 0) {\n        console.log(`    üìù Applying ${fixes.length} fixes...`);\n        \n        // Apply each fix (simplified - in production would need file mapping)\n        for (const fix of fixes) {\n          // This is simplified - real implementation would parse and apply fixes\n          console.log(`      ‚Ä¢ Fixed: ${fix.file || type}`);\n        }\n        \n        console.log('    ‚úÖ Fixes applied successfully');\n      }\n    } catch (error) {\n      console.error('    ‚ö†Ô∏è Could not apply all fixes:', error.message);\n    }\n  }\n\n  /**\n   * Extract fixes from Claude's stream-json output\n   */\n  extractFixesFromStream(streamOutput) {\n    const fixes = [];\n    const lines = streamOutput.split('\\n').filter(line => line.trim());\n    \n    for (const line of lines) {\n      try {\n        const json = JSON.parse(line);\n        \n        // Look for code fixes in the stream\n        if (json.type === 'message' && json.message && json.message.content) {\n          for (const item of json.message.content) {\n            if (item.type === 'text' && item.text) {\n              // Parse for code blocks or fix instructions\n              const codeMatch = item.text.match(/```[\\w]*\\n([\\s\\S]*?)```/g);\n              if (codeMatch) {\n                fixes.push({\n                  type: 'code',\n                  content: codeMatch[0].replace(/```[\\w]*\\n|```/g, '')\n                });\n              }\n            }\n          }\n        }\n      } catch (e) {\n        // Skip non-JSON lines\n      }\n    }\n    \n    return fixes;\n  }\n\n  /**\n   * Execute a fix chain command\n   */\n  async executeChain(chain) {\n    try {\n      await chain.command();\n    } catch (error) {\n      console.error(`    ‚ùå Fix failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Identify issues from verification results\n   */\n  identifyIssues(verificationResult) {\n    const issues = [];\n    \n    if (verificationResult.results) {\n      for (const check of verificationResult.results) {\n        if (check.score < 0.8) {\n          issues.push({\n            type: check.name.toLowerCase().replace(' check', '').replace(' ', ''),\n            description: `Score: ${check.score.toFixed(2)}`,\n            severity: check.score < 0.5 ? 'high' : 'medium'\n          });\n        }\n      }\n    }\n    \n    return issues;\n  }\n\n  /**\n   * Run verification and return detailed results\n   */\n  async runVerification() {\n    console.log('\\nüîç Running verification check...');\n    \n    const checks = [\n      { \n        name: 'Type Check', \n        command: 'npm run typecheck 2>&1 || true',\n        weight: 0.4\n      },\n      { \n        name: 'Linting', \n        command: 'npm run lint 2>&1 || true',\n        weight: 0.3\n      },\n      { \n        name: 'Build', \n        command: 'npm run build 2>&1 || true',\n        weight: 0.3\n      }\n    ];\n    \n    const results = [];\n    let totalScore = 0;\n    let totalWeight = 0;\n    \n    for (const check of checks) {\n      try {\n        const { stdout, stderr } = await execAsync(check.command);\n        const output = stdout + stderr;\n        \n        let score = 1.0;\n        if (output.toLowerCase().includes('error')) {\n          const errorCount = (output.match(/error/gi) || []).length;\n          score = Math.max(0.2, 1.0 - (errorCount * 0.1));\n        } else if (output.toLowerCase().includes('warning')) {\n          const warningCount = (output.match(/warning/gi) || []).length;\n          score = Math.max(0.7, 1.0 - (warningCount * 0.05));\n        }\n        \n        totalScore += score * check.weight;\n        totalWeight += check.weight;\n        \n        const icon = score >= 0.8 ? '‚úÖ' : score >= 0.5 ? '‚ö†Ô∏è' : '‚ùå';\n        console.log(`  ${icon} ${check.name}: ${score.toFixed(2)}`);\n        \n        results.push({ \n          name: check.name, \n          score, \n          output: output.slice(0, 200),\n          errors: (output.match(/error/gi) || []).length,\n          warnings: (output.match(/warning/gi) || []).length\n        });\n      } catch (error) {\n        console.log(`  ‚ùå ${check.name}: 0.00 (failed)`);\n        results.push({ name: check.name, score: 0, error: error.message });\n        totalWeight += check.weight;\n      }\n    }\n    \n    const averageScore = totalWeight > 0 ? totalScore / totalWeight : 0;\n    \n    console.log(`\\nüìä Verification Score: ${averageScore.toFixed(2)}/${this.threshold}`);\n    \n    const verificationResult = {\n      score: averageScore,\n      results,\n      timestamp: new Date(),\n      iteration: this.currentIteration\n    };\n    \n    this.verificationScores.push(verificationResult);\n    \n    return verificationResult;\n  }\n\n  /**\n   * Show fix history\n   */\n  showFixHistory() {\n    if (this.fixHistory.length > 0) {\n      console.log('\\nüìã Fix History:');\n      console.log('‚îÅ'.repeat(50));\n      \n      for (const fix of this.fixHistory) {\n        console.log(`  Iteration ${fix.iteration}: Fixed ${fix.type} at ${fix.timestamp.toLocaleTimeString()}`);\n      }\n      \n      console.log('‚îÅ'.repeat(50));\n      console.log(`  Total fixes applied: ${this.fixHistory.length}`);\n      console.log(`  Final iterations: ${this.currentIteration}`);\n    }\n  }\n\n  showWelcome() {\n    console.log('\\nüöÄ Starting Pair Programming Session');\n    console.log('‚îÅ'.repeat(50));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Mode: ${this.mode}`);\n    console.log(`Verification: ${this.verify ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log(`Auto-Fix: ${this.autoFix ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log(`Testing: ${this.test ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    \n    if (this.autoFix) {\n      console.log(`\\nüîÑ Recursive Auto-Fix Settings:`);\n      console.log(`  ‚Ä¢ Target threshold: ${this.threshold}`);\n      console.log(`  ‚Ä¢ Max iterations: ${this.maxIterations}`);\n      console.log(`  ‚Ä¢ Stream chaining: Enabled`);\n    }\n    \n    console.log('‚îÅ'.repeat(50));\n  }\n\n  async startInteractiveMode() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: '\\nüíª pair> '\n    });\n\n    console.log('\\nüí° Interactive mode active. Type /help for commands.\\n');\n    \n    this.showCommands();\n    this.rl.prompt();\n\n    this.rl.on('line', async (line) => {\n      const input = line.trim();\n      \n      if (input.startsWith('/')) {\n        await this.handleCommand(input);\n      } else if (input) {\n        console.log('ü§ñ AI: Processing your input...');\n      }\n      \n      this.rl.prompt();\n    });\n\n    this.rl.on('close', () => {\n      this.end();\n    });\n  }\n\n  showCommands() {\n    console.log('\\nüìù Session Commands:');\n    console.log('  /help      - Show available commands');\n    console.log('  /verify    - Run verification check');\n    console.log('  /autofix   - Start recursive auto-fix');\n    console.log('  /status    - Show session status');\n    console.log('  /metrics   - Show quality metrics');\n    console.log('  /history   - Show fix history');\n    console.log('  /test      - Run tests');\n    console.log('  /commit    - Commit with verification');\n    console.log('  /end       - End session');\n  }\n\n  async handleCommand(command) {\n    const [cmd] = command.split(' ');\n    \n    switch (cmd) {\n      case '/help':\n        this.showCommands();\n        break;\n        \n      case '/verify':\n        await this.runVerification();\n        break;\n        \n      case '/autofix':\n        await this.recursiveFixLoop();\n        break;\n        \n      case '/status':\n        await this.showStatus();\n        break;\n        \n      case '/metrics':\n        this.showMetrics();\n        break;\n        \n      case '/history':\n        this.showFixHistory();\n        break;\n        \n      case '/test':\n        await this.runTests();\n        break;\n        \n      case '/commit':\n        await this.commitWithVerification();\n        break;\n        \n      case '/end':\n      case '/exit':\n        await this.end();\n        process.exit(0);\n        break;\n        \n      default:\n        console.log(`‚ùå Unknown command: ${cmd}`);\n        console.log('üí° Type /help for available commands');\n    }\n  }\n\n  async showStatus() {\n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    \n    console.log('\\nüìä Session Status');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Duration: ${duration} minutes`);\n    console.log(`Auto-Fix: ${this.autoFix ? 'Enabled' : 'Disabled'}`);\n    console.log(`Fix Iterations: ${this.currentIteration}`);\n    console.log(`Fixes Applied: ${this.fixHistory.length}`);\n    \n    if (this.verificationScores.length > 0) {\n      const latest = this.verificationScores[this.verificationScores.length - 1];\n      console.log(`Latest Score: ${latest.score.toFixed(2)}`);\n    }\n  }\n\n  showMetrics() {\n    console.log('\\nüìà Quality Metrics');\n    console.log('‚îÅ'.repeat(40));\n    \n    if (this.verificationScores.length > 0) {\n      console.log('\\nScore Progression:');\n      this.verificationScores.forEach((v, i) => {\n        const bar = '‚ñà'.repeat(Math.floor(v.score * 20));\n        console.log(`  ${i + 1}. ${bar} ${v.score.toFixed(2)}`);\n      });\n      \n      // Show improvement\n      if (this.verificationScores.length > 1) {\n        const first = this.verificationScores[0].score;\n        const last = this.verificationScores[this.verificationScores.length - 1].score;\n        const improvement = ((last - first) * 100).toFixed(1);\n        console.log(`\\n  Improvement: +${improvement}%`);\n      }\n    }\n  }\n\n  async runTests() {\n    console.log('\\nüß™ Running tests...');\n    try {\n      const { stdout } = await execAsync('npm test 2>&1 || true');\n      const passed = stdout.includes('PASS');\n      console.log(`  ${passed ? '‚úÖ' : '‚ùå'} Tests ${passed ? 'passed' : 'failed'}`);\n      return passed;\n    } catch (error) {\n      console.log('  ‚ùå Test execution failed:', error.message);\n      return false;\n    }\n  }\n\n  async commitWithVerification() {\n    const result = await this.runVerification();\n    \n    if (result.score >= this.threshold) {\n      console.log('‚úÖ Verification passed! Ready to commit.');\n    } else {\n      console.log('‚ùå Verification failed!');\n      console.log('üí° Run /autofix to automatically fix issues');\n    }\n  }\n\n  async end() {\n    console.log('\\nüõë Ending pair programming session...');\n    \n    if (this.rl) this.rl.close();\n    \n    this.status = 'completed';\n    await this.saveSession();\n    \n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    console.log('\\n‚ú® Session Complete!');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Duration: ${duration} minutes`);\n    console.log(`Total Fixes: ${this.fixHistory.length}`);\n    console.log(`Final Iterations: ${this.currentIteration}`);\n    \n    if (this.verificationScores.length > 0) {\n      const final = this.verificationScores[this.verificationScores.length - 1];\n      console.log(`Final Score: ${final.score.toFixed(2)}`);\n    }\n    \n    console.log('\\nüëã Thanks for pair programming!\\n');\n  }\n\n  async saveSession() {\n    const sessionPath = '.claude-flow/sessions/pair';\n    await fs.mkdir(sessionPath, { recursive: true });\n    \n    const sessionData = {\n      id: this.sessionId,\n      mode: this.mode,\n      verify: this.verify,\n      autoFix: this.autoFix,\n      threshold: this.threshold,\n      startTime: this.startTime.toISOString(),\n      status: this.status,\n      verificationScores: this.verificationScores,\n      fixHistory: this.fixHistory,\n      iterations: this.currentIteration\n    };\n    \n    await fs.writeFile(\n      path.join(sessionPath, `${this.sessionId}.json`),\n      JSON.stringify(sessionData, null, 2)\n    );\n  }\n}\n\nasync function pairCommand(args = [], flags = {}) {\n  console.log('\\nüë• Pair Programming with Auto-Fix');\n  console.log('‚îÅ'.repeat(50));\n\n  if (flags.help || args.includes('--help')) {\n    showHelp();\n    return;\n  }\n\n  if (flags.start) {\n    const session = new AutoFixPairSession({\n      mode: flags.mode || 'switch',\n      verify: flags.verify || false,\n      autoFix: flags.autofix || flags.fix || false,\n      test: flags.test || false,\n      threshold: parseFloat(flags.threshold) || 0.95,\n      maxIterations: parseInt(flags.iterations) || 5\n    });\n    \n    return await session.start();\n  }\n\n  showHelp();\n}\n\nfunction showHelp() {\n  console.log(`\nüìö USAGE:\n  claude-flow pair [options]\n\n‚öôÔ∏è OPTIONS:\n  --start              Start a new pair programming session\n  --verify             Enable verification\n  --autofix, --fix     Enable recursive auto-fix with stream chaining\n  --threshold <n>      Target verification threshold (default: 0.95)\n  --iterations <n>     Max fix iterations (default: 5)\n  --test               Enable testing\n  --help               Show this help message\n\nüîÑ AUTO-FIX FEATURES:\n  ‚Ä¢ Recursive improvement loop\n  ‚Ä¢ Stream-chaining for intelligent fixes\n  ‚Ä¢ Automatic issue detection and resolution\n  ‚Ä¢ Lint auto-fix integration\n  ‚Ä¢ TypeScript error correction\n  ‚Ä¢ Build error resolution\n  ‚Ä¢ Test failure fixes\n\nüí° EXAMPLES:\n  # Basic session with auto-fix\n  claude-flow pair --start --verify --autofix\n  \n  # Custom threshold and iterations\n  claude-flow pair --start --verify --autofix --threshold 0.98 --iterations 10\n  \n  # With testing\n  claude-flow pair --start --verify --autofix --test\n\nüéØ HOW IT WORKS:\n  1. Run verification to identify issues\n  2. Create stream-chain to fix each issue type\n  3. Apply fixes automatically\n  4. Re-verify and repeat until threshold met\n  5. Show complete fix history\n\nüìä DURING SESSION:\n  /verify    - Manual verification\n  /autofix   - Start recursive fix loop\n  /history   - View fix history\n  /metrics   - Show improvement metrics\n  /status    - Current session status\n\nüìö For detailed documentation, see:\n  .claude/commands/pair/README.md\n`);\n}\n\nexport default pairCommand;"],"names":["fs","path","spawn","exec","promisify","readline","execAsync","AutoFixPairSession","options","sessionId","Date","now","mode","agent","verify","autoFix","test","threshold","maxIterations","startTime","status","currentRole","verificationScores","fixHistory","currentIteration","rl","start","saveSession","showWelcome","console","log","recursiveFixLoop","runVerification","startInteractiveMode","repeat","score","verificationResult","toFixed","issues","identifyIssues","length","forEach","issue","type","description","createFixChain","Promise","resolve","setTimeout","showFixHistory","chains","chainCommand","createLintFixChain","createTypeFixChain","createBuildFixChain","createTestFixChain","push","chain","executeChain","iteration","command","timestamp","error","stdout","lintOutput","includes","executeClaudeFixChain","typeErrors","buildErrors","testOutput","errorOutput","prompts","lint","typescript","build","reject","claude","output","on","data","toString","code","applyClaudeFixes","Error","message","streamOutput","fixes","extractFixesFromStream","fix","file","lines","split","filter","line","trim","json","JSON","parse","content","item","text","codeMatch","match","replace","e","results","check","name","toLowerCase","severity","checks","weight","totalScore","totalWeight","stderr","errorCount","Math","max","warningCount","icon","slice","errors","warnings","averageScore","toLocaleTimeString","createInterface","input","process","stdin","prompt","showCommands","startsWith","handleCommand","end","cmd","showStatus","showMetrics","runTests","commitWithVerification","exit","duration","floor","latest","v","i","bar","first","last","improvement","passed","result","close","final","sessionPath","mkdir","recursive","sessionData","id","toISOString","iterations","writeFile","join","stringify","pairCommand","args","flags","help","showHelp","session","autofix","parseFloat","parseInt"],"mappings":"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"}