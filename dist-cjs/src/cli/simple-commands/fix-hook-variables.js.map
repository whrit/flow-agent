{"version":3,"sources":["../../../../src/cli/simple-commands/fix-hook-variables.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Fix hook variable interpolation in Claude Code settings.json files\n * Addresses issue #249 - ${file} and ${command} variables not working\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { existsSync } from 'fs';\nimport chalk from 'chalk';\nimport { printSuccess, printError, printWarning } from '../utils.js';\n\n// Known working variable syntaxes based on Claude Code version\nconst VARIABLE_SYNTAXES = {\n  legacy: {\n    pattern: /\\$\\{(\\w+)\\}/g,\n    example: '${file}',\n    description: 'Legacy syntax (not working in 1.0.51+)',\n  },\n  environment: {\n    pattern: /\\$(\\w+)/g,\n    example: '$CLAUDE_FILE',\n    description: 'Environment variable syntax (unverified)',\n  },\n  jq: {\n    pattern: null,\n    example: 'jq parsing of JSON input',\n    description: 'Official Claude Code approach using jq',\n  },\n  wrapper: {\n    pattern: null,\n    example: 'Use wrapper script',\n    description: 'Wrapper script approach',\n  },\n};\n\n// Mapping of our variables to Claude Code environment variables\nconst VARIABLE_MAPPINGS = {\n  file: ['CLAUDE_EDITED_FILE', 'CLAUDE_FILE', 'EDITED_FILE'],\n  command: ['CLAUDE_COMMAND', 'COMMAND', 'CMD'],\n  tool: ['CLAUDE_TOOL', 'TOOL_NAME', 'TOOL'],\n};\n\n/**\n * Detect which variable syntax works with current Claude Code version\n */\nasync function detectWorkingSyntax() {\n  // Based on official Claude Code documentation and testing,\n  // JQ parsing is the recommended approach for Claude Code 1.0.51+\n  return 'jq';\n}\n\n/**\n * Transform hook command to use working variable syntax\n */\nfunction transformHookCommand(command, fromSyntax, toSyntax) {\n  if (fromSyntax === 'legacy' && toSyntax === 'environment') {\n    // Replace ${file} with $CLAUDE_EDITED_FILE\n    return command.replace(/\\$\\{(\\w+)\\}/g, (match, varName) => {\n      const mappings = VARIABLE_MAPPINGS[varName];\n      if (mappings && mappings[0]) {\n        return `$${mappings[0]}`;\n      }\n      return match; // Keep unchanged if no mapping\n    });\n  }\n\n  if (fromSyntax === 'legacy' && toSyntax === 'jq') {\n    // Transform to use jq parsing of JSON input\n    // Extract the actual command and wrap it with jq parsing\n    const fileVarMatch = command.match(/\\$\\{file\\}/);\n    const commandVarMatch = command.match(/\\$\\{command\\}/);\n\n    if (fileVarMatch) {\n      // Replace ${file} with jq extraction\n      const baseCommand = command.replace(/\\$\\{file\\}/g, '{}');\n      return `cat | jq -r '.tool_input.file_path // .tool_input.path // \"\"' | xargs -I {} ${baseCommand}`;\n    } else if (commandVarMatch) {\n      // Replace ${command} with jq extraction\n      const baseCommand = command.replace(/\\$\\{command\\}/g, '{}');\n      return `cat | jq -r '.tool_input.command // \"\"' | xargs -I {} ${baseCommand}`;\n    }\n\n    // Fallback for other variables\n    return `cat | jq -r '.' | xargs -I {} ${command.replace(/\\$\\{(\\w+)\\}/g, '{}')}`;\n  }\n\n  if (toSyntax === 'wrapper') {\n    // Generate wrapper script path\n    const scriptName = command.includes('post-edit')\n      ? 'post-edit-hook.sh'\n      : command.includes('pre-edit')\n        ? 'pre-edit-hook.sh'\n        : 'generic-hook.sh';\n    return `.claude/hooks/${scriptName}`;\n  }\n\n  return command;\n}\n\n/**\n * Create wrapper scripts for hooks\n */\nasync function createWrapperScripts(commands) {\n  const hooksDir = '.claude/hooks';\n  await fs.mkdir(hooksDir, { recursive: true });\n\n  const wrapperScripts = new Map();\n\n  for (const command of commands) {\n    if (command.includes('post-edit')) {\n      const script = `#!/bin/bash\n# Post-edit hook wrapper\n# Handles variable interpolation for Claude Code hooks\n\n# Try to get file from various sources\nFILE=\"$CLAUDE_EDITED_FILE\"\n[ -z \"$FILE\" ] && FILE=\"$CLAUDE_FILE\"\n[ -z \"$FILE\" ] && FILE=\"$1\"\n\nif [ -n \"$FILE\" ]; then\n  ${command.replace('${file}', '\"$FILE\"')}\nelse\n  echo \"Warning: No file information available for hook\" >&2\nfi\n`;\n      await fs.writeFile(path.join(hooksDir, 'post-edit-hook.sh'), script, { mode: 0o755 });\n      wrapperScripts.set('post-edit', '.claude/hooks/post-edit-hook.sh');\n    }\n  }\n\n  return wrapperScripts;\n}\n\n/**\n * Fix hook variables in a settings.json file\n */\nasync function fixHookVariables(settingsPath, options = {}) {\n  const { backup = true, syntax = 'auto' } = options;\n\n  try {\n    // Read settings\n    const content = await fs.readFile(settingsPath, 'utf8');\n    const settings = JSON.parse(content);\n\n    if (!settings.hooks) {\n      printWarning('No hooks found in settings.json');\n      return { success: true, changes: 0 };\n    }\n\n    // Backup if requested\n    if (backup) {\n      const backupPath = `${settingsPath}.backup-${Date.now()}`;\n      await fs.writeFile(backupPath, content);\n      console.log(chalk.gray(`  Created backup: ${backupPath}`));\n    }\n\n    // Detect working syntax\n    const targetSyntax = syntax === 'auto' ? await detectWorkingSyntax() : syntax;\n    console.log(chalk.blue(`  Using ${targetSyntax} syntax`));\n\n    // Collect all commands that need transformation\n    const commands = [];\n    let changes = 0;\n\n    // Transform hooks\n    const transformHooks = (hooks) => {\n      if (Array.isArray(hooks)) {\n        return hooks.map((hook) => {\n          if (hook.hooks && Array.isArray(hook.hooks)) {\n            hook.hooks = hook.hooks.map((h) => {\n              if (h.command && h.command.includes('${')) {\n                commands.push(h.command);\n                const newCommand = transformHookCommand(h.command, 'legacy', targetSyntax);\n                if (newCommand !== h.command) {\n                  changes++;\n                  return { ...h, command: newCommand };\n                }\n              }\n              return h;\n            });\n          }\n          return hook;\n        });\n      }\n      return hooks;\n    };\n\n    // Process all hook types\n    for (const [hookType, hooks] of Object.entries(settings.hooks)) {\n      settings.hooks[hookType] = transformHooks(hooks);\n    }\n\n    // Create wrapper scripts if needed\n    if (targetSyntax === 'wrapper' && commands.length > 0) {\n      console.log(chalk.blue('  Creating wrapper scripts...'));\n      const scripts = await createWrapperScripts(commands);\n      console.log(chalk.green(`  Created ${scripts.size} wrapper scripts`));\n    }\n\n    // Save updated settings\n    await fs.writeFile(settingsPath, JSON.stringify(settings, null, 2));\n\n    return { success: true, changes };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n}\n\n/**\n * Find all settings.json files\n */\nasync function findSettingsFiles() {\n  const locations = [\n    '.claude/settings.json',\n    'settings.json',\n    '.vscode/.claude/settings.json',\n    path.join(process.env.HOME || '', '.claude', 'settings.json'),\n  ];\n\n  const found = [];\n  for (const loc of locations) {\n    if (existsSync(loc)) {\n      found.push(loc);\n    }\n  }\n\n  return found;\n}\n\n/**\n * Main command handler\n */\nexport async function fixHookVariablesCommand(args = [], flags = {}) {\n  console.log(chalk.bold('\\n🔧 Fixing Claude Code Hook Variables\\n'));\n\n  const options = {\n    backup: !flags['no-backup'],\n    syntax: flags.syntax || 'auto',\n    test: flags.test || false,\n  };\n\n  // Find files to fix\n  let files = args.length > 0 ? args : await findSettingsFiles();\n\n  if (files.length === 0) {\n    printError('No settings.json files found');\n    console.log('\\nSearched locations:');\n    console.log('  - .claude/settings.json');\n    console.log('  - settings.json');\n    console.log('  - .vscode/.claude/settings.json');\n    console.log(`  - ${path.join(process.env.HOME || '', '.claude', 'settings.json')}`);\n    return;\n  }\n\n  console.log(`Found ${files.length} settings file(s) to process:\\n`);\n\n  let totalChanges = 0;\n  let successCount = 0;\n\n  for (const file of files) {\n    console.log(chalk.cyan(`Processing: ${file}`));\n\n    const result = await fixHookVariables(file, options);\n\n    if (result.success) {\n      successCount++;\n      totalChanges += result.changes;\n      console.log(chalk.green(`  ✅ Fixed ${result.changes} hook commands`));\n    } else {\n      console.log(chalk.red(`  ❌ Error: ${result.error}`));\n    }\n\n    console.log();\n  }\n\n  // Summary\n  console.log(chalk.bold('Summary:'));\n  console.log(`  Files processed: ${files.length}`);\n  console.log(`  Successful: ${successCount}`);\n  console.log(`  Total changes: ${totalChanges}`);\n\n  if (totalChanges > 0) {\n    console.log(chalk.yellow('\\n⚠️  Important:'));\n    console.log('  1. Restart Claude Code for changes to take effect');\n    console.log('  2. Test your hooks to ensure they work correctly');\n    console.log('  3. Report any issues to: https://github.com/ruvnet/claude-flow/issues');\n  }\n\n  // Test mode\n  if (options.test) {\n    console.log(chalk.blue('\\n🧪 Test Mode - Creating test hook...'));\n    await createTestHook();\n  }\n}\n\n/**\n * Create a test hook to verify variables work\n */\nasync function createTestHook() {\n  const testSettings = {\n    hooks: {\n      PostToolUse: [\n        {\n          matcher: 'Write',\n          hooks: [\n            {\n              type: 'command',\n              command:\n                'cat | jq -r \\'.tool_input.file_path // .tool_input.path // \"\"\\' | xargs -I {} echo \"Hook test - File: {}\" >> .claude/hook-test.log',\n            },\n          ],\n        },\n      ],\n    },\n  };\n\n  await fs.mkdir('.claude', { recursive: true });\n  await fs.writeFile('.claude/test-settings.json', JSON.stringify(testSettings, null, 2));\n\n  console.log('Created test configuration at: .claude/test-settings.json');\n  console.log('\\nTo test:');\n  console.log('  1. Copy .claude/test-settings.json to .claude/settings.json');\n  console.log('  2. Open Claude Code');\n  console.log('  3. Create or edit any file');\n  console.log('  4. Check .claude/hook-test.log for output');\n}\n\n// Export command configuration\nexport const fixHookVariablesCommandConfig = {\n  description: 'Fix variable interpolation in Claude Code hooks (${file} syntax)',\n  usage: 'fix-hook-variables [settings-file...]',\n  options: [\n    { flag: '--no-backup', description: 'Skip creating backup files' },\n    { flag: '--syntax <type>', description: 'Force specific syntax: environment, jq, wrapper' },\n    { flag: '--test', description: 'Create test hook configuration' },\n  ],\n  examples: [\n    'claude-flow fix-hook-variables',\n    'claude-flow fix-hook-variables .claude/settings.json',\n    'claude-flow fix-hook-variables --syntax wrapper',\n    'claude-flow fix-hook-variables --test',\n  ],\n  details: `\nFixes the \\${file} and \\${command} variable interpolation issue in Claude Code hooks.\n\nThis command will:\n  • Detect your Claude Code version\n  • Transform hook commands to use working variable syntax\n  • Create wrapper scripts if needed\n  • Backup original settings files\n\nAvailable syntaxes:\n  • environment: Use environment variables like $CLAUDE_EDITED_FILE (unverified)\n  • jq: Use official jq JSON parsing approach (recommended)\n  • wrapper: Create wrapper scripts to handle variables\n\nNote: The 'jq' syntax is based on official Claude Code documentation and is likely\nthe most reliable approach for Claude Code 1.0.51+.\n\nFor more information: https://github.com/ruvnet/claude-flow/issues/249`,\n};\n"],"names":["fs","path","existsSync","chalk","printError","printWarning","VARIABLE_SYNTAXES","legacy","pattern","example","description","environment","jq","wrapper","VARIABLE_MAPPINGS","file","command","tool","detectWorkingSyntax","transformHookCommand","fromSyntax","toSyntax","replace","match","varName","mappings","fileVarMatch","commandVarMatch","baseCommand","scriptName","includes","createWrapperScripts","commands","hooksDir","mkdir","recursive","wrapperScripts","Map","script","writeFile","join","mode","set","fixHookVariables","settingsPath","options","backup","syntax","content","readFile","settings","JSON","parse","hooks","success","changes","backupPath","Date","now","console","log","gray","targetSyntax","blue","transformHooks","Array","isArray","map","hook","h","push","newCommand","hookType","Object","entries","length","scripts","green","size","stringify","error","message","findSettingsFiles","locations","process","env","HOME","found","loc","fixHookVariablesCommand","args","flags","bold","test","files","totalChanges","successCount","cyan","result","red","yellow","createTestHook","testSettings","PostToolUse","matcher","type","fixHookVariablesCommandConfig","usage","flag","examples","details"],"mappings":"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"}