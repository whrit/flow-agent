{"version":3,"sources":["../../../../src/cli/simple-commands/config.js"],"sourcesContent":["// config.js - Configuration management commands\nimport {\n  printSuccess,\n  printError,\n  printWarning,\n  readJsonFile,\n  writeJsonFile,\n  fileExists,\n} from '../utils.js';\n\nexport async function configCommand(subArgs, flags) {\n  const configCmd = subArgs[0];\n\n  switch (configCmd) {\n    case 'init':\n      await initConfig(subArgs, flags);\n      break;\n\n    case 'show':\n      await showConfig(subArgs, flags);\n      break;\n\n    case 'get':\n      await getConfigValue(subArgs, flags);\n      break;\n\n    case 'set':\n      await setConfigValue(subArgs, flags);\n      break;\n\n    case 'validate':\n      await validateConfig(subArgs, flags);\n      break;\n\n    case 'reset':\n      await resetConfig(subArgs, flags);\n      break;\n\n    default:\n      showConfigHelp();\n  }\n}\n\nasync function initConfig(subArgs, flags) {\n  const force = subArgs.includes('--force') || subArgs.includes('-f');\n  const configFile = 'claude-flow.config.json';\n\n  try {\n    // Check if config already exists\n    const exists = await fileExists(configFile);\n    if (exists && !force) {\n      printWarning('Configuration file already exists');\n      console.log('Use --force to overwrite existing configuration');\n      return;\n    }\n\n    printSuccess('Initializing Claude-Flow configuration...');\n\n    // Create default configuration\n    const defaultConfig = {\n      version: '1.0.71',\n      terminal: {\n        poolSize: 10,\n        recycleAfter: 20,\n        healthCheckInterval: 30000,\n        type: 'auto',\n      },\n      orchestrator: {\n        maxConcurrentTasks: 10,\n        taskTimeout: 300000,\n        defaultPriority: 5,\n      },\n      memory: {\n        backend: 'json',\n        path: './memory/claude-flow-data.json',\n        cacheSize: 1000,\n        indexing: true,\n      },\n      agents: {\n        maxAgents: 20,\n        defaultCapabilities: ['research', 'code', 'terminal'],\n        resourceLimits: {\n          memory: '1GB',\n          cpu: '50%',\n        },\n      },\n      mcp: {\n        port: 3000,\n        host: 'localhost',\n        timeout: 30000,\n      },\n      logging: {\n        level: 'info',\n        file: './claude-flow.log',\n        maxSize: '10MB',\n        maxFiles: 5,\n      },\n    };\n\n    await writeJsonFile(configFile, defaultConfig);\n    console.log(`‚úì Created ${configFile}`);\n    console.log('‚úì Default settings configured');\n    console.log('\\nNext steps:');\n    console.log('1. Review settings: claude-flow config show');\n    console.log('2. Customize values: claude-flow config set <key> <value>');\n    console.log('3. Validate config: claude-flow config validate');\n  } catch (err) {\n    printError(`Failed to initialize configuration: ${err.message}`);\n  }\n}\n\nasync function showConfig(subArgs, flags) {\n  const configFile = 'claude-flow.config.json';\n  const format = getFlag(subArgs, '--format') || 'pretty';\n\n  try {\n    const config = await readJsonFile(configFile);\n\n    printSuccess('Current configuration:');\n\n    if (format === 'json') {\n      console.log(JSON.stringify(config, null, 2));\n    } else {\n      // Pretty format\n      console.log('\\nüìã System Configuration:');\n      console.log(`   Version: ${config.version || 'unknown'}`);\n      console.log('\\nüñ•Ô∏è  Terminal Pool:');\n      console.log(`   Pool Size: ${config.terminal?.poolSize || 10}`);\n      console.log(`   Recycle After: ${config.terminal?.recycleAfter || 20} commands`);\n      console.log(`   Health Check: ${config.terminal?.healthCheckInterval || 30000}ms`);\n      console.log('\\nüé≠ Orchestrator:');\n      console.log(`   Max Concurrent Tasks: ${config.orchestrator?.maxConcurrentTasks || 10}`);\n      console.log(`   Task Timeout: ${config.orchestrator?.taskTimeout || 300000}ms`);\n      console.log('\\nüíæ Memory:');\n      console.log(`   Backend: ${config.memory?.backend || 'json'}`);\n      console.log(`   Path: ${config.memory?.path || './memory/claude-flow-data.json'}`);\n      console.log('\\nü§ñ Agents:');\n      console.log(`   Max Agents: ${config.agents?.maxAgents || 20}`);\n      console.log(`   Resource Limits: ${JSON.stringify(config.agents?.resourceLimits || {})}`);\n    }\n  } catch (err) {\n    printError('Configuration file not found');\n    console.log('Run \"claude-flow config init\" to create default configuration');\n  }\n}\n\nasync function getConfigValue(subArgs, flags) {\n  const key = subArgs[1];\n  const configFile = 'claude-flow.config.json';\n\n  if (!key) {\n    printError('Usage: config get <key>');\n    console.log('Examples:');\n    console.log('  claude-flow config get terminal.poolSize');\n    console.log('  claude-flow config get orchestrator.maxConcurrentTasks');\n    return;\n  }\n\n  try {\n    const config = await readJsonFile(configFile);\n    const value = getNestedValue(config, key);\n\n    if (value !== undefined) {\n      console.log(`${key}: ${JSON.stringify(value)}`);\n    } else {\n      printWarning(`Configuration key '${key}' not found`);\n    }\n  } catch (err) {\n    printError('Configuration file not found');\n    console.log('Run \"claude-flow config init\" to create configuration');\n  }\n}\n\nasync function setConfigValue(subArgs, flags) {\n  const key = subArgs[1];\n  const value = subArgs[2];\n  const configFile = 'claude-flow.config.json';\n\n  if (!key || value === undefined) {\n    printError('Usage: config set <key> <value>');\n    console.log('Examples:');\n    console.log('  claude-flow config set terminal.poolSize 15');\n    console.log('  claude-flow config set orchestrator.taskTimeout 600000');\n    return;\n  }\n\n  try {\n    let config = await readJsonFile(configFile, {});\n\n    // Parse value appropriately\n    let parsedValue = value;\n    if (value === 'true') parsedValue = true;\n    else if (value === 'false') parsedValue = false;\n    else if (!isNaN(value) && value.trim() !== '') parsedValue = Number(value);\n\n    // Set nested value\n    setNestedValue(config, key, parsedValue);\n\n    await writeJsonFile(configFile, config);\n    printSuccess(`Set ${key} = ${JSON.stringify(parsedValue)}`);\n  } catch (err) {\n    printError(`Failed to set configuration: ${err.message}`);\n  }\n}\n\nasync function validateConfig(subArgs, flags) {\n  const configFile = 'claude-flow.config.json';\n\n  try {\n    const config = await readJsonFile(configFile);\n\n    printSuccess('Validating configuration...');\n\n    const errors = [];\n    const warnings = [];\n\n    // Validate required sections\n    const requiredSections = ['terminal', 'orchestrator', 'memory'];\n    for (const section of requiredSections) {\n      if (!config[section]) {\n        errors.push(`Missing required section: ${section}`);\n      }\n    }\n\n    // Validate specific values\n    if (\n      config.terminal?.poolSize &&\n      (config.terminal.poolSize < 1 || config.terminal.poolSize > 100)\n    ) {\n      warnings.push('Terminal pool size should be between 1 and 100');\n    }\n\n    if (config.orchestrator?.maxConcurrentTasks && config.orchestrator.maxConcurrentTasks < 1) {\n      errors.push('Max concurrent tasks must be at least 1');\n    }\n\n    if (config.agents?.maxAgents && config.agents.maxAgents < 1) {\n      errors.push('Max agents must be at least 1');\n    }\n\n    // Report results\n    if (errors.length === 0 && warnings.length === 0) {\n      printSuccess('‚úÖ Configuration is valid');\n    } else {\n      if (errors.length > 0) {\n        printError(`Found ${errors.length} error(s):`);\n        errors.forEach((error) => console.log(`  ‚ùå ${error}`));\n      }\n\n      if (warnings.length > 0) {\n        printWarning(`Found ${warnings.length} warning(s):`);\n        warnings.forEach((warning) => console.log(`  ‚ö†Ô∏è  ${warning}`));\n      }\n    }\n  } catch (err) {\n    printError('Configuration file not found or invalid');\n    console.log('Run \"claude-flow config init\" to create valid configuration');\n  }\n}\n\nasync function resetConfig(subArgs, flags) {\n  const force = subArgs.includes('--force') || subArgs.includes('-f');\n\n  if (!force) {\n    printWarning('This will reset configuration to defaults');\n    console.log('Use --force to confirm reset');\n    return;\n  }\n\n  await initConfig(['--force'], flags);\n  printSuccess('Configuration reset to defaults');\n}\n\n// Helper functions\nfunction getNestedValue(obj, path) {\n  return path.split('.').reduce((current, key) => current?.[key], obj);\n}\n\nfunction setNestedValue(obj, path, value) {\n  const keys = path.split('.');\n  const last = keys.pop();\n  const target = keys.reduce((current, key) => {\n    if (!current[key]) current[key] = {};\n    return current[key];\n  }, obj);\n  target[last] = value;\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\n// fileExists is now imported from utils.js\n\nfunction showConfigHelp() {\n  console.log('Configuration commands:');\n  console.log('  init [--force]                   Create default configuration');\n  console.log('  show [--format json]             Display current configuration');\n  console.log('  get <key>                        Get configuration value');\n  console.log('  set <key> <value>                Set configuration value');\n  console.log('  validate                         Validate configuration');\n  console.log('  reset --force                    Reset to defaults');\n  console.log();\n  console.log('Configuration Keys:');\n  console.log('  terminal.poolSize                Terminal pool size');\n  console.log('  terminal.recycleAfter            Commands before recycle');\n  console.log('  orchestrator.maxConcurrentTasks  Max parallel tasks');\n  console.log('  orchestrator.taskTimeout         Task timeout in ms');\n  console.log('  memory.backend                   Memory storage backend');\n  console.log('  memory.path                      Memory database path');\n  console.log('  agents.maxAgents                 Maximum number of agents');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow config init');\n  console.log('  claude-flow config set terminal.poolSize 15');\n  console.log('  claude-flow config get orchestrator.maxConcurrentTasks');\n  console.log('  claude-flow config validate');\n}\n"],"names":["printSuccess","printError","printWarning","readJsonFile","writeJsonFile","fileExists","configCommand","subArgs","flags","configCmd","initConfig","showConfig","getConfigValue","setConfigValue","validateConfig","resetConfig","showConfigHelp","force","includes","configFile","exists","console","log","defaultConfig","version","terminal","poolSize","recycleAfter","healthCheckInterval","type","orchestrator","maxConcurrentTasks","taskTimeout","defaultPriority","memory","backend","path","cacheSize","indexing","agents","maxAgents","defaultCapabilities","resourceLimits","cpu","mcp","port","host","timeout","logging","level","file","maxSize","maxFiles","err","message","format","getFlag","config","JSON","stringify","key","value","getNestedValue","undefined","parsedValue","isNaN","trim","Number","setNestedValue","errors","warnings","requiredSections","section","push","length","forEach","error","warning","obj","split","reduce","current","keys","last","pop","target","args","flagName","index","indexOf"],"mappings":"AACA,SACEA,YAAY,EACZC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,aAAa,EACbC,UAAU,QACL,cAAc;AAErB,OAAO,eAAeC,cAAcC,OAAO,EAAEC,KAAK;IAChD,MAAMC,YAAYF,OAAO,CAAC,EAAE;IAE5B,OAAQE;QACN,KAAK;YACH,MAAMC,WAAWH,SAASC;YAC1B;QAEF,KAAK;YACH,MAAMG,WAAWJ,SAASC;YAC1B;QAEF,KAAK;YACH,MAAMI,eAAeL,SAASC;YAC9B;QAEF,KAAK;YACH,MAAMK,eAAeN,SAASC;YAC9B;QAEF,KAAK;YACH,MAAMM,eAAeP,SAASC;YAC9B;QAEF,KAAK;YACH,MAAMO,YAAYR,SAASC;YAC3B;QAEF;YACEQ;IACJ;AACF;AAEA,eAAeN,WAAWH,OAAO,EAAEC,KAAK;IACtC,MAAMS,QAAQV,QAAQW,QAAQ,CAAC,cAAcX,QAAQW,QAAQ,CAAC;IAC9D,MAAMC,aAAa;IAEnB,IAAI;QAEF,MAAMC,SAAS,MAAMf,WAAWc;QAChC,IAAIC,UAAU,CAACH,OAAO;YACpBf,aAAa;YACbmB,QAAQC,GAAG,CAAC;YACZ;QACF;QAEAtB,aAAa;QAGb,MAAMuB,gBAAgB;YACpBC,SAAS;YACTC,UAAU;gBACRC,UAAU;gBACVC,cAAc;gBACdC,qBAAqB;gBACrBC,MAAM;YACR;YACAC,cAAc;gBACZC,oBAAoB;gBACpBC,aAAa;gBACbC,iBAAiB;YACnB;YACAC,QAAQ;gBACNC,SAAS;gBACTC,MAAM;gBACNC,WAAW;gBACXC,UAAU;YACZ;YACAC,QAAQ;gBACNC,WAAW;gBACXC,qBAAqB;oBAAC;oBAAY;oBAAQ;iBAAW;gBACrDC,gBAAgB;oBACdR,QAAQ;oBACRS,KAAK;gBACP;YACF;YACAC,KAAK;gBACHC,MAAM;gBACNC,MAAM;gBACNC,SAAS;YACX;YACAC,SAAS;gBACPC,OAAO;gBACPC,MAAM;gBACNC,SAAS;gBACTC,UAAU;YACZ;QACF;QAEA,MAAMhD,cAAce,YAAYI;QAChCF,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEH,YAAY;QACrCE,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd,EAAE,OAAO+B,KAAK;QACZpD,WAAW,CAAC,oCAAoC,EAAEoD,IAAIC,OAAO,EAAE;IACjE;AACF;AAEA,eAAe3C,WAAWJ,OAAO,EAAEC,KAAK;IACtC,MAAMW,aAAa;IACnB,MAAMoC,SAASC,QAAQjD,SAAS,eAAe;IAE/C,IAAI;QACF,MAAMkD,SAAS,MAAMtD,aAAagB;QAElCnB,aAAa;QAEb,IAAIuD,WAAW,QAAQ;YACrBlC,QAAQC,GAAG,CAACoC,KAAKC,SAAS,CAACF,QAAQ,MAAM;QAC3C,OAAO;YAELpC,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEmC,OAAOjC,OAAO,IAAI,WAAW;YACxDH,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEmC,OAAOhC,QAAQ,EAAEC,YAAY,IAAI;YAC9DL,QAAQC,GAAG,CAAC,CAAC,kBAAkB,EAAEmC,OAAOhC,QAAQ,EAAEE,gBAAgB,GAAG,SAAS,CAAC;YAC/EN,QAAQC,GAAG,CAAC,CAAC,iBAAiB,EAAEmC,OAAOhC,QAAQ,EAAEG,uBAAuB,MAAM,EAAE,CAAC;YACjFP,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAEmC,OAAO3B,YAAY,EAAEC,sBAAsB,IAAI;YACvFV,QAAQC,GAAG,CAAC,CAAC,iBAAiB,EAAEmC,OAAO3B,YAAY,EAAEE,eAAe,OAAO,EAAE,CAAC;YAC9EX,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEmC,OAAOvB,MAAM,EAAEC,WAAW,QAAQ;YAC7Dd,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEmC,OAAOvB,MAAM,EAAEE,QAAQ,kCAAkC;YACjFf,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEmC,OAAOlB,MAAM,EAAEC,aAAa,IAAI;YAC9DnB,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEoC,KAAKC,SAAS,CAACF,OAAOlB,MAAM,EAAEG,kBAAkB,CAAC,IAAI;QAC1F;IACF,EAAE,OAAOW,KAAK;QACZpD,WAAW;QACXoB,QAAQC,GAAG,CAAC;IACd;AACF;AAEA,eAAeV,eAAeL,OAAO,EAAEC,KAAK;IAC1C,MAAMoD,MAAMrD,OAAO,CAAC,EAAE;IACtB,MAAMY,aAAa;IAEnB,IAAI,CAACyC,KAAK;QACR3D,WAAW;QACXoB,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAMmC,SAAS,MAAMtD,aAAagB;QAClC,MAAM0C,QAAQC,eAAeL,QAAQG;QAErC,IAAIC,UAAUE,WAAW;YACvB1C,QAAQC,GAAG,CAAC,GAAGsC,IAAI,EAAE,EAAEF,KAAKC,SAAS,CAACE,QAAQ;QAChD,OAAO;YACL3D,aAAa,CAAC,mBAAmB,EAAE0D,IAAI,WAAW,CAAC;QACrD;IACF,EAAE,OAAOP,KAAK;QACZpD,WAAW;QACXoB,QAAQC,GAAG,CAAC;IACd;AACF;AAEA,eAAeT,eAAeN,OAAO,EAAEC,KAAK;IAC1C,MAAMoD,MAAMrD,OAAO,CAAC,EAAE;IACtB,MAAMsD,QAAQtD,OAAO,CAAC,EAAE;IACxB,MAAMY,aAAa;IAEnB,IAAI,CAACyC,OAAOC,UAAUE,WAAW;QAC/B9D,WAAW;QACXoB,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,IAAImC,SAAS,MAAMtD,aAAagB,YAAY,CAAC;QAG7C,IAAI6C,cAAcH;QAClB,IAAIA,UAAU,QAAQG,cAAc;aAC/B,IAAIH,UAAU,SAASG,cAAc;aACrC,IAAI,CAACC,MAAMJ,UAAUA,MAAMK,IAAI,OAAO,IAAIF,cAAcG,OAAON;QAGpEO,eAAeX,QAAQG,KAAKI;QAE5B,MAAM5D,cAAce,YAAYsC;QAChCzD,aAAa,CAAC,IAAI,EAAE4D,IAAI,GAAG,EAAEF,KAAKC,SAAS,CAACK,cAAc;IAC5D,EAAE,OAAOX,KAAK;QACZpD,WAAW,CAAC,6BAA6B,EAAEoD,IAAIC,OAAO,EAAE;IAC1D;AACF;AAEA,eAAexC,eAAeP,OAAO,EAAEC,KAAK;IAC1C,MAAMW,aAAa;IAEnB,IAAI;QACF,MAAMsC,SAAS,MAAMtD,aAAagB;QAElCnB,aAAa;QAEb,MAAMqE,SAAS,EAAE;QACjB,MAAMC,WAAW,EAAE;QAGnB,MAAMC,mBAAmB;YAAC;YAAY;YAAgB;SAAS;QAC/D,KAAK,MAAMC,WAAWD,iBAAkB;YACtC,IAAI,CAACd,MAAM,CAACe,QAAQ,EAAE;gBACpBH,OAAOI,IAAI,CAAC,CAAC,0BAA0B,EAAED,SAAS;YACpD;QACF;QAGA,IACEf,OAAOhC,QAAQ,EAAEC,YAChB+B,CAAAA,OAAOhC,QAAQ,CAACC,QAAQ,GAAG,KAAK+B,OAAOhC,QAAQ,CAACC,QAAQ,GAAG,GAAE,GAC9D;YACA4C,SAASG,IAAI,CAAC;QAChB;QAEA,IAAIhB,OAAO3B,YAAY,EAAEC,sBAAsB0B,OAAO3B,YAAY,CAACC,kBAAkB,GAAG,GAAG;YACzFsC,OAAOI,IAAI,CAAC;QACd;QAEA,IAAIhB,OAAOlB,MAAM,EAAEC,aAAaiB,OAAOlB,MAAM,CAACC,SAAS,GAAG,GAAG;YAC3D6B,OAAOI,IAAI,CAAC;QACd;QAGA,IAAIJ,OAAOK,MAAM,KAAK,KAAKJ,SAASI,MAAM,KAAK,GAAG;YAChD1E,aAAa;QACf,OAAO;YACL,IAAIqE,OAAOK,MAAM,GAAG,GAAG;gBACrBzE,WAAW,CAAC,MAAM,EAAEoE,OAAOK,MAAM,CAAC,UAAU,CAAC;gBAC7CL,OAAOM,OAAO,CAAC,CAACC,QAAUvD,QAAQC,GAAG,CAAC,CAAC,IAAI,EAAEsD,OAAO;YACtD;YAEA,IAAIN,SAASI,MAAM,GAAG,GAAG;gBACvBxE,aAAa,CAAC,MAAM,EAAEoE,SAASI,MAAM,CAAC,YAAY,CAAC;gBACnDJ,SAASK,OAAO,CAAC,CAACE,UAAYxD,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEuD,SAAS;YAC9D;QACF;IACF,EAAE,OAAOxB,KAAK;QACZpD,WAAW;QACXoB,QAAQC,GAAG,CAAC;IACd;AACF;AAEA,eAAeP,YAAYR,OAAO,EAAEC,KAAK;IACvC,MAAMS,QAAQV,QAAQW,QAAQ,CAAC,cAAcX,QAAQW,QAAQ,CAAC;IAE9D,IAAI,CAACD,OAAO;QACVf,aAAa;QACbmB,QAAQC,GAAG,CAAC;QACZ;IACF;IAEA,MAAMZ,WAAW;QAAC;KAAU,EAAEF;IAC9BR,aAAa;AACf;AAGA,SAAS8D,eAAegB,GAAG,EAAE1C,IAAI;IAC/B,OAAOA,KAAK2C,KAAK,CAAC,KAAKC,MAAM,CAAC,CAACC,SAASrB,MAAQqB,SAAS,CAACrB,IAAI,EAAEkB;AAClE;AAEA,SAASV,eAAeU,GAAG,EAAE1C,IAAI,EAAEyB,KAAK;IACtC,MAAMqB,OAAO9C,KAAK2C,KAAK,CAAC;IACxB,MAAMI,OAAOD,KAAKE,GAAG;IACrB,MAAMC,SAASH,KAAKF,MAAM,CAAC,CAACC,SAASrB;QACnC,IAAI,CAACqB,OAAO,CAACrB,IAAI,EAAEqB,OAAO,CAACrB,IAAI,GAAG,CAAC;QACnC,OAAOqB,OAAO,CAACrB,IAAI;IACrB,GAAGkB;IACHO,MAAM,CAACF,KAAK,GAAGtB;AACjB;AAEA,SAASL,QAAQ8B,IAAI,EAAEC,QAAQ;IAC7B,MAAMC,QAAQF,KAAKG,OAAO,CAACF;IAC3B,OAAOC,UAAU,CAAC,KAAKA,QAAQ,IAAIF,KAAKZ,MAAM,GAAGY,IAAI,CAACE,QAAQ,EAAE,GAAG;AACrE;AAIA,SAASxE;IACPK,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd"}