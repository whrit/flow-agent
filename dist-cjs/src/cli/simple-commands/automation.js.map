{"version":3,"sources":["../../../../src/cli/simple-commands/automation.js"],"sourcesContent":["import { printSuccess, printError, printWarning } from '../utils.js';\nimport { WorkflowExecutor, loadWorkflowFromFile, getMLEStarWorkflowPath } from './automation-executor.js';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\n\n// Simple ID generator\nfunction generateId(prefix = 'id') {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport async function automationAction(subArgs, flags) {\n  const subcommand = subArgs[0];\n  const options = flags;\n\n  if (options.help || options.h || !subcommand) {\n    showAutomationHelp();\n    return;\n  }\n\n  try {\n    switch (subcommand) {\n      case 'auto-agent':\n        await autoAgentCommand(subArgs, flags);\n        break;\n      case 'smart-spawn':\n        await smartSpawnCommand(subArgs, flags);\n        break;\n      case 'workflow-select':\n        await workflowSelectCommand(subArgs, flags);\n        break;\n      case 'run-workflow':\n        await runWorkflowCommand(subArgs, flags);\n        break;\n      case 'mle-star':\n        await mleStarCommand(subArgs, flags);\n        break;\n      default:\n        printError(`Unknown automation command: ${subcommand}`);\n        showAutomationHelp();\n    }\n  } catch (err) {\n    printError(`Automation command failed: ${err.message}`);\n  }\n}\n\nasync function autoAgentCommand(subArgs, flags) {\n  const options = flags;\n  const complexity = options['task-complexity'] || options.complexity || 'medium';\n  const swarmId = options['swarm-id'] || options.swarmId || generateId('swarm');\n\n  console.log(`ü§ñ Auto-spawning agents based on task complexity...`);\n  console.log(`üìä Task complexity: ${complexity}`);\n  console.log(`üêù Swarm ID: ${swarmId}`);\n\n  // Determine optimal agent configuration based on complexity\n  let agentConfig;\n  switch (complexity.toLowerCase()) {\n    case 'low':\n    case 'simple':\n      agentConfig = { coordinator: 1, developer: 1, total: 2 };\n      break;\n    case 'medium':\n    case 'moderate':\n      agentConfig = { coordinator: 1, developer: 2, researcher: 1, total: 4 };\n      break;\n    case 'high':\n    case 'complex':\n      agentConfig = { coordinator: 2, developer: 3, researcher: 2, analyzer: 1, total: 8 };\n      break;\n    case 'enterprise':\n    case 'massive':\n      agentConfig = {\n        coordinator: 3,\n        developer: 5,\n        researcher: 3,\n        analyzer: 2,\n        tester: 2,\n        total: 15,\n      };\n      break;\n    default:\n      agentConfig = { coordinator: 1, developer: 2, researcher: 1, total: 4 };\n  }\n\n  console.log(`\\nüéØ OPTIMAL AGENT CONFIGURATION:`);\n  Object.entries(agentConfig).forEach(([type, count]) => {\n    if (type !== 'total') {\n      console.log(`  ü§ñ ${type}: ${count} agents`);\n    }\n  });\n  console.log(`  üìä Total agents: ${agentConfig.total}`);\n\n  // Simulate auto-spawning\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  printSuccess(`‚úÖ Auto-agent spawning completed`);\n  console.log(\n    `üöÄ ${agentConfig.total} agents spawned and configured for ${complexity} complexity tasks`,\n  );\n  console.log(`üíæ Agent configuration saved to swarm memory: ${swarmId}`);\n  console.log(`üìã Agents ready for task assignment`);\n}\n\nasync function smartSpawnCommand(subArgs, flags) {\n  const options = flags;\n  const requirement = options.requirement || 'general-development';\n  const maxAgents = parseInt(options['max-agents'] || options.maxAgents || '10');\n\n  console.log(`üß† Smart spawning agents based on requirements...`);\n  console.log(`üìã Requirement: ${requirement}`);\n  console.log(`üî¢ Max agents: ${maxAgents}`);\n\n  // Analyze requirements and suggest optimal agent mix\n  let recommendedAgents = [];\n\n  if (requirement.includes('development') || requirement.includes('coding')) {\n    recommendedAgents.push(\n      { type: 'coordinator', count: 1, reason: 'Task orchestration' },\n      { type: 'coder', count: 3, reason: 'Core development work' },\n      { type: 'tester', count: 1, reason: 'Quality assurance' },\n    );\n  }\n\n  if (requirement.includes('research') || requirement.includes('analysis')) {\n    recommendedAgents.push(\n      { type: 'researcher', count: 2, reason: 'Information gathering' },\n      { type: 'analyst', count: 1, reason: 'Data analysis' },\n    );\n  }\n\n  if (requirement.includes('enterprise') || requirement.includes('production')) {\n    recommendedAgents.push(\n      { type: 'coordinator', count: 2, reason: 'Multi-tier coordination' },\n      { type: 'coder', count: 4, reason: 'Parallel development' },\n      { type: 'researcher', count: 2, reason: 'Requirements analysis' },\n      { type: 'analyst', count: 1, reason: 'Performance monitoring' },\n      { type: 'tester', count: 2, reason: 'Comprehensive testing' },\n    );\n  }\n\n  // Default fallback\n  if (recommendedAgents.length === 0) {\n    recommendedAgents = [\n      { type: 'coordinator', count: 1, reason: 'General coordination' },\n      { type: 'coder', count: 2, reason: 'General development' },\n      { type: 'researcher', count: 1, reason: 'Support research' },\n    ];\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  printSuccess(`‚úÖ Smart spawn analysis completed`);\n  console.log(`\\nüéØ RECOMMENDED AGENT CONFIGURATION:`);\n\n  let totalRecommended = 0;\n  recommendedAgents.forEach((agent) => {\n    console.log(`  ü§ñ ${agent.type}: ${agent.count} agents - ${agent.reason}`);\n    totalRecommended += agent.count;\n  });\n\n  console.log(`\\nüìä SUMMARY:`);\n  console.log(`  üìù Total recommended: ${totalRecommended} agents`);\n  console.log(`  üî¢ Max allowed: ${maxAgents} agents`);\n  console.log(\n    `  ‚úÖ Configuration: ${totalRecommended <= maxAgents ? 'Within limits' : 'Exceeds limits - scaling down required'}`,\n  );\n\n  if (totalRecommended > maxAgents) {\n    printWarning(\n      `‚ö†Ô∏è  Recommended configuration exceeds max agents. Consider increasing limit or simplifying requirements.`,\n    );\n  }\n}\n\nasync function workflowSelectCommand(subArgs, flags) {\n  const options = flags;\n  const projectType = options['project-type'] || options.project || 'general';\n  const priority = options.priority || 'balanced';\n\n  console.log(`üîÑ Selecting optimal workflow configuration...`);\n  console.log(`üìÅ Project type: ${projectType}`);\n  console.log(`‚ö° Priority: ${priority}`);\n\n  // Define workflow templates\n  const workflows = {\n    'web-app': {\n      phases: ['planning', 'design', 'frontend', 'backend', 'testing', 'deployment'],\n      agents: { coordinator: 1, developer: 3, tester: 1, researcher: 1 },\n      duration: '2-4 weeks',\n    },\n    api: {\n      phases: ['specification', 'design', 'implementation', 'testing', 'documentation'],\n      agents: { coordinator: 1, developer: 2, tester: 1, researcher: 1 },\n      duration: '1-2 weeks',\n    },\n    'data-analysis': {\n      phases: ['collection', 'cleaning', 'analysis', 'visualization', 'reporting'],\n      agents: { coordinator: 1, researcher: 2, analyzer: 2, developer: 1 },\n      duration: '1-3 weeks',\n    },\n    enterprise: {\n      phases: [\n        'requirements',\n        'architecture',\n        'development',\n        'integration',\n        'testing',\n        'deployment',\n        'monitoring',\n      ],\n      agents: { coordinator: 2, developer: 5, researcher: 2, analyzer: 1, tester: 2 },\n      duration: '2-6 months',\n    },\n    general: {\n      phases: ['planning', 'implementation', 'testing', 'delivery'],\n      agents: { coordinator: 1, developer: 2, researcher: 1 },\n      duration: '1-2 weeks',\n    },\n  };\n\n  const selectedWorkflow = workflows[projectType] || workflows['general'];\n\n  await new Promise((resolve) => setTimeout(resolve, 800));\n\n  printSuccess(`‚úÖ Workflow selection completed`);\n  console.log(`\\nüîÑ SELECTED WORKFLOW: ${projectType.toUpperCase()}`);\n  console.log(`‚è±Ô∏è  Estimated duration: ${selectedWorkflow.duration}`);\n\n  console.log(`\\nüìã WORKFLOW PHASES:`);\n  selectedWorkflow.phases.forEach((phase, index) => {\n    console.log(`  ${index + 1}. ${phase.charAt(0).toUpperCase() + phase.slice(1)}`);\n  });\n\n  console.log(`\\nü§ñ RECOMMENDED AGENTS:`);\n  Object.entries(selectedWorkflow.agents).forEach(([type, count]) => {\n    console.log(`  ‚Ä¢ ${type}: ${count} agent${count > 1 ? 's' : ''}`);\n  });\n\n  console.log(`\\n‚ö° PRIORITY OPTIMIZATIONS:`);\n  switch (priority) {\n    case 'speed':\n      console.log(`  üöÄ Speed-optimized: +50% agents, parallel execution`);\n      break;\n    case 'quality':\n      console.log(`  üéØ Quality-focused: +100% testing, code review stages`);\n      break;\n    case 'cost':\n      console.log(`  üí∞ Cost-efficient: Minimal agents, sequential execution`);\n      break;\n    default:\n      console.log(`  ‚öñÔ∏è  Balanced approach: Optimal speed/quality/cost ratio`);\n  }\n\n  console.log(`\\nüìÑ Workflow template saved for project: ${projectType}`);\n}\n\n/**\n * Execute a workflow from file - NEW IMPLEMENTATION\n */\nasync function runWorkflowCommand(subArgs, flags) {\n  const workflowFile = subArgs[1];\n  const options = flags;\n\n  if (!workflowFile) {\n    printError('Usage: automation run-workflow <workflow-file> [options]');\n    console.log('\\nExample:');\n    console.log('  claude-flow automation run-workflow workflow.json --claude --non-interactive');\n    return;\n  }\n\n  if (!existsSync(workflowFile)) {\n    printError(`Workflow file not found: ${workflowFile}`);\n    return;\n  }\n\n  try {\n    console.log(`üîÑ Loading workflow: ${workflowFile}`);\n    \n    // Load workflow definition\n    const workflowData = await loadWorkflowFromFile(workflowFile);\n    \n    // Create executor with options\n    const executor = new WorkflowExecutor({\n      enableClaude: options.claude || false,\n      nonInteractive: options['non-interactive'] || options.nonInteractive || false,\n      outputFormat: options['output-format'] || (options['non-interactive'] || options.nonInteractive ? 'stream-json' : 'text'),\n      maxConcurrency: parseInt(options['max-concurrency']) || 3,\n      timeout: parseInt(options.timeout) || 3600000,\n      logLevel: options.verbose ? 'debug' : 'info',\n      workflowName: workflowData.name,\n      workflowType: workflowData.type || (workflowData.name?.toLowerCase().includes('ml') ? 'ml' : 'general'),\n      enableChaining: options.chaining !== false // Default to true for stream-json chaining\n    });\n    \n    // Apply variable overrides if provided\n    const variables = {};\n    if (options.variables) {\n      try {\n        Object.assign(variables, JSON.parse(options.variables));\n      } catch (error) {\n        printWarning(`Invalid variables JSON: ${error.message}`);\n      }\n    }\n    \n    // Execute workflow\n    const result = await executor.executeWorkflow(workflowData, variables);\n    \n    if (options['output-format'] === 'json') {\n      console.log(JSON.stringify(result, null, 2));\n    }\n    \n    printSuccess(`Workflow execution ${result.success ? 'completed' : 'failed'}`);\n    \n    if (!result.success && result.errors.length > 0) {\n      console.log('\\n‚ùå Errors encountered:');\n      result.errors.forEach(error => {\n        console.log(`  ‚Ä¢ ${error.type}: ${error.error}`);\n      });\n    }\n    \n    // Ensure process exits properly in non-interactive mode\n    if (options['non-interactive'] || options.nonInteractive) {\n      process.exit(result.success ? 0 : 1);\n    }\n    \n  } catch (error) {\n    printError(`Failed to execute workflow: ${error.message}`);\n    if (options['non-interactive'] || options.nonInteractive) {\n      process.exit(1);\n    }\n  }\n}\n\n/**\n * Run MLE-STAR workflow - NEW FLAGSHIP COMMAND\n */\nasync function mleStarCommand(subArgs, flags) {\n  const options = flags;\n  \n  console.log(`üß† MLE-STAR: Machine Learning Engineering via Search and Targeted Refinement`);\n  console.log(`üéØ This is the flagship automation workflow for ML engineering tasks`);\n  console.log();\n  \n  try {\n    // Get the built-in MLE-STAR workflow\n    const workflowPath = getMLEStarWorkflowPath();\n    \n    if (!existsSync(workflowPath)) {\n      printError('MLE-STAR workflow template not found');\n      console.log('Please ensure the template is installed at:');\n      console.log(workflowPath);\n      return;\n    }\n    \n    // Load MLE-STAR workflow\n    const workflowData = await loadWorkflowFromFile(workflowPath);\n    \n    console.log(`üìã Workflow: ${workflowData.name}`);\n    console.log(`üìÑ Description: ${workflowData.description}`);\n    console.log(`üéì Methodology: Search ‚Üí Foundation ‚Üí Refinement ‚Üí Ensemble ‚Üí Validation`);\n    console.log(`‚è±Ô∏è  Expected Runtime: ${workflowData.metadata.expected_runtime}`);\n    console.log();\n    \n    // Detect dataset if provided\n    const datasetPath = options.dataset || options.data || './data/dataset.csv';\n    const targetColumn = options.target || 'target';\n    \n    // Create executor with MLE-STAR optimized settings\n    // IMPORTANT: Default to non-interactive mode to prevent multiple Claude spawns\n    const isNonInteractive = options.interactive ? \n      false : // If --interactive is explicitly set, use interactive mode\n      (options['non-interactive'] !== undefined ? \n        (options['non-interactive'] || options.nonInteractive) : \n        true); // Default to true for MLE-STAR to avoid multiple interactive sessions\n    \n    const executor = new WorkflowExecutor({\n      enableClaude: options.claude !== false, // Default to true for MLE-STAR\n      nonInteractive: isNonInteractive,\n      outputFormat: options['output-format'] || (isNonInteractive ? 'stream-json' : 'text'),\n      maxConcurrency: parseInt(options['max-agents']) || 6,\n      timeout: parseInt(options.timeout) || 14400000, // 4 hours for ML workflows\n      logLevel: options.quiet ? 'quiet' : (options.verbose ? 'debug' : 'info'),\n      workflowName: 'MLE-STAR Machine Learning Engineering Workflow',\n      workflowType: 'ml',\n      enableChaining: options.chaining !== false // Default to true for stream-json chaining\n    });\n    \n    // Prepare MLE-STAR specific variables\n    const variables = {\n      dataset_path: datasetPath,\n      target_column: targetColumn,\n      experiment_name: options.name || `mle-star-${Date.now()}`,\n      model_output_dir: options.output || './models/',\n      search_iterations: parseInt(options['search-iterations']) || 3,\n      refinement_iterations: parseInt(options['refinement-iterations']) || 5,\n      ...((options.variables && JSON.parse(options.variables)) || {})\n    };\n    \n    if (options.quiet) {\n      console.log(`üìä Running MLE-STAR: ${variables.dataset_path} ‚Üí ${variables.target_column} (${executor.options.enableClaude ? 'Claude enabled' : 'Simulation'})`);\n      console.log();\n    } else {\n      console.log(`üìä Configuration:`);\n      console.log(`  Dataset: ${variables.dataset_path}`);\n      console.log(`  Target: ${variables.target_column}`);\n      console.log(`  Output: ${variables.model_output_dir}`);\n      console.log(`  Claude Integration: ${executor.options.enableClaude ? 'Enabled' : 'Disabled'}`);\n      console.log(`  Execution Mode: ${isNonInteractive ? 'Non-interactive (default)' : 'Interactive'}`);\n      console.log(`  Stream Chaining: ${executor.options.enableChaining && executor.options.outputFormat === 'stream-json' ? 'Enabled' : 'Disabled'}`);\n      console.log();\n      \n      if (isNonInteractive && options.claude !== false) {\n        console.log(`üí° Running in non-interactive mode: Each agent will execute independently`);\n        if (executor.options.enableChaining && executor.options.outputFormat === 'stream-json') {\n          console.log(`üîó Stream chaining enabled: Agent outputs will be piped to dependent agents`);\n        }\n        console.log(`   To use interactive mode instead, add --interactive flag`);\n        console.log();\n      }\n    }\n    \n    if (!options.claude && !options['no-claude-warning']) {\n      printWarning('MLE-STAR works best with Claude integration. Add --claude flag for full automation.');\n      console.log('Without Claude, this will simulate the workflow execution.');\n      console.log();\n    }\n    \n    // Execute MLE-STAR workflow\n    const result = await executor.executeWorkflow(workflowData, variables);\n    \n    if (result.success) {\n      console.log();\n      printSuccess('üéâ MLE-STAR workflow completed successfully!');\n      console.log(`üìä Results: ${result.completedTasks}/${result.totalTasks} tasks completed`);\n      console.log(`‚è±Ô∏è  Duration: ${executor.formatDuration(result.duration)}`);\n      console.log(`üÜî Execution ID: ${result.executionId}`);\n      \n      if (result.results && Object.keys(result.results).length > 0) {\n        console.log(`\\nüìà Key Results:`);\n        Object.entries(result.results).forEach(([taskId, taskResult]) => {\n          if (taskResult.output?.status === 'completed') {\n            console.log(`  ‚úÖ ${taskId}: Completed successfully`);\n          }\n        });\n      }\n      \n      console.log(`\\nüí° Next Steps:`);\n      console.log(`  ‚Ä¢ Check models in: ${variables.model_output_dir}`);\n      console.log(`  ‚Ä¢ Review experiment: ${variables.experiment_name}`);\n      console.log(`  ‚Ä¢ Validate results with your test data`);\n      \n    } else {\n      printError('‚ùå MLE-STAR workflow failed');\n      console.log(`üìä Progress: ${result.completedTasks}/${result.totalTasks} tasks completed`);\n      \n      if (result.errors.length > 0) {\n        console.log('\\nüîç Errors:');\n        result.errors.forEach(error => {\n          console.log(`  ‚Ä¢ ${error.type}: ${error.error}`);\n        });\n      }\n    }\n    \n    if (options['output-format'] === 'json') {\n      console.log('\\n' + JSON.stringify(result, null, 2));\n    }\n    \n    // Ensure process exits properly in non-interactive mode\n    if (options['non-interactive'] || options.nonInteractive) {\n      process.exit(result.success ? 0 : 1);\n    }\n    \n  } catch (error) {\n    printError(`MLE-STAR execution failed: ${error.message}`);\n    if (options['non-interactive'] || options.nonInteractive) {\n      process.exit(1);\n    }\n  }\n}\n\nfunction showAutomationHelp() {\n  console.log(`\nü§ñ Automation Commands - Intelligent Agent & Workflow Management\n\nUSAGE:\n  claude-flow automation <command> [options]\n\nCOMMANDS:\n  auto-agent        Automatically spawn optimal agents based on task complexity\n  smart-spawn       Intelligently spawn agents based on specific requirements\n  workflow-select   Select and configure optimal workflows for project types\n  run-workflow      Execute workflows from JSON/YAML files with Claude integration\n  mle-star          Run MLE-STAR Machine Learning Engineering workflow (flagship)\n\nAUTO-AGENT OPTIONS:\n  --task-complexity <level>  Task complexity level (default: medium)\n                             Options: low, medium, high, enterprise\n  --swarm-id <id>           Target swarm ID for agent spawning\n\nSMART-SPAWN OPTIONS:\n  --requirement <req>       Specific requirement description\n                           Examples: \"web-development\", \"data-analysis\", \"enterprise-api\"\n  --max-agents <n>         Maximum number of agents to spawn (default: 10)\n\nWORKFLOW-SELECT OPTIONS:\n  --project-type <type>     Project type (default: general)\n                           Options: web-app, api, data-analysis, enterprise, general\n  --priority <priority>     Optimization priority (default: balanced)\n                           Options: speed, quality, cost, balanced\n\nRUN-WORKFLOW OPTIONS:\n  --claude                  Enable Claude CLI integration for actual execution\n  --non-interactive         Run in non-interactive mode (no prompts)\n  --output-format <format>  Output format (text, json)\n  --variables <json>        Override workflow variables (JSON format)\n  --max-concurrency <n>     Maximum concurrent tasks (default: 3)\n  --timeout <ms>            Execution timeout in milliseconds\n  --verbose                 Enable detailed logging\n\nMLE-STAR OPTIONS:\n  --claude                  Enable Claude CLI integration (recommended)\n  --dataset <path>          Path to dataset file (default: ./data/dataset.csv)\n  --target <column>         Target column name (default: target)\n  --output <dir>            Model output directory (default: ./models/)\n  --name <experiment>       Experiment name for tracking\n  --search-iterations <n>   Web search iterations (default: 3)\n  --refinement-iterations <n> Refinement cycles (default: 5)\n  --max-agents <n>          Maximum agents to spawn (default: 6)\n  --interactive             Use interactive mode with master coordinator (single Claude instance)\n  --non-interactive         Force non-interactive mode (default for MLE-STAR)\n  --output-format <format>  Output format (stream-json enables chaining)\n  --chaining                Enable stream-json chaining between agents (default: true)\n  --no-chaining             Disable stream-json chaining\n  --no-claude-warning       Suppress Claude integration warnings\n  --quiet                   Minimal output (only show major progress milestones)\n  --verbose                 Detailed output with all agent activities\n\nSTREAM CHAINING:\n  Stream chaining automatically pipes output from one agent to the next based on task dependencies.\n  When enabled (default), agents can pass rich context and results directly to dependent tasks.\n  \n  Benefits:\n  ‚Ä¢ 40-60% faster execution vs file-based handoffs\n  ‚Ä¢ 100% context preservation between agents\n  ‚Ä¢ Real-time processing without intermediate files\n  ‚Ä¢ Automatic dependency detection and piping\n  \n  The system detects task dependencies and creates chains like:\n  search_agent ‚Üí foundation_agent ‚Üí refinement_agent ‚Üí validation_agent\n  \n  Example workflow with chaining:\n  {\n    \"tasks\": [\n      { \"id\": \"analyze\", \"assignTo\": \"researcher\" },\n      { \"id\": \"process\", \"assignTo\": \"processor\", \"depends\": [\"analyze\"] },\n      { \"id\": \"validate\", \"assignTo\": \"validator\", \"depends\": [\"process\"] }\n    ]\n  }\n  \n  With stream-json chaining, the researcher's output flows directly to the processor,\n  and the processor's output flows to the validator - no intermediate files needed!\n\nEXAMPLES:\n  # Auto-spawn for complex enterprise task\n  claude-flow automation auto-agent --task-complexity enterprise --swarm-id swarm-123\n\n  # Smart spawn for web development\n  claude-flow automation smart-spawn --requirement \"web-development\" --max-agents 8\n\n  # Select workflow for API project optimized for speed\n  claude-flow automation workflow-select --project-type api --priority speed\n\n  # Execute custom workflow with Claude integration\n  claude-flow automation run-workflow my-workflow.json --claude --non-interactive\n\n  # Run MLE-STAR ML engineering workflow (flagship command) - non-interactive by default\n  claude-flow automation mle-star --dataset data/train.csv --target price --claude\n\n  # MLE-STAR with custom configuration\n  claude-flow automation mle-star --dataset sales.csv --target revenue --output models/sales/ --name \"sales-prediction\" --search-iterations 5\n  \n  # MLE-STAR with interactive mode (single Claude coordinator)\n  claude-flow automation mle-star --dataset data.csv --target label --claude --interactive\n  \n  # MLE-STAR with stream-json chaining (agents pipe outputs to each other)\n  claude-flow automation mle-star --dataset data.csv --target label --claude --output-format stream-json\n  \n  # MLE-STAR with minimal output for CI/CD pipelines\n  claude-flow automation mle-star --dataset data.csv --target label --claude --quiet\n  \n  # Custom workflow with stream chaining enabled\n  claude-flow automation run-workflow analysis-pipeline.json --claude --output-format stream-json\n  \n  # Disable chaining for independent task execution\n  claude-flow automation mle-star --dataset data.csv --target label --claude --no-chaining\n  \n  # View stream chaining in action with verbose output\n  claude-flow automation mle-star --dataset data.csv --target label --claude --verbose\n\nüéØ Automation benefits:\n  ‚Ä¢ Optimal resource allocation\n  ‚Ä¢ Intelligent agent selection  \n  ‚Ä¢ Workflow optimization\n  ‚Ä¢ Reduced manual configuration\n  ‚Ä¢ Performance-based scaling\n  ‚Ä¢ Claude CLI integration for actual execution\n  ‚Ä¢ MLE-STAR methodology for ML engineering\n  ‚Ä¢ Non-interactive mode for CI/CD integration\n  ‚Ä¢ Comprehensive workflow templates\n`);\n}\n"],"names":["printSuccess","printError","printWarning","WorkflowExecutor","loadWorkflowFromFile","getMLEStarWorkflowPath","existsSync","generateId","prefix","Date","now","Math","random","toString","substr","automationAction","subArgs","flags","subcommand","options","help","h","showAutomationHelp","autoAgentCommand","smartSpawnCommand","workflowSelectCommand","runWorkflowCommand","mleStarCommand","err","message","complexity","swarmId","console","log","agentConfig","toLowerCase","coordinator","developer","total","researcher","analyzer","tester","Object","entries","forEach","type","count","Promise","resolve","setTimeout","requirement","maxAgents","parseInt","recommendedAgents","includes","push","reason","length","totalRecommended","agent","projectType","project","priority","workflows","phases","agents","duration","api","enterprise","general","selectedWorkflow","toUpperCase","phase","index","charAt","slice","workflowFile","workflowData","executor","enableClaude","claude","nonInteractive","outputFormat","maxConcurrency","timeout","logLevel","verbose","workflowName","name","workflowType","enableChaining","chaining","variables","assign","JSON","parse","error","result","executeWorkflow","stringify","success","errors","process","exit","workflowPath","description","metadata","expected_runtime","datasetPath","dataset","data","targetColumn","target","isNonInteractive","interactive","undefined","quiet","dataset_path","target_column","experiment_name","model_output_dir","output","search_iterations","refinement_iterations","completedTasks","totalTasks","formatDuration","executionId","results","keys","taskId","taskResult","status"],"mappings":"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"}