{"version":3,"sources":["../../../../src/cli/simple-commands/inject-memory-protocol.js"],"sourcesContent":["// inject-memory-protocol.js - Injects memory coordination protocol for swarms\n\nimport { existsSync } from 'fs';\nimport { promises as fs } from 'fs/promises';\nimport path from 'path';\n\n/**\n * Memory coordination protocol to inject\n */\nconst MEMORY_PROTOCOL = `\n## 🧠 MANDATORY MEMORY COORDINATION PROTOCOL\n\n### 🚨 CRITICAL: Every Agent MUST Write AND Read Memory\n\n**EVERY spawned agent MUST follow this exact pattern:**\n\n\\`\\`\\`javascript\n// 1️⃣ IMMEDIATELY when agent starts - WRITE initial status\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"swarm/[agent-name]/status\",\n  namespace: \"coordination\",\n  value: JSON.stringify({\n    agent: \"[agent-name]\",\n    status: \"starting\",\n    timestamp: Date.now(),\n    tasks: [\"list\", \"of\", \"tasks\"],\n    progress: 0\n  })\n}\n\n// 2️⃣ AFTER EACH MAJOR STEP - WRITE progress\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"swarm/[agent-name]/progress\",\n  namespace: \"coordination\",\n  value: JSON.stringify({\n    completed: [\"task1\", \"task2\"],\n    current: \"working on task3\",\n    progress: 35,\n    files_created: [\"file1.js\"],\n    interfaces: { \"API\": \"definition\" },\n    dependencies_needed: []\n  })\n}\n\n// 3️⃣ SHARE ARTIFACTS - WRITE for others\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"swarm/shared/[component]\",\n  namespace: \"coordination\",\n  value: JSON.stringify({\n    type: \"interface\",\n    definition: \"actual code here\",\n    created_by: \"[agent-name]\"\n  })\n}\n\n// 4️⃣ CHECK DEPENDENCIES - READ then WAIT\nconst dep = mcp__claude-flow__memory_usage {\n  action: \"retrieve\",\n  key: \"swarm/shared/[component]\",\n  namespace: \"coordination\"\n}\nif (!dep.found) {\n  // Write waiting status\n  mcp__claude-flow__memory_usage {\n    action: \"store\",\n    key: \"swarm/[agent-name]/waiting\",\n    namespace: \"coordination\",\n    value: JSON.stringify({\n      waiting_for: \"[component]\",\n      from: \"[other-agent]\"\n    })\n  }\n}\n\n// 5️⃣ SIGNAL COMPLETION\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  key: \"swarm/[agent-name]/complete\",\n  namespace: \"coordination\",\n  value: JSON.stringify({\n    status: \"complete\",\n    deliverables: [\"list\"],\n    integration_points: [\"how to use\"]\n  })\n}\n\\`\\`\\`\n\n### 📊 MEMORY KEY STRUCTURE\n- Use namespace: \"coordination\" ALWAYS\n- Keys: swarm/[agent]/status|progress|waiting|complete\n- Shared: swarm/shared/[component]\n\n### ❌ COMMON MISTAKES\n1. Only reading, never writing\n2. Wrong namespace\n3. No progress updates\n4. Missing shared artifacts\n`;\n\n/**\n * Agent instruction template with memory requirements\n */\nconst AGENT_INSTRUCTION = `\n🚨 MANDATORY MEMORY COORDINATION:\n\n1. START - IMMEDIATELY write status:\n   mcp__claude-flow__memory_usage { action: \"store\", key: \"swarm/[your-name]/status\", namespace: \"coordination\", value: {status: \"starting\"} }\n\n2. PROGRESS - After EVERY major step:\n   mcp__claude-flow__memory_usage { action: \"store\", key: \"swarm/[your-name]/progress\", namespace: \"coordination\", value: {progress: X%} }\n\n3. SHARE - Write ALL interfaces/APIs:\n   mcp__claude-flow__memory_usage { action: \"store\", key: \"swarm/shared/[component]\", namespace: \"coordination\", value: {definition: \"...\"} }\n\n4. CHECK - Verify dependencies exist:\n   mcp__claude-flow__memory_usage { action: \"retrieve\", key: \"swarm/shared/[component]\", namespace: \"coordination\" }\n\n5. COMPLETE - Signal when done:\n   mcp__claude-flow__memory_usage { action: \"store\", key: \"swarm/[your-name]/complete\", namespace: \"coordination\", value: {deliverables: [...]} }\n\nREMEMBER: If you don't WRITE to memory, other agents can't coordinate with you!\n`;\n\n/**\n * Inject memory protocol into CLAUDE.md\n */\nexport async function injectMemoryProtocol(projectPath = process.cwd()) {\n  const claudeMdPath = path.join(projectPath, 'CLAUDE.md');\n  \n  try {\n    let content = '';\n    let hasProtocol = false;\n    \n    // Check if CLAUDE.md exists\n    if (existsSync(claudeMdPath)) {\n      content = await fs.readFile(claudeMdPath, 'utf8');\n      hasProtocol = content.includes('MANDATORY MEMORY COORDINATION PROTOCOL');\n    }\n    \n    // If protocol not present, inject it\n    if (!hasProtocol) {\n      // Find a good injection point (after project overview or at start)\n      const injectionPoint = content.indexOf('## Project Overview');\n      \n      if (injectionPoint > -1) {\n        // Insert before Project Overview\n        content = \n          content.slice(0, injectionPoint) + \n          MEMORY_PROTOCOL + '\\n\\n' +\n          content.slice(injectionPoint);\n      } else {\n        // Prepend to file\n        content = MEMORY_PROTOCOL + '\\n\\n' + content;\n      }\n      \n      await fs.writeFile(claudeMdPath, content, 'utf8');\n      console.log('✅ Injected memory coordination protocol into CLAUDE.md');\n      return true;\n    } else {\n      console.log('✓ Memory coordination protocol already present in CLAUDE.md');\n      return false;\n    }\n  } catch (error) {\n    console.error('⚠️  Could not inject memory protocol:', error.message);\n    return false;\n  }\n}\n\n/**\n * Enhance swarm prompt with memory instructions\n */\nexport function enhanceSwarmPrompt(originalPrompt, agentCount = 5) {\n  const enhancement = `\nCRITICAL: ALL AGENTS MUST COORDINATE THROUGH MEMORY\n\n${AGENT_INSTRUCTION}\n\nEach of the ${agentCount} agents MUST:\n- Write initial status when starting\n- Update progress after each step (with %)\n- Share all interfaces/APIs/configs\n- Check dependencies before using\n- Signal completion when done\n\nALL memory operations use namespace: \"coordination\"\n\nMemory monitoring commands:\n- Check status: memory search \"swarm/*/status\" --namespace coordination\n- View progress: memory search \"swarm/*/progress\" --namespace coordination\n- Find blockers: memory search \"swarm/*/waiting\" --namespace coordination\n- List shared: memory search \"swarm/shared/*\" --namespace coordination\n\n---\nORIGINAL OBJECTIVE:\n${originalPrompt}`;\n\n  return enhancement;\n}\n\n/**\n * Enhance hive-mind prompt with memory instructions\n */\nexport function enhanceHiveMindPrompt(originalPrompt, workers = []) {\n  const workerInstructions = workers.map(w => \n    `Agent ${w.name}: MUST write to swarm/${w.name}/status and swarm/${w.name}/progress`\n  ).join('\\n');\n\n  return `\nHIVE MIND COORDINATION REQUIREMENTS:\n\n${AGENT_INSTRUCTION}\n\n${workerInstructions}\n\nCoordination namespace: \"coordination\"\nStatus pattern: swarm/[agent]/status\nProgress pattern: swarm/[agent]/progress  \nShared pattern: swarm/shared/[component]\n\n---\nORIGINAL OBJECTIVE:\n${originalPrompt}`;\n}\n\n/**\n * Check if memory protocol should be injected\n */\nexport function shouldInjectProtocol(flags) {\n  return flags.claude || flags.spawn || flags['auto-spawn'];\n}\n\nexport default {\n  injectMemoryProtocol,\n  enhanceSwarmPrompt,\n  enhanceHiveMindPrompt,\n  shouldInjectProtocol,\n  MEMORY_PROTOCOL,\n  AGENT_INSTRUCTION\n};"],"names":["existsSync","promises","fs","path","MEMORY_PROTOCOL","AGENT_INSTRUCTION","injectMemoryProtocol","projectPath","process","cwd","claudeMdPath","join","content","hasProtocol","readFile","includes","injectionPoint","indexOf","slice","writeFile","console","log","error","message","enhanceSwarmPrompt","originalPrompt","agentCount","enhancement","enhanceHiveMindPrompt","workers","workerInstructions","map","w","name","shouldInjectProtocol","flags","claude","spawn"],"mappings":"AAEA,SAASA,UAAU,QAAQ,KAAK;AAChC,SAASC,YAAYC,EAAE,QAAQ,cAAc;AAC7C,OAAOC,UAAU,OAAO;AAKxB,MAAMC,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FzB,CAAC;AAKD,MAAMC,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;AAmB3B,CAAC;AAKD,OAAO,eAAeC,qBAAqBC,cAAcC,QAAQC,GAAG,EAAE;IACpE,MAAMC,eAAeP,KAAKQ,IAAI,CAACJ,aAAa;IAE5C,IAAI;QACF,IAAIK,UAAU;QACd,IAAIC,cAAc;QAGlB,IAAIb,WAAWU,eAAe;YAC5BE,UAAU,MAAMV,GAAGY,QAAQ,CAACJ,cAAc;YAC1CG,cAAcD,QAAQG,QAAQ,CAAC;QACjC;QAGA,IAAI,CAACF,aAAa;YAEhB,MAAMG,iBAAiBJ,QAAQK,OAAO,CAAC;YAEvC,IAAID,iBAAiB,CAAC,GAAG;gBAEvBJ,UACEA,QAAQM,KAAK,CAAC,GAAGF,kBACjBZ,kBAAkB,SAClBQ,QAAQM,KAAK,CAACF;YAClB,OAAO;gBAELJ,UAAUR,kBAAkB,SAASQ;YACvC;YAEA,MAAMV,GAAGiB,SAAS,CAACT,cAAcE,SAAS;YAC1CQ,QAAQC,GAAG,CAAC;YACZ,OAAO;QACT,OAAO;YACLD,QAAQC,GAAG,CAAC;YACZ,OAAO;QACT;IACF,EAAE,OAAOC,OAAO;QACdF,QAAQE,KAAK,CAAC,yCAAyCA,MAAMC,OAAO;QACpE,OAAO;IACT;AACF;AAKA,OAAO,SAASC,mBAAmBC,cAAc,EAAEC,aAAa,CAAC;IAC/D,MAAMC,cAAc,CAAC;;;AAGvB,EAAEtB,kBAAkB;;YAER,EAAEqB,WAAW;;;;;;;;;;;;;;;;;AAiBzB,EAAED,gBAAgB;IAEhB,OAAOE;AACT;AAKA,OAAO,SAASC,sBAAsBH,cAAc,EAAEI,UAAU,EAAE;IAChE,MAAMC,qBAAqBD,QAAQE,GAAG,CAACC,CAAAA,IACrC,CAAC,MAAM,EAAEA,EAAEC,IAAI,CAAC,sBAAsB,EAAED,EAAEC,IAAI,CAAC,kBAAkB,EAAED,EAAEC,IAAI,CAAC,SAAS,CAAC,EACpFtB,IAAI,CAAC;IAEP,OAAO,CAAC;;;AAGV,EAAEN,kBAAkB;;AAEpB,EAAEyB,mBAAmB;;;;;;;;;AASrB,EAAEL,gBAAgB;AAClB;AAKA,OAAO,SAASS,qBAAqBC,KAAK;IACxC,OAAOA,MAAMC,MAAM,IAAID,MAAME,KAAK,IAAIF,KAAK,CAAC,aAAa;AAC3D;AAEA,eAAe;IACb7B;IACAkB;IACAI;IACAM;IACA9B;IACAC;AACF,EAAE"}