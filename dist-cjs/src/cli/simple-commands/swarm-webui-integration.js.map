{"version":3,"sources":["../../../../src/cli/simple-commands/swarm-webui-integration.js"],"sourcesContent":["/**\n * Swarm Orchestration WebUI Integration\n * Integrates ruv-swarm capabilities with the cross-platform WebUI\n */\n\nimport { compat } from '../runtime-detector.js';\n\nexport class SwarmWebUIIntegration {\n  constructor(ui) {\n    this.ui = ui;\n    this.swarmActive = false;\n    this.swarmId = null;\n    this.agents = new Map();\n    this.tasks = new Map();\n  }\n\n  /**\n   * Initialize swarm integration\n   */\n  async initializeSwarm(topology = 'hierarchical', maxAgents = 8) {\n    try {\n      // Check if ruv-swarm is available\n      const hasSwarm = await this.checkSwarmAvailability();\n      if (!hasSwarm) {\n        this.ui.addLog('warning', 'ruv-swarm not available - using mock swarm');\n        this.initializeMockSwarm();\n        return;\n      }\n\n      // Initialize actual swarm\n      this.ui.addLog('info', `Initializing ${topology} swarm with ${maxAgents} agents...`);\n\n      // This would integrate with actual ruv-swarm MCP tools\n      // For now, simulate swarm initialization\n      this.swarmActive = true;\n      this.swarmId = `swarm-${Date.now()}`;\n\n      this.ui.addLog('success', `Swarm ${this.swarmId} initialized successfully`);\n\n      // Update UI with swarm status\n      this.updateSwarmStatus();\n    } catch (err) {\n      this.ui.addLog('error', `Failed to initialize swarm: ${err.message}`);\n    }\n  }\n\n  /**\n   * Check if ruv-swarm MCP tools are available\n   */\n  async checkSwarmAvailability() {\n    try {\n      // This would check for actual MCP connection\n      // For demo purposes, simulate availability\n      return compat.getEnv('CLAUDE_FLOW_SWARM_ENABLED') === 'true';\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Initialize mock swarm for demonstration\n   */\n  initializeMockSwarm() {\n    this.swarmActive = true;\n    this.swarmId = 'mock-swarm';\n\n    // Create mock agents\n    const agentTypes = ['researcher', 'coder', 'analyst', 'coordinator', 'tester'];\n    agentTypes.forEach((type, index) => {\n      const agentId = `agent-${type}-${index}`;\n      this.agents.set(agentId, {\n        id: agentId,\n        type,\n        name: `${type.charAt(0).toUpperCase() + type.slice(1)} Agent`,\n        status: 'idle',\n        tasks: 0,\n        capabilities: this.getAgentCapabilities(type),\n        spawnTime: new Date(),\n      });\n    });\n\n    // Create mock tasks\n    const mockTasks = [\n      {\n        description: 'Analyze system requirements',\n        priority: 'high',\n        assignedTo: 'agent-researcher-0',\n      },\n      {\n        description: 'Implement authentication module',\n        priority: 'high',\n        assignedTo: 'agent-coder-1',\n      },\n      { description: 'Performance analysis', priority: 'medium', assignedTo: 'agent-analyst-2' },\n      {\n        description: 'Coordinate deployment',\n        priority: 'medium',\n        assignedTo: 'agent-coordinator-3',\n      },\n      { description: 'Run integration tests', priority: 'low', assignedTo: 'agent-tester-4' },\n    ];\n\n    mockTasks.forEach((task, index) => {\n      const taskId = `task-${index}`;\n      this.tasks.set(taskId, {\n        id: taskId,\n        ...task,\n        status: index < 2 ? 'in_progress' : 'pending',\n        created: new Date(),\n        swarmId: this.swarmId,\n      });\n    });\n\n    this.ui.addLog('success', 'Mock swarm initialized with 5 agents and 5 tasks');\n  }\n\n  /**\n   * Get capabilities for different agent types\n   */\n  getAgentCapabilities(type) {\n    const capabilities = {\n      researcher: ['data_analysis', 'web_search', 'documentation'],\n      coder: ['javascript', 'python', 'typescript', 'git'],\n      analyst: ['performance', 'metrics', 'optimization'],\n      coordinator: ['task_management', 'scheduling', 'communication'],\n      tester: ['unit_testing', 'integration_testing', 'qa'],\n    };\n    return capabilities[type] || [];\n  }\n\n  /**\n   * Update swarm status in UI\n   */\n  updateSwarmStatus() {\n    if (!this.swarmActive) return;\n\n    // Update UI agents with swarm data\n    this.ui.agents = Array.from(this.agents.values());\n    this.ui.tasks = Array.from(this.tasks.values());\n\n    // Update system stats\n    this.ui.systemStats.activeAgents = this.ui.agents.filter((a) => a.status === 'working').length;\n    this.ui.systemStats.totalTasks = this.ui.tasks.length;\n    this.ui.systemStats.completedTasks = this.ui.tasks.filter(\n      (t) => t.status === 'completed',\n    ).length;\n  }\n\n  /**\n   * Spawn new agent\n   */\n  async spawnAgent(type, name = null) {\n    if (!this.swarmActive) {\n      this.ui.addLog('warning', 'Swarm not active - cannot spawn agent');\n      return null;\n    }\n\n    const agentId = `agent-${type}-${Date.now()}`;\n    const agent = {\n      id: agentId,\n      type,\n      name: name || `${type.charAt(0).toUpperCase() + type.slice(1)} Agent`,\n      status: 'idle',\n      tasks: 0,\n      capabilities: this.getAgentCapabilities(type),\n      spawnTime: new Date(),\n    };\n\n    this.agents.set(agentId, agent);\n    this.updateSwarmStatus();\n\n    this.ui.addLog('success', `Spawned ${type} agent: ${agent.name}`);\n    return agentId;\n  }\n\n  /**\n   * Create new task\n   */\n  async createTask(description, priority = 'medium', assignedTo = null) {\n    if (!this.swarmActive) {\n      this.ui.addLog('warning', 'Swarm not active - cannot create task');\n      return null;\n    }\n\n    const taskId = `task-${Date.now()}`;\n    const task = {\n      id: taskId,\n      description,\n      priority,\n      assignedTo,\n      status: 'pending',\n      created: new Date(),\n      swarmId: this.swarmId,\n    };\n\n    this.tasks.set(taskId, task);\n    this.updateSwarmStatus();\n\n    this.ui.addLog('success', `Created task: ${description}`);\n    return taskId;\n  }\n\n  /**\n   * Assign task to agent\n   */\n  async assignTask(taskId, agentId) {\n    const task = this.tasks.get(taskId);\n    const agent = this.agents.get(agentId);\n\n    if (!task || !agent) {\n      this.ui.addLog('error', 'Invalid task or agent ID');\n      return false;\n    }\n\n    task.assignedTo = agentId;\n    task.status = 'in_progress';\n    agent.tasks++;\n    agent.status = 'working';\n\n    this.updateSwarmStatus();\n    this.ui.addLog('info', `Assigned task \"${task.description}\" to ${agent.name}`);\n    return true;\n  }\n\n  /**\n   * Complete task\n   */\n  async completeTask(taskId) {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      this.ui.addLog('error', 'Invalid task ID');\n      return false;\n    }\n\n    task.status = 'completed';\n    task.completed = new Date();\n\n    if (task.assignedTo) {\n      const agent = this.agents.get(task.assignedTo);\n      if (agent) {\n        agent.tasks = Math.max(0, agent.tasks - 1);\n        if (agent.tasks === 0) {\n          agent.status = 'idle';\n        }\n      }\n    }\n\n    this.updateSwarmStatus();\n    this.ui.addLog('success', `Completed task: ${task.description}`);\n    return true;\n  }\n\n  /**\n   * Get swarm metrics for display\n   */\n  getSwarmMetrics() {\n    if (!this.swarmActive) {\n      return null;\n    }\n\n    const totalAgents = this.agents.size;\n    const activeAgents = Array.from(this.agents.values()).filter(\n      (a) => a.status === 'working',\n    ).length;\n    const idleAgents = totalAgents - activeAgents;\n\n    const totalTasks = this.tasks.size;\n    const completedTasks = Array.from(this.tasks.values()).filter(\n      (t) => t.status === 'completed',\n    ).length;\n    const pendingTasks = Array.from(this.tasks.values()).filter(\n      (t) => t.status === 'pending',\n    ).length;\n    const inProgressTasks = Array.from(this.tasks.values()).filter(\n      (t) => t.status === 'in_progress',\n    ).length;\n\n    return {\n      swarmId: this.swarmId,\n      agents: {\n        total: totalAgents,\n        active: activeAgents,\n        idle: idleAgents,\n      },\n      tasks: {\n        total: totalTasks,\n        completed: completedTasks,\n        inProgress: inProgressTasks,\n        pending: pendingTasks,\n      },\n      efficiency: totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0,\n    };\n  }\n\n  /**\n   * Stop swarm\n   */\n  async stopSwarm() {\n    if (!this.swarmActive) return;\n\n    this.swarmActive = false;\n    this.agents.clear();\n    this.tasks.clear();\n    this.swarmId = null;\n\n    this.ui.addLog('info', 'Swarm stopped and cleaned up');\n    this.updateSwarmStatus();\n  }\n}\n\nexport default SwarmWebUIIntegration;\n"],"names":["compat","SwarmWebUIIntegration","ui","swarmActive","swarmId","agents","Map","tasks","initializeSwarm","topology","maxAgents","hasSwarm","checkSwarmAvailability","addLog","initializeMockSwarm","Date","now","updateSwarmStatus","err","message","getEnv","agentTypes","forEach","type","index","agentId","set","id","name","charAt","toUpperCase","slice","status","capabilities","getAgentCapabilities","spawnTime","mockTasks","description","priority","assignedTo","task","taskId","created","researcher","coder","analyst","coordinator","tester","Array","from","values","systemStats","activeAgents","filter","a","length","totalTasks","completedTasks","t","spawnAgent","agent","createTask","assignTask","get","completeTask","completed","Math","max","getSwarmMetrics","totalAgents","size","idleAgents","pendingTasks","inProgressTasks","total","active","idle","inProgress","pending","efficiency","round","stopSwarm","clear"],"mappings":"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"}