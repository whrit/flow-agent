{"version":3,"sources":["../../../../src/cli/simple-commands/status.js"],"sourcesContent":["// status.js - System status and monitoring commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { promises as fs } from 'fs';\n// Removed Deno import from '../node-compat.js';\nimport { MetricsReader } from '../../utils/metrics-reader.js';\n\nexport async function statusCommand(subArgs, flags) {\n  const verbose = subArgs.includes('--verbose') || subArgs.includes('-v') || flags.verbose;\n  const json = subArgs.includes('--json') || flags.json;\n\n  const status = await getSystemStatus(verbose);\n\n  if (json) {\n    console.log(JSON.stringify(status, null, 2));\n  } else {\n    displayStatus(status, verbose);\n  }\n}\n\nasync function getSystemStatus(verbose = false) {\n  const reader = new MetricsReader();\n  \n  // Get real metrics from files\n  const [systemMetrics, perfMetrics, agents, recentTasks, overallHealth, mcpStatus, taskQueue] = await Promise.all([\n    reader.getSystemMetrics(),\n    reader.getPerformanceMetrics(),\n    reader.getActiveAgents(),\n    reader.getRecentTasks(5),\n    reader.getOverallHealth(),\n    reader.getMCPServerStatus(),\n    reader.getTaskQueue()\n  ]);\n  \n  // Count active agents\n  const activeAgentCount = agents.filter(a => a.status === 'active' || a.status === 'busy').length;\n  \n  // Build status object with real data\n  const status = {\n    timestamp: Date.now(),\n    version: '2.0.0-alpha.83',\n    orchestrator: {\n      running: perfMetrics && perfMetrics.totalTasks > 0,\n      uptime: systemMetrics ? systemMetrics.uptime : 0,\n      status: perfMetrics && perfMetrics.totalTasks > 0 ? 'Running' : 'Not Running',\n    },\n    agents: {\n      active: activeAgentCount,\n      total: agents.length,\n      types: agents.reduce((acc, agent) => {\n        acc[agent.type] = (acc[agent.type] || 0) + 1;\n        return acc;\n      }, {}),\n    },\n    tasks: {\n      queued: taskQueue.filter(t => t.status === 'queued').length,\n      running: taskQueue.filter(t => t.status === 'running').length + agents.filter(a => a.status === 'busy').length,\n      completed: perfMetrics ? perfMetrics.successfulTasks : 0,\n      failed: perfMetrics ? perfMetrics.failedTasks : 0,\n    },\n    memory: {\n      status: systemMetrics && systemMetrics.memoryUsagePercent < 80 ? 'Ready' : 'Warning',\n      entries: await getMemoryStats(),\n      size: systemMetrics ? `${(systemMetrics.memoryUsed / (1024 * 1024)).toFixed(2)} MB` : '0 KB',\n    },\n    terminal: {\n      status: 'Ready',\n      poolSize: 10,\n      active: perfMetrics ? perfMetrics.activeAgents : 0,\n    },\n    mcp: {\n      status: mcpStatus && mcpStatus.running ? 'Running' : 'Stopped',\n      port: mcpStatus ? mcpStatus.port : null,\n      connections: mcpStatus ? mcpStatus.connections : 0,\n    },\n    resources: verbose ? await getResourceUsage() : null,\n  };\n\n  return status;\n}\n\nasync function getMemoryStats() {\n  try {\n    const memoryStore = './memory/memory-store.json';\n    const content = await fs.readFile(memoryStore, 'utf8');\n    const data = JSON.parse(content);\n\n    let totalEntries = 0;\n    for (const entries of Object.values(data)) {\n      totalEntries += entries.length;\n    }\n\n    return totalEntries;\n  } catch {\n    return 0;\n  }\n}\n\nasync function getResourceUsage() {\n  // Get system resource information\n  try {\n    // Dynamic import for cross-platform compatibility\n    let os;\n    try {\n      os = await import('node:os');\n    } catch {\n      try {\n        os = await import('os');\n      } catch {\n        // Fallback for environments without os module\n        return {\n          memory: { usage: 'N/A (os module unavailable)' },\n          cpu: { cores: 'Unknown', load: 'Unknown' },\n          platform: { type: 'Unknown', error: 'os module not available' },\n        };\n      }\n    }\n\n    // Node.js doesn't have systemMemoryInfo, use os module instead\n    const totalMem = os.totalmem();\n    const freeMem = os.freemem();\n    const memInfo = {\n      total: totalMem,\n      free: freeMem,\n      available: freeMem,\n      buffers: 0,\n      cached: 0,\n      swapTotal: 0,\n      swapFree: 0,\n    };\n\n    // Get CPU info\n    let cpuCores = os.cpus().length;\n    let loadAvg = 'N/A';\n\n    try {\n      const loadAvgData = os.loadavg();\n      loadAvg = `${loadAvgData[0].toFixed(2)}, ${loadAvgData[1].toFixed(2)}, ${loadAvgData[2].toFixed(2)}`;\n    } catch (e) {\n      // Load average not available on all platforms\n    }\n\n    return {\n      memory: {\n        total: formatBytes(memInfo.total),\n        free: formatBytes(memInfo.free),\n        available: formatBytes(memInfo.available),\n        usage: `${Math.round(((memInfo.total - memInfo.available) / memInfo.total) * 100)}%`,\n      },\n      cpu: {\n        cores: cpuCores,\n        load: loadAvg,\n        model: os.cpus()[0]?.model || 'Unknown',\n      },\n      platform: {\n        type: os.type(),\n        release: os.release(),\n        arch: os.arch(),\n        uptime: formatUptime(os.uptime() * 1000),\n      },\n    };\n  } catch (error) {\n    return {\n      memory: { usage: 'Unknown' },\n      cpu: { cores: 'Unknown', load: 'Unknown' },\n      platform: { type: 'Unknown', error: error.message },\n    };\n  }\n}\n\nfunction displayStatus(status, verbose) {\n  printSuccess('Claude-Flow System Status:');\n\n  // Overall status\n  const overallStatus = status.orchestrator.running ? '🟢 Running' : '🟡 Not Running';\n  console.log(\n    `${overallStatus} (orchestrator ${status.orchestrator.running ? 'active' : 'not started'})`,\n  );\n\n  // Core components\n  console.log(`🤖 Agents: ${status.agents.active} active`);\n  console.log(`📋 Tasks: ${status.tasks.queued} in queue`);\n  console.log(`💾 Memory: ${status.memory.status} (${status.memory.entries} entries)`);\n  console.log(`🖥️  Terminal Pool: ${status.terminal.status}`);\n  console.log(`🌐 MCP Server: ${status.mcp.status}`);\n\n  if (verbose) {\n    console.log('\\n📊 Detailed Information:');\n\n    // Orchestrator details\n    console.log('\\n🎭 Orchestrator:');\n    console.log(`   Status: ${status.orchestrator.status}`);\n    console.log(`   Uptime: ${formatUptime(status.orchestrator.uptime)}`);\n\n    // Agent details\n    console.log('\\n🤖 Agent Details:');\n    console.log(`   Total Registered: ${status.agents.total}`);\n    console.log(`   Currently Active: ${status.agents.active}`);\n    if (Object.keys(status.agents.types).length > 0) {\n      console.log('   Types:');\n      for (const [type, count] of Object.entries(status.agents.types)) {\n        console.log(`     ${type}: ${count}`);\n      }\n    } else {\n      console.log('   No agents currently registered');\n    }\n\n    // Task details\n    console.log('\\n📋 Task Queue:');\n    console.log(`   Queued: ${status.tasks.queued}`);\n    console.log(`   Running: ${status.tasks.running}`);\n    console.log(`   Completed: ${status.tasks.completed}`);\n    console.log(`   Failed: ${status.tasks.failed}`);\n\n    // Memory details\n    console.log('\\n💾 Memory System:');\n    console.log(`   Total Entries: ${status.memory.entries}`);\n    console.log(`   Database Size: ${status.memory.size}`);\n    console.log(`   Status: ${status.memory.status}`);\n\n    // Terminal details\n    console.log('\\n🖥️  Terminal Pool:');\n    console.log(`   Pool Size: ${status.terminal.poolSize}`);\n    console.log(`   Active Sessions: ${status.terminal.active}`);\n    console.log(`   Status: ${status.terminal.status}`);\n\n    // MCP details\n    console.log('\\n🌐 MCP Server:');\n    console.log(`   Status: ${status.mcp.status}`);\n    console.log(`   Port: ${status.mcp.port || 'Not configured'}`);\n    console.log(`   Active Connections: ${status.mcp.connections}`);\n\n    // Resource usage\n    if (status.resources) {\n      console.log('\\n📈 Resource Usage:');\n      console.log(\n        `   Memory: ${status.resources.memory.usage} of ${status.resources.memory.total}`,\n      );\n      console.log(`   Available: ${status.resources.memory.available}`);\n      console.log(`   CPU Cores: ${status.resources.cpu.cores}`);\n      console.log(`   CPU Load: ${status.resources.cpu.load}`);\n      if (status.resources.cpu.model) {\n        console.log(`   CPU Model: ${status.resources.cpu.model}`);\n      }\n\n      if (status.resources.platform) {\n        console.log('\\n💻 Platform:');\n        console.log(\n          `   OS: ${status.resources.platform.type} ${status.resources.platform.release}`,\n        );\n        console.log(`   Architecture: ${status.resources.platform.arch}`);\n        console.log(`   System Uptime: ${status.resources.platform.uptime}`);\n      }\n    }\n\n    console.log('\\n🕐 Status captured at:', new Date(status.timestamp).toLocaleString());\n  }\n\n  // Recommendations\n  console.log('\\n💡 Quick Actions:');\n  if (!status.orchestrator.running) {\n    console.log('   Run \"claude-flow start\" to begin orchestration');\n  }\n  if (status.agents.active === 0) {\n    console.log('   Run \"claude-flow agent spawn researcher\" to create an agent');\n  }\n  if (status.memory.entries === 0) {\n    console.log('   Run \"claude-flow memory store key value\" to test memory');\n  }\n}\n\nfunction formatBytes(bytes) {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n}\n\nfunction formatUptime(milliseconds) {\n  if (milliseconds === 0) return '0s';\n\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\n// Allow direct execution for testing\nif (import.meta.main) {\n  const args = [];\n  const flags = {};\n\n  // Parse arguments and flags from Deno.args if available\n  if (typeof Deno !== 'undefined' && Deno.args) {\n    for (let i = 0; i < Deno.args.length; i++) {\n      const arg = Deno.args[i];\n      if (arg.startsWith('--')) {\n        const flagName = arg.substring(2);\n        const nextArg = Deno.args[i + 1];\n\n        if (nextArg && !nextArg.startsWith('--')) {\n          flags[flagName] = nextArg;\n          i++; // Skip the next argument\n        } else {\n          flags[flagName] = true;\n        }\n      } else {\n        args.push(arg);\n      }\n    }\n  }\n\n  await statusCommand(args, flags);\n}\n"],"names":["printSuccess","promises","fs","MetricsReader","statusCommand","subArgs","flags","verbose","includes","json","status","getSystemStatus","console","log","JSON","stringify","displayStatus","reader","systemMetrics","perfMetrics","agents","recentTasks","overallHealth","mcpStatus","taskQueue","Promise","all","getSystemMetrics","getPerformanceMetrics","getActiveAgents","getRecentTasks","getOverallHealth","getMCPServerStatus","getTaskQueue","activeAgentCount","filter","a","length","timestamp","Date","now","version","orchestrator","running","totalTasks","uptime","active","total","types","reduce","acc","agent","type","tasks","queued","t","completed","successfulTasks","failed","failedTasks","memory","memoryUsagePercent","entries","getMemoryStats","size","memoryUsed","toFixed","terminal","poolSize","activeAgents","mcp","port","connections","resources","getResourceUsage","memoryStore","content","readFile","data","parse","totalEntries","Object","values","os","usage","cpu","cores","load","platform","error","totalMem","totalmem","freeMem","freemem","memInfo","free","available","buffers","cached","swapTotal","swapFree","cpuCores","cpus","loadAvg","loadAvgData","loadavg","e","formatBytes","Math","round","model","release","arch","formatUptime","message","overallStatus","keys","count","toLocaleString","bytes","units","unitIndex","milliseconds","seconds","floor","minutes","hours","days","main","args","Deno","i","arg","startsWith","flagName","substring","nextArg","push"],"mappings":"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"}