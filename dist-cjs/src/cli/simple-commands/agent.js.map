{"version":3,"sources":["../../../../src/cli/simple-commands/agent.js"],"sourcesContent":["// agent.js - Agent management commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { onAgentSpawn, onAgentAction } from './performance-hooks.js';\n\nexport async function agentCommand(subArgs, flags) {\n  const agentCmd = subArgs[0];\n\n  switch (agentCmd) {\n    case 'spawn':\n      await spawnAgent(subArgs, flags);\n      break;\n\n    case 'list':\n      await listAgents(subArgs, flags);\n      break;\n\n    case 'hierarchy':\n      await manageHierarchy(subArgs, flags);\n      break;\n\n    case 'network':\n      await manageNetwork(subArgs, flags);\n      break;\n\n    case 'ecosystem':\n      await manageEcosystem(subArgs, flags);\n      break;\n\n    case 'provision':\n      await provisionAgent(subArgs, flags);\n      break;\n\n    case 'terminate':\n      await terminateAgent(subArgs, flags);\n      break;\n\n    case 'info':\n      await showAgentInfo(subArgs, flags);\n      break;\n\n    default:\n      showAgentHelp();\n  }\n}\n\nasync function spawnAgent(subArgs, flags) {\n  const agentType = subArgs[1] || 'general';\n  const agentName = getFlag(subArgs, '--name') || flags.name || `agent-${Date.now()}`;\n  const agentId = `${agentType}-${Date.now()}`;\n\n  // Create the agent object\n  const agent = {\n    id: agentId,\n    name: agentName,\n    type: agentType,\n    status: 'active',\n    activeTasks: 0,\n    lastActivity: Date.now(),\n    capabilities: getAgentCapabilities(agentType),\n    createdAt: Date.now()\n  };\n\n  // Store agent in session/agents directory\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  // Ensure agents directory exists\n  const agentsDir = '.claude-flow/agents';\n  await fs.mkdir(agentsDir, { recursive: true });\n  \n  // Save agent data\n  const agentFile = path.join(agentsDir, `${agentId}.json`);\n  await fs.writeFile(agentFile, JSON.stringify(agent, null, 2));\n  \n  // Update performance metrics\n  const perfFile = '.claude-flow/metrics/performance.json';\n  try {\n    const perfData = JSON.parse(await fs.readFile(perfFile, 'utf8'));\n    perfData.totalAgents = (perfData.totalAgents || 0) + 1;\n    perfData.activeAgents = (perfData.activeAgents || 0) + 1;\n    await fs.writeFile(perfFile, JSON.stringify(perfData, null, 2));\n  } catch (e) {\n    // Create new performance file if doesn't exist\n    await fs.writeFile(perfFile, JSON.stringify({\n      startTime: Date.now(),\n      totalTasks: 0,\n      successfulTasks: 0,\n      failedTasks: 0,\n      totalAgents: 1,\n      activeAgents: 1,\n      neuralEvents: 0\n    }, null, 2));\n  }\n\n  printSuccess(`‚úÖ Spawned ${agentType} agent: ${agentName}`);\n  console.log('ü§ñ Agent successfully created:');\n  console.log(`   ID: ${agentId}`);\n  console.log(`   Type: ${agentType}`);\n  console.log(`   Name: ${agentName}`);\n  console.log(`   Capabilities: ${agent.capabilities.join(', ')}`);\n  console.log(`   Status: ${agent.status}`);\n  console.log(`   Location: ${agentFile}`);\n  \n  // Track agent spawn for performance metrics\n  await onAgentSpawn(agentId, agentType, { name: agentName });\n}\n\nfunction getAgentCapabilities(type) {\n  const capabilities = {\n    researcher: ['Research', 'Analysis', 'Information Gathering', 'Documentation'],\n    coder: ['Code Generation', 'Implementation', 'Refactoring', 'Debugging'],\n    tester: ['Testing', 'Validation', 'Quality Assurance', 'Performance Testing'],\n    analyst: ['Data Analysis', 'Pattern Recognition', 'Reporting', 'Optimization'],\n    coordinator: ['Task Management', 'Workflow Orchestration', 'Resource Allocation'],\n    general: ['Research', 'Analysis', 'Code Generation']\n  };\n  return capabilities[type] || capabilities.general;\n}\n\nasync function listAgents(subArgs, flags) {\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  const agentsDir = '.claude-flow/agents';\n  const agents = [];\n  \n  try {\n    const agentFiles = await fs.readdir(agentsDir);\n    for (const file of agentFiles) {\n      if (file.endsWith('.json')) {\n        try {\n          const content = await fs.readFile(path.join(agentsDir, file), 'utf8');\n          const agent = JSON.parse(content);\n          agents.push(agent);\n        } catch {\n          // Skip invalid agent files\n        }\n      }\n    }\n  } catch {\n    // Agents directory doesn't exist yet\n  }\n  \n  if (agents.length > 0) {\n    printSuccess(`Active agents (${agents.length}):`);\n    agents.forEach(agent => {\n      const statusEmoji = agent.status === 'active' ? 'üü¢' : 'üü°';\n      console.log(`${statusEmoji} ${agent.name} (${agent.type})`);\n      console.log(`   ID: ${agent.id}`);\n      console.log(`   Status: ${agent.status}`);\n      console.log(`   Tasks: ${agent.activeTasks}`);\n      console.log(`   Created: ${new Date(agent.createdAt).toLocaleString()}`);\n      console.log('');\n    });\n  } else {\n    console.log('üìã No agents currently active');\n    console.log('\\nTo create agents:');\n    console.log('  claude-flow agent spawn researcher --name \"ResearchBot\"');\n    console.log('  claude-flow agent spawn coder --name \"CodeBot\"');\n    console.log('  claude-flow agent spawn analyst --name \"DataBot\"');\n  }\n}\n\nasync function manageHierarchy(subArgs, flags) {\n  const hierarchyCmd = subArgs[1];\n\n  switch (hierarchyCmd) {\n    case 'create':\n      const hierarchyType = subArgs[2] || 'basic';\n      printSuccess(`Creating ${hierarchyType} agent hierarchy`);\n      console.log('üèóÔ∏è  Hierarchy structure would include:');\n      console.log('   - Coordinator Agent (manages workflow)');\n      console.log('   - Specialist Agents (domain-specific tasks)');\n      console.log('   - Worker Agents (execution tasks)');\n      break;\n\n    case 'show':\n      printSuccess('Current agent hierarchy:');\n      console.log('üìä No hierarchy configured (orchestrator not running)');\n      break;\n\n    default:\n      console.log('Hierarchy commands: create, show');\n      console.log('Examples:');\n      console.log('  claude-flow agent hierarchy create enterprise');\n      console.log('  claude-flow agent hierarchy show');\n  }\n}\n\nasync function manageNetwork(subArgs, flags) {\n  const networkCmd = subArgs[1];\n\n  switch (networkCmd) {\n    case 'topology':\n      printSuccess('Agent network topology:');\n      console.log('üåê Network visualization would show agent connections');\n      break;\n\n    case 'metrics':\n      printSuccess('Network performance metrics:');\n      console.log('üìà Communication latency, throughput, reliability stats');\n      break;\n\n    default:\n      console.log('Network commands: topology, metrics');\n  }\n}\n\nasync function manageEcosystem(subArgs, flags) {\n  const ecosystemCmd = subArgs[1];\n\n  switch (ecosystemCmd) {\n    case 'status':\n      printSuccess('Agent ecosystem status:');\n      console.log('üå± Ecosystem health: Not running');\n      console.log('   Active Agents: 0');\n      console.log('   Resource Usage: 0%');\n      console.log('   Task Queue: Empty');\n      break;\n\n    case 'optimize':\n      printSuccess('Optimizing agent ecosystem...');\n      console.log('‚ö° Optimization would include:');\n      console.log('   - Load balancing across agents');\n      console.log('   - Resource allocation optimization');\n      console.log('   - Communication path optimization');\n      break;\n\n    default:\n      console.log('Ecosystem commands: status, optimize');\n  }\n}\n\nasync function provisionAgent(subArgs, flags) {\n  const provision = subArgs[1];\n\n  if (!provision) {\n    printError('Usage: agent provision <count>');\n    return;\n  }\n\n  const count = parseInt(provision);\n  if (isNaN(count) || count < 1) {\n    printError('Count must be a positive number');\n    return;\n  }\n\n  printSuccess(`Provisioning ${count} agents...`);\n  console.log('üöÄ Auto-provisioning would create:');\n  for (let i = 1; i <= count; i++) {\n    console.log(`   Agent ${i}: Type=general, Status=provisioning`);\n  }\n}\n\nasync function terminateAgent(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent terminate <agent-id>');\n    return;\n  }\n\n  printSuccess(`Terminating agent: ${agentId}`);\n  console.log('üõë Agent would be gracefully shut down');\n}\n\nasync function showAgentInfo(subArgs, flags) {\n  const agentId = subArgs[1];\n\n  if (!agentId) {\n    printError('Usage: agent info <agent-id>');\n    return;\n  }\n\n  printSuccess(`Agent information: ${agentId}`);\n  console.log('üìä Agent details would include:');\n  console.log('   Status, capabilities, current tasks, performance metrics');\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\nfunction showAgentHelp() {\n  console.log('Agent commands:');\n  console.log('  spawn <type> [--name <name>]     Create new agent');\n  console.log('  list [--verbose]                 List active agents');\n  console.log('  terminate <id>                   Stop specific agent');\n  console.log('  info <id>                        Show agent details');\n  console.log('  hierarchy <create|show>          Manage agent hierarchies');\n  console.log('  network <topology|metrics>       Agent network operations');\n  console.log('  ecosystem <status|optimize>      Ecosystem management');\n  console.log('  provision <count>                Auto-provision agents');\n  console.log();\n  console.log('Agent Types:');\n  console.log('  researcher    Research and information gathering');\n  console.log('  coder         Code development and analysis');\n  console.log('  analyst       Data analysis and insights');\n  console.log('  coordinator   Task coordination and management');\n  console.log('  general       Multi-purpose agent');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow agent spawn researcher --name \"DataBot\"');\n  console.log('  claude-flow agent list --verbose');\n  console.log('  claude-flow agent hierarchy create enterprise');\n  console.log('  claude-flow agent ecosystem status');\n}\n"],"names":["printSuccess","printError","onAgentSpawn","agentCommand","subArgs","flags","agentCmd","spawnAgent","listAgents","manageHierarchy","manageNetwork","manageEcosystem","provisionAgent","terminateAgent","showAgentInfo","showAgentHelp","agentType","agentName","getFlag","name","Date","now","agentId","agent","id","type","status","activeTasks","lastActivity","capabilities","getAgentCapabilities","createdAt","promises","fs","path","agentsDir","mkdir","recursive","agentFile","join","writeFile","JSON","stringify","perfFile","perfData","parse","readFile","totalAgents","activeAgents","e","startTime","totalTasks","successfulTasks","failedTasks","neuralEvents","console","log","researcher","coder","tester","analyst","coordinator","general","agents","agentFiles","readdir","file","endsWith","content","push","length","forEach","statusEmoji","toLocaleString","hierarchyCmd","hierarchyType","networkCmd","ecosystemCmd","provision","count","parseInt","isNaN","i","args","flagName","index","indexOf"],"mappings":"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"}