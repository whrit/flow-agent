{"version":3,"sources":["../../../../src/cli/simple-commands/concurrent-display.js"],"sourcesContent":["/**\n * Concurrent Agent Display Manager\n * Provides a threaded view of multiple agents running in parallel\n */\n\nexport class ConcurrentDisplay {\n  constructor(agents = [], options = {}) {\n    this.agents = new Map();\n    this.options = {\n      maxWidth: Math.min(process.stdout.columns || 80, 80), // Cap at 80 chars for better compatibility\n      updateInterval: 100,\n      showTools: true,\n      showTimers: true,\n      ...options\n    };\n    \n    // Initialize agent states\n    agents.forEach(agent => {\n      this.agents.set(agent.id, {\n        ...agent,\n        status: 'pending',\n        currentTool: null,\n        lastActivity: '',\n        startTime: null,\n        events: 0,\n        progress: 0\n      });\n    });\n    \n    this.displayBuffer = [];\n    this.lastRender = Date.now();\n    this.spinnerFrames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n    this.spinnerIndex = 0;\n  }\n\n  /**\n   * Start the display update loop\n   */\n  start() {\n    // Clear screen and hide cursor\n    process.stdout.write('\\x1B[2J\\x1B[H\\x1B[?25l');\n    \n    this.interval = setInterval(() => {\n      this.render();\n    }, this.options.updateInterval);\n    \n    // Restore cursor on exit\n    process.on('exit', () => {\n      process.stdout.write('\\x1B[?25h'); // Show cursor\n      this.stop();\n    });\n    \n    // Handle SIGINT/SIGTERM\n    process.on('SIGINT', () => {\n      this.stop();\n      process.exit(0);\n    });\n  }\n\n  /**\n   * Stop the display updates\n   */\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n    process.stdout.write('\\x1B[?25h'); // Show cursor\n  }\n\n  /**\n   * Update agent status\n   */\n  updateAgent(agentId, updates) {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      Object.assign(agent, updates);\n      if (updates.status === 'active' && !agent.startTime) {\n        agent.startTime = Date.now();\n      }\n    }\n  }\n\n  /**\n   * Add activity to agent\n   */\n  addActivity(agentId, activity, tool = null) {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      agent.lastActivity = activity.substring(0, 50) + (activity.length > 50 ? '...' : '');\n      agent.currentTool = tool;\n      agent.events++;\n      \n      // Update progress based on activity\n      if (activity.includes('completed') || activity.includes('finished')) {\n        agent.progress = 100;\n      } else if (agent.progress < 90) {\n        agent.progress = Math.min(agent.progress + 5, 90);\n      }\n    }\n  }\n\n  /**\n   * Render the display\n   */\n  render() {\n    const now = Date.now();\n    this.spinnerIndex = (this.spinnerIndex + 1) % this.spinnerFrames.length;\n    const spinner = this.spinnerFrames[this.spinnerIndex];\n    \n    // Clear screen completely and move cursor to home position\n    process.stdout.write('\\x1B[2J\\x1B[H');\n    \n    // Header\n    this.renderHeader();\n    \n    // Agent panels\n    this.renderAgentPanels(spinner);\n    \n    // Summary footer\n    this.renderFooter();\n    \n    this.lastRender = now;\n  }\n\n  /**\n   * Render header\n   */\n  renderHeader() {\n    const width = this.options.maxWidth;\n    process.stdout.write('╔' + '═'.repeat(width - 2) + '╗\\n');\n    process.stdout.write('║' + this.center('🤖 CONCURRENT AGENTS', width - 2) + '║\\n');\n    process.stdout.write('╠' + '═'.repeat(width - 2) + '╣\\n');\n  }\n\n  /**\n   * Render agent panels in columns\n   */\n  renderAgentPanels(spinner) {\n    const agentArray = Array.from(this.agents.values());\n    const columns = Math.min(2, agentArray.length); // Max 2 columns for narrower display\n    const columnWidth = Math.floor((this.options.maxWidth - 4) / columns) - 2;\n    \n    // Group agents by rows\n    const rows = Math.ceil(agentArray.length / columns);\n    \n    for (let row = 0; row < rows; row++) {\n      let line = '║ ';\n      \n      for (let col = 0; col < columns; col++) {\n        const agentIndex = row * columns + col;\n        if (agentIndex < agentArray.length) {\n          const agent = agentArray[agentIndex];\n          line += this.renderAgentPanel(agent, columnWidth, spinner);\n          if (col < columns - 1) line += ' │ ';\n        } else {\n          line += ' '.repeat(columnWidth);\n          if (col < columns - 1) line += ' │ ';\n        }\n      }\n      \n      line += ' ║';\n      process.stdout.write(line + '\\n');\n      \n      // Add separator between rows\n      if (row < rows - 1) {\n        let separator = '║ ';\n        for (let col = 0; col < columns; col++) {\n          separator += '─'.repeat(columnWidth);\n          if (col < columns - 1) separator += ' │ ';\n        }\n        separator += ' ║';\n        process.stdout.write(separator + '\\n');\n      }\n    }\n  }\n\n  /**\n   * Render individual agent panel\n   */\n  renderAgentPanel(agent, width, spinner) {\n    const lines = [];\n    \n    // Agent header with icon and name\n    const icon = this.getAgentIcon(agent.type);\n    const statusIcon = this.getStatusIcon(agent.status, spinner);\n    const shortName = agent.name.length > 20 ? agent.name.substring(0, 17) + '...' : agent.name;\n    const header = `${icon} ${shortName}`;\n    lines.push(this.truncate(`${statusIcon} ${header}`, width));\n    \n    // Status line with timer\n    const status = this.getStatusText(agent.status);\n    const elapsed = agent.startTime ? this.formatDuration(Date.now() - agent.startTime) : '--:--';\n    lines.push(this.truncate(`${status} │ ${elapsed}`, width));\n    \n    // Progress bar (compact)\n    if (agent.status === 'active') {\n      const compactBar = this.renderCompactProgressBar(agent.progress, width - 10);\n      lines.push(this.truncate(`[${compactBar}] ${agent.progress}%`, width));\n    } else {\n      lines.push(' '.repeat(width));\n    }\n    \n    // Current activity (shorter)\n    if (agent.lastActivity) {\n      const shortActivity = agent.lastActivity.length > 25 ? agent.lastActivity.substring(0, 22) + '...' : agent.lastActivity;\n      lines.push(this.truncate(`→ ${shortActivity}`, width));\n    } else {\n      lines.push(this.truncate('→ Waiting...', width));\n    }\n    \n    // Stats only\n    lines.push(this.truncate(`Events: ${agent.events}`, width));\n    \n    // Pad to consistent height (reduced from 6 to 5)\n    while (lines.length < 5) {\n      lines.push(' '.repeat(width));\n    }\n    \n    return lines.join('\\n║ ').split('\\n').map(l => l.substring(2)).join('\\n║ ');\n  }\n\n  /**\n   * Render footer with summary\n   */\n  renderFooter() {\n    const width = this.options.maxWidth;\n    const agents = Array.from(this.agents.values());\n    const active = agents.filter(a => a.status === 'active').length;\n    const completed = agents.filter(a => a.status === 'completed').length;\n    const failed = agents.filter(a => a.status === 'failed').length;\n    const total = agents.length;\n    \n    process.stdout.write('╠' + '═'.repeat(width - 2) + '╣\\n');\n    \n    const progress = total > 0 ? Math.floor((completed + failed) / total * 100) : 0;\n    const summary = `📊 ${progress}% │ ⚡${active} │ ✅${completed} │ ❌${failed}`;\n    process.stdout.write('║' + this.center(summary, width - 2) + '║\\n');\n    \n    process.stdout.write('╚' + '═'.repeat(width - 2) + '╝\\n');\n  }\n\n  /**\n   * Helper methods\n   */\n  getAgentIcon(type) {\n    const icons = {\n      'search': '🔍',\n      'foundation': '🏗️',\n      'refinement': '🔧',\n      'ensemble': '🎯',\n      'validation': '✅',\n      'coordinator': '🎮',\n      'researcher': '🔬',\n      'coder': '💻',\n      'optimizer': '⚡',\n      'architect': '🏛️',\n      'tester': '🧪'\n    };\n    return icons[type] || '🤖';\n  }\n\n  getStatusIcon(status, spinner) {\n    switch (status) {\n      case 'active': return spinner;\n      case 'completed': return '✅';\n      case 'failed': return '❌';\n      case 'pending': return '⏳';\n      default: return '•';\n    }\n  }\n\n  getStatusText(status) {\n    switch (status) {\n      case 'active': return 'Running';\n      case 'completed': return 'Complete';\n      case 'failed': return 'Failed';\n      case 'pending': return 'Waiting';\n      default: return status;\n    }\n  }\n\n  renderProgressBar(progress, width) {\n    const barWidth = Math.min(20, width - 10);\n    const filled = Math.floor(progress / 100 * barWidth);\n    const empty = barWidth - filled;\n    return `[${'\\u2588'.repeat(filled)}${'░'.repeat(empty)}] ${progress}%`;\n  }\n\n  renderCompactProgressBar(progress, maxWidth) {\n    const barWidth = Math.min(10, maxWidth);\n    const filled = Math.floor(progress / 100 * barWidth);\n    const empty = barWidth - filled;\n    return '\\u2588'.repeat(filled) + '░'.repeat(empty);\n  }\n\n  truncate(text, width) {\n    if (text.length <= width) {\n      return text.padEnd(width);\n    }\n    return text.substring(0, width - 3) + '...';\n  }\n\n  center(text, width) {\n    const padding = Math.max(0, width - text.length);\n    const leftPad = Math.floor(padding / 2);\n    const rightPad = padding - leftPad;\n    return ' '.repeat(leftPad) + text + ' '.repeat(rightPad);\n  }\n\n  formatDuration(ms) {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n}\n\n/**\n * Create a display manager for workflow agents\n */\nexport function createConcurrentDisplay(agents, options = {}) {\n  return new ConcurrentDisplay(agents, options);\n}"],"names":["ConcurrentDisplay","agents","options","Map","maxWidth","Math","min","process","stdout","columns","updateInterval","showTools","showTimers","forEach","agent","set","id","status","currentTool","lastActivity","startTime","events","progress","displayBuffer","lastRender","Date","now","spinnerFrames","spinnerIndex","start","write","interval","setInterval","render","on","stop","exit","clearInterval","updateAgent","agentId","updates","get","Object","assign","addActivity","activity","tool","substring","length","includes","spinner","renderHeader","renderAgentPanels","renderFooter","width","repeat","center","agentArray","Array","from","values","columnWidth","floor","rows","ceil","row","line","col","agentIndex","renderAgentPanel","separator","lines","icon","getAgentIcon","type","statusIcon","getStatusIcon","shortName","name","header","push","truncate","getStatusText","elapsed","formatDuration","compactBar","renderCompactProgressBar","shortActivity","join","split","map","l","active","filter","a","completed","failed","total","summary","icons","renderProgressBar","barWidth","filled","empty","text","padEnd","padding","max","leftPad","rightPad","ms","seconds","minutes","hours","createConcurrentDisplay"],"mappings":"AAKA,OAAO,MAAMA;IACX,YAAYC,SAAS,EAAE,EAAEC,UAAU,CAAC,CAAC,CAAE;QACrC,IAAI,CAACD,MAAM,GAAG,IAAIE;QAClB,IAAI,CAACD,OAAO,GAAG;YACbE,UAAUC,KAAKC,GAAG,CAACC,QAAQC,MAAM,CAACC,OAAO,IAAI,IAAI;YACjDC,gBAAgB;YAChBC,WAAW;YACXC,YAAY;YACZ,GAAGV,OAAO;QACZ;QAGAD,OAAOY,OAAO,CAACC,CAAAA;YACb,IAAI,CAACb,MAAM,CAACc,GAAG,CAACD,MAAME,EAAE,EAAE;gBACxB,GAAGF,KAAK;gBACRG,QAAQ;gBACRC,aAAa;gBACbC,cAAc;gBACdC,WAAW;gBACXC,QAAQ;gBACRC,UAAU;YACZ;QACF;QAEA,IAAI,CAACC,aAAa,GAAG,EAAE;QACvB,IAAI,CAACC,UAAU,GAAGC,KAAKC,GAAG;QAC1B,IAAI,CAACC,aAAa,GAAG;YAAC;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;SAAI;QACvE,IAAI,CAACC,YAAY,GAAG;IACtB;IAKAC,QAAQ;QAENtB,QAAQC,MAAM,CAACsB,KAAK,CAAC;QAErB,IAAI,CAACC,QAAQ,GAAGC,YAAY;YAC1B,IAAI,CAACC,MAAM;QACb,GAAG,IAAI,CAAC/B,OAAO,CAACQ,cAAc;QAG9BH,QAAQ2B,EAAE,CAAC,QAAQ;YACjB3B,QAAQC,MAAM,CAACsB,KAAK,CAAC;YACrB,IAAI,CAACK,IAAI;QACX;QAGA5B,QAAQ2B,EAAE,CAAC,UAAU;YACnB,IAAI,CAACC,IAAI;YACT5B,QAAQ6B,IAAI,CAAC;QACf;IACF;IAKAD,OAAO;QACL,IAAI,IAAI,CAACJ,QAAQ,EAAE;YACjBM,cAAc,IAAI,CAACN,QAAQ;YAC3B,IAAI,CAACA,QAAQ,GAAG;QAClB;QACAxB,QAAQC,MAAM,CAACsB,KAAK,CAAC;IACvB;IAKAQ,YAAYC,OAAO,EAAEC,OAAO,EAAE;QAC5B,MAAM1B,QAAQ,IAAI,CAACb,MAAM,CAACwC,GAAG,CAACF;QAC9B,IAAIzB,OAAO;YACT4B,OAAOC,MAAM,CAAC7B,OAAO0B;YACrB,IAAIA,QAAQvB,MAAM,KAAK,YAAY,CAACH,MAAMM,SAAS,EAAE;gBACnDN,MAAMM,SAAS,GAAGK,KAAKC,GAAG;YAC5B;QACF;IACF;IAKAkB,YAAYL,OAAO,EAAEM,QAAQ,EAAEC,OAAO,IAAI,EAAE;QAC1C,MAAMhC,QAAQ,IAAI,CAACb,MAAM,CAACwC,GAAG,CAACF;QAC9B,IAAIzB,OAAO;YACTA,MAAMK,YAAY,GAAG0B,SAASE,SAAS,CAAC,GAAG,MAAOF,CAAAA,SAASG,MAAM,GAAG,KAAK,QAAQ,EAAC;YAClFlC,MAAMI,WAAW,GAAG4B;YACpBhC,MAAMO,MAAM;YAGZ,IAAIwB,SAASI,QAAQ,CAAC,gBAAgBJ,SAASI,QAAQ,CAAC,aAAa;gBACnEnC,MAAMQ,QAAQ,GAAG;YACnB,OAAO,IAAIR,MAAMQ,QAAQ,GAAG,IAAI;gBAC9BR,MAAMQ,QAAQ,GAAGjB,KAAKC,GAAG,CAACQ,MAAMQ,QAAQ,GAAG,GAAG;YAChD;QACF;IACF;IAKAW,SAAS;QACP,MAAMP,MAAMD,KAAKC,GAAG;QACpB,IAAI,CAACE,YAAY,GAAG,AAAC,CAAA,IAAI,CAACA,YAAY,GAAG,CAAA,IAAK,IAAI,CAACD,aAAa,CAACqB,MAAM;QACvE,MAAME,UAAU,IAAI,CAACvB,aAAa,CAAC,IAAI,CAACC,YAAY,CAAC;QAGrDrB,QAAQC,MAAM,CAACsB,KAAK,CAAC;QAGrB,IAAI,CAACqB,YAAY;QAGjB,IAAI,CAACC,iBAAiB,CAACF;QAGvB,IAAI,CAACG,YAAY;QAEjB,IAAI,CAAC7B,UAAU,GAAGE;IACpB;IAKAyB,eAAe;QACb,MAAMG,QAAQ,IAAI,CAACpD,OAAO,CAACE,QAAQ;QACnCG,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAIyB,MAAM,CAACD,QAAQ,KAAK;QACnD/C,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAI,CAAC0B,MAAM,CAAC,wBAAwBF,QAAQ,KAAK;QAC5E/C,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAIyB,MAAM,CAACD,QAAQ,KAAK;IACrD;IAKAF,kBAAkBF,OAAO,EAAE;QACzB,MAAMO,aAAaC,MAAMC,IAAI,CAAC,IAAI,CAAC1D,MAAM,CAAC2D,MAAM;QAChD,MAAMnD,UAAUJ,KAAKC,GAAG,CAAC,GAAGmD,WAAWT,MAAM;QAC7C,MAAMa,cAAcxD,KAAKyD,KAAK,CAAC,AAAC,CAAA,IAAI,CAAC5D,OAAO,CAACE,QAAQ,GAAG,CAAA,IAAKK,WAAW;QAGxE,MAAMsD,OAAO1D,KAAK2D,IAAI,CAACP,WAAWT,MAAM,GAAGvC;QAE3C,IAAK,IAAIwD,MAAM,GAAGA,MAAMF,MAAME,MAAO;YACnC,IAAIC,OAAO;YAEX,IAAK,IAAIC,MAAM,GAAGA,MAAM1D,SAAS0D,MAAO;gBACtC,MAAMC,aAAaH,MAAMxD,UAAU0D;gBACnC,IAAIC,aAAaX,WAAWT,MAAM,EAAE;oBAClC,MAAMlC,QAAQ2C,UAAU,CAACW,WAAW;oBACpCF,QAAQ,IAAI,CAACG,gBAAgB,CAACvD,OAAO+C,aAAaX;oBAClD,IAAIiB,MAAM1D,UAAU,GAAGyD,QAAQ;gBACjC,OAAO;oBACLA,QAAQ,IAAIX,MAAM,CAACM;oBACnB,IAAIM,MAAM1D,UAAU,GAAGyD,QAAQ;gBACjC;YACF;YAEAA,QAAQ;YACR3D,QAAQC,MAAM,CAACsB,KAAK,CAACoC,OAAO;YAG5B,IAAID,MAAMF,OAAO,GAAG;gBAClB,IAAIO,YAAY;gBAChB,IAAK,IAAIH,MAAM,GAAGA,MAAM1D,SAAS0D,MAAO;oBACtCG,aAAa,IAAIf,MAAM,CAACM;oBACxB,IAAIM,MAAM1D,UAAU,GAAG6D,aAAa;gBACtC;gBACAA,aAAa;gBACb/D,QAAQC,MAAM,CAACsB,KAAK,CAACwC,YAAY;YACnC;QACF;IACF;IAKAD,iBAAiBvD,KAAK,EAAEwC,KAAK,EAAEJ,OAAO,EAAE;QACtC,MAAMqB,QAAQ,EAAE;QAGhB,MAAMC,OAAO,IAAI,CAACC,YAAY,CAAC3D,MAAM4D,IAAI;QACzC,MAAMC,aAAa,IAAI,CAACC,aAAa,CAAC9D,MAAMG,MAAM,EAAEiC;QACpD,MAAM2B,YAAY/D,MAAMgE,IAAI,CAAC9B,MAAM,GAAG,KAAKlC,MAAMgE,IAAI,CAAC/B,SAAS,CAAC,GAAG,MAAM,QAAQjC,MAAMgE,IAAI;QAC3F,MAAMC,SAAS,GAAGP,KAAK,CAAC,EAAEK,WAAW;QACrCN,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,GAAGN,WAAW,CAAC,EAAEI,QAAQ,EAAEzB;QAGpD,MAAMrC,SAAS,IAAI,CAACiE,aAAa,CAACpE,MAAMG,MAAM;QAC9C,MAAMkE,UAAUrE,MAAMM,SAAS,GAAG,IAAI,CAACgE,cAAc,CAAC3D,KAAKC,GAAG,KAAKZ,MAAMM,SAAS,IAAI;QACtFmD,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,GAAGhE,OAAO,GAAG,EAAEkE,SAAS,EAAE7B;QAGnD,IAAIxC,MAAMG,MAAM,KAAK,UAAU;YAC7B,MAAMoE,aAAa,IAAI,CAACC,wBAAwB,CAACxE,MAAMQ,QAAQ,EAAEgC,QAAQ;YACzEiB,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEI,WAAW,EAAE,EAAEvE,MAAMQ,QAAQ,CAAC,CAAC,CAAC,EAAEgC;QACjE,OAAO;YACLiB,MAAMS,IAAI,CAAC,IAAIzB,MAAM,CAACD;QACxB;QAGA,IAAIxC,MAAMK,YAAY,EAAE;YACtB,MAAMoE,gBAAgBzE,MAAMK,YAAY,CAAC6B,MAAM,GAAG,KAAKlC,MAAMK,YAAY,CAAC4B,SAAS,CAAC,GAAG,MAAM,QAAQjC,MAAMK,YAAY;YACvHoD,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,EAAEM,eAAe,EAAEjC;QACjD,OAAO;YACLiB,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,gBAAgB3B;QAC3C;QAGAiB,MAAMS,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,QAAQ,EAAEnE,MAAMO,MAAM,EAAE,EAAEiC;QAGpD,MAAOiB,MAAMvB,MAAM,GAAG,EAAG;YACvBuB,MAAMS,IAAI,CAAC,IAAIzB,MAAM,CAACD;QACxB;QAEA,OAAOiB,MAAMiB,IAAI,CAAC,QAAQC,KAAK,CAAC,MAAMC,GAAG,CAACC,CAAAA,IAAKA,EAAE5C,SAAS,CAAC,IAAIyC,IAAI,CAAC;IACtE;IAKAnC,eAAe;QACb,MAAMC,QAAQ,IAAI,CAACpD,OAAO,CAACE,QAAQ;QACnC,MAAMH,SAASyD,MAAMC,IAAI,CAAC,IAAI,CAAC1D,MAAM,CAAC2D,MAAM;QAC5C,MAAMgC,SAAS3F,OAAO4F,MAAM,CAACC,CAAAA,IAAKA,EAAE7E,MAAM,KAAK,UAAU+B,MAAM;QAC/D,MAAM+C,YAAY9F,OAAO4F,MAAM,CAACC,CAAAA,IAAKA,EAAE7E,MAAM,KAAK,aAAa+B,MAAM;QACrE,MAAMgD,SAAS/F,OAAO4F,MAAM,CAACC,CAAAA,IAAKA,EAAE7E,MAAM,KAAK,UAAU+B,MAAM;QAC/D,MAAMiD,QAAQhG,OAAO+C,MAAM;QAE3BzC,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAIyB,MAAM,CAACD,QAAQ,KAAK;QAEnD,MAAMhC,WAAW2E,QAAQ,IAAI5F,KAAKyD,KAAK,CAAC,AAACiC,CAAAA,YAAYC,MAAK,IAAKC,QAAQ,OAAO;QAC9E,MAAMC,UAAU,CAAC,GAAG,EAAE5E,SAAS,KAAK,EAAEsE,OAAO,IAAI,EAAEG,UAAU,IAAI,EAAEC,QAAQ;QAC3EzF,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAI,CAAC0B,MAAM,CAAC0C,SAAS5C,QAAQ,KAAK;QAE7D/C,QAAQC,MAAM,CAACsB,KAAK,CAAC,MAAM,IAAIyB,MAAM,CAACD,QAAQ,KAAK;IACrD;IAKAmB,aAAaC,IAAI,EAAE;QACjB,MAAMyB,QAAQ;YACZ,UAAU;YACV,cAAc;YACd,cAAc;YACd,YAAY;YACZ,cAAc;YACd,eAAe;YACf,cAAc;YACd,SAAS;YACT,aAAa;YACb,aAAa;YACb,UAAU;QACZ;QACA,OAAOA,KAAK,CAACzB,KAAK,IAAI;IACxB;IAEAE,cAAc3D,MAAM,EAAEiC,OAAO,EAAE;QAC7B,OAAQjC;YACN,KAAK;gBAAU,OAAOiC;YACtB,KAAK;gBAAa,OAAO;YACzB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAW,OAAO;YACvB;gBAAS,OAAO;QAClB;IACF;IAEAgC,cAAcjE,MAAM,EAAE;QACpB,OAAQA;YACN,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAa,OAAO;YACzB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAW,OAAO;YACvB;gBAAS,OAAOA;QAClB;IACF;IAEAmF,kBAAkB9E,QAAQ,EAAEgC,KAAK,EAAE;QACjC,MAAM+C,WAAWhG,KAAKC,GAAG,CAAC,IAAIgD,QAAQ;QACtC,MAAMgD,SAASjG,KAAKyD,KAAK,CAACxC,WAAW,MAAM+E;QAC3C,MAAME,QAAQF,WAAWC;QACzB,OAAO,CAAC,CAAC,EAAE,SAAS/C,MAAM,CAAC+C,UAAU,IAAI/C,MAAM,CAACgD,OAAO,EAAE,EAAEjF,SAAS,CAAC,CAAC;IACxE;IAEAgE,yBAAyBhE,QAAQ,EAAElB,QAAQ,EAAE;QAC3C,MAAMiG,WAAWhG,KAAKC,GAAG,CAAC,IAAIF;QAC9B,MAAMkG,SAASjG,KAAKyD,KAAK,CAACxC,WAAW,MAAM+E;QAC3C,MAAME,QAAQF,WAAWC;QACzB,OAAO,SAAS/C,MAAM,CAAC+C,UAAU,IAAI/C,MAAM,CAACgD;IAC9C;IAEAtB,SAASuB,IAAI,EAAElD,KAAK,EAAE;QACpB,IAAIkD,KAAKxD,MAAM,IAAIM,OAAO;YACxB,OAAOkD,KAAKC,MAAM,CAACnD;QACrB;QACA,OAAOkD,KAAKzD,SAAS,CAAC,GAAGO,QAAQ,KAAK;IACxC;IAEAE,OAAOgD,IAAI,EAAElD,KAAK,EAAE;QAClB,MAAMoD,UAAUrG,KAAKsG,GAAG,CAAC,GAAGrD,QAAQkD,KAAKxD,MAAM;QAC/C,MAAM4D,UAAUvG,KAAKyD,KAAK,CAAC4C,UAAU;QACrC,MAAMG,WAAWH,UAAUE;QAC3B,OAAO,IAAIrD,MAAM,CAACqD,WAAWJ,OAAO,IAAIjD,MAAM,CAACsD;IACjD;IAEAzB,eAAe0B,EAAE,EAAE;QACjB,MAAMC,UAAU1G,KAAKyD,KAAK,CAACgD,KAAK;QAChC,MAAME,UAAU3G,KAAKyD,KAAK,CAACiD,UAAU;QACrC,MAAME,QAAQ5G,KAAKyD,KAAK,CAACkD,UAAU;QAEnC,IAAIC,QAAQ,GAAG;YACb,OAAO,GAAGA,MAAM,EAAE,EAAED,UAAU,GAAG,CAAC,CAAC;QACrC,OAAO,IAAIA,UAAU,GAAG;YACtB,OAAO,GAAGA,QAAQ,EAAE,EAAED,UAAU,GAAG,CAAC,CAAC;QACvC,OAAO;YACL,OAAO,GAAGA,QAAQ,CAAC,CAAC;QACtB;IACF;AACF;AAKA,OAAO,SAASG,wBAAwBjH,MAAM,EAAEC,UAAU,CAAC,CAAC;IAC1D,OAAO,IAAIF,kBAAkBC,QAAQC;AACvC"}