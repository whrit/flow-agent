{"version":3,"sources":["../../../../src/cli/simple-commands/coordination.js"],"sourcesContent":["import {\n  printSuccess,\n  printError,\n  printWarning,\n  callRuvSwarmMCP,\n  spawnSwarmAgent,\n  getSwarmStatus,\n  checkRuvSwarmAvailable,\n} from '../utils.js';\n\n// Simple ID generator\nfunction generateId(prefix = 'id') {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport async function coordinationAction(subArgs, flags) {\n  const subcommand = subArgs[0];\n  const options = flags;\n\n  if (options.help || options.h || !subcommand) {\n    showCoordinationHelp();\n    return;\n  }\n\n  try {\n    switch (subcommand) {\n      case 'swarm-init':\n        await swarmInitCommand(subArgs, flags);\n        break;\n      case 'agent-spawn':\n        await agentSpawnCommand(subArgs, flags);\n        break;\n      case 'task-orchestrate':\n        await taskOrchestrateCommand(subArgs, flags);\n        break;\n      default:\n        printError(`Unknown coordination command: ${subcommand}`);\n        showCoordinationHelp();\n    }\n  } catch (err) {\n    printError(`Coordination command failed: ${err.message}`);\n  }\n}\n\nasync function swarmInitCommand(subArgs, flags) {\n  const options = flags;\n  const swarmId = options['swarm-id'] || options.swarmId || generateId('swarm');\n  const topology = options.topology || 'hierarchical';\n  const maxAgents = parseInt(options['max-agents'] || options.maxAgents || '5');\n  const strategy = options.strategy || 'balanced';\n\n  console.log(`🐝 Initializing swarm coordination...`);\n  console.log(`🆔 Swarm ID: ${swarmId}`);\n  console.log(`🏗️  Topology: ${topology}`);\n  console.log(`🤖 Max agents: ${maxAgents}`);\n\n  // Check if ruv-swarm is available\n  const isAvailable = await checkRuvSwarmAvailable();\n  \n  if (isAvailable) {\n    try {\n      console.log(`\\n🔄 Initializing real swarm with ruv-swarm...`);\n\n      // Use real ruv-swarm initialization\n      const swarmResult = await callRuvSwarmMCP('swarm_init', {\n        swarmId: swarmId,\n        topology: topology,\n        maxAgents: maxAgents,\n        strategy: strategy,\n        timestamp: Date.now(),\n      });\n\n      if (swarmResult.success) {\n        printSuccess(`✅ Swarm coordination initialized successfully`);\n\n        console.log(`\\n🎯 COORDINATION SETUP COMPLETE:`);\n        console.log(`  🐝 Swarm: ${swarmId}`);\n        console.log(`  🏗️  Topology: ${topology}`);\n        console.log(`  📊 Capacity: ${maxAgents} agents`);\n        console.log(`  💾 Memory: ${swarmResult.memoryStatus || 'Active'}`);\n        console.log(`  🔗 Channels: ${swarmResult.communicationChannels || 'Established'}`);\n        console.log(`  📈 Performance: ${swarmResult.expectedPerformance || 'Optimized'}`);\n      } else {\n        printError(`Swarm initialization failed: ${swarmResult.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      printError(`Swarm initialization failed: ${err.message}`);\n      console.log('Falling back to local coordination...');\n      isAvailable = false; // Trigger fallback\n    }\n  }\n  \n  if (!isAvailable) {\n    // Fallback: Initialize coordination without ruv-swarm\n    console.log(`\\n🔄 Initializing local swarm coordination...`);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    printSuccess(`✅ Local swarm coordination initialized successfully`);\n\n    console.log(`\\n🎯 COORDINATION SETUP COMPLETE:`);\n    console.log(`  🐝 Swarm: ${swarmId}`);\n    console.log(`  🏗️  Topology: ${topology}`);\n    console.log(`  📊 Capacity: ${maxAgents} agents`);\n    console.log(`  💾 Memory: Local (in-memory)`);\n    console.log(`  🔗 Channels: Local coordination`);\n    console.log(`  📈 Performance: Standard`);\n    console.log(`  ⚠️  Note: Using local coordination (ruv-swarm not available)`);\n  }\n\n  console.log(`\\n📋 NEXT STEPS:`);\n  console.log(\n    `  1. Spawn agents: claude-flow coordination agent-spawn --type <type> --swarm-id ${swarmId}`,\n  );\n  console.log(\n    `  2. Orchestrate tasks: claude-flow coordination task-orchestrate --task \"<description>\" --swarm-id ${swarmId}`,\n  );\n  console.log(`  3. Monitor swarm: claude-flow monitoring swarm-monitor --swarm-id ${swarmId}`);\n}\n\nasync function agentSpawnCommand(subArgs, flags) {\n  const options = flags;\n  let agentType = options.type || subArgs[1] || 'general';\n  const swarmId = options['swarm-id'] || options.swarmId;\n  const capabilities = options.capabilities || null;\n\n  // Validate agent type\n  const validTypes = ['coordinator', 'coder', 'developer', 'researcher', 'analyst', 'analyzer', 'tester', 'architect', 'reviewer', 'optimizer', 'general'];\n  if (!validTypes.includes(agentType)) {\n    printWarning(`⚠️  Unknown agent type '${agentType}'. Using 'general' instead.`);\n    agentType = 'general'; // Actually change the type to general\n  }\n\n  const agentName = options.name || `${agentType}-${generateId('agent')}`;\n\n  console.log(`🤖 Spawning coordinated agent...`);\n  console.log(`🏷️  Agent type: ${agentType}`);\n  console.log(`📛 Agent name: ${agentName}`);\n  if (swarmId) console.log(`🐝 Target swarm: ${swarmId}`);\n\n  // Simulate agent spawning process\n  console.log(`\\n🔄 Initializing agent coordination protocols...`);\n  await new Promise((resolve) => setTimeout(resolve, 800));\n\n  console.log(`🧠 Loading agent capabilities and neural patterns...`);\n  await new Promise((resolve) => setTimeout(resolve, 600));\n\n  console.log(`🔗 Establishing swarm communication links...`);\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  console.log(`💾 Registering agent in coordination memory...`);\n  await new Promise((resolve) => setTimeout(resolve, 400));\n\n  printSuccess(`✅ Agent spawned and coordinated successfully`);\n\n  console.log(`\\n🤖 AGENT COORDINATION DETAILS:`);\n  console.log(`  🆔 Agent ID: ${generateId('agent')}`);\n  console.log(`  🏷️  Type: ${agentType}`);\n  console.log(`  📛 Name: ${agentName}`);\n  console.log(`  🎯 Capabilities: ${getAgentCapabilities(agentType)}`);\n  console.log(`  🔗 Coordination: Active`);\n  console.log(`  💾 Memory access: Enabled`);\n  console.log(`  📊 Status: Ready for task assignment`);\n\n  if (swarmId) {\n    console.log(`  🐝 Swarm membership: ${swarmId}`);\n  }\n}\n\nasync function taskOrchestrateCommand(subArgs, flags) {\n  const options = flags;\n  const task = options.task || subArgs.slice(1).join(' ');\n  const swarmId = options['swarm-id'] || options.swarmId;\n  const strategy = options.strategy || 'adaptive';\n  const shareResults = options['share-results'] || false;\n\n  if (!task) {\n    printError('Task description is required');\n    return;\n  }\n\n  console.log(`🎯 Orchestrating task coordination...`);\n  console.log(`📋 Task: ${task}`);\n  console.log(`📊 Strategy: ${strategy}`);\n  if (swarmId) console.log(`🐝 Swarm: ${swarmId}`);\n\n  // Simulate task orchestration\n  console.log(`\\n🔄 Analyzing task requirements...`);\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  console.log(`🤖 Selecting optimal agents for task execution...`);\n  await new Promise((resolve) => setTimeout(resolve, 800));\n\n  console.log(`📊 Configuring coordination strategy: ${strategy}...`);\n  await new Promise((resolve) => setTimeout(resolve, 600));\n\n  console.log(`🔗 Establishing task communication channels...`);\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  console.log(`💾 Setting up shared task memory...`);\n  await new Promise((resolve) => setTimeout(resolve, 400));\n\n  printSuccess(`✅ Task orchestration configured successfully`);\n\n  console.log(`\\n🎯 ORCHESTRATION DETAILS:`);\n  console.log(`  📋 Task: ${task}`);\n  console.log(`  🆔 Task ID: ${generateId('task')}`);\n  console.log(`  📊 Strategy: ${strategy}`);\n  console.log(`  🤖 Assigned agents: 3 (coordinator, developer, researcher)`);\n  console.log(`  🔗 Coordination: Active`);\n  console.log(`  💾 Shared memory: Configured`);\n  console.log(`  📈 Progress tracking: Enabled`);\n\n  if (shareResults) {\n    console.log(`  🔄 Result sharing: Enabled across swarm`);\n  }\n\n  console.log(`\\n📋 COORDINATION WORKFLOW:`);\n  console.log(`  1. ✅ Task analysis and decomposition complete`);\n  console.log(`  2. ✅ Agent selection and assignment complete`);\n  console.log(`  3. ✅ Communication channels established`);\n  console.log(`  4. 🔄 Task execution coordination in progress...`);\n  console.log(`  5. ⏳ Results aggregation and sharing pending`);\n}\n\nfunction getAgentCapabilities(type) {\n  const capabilities = {\n    coordinator: 'Task orchestration, agent management, workflow coordination',\n    coder: 'Code implementation, debugging, technical development',\n    developer: 'Code implementation, debugging, technical development',\n    researcher: 'Information gathering, analysis, documentation',\n    analyst: 'Data analysis, performance monitoring, metrics',\n    analyzer: 'Data analysis, performance monitoring, metrics',\n    tester: 'Quality assurance, test automation, validation',\n    architect: 'System design, architecture planning, technical strategy',\n    reviewer: 'Code review, quality assessment, best practices',\n    optimizer: 'Performance optimization, efficiency improvement, bottleneck analysis',\n    general: 'Multi-purpose coordination and development',\n  };\n  return capabilities[type] || capabilities.general;\n}\n\nfunction showCoordinationHelp() {\n  console.log(`\n🐝 Coordination Commands - Swarm & Agent Orchestration\n\nUSAGE:\n  claude-flow coordination <command> [options]\n\nCOMMANDS:\n  swarm-init        Initialize swarm coordination infrastructure\n  agent-spawn       Spawn and coordinate new agents\n  task-orchestrate  Orchestrate task execution across agents\n\nSWARM-INIT OPTIONS:\n  --swarm-id <id>      Swarm identifier (auto-generated if not provided)\n  --topology <type>    Coordination topology (default: hierarchical)\n                       Options: hierarchical, mesh, ring, star, hybrid\n  --max-agents <n>     Maximum number of agents (default: 5)\n\nAGENT-SPAWN OPTIONS:\n  --type <type>        Agent type (default: general)\n                       Options: coordinator, coder, developer, researcher, analyst, analyzer, \n                       tester, architect, reviewer, optimizer, general\n  --name <name>        Custom agent name (auto-generated if not provided)\n  --swarm-id <id>      Target swarm for agent coordination\n  --capabilities <cap> Custom capabilities specification\n\nTASK-ORCHESTRATE OPTIONS:\n  --task <description> Task description (required)\n  --swarm-id <id>      Target swarm for task execution\n  --strategy <strategy> Coordination strategy (default: adaptive)\n                       Options: adaptive, parallel, sequential, hierarchical\n  --share-results      Enable result sharing across swarm\n\nEXAMPLES:\n  # Initialize hierarchical swarm\n  claude-flow coordination swarm-init --topology hierarchical --max-agents 8\n\n  # Spawn coordinated developer agent\n  claude-flow coordination agent-spawn --type developer --name \"api-dev\" --swarm-id swarm-123\n\n  # Orchestrate complex task\n  claude-flow coordination task-orchestrate --task \"Build REST API\" --strategy parallel --share-results\n\n  # Initialize mesh topology for parallel work\n  claude-flow coordination swarm-init --topology mesh --max-agents 12\n\n🎯 Coordination enables:\n  • Intelligent task distribution\n  • Agent synchronization\n  • Shared memory coordination\n  • Performance optimization\n  • Fault tolerance\n`);\n}\n"],"names":["printSuccess","printError","printWarning","callRuvSwarmMCP","checkRuvSwarmAvailable","generateId","prefix","Date","now","Math","random","toString","substr","coordinationAction","subArgs","flags","subcommand","options","help","h","showCoordinationHelp","swarmInitCommand","agentSpawnCommand","taskOrchestrateCommand","err","message","swarmId","topology","maxAgents","parseInt","strategy","console","log","isAvailable","swarmResult","timestamp","success","memoryStatus","communicationChannels","expectedPerformance","error","Promise","resolve","setTimeout","agentType","type","capabilities","validTypes","includes","agentName","name","getAgentCapabilities","task","slice","join","shareResults","coordinator","coder","developer","researcher","analyst","analyzer","tester","architect","reviewer","optimizer","general"],"mappings":"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"}