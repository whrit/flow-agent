{"version":3,"sources":["../../../../src/cli/simple-commands/stream-chain-real.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Stream Chain Command - Real Claude CLI stream-json chaining\n * Based on docs/stream-chaining.md specification\n */\n\nimport { spawn, execSync } from 'child_process';\nimport { Readable, PassThrough } from 'stream';\n\n/**\n * Check if claude CLI is available\n */\nfunction checkClaudeAvailable() {\n  try {\n    execSync('which claude', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Execute a chain of Claude instances with proper stream-json piping\n */\nasync function executeStreamChain(prompts, flags = {}) {\n  if (!checkClaudeAvailable()) {\n    console.error('‚ùå Error: Claude CLI is required for stream chaining');\n    console.log('   Install: npm install -g @anthropic-ai/claude-cli');\n    console.log('   Or use Claude Code: https://docs.anthropic.com/claude/docs/claude-cli');\n    return;\n  }\n\n  console.log('üîó Starting Real Stream Chain');\n  console.log('‚îÅ'.repeat(50));\n  console.log(`üìù Chain length: ${prompts.length} steps`);\n  console.log('');\n\n  const results = [];\n  let previousOutput = null;\n  \n  for (let i = 0; i < prompts.length; i++) {\n    const prompt = prompts[i];\n    const isFirst = i === 0;\n    const isLast = i === prompts.length - 1;\n    \n    console.log(`\\nüîÑ Step ${i + 1}/${prompts.length}: ${prompt.slice(0, 50)}...`);\n    \n    try {\n      const result = await executeSingleStep(\n        prompt, \n        previousOutput, \n        isFirst, \n        isLast, \n        flags\n      );\n      \n      results.push({\n        step: i + 1,\n        prompt: prompt.slice(0, 50),\n        success: result.success,\n        duration: result.duration\n      });\n      \n      if (!result.success) {\n        console.error(`‚ùå Step ${i + 1} failed`);\n        break;\n      }\n      \n      console.log(`‚úÖ Step ${i + 1} completed (${result.duration}ms)`);\n      \n      // Store output for next step (only if not last)\n      if (!isLast) {\n        previousOutput = result.output;\n      }\n      \n      // Show verbose output if requested\n      if (flags.verbose && result.output) {\n        const preview = result.output.slice(0, 200);\n        console.log(`   Output preview: ${preview}...`);\n      }\n      \n    } catch (error) {\n      console.error(`‚ùå Step ${i + 1} error:`, error.message);\n      results.push({\n        step: i + 1,\n        prompt: prompt.slice(0, 50),\n        success: false,\n        duration: 0\n      });\n      break;\n    }\n  }\n  \n  // Summary\n  console.log('\\n' + '‚ïê'.repeat(50));\n  console.log('üìä Stream Chain Summary');\n  console.log('‚ïê'.repeat(50));\n  \n  for (const result of results) {\n    const status = result.success ? '‚úÖ' : '‚ùå';\n    console.log(`${status} Step ${result.step}: ${result.prompt}... (${result.duration}ms)`);\n  }\n  \n  const totalTime = results.reduce((sum, r) => sum + r.duration, 0);\n  const successCount = results.filter(r => r.success).length;\n  \n  console.log(`\\n‚è±Ô∏è  Total execution time: ${totalTime}ms`);\n  console.log(`üìà Success rate: ${successCount}/${results.length} steps`);\n}\n\n/**\n * Execute a single step in the chain\n */\nasync function executeSingleStep(prompt, inputStream, isFirst, isLast, flags) {\n  return new Promise((resolve, reject) => {\n    const startTime = Date.now();\n    const timeout = (flags.timeout || 30) * 1000;\n    \n    // Build args based on position in chain\n    const args = ['-p'];\n    \n    // First step: only output stream-json\n    // Middle steps: both input and output stream-json\n    // Last step: only input stream-json (if not first)\n    \n    if (!isFirst && inputStream) {\n      args.push('--input-format', 'stream-json');\n    }\n    \n    if (!isLast) {\n      args.push('--output-format', 'stream-json');\n      if (flags.verbose) {\n        args.push('--verbose');\n      }\n    }\n    \n    args.push(prompt);\n    \n    console.log(`   Executing: claude ${args.join(' ')}`);\n    \n    // Spawn the Claude process\n    const claudeProcess = spawn('claude', args, {\n      stdio: ['pipe', 'pipe', 'pipe'],\n      env: process.env\n    });\n    \n    let output = '';\n    let stderr = '';\n    let processCompleted = false;\n    \n    // If we have input from previous step, pipe it\n    if (!isFirst && inputStream) {\n      console.log('   üîó Piping input from previous step...');\n      \n      // Create a readable stream from the input string\n      const inputReadable = Readable.from(inputStream);\n      inputReadable.pipe(claudeProcess.stdin);\n      \n      // Handle pipe errors\n      inputReadable.on('error', (error) => {\n        console.error('   Input pipe error:', error.message);\n      });\n    } else {\n      // Close stdin if no input\n      claudeProcess.stdin.end();\n    }\n    \n    // Capture output\n    claudeProcess.stdout.on('data', (data) => {\n      output += data.toString();\n      \n      // Show progress dots in verbose mode\n      if (flags.verbose && !processCompleted) {\n        process.stdout.write('.');\n      }\n    });\n    \n    // Capture errors\n    claudeProcess.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n    \n    // Handle process completion\n    claudeProcess.on('close', (code) => {\n      if (processCompleted) return;\n      processCompleted = true;\n      \n      const duration = Date.now() - startTime;\n      \n      if (flags.verbose) {\n        console.log(''); // New line after progress dots\n      }\n      \n      if (code !== 0) {\n        console.error(`   Process exited with code ${code}`);\n        if (stderr) {\n          console.error(`   stderr: ${stderr.slice(0, 200)}`);\n        }\n        \n        resolve({\n          success: false,\n          duration,\n          output: null,\n          error: stderr || `Process exited with code ${code}`\n        });\n        return;\n      }\n      \n      resolve({\n        success: true,\n        duration,\n        output: output.trim(),\n        error: null\n      });\n    });\n    \n    // Handle process errors\n    claudeProcess.on('error', (error) => {\n      if (processCompleted) return;\n      processCompleted = true;\n      \n      console.error('   Process error:', error.message);\n      reject(error);\n    });\n    \n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      if (processCompleted) return;\n      processCompleted = true;\n      \n      console.log('   ‚è±Ô∏è  Timeout reached, terminating...');\n      claudeProcess.kill('SIGTERM');\n      \n      resolve({\n        success: false,\n        duration: timeout,\n        output: null,\n        error: 'Process timed out'\n      });\n    }, timeout);\n    \n    // Clear timeout when process completes\n    claudeProcess.on('exit', () => {\n      clearTimeout(timeoutId);\n    });\n  });\n}\n\n/**\n * Main stream chain command\n */\nexport async function streamChainCommand(args, flags) {\n  const subcommand = args[0] || 'help';\n  \n  switch (subcommand) {\n    case 'help':\n      showHelp();\n      break;\n      \n    case 'demo':\n      await runDemo(flags);\n      break;\n      \n    case 'run':\n      await runCustomChain(args.slice(1), flags);\n      break;\n      \n    case 'test':\n      await testStreamConnection(flags);\n      break;\n      \n    case 'pipeline':\n      await runPipeline(args.slice(1), flags);\n      break;\n      \n    default:\n      console.error(`‚ùå Unknown subcommand: ${subcommand}`);\n      console.log('Use \"stream-chain help\" for usage information');\n  }\n}\n\n/**\n * Show help information\n */\nfunction showHelp() {\n  console.log(`\nüîó Real Stream Chain Command - Claude CLI Stream-JSON Chaining\n\nDESCRIPTION\n    Connect multiple Claude instances using stream-json format for\n    real multi-agent workflows with full context preservation.\n\nUSAGE\n    stream-chain <subcommand> [options]\n\nSUBCOMMANDS\n    run <prompt1> <prompt2> [...]  Execute custom chain (min 2 prompts)\n    demo                           Run 3-step demonstration\n    pipeline <type>                Execute predefined pipeline\n    test                          Test stream connection\n    help                          Show this help\n\nPIPELINE TYPES\n    analysis    Code analysis pipeline\n    refactor    Refactoring workflow\n    test        Test generation\n    optimize    Performance optimization\n\nOPTIONS\n    --verbose            Show detailed output\n    --timeout <seconds>  Timeout per step (default: 30)\n\nEXAMPLES\n    stream-chain run \"Analyze code\" \"Suggest improvements\" \"Apply changes\"\n    stream-chain demo --verbose\n    stream-chain pipeline analysis --timeout 60\n    stream-chain test\n\nSTREAM-JSON FORMAT\n    Each step communicates via newline-delimited JSON:\n    {\"type\":\"init\",\"session_id\":\"abc123\"}\n    {\"type\":\"message\",\"role\":\"assistant\",\"content\":[...]}\n    {\"type\":\"tool_use\",\"name\":\"Bash\",\"input\":{...}}\n    {\"type\":\"result\",\"status\":\"success\"}\n\nFor more: docs/stream-chaining.md\n  `);\n}\n\n/**\n * Run demonstration\n */\nasync function runDemo(flags) {\n  console.log('üé≠ Running Stream Chain Demo');\n  console.log('‚îÅ'.repeat(50));\n  console.log('This demonstrates a real 3-step chain with context preservation\\n');\n  \n  const prompts = [\n    \"Generate a simple Python function to calculate factorial\",\n    \"Review the code and suggest improvements for efficiency\",\n    \"Apply the improvements and create the final optimized version\"\n  ];\n  \n  await executeStreamChain(prompts, flags);\n}\n\n/**\n * Run custom chain\n */\nasync function runCustomChain(prompts, flags) {\n  if (prompts.length < 2) {\n    console.error('‚ùå Error: Need at least 2 prompts for chaining');\n    console.log('Usage: stream-chain run \"prompt1\" \"prompt2\" [...]');\n    return;\n  }\n  \n  await executeStreamChain(prompts, flags);\n}\n\n/**\n * Test stream connection\n */\nasync function testStreamConnection(flags) {\n  console.log('üß™ Testing Stream Connection');\n  console.log('‚îÅ'.repeat(50));\n  \n  const testPrompts = [\n    \"Say 'Stream test step 1 complete'\",\n    \"Acknowledge the previous message and say 'Stream test step 2 complete'\"\n  ];\n  \n  await executeStreamChain(testPrompts, { ...flags, verbose: true });\n}\n\n/**\n * Run predefined pipeline\n */\nasync function runPipeline(args, flags) {\n  const pipelineType = args[0] || 'analysis';\n  \n  const pipelines = {\n    analysis: [\n      \"Analyze the current directory structure and identify key components\",\n      \"Based on the analysis, identify potential improvements\",\n      \"Create a detailed report with actionable recommendations\"\n    ],\n    refactor: [\n      \"Identify code that needs refactoring in the current project\",\n      \"Create a refactoring plan with priorities\",\n      \"Generate refactored code examples for the top priorities\"\n    ],\n    test: [\n      \"Analyze code coverage and identify untested areas\",\n      \"Design comprehensive test cases for critical functions\",\n      \"Generate unit test implementations\"\n    ],\n    optimize: [\n      \"Profile the codebase for performance bottlenecks\",\n      \"Identify optimization opportunities\",\n      \"Provide optimized implementations\"\n    ]\n  };\n  \n  const pipeline = pipelines[pipelineType];\n  if (!pipeline) {\n    console.error(`‚ùå Unknown pipeline: ${pipelineType}`);\n    console.log('Available pipelines:', Object.keys(pipelines).join(', '));\n    return;\n  }\n  \n  console.log(`üöÄ Running ${pipelineType} pipeline`);\n  await executeStreamChain(pipeline, flags);\n}\n\nexport default streamChainCommand;"],"names":["spawn","execSync","Readable","checkClaudeAvailable","stdio","executeStreamChain","prompts","flags","console","error","log","repeat","length","results","previousOutput","i","prompt","isFirst","isLast","slice","result","executeSingleStep","push","step","success","duration","output","verbose","preview","message","status","totalTime","reduce","sum","r","successCount","filter","inputStream","Promise","resolve","reject","startTime","Date","now","timeout","args","join","claudeProcess","env","process","stderr","processCompleted","inputReadable","from","pipe","stdin","on","end","stdout","data","toString","write","code","trim","timeoutId","setTimeout","kill","clearTimeout","streamChainCommand","subcommand","showHelp","runDemo","runCustomChain","testStreamConnection","runPipeline","testPrompts","pipelineType","pipelines","analysis","refactor","test","optimize","pipeline","Object","keys"],"mappings":"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"}