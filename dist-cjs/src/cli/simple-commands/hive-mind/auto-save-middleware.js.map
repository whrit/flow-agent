{"version":3,"sources":["../../../../../src/cli/simple-commands/hive-mind/auto-save-middleware.js"],"sourcesContent":["/**\n * Auto-save middleware for Hive Mind swarms\n * Automatically saves session state during operations\n */\n\nimport { HiveMindSessionManager } from './session-manager.js';\n\nexport class AutoSaveMiddleware {\n  constructor(sessionId, sessionManager, saveInterval = 30000) {\n    this.sessionId = sessionId;\n    this.saveInterval = saveInterval;\n    this.sessionManager = sessionManager; // Use provided session manager\n    this.saveTimer = null;\n    this.pendingChanges = [];\n    this.isActive = false;\n    this.childProcesses = new Set();\n  }\n\n  /**\n   * Start auto-save monitoring\n   */\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n\n    // Set up periodic saves\n    this.saveTimer = setInterval(() => {\n      if (this.pendingChanges.length > 0) {\n        this.performAutoSave();\n      }\n    }, this.saveInterval);\n\n    // Also save on process exit\n    process.on('beforeExit', () => {\n      this.performAutoSave();\n    });\n\n    process.on('SIGINT', async () => {\n      console.log('\\n\\nReceived SIGINT, cleaning up...');\n      await this.cleanup();\n      process.exit(0);\n    });\n\n    process.on('SIGTERM', async () => {\n      console.log('\\n\\nReceived SIGTERM, cleaning up...');\n      await this.cleanup();\n      process.exit(0);\n    });\n  }\n\n  /**\n   * Stop auto-save monitoring\n   */\n  stop() {\n    if (this.saveTimer) {\n      clearInterval(this.saveTimer);\n      this.saveTimer = null;\n    }\n    this.isActive = false;\n\n    // Final save\n    if (this.pendingChanges.length > 0) {\n      this.performAutoSave();\n    }\n\n    this.sessionManager.close();\n  }\n\n  /**\n   * Track a change for auto-save\n   */\n  trackChange(changeType, data) {\n    this.pendingChanges.push({\n      type: changeType,\n      data: data,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Trigger immediate save for critical changes\n    if (\n      changeType === 'task_completed' ||\n      changeType === 'agent_spawned' ||\n      changeType === 'consensus_reached'\n    ) {\n      this.performAutoSave();\n    }\n  }\n\n  /**\n   * Track task progress\n   */\n  trackTaskProgress(taskId, status, result = null) {\n    this.trackChange('task_progress', {\n      taskId,\n      status,\n      result,\n    });\n  }\n\n  /**\n   * Track agent activity\n   */\n  trackAgentActivity(agentId, activity, data = null) {\n    this.trackChange('agent_activity', {\n      agentId,\n      activity,\n      data,\n    });\n  }\n\n  /**\n   * Track memory updates\n   */\n  trackMemoryUpdate(key, value, type = 'general') {\n    this.trackChange('memory_update', {\n      key,\n      value,\n      type,\n    });\n  }\n\n  /**\n   * Track consensus decisions\n   */\n  trackConsensusDecision(topic, decision, votes) {\n    this.trackChange('consensus_reached', {\n      topic,\n      decision,\n      votes,\n    });\n  }\n\n  /**\n   * Perform auto-save\n   */\n  async performAutoSave() {\n    if (this.pendingChanges.length === 0) {\n      return;\n    }\n\n    try {\n      // Group changes by type\n      const changesByType = this.pendingChanges.reduce((acc, change) => {\n        if (!acc[change.type]) {\n          acc[change.type] = [];\n        }\n        acc[change.type].push(change);\n        return acc;\n      }, {});\n\n      // Calculate progress\n      const taskProgress = changesByType.task_progress || [];\n      const completedTasks = taskProgress.filter((t) => t.data.status === 'completed').length;\n      const totalTasks = taskProgress.length;\n      const completionPercentage =\n        totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n      // Create checkpoint data\n      const checkpointData = {\n        timestamp: new Date().toISOString(),\n        changeCount: this.pendingChanges.length,\n        changesByType,\n        statistics: {\n          tasksProcessed: taskProgress.length,\n          tasksCompleted: completedTasks,\n          memoryUpdates: (changesByType.memory_update || []).length,\n          agentActivities: (changesByType.agent_activity || []).length,\n          consensusDecisions: (changesByType.consensus_reached || []).length,\n        },\n      };\n\n      // Save checkpoint\n      const checkpointName = `auto-save-${Date.now()}`;\n      await this.sessionManager.saveCheckpoint(this.sessionId, checkpointName, checkpointData);\n\n      // Update session progress\n      if (completionPercentage > 0) {\n        await this.sessionManager.updateSessionProgress(this.sessionId, completionPercentage);\n      }\n\n      // Log all changes as session events\n      for (const change of this.pendingChanges) {\n        this.sessionManager.logSessionEvent(\n          this.sessionId,\n          'info',\n          `Auto-save: ${change.type}`,\n          change.data.agentId || null,\n          change.data,\n        );\n      }\n\n      // Clear pending changes\n      this.pendingChanges = [];\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n      // Keep changes for next attempt\n    }\n  }\n\n  /**\n   * Force immediate save\n   */\n  async forceSave() {\n    await this.performAutoSave();\n  }\n\n  /**\n   * Get pending changes count\n   */\n  getPendingChangesCount() {\n    return this.pendingChanges.length;\n  }\n\n  /**\n   * Check if auto-save is active\n   */\n  isAutoSaveActive() {\n    return this.isActive;\n  }\n\n  /**\n   * Register a child process\n   */\n  registerChildProcess(childProcess) {\n    if (childProcess && childProcess.pid) {\n      this.childProcesses.add(childProcess);\n      this.sessionManager.addChildPid(this.sessionId, childProcess.pid);\n\n      // Remove from tracking when process exits\n      childProcess.on('exit', () => {\n        this.childProcesses.delete(childProcess);\n        this.sessionManager.removeChildPid(this.sessionId, childProcess.pid);\n      });\n    }\n  }\n\n  /**\n   * Clean up all resources and child processes\n   */\n  async cleanup() {\n    try {\n      // Stop the save timer\n      if (this.saveTimer) {\n        clearInterval(this.saveTimer);\n        this.saveTimer = null;\n      }\n\n      // Perform final save\n      await this.performAutoSave();\n\n      // Terminate all child processes\n      for (const childProcess of this.childProcesses) {\n        try {\n          if (childProcess.pid) {\n            console.log(`Terminating child process ${childProcess.pid}...`);\n            childProcess.kill('SIGTERM');\n\n            // Give it a moment to terminate gracefully\n            await new Promise((resolve) => setTimeout(resolve, 100));\n\n            // Force kill if still alive\n            try {\n              process.kill(childProcess.pid, 0); // Check if still alive\n              childProcess.kill('SIGKILL');\n            } catch (e) {\n              // Process already dead, good\n            }\n          }\n        } catch (error) {\n          console.error(`Failed to terminate child process:`, error.message);\n        }\n      }\n\n      // Clear the set\n      this.childProcesses.clear();\n\n      // Stop the session if it's still active\n      const session = await this.sessionManager.getSession(this.sessionId);\n      if (session && (session.status === 'active' || session.status === 'paused')) {\n        await this.sessionManager.stopSession(this.sessionId);\n      }\n\n      // Close database connection\n      this.sessionManager.close();\n\n      console.log('Cleanup completed successfully');\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n    }\n  }\n}\n\n/**\n * Create auto-save middleware for a session\n */\nexport function createAutoSaveMiddleware(sessionId, sessionManager, options = {}) {\n  const saveInterval = options.saveInterval || 30000; // Default 30 seconds\n  const middleware = new AutoSaveMiddleware(sessionId, sessionManager, saveInterval);\n\n  if (options.autoStart !== false) {\n    middleware.start();\n  }\n\n  return middleware;\n}\n\n// Export for use in swarm operations\nexport default AutoSaveMiddleware;\n"],"names":["AutoSaveMiddleware","sessionId","sessionManager","saveInterval","saveTimer","pendingChanges","isActive","childProcesses","Set","start","setInterval","length","performAutoSave","process","on","console","log","cleanup","exit","stop","clearInterval","close","trackChange","changeType","data","push","type","timestamp","Date","toISOString","trackTaskProgress","taskId","status","result","trackAgentActivity","agentId","activity","trackMemoryUpdate","key","value","trackConsensusDecision","topic","decision","votes","changesByType","reduce","acc","change","taskProgress","task_progress","completedTasks","filter","t","totalTasks","completionPercentage","Math","round","checkpointData","changeCount","statistics","tasksProcessed","tasksCompleted","memoryUpdates","memory_update","agentActivities","agent_activity","consensusDecisions","consensus_reached","checkpointName","now","saveCheckpoint","updateSessionProgress","logSessionEvent","error","forceSave","getPendingChangesCount","isAutoSaveActive","registerChildProcess","childProcess","pid","add","addChildPid","delete","removeChildPid","kill","Promise","resolve","setTimeout","e","message","clear","session","getSession","stopSession","createAutoSaveMiddleware","options","middleware","autoStart"],"mappings":"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"}