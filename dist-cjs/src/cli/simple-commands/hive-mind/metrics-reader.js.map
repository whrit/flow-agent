{"version":3,"sources":["../../../../../src/cli/simple-commands/hive-mind/metrics-reader.js"],"sourcesContent":["/**\n * HiveMind Metrics Reader\n * Reads real metrics from the database instead of returning mock data\n */\n\nimport Database from 'better-sqlite3';\nimport { existsSync } from 'fs';\nimport path from 'path';\nimport { cwd } from '../../node-compat.js';\n\nexport class HiveMindMetricsReader {\n  constructor(dbPath = null) {\n    this.dbPath = dbPath || path.join(cwd(), '.hive-mind', 'hive.db');\n    this.db = null;\n  }\n\n  /**\n   * Initialize database connection\n   */\n  init() {\n    if (existsSync(this.dbPath)) {\n      this.db = new Database(this.dbPath, { readonly: true });\n    }\n  }\n\n  /**\n   * Close database connection\n   */\n  close() {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n  }\n\n  /**\n   * Get swarm metrics with real data\n   */\n  getSwarmMetrics(swarmId) {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.db) {\n      return null;\n    }\n\n    try {\n      // Get swarm details\n      const swarm = this.db.prepare('SELECT * FROM swarms WHERE id = ?').get(swarmId);\n      \n      if (!swarm) {\n        return null;\n      }\n\n      // Get real agent count\n      const agentCount = this.db\n        .prepare('SELECT COUNT(*) as count FROM agents WHERE swarm_id = ?')\n        .get(swarmId).count;\n\n      // Get real task metrics\n      const taskMetrics = this.db\n        .prepare(`\n          SELECT \n            COUNT(*) as total,\n            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,\n            SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,\n            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,\n            SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed\n          FROM tasks\n          WHERE swarm_id = ?\n        `)\n        .get(swarmId);\n\n      // Get memory entries count\n      const memoryCount = this.db\n        .prepare('SELECT COUNT(*) as count FROM collective_memory WHERE swarm_id = ?')\n        .get(swarmId).count;\n\n      // Get consensus decisions count\n      const consensusCount = this.db\n        .prepare('SELECT COUNT(*) as count FROM consensus_decisions WHERE swarm_id = ?')\n        .get(swarmId).count;\n\n      // Get active agent details\n      const agents = this.db\n        .prepare('SELECT * FROM agents WHERE swarm_id = ? ORDER BY role DESC, created_at ASC')\n        .all(swarmId);\n\n      return {\n        ...swarm,\n        agent_count: agentCount,\n        agents: agents,\n        task_metrics: taskMetrics,\n        memory_count: memoryCount,\n        consensus_count: consensusCount,\n        completion_percentage: taskMetrics.total > 0 \n          ? Math.round((taskMetrics.completed / taskMetrics.total) * 100)\n          : 0\n      };\n    } catch (error) {\n      console.error('Error reading swarm metrics:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get session metrics with real data\n   */\n  getSessionMetrics(sessionId) {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.db) {\n      return null;\n    }\n\n    try {\n      // Get session details\n      const session = this.db.prepare('SELECT * FROM sessions WHERE id = ?').get(sessionId);\n      \n      if (!session) {\n        return null;\n      }\n\n      // Get real agent count for this session's swarm\n      const agentCount = this.db\n        .prepare('SELECT COUNT(*) as count FROM agents WHERE swarm_id = ?')\n        .get(session.swarm_id).count;\n\n      // Get real task metrics for this session's swarm\n      const taskMetrics = this.db\n        .prepare(`\n          SELECT \n            COUNT(*) as total,\n            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,\n            SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,\n            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending\n          FROM tasks\n          WHERE swarm_id = ?\n        `)\n        .get(session.swarm_id);\n\n      // Calculate real completion percentage\n      const completionPercentage = taskMetrics.total > 0\n        ? Math.round((taskMetrics.completed / taskMetrics.total) * 100)\n        : session.completion_percentage || 0;\n\n      return {\n        ...session,\n        agent_count: agentCount,\n        task_count: taskMetrics.total,\n        completed_tasks: taskMetrics.completed,\n        pending_tasks: taskMetrics.pending,\n        in_progress_tasks: taskMetrics.in_progress,\n        completion_percentage: completionPercentage\n      };\n    } catch (error) {\n      console.error('Error reading session metrics:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all active sessions with real metrics\n   */\n  getActiveSessions() {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.db) {\n      return [];\n    }\n\n    try {\n      // Get all active or paused sessions\n      const sessions = this.db\n        .prepare(`\n          SELECT * FROM sessions \n          WHERE status = 'active' OR status = 'paused'\n          ORDER BY updated_at DESC\n        `)\n        .all();\n\n      // Enrich each session with real metrics\n      return sessions.map(session => {\n        const metrics = this.getSessionMetrics(session.id);\n        return metrics || session;\n      });\n    } catch (error) {\n      console.error('Error reading active sessions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get all active swarms with real metrics\n   */\n  getActiveSwarms() {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.db) {\n      return [];\n    }\n\n    try {\n      // Get all active swarms\n      const swarms = this.db\n        .prepare(`\n          SELECT * FROM swarms \n          WHERE status = 'active'\n          ORDER BY created_at DESC\n        `)\n        .all();\n\n      // Enrich each swarm with real metrics\n      return swarms.map(swarm => {\n        const metrics = this.getSwarmMetrics(swarm.id);\n        return metrics || swarm;\n      });\n    } catch (error) {\n      console.error('Error reading active swarms:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.db) {\n      return null;\n    }\n\n    try {\n      // Get overall task metrics\n      const overallTasks = this.db\n        .prepare(`\n          SELECT \n            COUNT(*) as total,\n            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,\n            AVG(CASE WHEN status = 'completed' AND completion_time IS NOT NULL \n                THEN (julianday(completion_time) - julianday(created_at)) * 24 * 60 \n                ELSE NULL END) as avg_completion_minutes\n          FROM tasks\n        `)\n        .get();\n\n      // Get agent performance\n      const agentPerformance = this.db\n        .prepare(`\n          SELECT \n            a.type,\n            COUNT(DISTINCT a.id) as agent_count,\n            COUNT(t.id) as tasks_assigned,\n            SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as tasks_completed\n          FROM agents a\n          LEFT JOIN tasks t ON a.id = t.agent_id\n          GROUP BY a.type\n          ORDER BY tasks_completed DESC\n        `)\n        .all();\n\n      // Get swarm performance\n      const swarmPerformance = this.db\n        .prepare(`\n          SELECT \n            s.name,\n            s.objective,\n            COUNT(DISTINCT a.id) as agent_count,\n            COUNT(DISTINCT t.id) as task_count,\n            SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as completed_count\n          FROM swarms s\n          LEFT JOIN agents a ON s.id = a.swarm_id\n          LEFT JOIN tasks t ON s.id = t.swarm_id\n          WHERE s.status = 'active'\n          GROUP BY s.id\n          ORDER BY s.created_at DESC\n          LIMIT 5\n        `)\n        .all();\n\n      return {\n        overall_tasks: overallTasks,\n        agent_performance: agentPerformance,\n        swarm_performance: swarmPerformance,\n        success_rate: overallTasks.total > 0 \n          ? (overallTasks.completed / overallTasks.total * 100).toFixed(1)\n          : 0\n      };\n    } catch (error) {\n      console.error('Error reading performance metrics:', error);\n      return null;\n    }\n  }\n}"],"names":["Database","existsSync","path","cwd","HiveMindMetricsReader","dbPath","join","db","init","readonly","close","getSwarmMetrics","swarmId","swarm","prepare","get","agentCount","count","taskMetrics","memoryCount","consensusCount","agents","all","agent_count","task_metrics","memory_count","consensus_count","completion_percentage","total","Math","round","completed","error","console","getSessionMetrics","sessionId","session","swarm_id","completionPercentage","task_count","completed_tasks","pending_tasks","pending","in_progress_tasks","in_progress","getActiveSessions","sessions","map","metrics","id","getActiveSwarms","swarms","getPerformanceMetrics","overallTasks","agentPerformance","swarmPerformance","overall_tasks","agent_performance","swarm_performance","success_rate","toFixed"],"mappings":"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"}