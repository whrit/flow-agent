{"version":3,"sources":["../../../../../src/cli/simple-commands/hive-mind/queen.js"],"sourcesContent":["/**\n * Queen Coordinator for Hive Mind System\n * Strategic decision-making and swarm coordination\n */\n\nimport EventEmitter from 'events';\n\n/**\n * Queen types and their characteristics\n */\nconst QUEEN_TYPES = {\n  strategic: {\n    name: 'Strategic Queen',\n    traits: ['long-term planning', 'resource optimization', 'goal alignment'],\n    decisionWeight: 3,\n    consensusThreshold: 0.6,\n  },\n  tactical: {\n    name: 'Tactical Queen',\n    traits: ['task prioritization', 'workflow optimization', 'rapid response'],\n    decisionWeight: 2,\n    consensusThreshold: 0.5,\n  },\n  adaptive: {\n    name: 'Adaptive Queen',\n    traits: ['learning', 'pattern recognition', 'strategy evolution'],\n    decisionWeight: 2.5,\n    consensusThreshold: 0.55,\n  },\n};\n\n/**\n * QueenCoordinator class\n */\nexport class QueenCoordinator extends EventEmitter {\n  constructor(config = {}) {\n    super();\n\n    this.config = {\n      swarmId: config.swarmId,\n      type: config.type || 'strategic',\n      objective: config.objective || '',\n      ...QUEEN_TYPES[config.type || 'strategic'],\n    };\n\n    this.state = {\n      status: 'initializing',\n      decisionsCount: 0,\n      strategiesExecuted: 0,\n      learningData: new Map(),\n      currentStrategy: null,\n      taskQueue: [],\n      workerAssignments: new Map(),\n    };\n\n    this.strategies = {\n      divide_and_conquer: this._divideAndConquerStrategy.bind(this),\n      parallel_execution: this._parallelExecutionStrategy.bind(this),\n      sequential_refinement: this._sequentialRefinementStrategy.bind(this),\n      consensus_driven: this._consensusDrivenStrategy.bind(this),\n      adaptive_learning: this._adaptiveLearningStrategy.bind(this),\n    };\n\n    this._initialize();\n  }\n\n  /**\n   * Initialize queen coordinator\n   */\n  _initialize() {\n    this.state.status = 'active';\n    this.emit('queen:initialized', {\n      type: this.config.type,\n      traits: this.config.traits,\n    });\n  }\n\n  /**\n   * Analyze objective and create strategic plan\n   */\n  async analyzeObjective(objective) {\n    const analysis = {\n      objective,\n      complexity: this._assessComplexity(objective),\n      requiredCapabilities: this._identifyRequiredCapabilities(objective),\n      estimatedTasks: this._estimateTaskCount(objective),\n      recommendedStrategy: this._selectStrategy(objective),\n      resourceRequirements: this._estimateResources(objective),\n    };\n\n    // Store analysis for learning\n    this.state.learningData.set('objective_analysis', analysis);\n\n    this.emit('objective:analyzed', analysis);\n    return analysis;\n  }\n\n  /**\n   * Assess complexity of objective\n   */\n  _assessComplexity(objective) {\n    const complexityFactors = {\n      length: objective.length > 100 ? 2 : 1,\n      keywords: this._countComplexityKeywords(objective),\n      components: this._identifyComponents(objective).length,\n    };\n\n    const score = Object.values(complexityFactors).reduce((a, b) => a + b, 0);\n\n    if (score <= 3) return 'low';\n    if (score <= 6) return 'medium';\n    if (score <= 9) return 'high';\n    return 'very_high';\n  }\n\n  /**\n   * Count complexity keywords\n   */\n  _countComplexityKeywords(text) {\n    const complexKeywords = [\n      'complex',\n      'advanced',\n      'enterprise',\n      'distributed',\n      'scalable',\n      'microservices',\n      'architecture',\n      'integration',\n      'optimization',\n      'security',\n      'performance',\n      'concurrent',\n      'real-time',\n    ];\n\n    const lowerText = text.toLowerCase();\n    return complexKeywords.filter((keyword) => lowerText.includes(keyword)).length;\n  }\n\n  /**\n   * Identify components in objective\n   */\n  _identifyComponents(objective) {\n    const components = [];\n    const componentKeywords = {\n      backend: ['api', 'server', 'backend', 'database', 'service'],\n      frontend: ['ui', 'frontend', 'interface', 'client', 'web'],\n      data: ['database', 'data', 'storage', 'cache', 'persistence'],\n      auth: ['auth', 'security', 'login', 'permission', 'access'],\n      testing: ['test', 'quality', 'validation', 'verify'],\n      deployment: ['deploy', 'ci/cd', 'docker', 'kubernetes'],\n      monitoring: ['monitor', 'logging', 'metrics', 'observability'],\n    };\n\n    const lowerObjective = objective.toLowerCase();\n\n    Object.entries(componentKeywords).forEach(([component, keywords]) => {\n      if (keywords.some((keyword) => lowerObjective.includes(keyword))) {\n        components.push(component);\n      }\n    });\n\n    return components;\n  }\n\n  /**\n   * Identify required capabilities\n   */\n  _identifyRequiredCapabilities(objective) {\n    const capabilities = new Set();\n    const components = this._identifyComponents(objective);\n\n    // Map components to capabilities\n    const capabilityMap = {\n      backend: ['coder', 'architect', 'tester'],\n      frontend: ['coder', 'tester', 'reviewer'],\n      data: ['architect', 'analyst', 'optimizer'],\n      auth: ['architect', 'coder', 'tester'],\n      testing: ['tester', 'reviewer'],\n      deployment: ['architect', 'optimizer'],\n      monitoring: ['analyst', 'optimizer'],\n    };\n\n    components.forEach((component) => {\n      const caps = capabilityMap[component] || [];\n      caps.forEach((cap) => capabilities.add(cap));\n    });\n\n    // Always include researcher for initial analysis\n    capabilities.add('researcher');\n\n    return Array.from(capabilities);\n  }\n\n  /**\n   * Estimate number of tasks\n   */\n  _estimateTaskCount(objective) {\n    const complexity = this._assessComplexity(objective);\n    const components = this._identifyComponents(objective).length;\n\n    const baseTaskCount = {\n      low: 5,\n      medium: 10,\n      high: 20,\n      very_high: 30,\n    };\n\n    return baseTaskCount[complexity] + components * 3;\n  }\n\n  /**\n   * Select optimal strategy\n   */\n  _selectStrategy(objective) {\n    const complexity = this._assessComplexity(objective);\n    const components = this._identifyComponents(objective);\n\n    // Strategy selection heuristics\n    if (components.length > 3 && complexity !== 'low') {\n      return 'divide_and_conquer';\n    }\n\n    if (objective.toLowerCase().includes('parallel') || components.length > 5) {\n      return 'parallel_execution';\n    }\n\n    if (\n      objective.toLowerCase().includes('iterative') ||\n      objective.toLowerCase().includes('refine')\n    ) {\n      return 'sequential_refinement';\n    }\n\n    if (this.config.type === 'adaptive') {\n      return 'adaptive_learning';\n    }\n\n    return 'consensus_driven'; // Default\n  }\n\n  /**\n   * Estimate resource requirements\n   */\n  _estimateResources(objective) {\n    const complexity = this._assessComplexity(objective);\n    const taskCount = this._estimateTaskCount(objective);\n\n    return {\n      minWorkers: Math.min(3, Math.ceil(taskCount / 10)),\n      optimalWorkers: Math.min(8, Math.ceil(taskCount / 5)),\n      estimatedTime: taskCount * 5, // minutes\n      memoryRequirement: complexity === 'very_high' ? 'high' : 'medium',\n    };\n  }\n\n  /**\n   * Create execution plan\n   */\n  async createExecutionPlan(analysis, workers) {\n    const strategy = this.strategies[analysis.recommendedStrategy];\n    if (!strategy) {\n      throw new Error(`Unknown strategy: ${analysis.recommendedStrategy}`);\n    }\n\n    const plan = await strategy(analysis, workers);\n\n    this.state.currentStrategy = analysis.recommendedStrategy;\n    this.state.strategiesExecuted++;\n\n    this.emit('plan:created', plan);\n    return plan;\n  }\n\n  /**\n   * Divide and conquer strategy\n   */\n  async _divideAndConquerStrategy(analysis, workers) {\n    const components = this._identifyComponents(analysis.objective);\n    const phases = [];\n\n    // Phase 1: Research and planning\n    phases.push({\n      name: 'Research and Planning',\n      tasks: [\n        'Research best practices and patterns',\n        'Analyze requirements and constraints',\n        'Create high-level architecture design',\n      ],\n      workers: workers.filter((w) => ['researcher', 'architect'].includes(w.type)),\n      parallel: true,\n    });\n\n    // Phase 2: Component development\n    components.forEach((component) => {\n      phases.push({\n        name: `Develop ${component}`,\n        tasks: this._generateComponentTasks(component),\n        workers: workers.filter((w) => ['coder', 'architect'].includes(w.type)),\n        parallel: true,\n      });\n    });\n\n    // Phase 3: Integration and testing\n    phases.push({\n      name: 'Integration and Testing',\n      tasks: [\n        'Integrate components',\n        'Write integration tests',\n        'Perform end-to-end testing',\n        'Fix integration issues',\n      ],\n      workers: workers.filter((w) => ['coder', 'tester'].includes(w.type)),\n      parallel: false,\n    });\n\n    // Phase 4: Optimization and documentation\n    phases.push({\n      name: 'Optimization and Documentation',\n      tasks: [\n        'Optimize performance',\n        'Document architecture',\n        'Create user documentation',\n        'Prepare deployment guide',\n      ],\n      workers: workers.filter((w) => ['optimizer', 'documenter'].includes(w.type)),\n      parallel: true,\n    });\n\n    return {\n      strategy: 'divide_and_conquer',\n      phases,\n      estimatedDuration: phases.length * 15, // minutes\n      parallelism: 'high',\n    };\n  }\n\n  /**\n   * Parallel execution strategy\n   */\n  async _parallelExecutionStrategy(analysis, workers) {\n    const tasks = this._generateAllTasks(analysis);\n    const workerGroups = this._groupWorkersByType(workers);\n\n    return {\n      strategy: 'parallel_execution',\n      phases: [\n        {\n          name: 'Parallel Execution',\n          tasks: tasks,\n          workers: workers,\n          parallel: true,\n          workerAssignment: this._optimizeWorkerAssignment(tasks, workerGroups),\n        },\n      ],\n      estimatedDuration: Math.ceil(tasks.length / workers.length) * 10,\n      parallelism: 'maximum',\n    };\n  }\n\n  /**\n   * Sequential refinement strategy\n   */\n  async _sequentialRefinementStrategy(analysis, workers) {\n    const iterations = 3;\n    const phases = [];\n\n    for (let i = 0; i < iterations; i++) {\n      phases.push({\n        name: `Iteration ${i + 1}`,\n        tasks: [\n          `Design iteration ${i + 1}`,\n          `Implement features for iteration ${i + 1}`,\n          `Test iteration ${i + 1}`,\n          `Review and refine iteration ${i + 1}`,\n        ],\n        workers: workers,\n        parallel: false,\n        requiresConsensus: true,\n      });\n    }\n\n    return {\n      strategy: 'sequential_refinement',\n      phases,\n      estimatedDuration: phases.length * 20,\n      parallelism: 'low',\n      iterative: true,\n    };\n  }\n\n  /**\n   * Consensus-driven strategy\n   */\n  async _consensusDrivenStrategy(analysis, workers) {\n    const decisionPoints = this._identifyDecisionPoints(analysis);\n    const phases = [];\n\n    decisionPoints.forEach((decision, index) => {\n      phases.push({\n        name: `Decision Phase ${index + 1}: ${decision}`,\n        tasks: [\n          `Research options for ${decision}`,\n          `Analyze trade-offs`,\n          `Build consensus on approach`,\n          `Implement chosen solution`,\n        ],\n        workers: workers,\n        parallel: index === 0, // Only first phase in parallel\n        requiresConsensus: true,\n        consensusThreshold: this.config.consensusThreshold,\n      });\n    });\n\n    return {\n      strategy: 'consensus_driven',\n      phases,\n      estimatedDuration: phases.length * 25,\n      parallelism: 'medium',\n      consensusRequired: true,\n    };\n  }\n\n  /**\n   * Adaptive learning strategy\n   */\n  async _adaptiveLearningStrategy(analysis, workers) {\n    const learningPhases = [\n      {\n        name: 'Exploration Phase',\n        tasks: [\n          'Explore multiple approaches',\n          'Experiment with different solutions',\n          'Collect performance metrics',\n        ],\n        workers: workers,\n        parallel: true,\n        learning: true,\n      },\n      {\n        name: 'Analysis Phase',\n        tasks: ['Analyze results', 'Identify patterns', 'Select best approaches'],\n        workers: workers.filter((w) => ['analyst', 'researcher'].includes(w.type)),\n        parallel: false,\n        learning: true,\n      },\n      {\n        name: 'Implementation Phase',\n        tasks: ['Implement optimized solution', 'Apply learned patterns', 'Validate improvements'],\n        workers: workers,\n        parallel: true,\n        applyLearning: true,\n      },\n    ];\n\n    return {\n      strategy: 'adaptive_learning',\n      phases: learningPhases,\n      estimatedDuration: 45,\n      parallelism: 'adaptive',\n      learningEnabled: true,\n    };\n  }\n\n  /**\n   * Generate component-specific tasks\n   */\n  _generateComponentTasks(component) {\n    const taskTemplates = {\n      backend: [\n        'Design API endpoints',\n        'Implement business logic',\n        'Set up database models',\n        'Create API tests',\n      ],\n      frontend: [\n        'Design UI components',\n        'Implement user interface',\n        'Add interactivity',\n        'Create UI tests',\n      ],\n      data: [\n        'Design data schema',\n        'Implement data access layer',\n        'Set up caching',\n        'Optimize queries',\n      ],\n      auth: [\n        'Design authentication flow',\n        'Implement auth middleware',\n        'Add authorization checks',\n        'Test security',\n      ],\n    };\n\n    return (\n      taskTemplates[component] || [\n        `Design ${component}`,\n        `Implement ${component}`,\n        `Test ${component}`,\n      ]\n    );\n  }\n\n  /**\n   * Generate all tasks based on analysis\n   */\n  _generateAllTasks(analysis) {\n    const tasks = [];\n    const components = this._identifyComponents(analysis.objective);\n\n    // Add general tasks\n    tasks.push('Analyze requirements', 'Design architecture', 'Set up project structure');\n\n    // Add component tasks\n    components.forEach((component) => {\n      tasks.push(...this._generateComponentTasks(component));\n    });\n\n    // Add integration tasks\n    tasks.push('Integrate components', 'Write tests', 'Document solution');\n\n    return tasks;\n  }\n\n  /**\n   * Group workers by type\n   */\n  _groupWorkersByType(workers) {\n    const groups = {};\n\n    workers.forEach((worker) => {\n      if (!groups[worker.type]) {\n        groups[worker.type] = [];\n      }\n      groups[worker.type].push(worker);\n    });\n\n    return groups;\n  }\n\n  /**\n   * Optimize worker assignment for tasks\n   */\n  _optimizeWorkerAssignment(tasks, workerGroups) {\n    const assignments = {};\n\n    tasks.forEach((task) => {\n      const bestWorkerType = this._findBestWorkerType(task);\n      const availableWorkers = workerGroups[bestWorkerType] || [];\n\n      if (availableWorkers.length > 0) {\n        // Round-robin assignment within type\n        const workerIndex =\n          Object.keys(assignments).filter((t) => assignments[t].type === bestWorkerType).length %\n          availableWorkers.length;\n\n        assignments[task] = availableWorkers[workerIndex];\n      }\n    });\n\n    return assignments;\n  }\n\n  /**\n   * Find best worker type for task\n   */\n  _findBestWorkerType(task) {\n    const taskLower = task.toLowerCase();\n\n    if (taskLower.includes('research') || taskLower.includes('analyze')) {\n      return 'researcher';\n    }\n    if (taskLower.includes('design') || taskLower.includes('architect')) {\n      return 'architect';\n    }\n    if (taskLower.includes('implement') || taskLower.includes('code')) {\n      return 'coder';\n    }\n    if (taskLower.includes('test') || taskLower.includes('validate')) {\n      return 'tester';\n    }\n    if (taskLower.includes('optimize') || taskLower.includes('performance')) {\n      return 'optimizer';\n    }\n    if (taskLower.includes('document') || taskLower.includes('write')) {\n      return 'documenter';\n    }\n\n    return 'coder'; // Default\n  }\n\n  /**\n   * Identify decision points in objective\n   */\n  _identifyDecisionPoints(analysis) {\n    const decisionKeywords = [\n      'choose',\n      'select',\n      'decide',\n      'option',\n      'approach',\n      'strategy',\n      'method',\n      'solution',\n      'alternative',\n    ];\n\n    const decisions = [];\n    const components = this._identifyComponents(analysis.objective);\n\n    // Architecture decisions\n    if (components.length > 2) {\n      decisions.push('Architecture pattern selection');\n    }\n\n    // Technology decisions\n    components.forEach((component) => {\n      decisions.push(`Technology stack for ${component}`);\n    });\n\n    // Implementation decisions\n    if (analysis.complexity !== 'low') {\n      decisions.push('Implementation approach');\n    }\n\n    return decisions;\n  }\n\n  /**\n   * Make strategic decision\n   */\n  async makeDecision(topic, options, workerVotes = {}) {\n    const decision = {\n      topic,\n      options,\n      workerVotes,\n      queenVote: this._calculateQueenVote(topic, options, workerVotes),\n      timestamp: Date.now(),\n    };\n\n    // Calculate final decision with queen's weighted vote\n    const finalDecision = this._calculateFinalDecision(decision);\n\n    decision.result = finalDecision;\n    this.state.decisionsCount++;\n\n    // Learn from decision\n    if (this.config.type === 'adaptive') {\n      this._learnFromDecision(decision);\n    }\n\n    this.emit('decision:made', decision);\n    return decision;\n  }\n\n  /**\n   * Calculate queen's vote\n   */\n  _calculateQueenVote(topic, options, workerVotes) {\n    // Strategic queen focuses on long-term impact\n    if (this.config.type === 'strategic') {\n      return this._strategicVote(topic, options);\n    }\n\n    // Tactical queen focuses on immediate efficiency\n    if (this.config.type === 'tactical') {\n      return this._tacticalVote(topic, options, workerVotes);\n    }\n\n    // Adaptive queen learns from past decisions\n    if (this.config.type === 'adaptive') {\n      return this._adaptiveVote(topic, options, workerVotes);\n    }\n\n    return options[0]; // Default\n  }\n\n  /**\n   * Strategic voting logic\n   */\n  _strategicVote(topic, options) {\n    // Prefer options that mention long-term benefits\n    const strategicKeywords = ['scalable', 'maintainable', 'extensible', 'future'];\n\n    for (const option of options) {\n      const optionLower = option.toLowerCase();\n      if (strategicKeywords.some((keyword) => optionLower.includes(keyword))) {\n        return option;\n      }\n    }\n\n    return options[0];\n  }\n\n  /**\n   * Tactical voting logic\n   */\n  _tacticalVote(topic, options, workerVotes) {\n    // Follow majority if consensus is strong\n    const voteCounts = {};\n    Object.values(workerVotes).forEach((vote) => {\n      voteCounts[vote] = (voteCounts[vote] || 0) + 1;\n    });\n\n    const sorted = Object.entries(voteCounts).sort((a, b) => b[1] - a[1]);\n    if (sorted.length > 0 && sorted[0][1] > Object.keys(workerVotes).length * 0.6) {\n      return sorted[0][0];\n    }\n\n    // Otherwise, prefer quick implementation\n    const tacticalKeywords = ['simple', 'quick', 'fast', 'efficient'];\n\n    for (const option of options) {\n      const optionLower = option.toLowerCase();\n      if (tacticalKeywords.some((keyword) => optionLower.includes(keyword))) {\n        return option;\n      }\n    }\n\n    return options[0];\n  }\n\n  /**\n   * Adaptive voting logic\n   */\n  _adaptiveVote(topic, options, workerVotes) {\n    // Check if we've seen similar decisions before\n    const similarDecisions = Array.from(this.state.learningData.entries()).filter(\n      ([key, value]) => key.includes('decision') && value.topic.includes(topic),\n    );\n\n    if (similarDecisions.length > 0) {\n      // Use learned preferences\n      const successfulOptions = similarDecisions\n        .filter(([_, decision]) => decision.success)\n        .map(([_, decision]) => decision.result);\n\n      for (const option of options) {\n        if (successfulOptions.includes(option)) {\n          return option;\n        }\n      }\n    }\n\n    // Otherwise, explore new option\n    return options[Math.floor(Math.random() * options.length)];\n  }\n\n  /**\n   * Calculate final decision with weighted votes\n   */\n  _calculateFinalDecision(decision) {\n    const voteCounts = {};\n\n    // Count worker votes\n    Object.values(decision.workerVotes).forEach((vote) => {\n      voteCounts[vote] = (voteCounts[vote] || 0) + 1;\n    });\n\n    // Add queen's weighted vote\n    voteCounts[decision.queenVote] =\n      (voteCounts[decision.queenVote] || 0) + this.config.decisionWeight;\n\n    // Find winner\n    const sorted = Object.entries(voteCounts).sort((a, b) => b[1] - a[1]);\n    return sorted[0][0];\n  }\n\n  /**\n   * Learn from decision outcomes\n   */\n  _learnFromDecision(decision) {\n    const key = `decision-${this.state.decisionsCount}`;\n    this.state.learningData.set(key, {\n      ...decision,\n      success: true, // Will be updated based on outcome\n    });\n  }\n\n  /**\n   * Update decision outcome\n   */\n  updateDecisionOutcome(decisionId, success, metrics = {}) {\n    const key = `decision-${decisionId}`;\n    const decision = this.state.learningData.get(key);\n\n    if (decision) {\n      decision.success = success;\n      decision.metrics = metrics;\n      this.emit('learning:updated', { decisionId, success, metrics });\n    }\n  }\n\n  /**\n   * Get queen status\n   */\n  getStatus() {\n    return {\n      type: this.config.type,\n      name: this.config.name,\n      status: this.state.status,\n      decisionsCount: this.state.decisionsCount,\n      strategiesExecuted: this.state.strategiesExecuted,\n      currentStrategy: this.state.currentStrategy,\n      learningDataSize: this.state.learningData.size,\n    };\n  }\n}\n"],"names":["EventEmitter","QUEEN_TYPES","strategic","name","traits","decisionWeight","consensusThreshold","tactical","adaptive","QueenCoordinator","config","swarmId","type","objective","state","status","decisionsCount","strategiesExecuted","learningData","Map","currentStrategy","taskQueue","workerAssignments","strategies","divide_and_conquer","_divideAndConquerStrategy","bind","parallel_execution","_parallelExecutionStrategy","sequential_refinement","_sequentialRefinementStrategy","consensus_driven","_consensusDrivenStrategy","adaptive_learning","_adaptiveLearningStrategy","_initialize","emit","analyzeObjective","analysis","complexity","_assessComplexity","requiredCapabilities","_identifyRequiredCapabilities","estimatedTasks","_estimateTaskCount","recommendedStrategy","_selectStrategy","resourceRequirements","_estimateResources","set","complexityFactors","length","keywords","_countComplexityKeywords","components","_identifyComponents","score","Object","values","reduce","a","b","text","complexKeywords","lowerText","toLowerCase","filter","keyword","includes","componentKeywords","backend","frontend","data","auth","testing","deployment","monitoring","lowerObjective","entries","forEach","component","some","push","capabilities","Set","capabilityMap","caps","cap","add","Array","from","baseTaskCount","low","medium","high","very_high","taskCount","minWorkers","Math","min","ceil","optimalWorkers","estimatedTime","memoryRequirement","createExecutionPlan","workers","strategy","Error","plan","phases","tasks","w","parallel","_generateComponentTasks","estimatedDuration","parallelism","_generateAllTasks","workerGroups","_groupWorkersByType","workerAssignment","_optimizeWorkerAssignment","iterations","i","requiresConsensus","iterative","decisionPoints","_identifyDecisionPoints","decision","index","consensusRequired","learningPhases","learning","applyLearning","learningEnabled","taskTemplates","groups","worker","assignments","task","bestWorkerType","_findBestWorkerType","availableWorkers","workerIndex","keys","t","taskLower","decisionKeywords","decisions","makeDecision","topic","options","workerVotes","queenVote","_calculateQueenVote","timestamp","Date","now","finalDecision","_calculateFinalDecision","result","_learnFromDecision","_strategicVote","_tacticalVote","_adaptiveVote","strategicKeywords","option","optionLower","voteCounts","vote","sorted","sort","tacticalKeywords","similarDecisions","key","value","successfulOptions","_","success","map","floor","random","updateDecisionOutcome","decisionId","metrics","get","getStatus","learningDataSize","size"],"mappings":"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"}