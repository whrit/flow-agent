{"version":3,"sources":["../../../../../src/cli/simple-commands/hive-mind/communication.js"],"sourcesContent":["/**\n * Swarm Communication System for Hive Mind\n * Handles inter-agent messaging and coordination\n */\n\nimport EventEmitter from 'events';\nimport crypto from 'crypto';\n\n/**\n * Message types and their priorities\n */\nconst MESSAGE_TYPES = {\n  command: { priority: 1, reliable: true, encrypted: true },\n  query: { priority: 2, reliable: true, encrypted: false },\n  response: { priority: 2, reliable: true, encrypted: false },\n  broadcast: { priority: 3, reliable: false, encrypted: false },\n  heartbeat: { priority: 4, reliable: false, encrypted: false },\n  consensus: { priority: 1, reliable: true, encrypted: true },\n  task: { priority: 2, reliable: true, encrypted: false },\n  result: { priority: 2, reliable: true, encrypted: false },\n  error: { priority: 1, reliable: true, encrypted: false },\n  sync: { priority: 3, reliable: true, encrypted: false },\n};\n\n/**\n * Communication protocols\n */\nconst PROTOCOLS = {\n  direct: 'direct', // Point-to-point\n  broadcast: 'broadcast', // One-to-all\n  multicast: 'multicast', // One-to-many\n  gossip: 'gossip', // Epidemic spread\n  consensus: 'consensus', // Byzantine agreement\n};\n\n/**\n * SwarmCommunication class\n */\nexport class SwarmCommunication extends EventEmitter {\n  constructor(config = {}) {\n    super();\n\n    this.config = {\n      swarmId: config.swarmId,\n      encryption: config.encryption || false,\n      maxRetries: config.maxRetries || 3,\n      timeout: config.timeout || 5000,\n      bufferSize: config.bufferSize || 1000,\n      gossipFanout: config.gossipFanout || 3,\n      consensusQuorum: config.consensusQuorum || 0.67,\n      ...config,\n    };\n\n    this.state = {\n      agents: new Map(), // Connected agents\n      channels: new Map(), // Communication channels\n      messageBuffer: [], // Message queue\n      messageHistory: new Map(), // Sent messages\n      metrics: {\n        sent: 0,\n        received: 0,\n        failed: 0,\n        encrypted: 0,\n        latency: [],\n      },\n    };\n\n    this.encryptionKey = this.config.encryption ? crypto.randomBytes(32) : null;\n\n    this._initialize();\n  }\n\n  /**\n   * Initialize communication system\n   */\n  _initialize() {\n    // Set up message processing\n    this.messageProcessor = setInterval(() => {\n      this._processMessageBuffer();\n    }, 100);\n\n    // Set up heartbeat\n    this.heartbeatTimer = setInterval(() => {\n      this._sendHeartbeats();\n    }, 10000);\n\n    this.emit('communication:initialized', { swarmId: this.config.swarmId });\n  }\n\n  /**\n   * Register agent in communication network\n   */\n  registerAgent(agentId, metadata = {}) {\n    const agent = {\n      id: agentId,\n      status: 'online',\n      lastSeen: Date.now(),\n      metadata,\n      messageCount: 0,\n      channel: this._createChannel(agentId),\n    };\n\n    this.state.agents.set(agentId, agent);\n\n    // Announce new agent to swarm\n    this.broadcast(\n      {\n        type: 'agent_joined',\n        agentId,\n        metadata,\n      },\n      'sync',\n    );\n\n    this.emit('agent:registered', agent);\n    return agent;\n  }\n\n  /**\n   * Unregister agent from network\n   */\n  unregisterAgent(agentId) {\n    const agent = this.state.agents.get(agentId);\n    if (!agent) return;\n\n    // Close channel\n    const channel = this.state.channels.get(agentId);\n    if (channel) {\n      channel.close();\n      this.state.channels.delete(agentId);\n    }\n\n    this.state.agents.delete(agentId);\n\n    // Announce agent departure\n    this.broadcast(\n      {\n        type: 'agent_left',\n        agentId,\n      },\n      'sync',\n    );\n\n    this.emit('agent:unregistered', { agentId });\n  }\n\n  /**\n   * Send direct message to agent\n   */\n  async send(toAgentId, message, type = 'query') {\n    const messageId = this._generateMessageId();\n    const timestamp = Date.now();\n\n    const envelope = {\n      id: messageId,\n      from: 'system', // Will be set by sender\n      to: toAgentId,\n      type,\n      timestamp,\n      message,\n      protocol: PROTOCOLS.direct,\n    };\n\n    // Encrypt if needed\n    if (this.config.encryption && MESSAGE_TYPES[type]?.encrypted) {\n      envelope.message = this._encrypt(message);\n      envelope.encrypted = true;\n      this.state.metrics.encrypted++;\n    }\n\n    // Add to buffer\n    this._addToBuffer(envelope);\n\n    // Track message\n    this.state.messageHistory.set(messageId, {\n      ...envelope,\n      status: 'pending',\n      attempts: 0,\n    });\n\n    this.state.metrics.sent++;\n\n    // Return promise that resolves when message is acknowledged\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Message timeout: ${messageId}`));\n      }, this.config.timeout);\n\n      this.once(`ack:${messageId}`, () => {\n        clearTimeout(timeout);\n        resolve({ messageId, delivered: true });\n      });\n\n      this.once(`nack:${messageId}`, (error) => {\n        clearTimeout(timeout);\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Broadcast message to all agents\n   */\n  broadcast(message, type = 'broadcast') {\n    const messageId = this._generateMessageId();\n    const timestamp = Date.now();\n\n    const envelope = {\n      id: messageId,\n      from: 'system',\n      to: '*',\n      type,\n      timestamp,\n      message,\n      protocol: PROTOCOLS.broadcast,\n    };\n\n    // Broadcasts are typically not encrypted\n    this._addToBuffer(envelope);\n\n    this.state.metrics.sent++;\n\n    this.emit('message:broadcast', envelope);\n\n    return { messageId, recipients: this.state.agents.size };\n  }\n\n  /**\n   * Multicast message to specific agents\n   */\n  multicast(agentIds, message, type = 'query') {\n    const messageId = this._generateMessageId();\n    const timestamp = Date.now();\n\n    const envelopes = agentIds.map((agentId) => ({\n      id: `${messageId}-${agentId}`,\n      from: 'system',\n      to: agentId,\n      type,\n      timestamp,\n      message,\n      protocol: PROTOCOLS.multicast,\n      groupId: messageId,\n    }));\n\n    envelopes.forEach((envelope) => this._addToBuffer(envelope));\n\n    this.state.metrics.sent += envelopes.length;\n\n    return { messageId, recipients: agentIds.length };\n  }\n\n  /**\n   * Gossip protocol for epidemic spread\n   */\n  gossip(message, type = 'sync') {\n    const messageId = this._generateMessageId();\n    const timestamp = Date.now();\n\n    // Select random agents for initial spread\n    const agents = Array.from(this.state.agents.keys());\n    const selected = this._selectRandomAgents(agents, this.config.gossipFanout);\n\n    selected.forEach((agentId) => {\n      const envelope = {\n        id: `${messageId}-${agentId}`,\n        from: 'system',\n        to: agentId,\n        type,\n        timestamp,\n        message: {\n          ...message,\n          _gossip: {\n            originalId: messageId,\n            hops: 0,\n            seen: [],\n          },\n        },\n        protocol: PROTOCOLS.gossip,\n      };\n\n      this._addToBuffer(envelope);\n    });\n\n    this.state.metrics.sent += selected.length;\n\n    return { messageId, initialTargets: selected };\n  }\n\n  /**\n   * Byzantine consensus protocol\n   */\n  async consensus(proposal, validators = []) {\n    const consensusId = this._generateMessageId();\n    const timestamp = Date.now();\n\n    // If no validators specified, use all online agents\n    if (validators.length === 0) {\n      validators = Array.from(this.state.agents.keys()).filter(\n        (id) => this.state.agents.get(id).status === 'online',\n      );\n    }\n\n    const votes = new Map();\n    const votePromises = [];\n\n    // Phase 1: Proposal\n    validators.forEach((agentId) => {\n      const envelope = {\n        id: `${consensusId}-propose-${agentId}`,\n        from: 'system',\n        to: agentId,\n        type: 'consensus',\n        timestamp,\n        message: {\n          phase: 'propose',\n          consensusId,\n          proposal,\n        },\n        protocol: PROTOCOLS.consensus,\n      };\n\n      this._addToBuffer(envelope);\n\n      // Create promise for vote\n      const votePromise = new Promise((resolve) => {\n        this.once(`vote:${consensusId}:${agentId}`, (vote) => {\n          votes.set(agentId, vote);\n          resolve({ agentId, vote });\n        });\n\n        // Timeout for vote\n        setTimeout(() => {\n          if (!votes.has(agentId)) {\n            votes.set(agentId, null);\n            resolve({ agentId, vote: null });\n          }\n        }, this.config.timeout);\n      });\n\n      votePromises.push(votePromise);\n    });\n\n    // Wait for all votes\n    await Promise.all(votePromises);\n\n    // Phase 2: Tally and decide\n    const voteCount = {};\n    let totalVotes = 0;\n\n    votes.forEach((vote) => {\n      if (vote !== null) {\n        voteCount[vote] = (voteCount[vote] || 0) + 1;\n        totalVotes++;\n      }\n    });\n\n    // Check if consensus reached\n    const sortedVotes = Object.entries(voteCount).sort((a, b) => b[1] - a[1]);\n    const winner = sortedVotes[0];\n    const consensusReached = winner && winner[1] / validators.length >= this.config.consensusQuorum;\n\n    const result = {\n      consensusId,\n      proposal,\n      validators: validators.length,\n      votes: Object.fromEntries(votes),\n      voteCount,\n      winner: consensusReached ? winner[0] : null,\n      consensusReached,\n      quorum: this.config.consensusQuorum,\n      timestamp: Date.now(),\n    };\n\n    // Phase 3: Announce result\n    this.broadcast(\n      {\n        phase: 'result',\n        consensusId,\n        result,\n      },\n      'consensus',\n    );\n\n    this.emit('consensus:completed', result);\n\n    return result;\n  }\n\n  /**\n   * Handle incoming message\n   */\n  handleMessage(envelope) {\n    this.state.metrics.received++;\n\n    // Update agent last seen\n    const agent = this.state.agents.get(envelope.from);\n    if (agent) {\n      agent.lastSeen = Date.now();\n      agent.messageCount++;\n    }\n\n    // Decrypt if needed\n    if (envelope.encrypted && this.config.encryption) {\n      try {\n        envelope.message = this._decrypt(envelope.message);\n      } catch (error) {\n        this.emit('error', { type: 'decryption_failed', envelope, error });\n        return;\n      }\n    }\n\n    // Process based on protocol\n    switch (envelope.protocol) {\n      case PROTOCOLS.direct:\n        this._handleDirectMessage(envelope);\n        break;\n\n      case PROTOCOLS.broadcast:\n        this._handleBroadcastMessage(envelope);\n        break;\n\n      case PROTOCOLS.multicast:\n        this._handleMulticastMessage(envelope);\n        break;\n\n      case PROTOCOLS.gossip:\n        this._handleGossipMessage(envelope);\n        break;\n\n      case PROTOCOLS.consensus:\n        this._handleConsensusMessage(envelope);\n        break;\n\n      default:\n        this.emit('error', { type: 'unknown_protocol', envelope });\n    }\n\n    // Emit general message event\n    this.emit('message:received', envelope);\n  }\n\n  /**\n   * Handle direct message\n   */\n  _handleDirectMessage(envelope) {\n    // Send acknowledgment\n    this._sendAck(envelope.id, envelope.from);\n\n    // Emit specific event for message type\n    this.emit(`message:${envelope.type}`, envelope);\n  }\n\n  /**\n   * Handle broadcast message\n   */\n  _handleBroadcastMessage(envelope) {\n    // No ack for broadcasts\n    this.emit(`broadcast:${envelope.type}`, envelope);\n  }\n\n  /**\n   * Handle multicast message\n   */\n  _handleMulticastMessage(envelope) {\n    // Send ack to original sender\n    this._sendAck(envelope.groupId, envelope.from);\n\n    this.emit(`multicast:${envelope.type}`, envelope);\n  }\n\n  /**\n   * Handle gossip message\n   */\n  _handleGossipMessage(envelope) {\n    const gossipData = envelope.message._gossip;\n\n    // Check if we've seen this message\n    if (gossipData.seen.includes(this.config.swarmId)) {\n      return;\n    }\n\n    // Mark as seen\n    gossipData.seen.push(this.config.swarmId);\n    gossipData.hops++;\n\n    // Process the message\n    this.emit(`gossip:${envelope.type}`, envelope);\n\n    // Continue spreading if hop count is low\n    if (gossipData.hops < 3) {\n      const agents = Array.from(this.state.agents.keys()).filter(\n        (id) => !gossipData.seen.includes(id),\n      );\n\n      const selected = this._selectRandomAgents(agents, this.config.gossipFanout);\n\n      selected.forEach((agentId) => {\n        const newEnvelope = {\n          ...envelope,\n          id: `${gossipData.originalId}-${agentId}-hop${gossipData.hops}`,\n          to: agentId,\n          from: this.config.swarmId,\n        };\n\n        this._addToBuffer(newEnvelope);\n      });\n    }\n  }\n\n  /**\n   * Handle consensus message\n   */\n  _handleConsensusMessage(envelope) {\n    const { phase, consensusId } = envelope.message;\n\n    switch (phase) {\n      case 'propose':\n        // Agent should vote on proposal\n        this.emit('consensus:proposal', envelope);\n        break;\n\n      case 'vote':\n        // Collect vote\n        this.emit(`vote:${consensusId}:${envelope.from}`, envelope.message.vote);\n        break;\n\n      case 'result':\n        // Consensus result announced\n        this.emit('consensus:result', envelope.message.result);\n        break;\n    }\n  }\n\n  /**\n   * Send acknowledgment\n   */\n  _sendAck(messageId, toAgent) {\n    const ack = {\n      id: `ack-${messageId}`,\n      from: this.config.swarmId,\n      to: toAgent,\n      type: 'ack',\n      timestamp: Date.now(),\n      message: { originalId: messageId },\n      protocol: PROTOCOLS.direct,\n    };\n\n    this._addToBuffer(ack);\n  }\n\n  /**\n   * Create communication channel\n   */\n  _createChannel(agentId) {\n    // In production, this would create actual network channels\n    // For now, we simulate with event emitters\n    const channel = new EventEmitter();\n\n    channel.send = (message) => {\n      this.emit(`channel:${agentId}`, message);\n    };\n\n    channel.close = () => {\n      channel.removeAllListeners();\n    };\n\n    this.state.channels.set(agentId, channel);\n\n    return channel;\n  }\n\n  /**\n   * Add message to buffer\n   */\n  _addToBuffer(envelope) {\n    this.state.messageBuffer.push(envelope);\n\n    // Limit buffer size\n    if (this.state.messageBuffer.length > this.config.bufferSize) {\n      const dropped = this.state.messageBuffer.shift();\n      this.emit('message:dropped', dropped);\n    }\n  }\n\n  /**\n   * Process message buffer\n   */\n  _processMessageBuffer() {\n    const toProcess = this.state.messageBuffer.splice(0, 10);\n\n    toProcess.forEach((envelope) => {\n      // Simulate network delay\n      setTimeout(() => {\n        if (envelope.to === '*') {\n          // Broadcast to all agents\n          this.state.agents.forEach((agent) => {\n            this.emit(`deliver:${agent.id}`, envelope);\n          });\n        } else {\n          // Direct delivery\n          this.emit(`deliver:${envelope.to}`, envelope);\n        }\n\n        // Update message history\n        const history = this.state.messageHistory.get(envelope.id);\n        if (history) {\n          history.status = 'sent';\n          history.sentAt = Date.now();\n        }\n      }, Math.random() * 100);\n    });\n  }\n\n  /**\n   * Send heartbeats to all agents\n   */\n  _sendHeartbeats() {\n    const now = Date.now();\n\n    this.state.agents.forEach((agent, agentId) => {\n      // Check if agent is still responsive\n      if (now - agent.lastSeen > 30000) {\n        agent.status = 'offline';\n        this.emit('agent:offline', { agentId });\n      }\n\n      // Send heartbeat\n      const heartbeat = {\n        id: `heartbeat-${now}-${agentId}`,\n        from: 'system',\n        to: agentId,\n        type: 'heartbeat',\n        timestamp: now,\n        message: { timestamp: now },\n        protocol: PROTOCOLS.direct,\n      };\n\n      this._addToBuffer(heartbeat);\n    });\n  }\n\n  /**\n   * Select random agents\n   */\n  _selectRandomAgents(agents, count) {\n    const shuffled = [...agents].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, Math.min(count, agents.length));\n  }\n\n  /**\n   * Generate unique message ID\n   */\n  _generateMessageId() {\n    return `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Encrypt message\n   */\n  _encrypt(data) {\n    if (!this.encryptionKey) return data;\n\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-cbc', this.encryptionKey, iv);\n\n    let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n\n    return {\n      iv: iv.toString('hex'),\n      data: encrypted,\n    };\n  }\n\n  /**\n   * Decrypt message\n   */\n  _decrypt(encrypted) {\n    if (!this.encryptionKey) return encrypted;\n\n    const iv = Buffer.from(encrypted.iv, 'hex');\n    const decipher = crypto.createDecipheriv('aes-256-cbc', this.encryptionKey, iv);\n\n    let decrypted = decipher.update(encrypted.data, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return JSON.parse(decrypted);\n  }\n\n  /**\n   * Get communication statistics\n   */\n  getStatistics() {\n    const avgLatency =\n      this.state.metrics.latency.length > 0\n        ? this.state.metrics.latency.reduce((a, b) => a + b, 0) / this.state.metrics.latency.length\n        : 0;\n\n    return {\n      agents: {\n        total: this.state.agents.size,\n        online: Array.from(this.state.agents.values()).filter((a) => a.status === 'online').length,\n        offline: Array.from(this.state.agents.values()).filter((a) => a.status === 'offline')\n          .length,\n      },\n      messages: {\n        sent: this.state.metrics.sent,\n        received: this.state.metrics.received,\n        failed: this.state.metrics.failed,\n        encrypted: this.state.metrics.encrypted,\n        buffered: this.state.messageBuffer.length,\n      },\n      performance: {\n        avgLatency: avgLatency.toFixed(2),\n        successRate:\n          this.state.metrics.sent > 0\n            ? (\n                ((this.state.metrics.sent - this.state.metrics.failed) / this.state.metrics.sent) *\n                100\n              ).toFixed(2)\n            : 100,\n      },\n    };\n  }\n\n  /**\n   * Close communication system\n   */\n  close() {\n    // Clear timers\n    if (this.messageProcessor) clearInterval(this.messageProcessor);\n    if (this.heartbeatTimer) clearInterval(this.heartbeatTimer);\n\n    // Close all channels\n    this.state.channels.forEach((channel) => channel.close());\n\n    this.emit('communication:closed');\n  }\n}\n"],"names":["EventEmitter","crypto","MESSAGE_TYPES","command","priority","reliable","encrypted","query","response","broadcast","heartbeat","consensus","task","result","error","sync","PROTOCOLS","direct","multicast","gossip","SwarmCommunication","config","swarmId","encryption","maxRetries","timeout","bufferSize","gossipFanout","consensusQuorum","state","agents","Map","channels","messageBuffer","messageHistory","metrics","sent","received","failed","latency","encryptionKey","randomBytes","_initialize","messageProcessor","setInterval","_processMessageBuffer","heartbeatTimer","_sendHeartbeats","emit","registerAgent","agentId","metadata","agent","id","status","lastSeen","Date","now","messageCount","channel","_createChannel","set","type","unregisterAgent","get","close","delete","send","toAgentId","message","messageId","_generateMessageId","timestamp","envelope","from","to","protocol","_encrypt","_addToBuffer","attempts","Promise","resolve","reject","setTimeout","Error","once","clearTimeout","delivered","recipients","size","agentIds","envelopes","map","groupId","forEach","length","Array","keys","selected","_selectRandomAgents","_gossip","originalId","hops","seen","initialTargets","proposal","validators","consensusId","filter","votes","votePromises","phase","votePromise","vote","has","push","all","voteCount","totalVotes","sortedVotes","Object","entries","sort","a","b","winner","consensusReached","fromEntries","quorum","handleMessage","_decrypt","_handleDirectMessage","_handleBroadcastMessage","_handleMulticastMessage","_handleGossipMessage","_handleConsensusMessage","_sendAck","gossipData","includes","newEnvelope","toAgent","ack","removeAllListeners","dropped","shift","toProcess","splice","history","sentAt","Math","random","count","shuffled","slice","min","toString","substr","data","iv","cipher","createCipheriv","update","JSON","stringify","final","Buffer","decipher","createDecipheriv","decrypted","parse","getStatistics","avgLatency","reduce","total","online","values","offline","messages","buffered","performance","toFixed","successRate","clearInterval"],"mappings":"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"}