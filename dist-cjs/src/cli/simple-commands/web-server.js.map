{"version":3,"sources":["../../../../src/cli/simple-commands/web-server.js"],"sourcesContent":["/**\n * Web Server for Claude Code Console\n * Serves the web-based UI and provides WebSocket communication\n */\n\nimport { createServer } from 'http';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport { readFileSync, existsSync } from 'fs';\nimport { WebSocketServer } from 'ws';\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { compat } from '../runtime-detector.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport class ClaudeCodeWebServer {\n  constructor(port = 3000) {\n    this.port = port;\n    this.server = null;\n    this.wss = null;\n    this.connections = new Set();\n    this.uiPath = join(__dirname, '../../ui/console');\n    this.isRunning = false;\n  }\n\n  async createAPIRoutes() {\n    const express = await import('express');\n    const router = express.Router();\n\n    // Health check endpoint\n    router.get('/health', (req, res) => {\n      res.json({ status: 'ok', uptime: process.uptime() });\n    });\n\n    // System status endpoint\n    router.get('/status', (req, res) => {\n      res.json({\n        connections: this.connections.size,\n        isRunning: this.isRunning,\n        port: this.port,\n      });\n    });\n\n    return router;\n  }\n\n  /**\n   * Start the web server\n   */\n  async start() {\n    if (this.isRunning) {\n      printWarning('Web server is already running');\n      return;\n    }\n\n    try {\n      // Create HTTP server with express\n      const express = await import('express');\n      const app = express.default();\n\n      // Enable CORS\n      app.use((req, res, next) => {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n        res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n        next();\n      });\n\n      // Serve static files\n      app.use('/console', express.static(this.uiPath));\n      app.use('/api', await this.createAPIRoutes());\n\n      // Default route redirects to console\n      app.get('/', (req, res) => {\n        res.redirect('/console');\n      });\n\n      this.server = createServer(app);\n\n      // Create WebSocket server\n      this.wss = new WebSocketServer({\n        server: this.server,\n        path: '/ws',\n      });\n\n      this.setupWebSocketServer();\n\n      // Start listening\n      await new Promise((resolve, reject) => {\n        this.server.listen(this.port, (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n\n      this.isRunning = true;\n      printSuccess(`🌐 Claude Code Web UI started successfully`);\n      console.log(`📍 Web Interface: http://localhost:${this.port}/console`);\n      console.log(`🔗 WebSocket: ws://localhost:${this.port}/ws`);\n      console.log(`📁 Serving UI from: ${this.uiPath}`);\n      console.log();\n    } catch (error) {\n      printError(`Failed to start web server: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the web server\n   */\n  async stop() {\n    if (!this.isRunning) return;\n\n    // Close all WebSocket connections\n    this.connections.forEach((ws) => {\n      if (ws.readyState === ws.OPEN) {\n        ws.close(1000, 'Server shutting down');\n      }\n    });\n\n    // Close WebSocket server\n    if (this.wss) {\n      this.wss.close();\n    }\n\n    // Close HTTP server\n    if (this.server) {\n      await new Promise((resolve) => {\n        this.server.close(resolve);\n      });\n    }\n\n    this.isRunning = false;\n    printInfo('Web server stopped');\n  }\n\n  /**\n   * Handle HTTP requests\n   */\n  handleRequest(req, res) {\n    const url = req.url;\n\n    // CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (req.method === 'OPTIONS') {\n      res.writeHead(200);\n      res.end();\n      return;\n    }\n\n    // Route handling\n    if (url === '/' || url === '/console' || url === '/console/') {\n      this.serveConsoleHTML(res);\n    } else if (url.startsWith('/console/')) {\n      // Remove /console prefix and serve static files\n      const filePath = url.substring('/console/'.length);\n      this.serveStaticFile(res, filePath);\n    } else if (url === '/health') {\n      this.handleHealthCheck(res);\n    } else if (url === '/api/status') {\n      this.handleStatusAPI(res);\n    } else if (url === '/favicon.ico') {\n      this.handleFavicon(res);\n    } else {\n      this.handle404(res);\n    }\n  }\n\n  /**\n   * Serve the console HTML with corrected paths\n   */\n  serveConsoleHTML(res) {\n    const filePath = join(this.uiPath, 'index.html');\n\n    if (!existsSync(filePath)) {\n      this.handle404(res);\n      return;\n    }\n\n    try {\n      let content = readFileSync(filePath, 'utf8');\n\n      // Fix relative paths to be relative to /console/\n      content = content.replace(/href=\"styles\\//g, 'href=\"/console/styles/');\n      content = content.replace(/src=\"js\\//g, 'src=\"/console/js/');\n\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(content);\n    } catch (error) {\n      this.handle500(res, error);\n    }\n  }\n\n  /**\n   * Serve a specific file from the UI directory\n   */\n  serveFile(res, filename, contentType) {\n    const filePath = join(this.uiPath, filename);\n\n    if (!existsSync(filePath)) {\n      this.handle404(res);\n      return;\n    }\n\n    try {\n      const content = readFileSync(filePath);\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content);\n    } catch (error) {\n      this.handle500(res, error);\n    }\n  }\n\n  /**\n   * Serve static files (CSS, JS, etc.)\n   */\n  serveStaticFile(res, requestPath) {\n    // Security: prevent directory traversal\n    if (requestPath.includes('..') || requestPath.includes('\\0')) {\n      this.handle403(res);\n      return;\n    }\n\n    const filePath = join(this.uiPath, requestPath);\n\n    if (!existsSync(filePath)) {\n      this.handle404(res);\n      return;\n    }\n\n    // Determine content type\n    const contentType = this.getContentType(requestPath);\n\n    try {\n      const content = readFileSync(filePath);\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content);\n    } catch (error) {\n      this.handle500(res, error);\n    }\n  }\n\n  /**\n   * Get content type based on file extension\n   */\n  getContentType(filePath) {\n    const ext = filePath.split('.').pop().toLowerCase();\n\n    const contentTypes = {\n      html: 'text/html',\n      css: 'text/css',\n      js: 'application/javascript',\n      json: 'application/json',\n      png: 'image/png',\n      jpg: 'image/jpeg',\n      jpeg: 'image/jpeg',\n      gif: 'image/gif',\n      svg: 'image/svg+xml',\n      ico: 'image/x-icon',\n      woff: 'font/woff',\n      woff2: 'font/woff2',\n      ttf: 'font/ttf',\n      eot: 'application/vnd.ms-fontobject',\n    };\n\n    return contentTypes[ext] || 'text/plain';\n  }\n\n  /**\n   * Handle health check endpoint\n   */\n  handleHealthCheck(res) {\n    const health = {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      connections: this.connections.size,\n      memory: process.memoryUsage(),\n      platform: compat.platform,\n    };\n\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(health, null, 2));\n  }\n\n  /**\n   * Handle status API endpoint\n   */\n  handleStatusAPI(res) {\n    const status = {\n      server: {\n        running: this.isRunning,\n        port: this.port,\n        connections: this.connections.size,\n      },\n      claudeFlow: {\n        initialized: true,\n        version: '1.0.72',\n      },\n      runtime: compat.runtime,\n      platform: compat.platform,\n    };\n\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(status, null, 2));\n  }\n\n  /**\n   * Handle favicon request\n   */\n  handleFavicon(res) {\n    // Simple SVG favicon\n    const favicon = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n      <rect width=\"32\" height=\"32\" fill=\"#1f6feb\"/>\n      <text x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"white\" font-family=\"monospace\" font-size=\"18\">⚡</text>\n    </svg>`;\n\n    res.writeHead(200, { 'Content-Type': 'image/svg+xml' });\n    res.end(favicon);\n  }\n\n  /**\n   * Handle 403 Forbidden\n   */\n  handle403(res) {\n    res.writeHead(403, { 'Content-Type': 'text/plain' });\n    res.end('403 Forbidden');\n  }\n\n  /**\n   * Handle 404 Not Found\n   */\n  handle404(res) {\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('404 Not Found');\n  }\n\n  /**\n   * Handle 500 Internal Server Error\n   */\n  handle500(res, error) {\n    console.error('Server error:', error);\n    res.writeHead(500, { 'Content-Type': 'text/plain' });\n    res.end('500 Internal Server Error');\n  }\n\n  /**\n   * Setup WebSocket server\n   */\n  setupWebSocketServer() {\n    this.wss.on('connection', (ws, req) => {\n      this.handleWebSocketConnection(ws, req);\n    });\n\n    this.wss.on('error', (error) => {\n      console.error('WebSocket server error:', error);\n    });\n  }\n\n  /**\n   * Handle new WebSocket connection\n   */\n  handleWebSocketConnection(ws, req) {\n    const clientIP = req.socket.remoteAddress;\n    console.log(`🔗 New WebSocket connection from ${clientIP}`);\n\n    this.connections.add(ws);\n\n    // Send welcome message\n    this.sendMessage(ws, {\n      jsonrpc: '2.0',\n      method: 'connection/established',\n      params: {\n        server: 'claude-flow-web-server',\n        version: '2.0.0',\n        timestamp: new Date().toISOString(),\n      },\n    });\n\n    // Handle messages\n    ws.on('message', (data) => {\n      this.handleWebSocketMessage(ws, data);\n    });\n\n    // Handle close\n    ws.on('close', (code, reason) => {\n      console.log(`❌ WebSocket connection closed: ${code} ${reason}`);\n      this.connections.delete(ws);\n    });\n\n    // Handle error\n    ws.on('error', (error) => {\n      console.error('WebSocket connection error:', error);\n      this.connections.delete(ws);\n    });\n\n    // Setup ping/pong for connection health\n    ws.on('pong', () => {\n      ws.isAlive = true;\n    });\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  handleWebSocketMessage(ws, data) {\n    try {\n      const message = JSON.parse(data.toString());\n      console.log('Received WebSocket message:', message.method, message.id);\n\n      // Handle different message types\n      switch (message.method) {\n        case 'initialize':\n          this.handleInitialize(ws, message);\n          break;\n\n        case 'ping':\n          this.handlePing(ws, message);\n          break;\n\n        case 'tools/call':\n          this.handleToolCall(ws, message);\n          break;\n\n        case 'tools/list':\n          console.log('Handling tools/list request');\n          this.handleToolsList(ws, message);\n          break;\n\n        default:\n          console.log('Unknown method:', message.method);\n          this.handleUnknownMethod(ws, message);\n      }\n    } catch (error) {\n      console.error('Error processing WebSocket message:', error);\n      this.sendError(ws, null, 'Invalid JSON message');\n    }\n  }\n\n  /**\n   * Handle initialize request\n   */\n  handleInitialize(ws, message) {\n    const response = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: {\n        protocolVersion: { major: 2024, minor: 11, patch: 5 },\n        serverInfo: {\n          name: 'claude-flow-web-server',\n          version: '2.0.0',\n        },\n        capabilities: {\n          logging: { level: 'info' },\n          tools: { listChanged: true },\n          resources: { listChanged: false, subscribe: false },\n          prompts: { listChanged: false },\n        },\n      },\n    };\n\n    this.sendMessage(ws, response);\n  }\n\n  /**\n   * Handle ping request\n   */\n  handlePing(ws, message) {\n    this.sendMessage(ws, {\n      jsonrpc: '2.0',\n      method: 'pong',\n      params: {\n        timestamp: Date.now(),\n        original: message.params,\n      },\n    });\n  }\n\n  /**\n   * Handle tool call request\n   */\n  handleToolCall(ws, message) {\n    const { name, arguments: args } = message.params;\n\n    // Mock tool execution for demonstration\n    const result = this.executeMockTool(name, args);\n\n    const response = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: {\n        content: [\n          {\n            type: 'text',\n            text: result,\n          },\n        ],\n      },\n    };\n\n    this.sendMessage(ws, response);\n  }\n\n  /**\n   * Handle tools list request\n   */\n  handleToolsList(ws, message) {\n    const tools = [\n      {\n        name: 'claude-flow/execute',\n        description: 'Execute Claude Flow commands (start, stop, status, modes)',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            command: { type: 'string', description: 'Command to execute' },\n            args: { type: 'object', description: 'Command arguments' },\n          },\n          required: ['command'],\n        },\n      },\n      {\n        name: 'swarm/orchestrate',\n        description: 'Manage swarm orchestration (create, start, stop, status)',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            action: { type: 'string', description: 'Action to perform' },\n            args: { type: 'array', description: 'Action arguments' },\n          },\n          required: ['action'],\n        },\n      },\n      {\n        name: 'system/health',\n        description: 'Get comprehensive system health status',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            detailed: { type: 'boolean', description: 'Include detailed metrics' },\n          },\n        },\n      },\n      {\n        name: 'memory/manage',\n        description: 'Manage persistent memory and storage',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            operation: { type: 'string', description: 'Operation: store, retrieve, list, delete' },\n            key: { type: 'string', description: 'Memory key' },\n            value: { type: 'string', description: 'Value to store' },\n          },\n          required: ['operation'],\n        },\n      },\n      {\n        name: 'agents/manage',\n        description: 'Manage AI agents and their coordination',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            action: { type: 'string', description: 'Action: list, create, start, stop, status' },\n            agentType: { type: 'string', description: 'Agent type for creation' },\n            agentId: { type: 'string', description: 'Agent ID for operations' },\n          },\n          required: ['action'],\n        },\n      },\n      {\n        name: 'sparc/execute',\n        description: 'Execute SPARC mode operations',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            mode: { type: 'string', description: 'SPARC mode: coder, architect, analyzer, etc.' },\n            task: { type: 'string', description: 'Task description' },\n            options: { type: 'object', description: 'Additional options' },\n          },\n          required: ['mode'],\n        },\n      },\n      {\n        name: 'benchmark/run',\n        description: 'Run performance benchmarks',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            suite: { type: 'string', description: 'Benchmark suite to run' },\n            iterations: { type: 'number', description: 'Number of iterations' },\n          },\n        },\n      },\n    ];\n\n    const response = {\n      jsonrpc: '2.0',\n      id: message.id,\n      result: { tools },\n    };\n\n    this.sendMessage(ws, response);\n  }\n\n  /**\n   * Handle unknown method\n   */\n  handleUnknownMethod(ws, message) {\n    this.sendError(ws, message.id, `Unknown method: ${message.method}`);\n  }\n\n  /**\n   * Execute mock tool for demonstration\n   */\n  executeMockTool(name, args) {\n    switch (name) {\n      case 'claude-flow/execute':\n        return this.executeClaudeFlowCommand(args.command, args.args);\n\n      case 'system/health':\n        const healthData = {\n          status: 'healthy',\n          uptime: Math.floor(process.uptime()),\n          memory: process.memoryUsage(),\n          connections: this.connections.size,\n          platform: compat.platform,\n          timestamp: new Date().toISOString(),\n        };\n\n        if (args.detailed) {\n          healthData.detailed = {\n            nodeVersion: process.version,\n            architecture: process.arch,\n            pid: process.pid,\n            cpuUsage: process.cpuUsage(),\n            resourceUsage: process.resourceUsage ? process.resourceUsage() : 'N/A',\n          };\n        }\n\n        return JSON.stringify(healthData, null, 2);\n\n      case 'swarm/orchestrate':\n        return this.executeSwarmCommand(args.action, args.args);\n\n      case 'swarm/status':\n        return this.executeSwarmCommand('status', args.args);\n\n      case 'memory/manage':\n        return this.executeMemoryCommand(args.operation, args.key, args.value);\n\n      case 'agents/manage':\n        return this.executeAgentsCommand(args.action, args.agentType, args.agentId);\n\n      case 'sparc/execute':\n        return this.executeSPARCCommand(args.mode, args.task, args.options);\n\n      case 'benchmark/run':\n        return this.executeBenchmarkCommand(args.suite, args.iterations);\n\n      default:\n        return `Tool '${name}' executed successfully with args: ${JSON.stringify(args)}`;\n    }\n  }\n\n  /**\n   * Execute Claude Flow command simulation\n   */\n  executeClaudeFlowCommand(command, args = {}) {\n    switch (command) {\n      case 'status':\n        return `Claude Flow Status:\n  Version: 2.0.0\n  Mode: Web Console\n  Active Processes: 3\n  Memory Usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB\n  Uptime: ${Math.floor(process.uptime())}s`;\n\n      case 'init':\n        return `Claude Flow initialization complete:\n  ✅ Project structure created\n  ✅ Configuration files generated\n  ✅ Memory bank initialized\n  ✅ Ready for development`;\n\n      case 'agents':\n        return `Active Agents:\n  • Research Agent (idle) - 0 tasks\n  • Code Developer (working) - 2 tasks  \n  • Data Analyst (idle) - 0 tasks\n  \n  Total: 3 agents`;\n\n      default:\n        return `Claude Flow command '${command}' executed successfully`;\n    }\n  }\n\n  /**\n   * Execute swarm command simulation\n   */\n  executeSwarmCommand(action = 'status', args = []) {\n    switch (action) {\n      case 'status':\n        return `Swarm Orchestration Status:\n  🐝 Swarm: ACTIVE\n  🏗️ Topology: hierarchical\n  👥 Agents: 5/8 active\n  📊 Tasks: 12 total (4 complete, 6 in-progress, 2 pending)\n  ⚡ Mode: parallel execution\n  🧠 Memory: 15 coordination points stored\n  📈 Efficiency: 78%`;\n\n      case 'init':\n        return `Swarm initialization complete:\n  ✅ Hierarchical topology established\n  ✅ 5 agents spawned successfully\n  ✅ Coordination protocols active\n  ✅ Memory synchronization enabled`;\n\n      case 'agents':\n        return `Swarm Agent Status:\n  🟢 architect: Designing system components...\n  🟢 coder-1: Implementing user authentication...\n  🟢 coder-2: Building API endpoints...\n  🟡 analyst: Analyzing performance metrics...\n  🔴 tester: Waiting for code completion...`;\n\n      case 'test':\n        return `Swarm Test Results:\n  ✅ Agent communication: PASS\n  ✅ Task distribution: PASS  \n  ✅ Memory coordination: PASS\n  ✅ Error handling: PASS\n  📊 Overall health: 95%`;\n\n      default:\n        return `Swarm ${action} completed successfully`;\n    }\n  }\n\n  /**\n   * Execute memory command simulation\n   */\n  executeMemoryCommand(operation, key, value) {\n    switch (operation) {\n      case 'store':\n        return `Memory stored successfully:\\n  Key: ${key}\\n  Value: ${value}\\n  Timestamp: ${new Date().toISOString()}`;\n\n      case 'retrieve':\n        return `Memory retrieved:\\n  Key: ${key}\\n  Value: \"example stored value\"\\n  Last Modified: ${new Date().toISOString()}`;\n\n      case 'list':\n        return `Memory Keys:\\n  • project/settings\\n  • swarm/topology\\n  • agents/coordination\\n  • session/state\\n  • benchmark/results\\n  \\n  Total: 5 entries`;\n\n      case 'delete':\n        return `Memory deleted:\\n  Key: ${key}\\n  Status: Success`;\n\n      default:\n        return `Memory operation '${operation}' completed`;\n    }\n  }\n\n  /**\n   * Execute agents command simulation\n   */\n  executeAgentsCommand(action, agentType, agentId) {\n    switch (action) {\n      case 'list':\n        return `Active Agents:\\n  🟢 agent-001 (architect) - Designing system components\\n  🟢 agent-002 (coder) - Implementing features\\n  🟡 agent-003 (analyst) - Analyzing performance\\n  🔴 agent-004 (tester) - Waiting for code\\n  🟢 agent-005 (coordinator) - Managing workflow\\n  \\n  Total: 5 agents`;\n\n      case 'create':\n        return `Agent created successfully:\\n  Type: ${agentType}\\n  ID: agent-${Math.floor(\n          Math.random() * 1000,\n        )\n          .toString()\n          .padStart(3, '0')}\\n  Status: Active\\n  Capabilities: Full ${agentType} functionality`;\n\n      case 'start':\n        return `Agent started:\\n  ID: ${agentId}\\n  Status: Running\\n  Tasks: Ready to accept work`;\n\n      case 'stop':\n        return `Agent stopped:\\n  ID: ${agentId}\\n  Status: Stopped\\n  Tasks: Completed gracefully`;\n\n      case 'status':\n        return `Agent Status:\\n  ID: ${agentId}\\n  Status: Active\\n  Type: researcher\\n  Current Task: Data analysis\\n  Uptime: 2h 15m\\n  Tasks Completed: 12\\n  Efficiency: 92%`;\n\n      default:\n        return `Agent ${action} completed for ${agentId || agentType}`;\n    }\n  }\n\n  /**\n   * Execute SPARC command simulation\n   */\n  executeSPARCCommand(mode, task, options = {}) {\n    const modes = {\n      coder: 'Code development and implementation',\n      architect: 'System design and architecture',\n      analyzer: 'Data analysis and insights',\n      researcher: 'Research and information gathering',\n      reviewer: 'Code review and quality assurance',\n      tester: 'Testing and validation',\n      debugger: 'Bug finding and resolution',\n      documenter: 'Documentation and specifications',\n      optimizer: 'Performance optimization',\n      designer: 'UI/UX design and prototyping',\n    };\n\n    return `SPARC Mode Execution:\\n  Mode: ${mode} (${modes[mode] || 'Unknown mode'})\\n  Task: ${task || 'No task specified'}\\n  Status: Initialized\\n  Estimated Duration: 15-30 minutes\\n  Resources Allocated: 2 agents\\n  Options: ${JSON.stringify(options)}\\n  \\n  Ready to begin execution...`;\n  }\n\n  /**\n   * Execute benchmark command simulation\n   */\n  executeBenchmarkCommand(suite = 'default', iterations = 10) {\n    const suites = {\n      default: 'General performance benchmark',\n      memory: 'Memory usage and allocation',\n      cpu: 'CPU intensive operations',\n      network: 'Network communication speed',\n      swarm: 'Swarm coordination efficiency',\n    };\n\n    return `Benchmark Results:\\n  Suite: ${suite} (${suites[suite] || 'Custom suite'})\\n  Iterations: ${iterations}\\n  \\n  📊 Results:\\n  • Average Response Time: 245ms\\n  • Memory Usage: 128MB\\n  • CPU Utilization: 15%\\n  • Success Rate: 98.5%\\n  • Throughput: 420 ops/sec\\n  \\n  🏆 Performance Grade: A+\\n  ⚡ Optimization Suggestions: Enable caching for 12% improvement`;\n  }\n\n  /**\n   * Send message to WebSocket client\n   */\n  sendMessage(ws, message) {\n    if (ws.readyState === ws.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  /**\n   * Send error response\n   */\n  sendError(ws, id, errorMessage) {\n    const response = {\n      jsonrpc: '2.0',\n      id,\n      error: {\n        code: -32600,\n        message: errorMessage,\n      },\n    };\n\n    this.sendMessage(ws, response);\n  }\n\n  /**\n   * Broadcast message to all connected clients\n   */\n  broadcast(message) {\n    this.connections.forEach((ws) => {\n      this.sendMessage(ws, message);\n    });\n  }\n\n  /**\n   * Start heartbeat to check connection health\n   */\n  startHeartbeat() {\n    setInterval(() => {\n      this.connections.forEach((ws) => {\n        if (ws.isAlive === false) {\n          ws.terminate();\n          this.connections.delete(ws);\n          return;\n        }\n\n        ws.isAlive = false;\n        ws.ping();\n      });\n    }, 30000); // 30 seconds\n  }\n\n  /**\n   * Get server status\n   */\n  getStatus() {\n    return {\n      running: this.isRunning,\n      port: this.port,\n      connections: this.connections.size,\n      uiPath: this.uiPath,\n    };\n  }\n}\n\n/**\n * Start web server command\n */\nexport async function startWebServer(port = 3000) {\n  const server = new ClaudeCodeWebServer(port);\n\n  try {\n    await server.start();\n\n    // Setup graceful shutdown\n    const shutdown = async () => {\n      console.log('\\n⏹️  Shutting down web server...');\n      await server.stop();\n      process.exit(0);\n    };\n\n    compat.terminal.onSignal('SIGINT', shutdown);\n    compat.terminal.onSignal('SIGTERM', shutdown);\n\n    // Keep server running\n    return server;\n  } catch (error) {\n    printError(`Failed to start web server: ${error.message}`);\n    process.exit(1);\n  }\n}\n\n// Auto-run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const port = process.argv[2] ? parseInt(process.argv[2]) : 3000;\n  await startWebServer(port);\n}\n"],"names":["createServer","join","dirname","fileURLToPath","readFileSync","existsSync","WebSocketServer","printSuccess","printError","printWarning","printInfo","compat","__filename","url","__dirname","ClaudeCodeWebServer","port","server","wss","connections","Set","uiPath","isRunning","createAPIRoutes","express","router","Router","get","req","res","json","status","uptime","process","size","start","app","default","use","next","header","static","redirect","path","setupWebSocketServer","Promise","resolve","reject","listen","err","console","log","error","message","stop","forEach","ws","readyState","OPEN","close","handleRequest","setHeader","method","writeHead","end","serveConsoleHTML","startsWith","filePath","substring","length","serveStaticFile","handleHealthCheck","handleStatusAPI","handleFavicon","handle404","content","replace","handle500","serveFile","filename","contentType","requestPath","includes","handle403","getContentType","ext","split","pop","toLowerCase","contentTypes","html","css","js","png","jpg","jpeg","gif","svg","ico","woff","woff2","ttf","eot","health","timestamp","Date","toISOString","memory","memoryUsage","platform","JSON","stringify","running","claudeFlow","initialized","version","runtime","favicon","on","handleWebSocketConnection","clientIP","socket","remoteAddress","add","sendMessage","jsonrpc","params","data","handleWebSocketMessage","code","reason","delete","isAlive","parse","toString","id","handleInitialize","handlePing","handleToolCall","handleToolsList","handleUnknownMethod","sendError","response","result","protocolVersion","major","minor","patch","serverInfo","name","capabilities","logging","level","tools","listChanged","resources","subscribe","prompts","now","original","arguments","args","executeMockTool","type","text","description","inputSchema","properties","command","required","action","detailed","operation","key","value","agentType","agentId","mode","task","options","suite","iterations","executeClaudeFlowCommand","healthData","Math","floor","nodeVersion","architecture","arch","pid","cpuUsage","resourceUsage","executeSwarmCommand","executeMemoryCommand","executeAgentsCommand","executeSPARCCommand","executeBenchmarkCommand","round","heapUsed","random","padStart","modes","coder","architect","analyzer","researcher","reviewer","tester","debugger","documenter","optimizer","designer","suites","cpu","network","swarm","send","errorMessage","broadcast","startHeartbeat","setInterval","terminate","ping","getStatus","startWebServer","shutdown","exit","terminal","onSignal","argv","parseInt"],"mappings":"AAKA,SAASA,YAAY,QAAQ,OAAO;AACpC,SAASC,IAAI,EAAEC,OAAO,QAAQ,OAAO;AACrC,SAASC,aAAa,QAAQ,MAAM;AACpC,SAASC,YAAY,EAAEC,UAAU,QAAQ,KAAK;AAC9C,SAASC,eAAe,QAAQ,KAAK;AACrC,SAASC,YAAY,EAAEC,UAAU,EAAEC,YAAY,EAAEC,SAAS,QAAQ,cAAc;AAChF,SAASC,MAAM,QAAQ,yBAAyB;AAEhD,MAAMC,aAAaT,cAAc,YAAYU,GAAG;AAChD,MAAMC,YAAYZ,QAAQU;AAE1B,OAAO,MAAMG;IACX,YAAYC,OAAO,IAAI,CAAE;QACvB,IAAI,CAACA,IAAI,GAAGA;QACZ,IAAI,CAACC,MAAM,GAAG;QACd,IAAI,CAACC,GAAG,GAAG;QACX,IAAI,CAACC,WAAW,GAAG,IAAIC;QACvB,IAAI,CAACC,MAAM,GAAGpB,KAAKa,WAAW;QAC9B,IAAI,CAACQ,SAAS,GAAG;IACnB;IAEA,MAAMC,kBAAkB;QACtB,MAAMC,UAAU,MAAM,MAAM,CAAC;QAC7B,MAAMC,SAASD,QAAQE,MAAM;QAG7BD,OAAOE,GAAG,CAAC,WAAW,CAACC,KAAKC;YAC1BA,IAAIC,IAAI,CAAC;gBAAEC,QAAQ;gBAAMC,QAAQC,QAAQD,MAAM;YAAG;QACpD;QAGAP,OAAOE,GAAG,CAAC,WAAW,CAACC,KAAKC;YAC1BA,IAAIC,IAAI,CAAC;gBACPX,aAAa,IAAI,CAACA,WAAW,CAACe,IAAI;gBAClCZ,WAAW,IAAI,CAACA,SAAS;gBACzBN,MAAM,IAAI,CAACA,IAAI;YACjB;QACF;QAEA,OAAOS;IACT;IAKA,MAAMU,QAAQ;QACZ,IAAI,IAAI,CAACb,SAAS,EAAE;YAClBb,aAAa;YACb;QACF;QAEA,IAAI;YAEF,MAAMe,UAAU,MAAM,MAAM,CAAC;YAC7B,MAAMY,MAAMZ,QAAQa,OAAO;YAG3BD,IAAIE,GAAG,CAAC,CAACV,KAAKC,KAAKU;gBACjBV,IAAIW,MAAM,CAAC,+BAA+B;gBAC1CX,IAAIW,MAAM,CAAC,gCAAgC;gBAC3CX,IAAIW,MAAM,CAAC,gCAAgC;gBAC3CD;YACF;YAGAH,IAAIE,GAAG,CAAC,YAAYd,QAAQiB,MAAM,CAAC,IAAI,CAACpB,MAAM;YAC9Ce,IAAIE,GAAG,CAAC,QAAQ,MAAM,IAAI,CAACf,eAAe;YAG1Ca,IAAIT,GAAG,CAAC,KAAK,CAACC,KAAKC;gBACjBA,IAAIa,QAAQ,CAAC;YACf;YAEA,IAAI,CAACzB,MAAM,GAAGjB,aAAaoC;YAG3B,IAAI,CAAClB,GAAG,GAAG,IAAIZ,gBAAgB;gBAC7BW,QAAQ,IAAI,CAACA,MAAM;gBACnB0B,MAAM;YACR;YAEA,IAAI,CAACC,oBAAoB;YAGzB,MAAM,IAAIC,QAAQ,CAACC,SAASC;gBAC1B,IAAI,CAAC9B,MAAM,CAAC+B,MAAM,CAAC,IAAI,CAAChC,IAAI,EAAE,CAACiC;oBAC7B,IAAIA,KAAK;wBACPF,OAAOE;oBACT,OAAO;wBACLH;oBACF;gBACF;YACF;YAEA,IAAI,CAACxB,SAAS,GAAG;YACjBf,aAAa,CAAC,0CAA0C,CAAC;YACzD2C,QAAQC,GAAG,CAAC,CAAC,mCAAmC,EAAE,IAAI,CAACnC,IAAI,CAAC,QAAQ,CAAC;YACrEkC,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAE,IAAI,CAACnC,IAAI,CAAC,GAAG,CAAC;YAC1DkC,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAAC9B,MAAM,EAAE;YAChD6B,QAAQC,GAAG;QACb,EAAE,OAAOC,OAAO;YACd5C,WAAW,CAAC,4BAA4B,EAAE4C,MAAMC,OAAO,EAAE;YACzD,MAAMD;QACR;IACF;IAKA,MAAME,OAAO;QACX,IAAI,CAAC,IAAI,CAAChC,SAAS,EAAE;QAGrB,IAAI,CAACH,WAAW,CAACoC,OAAO,CAAC,CAACC;YACxB,IAAIA,GAAGC,UAAU,KAAKD,GAAGE,IAAI,EAAE;gBAC7BF,GAAGG,KAAK,CAAC,MAAM;YACjB;QACF;QAGA,IAAI,IAAI,CAACzC,GAAG,EAAE;YACZ,IAAI,CAACA,GAAG,CAACyC,KAAK;QAChB;QAGA,IAAI,IAAI,CAAC1C,MAAM,EAAE;YACf,MAAM,IAAI4B,QAAQ,CAACC;gBACjB,IAAI,CAAC7B,MAAM,CAAC0C,KAAK,CAACb;YACpB;QACF;QAEA,IAAI,CAACxB,SAAS,GAAG;QACjBZ,UAAU;IACZ;IAKAkD,cAAchC,GAAG,EAAEC,GAAG,EAAE;QACtB,MAAMhB,MAAMe,IAAIf,GAAG;QAGnBgB,IAAIgC,SAAS,CAAC,+BAA+B;QAC7ChC,IAAIgC,SAAS,CAAC,gCAAgC;QAC9ChC,IAAIgC,SAAS,CAAC,gCAAgC;QAE9C,IAAIjC,IAAIkC,MAAM,KAAK,WAAW;YAC5BjC,IAAIkC,SAAS,CAAC;YACdlC,IAAImC,GAAG;YACP;QACF;QAGA,IAAInD,QAAQ,OAAOA,QAAQ,cAAcA,QAAQ,aAAa;YAC5D,IAAI,CAACoD,gBAAgB,CAACpC;QACxB,OAAO,IAAIhB,IAAIqD,UAAU,CAAC,cAAc;YAEtC,MAAMC,WAAWtD,IAAIuD,SAAS,CAAC,YAAYC,MAAM;YACjD,IAAI,CAACC,eAAe,CAACzC,KAAKsC;QAC5B,OAAO,IAAItD,QAAQ,WAAW;YAC5B,IAAI,CAAC0D,iBAAiB,CAAC1C;QACzB,OAAO,IAAIhB,QAAQ,eAAe;YAChC,IAAI,CAAC2D,eAAe,CAAC3C;QACvB,OAAO,IAAIhB,QAAQ,gBAAgB;YACjC,IAAI,CAAC4D,aAAa,CAAC5C;QACrB,OAAO;YACL,IAAI,CAAC6C,SAAS,CAAC7C;QACjB;IACF;IAKAoC,iBAAiBpC,GAAG,EAAE;QACpB,MAAMsC,WAAWlE,KAAK,IAAI,CAACoB,MAAM,EAAE;QAEnC,IAAI,CAAChB,WAAW8D,WAAW;YACzB,IAAI,CAACO,SAAS,CAAC7C;YACf;QACF;QAEA,IAAI;YACF,IAAI8C,UAAUvE,aAAa+D,UAAU;YAGrCQ,UAAUA,QAAQC,OAAO,CAAC,mBAAmB;YAC7CD,UAAUA,QAAQC,OAAO,CAAC,cAAc;YAExC/C,IAAIkC,SAAS,CAAC,KAAK;gBAAE,gBAAgB;YAAY;YACjDlC,IAAImC,GAAG,CAACW;QACV,EAAE,OAAOvB,OAAO;YACd,IAAI,CAACyB,SAAS,CAAChD,KAAKuB;QACtB;IACF;IAKA0B,UAAUjD,GAAG,EAAEkD,QAAQ,EAAEC,WAAW,EAAE;QACpC,MAAMb,WAAWlE,KAAK,IAAI,CAACoB,MAAM,EAAE0D;QAEnC,IAAI,CAAC1E,WAAW8D,WAAW;YACzB,IAAI,CAACO,SAAS,CAAC7C;YACf;QACF;QAEA,IAAI;YACF,MAAM8C,UAAUvE,aAAa+D;YAC7BtC,IAAIkC,SAAS,CAAC,KAAK;gBAAE,gBAAgBiB;YAAY;YACjDnD,IAAImC,GAAG,CAACW;QACV,EAAE,OAAOvB,OAAO;YACd,IAAI,CAACyB,SAAS,CAAChD,KAAKuB;QACtB;IACF;IAKAkB,gBAAgBzC,GAAG,EAAEoD,WAAW,EAAE;QAEhC,IAAIA,YAAYC,QAAQ,CAAC,SAASD,YAAYC,QAAQ,CAAC,OAAO;YAC5D,IAAI,CAACC,SAAS,CAACtD;YACf;QACF;QAEA,MAAMsC,WAAWlE,KAAK,IAAI,CAACoB,MAAM,EAAE4D;QAEnC,IAAI,CAAC5E,WAAW8D,WAAW;YACzB,IAAI,CAACO,SAAS,CAAC7C;YACf;QACF;QAGA,MAAMmD,cAAc,IAAI,CAACI,cAAc,CAACH;QAExC,IAAI;YACF,MAAMN,UAAUvE,aAAa+D;YAC7BtC,IAAIkC,SAAS,CAAC,KAAK;gBAAE,gBAAgBiB;YAAY;YACjDnD,IAAImC,GAAG,CAACW;QACV,EAAE,OAAOvB,OAAO;YACd,IAAI,CAACyB,SAAS,CAAChD,KAAKuB;QACtB;IACF;IAKAgC,eAAejB,QAAQ,EAAE;QACvB,MAAMkB,MAAMlB,SAASmB,KAAK,CAAC,KAAKC,GAAG,GAAGC,WAAW;QAEjD,MAAMC,eAAe;YACnBC,MAAM;YACNC,KAAK;YACLC,IAAI;YACJ9D,MAAM;YACN+D,KAAK;YACLC,KAAK;YACLC,MAAM;YACNC,KAAK;YACLC,KAAK;YACLC,KAAK;YACLC,MAAM;YACNC,OAAO;YACPC,KAAK;YACLC,KAAK;QACP;QAEA,OAAOb,YAAY,CAACJ,IAAI,IAAI;IAC9B;IAKAd,kBAAkB1C,GAAG,EAAE;QACrB,MAAM0E,SAAS;YACbxE,QAAQ;YACRyE,WAAW,IAAIC,OAAOC,WAAW;YACjC1E,QAAQC,QAAQD,MAAM;YACtBb,aAAa,IAAI,CAACA,WAAW,CAACe,IAAI;YAClCyE,QAAQ1E,QAAQ2E,WAAW;YAC3BC,UAAUlG,OAAOkG,QAAQ;QAC3B;QAEAhF,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAmB;QACxDlC,IAAImC,GAAG,CAAC8C,KAAKC,SAAS,CAACR,QAAQ,MAAM;IACvC;IAKA/B,gBAAgB3C,GAAG,EAAE;QACnB,MAAME,SAAS;YACbd,QAAQ;gBACN+F,SAAS,IAAI,CAAC1F,SAAS;gBACvBN,MAAM,IAAI,CAACA,IAAI;gBACfG,aAAa,IAAI,CAACA,WAAW,CAACe,IAAI;YACpC;YACA+E,YAAY;gBACVC,aAAa;gBACbC,SAAS;YACX;YACAC,SAASzG,OAAOyG,OAAO;YACvBP,UAAUlG,OAAOkG,QAAQ;QAC3B;QAEAhF,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAmB;QACxDlC,IAAImC,GAAG,CAAC8C,KAAKC,SAAS,CAAChF,QAAQ,MAAM;IACvC;IAKA0C,cAAc5C,GAAG,EAAE;QAEjB,MAAMwF,UAAU,CAAC;;;UAGX,CAAC;QAEPxF,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAgB;QACrDlC,IAAImC,GAAG,CAACqD;IACV;IAKAlC,UAAUtD,GAAG,EAAE;QACbA,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAa;QAClDlC,IAAImC,GAAG,CAAC;IACV;IAKAU,UAAU7C,GAAG,EAAE;QACbA,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAa;QAClDlC,IAAImC,GAAG,CAAC;IACV;IAKAa,UAAUhD,GAAG,EAAEuB,KAAK,EAAE;QACpBF,QAAQE,KAAK,CAAC,iBAAiBA;QAC/BvB,IAAIkC,SAAS,CAAC,KAAK;YAAE,gBAAgB;QAAa;QAClDlC,IAAImC,GAAG,CAAC;IACV;IAKApB,uBAAuB;QACrB,IAAI,CAAC1B,GAAG,CAACoG,EAAE,CAAC,cAAc,CAAC9D,IAAI5B;YAC7B,IAAI,CAAC2F,yBAAyB,CAAC/D,IAAI5B;QACrC;QAEA,IAAI,CAACV,GAAG,CAACoG,EAAE,CAAC,SAAS,CAAClE;YACpBF,QAAQE,KAAK,CAAC,2BAA2BA;QAC3C;IACF;IAKAmE,0BAA0B/D,EAAE,EAAE5B,GAAG,EAAE;QACjC,MAAM4F,WAAW5F,IAAI6F,MAAM,CAACC,aAAa;QACzCxE,QAAQC,GAAG,CAAC,CAAC,iCAAiC,EAAEqE,UAAU;QAE1D,IAAI,CAACrG,WAAW,CAACwG,GAAG,CAACnE;QAGrB,IAAI,CAACoE,WAAW,CAACpE,IAAI;YACnBqE,SAAS;YACT/D,QAAQ;YACRgE,QAAQ;gBACN7G,QAAQ;gBACRkG,SAAS;gBACTX,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;QAGAlD,GAAG8D,EAAE,CAAC,WAAW,CAACS;YAChB,IAAI,CAACC,sBAAsB,CAACxE,IAAIuE;QAClC;QAGAvE,GAAG8D,EAAE,CAAC,SAAS,CAACW,MAAMC;YACpBhF,QAAQC,GAAG,CAAC,CAAC,+BAA+B,EAAE8E,KAAK,CAAC,EAAEC,QAAQ;YAC9D,IAAI,CAAC/G,WAAW,CAACgH,MAAM,CAAC3E;QAC1B;QAGAA,GAAG8D,EAAE,CAAC,SAAS,CAAClE;YACdF,QAAQE,KAAK,CAAC,+BAA+BA;YAC7C,IAAI,CAACjC,WAAW,CAACgH,MAAM,CAAC3E;QAC1B;QAGAA,GAAG8D,EAAE,CAAC,QAAQ;YACZ9D,GAAG4E,OAAO,GAAG;QACf;IACF;IAKAJ,uBAAuBxE,EAAE,EAAEuE,IAAI,EAAE;QAC/B,IAAI;YACF,MAAM1E,UAAUyD,KAAKuB,KAAK,CAACN,KAAKO,QAAQ;YACxCpF,QAAQC,GAAG,CAAC,+BAA+BE,QAAQS,MAAM,EAAET,QAAQkF,EAAE;YAGrE,OAAQlF,QAAQS,MAAM;gBACpB,KAAK;oBACH,IAAI,CAAC0E,gBAAgB,CAAChF,IAAIH;oBAC1B;gBAEF,KAAK;oBACH,IAAI,CAACoF,UAAU,CAACjF,IAAIH;oBACpB;gBAEF,KAAK;oBACH,IAAI,CAACqF,cAAc,CAAClF,IAAIH;oBACxB;gBAEF,KAAK;oBACHH,QAAQC,GAAG,CAAC;oBACZ,IAAI,CAACwF,eAAe,CAACnF,IAAIH;oBACzB;gBAEF;oBACEH,QAAQC,GAAG,CAAC,mBAAmBE,QAAQS,MAAM;oBAC7C,IAAI,CAAC8E,mBAAmB,CAACpF,IAAIH;YACjC;QACF,EAAE,OAAOD,OAAO;YACdF,QAAQE,KAAK,CAAC,uCAAuCA;YACrD,IAAI,CAACyF,SAAS,CAACrF,IAAI,MAAM;QAC3B;IACF;IAKAgF,iBAAiBhF,EAAE,EAAEH,OAAO,EAAE;QAC5B,MAAMyF,WAAW;YACfjB,SAAS;YACTU,IAAIlF,QAAQkF,EAAE;YACdQ,QAAQ;gBACNC,iBAAiB;oBAAEC,OAAO;oBAAMC,OAAO;oBAAIC,OAAO;gBAAE;gBACpDC,YAAY;oBACVC,MAAM;oBACNlC,SAAS;gBACX;gBACAmC,cAAc;oBACZC,SAAS;wBAAEC,OAAO;oBAAO;oBACzBC,OAAO;wBAAEC,aAAa;oBAAK;oBAC3BC,WAAW;wBAAED,aAAa;wBAAOE,WAAW;oBAAM;oBAClDC,SAAS;wBAAEH,aAAa;oBAAM;gBAChC;YACF;QACF;QAEA,IAAI,CAAC9B,WAAW,CAACpE,IAAIsF;IACvB;IAKAL,WAAWjF,EAAE,EAAEH,OAAO,EAAE;QACtB,IAAI,CAACuE,WAAW,CAACpE,IAAI;YACnBqE,SAAS;YACT/D,QAAQ;YACRgE,QAAQ;gBACNtB,WAAWC,KAAKqD,GAAG;gBACnBC,UAAU1G,QAAQyE,MAAM;YAC1B;QACF;IACF;IAKAY,eAAelF,EAAE,EAAEH,OAAO,EAAE;QAC1B,MAAM,EAAEgG,IAAI,EAAEW,WAAWC,IAAI,EAAE,GAAG5G,QAAQyE,MAAM;QAGhD,MAAMiB,SAAS,IAAI,CAACmB,eAAe,CAACb,MAAMY;QAE1C,MAAMnB,WAAW;YACfjB,SAAS;YACTU,IAAIlF,QAAQkF,EAAE;YACdQ,QAAQ;gBACNpE,SAAS;oBACP;wBACEwF,MAAM;wBACNC,MAAMrB;oBACR;iBACD;YACH;QACF;QAEA,IAAI,CAACnB,WAAW,CAACpE,IAAIsF;IACvB;IAKAH,gBAAgBnF,EAAE,EAAEH,OAAO,EAAE;QAC3B,MAAMoG,QAAQ;YACZ;gBACEJ,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVC,SAAS;4BAAEL,MAAM;4BAAUE,aAAa;wBAAqB;wBAC7DJ,MAAM;4BAAEE,MAAM;4BAAUE,aAAa;wBAAoB;oBAC3D;oBACAI,UAAU;wBAAC;qBAAU;gBACvB;YACF;YACA;gBACEpB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVG,QAAQ;4BAAEP,MAAM;4BAAUE,aAAa;wBAAoB;wBAC3DJ,MAAM;4BAAEE,MAAM;4BAASE,aAAa;wBAAmB;oBACzD;oBACAI,UAAU;wBAAC;qBAAS;gBACtB;YACF;YACA;gBACEpB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVI,UAAU;4BAAER,MAAM;4BAAWE,aAAa;wBAA2B;oBACvE;gBACF;YACF;YACA;gBACEhB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVK,WAAW;4BAAET,MAAM;4BAAUE,aAAa;wBAA2C;wBACrFQ,KAAK;4BAAEV,MAAM;4BAAUE,aAAa;wBAAa;wBACjDS,OAAO;4BAAEX,MAAM;4BAAUE,aAAa;wBAAiB;oBACzD;oBACAI,UAAU;wBAAC;qBAAY;gBACzB;YACF;YACA;gBACEpB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVG,QAAQ;4BAAEP,MAAM;4BAAUE,aAAa;wBAA4C;wBACnFU,WAAW;4BAAEZ,MAAM;4BAAUE,aAAa;wBAA0B;wBACpEW,SAAS;4BAAEb,MAAM;4BAAUE,aAAa;wBAA0B;oBACpE;oBACAI,UAAU;wBAAC;qBAAS;gBACtB;YACF;YACA;gBACEpB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVU,MAAM;4BAAEd,MAAM;4BAAUE,aAAa;wBAA+C;wBACpFa,MAAM;4BAAEf,MAAM;4BAAUE,aAAa;wBAAmB;wBACxDc,SAAS;4BAAEhB,MAAM;4BAAUE,aAAa;wBAAqB;oBAC/D;oBACAI,UAAU;wBAAC;qBAAO;gBACpB;YACF;YACA;gBACEpB,MAAM;gBACNgB,aAAa;gBACbC,aAAa;oBACXH,MAAM;oBACNI,YAAY;wBACVa,OAAO;4BAAEjB,MAAM;4BAAUE,aAAa;wBAAyB;wBAC/DgB,YAAY;4BAAElB,MAAM;4BAAUE,aAAa;wBAAuB;oBACpE;gBACF;YACF;SACD;QAED,MAAMvB,WAAW;YACfjB,SAAS;YACTU,IAAIlF,QAAQkF,EAAE;YACdQ,QAAQ;gBAAEU;YAAM;QAClB;QAEA,IAAI,CAAC7B,WAAW,CAACpE,IAAIsF;IACvB;IAKAF,oBAAoBpF,EAAE,EAAEH,OAAO,EAAE;QAC/B,IAAI,CAACwF,SAAS,CAACrF,IAAIH,QAAQkF,EAAE,EAAE,CAAC,gBAAgB,EAAElF,QAAQS,MAAM,EAAE;IACpE;IAKAoG,gBAAgBb,IAAI,EAAEY,IAAI,EAAE;QAC1B,OAAQZ;YACN,KAAK;gBACH,OAAO,IAAI,CAACiC,wBAAwB,CAACrB,KAAKO,OAAO,EAAEP,KAAKA,IAAI;YAE9D,KAAK;gBACH,MAAMsB,aAAa;oBACjBxJ,QAAQ;oBACRC,QAAQwJ,KAAKC,KAAK,CAACxJ,QAAQD,MAAM;oBACjC2E,QAAQ1E,QAAQ2E,WAAW;oBAC3BzF,aAAa,IAAI,CAACA,WAAW,CAACe,IAAI;oBAClC2E,UAAUlG,OAAOkG,QAAQ;oBACzBL,WAAW,IAAIC,OAAOC,WAAW;gBACnC;gBAEA,IAAIuD,KAAKU,QAAQ,EAAE;oBACjBY,WAAWZ,QAAQ,GAAG;wBACpBe,aAAazJ,QAAQkF,OAAO;wBAC5BwE,cAAc1J,QAAQ2J,IAAI;wBAC1BC,KAAK5J,QAAQ4J,GAAG;wBAChBC,UAAU7J,QAAQ6J,QAAQ;wBAC1BC,eAAe9J,QAAQ8J,aAAa,GAAG9J,QAAQ8J,aAAa,KAAK;oBACnE;gBACF;gBAEA,OAAOjF,KAAKC,SAAS,CAACwE,YAAY,MAAM;YAE1C,KAAK;gBACH,OAAO,IAAI,CAACS,mBAAmB,CAAC/B,KAAKS,MAAM,EAAET,KAAKA,IAAI;YAExD,KAAK;gBACH,OAAO,IAAI,CAAC+B,mBAAmB,CAAC,UAAU/B,KAAKA,IAAI;YAErD,KAAK;gBACH,OAAO,IAAI,CAACgC,oBAAoB,CAAChC,KAAKW,SAAS,EAAEX,KAAKY,GAAG,EAAEZ,KAAKa,KAAK;YAEvE,KAAK;gBACH,OAAO,IAAI,CAACoB,oBAAoB,CAACjC,KAAKS,MAAM,EAAET,KAAKc,SAAS,EAAEd,KAAKe,OAAO;YAE5E,KAAK;gBACH,OAAO,IAAI,CAACmB,mBAAmB,CAAClC,KAAKgB,IAAI,EAAEhB,KAAKiB,IAAI,EAAEjB,KAAKkB,OAAO;YAEpE,KAAK;gBACH,OAAO,IAAI,CAACiB,uBAAuB,CAACnC,KAAKmB,KAAK,EAAEnB,KAAKoB,UAAU;YAEjE;gBACE,OAAO,CAAC,MAAM,EAAEhC,KAAK,mCAAmC,EAAEvC,KAAKC,SAAS,CAACkD,OAAO;QACpF;IACF;IAKAqB,yBAAyBd,OAAO,EAAEP,OAAO,CAAC,CAAC,EAAE;QAC3C,OAAQO;YACN,KAAK;gBACH,OAAO,CAAC;;;;gBAIA,EAAEgB,KAAKa,KAAK,CAACpK,QAAQ2E,WAAW,GAAG0F,QAAQ,GAAG,OAAO,MAAM;UACjE,EAAEd,KAAKC,KAAK,CAACxJ,QAAQD,MAAM,IAAI,CAAC,CAAC;YAErC,KAAK;gBACH,OAAO,CAAC;;;;yBAIS,CAAC;YAEpB,KAAK;gBACH,OAAO,CAAC;;;;;iBAKC,CAAC;YAEZ;gBACE,OAAO,CAAC,qBAAqB,EAAEwI,QAAQ,uBAAuB,CAAC;QACnE;IACF;IAKAwB,oBAAoBtB,SAAS,QAAQ,EAAET,OAAO,EAAE,EAAE;QAChD,OAAQS;YACN,KAAK;gBACH,OAAO,CAAC;;;;;;;oBAOI,CAAC;YAEf,KAAK;gBACH,OAAO,CAAC;;;;kCAIkB,CAAC;YAE7B,KAAK;gBACH,OAAO,CAAC;;;;;2CAK2B,CAAC;YAEtC,KAAK;gBACH,OAAO,CAAC;;;;;wBAKQ,CAAC;YAEnB;gBACE,OAAO,CAAC,MAAM,EAAEA,OAAO,uBAAuB,CAAC;QACnD;IACF;IAKAuB,qBAAqBrB,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAE;QAC1C,OAAQF;YACN,KAAK;gBACH,OAAO,CAAC,oCAAoC,EAAEC,IAAI,WAAW,EAAEC,MAAM,eAAe,EAAE,IAAIrE,OAAOC,WAAW,IAAI;YAElH,KAAK;gBACH,OAAO,CAAC,0BAA0B,EAAEmE,IAAI,oDAAoD,EAAE,IAAIpE,OAAOC,WAAW,IAAI;YAE1H,KAAK;gBACH,OAAO,CAAC,iJAAiJ,CAAC;YAE5J,KAAK;gBACH,OAAO,CAAC,wBAAwB,EAAEmE,IAAI,mBAAmB,CAAC;YAE5D;gBACE,OAAO,CAAC,kBAAkB,EAAED,UAAU,WAAW,CAAC;QACtD;IACF;IAKAsB,qBAAqBxB,MAAM,EAAEK,SAAS,EAAEC,OAAO,EAAE;QAC/C,OAAQN;YACN,KAAK;gBACH,OAAO,CAAC,+RAA+R,CAAC;YAE1S,KAAK;gBACH,OAAO,CAAC,qCAAqC,EAAEK,UAAU,cAAc,EAAES,KAAKC,KAAK,CACjFD,KAAKe,MAAM,KAAK,MAEfjE,QAAQ,GACRkE,QAAQ,CAAC,GAAG,KAAK,yCAAyC,EAAEzB,UAAU,cAAc,CAAC;YAE1F,KAAK;gBACH,OAAO,CAAC,sBAAsB,EAAEC,QAAQ,kDAAkD,CAAC;YAE7F,KAAK;gBACH,OAAO,CAAC,sBAAsB,EAAEA,QAAQ,kDAAkD,CAAC;YAE7F,KAAK;gBACH,OAAO,CAAC,qBAAqB,EAAEA,QAAQ,iIAAiI,CAAC;YAE3K;gBACE,OAAO,CAAC,MAAM,EAAEN,OAAO,eAAe,EAAEM,WAAWD,WAAW;QAClE;IACF;IAKAoB,oBAAoBlB,IAAI,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC,EAAE;QAC5C,MAAMsB,QAAQ;YACZC,OAAO;YACPC,WAAW;YACXC,UAAU;YACVC,YAAY;YACZC,UAAU;YACVC,QAAQ;YACRC,UAAU;YACVC,YAAY;YACZC,WAAW;YACXC,UAAU;QACZ;QAEA,OAAO,CAAC,+BAA+B,EAAElC,KAAK,EAAE,EAAEwB,KAAK,CAACxB,KAAK,IAAI,eAAe,WAAW,EAAEC,QAAQ,oBAAoB,0GAA0G,EAAEpE,KAAKC,SAAS,CAACoE,SAAS,mCAAmC,CAAC;IACnS;IAKAiB,wBAAwBhB,QAAQ,SAAS,EAAEC,aAAa,EAAE,EAAE;QAC1D,MAAM+B,SAAS;YACb/K,SAAS;YACTsE,QAAQ;YACR0G,KAAK;YACLC,SAAS;YACTC,OAAO;QACT;QAEA,OAAO,CAAC,6BAA6B,EAAEnC,MAAM,EAAE,EAAEgC,MAAM,CAAChC,MAAM,IAAI,eAAe,iBAAiB,EAAEC,WAAW,gQAAgQ,CAAC;IAClX;IAKAzD,YAAYpE,EAAE,EAAEH,OAAO,EAAE;QACvB,IAAIG,GAAGC,UAAU,KAAKD,GAAGE,IAAI,EAAE;YAC7BF,GAAGgK,IAAI,CAAC1G,KAAKC,SAAS,CAAC1D;QACzB;IACF;IAKAwF,UAAUrF,EAAE,EAAE+E,EAAE,EAAEkF,YAAY,EAAE;QAC9B,MAAM3E,WAAW;YACfjB,SAAS;YACTU;YACAnF,OAAO;gBACL6E,MAAM,CAAC;gBACP5E,SAASoK;YACX;QACF;QAEA,IAAI,CAAC7F,WAAW,CAACpE,IAAIsF;IACvB;IAKA4E,UAAUrK,OAAO,EAAE;QACjB,IAAI,CAAClC,WAAW,CAACoC,OAAO,CAAC,CAACC;YACxB,IAAI,CAACoE,WAAW,CAACpE,IAAIH;QACvB;IACF;IAKAsK,iBAAiB;QACfC,YAAY;YACV,IAAI,CAACzM,WAAW,CAACoC,OAAO,CAAC,CAACC;gBACxB,IAAIA,GAAG4E,OAAO,KAAK,OAAO;oBACxB5E,GAAGqK,SAAS;oBACZ,IAAI,CAAC1M,WAAW,CAACgH,MAAM,CAAC3E;oBACxB;gBACF;gBAEAA,GAAG4E,OAAO,GAAG;gBACb5E,GAAGsK,IAAI;YACT;QACF,GAAG;IACL;IAKAC,YAAY;QACV,OAAO;YACL/G,SAAS,IAAI,CAAC1F,SAAS;YACvBN,MAAM,IAAI,CAACA,IAAI;YACfG,aAAa,IAAI,CAACA,WAAW,CAACe,IAAI;YAClCb,QAAQ,IAAI,CAACA,MAAM;QACrB;IACF;AACF;AAKA,OAAO,eAAe2M,eAAehN,OAAO,IAAI;IAC9C,MAAMC,SAAS,IAAIF,oBAAoBC;IAEvC,IAAI;QACF,MAAMC,OAAOkB,KAAK;QAGlB,MAAM8L,WAAW;YACf/K,QAAQC,GAAG,CAAC;YACZ,MAAMlC,OAAOqC,IAAI;YACjBrB,QAAQiM,IAAI,CAAC;QACf;QAEAvN,OAAOwN,QAAQ,CAACC,QAAQ,CAAC,UAAUH;QACnCtN,OAAOwN,QAAQ,CAACC,QAAQ,CAAC,WAAWH;QAGpC,OAAOhN;IACT,EAAE,OAAOmC,OAAO;QACd5C,WAAW,CAAC,4BAA4B,EAAE4C,MAAMC,OAAO,EAAE;QACzDpB,QAAQiM,IAAI,CAAC;IACf;AACF;AAGA,IAAI,YAAYrN,GAAG,KAAK,CAAC,OAAO,EAAEoB,QAAQoM,IAAI,CAAC,EAAE,EAAE,EAAE;IACnD,MAAMrN,OAAOiB,QAAQoM,IAAI,CAAC,EAAE,GAAGC,SAASrM,QAAQoM,IAAI,CAAC,EAAE,IAAI;IAC3D,MAAML,eAAehN;AACvB"}