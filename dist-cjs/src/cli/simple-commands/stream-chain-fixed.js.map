{"version":3,"sources":["../../../../src/cli/simple-commands/stream-chain-fixed.js"],"sourcesContent":["/**\n * Execute a single step in the stream chain\n */\nasync function executeStreamStep(prompt, inputStream, isLast, flags = {}) {\n  return new Promise((resolve) => {\n    const startTime = Date.now();\n    let resolved = false; // Prevent double resolution\n    \n    const safeResolve = (result) => {\n      if (!resolved) {\n        resolved = true;\n        resolve(result);\n      }\n    };\n    \n    // Check if we should use mock mode\n    const useMock = flags.mock || !checkClaudeAvailable();\n    \n    if (useMock) {\n      // Mock implementation when claude CLI isn't available or mock flag is set\n      return mockStreamStep(prompt, inputStream, isLast, flags, safeResolve, startTime);\n    }\n    \n    // Set a reasonable timeout for real Claude CLI (15 seconds - more realistic)\n    const stepTimeout = flags.timeout ? parseInt(flags.timeout) * 1000 : 15000;\n    \n    // Build command arguments\n    const args = ['-p'];\n    \n    // For now, avoid stream-json input chaining due to format complexity\n    // Each step runs independently for better reliability\n    if (!isLast || flags.json) {\n      args.push('--output-format', 'stream-json');\n      // stream-json output requires --verbose\n      args.push('--verbose');\n    }\n    \n    // Add the prompt\n    args.push(prompt);\n\n    if (flags.verbose) {\n      console.log(`   Debug: Executing: claude ${args.join(' ')}`);\n    }\n\n    // Use exec with built-in timeout for better reliability\n    const command = `claude ${args.join(' ')}`;\n    \n    exec(command, { \n      timeout: stepTimeout,\n      maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n    }, (error, stdout, stderr) => {\n      if (resolved) {\n        return; // Already resolved\n      }\n      \n      const duration = Date.now() - startTime;\n      \n      if (error && error.code === 'TIMEOUT') {\n        // Handle timeout via exec\n        console.log('⚠️  Claude CLI timed out, falling back to mock mode...');\n        mockStreamStep(prompt, inputStream, isLast, { ...flags, mock: true }, safeResolve, Date.now());\n        return;\n      }\n      \n      if (flags.verbose && stderr) {\n        console.error('Error output:', stderr);\n      }\n      \n      safeResolve({\n        success: !error || error.code === 0,\n        duration,\n        output: stdout || '',\n        stream: (!isLast && stdout) ? stdout : null,\n        error: stderr || (error ? error.message : null)\n      });\n    });\n  });\n}"],"names":["executeStreamStep","prompt","inputStream","isLast","flags","Promise","resolve","startTime","Date","now","resolved","safeResolve","result","useMock","mock","checkClaudeAvailable","mockStreamStep","stepTimeout","timeout","parseInt","args","json","push","verbose","console","log","join","command","exec","maxBuffer","error","stdout","stderr","duration","code","success","output","stream","message"],"mappings":"AAGA,eAAeA,kBAAkBC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC;IACtE,OAAO,IAAIC,QAAQ,CAACC;QAClB,MAAMC,YAAYC,KAAKC,GAAG;QAC1B,IAAIC,WAAW;QAEf,MAAMC,cAAc,CAACC;YACnB,IAAI,CAACF,UAAU;gBACbA,WAAW;gBACXJ,QAAQM;YACV;QACF;QAGA,MAAMC,UAAUT,MAAMU,IAAI,IAAI,CAACC;QAE/B,IAAIF,SAAS;YAEX,OAAOG,eAAef,QAAQC,aAAaC,QAAQC,OAAOO,aAAaJ;QACzE;QAGA,MAAMU,cAAcb,MAAMc,OAAO,GAAGC,SAASf,MAAMc,OAAO,IAAI,OAAO;QAGrE,MAAME,OAAO;YAAC;SAAK;QAInB,IAAI,CAACjB,UAAUC,MAAMiB,IAAI,EAAE;YACzBD,KAAKE,IAAI,CAAC,mBAAmB;YAE7BF,KAAKE,IAAI,CAAC;QACZ;QAGAF,KAAKE,IAAI,CAACrB;QAEV,IAAIG,MAAMmB,OAAO,EAAE;YACjBC,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAEL,KAAKM,IAAI,CAAC,MAAM;QAC7D;QAGA,MAAMC,UAAU,CAAC,OAAO,EAAEP,KAAKM,IAAI,CAAC,MAAM;QAE1CE,KAAKD,SAAS;YACZT,SAASD;YACTY,WAAW,OAAO,OAAO;QAC3B,GAAG,CAACC,OAAOC,QAAQC;YACjB,IAAItB,UAAU;gBACZ;YACF;YAEA,MAAMuB,WAAWzB,KAAKC,GAAG,KAAKF;YAE9B,IAAIuB,SAASA,MAAMI,IAAI,KAAK,WAAW;gBAErCV,QAAQC,GAAG,CAAC;gBACZT,eAAef,QAAQC,aAAaC,QAAQ;oBAAE,GAAGC,KAAK;oBAAEU,MAAM;gBAAK,GAAGH,aAAaH,KAAKC,GAAG;gBAC3F;YACF;YAEA,IAAIL,MAAMmB,OAAO,IAAIS,QAAQ;gBAC3BR,QAAQM,KAAK,CAAC,iBAAiBE;YACjC;YAEArB,YAAY;gBACVwB,SAAS,CAACL,SAASA,MAAMI,IAAI,KAAK;gBAClCD;gBACAG,QAAQL,UAAU;gBAClBM,QAAQ,AAAC,CAAClC,UAAU4B,SAAUA,SAAS;gBACvCD,OAAOE,UAAWF,CAAAA,QAAQA,MAAMQ,OAAO,GAAG,IAAG;YAC/C;QACF;IACF;AACF"}