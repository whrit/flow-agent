{"version":3,"sources":["../../../../src/cli/simple-commands/start-wrapper.js"],"sourcesContent":["// start-wrapper.js - Wrapper to maintain backward compatibility with the new modular start command\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport { compat } from '../runtime-detector.js';\n\nexport async function startCommand(subArgs, flags) {\n  // Show help if requested\n  if (flags.help || flags.h || subArgs.includes('--help') || subArgs.includes('-h')) {\n    showStartHelp();\n    return;\n  }\n\n  // Parse start options\n  const daemon = subArgs.includes('--daemon') || subArgs.includes('-d') || flags.daemon;\n  const port = flags.port || getArgValue(subArgs, '--port') || getArgValue(subArgs, '-p') || 3000;\n  const verbose = subArgs.includes('--verbose') || subArgs.includes('-v') || flags.verbose;\n  const ui = subArgs.includes('--ui') || subArgs.includes('-u') || flags.ui;\n  const web = subArgs.includes('--web') || subArgs.includes('-w') || flags.web;\n\n  try {\n    printSuccess('Starting Claude-Flow Orchestration System...');\n    console.log();\n\n    // Check if we should launch the web UI mode\n    if (web) {\n      try {\n        // Launch the web server\n        const { startWebServer } = await import('./web-server.js');\n        const server = await startWebServer(port);\n\n        printSuccess(`🌐 Web UI is running!`);\n        console.log(`📍 Open your browser to: http://localhost:${port}/console`);\n        console.log('   Press Ctrl+C to stop the server');\n        console.log();\n\n        // Keep process running\n        await new Promise(() => {});\n        return;\n      } catch (err) {\n        printError('Failed to launch web UI: ' + err.message);\n        console.error(err.stack);\n        return;\n      }\n    }\n\n    // Check if we should launch the UI mode (web UI by default)\n    if (ui && !web) {\n      try {\n        // Launch the web UI by default when --ui is used\n        const { ClaudeCodeWebServer } = await import('./web-server.js');\n        const webServer = new ClaudeCodeWebServer(port);\n        await webServer.start();\n\n        printSuccess('🌐 Claude Flow Web UI is running!');\n        console.log(`📍 Open your browser to: http://localhost:${port}/console`);\n        console.log('   Press Ctrl+C to stop the server');\n        console.log();\n\n        // Keep process running\n        await new Promise(() => {});\n        return;\n      } catch (err) {\n        // If web UI fails, fall back to terminal UI\n        printWarning('Web UI failed, launching terminal UI...');\n        try {\n          const { launchEnhancedUI } = await import('./process-ui-enhanced.js');\n          await launchEnhancedUI();\n          return;\n        } catch (fallbackErr) {\n          // If both fail, show error\n          printError('Failed to launch UI: ' + err.message);\n          console.error(err.stack);\n          return;\n        }\n      }\n    }\n\n    // Check if required directories exist\n    const requiredDirs = ['memory', 'coordination'];\n    let missingDirs = [];\n\n    for (const dir of requiredDirs) {\n      try {\n        await fs.stat(dir);\n      } catch {\n        missingDirs.push(dir);\n      }\n    }\n\n    if (missingDirs.length > 0) {\n      printWarning('Missing required directories: ' + missingDirs.join(', '));\n      console.log('Run \"claude-flow init\" first to create the necessary structure');\n      return;\n    }\n\n    // Display startup information\n    console.log('🚀 System Configuration:');\n    console.log(`   Mode: ${daemon ? 'Daemon (background)' : 'Interactive'}`);\n    console.log(`   MCP Port: ${port}`);\n    console.log(`   Working Directory: ${cwd()}`);\n    console.log(`   Memory Backend: JSON (default)`);\n    console.log(`   Terminal Pool: 5 instances (default)`);\n    console.log();\n\n    // Initialize components\n    console.log('📋 Initializing Components:');\n\n    // Memory system\n    console.log('   ✓ Memory Bank: Ready');\n    console.log('     - Backend: JSON file (memory/claude-flow-data.json)');\n    console.log('     - Namespaces: Enabled');\n\n    // Terminal pool\n    console.log('   ✓ Terminal Pool: Ready');\n    console.log('     - Pool Size: 5');\n    console.log('     - Shell: ' + (compat.platform.os === 'windows' ? 'cmd.exe' : '/bin/bash'));\n\n    // Task queue\n    console.log('   ✓ Task Queue: Ready');\n    console.log('     - Max Concurrent: 10');\n    console.log('     - Priority Queue: Enabled');\n\n    // MCP Server\n    console.log('   ✓ MCP Server: Ready');\n    console.log(`     - Port: ${port}`);\n    console.log('     - Transport: stdio/HTTP');\n\n    console.log();\n\n    if (daemon) {\n      // Daemon mode - would normally fork process\n      printInfo('Starting in daemon mode...');\n      console.log('Note: Full daemon mode requires the TypeScript version');\n      console.log('The orchestrator would run in the background on port ' + port);\n\n      // Create a simple PID file to simulate daemon\n      const pid = compat.terminal.getPid();\n      await compat.safeCall(async () => {\n        if (compat.runtime === 'deno') {\n          await fs.writeFile('.claude-flow.pid', pid.toString(), 'utf8');\n        } else {\n          const fs = await import('fs/promises');\n          await fs.writeFile('.claude-flow.pid', pid.toString(), 'utf8');\n        }\n      });\n      console.log(`Process ID: ${pid} (saved to .claude-flow.pid)`);\n    } else {\n      // Interactive mode\n      printSuccess('Orchestration system started!');\n      console.log();\n      console.log('🎯 Available Actions:');\n      console.log('   • Open another terminal and run:');\n      console.log('     - claude-flow agent spawn researcher');\n      console.log('     - claude-flow task create \"your task\"');\n      console.log('     - claude-flow sparc \"build feature\"');\n      console.log('     - claude-flow monitor');\n      console.log();\n      console.log('   • View system status:');\n      console.log('     - claude-flow status');\n      console.log();\n      console.log('   • Launch process management UI:');\n      console.log('     - claude-flow start --ui');\n      console.log();\n      console.log('   • Press Ctrl+C to stop the orchestrator');\n      console.log();\n\n      if (verbose) {\n        console.log('📊 Verbose Mode - Showing system activity:');\n        console.log('[' + new Date().toISOString() + '] System initialized');\n        console.log('[' + new Date().toISOString() + '] Waiting for commands...');\n      }\n\n      // Keep the process running\n      console.log('🟢 System is running...');\n\n      // Set up signal handlers\n      const abortController = new AbortController();\n\n      compat.terminal.onSignal('SIGINT', () => {\n        console.log('\\n⏹️  Shutting down orchestrator...');\n        cleanup();\n        compat.terminal.exit(0);\n      });\n\n      // Simple heartbeat to show system is alive\n      if (!daemon) {\n        const heartbeat = setInterval(() => {\n          if (verbose) {\n            console.log('[' + new Date().toISOString() + '] Heartbeat - System healthy');\n          }\n        }, 30000); // Every 30 seconds\n\n        // Wait indefinitely (until Ctrl+C)\n        await new Promise(() => {});\n      }\n    }\n  } catch (err) {\n    printError(`Failed to start orchestration system: ${err.message}`);\n    console.error('Stack trace:', err.stack);\n  }\n}\n\nfunction getArgValue(args, flag) {\n  const index = args.indexOf(flag);\n  if (index !== -1 && index < args.length - 1) {\n    return args[index + 1];\n  }\n  return null;\n}\n\nasync function cleanup() {\n  // Clean up resources\n  try {\n    await compat.safeCall(async () => {\n      if (compat.runtime === 'deno') {\n        await fs.unlink('.claude-flow.pid');\n      } else {\n        const fs = await import('fs/promises');\n        await fs.unlink('.claude-flow.pid');\n      }\n    });\n  } catch {\n    // File might not exist\n  }\n\n  console.log('✓ Terminal pool closed');\n  console.log('✓ Task queue cleared');\n  console.log('✓ Memory bank saved');\n  console.log('✓ Cleanup complete');\n}\n\nfunction showStartHelp() {\n  console.log('Start the Claude-Flow orchestration system');\n  console.log();\n  console.log('Usage: claude-flow start [options]');\n  console.log();\n  console.log('Options:');\n  console.log('  -d, --daemon        Run as daemon in background');\n  console.log('  -p, --port <port>   Server port (default: 3000)');\n  console.log('  -u, --ui            Launch terminal-based process management UI');\n  console.log('  -w, --web           Launch web-based UI server');\n  console.log('  -v, --verbose       Show detailed system activity');\n  console.log('  -h, --help          Show this help message');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow start                    # Start in interactive mode');\n  console.log('  claude-flow start --daemon           # Start as background daemon');\n  console.log('  claude-flow start --port 8080        # Use custom server port');\n  console.log('  claude-flow start --ui               # Launch terminal-based UI');\n  console.log('  claude-flow start --web              # Launch web-based UI');\n  console.log('  claude-flow start --verbose          # Show detailed logs');\n  console.log();\n  console.log('Web-based UI:');\n  console.log('  The --web flag starts a web server with:');\n  console.log('    - Full-featured web console at http://localhost:3000/console');\n  console.log('    - Real-time WebSocket communication');\n  console.log('    - Mobile-responsive design');\n  console.log('    - Multiple themes and customization options');\n  console.log('    - Claude Flow swarm integration');\n  console.log();\n  console.log('Terminal-based UI:');\n  console.log('  The --ui flag launches an advanced multi-view interface with:');\n  console.log();\n  console.log('  Views (press 1-6 to switch):');\n  console.log('    1. Process Management - Start/stop individual components');\n  console.log('    2. System Status - Health metrics and resource usage');\n  console.log('    3. Orchestration - Agent and task management');\n  console.log('    4. Memory Bank - Namespace browser and operations');\n  console.log('    5. System Logs - Real-time log viewer with filters');\n  console.log('    6. Help - Comprehensive keyboard shortcuts');\n  console.log();\n  console.log('  Features:');\n  console.log('    - Color-coded status indicators');\n  console.log('    - Real-time updates and monitoring');\n  console.log('    - Context-sensitive controls');\n  console.log('    - Tab navigation between views');\n  console.log();\n  console.log('Notes:');\n  console.log('  - Requires \"claude-flow init\" to be run first');\n  console.log('  - Interactive mode shows real-time system status');\n  console.log('  - Daemon mode runs in background (check logs)');\n  console.log('  - Use \"claude-flow status\" to check if running');\n  console.log('  - Use Ctrl+C or \"claude-flow stop\" to shutdown');\n}\n"],"names":["printSuccess","printError","printWarning","printInfo","promises","fs","cwd","compat","startCommand","subArgs","flags","help","h","includes","showStartHelp","daemon","port","getArgValue","verbose","ui","web","console","log","startWebServer","server","Promise","err","message","error","stack","ClaudeCodeWebServer","webServer","start","launchEnhancedUI","fallbackErr","requiredDirs","missingDirs","dir","stat","push","length","join","platform","os","pid","terminal","getPid","safeCall","runtime","writeFile","toString","Date","toISOString","abortController","AbortController","onSignal","cleanup","exit","heartbeat","setInterval","args","flag","index","indexOf","unlink"],"mappings":"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CZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG;IACXD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd"}