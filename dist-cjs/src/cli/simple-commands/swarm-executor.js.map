{"version":3,"sources":["../../../../src/cli/simple-commands/swarm-executor.js"],"sourcesContent":["/**\n * Simple Swarm Executor - Provides basic swarm functionality without TypeScript dependencies\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// Simple ID generator to avoid build dependencies\nfunction generateId(prefix = 'id') {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substring(2, 9);\n  return `${prefix}_${timestamp}_${random}`;\n}\n\n// Simple SwarmCoordinator implementation\nexport class SwarmCoordinator {\n  constructor(config) {\n    this.config = config;\n    this.id = config.name || generateId('swarm');\n    this.agents = [];\n    this.tasks = [];\n    this.status = 'initializing';\n    this.startTime = Date.now();\n  }\n\n  async initialize() {\n    console.log(`\\nüöÄ Swarm initialized: ${this.id}`);\n    console.log(`üìã Description: ${this.config.description}`);\n    console.log(`üéØ Strategy: ${this.config.strategy}`);\n    console.log(`üèóÔ∏è  Mode: ${this.config.mode}`);\n    console.log(`ü§ñ Max Agents: ${this.config.maxAgents}`);\n\n    this.status = 'active';\n\n    // Create swarm directory\n    const swarmDir = `./swarm-runs/${this.id}`;\n    await fs.mkdir(swarmDir, { recursive: true });\n\n    // Save configuration\n    await fs.writeFile(path.join(swarmDir, 'config.json'), JSON.stringify(this.config, null, 2));\n\n    return this;\n  }\n\n  async addAgent(type, name) {\n    const agent = {\n      id: generateId('agent'),\n      type,\n      name: name || `${type}-${this.agents.length + 1}`,\n      status: 'active',\n      tasks: [],\n    };\n\n    this.agents.push(agent);\n    console.log(`  ü§ñ Agent spawned: ${agent.name} (${agent.type})`);\n\n    return agent;\n  }\n\n  async executeTask(task) {\n    const taskObj = {\n      id: generateId('task'),\n      description: task,\n      status: 'in_progress',\n      startTime: Date.now(),\n    };\n\n    this.tasks.push(taskObj);\n    console.log(`\\nüìå Executing task: ${task}`);\n\n    // Simulate task execution with progress\n    console.log(`  ‚è≥ Processing...`);\n\n    // Simulate different types of tasks\n    if (task.toLowerCase().includes('api')) {\n      await this.createAPIProject();\n    } else if (task.toLowerCase().includes('test')) {\n      await this.runTests();\n    } else {\n      await this.genericTaskExecution(task);\n    }\n\n    taskObj.status = 'completed';\n    taskObj.endTime = Date.now();\n\n    console.log(`  ‚úÖ Task completed in ${(taskObj.endTime - taskObj.startTime) / 1000}s`);\n\n    return taskObj;\n  }\n\n  async createAPIProject() {\n    console.log(`  üèóÔ∏è  Creating API project structure...`);\n\n    const projectDir = './api-project';\n    await fs.mkdir(projectDir, { recursive: true });\n\n    // Create basic Express server\n    const serverCode = `const express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'healthy', swarm: '${this.id}' });\n});\n\napp.get('/api/items', (req, res) => {\n  res.json({ items: [], count: 0 });\n});\n\napp.listen(port, () => {\n  console.log(\\`API server running on port \\${port}\\`);\n});\n\nmodule.exports = app;\n`;\n\n    await fs.writeFile(path.join(projectDir, 'server.js'), serverCode);\n\n    // Create package.json\n    const packageJson = {\n      name: 'api-project',\n      version: '1.0.0',\n      description: 'API created by Claude Flow Swarm',\n      main: 'server.js',\n      scripts: {\n        start: 'node server.js',\n        dev: 'nodemon server.js',\n      },\n      dependencies: {\n        express: '^4.18.2',\n      },\n      devDependencies: {\n        nodemon: '^3.0.1',\n      },\n    };\n\n    await fs.writeFile(path.join(projectDir, 'package.json'), JSON.stringify(packageJson, null, 2));\n\n    console.log(`  ‚úÖ Created API project in ${projectDir}`);\n  }\n\n  async runTests() {\n    console.log(`  üß™ Running tests...`);\n    console.log(`  ‚úÖ All tests passed (0 tests)`);\n  }\n\n  async genericTaskExecution(task) {\n    console.log(`  üîÑ Executing: ${task}`);\n\n    // Simulate work being done\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    console.log(`  ‚úÖ Generic task completed`);\n  }\n\n  async getStatus() {\n    return {\n      id: this.id,\n      status: this.status,\n      agents: this.agents.length,\n      tasks: {\n        total: this.tasks.length,\n        completed: this.tasks.filter((t) => t.status === 'completed').length,\n        in_progress: this.tasks.filter((t) => t.status === 'in_progress').length,\n      },\n      runtime: Math.floor((Date.now() - this.startTime) / 1000),\n    };\n  }\n\n  async complete() {\n    this.status = 'completed';\n\n    const summary = await this.getStatus();\n    console.log(`\\n‚úÖ Swarm completed successfully!`);\n    console.log(`üìä Summary:`);\n    console.log(`  ‚Ä¢ Swarm ID: ${summary.id}`);\n    console.log(`  ‚Ä¢ Total Agents: ${summary.agents}`);\n    console.log(`  ‚Ä¢ Tasks Completed: ${summary.tasks.completed}`);\n    console.log(`  ‚Ä¢ Runtime: ${summary.runtime}s`);\n\n    // Save summary\n    const swarmDir = `./swarm-runs/${this.id}`;\n    await fs.writeFile(path.join(swarmDir, 'summary.json'), JSON.stringify(summary, null, 2));\n\n    return summary;\n  }\n}\n\n// Main execution function\nexport async function executeSwarm(objective, flags = {}) {\n  try {\n    // Parse configuration from flags\n    const config = {\n      name: generateId('swarm'),\n      description: objective,\n      mode: flags.mode || 'centralized',\n      strategy: flags.strategy || 'auto',\n      maxAgents: parseInt(flags['max-agents']) || 5,\n      maxTasks: parseInt(flags['max-tasks']) || 100,\n      timeout: (parseInt(flags.timeout) || 60) * 60 * 1000,\n      taskTimeoutMinutes: parseInt(flags['task-timeout-minutes']) || 59,\n      qualityThreshold: parseFloat(flags['quality-threshold']) || 0.8,\n      reviewRequired: flags.review || false,\n      testingRequired: flags.testing || false,\n      monitoring: {\n        enabled: flags.monitor || false,\n      },\n      memory: {\n        namespace: flags['memory-namespace'] || 'swarm',\n        persistent: flags.persistence !== false,\n      },\n      security: {\n        encryptionEnabled: flags.encryption || false,\n      },\n    };\n\n    // Initialize swarm coordinator\n    const coordinator = new SwarmCoordinator(config);\n    await coordinator.initialize();\n\n    // Spawn agents based on strategy\n    if (config.strategy === 'development' || config.strategy === 'auto') {\n      await coordinator.addAgent('architect', 'System Architect');\n      await coordinator.addAgent('coder', 'Backend Developer');\n      await coordinator.addAgent('coder', 'Frontend Developer');\n      await coordinator.addAgent('tester', 'QA Engineer');\n      await coordinator.addAgent('reviewer', 'Code Reviewer');\n    } else if (config.strategy === 'research') {\n      await coordinator.addAgent('researcher', 'Lead Researcher');\n      await coordinator.addAgent('analyst', 'Data Analyst');\n      await coordinator.addAgent('researcher', 'Research Assistant');\n    } else if (config.strategy === 'testing') {\n      await coordinator.addAgent('tester', 'Test Lead');\n      await coordinator.addAgent('tester', 'Integration Tester');\n      await coordinator.addAgent('tester', 'Performance Tester');\n    }\n\n    // Execute the main objective\n    await coordinator.executeTask(objective);\n\n    // Complete and return summary\n    const summary = await coordinator.complete();\n\n    return { success: true, summary };\n  } catch (error) {\n    console.error(`‚ùå Swarm execution failed: ${error.message}`);\n    return { success: false, error: error.message };\n  }\n}\n\n// Exports are already declared inline above\n"],"names":["promises","fs","path","generateId","prefix","timestamp","Date","now","toString","random","Math","substring","SwarmCoordinator","config","id","name","agents","tasks","status","startTime","initialize","console","log","description","strategy","mode","maxAgents","swarmDir","mkdir","recursive","writeFile","join","JSON","stringify","addAgent","type","agent","length","push","executeTask","task","taskObj","toLowerCase","includes","createAPIProject","runTests","genericTaskExecution","endTime","projectDir","serverCode","packageJson","version","main","scripts","start","dev","dependencies","express","devDependencies","nodemon","Promise","resolve","setTimeout","getStatus","total","completed","filter","t","in_progress","runtime","floor","complete","summary","executeSwarm","objective","flags","parseInt","maxTasks","timeout","taskTimeoutMinutes","qualityThreshold","parseFloat","reviewRequired","review","testingRequired","testing","monitoring","enabled","monitor","memory","namespace","persistent","persistence","security","encryptionEnabled","encryption","coordinator","success","error","message"],"mappings":"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"}