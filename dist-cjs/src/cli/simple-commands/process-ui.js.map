{"version":3,"sources":["../../../../src/cli/simple-commands/process-ui.js"],"sourcesContent":["// process-ui.js - Simple process management UI in pure JavaScript\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport process from 'process';\n\n// Simple color utilities\nconst colors = {\n  cyan: (text) => `\\x1b[36m${text}\\x1b[0m`,\n  gray: (text) => `\\x1b[90m${text}\\x1b[0m`,\n  white: (text) => `\\x1b[37m${text}\\x1b[0m`,\n  yellow: (text) => `\\x1b[33m${text}\\x1b[0m`,\n  green: (text) => `\\x1b[32m${text}\\x1b[0m`,\n  red: (text) => `\\x1b[31m${text}\\x1b[0m`,\n};\n\nconst PROCESSES = [\n  { id: 'event-bus', name: 'Event Bus', description: 'Central event distribution system' },\n  { id: 'orchestrator', name: 'Orchestrator', description: 'Main coordination engine' },\n  { id: 'memory-manager', name: 'Memory Manager', description: 'Persistent memory system' },\n  { id: 'terminal-pool', name: 'Terminal Pool', description: 'Terminal session management' },\n  { id: 'mcp-server', name: 'MCP Server', description: 'Model Context Protocol server' },\n  { id: 'coordinator', name: 'Coordinator', description: 'Task coordination service' },\n];\n\nexport class ProcessUI {\n  constructor() {\n    this.processes = new Map();\n    this.running = true;\n    this.selectedIndex = 0;\n\n    // Initialize process states\n    PROCESSES.forEach((p) => {\n      this.processes.set(p.id, {\n        ...p,\n        status: 'stopped',\n        pid: null,\n        uptime: 0,\n        cpu: 0,\n        memory: 0,\n      });\n    });\n  }\n\n  async start() {\n    // Clear screen\n    console.clear();\n\n    // Show welcome\n    printSuccess('üß† Claude-Flow Process Management UI v1.0.43');\n    console.log('‚îÄ'.repeat(60));\n    console.log();\n\n    // Initial render\n    this.render();\n\n    // Main UI loop\n    while (this.running) {\n      await this.handleInput();\n      if (this.running) {\n        // Only re-render if still running\n        this.render();\n      }\n    }\n  }\n\n  render() {\n    // Clear screen and move cursor to top\n    console.log('\\x1b[2J\\x1b[H');\n\n    // Header\n    console.log(colors.cyan('üß† Claude-Flow Process Manager'));\n    console.log(colors.gray('‚îÄ'.repeat(60)));\n    console.log();\n\n    // Process list\n    console.log(colors.white('Processes:'));\n    console.log();\n\n    let index = 0;\n    for (const [id, process] of this.processes) {\n      const selected = index === this.selectedIndex;\n      const prefix = selected ? colors.yellow('‚ñ∂ ') : '  ';\n      const status = this.getStatusIcon(process.status);\n      const name = selected ? colors.yellow(process.name) : colors.white(process.name);\n\n      console.log(`${prefix}[${index + 1}] ${status} ${name}`);\n      console.log(`     ${colors.gray(process.description)}`);\n\n      if (process.status === 'running') {\n        console.log(\n          `     ${colors.gray(`PID: ${process.pid} | Uptime: ${this.formatUptime(process.uptime)}`)}`,\n        );\n      }\n      console.log();\n\n      index++;\n    }\n\n    // Controls\n    console.log(colors.gray('‚îÄ'.repeat(60)));\n    console.log(colors.white('Controls:'));\n    console.log(\n      `  ${colors.yellow('1-6')} Select process   ${colors.yellow('Space/Enter')} Toggle selected`,\n    );\n    console.log(`  ${colors.yellow('A')} Start all         ${colors.yellow('Z')} Stop all`);\n    console.log(`  ${colors.yellow('R')} Restart all       ${colors.yellow('Q')} Quit`);\n    console.log();\n    console.log(colors.gray('‚îÄ'.repeat(60)));\n  }\n\n  getStatusIcon(status) {\n    switch (status) {\n      case 'running':\n        return colors.green('‚óè');\n      case 'stopped':\n        return colors.gray('‚óã');\n      case 'error':\n        return colors.red('‚úó');\n      case 'starting':\n        return colors.yellow('‚óê');\n      default:\n        return colors.gray('?');\n    }\n  }\n\n  formatUptime(seconds) {\n    if (seconds < 60) return `${seconds}s`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m`;\n    return `${Math.floor(seconds / 3600)}h`;\n  }\n\n  async handleInput() {\n    // Simple input reading\n    const decoder = new TextDecoder();\n    const encoder = new TextEncoder();\n\n    await Deno.stdout.write(encoder.encode('\\nCommand: '));\n\n    const buf = new Uint8Array(1024);\n    const n = await Deno.stdin.read(buf);\n    if (n === null) return;\n\n    const rawInput = decoder.decode(buf.subarray(0, n)).trim();\n    // Take only the first line if multiple lines were read\n    const input = rawInput.split('\\n')[0].toLowerCase();\n\n    // Handle commands\n    switch (input) {\n      case 'q':\n      case 'quit':\n        this.running = false;\n        console.clear();\n        printSuccess('Goodbye!');\n        process.exit(0); // Exit immediately\n        break;\n\n      case 'a':\n        await this.startAll();\n        break;\n\n      case 'z':\n        await this.stopAll();\n        break;\n\n      case 'r':\n        await this.restartAll();\n        break;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n        const index = parseInt(input) - 1;\n        if (index >= 0 && index < PROCESSES.length) {\n          this.selectedIndex = index;\n          await this.toggleSelected();\n        }\n        break;\n\n      case ' ':\n      case 'enter':\n      case '':\n        await this.toggleSelected();\n        break;\n\n      default:\n        if (input) {\n          console.log(colors.yellow(`Unknown command: ${input}`));\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n        }\n    }\n  }\n\n  async toggleSelected() {\n    const process = Array.from(this.processes.values())[this.selectedIndex];\n    if (process.status === 'stopped') {\n      await this.startProcess(process.id);\n    } else {\n      await this.stopProcess(process.id);\n    }\n  }\n\n  async startProcess(id) {\n    const process = this.processes.get(id);\n    if (!process) return;\n\n    console.log(colors.yellow(`Starting ${process.name}...`));\n    process.status = 'starting';\n\n    // Simulate startup\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    process.status = 'running';\n    process.pid = Math.floor(Math.random() * 10000) + 1000;\n    process.uptime = 0;\n\n    console.log(colors.green(`‚úì ${process.name} started`));\n\n    // Start uptime counter\n    const interval = setInterval(() => {\n      if (process.status === 'running') {\n        process.uptime++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 1000);\n  }\n\n  async stopProcess(id) {\n    const process = this.processes.get(id);\n    if (!process) return;\n\n    console.log(colors.yellow(`Stopping ${process.name}...`));\n    process.status = 'stopped';\n    process.pid = null;\n    process.uptime = 0;\n\n    await new Promise((resolve) => setTimeout(resolve, 300));\n    console.log(colors.green(`‚úì ${process.name} stopped`));\n  }\n\n  async startAll() {\n    console.log(colors.yellow('Starting all processes...'));\n    for (const [id, process] of this.processes) {\n      if (process.status === 'stopped') {\n        await this.startProcess(id);\n      }\n    }\n    console.log(colors.green('‚úì All processes started'));\n  }\n\n  async stopAll() {\n    console.log(colors.yellow('Stopping all processes...'));\n    for (const [id, process] of this.processes) {\n      if (process.status === 'running') {\n        await this.stopProcess(id);\n      }\n    }\n    console.log(colors.green('‚úì All processes stopped'));\n  }\n\n  async restartAll() {\n    await this.stopAll();\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    await this.startAll();\n  }\n}\n\nexport async function launchProcessUI() {\n  const ui = new ProcessUI();\n  await ui.start();\n}\n"],"names":["printSuccess","process","colors","cyan","text","gray","white","yellow","green","red","PROCESSES","id","name","description","ProcessUI","processes","Map","running","selectedIndex","forEach","p","set","status","pid","uptime","cpu","memory","start","console","clear","log","repeat","render","handleInput","index","selected","prefix","getStatusIcon","formatUptime","seconds","Math","floor","decoder","TextDecoder","encoder","TextEncoder","Deno","stdout","write","encode","buf","Uint8Array","n","stdin","read","rawInput","decode","subarray","trim","input","split","toLowerCase","exit","startAll","stopAll","restartAll","parseInt","length","toggleSelected","Promise","resolve","setTimeout","Array","from","values","startProcess","stopProcess","get","random","interval","setInterval","clearInterval","launchProcessUI","ui"],"mappings":"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"}