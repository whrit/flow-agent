{"version":3,"sources":["../../../../../src/cli/simple-commands/__tests__/swarm.test.js"],"sourcesContent":["/**\n * Tests for swarm command\n */\n\nimport { jest } from '@jest/globals';\nimport { swarmCommand } from '../swarm.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { spawn } from 'child_process';\nimport ora from 'ora';\n\njest.mock('fs-extra');\njest.mock('child_process');\njest.mock('ora');\n\ndescribe('Swarm Command', () => {\n  let consoleLogSpy;\n  let consoleErrorSpy;\n  let mockSpinner;\n  let mockSpawnProcess;\n\n  beforeEach(() => {\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n    mockSpinner = {\n      start: jest.fn().mockReturnThis(),\n      succeed: jest.fn().mockReturnThis(),\n      fail: jest.fn().mockReturnThis(),\n      info: jest.fn().mockReturnThis(),\n      warn: jest.fn().mockReturnThis(),\n      text: '',\n    };\n    ora.mockReturnValue(mockSpinner);\n\n    mockSpawnProcess = {\n      stdout: { on: jest.fn() },\n      stderr: { on: jest.fn() },\n      on: jest.fn(),\n    };\n    spawn.mockReturnValue(mockSpawnProcess);\n\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('main swarm command', () => {\n    test('should initialize swarm with objective', async () => {\n      const swarmDir = path.join(process.cwd(), '.claude', 'swarm');\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      // Mock spawn process events\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') {\n          setTimeout(() => callback(0), 100);\n        }\n      });\n\n      await swarmCommand(['Build a REST API'], {});\n\n      expect(mockSpinner.start).toHaveBeenCalledWith('Initializing swarm...');\n      expect(fs.ensureDir).toHaveBeenCalledWith(swarmDir);\n\n      const writeJsonCall = fs.writeJson.mock.calls[0];\n      expect(writeJsonCall[0]).toBe(path.join(swarmDir, 'swarm.json'));\n      expect(writeJsonCall[1]).toMatchObject({\n        objective: 'Build a REST API',\n        status: 'initializing',\n        topology: 'hierarchical',\n        strategy: 'adaptive',\n      });\n    });\n\n    test('should handle custom strategy', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') callback(0);\n      });\n\n      await swarmCommand(['Research task'], { strategy: 'research' });\n\n      const writeJsonCall = fs.writeJson.mock.calls[0];\n      expect(writeJsonCall[1].strategy).toBe('research');\n    });\n\n    test('should handle custom topology mode', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') callback(0);\n      });\n\n      await swarmCommand(['Task'], { mode: 'mesh' });\n\n      const writeJsonCall = fs.writeJson.mock.calls[0];\n      expect(writeJsonCall[1].topology).toBe('mesh');\n    });\n\n    test('should set max agents', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') callback(0);\n      });\n\n      await swarmCommand(['Task'], { 'max-agents': '10' });\n\n      const writeJsonCall = fs.writeJson.mock.calls[0];\n      expect(writeJsonCall[1].maxAgents).toBe(10);\n    });\n\n    test('should enable parallel execution', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') callback(0);\n      });\n\n      await swarmCommand(['Task'], { parallel: true });\n\n      const writeJsonCall = fs.writeJson.mock.calls[0];\n      expect(writeJsonCall[1].parallel).toBe(true);\n    });\n\n    test('should enable monitoring', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'close') callback(0);\n      });\n\n      await swarmCommand(['Task'], { monitor: true });\n\n      expect(spawn).toHaveBeenCalledWith(\n        'npx',\n        expect.arrayContaining(['--monitor']),\n        expect.any(Object),\n      );\n    });\n  });\n\n  describe('swarm status', () => {\n    test('should show swarm status', async () => {\n      const mockSwarmData = {\n        id: 'swarm-123',\n        objective: 'Build API',\n        status: 'active',\n        topology: 'hierarchical',\n        agents: [\n          { id: 'agent-1', type: 'researcher', status: 'active' },\n          { id: 'agent-2', type: 'coder', status: 'working' },\n        ],\n        metrics: {\n          startTime: new Date(Date.now() - 300000).toISOString(),\n          tasksCompleted: 15,\n          tasksInProgress: 3,\n          tasksPending: 7,\n        },\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n\n      await swarmCommand(['status'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Swarm Status');\n      expect(output).toContain('Build API');\n      expect(output).toContain('active');\n      expect(output).toContain('hierarchical');\n      expect(output).toContain('2 agents');\n      expect(output).toContain('15 completed');\n    });\n\n    test('should show no active swarm message', async () => {\n      fs.pathExists.mockResolvedValue(false);\n\n      await swarmCommand(['status'], {});\n\n      expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('No active swarm found'));\n    });\n  });\n\n  describe('swarm stop', () => {\n    test('should stop active swarm', async () => {\n      const mockSwarmData = {\n        id: 'swarm-123',\n        status: 'active',\n        agents: [{ id: 'agent-1' }, { id: 'agent-2' }],\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n      fs.writeJson.mockResolvedValue(undefined);\n      fs.remove.mockResolvedValue(undefined);\n\n      await swarmCommand(['stop'], {});\n\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('Swarm stopped successfully');\n      expect(fs.remove).toHaveBeenCalledWith(\n        path.join(process.cwd(), '.claude', 'swarm', 'swarm.json'),\n      );\n    });\n\n    test('should handle stop with force flag', async () => {\n      fs.pathExists.mockResolvedValue(true);\n      fs.remove.mockResolvedValue(undefined);\n\n      await swarmCommand(['stop'], { force: true });\n\n      expect(fs.remove).toHaveBeenCalled();\n      expect(mockSpinner.warn).toHaveBeenCalledWith('Swarm forcefully terminated');\n    });\n  });\n\n  describe('swarm pause/resume', () => {\n    test('should pause active swarm', async () => {\n      const mockSwarmData = {\n        id: 'swarm-123',\n        status: 'active',\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await swarmCommand(['pause'], {});\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].status).toBe('paused');\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('Swarm paused');\n    });\n\n    test('should resume paused swarm', async () => {\n      const mockSwarmData = {\n        id: 'swarm-123',\n        status: 'paused',\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await swarmCommand(['resume'], {});\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].status).toBe('active');\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('Swarm resumed');\n    });\n  });\n\n  describe('swarm logs', () => {\n    test('should display swarm logs', async () => {\n      const mockLogs = [\n        { timestamp: new Date().toISOString(), level: 'info', message: 'Swarm initialized' },\n        { timestamp: new Date().toISOString(), level: 'info', message: 'Agent spawned' },\n        { timestamp: new Date().toISOString(), level: 'error', message: 'Task failed' },\n      ];\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({ logs: mockLogs });\n\n      await swarmCommand(['logs'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Swarm Logs');\n      expect(output).toContain('Swarm initialized');\n      expect(output).toContain('Agent spawned');\n      expect(output).toContain('Task failed');\n    });\n\n    test('should filter logs by level', async () => {\n      const mockLogs = [\n        { timestamp: new Date().toISOString(), level: 'info', message: 'Info message' },\n        { timestamp: new Date().toISOString(), level: 'error', message: 'Error message' },\n        { timestamp: new Date().toISOString(), level: 'debug', message: 'Debug message' },\n      ];\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({ logs: mockLogs });\n\n      await swarmCommand(['logs'], { level: 'error' });\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Error message');\n      expect(output).not.toContain('Info message');\n      expect(output).not.toContain('Debug message');\n    });\n\n    test('should tail logs', async () => {\n      const mockLogs = Array.from({ length: 50 }, (_, i) => ({\n        timestamp: new Date().toISOString(),\n        level: 'info',\n        message: `Log entry ${i + 1}`,\n      }));\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({ logs: mockLogs });\n\n      await swarmCommand(['logs'], { tail: '10' });\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Log entry 50');\n      expect(output).toContain('Log entry 41');\n      expect(output).not.toContain('Log entry 40');\n    });\n  });\n\n  describe('error handling', () => {\n    test('should handle missing objective', async () => {\n      await swarmCommand([], {});\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('objective is required'),\n      );\n    });\n\n    test('should handle invalid strategy', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await swarmCommand(['Task'], { strategy: 'invalid-strategy' });\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('Invalid strategy'));\n    });\n\n    test('should handle spawn process errors', async () => {\n      fs.ensureDir.mockResolvedValue(undefined);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      mockSpawnProcess.on.mockImplementation((event, callback) => {\n        if (event === 'error') callback(new Error('Spawn failed'));\n      });\n\n      await swarmCommand(['Task'], {});\n\n      expect(mockSpinner.fail).toHaveBeenCalledWith(\n        expect.stringContaining('Failed to initialize swarm'),\n      );\n    });\n\n    test('should handle file system errors', async () => {\n      fs.ensureDir.mockRejectedValue(new Error('Permission denied'));\n\n      await swarmCommand(['Task'], {});\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('Error:'));\n    });\n  });\n\n  describe('help', () => {\n    test('should show help for invalid subcommand', async () => {\n      await swarmCommand(['invalid'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Swarm Orchestration');\n      expect(output).toContain('USAGE:');\n    });\n  });\n});\n"],"names":["jest","swarmCommand","fs","path","spawn","ora","mock","describe","consoleLogSpy","consoleErrorSpy","mockSpinner","mockSpawnProcess","beforeEach","spyOn","console","mockImplementation","start","fn","mockReturnThis","succeed","fail","info","warn","text","mockReturnValue","stdout","on","stderr","clearAllMocks","afterEach","mockRestore","test","swarmDir","join","process","cwd","ensureDir","mockResolvedValue","undefined","writeJson","event","callback","setTimeout","expect","toHaveBeenCalledWith","writeJsonCall","calls","toBe","toMatchObject","objective","status","topology","strategy","mode","maxAgents","parallel","monitor","arrayContaining","any","Object","mockSwarmData","id","agents","type","metrics","startTime","Date","now","toISOString","tasksCompleted","tasksInProgress","tasksPending","pathExists","readJson","output","flat","toContain","stringContaining","remove","force","toHaveBeenCalled","writeCall","mockLogs","timestamp","level","message","logs","not","Array","from","length","_","i","tail","Error","mockRejectedValue"],"mappings":"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"}