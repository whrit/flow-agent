{"version":3,"sources":["../../../../../src/cli/simple-commands/__tests__/agent.test.js"],"sourcesContent":["/**\n * Tests for agent command\n */\n\nimport { jest } from '@jest/globals';\nimport { agentCommand } from '../agent.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\njest.mock('fs-extra');\njest.mock('ora');\njest.mock('chalk', () => ({\n  default: {\n    blue: jest.fn((str) => str),\n    green: jest.fn((str) => str),\n    yellow: jest.fn((str) => str),\n    red: jest.fn((str) => str),\n    cyan: jest.fn((str) => str),\n    dim: jest.fn((str) => str),\n    bold: jest.fn((str) => str),\n  },\n}));\n\ndescribe('Agent Command', () => {\n  let consoleLogSpy;\n  let consoleErrorSpy;\n  let mockSpinner;\n\n  beforeEach(() => {\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n    mockSpinner = {\n      start: jest.fn().mockReturnThis(),\n      succeed: jest.fn().mockReturnThis(),\n      fail: jest.fn().mockReturnThis(),\n      info: jest.fn().mockReturnThis(),\n      text: '',\n    };\n    ora.mockReturnValue(mockSpinner);\n\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('list subcommand', () => {\n    test('should list available agent types', async () => {\n      await agentCommand(['list'], {});\n\n      expect(consoleLogSpy).toHaveBeenCalled();\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n\n      expect(output).toContain('Available Agent Types');\n      expect(output).toContain('researcher');\n      expect(output).toContain('coder');\n      expect(output).toContain('analyst');\n      expect(output).toContain('architect');\n      expect(output).toContain('tester');\n      expect(output).toContain('coordinator');\n    });\n  });\n\n  describe('spawn subcommand', () => {\n    test('should spawn an agent with type', async () => {\n      const swarmDir = path.join(process.cwd(), '.claude', 'swarm');\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({\n        id: 'swarm-123',\n        agents: [],\n        status: 'active',\n      });\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await agentCommand(['spawn', 'researcher'], {});\n\n      expect(mockSpinner.start).toHaveBeenCalledWith('Spawning researcher agent...');\n      expect(mockSpinner.succeed).toHaveBeenCalled();\n      expect(fs.writeJson).toHaveBeenCalled();\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].agents).toHaveLength(1);\n      expect(writeCall[1].agents[0].type).toBe('researcher');\n    });\n\n    test('should spawn agent with custom name', async () => {\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({\n        id: 'swarm-123',\n        agents: [],\n        status: 'active',\n      });\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await agentCommand(['spawn', 'coder'], { name: 'CustomCoder' });\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].agents[0].name).toBe('CustomCoder');\n    });\n\n    test('should error if swarm not initialized', async () => {\n      fs.pathExists.mockResolvedValue(false);\n\n      await agentCommand(['spawn', 'researcher'], {});\n\n      expect(mockSpinner.fail).toHaveBeenCalledWith(\n        expect.stringContaining('No active swarm found'),\n      );\n    });\n\n    test('should error for invalid agent type', async () => {\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({ agents: [] });\n\n      await agentCommand(['spawn', 'invalid-type'], {});\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('Invalid agent type'));\n    });\n  });\n\n  describe('status subcommand', () => {\n    test('should show agent status', async () => {\n      const mockSwarmData = {\n        id: 'swarm-123',\n        agents: [\n          {\n            id: 'agent-1',\n            name: 'Researcher',\n            type: 'researcher',\n            status: 'active',\n            created: new Date().toISOString(),\n            tasksCompleted: 5,\n            currentTask: 'Analyzing data',\n          },\n          {\n            id: 'agent-2',\n            name: 'Coder',\n            type: 'coder',\n            status: 'idle',\n            created: new Date().toISOString(),\n            tasksCompleted: 3,\n            currentTask: null,\n          },\n        ],\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n\n      await agentCommand(['status'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Active Agents');\n      expect(output).toContain('Researcher');\n      expect(output).toContain('active');\n      expect(output).toContain('Analyzing data');\n      expect(output).toContain('Coder');\n      expect(output).toContain('idle');\n    });\n\n    test('should show specific agent status', async () => {\n      const mockSwarmData = {\n        agents: [\n          {\n            id: 'agent-1',\n            name: 'Researcher',\n            type: 'researcher',\n            status: 'active',\n            metrics: {\n              tasksCompleted: 10,\n              avgCompletionTime: 5000,\n              successRate: 0.95,\n            },\n          },\n        ],\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n\n      await agentCommand(['status', 'agent-1'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Agent Details');\n      expect(output).toContain('Researcher');\n      expect(output).toContain('Tasks Completed: 10');\n      expect(output).toContain('Success Rate: 95%');\n    });\n  });\n\n  describe('remove subcommand', () => {\n    test('should remove an agent', async () => {\n      const mockSwarmData = {\n        agents: [\n          { id: 'agent-1', name: 'Researcher' },\n          { id: 'agent-2', name: 'Coder' },\n        ],\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await agentCommand(['remove', 'agent-1'], {});\n\n      expect(mockSpinner.succeed).toHaveBeenCalledWith(\n        expect.stringContaining('Agent agent-1 removed'),\n      );\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].agents).toHaveLength(1);\n      expect(writeCall[1].agents[0].id).toBe('agent-2');\n    });\n\n    test('should error if agent not found', async () => {\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue({ agents: [] });\n\n      await agentCommand(['remove', 'nonexistent'], {});\n\n      expect(mockSpinner.fail).toHaveBeenCalledWith(\n        expect.stringContaining('Agent nonexistent not found'),\n      );\n    });\n  });\n\n  describe('assign subcommand', () => {\n    test('should assign task to agent', async () => {\n      const mockSwarmData = {\n        agents: [{ id: 'agent-1', name: 'Researcher', currentTask: null }],\n      };\n\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockResolvedValue(mockSwarmData);\n      fs.writeJson.mockResolvedValue(undefined);\n\n      await agentCommand(['assign', 'agent-1', 'Research new algorithms'], {});\n\n      expect(mockSpinner.succeed).toHaveBeenCalledWith(\n        expect.stringContaining('Task assigned to agent-1'),\n      );\n\n      const writeCall = fs.writeJson.mock.calls[0];\n      expect(writeCall[1].agents[0].currentTask).toBe('Research new algorithms');\n      expect(writeCall[1].agents[0].status).toBe('working');\n    });\n  });\n\n  describe('help subcommand', () => {\n    test('should show help when no arguments', async () => {\n      await agentCommand([], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Agent Management');\n      expect(output).toContain('USAGE:');\n      expect(output).toContain('agent <subcommand>');\n      expect(output).toContain('SUBCOMMANDS:');\n    });\n\n    test('should show help for help subcommand', async () => {\n      await agentCommand(['help'], {});\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('Agent Management');\n    });\n  });\n\n  describe('error handling', () => {\n    test('should handle file read errors gracefully', async () => {\n      fs.pathExists.mockResolvedValue(true);\n      fs.readJson.mockRejectedValue(new Error('Permission denied'));\n\n      await agentCommand(['status'], {});\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('Error:'));\n    });\n\n    test('should handle invalid subcommands', async () => {\n      await agentCommand(['invalid-subcommand'], {});\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Unknown subcommand: invalid-subcommand'),\n      );\n    });\n  });\n});\n"],"names":["jest","agentCommand","fs","path","ora","mock","default","blue","fn","str","green","yellow","red","cyan","dim","bold","describe","consoleLogSpy","consoleErrorSpy","mockSpinner","beforeEach","spyOn","console","mockImplementation","start","mockReturnThis","succeed","fail","info","text","mockReturnValue","clearAllMocks","afterEach","mockRestore","test","expect","toHaveBeenCalled","output","calls","flat","join","toContain","swarmDir","process","cwd","pathExists","mockResolvedValue","readJson","id","agents","status","writeJson","undefined","toHaveBeenCalledWith","writeCall","toHaveLength","type","toBe","name","stringContaining","mockSwarmData","created","Date","toISOString","tasksCompleted","currentTask","metrics","avgCompletionTime","successRate","mockRejectedValue","Error"],"mappings":"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"}