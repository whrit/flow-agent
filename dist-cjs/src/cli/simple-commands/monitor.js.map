{"version":3,"sources":["../../../../src/cli/simple-commands/monitor.js"],"sourcesContent":["// monitor.js - System monitoring commands with real metrics\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport os from 'os';\nimport { performance } from 'perf_hooks';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport async function monitorCommand(subArgs, flags) {\n  const interval = getFlag(subArgs, '--interval') || flags.interval || 5000;\n  const format = getFlag(subArgs, '--format') || flags.format || 'pretty';\n  const continuous = subArgs.includes('--watch') || flags.watch;\n\n  if (continuous) {\n    await runContinuousMonitoring(interval, format);\n  } else {\n    await showCurrentMetrics(format);\n  }\n}\n\nasync function showCurrentMetrics(format) {\n  const metrics = await collectMetrics();\n\n  if (format === 'json') {\n    console.log(JSON.stringify(metrics, null, 2));\n  } else {\n    displayMetrics(metrics);\n  }\n}\n\nasync function runContinuousMonitoring(interval, format) {\n  printSuccess(`Starting continuous monitoring (interval: ${interval}ms)`);\n  console.log('Press Ctrl+C to stop monitoring\\n');\n\n  // Set up signal handler for graceful shutdown\n  let monitorInterval;\n  const cleanup = () => {\n    if (monitorInterval) {\n      clearInterval(monitorInterval);\n    }\n    console.log('\\nüëã Monitoring stopped');\n    process.exit(0);\n  };\n\n  process.on('SIGINT', cleanup);\n  process.on('SIGTERM', cleanup);\n\n  // Initial display\n  const initialMetrics = await collectMetrics();\n  console.clear();\n  console.log(`üîÑ Monitoring Claude-Flow System`);\n  console.log(`‚è∞ ${new Date().toLocaleTimeString()}\\n`);\n\n  if (format === 'json') {\n    console.log(JSON.stringify(initialMetrics, null, 2));\n  } else {\n    displayMetrics(initialMetrics);\n  }\n\n  console.log(`\\nüîÑ Next update in ${interval}ms...`);\n\n  // Start continuous monitoring\n  monitorInterval = setInterval(async () => {\n    console.clear();\n    console.log(`üîÑ Monitoring Claude-Flow System`);\n    console.log(`‚è∞ ${new Date().toLocaleTimeString()}\\n`);\n\n    const metrics = await collectMetrics();\n\n    if (format === 'json') {\n      console.log(JSON.stringify(metrics, null, 2));\n    } else {\n      displayMetrics(metrics);\n    }\n\n    console.log(`\\nüîÑ Next update in ${interval}ms...`);\n  }, interval);\n}\n\nasync function collectMetrics() {\n  const timestamp = Date.now();\n\n  // Collect real system metrics\n  const cpuUsage = await getCPUUsage();\n  const memoryInfo = getMemoryInfo();\n  const diskUsage = await getDiskUsage();\n  const systemUptime = os.uptime();\n\n  // Try to get orchestrator metrics from file or socket\n  const orchestratorMetrics = await getOrchestratorMetrics();\n\n  // Collect performance metrics\n  const performanceMetrics = getPerformanceMetrics();\n\n  // Collect resource utilization\n  const resourceMetrics = await getResourceMetrics();\n\n  return {\n    timestamp,\n    system: {\n      uptime: systemUptime,\n      cpu_usage: cpuUsage,\n      memory_usage: memoryInfo.usedMB,\n      memory_total: memoryInfo.totalMB,\n      memory_percentage: memoryInfo.percentage,\n      disk_usage: diskUsage.percentage,\n      disk_used: diskUsage.usedGB,\n      disk_total: diskUsage.totalGB,\n      load_average: os.loadavg(),\n      cpu_count: os.cpus().length,\n      platform: os.platform(),\n      node_version: process.version,\n    },\n    orchestrator: orchestratorMetrics,\n    performance: performanceMetrics,\n    resources: resourceMetrics,\n  };\n}\n\n// Get real CPU usage\nasync function getCPUUsage() {\n  const cpus = os.cpus();\n  let totalIdle = 0;\n  let totalTick = 0;\n\n  cpus.forEach((cpu) => {\n    for (const type in cpu.times) {\n      totalTick += cpu.times[type];\n    }\n    totalIdle += cpu.times.idle;\n  });\n\n  const idle = totalIdle / cpus.length;\n  const total = totalTick / cpus.length;\n  const usage = 100 - ~~((100 * idle) / total);\n\n  return Math.max(0, Math.min(100, usage));\n}\n\n// Get real memory information\nfunction getMemoryInfo() {\n  const totalMem = os.totalmem();\n  const freeMem = os.freemem();\n  const usedMem = totalMem - freeMem;\n\n  return {\n    totalMB: Math.round(totalMem / 1024 / 1024),\n    freeMB: Math.round(freeMem / 1024 / 1024),\n    usedMB: Math.round(usedMem / 1024 / 1024),\n    percentage: Math.round((usedMem / totalMem) * 100),\n  };\n}\n\n// Get real disk usage (simplified - checks current working directory)\nasync function getDiskUsage() {\n  try {\n    const stats = await fs.statfs(process.cwd());\n    const totalBytes = stats.blocks * stats.bsize;\n    const freeBytes = stats.bavail * stats.bsize;\n    const usedBytes = totalBytes - freeBytes;\n\n    return {\n      totalGB: Math.round((totalBytes / 1024 / 1024 / 1024) * 10) / 10,\n      usedGB: Math.round((usedBytes / 1024 / 1024 / 1024) * 10) / 10,\n      freeGB: Math.round((freeBytes / 1024 / 1024 / 1024) * 10) / 10,\n      percentage: Math.round((usedBytes / totalBytes) * 100),\n    };\n  } catch (error) {\n    // Fallback for older Node.js versions or unsupported platforms\n    return {\n      totalGB: 0,\n      usedGB: 0,\n      freeGB: 0,\n      percentage: 0,\n    };\n  }\n}\n\n// Get orchestrator metrics from running instance\nasync function getOrchestratorMetrics() {\n  try {\n    // Try to read from metrics file if orchestrator is running\n    const metricsPath = path.join(process.cwd(), '.claude-flow', 'metrics.json');\n    const metricsData = await fs.readFile(metricsPath, 'utf8');\n    const metrics = JSON.parse(metricsData);\n\n    return {\n      status: 'running',\n      active_agents: metrics.activeAgents || 0,\n      queued_tasks: metrics.queuedTasks || 0,\n      completed_tasks: metrics.completedTasks || 0,\n      failed_tasks: metrics.failedTasks || 0,\n      errors: metrics.errors || 0,\n      uptime: metrics.uptime || 0,\n    };\n  } catch (error) {\n    // Check if orchestrator process is running\n    const isRunning = await checkOrchestratorRunning();\n\n    return {\n      status: isRunning ? 'running' : 'stopped',\n      active_agents: 0,\n      queued_tasks: 0,\n      completed_tasks: 0,\n      failed_tasks: 0,\n      errors: 0,\n      uptime: 0,\n    };\n  }\n}\n\n// Check if orchestrator is running\nasync function checkOrchestratorRunning() {\n  try {\n    const pidPath = path.join(process.cwd(), '.claude-flow', 'orchestrator.pid');\n    const pidData = await fs.readFile(pidPath, 'utf8');\n    const pid = parseInt(pidData.trim());\n\n    // Check if process is running\n    process.kill(pid, 0);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// Get performance metrics\nfunction getPerformanceMetrics() {\n  const memUsage = process.memoryUsage();\n  const cpuUsage = process.cpuUsage();\n\n  return {\n    avg_task_duration: 0, // Would need to track actual tasks\n    throughput: 0, // Would need to track actual throughput\n    success_rate: 100, // Default to 100% if no errors\n    memory_heap_used: Math.round((memUsage.heapUsed / 1024 / 1024) * 100) / 100,\n    memory_heap_total: Math.round((memUsage.heapTotal / 1024 / 1024) * 100) / 100,\n    memory_external: Math.round((memUsage.external / 1024 / 1024) * 100) / 100,\n    cpu_user: Math.round(cpuUsage.user / 1000), // Convert to milliseconds\n    cpu_system: Math.round(cpuUsage.system / 1000),\n  };\n}\n\n// Get resource metrics\nasync function getResourceMetrics() {\n  try {\n    // Count memory entries from memory database if available\n    const memoryDbPath = path.join(process.cwd(), '.claude-flow', 'memory.db');\n    const memoryExists = await fs\n      .access(memoryDbPath)\n      .then(() => true)\n      .catch(() => false);\n\n    // Count terminal sessions\n    const terminalSessions = await countTerminalSessions();\n\n    // Count MCP connections\n    const mcpConnections = await countMCPConnections();\n\n    return {\n      memory_entries: memoryExists ? 'Available' : 0,\n      terminal_sessions: terminalSessions,\n      mcp_connections: mcpConnections,\n      open_files: process._getActiveHandles ? process._getActiveHandles().length : 0,\n      open_requests: process._getActiveRequests ? process._getActiveRequests().length : 0,\n    };\n  } catch (error) {\n    return {\n      memory_entries: 0,\n      terminal_sessions: 0,\n      mcp_connections: 0,\n      open_files: 0,\n      open_requests: 0,\n    };\n  }\n}\n\n// Count active terminal sessions\nasync function countTerminalSessions() {\n  try {\n    const sessionsPath = path.join(process.cwd(), '.claude-flow', 'sessions');\n    const files = await fs.readdir(sessionsPath);\n    return files.filter((f) => f.endsWith('.json')).length;\n  } catch {\n    return 0;\n  }\n}\n\n// Count MCP connections\nasync function countMCPConnections() {\n  try {\n    const mcpPath = path.join(process.cwd(), '.claude-flow', 'mcp-connections.json');\n    const data = await fs.readFile(mcpPath, 'utf8');\n    const connections = JSON.parse(data);\n    return Array.isArray(connections) ? connections.length : 0;\n  } catch {\n    return 0;\n  }\n}\n\nfunction displayMetrics(metrics) {\n  const timestamp = new Date(metrics.timestamp).toLocaleTimeString();\n\n  console.log('üìä System Metrics');\n  console.log('================');\n\n  // System metrics\n  console.log('\\nüñ•Ô∏è  System Resources:');\n  console.log(`   Platform: ${metrics.system.platform} (${metrics.system.cpu_count} CPUs)`);\n  console.log(`   Node Version: ${metrics.system.node_version}`);\n  console.log(`   CPU Usage: ${metrics.system.cpu_usage.toFixed(1)}%`);\n  console.log(\n    `   Memory: ${metrics.system.memory_usage.toFixed(1)} MB / ${metrics.system.memory_total.toFixed(1)} MB (${metrics.system.memory_percentage}%)`,\n  );\n  console.log(\n    `   Disk Usage: ${metrics.system.disk_used} GB / ${metrics.system.disk_total} GB (${metrics.system.disk_usage}%)`,\n  );\n  console.log(\n    `   Load Average: ${metrics.system.load_average.map((l) => l.toFixed(2)).join(', ')}`,\n  );\n  console.log(`   Uptime: ${formatUptime(metrics.system.uptime)}`);\n\n  // Orchestrator metrics\n  console.log('\\nüé≠ Orchestrator:');\n  console.log(\n    `   Status: ${getStatusIcon(metrics.orchestrator.status)} ${metrics.orchestrator.status}`,\n  );\n  if (metrics.orchestrator.status === 'running') {\n    console.log(`   Active Agents: ${metrics.orchestrator.active_agents}`);\n    console.log(`   Queued Tasks: ${metrics.orchestrator.queued_tasks}`);\n    console.log(`   Completed: ${metrics.orchestrator.completed_tasks}`);\n    console.log(`   Failed: ${metrics.orchestrator.failed_tasks}`);\n    console.log(`   Errors: ${metrics.orchestrator.errors}`);\n    if (metrics.orchestrator.uptime > 0) {\n      console.log(\n        `   Orchestrator Uptime: ${formatUptime(Math.floor(metrics.orchestrator.uptime / 1000))}`,\n      );\n    }\n  }\n\n  // Performance metrics\n  console.log('\\n‚ö° Performance:');\n  console.log(\n    `   Process Memory (Heap): ${metrics.performance.memory_heap_used.toFixed(1)} MB / ${metrics.performance.memory_heap_total.toFixed(1)} MB`,\n  );\n  console.log(`   External Memory: ${metrics.performance.memory_external.toFixed(1)} MB`);\n  console.log(`   CPU Time (User): ${metrics.performance.cpu_user}ms`);\n  console.log(`   CPU Time (System): ${metrics.performance.cpu_system}ms`);\n  if (metrics.performance.avg_task_duration > 0) {\n    console.log(`   Avg Task Duration: ${metrics.performance.avg_task_duration.toFixed(0)}ms`);\n    console.log(`   Throughput: ${metrics.performance.throughput.toFixed(1)} tasks/min`);\n    console.log(`   Success Rate: ${metrics.performance.success_rate.toFixed(1)}%`);\n  }\n\n  // Resource utilization\n  console.log('\\nüì¶ Resources:');\n  console.log(`   Memory Entries: ${metrics.resources.memory_entries}`);\n  console.log(`   Terminal Sessions: ${metrics.resources.terminal_sessions}`);\n  console.log(`   MCP Connections: ${metrics.resources.mcp_connections}`);\n  console.log(`   Open File Handles: ${metrics.resources.open_files}`);\n  console.log(`   Active Requests: ${metrics.resources.open_requests}`);\n\n  console.log(`\\n‚è∞ Last Updated: ${timestamp}`);\n}\n\nfunction getStatusIcon(status) {\n  switch (status) {\n    case 'running':\n      return 'üü¢';\n    case 'stopped':\n      return 'üî¥';\n    case 'starting':\n      return 'üü°';\n    case 'error':\n      return '‚ùå';\n    default:\n      return '‚ö™';\n  }\n}\n\nfunction formatUptime(seconds) {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n\n  if (days > 0) {\n    return `${days}d ${hours}h ${minutes}m`;\n  } else if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n}\n\nfunction getFlag(args, flagName) {\n  const index = args.indexOf(flagName);\n  return index !== -1 && index + 1 < args.length ? args[index + 1] : null;\n}\n\nexport function showMonitorHelp() {\n  console.log('Monitor commands:');\n  console.log('  monitor [options]                Show current system metrics');\n  console.log('  monitor --watch                  Continuous monitoring mode');\n  console.log();\n  console.log('Options:');\n  console.log('  --interval <ms>                  Update interval in milliseconds (default: 5000)');\n  console.log('  --format <type>                  Output format: pretty, json (default: pretty)');\n  console.log('  --watch                          Continuous monitoring mode');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow monitor              # Show current metrics');\n  console.log('  claude-flow monitor --watch      # Continuous monitoring');\n  console.log('  claude-flow monitor --interval 1000 --watch  # Fast updates');\n  console.log('  claude-flow monitor --format json            # JSON output');\n}\n"],"names":["printSuccess","os","fs","path","monitorCommand","subArgs","flags","interval","getFlag","format","continuous","includes","watch","runContinuousMonitoring","showCurrentMetrics","metrics","collectMetrics","console","log","JSON","stringify","displayMetrics","monitorInterval","cleanup","clearInterval","process","exit","on","initialMetrics","clear","Date","toLocaleTimeString","setInterval","timestamp","now","cpuUsage","getCPUUsage","memoryInfo","getMemoryInfo","diskUsage","getDiskUsage","systemUptime","uptime","orchestratorMetrics","getOrchestratorMetrics","performanceMetrics","getPerformanceMetrics","resourceMetrics","getResourceMetrics","system","cpu_usage","memory_usage","usedMB","memory_total","totalMB","memory_percentage","percentage","disk_usage","disk_used","usedGB","disk_total","totalGB","load_average","loadavg","cpu_count","cpus","length","platform","node_version","version","orchestrator","performance","resources","totalIdle","totalTick","forEach","cpu","type","times","idle","total","usage","Math","max","min","totalMem","totalmem","freeMem","freemem","usedMem","round","freeMB","stats","statfs","cwd","totalBytes","blocks","bsize","freeBytes","bavail","usedBytes","freeGB","error","metricsPath","join","metricsData","readFile","parse","status","active_agents","activeAgents","queued_tasks","queuedTasks","completed_tasks","completedTasks","failed_tasks","failedTasks","errors","isRunning","checkOrchestratorRunning","pidPath","pidData","pid","parseInt","trim","kill","memUsage","memoryUsage","avg_task_duration","throughput","success_rate","memory_heap_used","heapUsed","memory_heap_total","heapTotal","memory_external","external","cpu_user","user","cpu_system","memoryDbPath","memoryExists","access","then","catch","terminalSessions","countTerminalSessions","mcpConnections","countMCPConnections","memory_entries","terminal_sessions","mcp_connections","open_files","_getActiveHandles","open_requests","_getActiveRequests","sessionsPath","files","readdir","filter","f","endsWith","mcpPath","data","connections","Array","isArray","toFixed","map","l","formatUptime","getStatusIcon","floor","seconds","days","hours","minutes","secs","args","flagName","index","indexOf","showMonitorHelp"],"mappings":"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"}