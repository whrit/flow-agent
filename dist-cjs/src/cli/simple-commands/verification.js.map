{"version":3,"sources":["../../../../src/cli/simple-commands/verification.js"],"sourcesContent":["/**\n * Verification and Truth Enforcement System\n * Implements mandatory verification for multi-agent operations\n */\n\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\n\nconst execAsync = promisify(exec);\n\n// Verification modes\nconst VERIFICATION_MODES = {\n  strict: { threshold: 0.95, autoRollback: true, requireConsensus: true },\n  moderate: { threshold: 0.85, autoRollback: false, requireConsensus: true },\n  development: { threshold: 0.75, autoRollback: false, requireConsensus: false }\n};\n\n// Agent-specific verification requirements\nconst AGENT_VERIFICATION = {\n  coder: ['compile', 'test', 'lint', 'typecheck'],\n  reviewer: ['code-analysis', 'security-scan', 'performance-check'],\n  tester: ['unit-tests', 'integration-tests', 'coverage-check'],\n  planner: ['task-decomposition', 'dependency-check', 'feasibility'],\n  architect: ['design-validation', 'scalability-check', 'pattern-compliance']\n};\n\nclass VerificationSystem {\n  constructor() {\n    this.mode = 'moderate';\n    this.scores = new Map();\n    this.verificationHistory = [];\n    this.memoryPath = '.swarm/verification-memory.json';\n  }\n\n  async initialize(mode = 'moderate') {\n    this.mode = mode;\n    await this.loadMemory();\n    console.log(`✅ Verification system initialized in ${mode} mode`);\n    console.log(`   Threshold: ${VERIFICATION_MODES[mode].threshold}`);\n    console.log(`   Auto-rollback: ${VERIFICATION_MODES[mode].autoRollback}`);\n    console.log(`   Consensus required: ${VERIFICATION_MODES[mode].requireConsensus}`);\n  }\n\n  async loadMemory() {\n    try {\n      const data = await fs.readFile(this.memoryPath, 'utf8');\n      const memory = JSON.parse(data);\n      this.scores = new Map(memory.scores);\n      this.verificationHistory = memory.history || [];\n    } catch (error) {\n      // Initialize empty memory if file doesn't exist\n      this.scores = new Map();\n      this.verificationHistory = [];\n    }\n  }\n\n  async saveMemory() {\n    const memory = {\n      scores: Array.from(this.scores.entries()),\n      history: this.verificationHistory,\n      timestamp: new Date().toISOString()\n    };\n    \n    await fs.mkdir(path.dirname(this.memoryPath), { recursive: true });\n    await fs.writeFile(this.memoryPath, JSON.stringify(memory, null, 2));\n  }\n\n  async verifyTask(taskId, agentType, claims) {\n    console.log(`\\n🔍 Verifying task ${taskId} (Agent: ${agentType})`);\n    \n    const requirements = AGENT_VERIFICATION[agentType] || ['basic-check'];\n    const results = [];\n    let totalScore = 0;\n\n    for (const check of requirements) {\n      const result = await this.runVerification(check, claims);\n      results.push(result);\n      totalScore += result.score;\n      \n      console.log(`   ${result.passed ? '✅' : '❌'} ${check}: ${result.score.toFixed(2)}`);\n    }\n\n    const averageScore = totalScore / requirements.length;\n    const threshold = VERIFICATION_MODES[this.mode].threshold;\n    const passed = averageScore >= threshold;\n\n    const verification = {\n      taskId,\n      agentType,\n      score: averageScore,\n      passed,\n      threshold,\n      timestamp: new Date().toISOString(),\n      results\n    };\n\n    this.verificationHistory.push(verification);\n    await this.saveMemory();\n\n    console.log(`\\n📊 Verification Score: ${averageScore.toFixed(2)}/${threshold}`);\n    console.log(`   Status: ${passed ? '✅ PASSED' : '❌ FAILED'}`);\n\n    if (!passed && VERIFICATION_MODES[this.mode].autoRollback) {\n      console.log('\\n🔄 Auto-rollback triggered due to verification failure');\n      await this.triggerRollback(taskId);\n    }\n\n    return verification;\n  }\n\n  async runVerification(checkType, claims) {\n    // Simulate different verification checks\n    const verificationChecks = {\n      'compile': async () => {\n        try {\n          const { stdout } = await execAsync('npm run typecheck 2>&1 || true');\n          return { score: stdout.includes('error') ? 0.5 : 1.0, passed: !stdout.includes('error') };\n        } catch {\n          return { score: 0.5, passed: false };\n        }\n      },\n      'test': async () => {\n        try {\n          const { stdout } = await execAsync('npm test 2>&1 || true');\n          return { score: stdout.includes('PASS') ? 1.0 : 0.6, passed: stdout.includes('PASS') };\n        } catch {\n          return { score: 0.6, passed: false };\n        }\n      },\n      'lint': async () => {\n        try {\n          const { stdout } = await execAsync('npm run lint 2>&1 || true');\n          return { score: stdout.includes('warning') ? 0.8 : 1.0, passed: true };\n        } catch {\n          return { score: 0.7, passed: false };\n        }\n      },\n      'typecheck': async () => {\n        try {\n          const { stdout } = await execAsync('npm run typecheck 2>&1 || true');\n          return { score: stdout.includes('error') ? 0.6 : 1.0, passed: !stdout.includes('error') };\n        } catch {\n          return { score: 0.6, passed: false };\n        }\n      },\n      'default': async () => {\n        // Simulate verification based on claims\n        const claimScore = claims && claims.success ? 0.85 : 0.65;\n        return { score: claimScore, passed: claimScore >= 0.75 };\n      }\n    };\n\n    const check = verificationChecks[checkType] || verificationChecks.default;\n    return await check();\n  }\n\n  async triggerRollback(taskId) {\n    console.log(`🔄 Rolling back task ${taskId}...`);\n    // Simulate rollback process\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`✅ Rollback completed for task ${taskId}`);\n  }\n\n  async getAgentReliability(agentId) {\n    const agentHistory = this.verificationHistory.filter(v => v.agentType === agentId);\n    if (agentHistory.length === 0) return 1.0;\n\n    const totalScore = agentHistory.reduce((sum, v) => sum + v.score, 0);\n    return totalScore / agentHistory.length;\n  }\n\n  async generateTruthReport() {\n    const report = {\n      mode: this.mode,\n      threshold: VERIFICATION_MODES[this.mode].threshold,\n      totalVerifications: this.verificationHistory.length,\n      passedVerifications: this.verificationHistory.filter(v => v.passed).length,\n      averageScore: 0,\n      agentReliability: {},\n      timestamp: new Date().toISOString()\n    };\n\n    if (this.verificationHistory.length > 0) {\n      const totalScore = this.verificationHistory.reduce((sum, v) => sum + v.score, 0);\n      report.averageScore = totalScore / this.verificationHistory.length;\n    }\n\n    // Calculate per-agent reliability\n    const agentTypes = [...new Set(this.verificationHistory.map(v => v.agentType))];\n    for (const agent of agentTypes) {\n      report.agentReliability[agent] = await this.getAgentReliability(agent);\n    }\n\n    return report;\n  }\n}\n\n// Helper function to generate filtered report for specific agent\nasync function generateFilteredReport(system, filteredHistory, agentType) {\n  const report = {\n    mode: system.mode,\n    threshold: VERIFICATION_MODES[system.mode].threshold,\n    totalVerifications: filteredHistory.length,\n    passedVerifications: filteredHistory.filter(v => v.passed).length,\n    averageScore: 0,\n    agentReliability: {},\n    timestamp: new Date().toISOString()\n  };\n\n  if (filteredHistory.length > 0) {\n    const totalScore = filteredHistory.reduce((sum, v) => sum + v.score, 0);\n    report.averageScore = totalScore / filteredHistory.length;\n    report.agentReliability[agentType] = report.averageScore;\n  }\n\n  return report;\n}\n\n// CLI command handlers\nexport async function verificationCommand(args, flags) {\n  const system = new VerificationSystem();\n  const subcommand = args[0] || 'status';\n  \n  // Handle help flag\n  if (flags.help || subcommand === '--help' || subcommand === 'help') {\n    const { COMMAND_HELP } = await import('../help-text.js');\n    console.log(COMMAND_HELP.verify);\n    return;\n  }\n\n  switch (subcommand) {\n    case 'init':\n      const mode = args[1] || flags.mode || 'moderate';\n      await system.initialize(mode);\n      break;\n\n    case 'verify':\n      const taskId = args[1] || flags.taskId || `task-${Date.now()}`;\n      const agentType = flags.agent || 'coder';\n      const claims = { success: flags.success !== false };\n      await system.verifyTask(taskId, agentType, claims);\n      break;\n\n    case 'truth':\n    case 'score':\n      await system.loadMemory();\n      \n      // Filter by agent if specified\n      let filteredHistory = system.verificationHistory;\n      if (flags.agent) {\n        filteredHistory = system.verificationHistory.filter(v => v.agentType === flags.agent);\n        if (filteredHistory.length === 0) {\n          console.log(`\\n⚠️ No verification history found for agent: ${flags.agent}`);\n          return;\n        }\n      }\n      \n      // Filter by taskId if specified\n      if (flags.taskId) {\n        filteredHistory = filteredHistory.filter(v => v.taskId === flags.taskId);\n        if (filteredHistory.length === 0) {\n          console.log(`\\n⚠️ No verification history found for task: ${flags.taskId}`);\n          return;\n        }\n      }\n      \n      // Filter by threshold if specified\n      if (flags.threshold) {\n        const threshold = parseFloat(flags.threshold);\n        filteredHistory = filteredHistory.filter(v => v.score < threshold);\n        if (filteredHistory.length === 0) {\n          console.log(`\\n✅ All verifications meet or exceed threshold: ${threshold}`);\n          return;\n        }\n      }\n      \n      // Generate report (with filtered data if agent specified)\n      const report = flags.agent ? \n        await generateFilteredReport(system, filteredHistory, flags.agent) :\n        await system.generateTruthReport();\n      \n      // JSON output only mode\n      if (flags.json) {\n        console.log(JSON.stringify(report, null, 2));\n        return;\n      }\n      \n      // Basic report (shown when not in JSON mode)\n      console.log('\\n📊 Truth Scoring Report' + (flags.agent ? ` - Agent: ${flags.agent}` : ''));\n      console.log('━'.repeat(50));\n      console.log(`Mode: ${report.mode || system.mode}`);\n      console.log(`Threshold: ${report.threshold || VERIFICATION_MODES[system.mode].threshold}`);\n      console.log(`Total Verifications: ${report.totalVerifications}`);\n      console.log(`Passed: ${report.passedVerifications}`);\n      console.log(`Average Score: ${report.averageScore.toFixed(3)}`);\n      \n      if (flags.agent) {\n        // Show detailed info for specific agent\n        console.log(`\\n🤖 ${flags.agent} Agent Details:`);\n        console.log(`   Reliability: ${(report.agentReliability[flags.agent] * 100).toFixed(1)}%`);\n        console.log(`   Total Tasks: ${filteredHistory.length}`);\n        console.log(`   Passed: ${filteredHistory.filter(v => v.passed).length}`);\n        console.log(`   Failed: ${filteredHistory.filter(v => !v.passed).length}`);\n        \n        if (flags.detailed || flags.detail) {\n          console.log('\\n📋 Verification History:');\n          const recentAgent = filteredHistory.slice(-10);\n          for (const v of recentAgent) {\n            const time = new Date(v.timestamp).toLocaleTimeString();\n            console.log(`   ${v.passed ? '✅' : '❌'} [${time}] ${v.taskId}: ${v.score.toFixed(3)}`);\n            if (v.results && flags.verbose) {\n              for (const [check, result] of Object.entries(v.results)) {\n                console.log(`      • ${check}: ${result.passed ? '✓' : '✗'} (${result.score.toFixed(2)})`);\n              }\n            }\n          }\n          \n          // Score distribution\n          const scores = filteredHistory.map(v => v.score);\n          const minScore = Math.min(...scores);\n          const maxScore = Math.max(...scores);\n          console.log('\\n📊 Score Distribution:');\n          console.log(`   Min Score: ${minScore.toFixed(3)}`);\n          console.log(`   Max Score: ${maxScore.toFixed(3)}`);\n          console.log(`   Average: ${report.averageScore.toFixed(3)}`);\n          \n          // Performance trend\n          if (filteredHistory.length > 5) {\n            const recent5 = filteredHistory.slice(-5);\n            const older5 = filteredHistory.slice(-10, -5);\n            const recentAvg = recent5.reduce((sum, v) => sum + v.score, 0) / recent5.length;\n            const olderAvg = older5.length > 0 ? \n              older5.reduce((sum, v) => sum + v.score, 0) / older5.length : 0;\n            \n            console.log('\\n📈 Performance Trend:');\n            if (olderAvg > 0) {\n              const trend = recentAvg - olderAvg;\n              const trendSymbol = trend > 0 ? '↑' : trend < 0 ? '↓' : '→';\n              console.log(`   Recent Average: ${recentAvg.toFixed(3)} ${trendSymbol}`);\n              console.log(`   Previous Average: ${olderAvg.toFixed(3)}`);\n              console.log(`   Change: ${trend >= 0 ? '+' : ''}${(trend * 100).toFixed(1)}%`);\n            } else {\n              console.log(`   Recent Average: ${recentAvg.toFixed(3)}`);\n            }\n          }\n        }\n      } else {\n        console.log('\\n🤖 Agent Reliability:');\n        for (const [agent, reliability] of Object.entries(report.agentReliability)) {\n          console.log(`   ${agent}: ${(reliability * 100).toFixed(1)}%`);\n        }\n      }\n      \n      // Detailed report with --report flag\n      if (flags.report) {\n        console.log('\\n📈 Detailed Verification Breakdown:');\n        console.log(`   Pass Rate: ${((report.passedVerifications / report.totalVerifications) * 100).toFixed(1)}%`);\n        console.log(`   Failure Rate: ${(((report.totalVerifications - report.passedVerifications) / report.totalVerifications) * 100).toFixed(1)}%`);\n        \n        // Show recent history\n        if (system.verificationHistory.length > 0) {\n          console.log('\\n📜 Last 10 Verifications:');\n          const recent = system.verificationHistory.slice(-10);\n          for (const v of recent) {\n            const time = new Date(v.timestamp).toLocaleTimeString();\n            console.log(`   ${v.passed ? '✅' : '❌'} [${time}] ${v.taskId} (${v.agentType}): ${v.score.toFixed(3)}`);\n          }\n        }\n        \n        // Performance metrics\n        console.log('\\n🎯 Target Metrics Comparison:');\n        console.log(`   Truth Accuracy: ${report.averageScore >= 0.95 ? '✅' : '❌'} ${(report.averageScore * 100).toFixed(1)}% (target: 95%)`);\n        console.log(`   Pass Rate: ${report.passedVerifications/report.totalVerifications >= 0.9 ? '✅' : '❌'} ${((report.passedVerifications/report.totalVerifications) * 100).toFixed(1)}% (target: 90%)`);\n      }\n      \n      // Failure analysis with --analyze flag\n      if (flags.analyze) {\n        console.log('\\n🔍 Failure Pattern Analysis:');\n        \n        // Analyze failures by agent\n        const failures = system.verificationHistory.filter(v => !v.passed);\n        if (failures.length > 0) {\n          const failuresByAgent = {};\n          for (const f of failures) {\n            failuresByAgent[f.agentType] = (failuresByAgent[f.agentType] || 0) + 1;\n          }\n          \n          console.log('   Failures by Agent:');\n          for (const [agent, count] of Object.entries(failuresByAgent)) {\n            const percentage = (count / failures.length * 100).toFixed(1);\n            console.log(`   • ${agent}: ${count} failures (${percentage}%)`);\n          }\n          \n          // Common failure scores\n          const failureScores = failures.map(f => f.score);\n          const avgFailureScore = failureScores.reduce((a, b) => a + b, 0) / failureScores.length;\n          console.log(`\\n   Average Failure Score: ${avgFailureScore.toFixed(3)}`);\n          console.log(`   Score Gap to Threshold: ${(report.threshold - avgFailureScore).toFixed(3)}`);\n          \n          // Recommendations\n          console.log('\\n💡 Recommendations:');\n          if (avgFailureScore < 0.5) {\n            console.log('   • Critical: Major quality issues detected');\n            console.log('   • Consider switching to development mode for debugging');\n            console.log('   • Review agent configurations and requirements');\n          } else if (avgFailureScore < report.threshold) {\n            console.log('   • Moderate: Close to threshold but needs improvement');\n            console.log('   • Focus on failing agents: ' + Object.keys(failuresByAgent).join(', '));\n            console.log('   • Consider adjusting verification requirements');\n          }\n        } else {\n          console.log('   ✅ No failures detected!');\n        }\n      }\n      \n      // Export to file with --export flag\n      if (flags.export) {\n        const exportPath = typeof flags.export === 'string' ? flags.export : `truth-report-${Date.now()}.json`;\n        const exportData = {\n          report,\n          filteredHistory,\n          metadata: {\n            exported: new Date().toISOString(),\n            filters: {\n              agent: flags.agent || null,\n              taskId: flags.taskId || null,\n              threshold: flags.threshold || null\n            },\n            command: 'truth',\n            version: '2.0.0-alpha.89'\n          }\n        };\n        \n        try {\n          await fs.writeFile(exportPath, JSON.stringify(exportData, null, 2));\n          console.log(`\\n📁 Report exported to: ${exportPath}`);\n        } catch (error) {\n          console.error(`\\n❌ Failed to export report: ${error.message}`);\n        }\n      }\n      break;\n\n    case 'status':\n    default:\n      await system.loadMemory();\n      console.log('\\n🔍 Verification System Status');\n      console.log('━'.repeat(50));\n      console.log(`Mode: ${system.mode}`);\n      console.log(`Verifications: ${system.verificationHistory.length}`);\n      console.log(`Recent: ${system.verificationHistory.slice(-5).length} verifications`);\n      \n      if (system.verificationHistory.length > 0) {\n        const recent = system.verificationHistory.slice(-5);\n        console.log('\\n📜 Recent Verifications:');\n        for (const v of recent) {\n          console.log(`   ${v.passed ? '✅' : '❌'} ${v.taskId} (${v.agentType}): ${v.score.toFixed(2)}`);\n        }\n      }\n      \n      console.log('\\n💡 Commands:');\n      console.log('   verify init [mode]     - Initialize system');\n      console.log('   verify verify [taskId] - Verify a task');\n      console.log('   verify truth          - Show truth scores');\n      console.log('   verify status         - Show system status');\n      break;\n  }\n}\n\n// Truth command shortcut\nexport async function truthCommand(args, flags) {\n  // Handle help flag\n  if (flags.help || args[0] === '--help' || args[0] === 'help') {\n    const { COMMAND_HELP } = await import('../help-text.js');\n    console.log(COMMAND_HELP.truth);\n    return;\n  }\n  return verificationCommand(['truth', ...args], flags);\n}\n\n// Pair programming command\nexport async function pairCommand(args, flags) {\n  // Handle help flag\n  if (flags.help || args[0] === '--help' || args[0] === 'help') {\n    const { COMMAND_HELP } = await import('../help-text.js');\n    console.log(COMMAND_HELP.pair);\n    return;\n  }\n  console.log('\\n👥 Pair Programming with Verification');\n  console.log('━'.repeat(50));\n  \n  const system = new VerificationSystem();\n  await system.initialize('strict');\n  \n  console.log('\\n🎯 Verification-First Development Mode Activated');\n  console.log('   • All changes require verification');\n  console.log('   • Truth threshold: 0.95');\n  console.log('   • Real-time validation enabled');\n  console.log('   • Auto-rollback on failures');\n  \n  if (flags.start) {\n    console.log('\\n🚀 Starting pair programming session...');\n    console.log('   Monitoring file changes...');\n    console.log('   Running continuous verification...');\n    \n    // Simulate monitoring\n    let iteration = 0;\n    const interval = setInterval(async () => {\n      iteration++;\n      console.log(`\\n[${new Date().toISOString()}] Verification cycle ${iteration}`);\n      \n      const taskId = `pair-${Date.now()}`;\n      const result = await system.verifyTask(taskId, 'coder', { success: Math.random() > 0.3 });\n      \n      if (iteration >= 3 || !result.passed) {\n        clearInterval(interval);\n        console.log('\\n✨ Pair programming session complete');\n      }\n    }, 3000);\n  } else {\n    console.log('\\n💡 Use --start to begin a pair programming session');\n  }\n}\n\n// Export for use in command registry\nexport default {\n  verificationCommand,\n  truthCommand,\n  pairCommand\n};"],"names":["exec","promisify","fs","path","execAsync","VERIFICATION_MODES","strict","threshold","autoRollback","requireConsensus","moderate","development","AGENT_VERIFICATION","coder","reviewer","tester","planner","architect","VerificationSystem","mode","scores","Map","verificationHistory","memoryPath","initialize","loadMemory","console","log","data","readFile","memory","JSON","parse","history","error","saveMemory","Array","from","entries","timestamp","Date","toISOString","mkdir","dirname","recursive","writeFile","stringify","verifyTask","taskId","agentType","claims","requirements","results","totalScore","check","result","runVerification","push","score","passed","toFixed","averageScore","length","verification","triggerRollback","checkType","verificationChecks","stdout","includes","claimScore","success","default","Promise","resolve","setTimeout","getAgentReliability","agentId","agentHistory","filter","v","reduce","sum","generateTruthReport","report","totalVerifications","passedVerifications","agentReliability","agentTypes","Set","map","agent","generateFilteredReport","system","filteredHistory","verificationCommand","args","flags","subcommand","help","COMMAND_HELP","verify","now","parseFloat","json","repeat","detailed","detail","recentAgent","slice","time","toLocaleTimeString","verbose","Object","minScore","Math","min","maxScore","max","recent5","older5","recentAvg","olderAvg","trend","trendSymbol","reliability","recent","analyze","failures","failuresByAgent","f","count","percentage","failureScores","avgFailureScore","a","b","keys","join","export","exportPath","exportData","metadata","exported","filters","command","version","message","truthCommand","truth","pairCommand","pair","start","iteration","interval","setInterval","random","clearInterval"],"mappings":"AAKA,SAASA,IAAI,QAAQ,gBAAgB;AACrC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,QAAQ,cAAc;AAC7B,OAAOC,UAAU,OAAO;AAGxB,MAAMC,YAAYH,UAAUD;AAG5B,MAAMK,qBAAqB;IACzBC,QAAQ;QAAEC,WAAW;QAAMC,cAAc;QAAMC,kBAAkB;IAAK;IACtEC,UAAU;QAAEH,WAAW;QAAMC,cAAc;QAAOC,kBAAkB;IAAK;IACzEE,aAAa;QAAEJ,WAAW;QAAMC,cAAc;QAAOC,kBAAkB;IAAM;AAC/E;AAGA,MAAMG,qBAAqB;IACzBC,OAAO;QAAC;QAAW;QAAQ;QAAQ;KAAY;IAC/CC,UAAU;QAAC;QAAiB;QAAiB;KAAoB;IACjEC,QAAQ;QAAC;QAAc;QAAqB;KAAiB;IAC7DC,SAAS;QAAC;QAAsB;QAAoB;KAAc;IAClEC,WAAW;QAAC;QAAqB;QAAqB;KAAqB;AAC7E;AAEA,IAAA,AAAMC,qBAAN,MAAMA;IACJ,aAAc;QACZ,IAAI,CAACC,IAAI,GAAG;QACZ,IAAI,CAACC,MAAM,GAAG,IAAIC;QAClB,IAAI,CAACC,mBAAmB,GAAG,EAAE;QAC7B,IAAI,CAACC,UAAU,GAAG;IACpB;IAEA,MAAMC,WAAWL,OAAO,UAAU,EAAE;QAClC,IAAI,CAACA,IAAI,GAAGA;QACZ,MAAM,IAAI,CAACM,UAAU;QACrBC,QAAQC,GAAG,CAAC,CAAC,qCAAqC,EAAER,KAAK,KAAK,CAAC;QAC/DO,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEtB,kBAAkB,CAACc,KAAK,CAACZ,SAAS,EAAE;QACjEmB,QAAQC,GAAG,CAAC,CAAC,kBAAkB,EAAEtB,kBAAkB,CAACc,KAAK,CAACX,YAAY,EAAE;QACxEkB,QAAQC,GAAG,CAAC,CAAC,uBAAuB,EAAEtB,kBAAkB,CAACc,KAAK,CAACV,gBAAgB,EAAE;IACnF;IAEA,MAAMgB,aAAa;QACjB,IAAI;YACF,MAAMG,OAAO,MAAM1B,GAAG2B,QAAQ,CAAC,IAAI,CAACN,UAAU,EAAE;YAChD,MAAMO,SAASC,KAAKC,KAAK,CAACJ;YAC1B,IAAI,CAACR,MAAM,GAAG,IAAIC,IAAIS,OAAOV,MAAM;YACnC,IAAI,CAACE,mBAAmB,GAAGQ,OAAOG,OAAO,IAAI,EAAE;QACjD,EAAE,OAAOC,OAAO;YAEd,IAAI,CAACd,MAAM,GAAG,IAAIC;YAClB,IAAI,CAACC,mBAAmB,GAAG,EAAE;QAC/B;IACF;IAEA,MAAMa,aAAa;QACjB,MAAML,SAAS;YACbV,QAAQgB,MAAMC,IAAI,CAAC,IAAI,CAACjB,MAAM,CAACkB,OAAO;YACtCL,SAAS,IAAI,CAACX,mBAAmB;YACjCiB,WAAW,IAAIC,OAAOC,WAAW;QACnC;QAEA,MAAMvC,GAAGwC,KAAK,CAACvC,KAAKwC,OAAO,CAAC,IAAI,CAACpB,UAAU,GAAG;YAAEqB,WAAW;QAAK;QAChE,MAAM1C,GAAG2C,SAAS,CAAC,IAAI,CAACtB,UAAU,EAAEQ,KAAKe,SAAS,CAAChB,QAAQ,MAAM;IACnE;IAEA,MAAMiB,WAAWC,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAE;QAC1CxB,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEqB,OAAO,SAAS,EAAEC,UAAU,CAAC,CAAC;QAEjE,MAAME,eAAevC,kBAAkB,CAACqC,UAAU,IAAI;YAAC;SAAc;QACrE,MAAMG,UAAU,EAAE;QAClB,IAAIC,aAAa;QAEjB,KAAK,MAAMC,SAASH,aAAc;YAChC,MAAMI,SAAS,MAAM,IAAI,CAACC,eAAe,CAACF,OAAOJ;YACjDE,QAAQK,IAAI,CAACF;YACbF,cAAcE,OAAOG,KAAK;YAE1BhC,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAE4B,OAAOI,MAAM,GAAG,MAAM,IAAI,CAAC,EAAEL,MAAM,EAAE,EAAEC,OAAOG,KAAK,CAACE,OAAO,CAAC,IAAI;QACpF;QAEA,MAAMC,eAAeR,aAAaF,aAAaW,MAAM;QACrD,MAAMvD,YAAYF,kBAAkB,CAAC,IAAI,CAACc,IAAI,CAAC,CAACZ,SAAS;QACzD,MAAMoD,SAASE,gBAAgBtD;QAE/B,MAAMwD,eAAe;YACnBf;YACAC;YACAS,OAAOG;YACPF;YACApD;YACAgC,WAAW,IAAIC,OAAOC,WAAW;YACjCW;QACF;QAEA,IAAI,CAAC9B,mBAAmB,CAACmC,IAAI,CAACM;QAC9B,MAAM,IAAI,CAAC5B,UAAU;QAErBT,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAEkC,aAAaD,OAAO,CAAC,GAAG,CAAC,EAAErD,WAAW;QAC9EmB,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEgC,SAAS,aAAa,YAAY;QAE5D,IAAI,CAACA,UAAUtD,kBAAkB,CAAC,IAAI,CAACc,IAAI,CAAC,CAACX,YAAY,EAAE;YACzDkB,QAAQC,GAAG,CAAC;YACZ,MAAM,IAAI,CAACqC,eAAe,CAAChB;QAC7B;QAEA,OAAOe;IACT;IAEA,MAAMP,gBAAgBS,SAAS,EAAEf,MAAM,EAAE;QAEvC,MAAMgB,qBAAqB;YACzB,WAAW;gBACT,IAAI;oBACF,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM/D,UAAU;oBACnC,OAAO;wBAAEsD,OAAOS,OAAOC,QAAQ,CAAC,WAAW,MAAM;wBAAKT,QAAQ,CAACQ,OAAOC,QAAQ,CAAC;oBAAS;gBAC1F,EAAE,OAAM;oBACN,OAAO;wBAAEV,OAAO;wBAAKC,QAAQ;oBAAM;gBACrC;YACF;YACA,QAAQ;gBACN,IAAI;oBACF,MAAM,EAAEQ,MAAM,EAAE,GAAG,MAAM/D,UAAU;oBACnC,OAAO;wBAAEsD,OAAOS,OAAOC,QAAQ,CAAC,UAAU,MAAM;wBAAKT,QAAQQ,OAAOC,QAAQ,CAAC;oBAAQ;gBACvF,EAAE,OAAM;oBACN,OAAO;wBAAEV,OAAO;wBAAKC,QAAQ;oBAAM;gBACrC;YACF;YACA,QAAQ;gBACN,IAAI;oBACF,MAAM,EAAEQ,MAAM,EAAE,GAAG,MAAM/D,UAAU;oBACnC,OAAO;wBAAEsD,OAAOS,OAAOC,QAAQ,CAAC,aAAa,MAAM;wBAAKT,QAAQ;oBAAK;gBACvE,EAAE,OAAM;oBACN,OAAO;wBAAED,OAAO;wBAAKC,QAAQ;oBAAM;gBACrC;YACF;YACA,aAAa;gBACX,IAAI;oBACF,MAAM,EAAEQ,MAAM,EAAE,GAAG,MAAM/D,UAAU;oBACnC,OAAO;wBAAEsD,OAAOS,OAAOC,QAAQ,CAAC,WAAW,MAAM;wBAAKT,QAAQ,CAACQ,OAAOC,QAAQ,CAAC;oBAAS;gBAC1F,EAAE,OAAM;oBACN,OAAO;wBAAEV,OAAO;wBAAKC,QAAQ;oBAAM;gBACrC;YACF;YACA,WAAW;gBAET,MAAMU,aAAanB,UAAUA,OAAOoB,OAAO,GAAG,OAAO;gBACrD,OAAO;oBAAEZ,OAAOW;oBAAYV,QAAQU,cAAc;gBAAK;YACzD;QACF;QAEA,MAAMf,QAAQY,kBAAkB,CAACD,UAAU,IAAIC,mBAAmBK,OAAO;QACzE,OAAO,MAAMjB;IACf;IAEA,MAAMU,gBAAgBhB,MAAM,EAAE;QAC5BtB,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAEqB,OAAO,GAAG,CAAC;QAE/C,MAAM,IAAIwB,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QACjD/C,QAAQC,GAAG,CAAC,CAAC,8BAA8B,EAAEqB,QAAQ;IACvD;IAEA,MAAM2B,oBAAoBC,OAAO,EAAE;QACjC,MAAMC,eAAe,IAAI,CAACvD,mBAAmB,CAACwD,MAAM,CAACC,CAAAA,IAAKA,EAAE9B,SAAS,KAAK2B;QAC1E,IAAIC,aAAaf,MAAM,KAAK,GAAG,OAAO;QAEtC,MAAMT,aAAawB,aAAaG,MAAM,CAAC,CAACC,KAAKF,IAAME,MAAMF,EAAErB,KAAK,EAAE;QAClE,OAAOL,aAAawB,aAAaf,MAAM;IACzC;IAEA,MAAMoB,sBAAsB;QAC1B,MAAMC,SAAS;YACbhE,MAAM,IAAI,CAACA,IAAI;YACfZ,WAAWF,kBAAkB,CAAC,IAAI,CAACc,IAAI,CAAC,CAACZ,SAAS;YAClD6E,oBAAoB,IAAI,CAAC9D,mBAAmB,CAACwC,MAAM;YACnDuB,qBAAqB,IAAI,CAAC/D,mBAAmB,CAACwD,MAAM,CAACC,CAAAA,IAAKA,EAAEpB,MAAM,EAAEG,MAAM;YAC1ED,cAAc;YACdyB,kBAAkB,CAAC;YACnB/C,WAAW,IAAIC,OAAOC,WAAW;QACnC;QAEA,IAAI,IAAI,CAACnB,mBAAmB,CAACwC,MAAM,GAAG,GAAG;YACvC,MAAMT,aAAa,IAAI,CAAC/B,mBAAmB,CAAC0D,MAAM,CAAC,CAACC,KAAKF,IAAME,MAAMF,EAAErB,KAAK,EAAE;YAC9EyB,OAAOtB,YAAY,GAAGR,aAAa,IAAI,CAAC/B,mBAAmB,CAACwC,MAAM;QACpE;QAGA,MAAMyB,aAAa;eAAI,IAAIC,IAAI,IAAI,CAAClE,mBAAmB,CAACmE,GAAG,CAACV,CAAAA,IAAKA,EAAE9B,SAAS;SAAG;QAC/E,KAAK,MAAMyC,SAASH,WAAY;YAC9BJ,OAAOG,gBAAgB,CAACI,MAAM,GAAG,MAAM,IAAI,CAACf,mBAAmB,CAACe;QAClE;QAEA,OAAOP;IACT;AACF;AAGA,eAAeQ,uBAAuBC,MAAM,EAAEC,eAAe,EAAE5C,SAAS;IACtE,MAAMkC,SAAS;QACbhE,MAAMyE,OAAOzE,IAAI;QACjBZ,WAAWF,kBAAkB,CAACuF,OAAOzE,IAAI,CAAC,CAACZ,SAAS;QACpD6E,oBAAoBS,gBAAgB/B,MAAM;QAC1CuB,qBAAqBQ,gBAAgBf,MAAM,CAACC,CAAAA,IAAKA,EAAEpB,MAAM,EAAEG,MAAM;QACjED,cAAc;QACdyB,kBAAkB,CAAC;QACnB/C,WAAW,IAAIC,OAAOC,WAAW;IACnC;IAEA,IAAIoD,gBAAgB/B,MAAM,GAAG,GAAG;QAC9B,MAAMT,aAAawC,gBAAgBb,MAAM,CAAC,CAACC,KAAKF,IAAME,MAAMF,EAAErB,KAAK,EAAE;QACrEyB,OAAOtB,YAAY,GAAGR,aAAawC,gBAAgB/B,MAAM;QACzDqB,OAAOG,gBAAgB,CAACrC,UAAU,GAAGkC,OAAOtB,YAAY;IAC1D;IAEA,OAAOsB;AACT;AAGA,OAAO,eAAeW,oBAAoBC,IAAI,EAAEC,KAAK;IACnD,MAAMJ,SAAS,IAAI1E;IACnB,MAAM+E,aAAaF,IAAI,CAAC,EAAE,IAAI;IAG9B,IAAIC,MAAME,IAAI,IAAID,eAAe,YAAYA,eAAe,QAAQ;QAClE,MAAM,EAAEE,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC;QACtCzE,QAAQC,GAAG,CAACwE,aAAaC,MAAM;QAC/B;IACF;IAEA,OAAQH;QACN,KAAK;YACH,MAAM9E,OAAO4E,IAAI,CAAC,EAAE,IAAIC,MAAM7E,IAAI,IAAI;YACtC,MAAMyE,OAAOpE,UAAU,CAACL;YACxB;QAEF,KAAK;YACH,MAAM6B,SAAS+C,IAAI,CAAC,EAAE,IAAIC,MAAMhD,MAAM,IAAI,CAAC,KAAK,EAAER,KAAK6D,GAAG,IAAI;YAC9D,MAAMpD,YAAY+C,MAAMN,KAAK,IAAI;YACjC,MAAMxC,SAAS;gBAAEoB,SAAS0B,MAAM1B,OAAO,KAAK;YAAM;YAClD,MAAMsB,OAAO7C,UAAU,CAACC,QAAQC,WAAWC;YAC3C;QAEF,KAAK;QACL,KAAK;YACH,MAAM0C,OAAOnE,UAAU;YAGvB,IAAIoE,kBAAkBD,OAAOtE,mBAAmB;YAChD,IAAI0E,MAAMN,KAAK,EAAE;gBACfG,kBAAkBD,OAAOtE,mBAAmB,CAACwD,MAAM,CAACC,CAAAA,IAAKA,EAAE9B,SAAS,KAAK+C,MAAMN,KAAK;gBACpF,IAAIG,gBAAgB/B,MAAM,KAAK,GAAG;oBAChCpC,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAEqE,MAAMN,KAAK,EAAE;oBAC1E;gBACF;YACF;YAGA,IAAIM,MAAMhD,MAAM,EAAE;gBAChB6C,kBAAkBA,gBAAgBf,MAAM,CAACC,CAAAA,IAAKA,EAAE/B,MAAM,KAAKgD,MAAMhD,MAAM;gBACvE,IAAI6C,gBAAgB/B,MAAM,KAAK,GAAG;oBAChCpC,QAAQC,GAAG,CAAC,CAAC,6CAA6C,EAAEqE,MAAMhD,MAAM,EAAE;oBAC1E;gBACF;YACF;YAGA,IAAIgD,MAAMzF,SAAS,EAAE;gBACnB,MAAMA,YAAY+F,WAAWN,MAAMzF,SAAS;gBAC5CsF,kBAAkBA,gBAAgBf,MAAM,CAACC,CAAAA,IAAKA,EAAErB,KAAK,GAAGnD;gBACxD,IAAIsF,gBAAgB/B,MAAM,KAAK,GAAG;oBAChCpC,QAAQC,GAAG,CAAC,CAAC,gDAAgD,EAAEpB,WAAW;oBAC1E;gBACF;YACF;YAGA,MAAM4E,SAASa,MAAMN,KAAK,GACxB,MAAMC,uBAAuBC,QAAQC,iBAAiBG,MAAMN,KAAK,IACjE,MAAME,OAAOV,mBAAmB;YAGlC,IAAIc,MAAMO,IAAI,EAAE;gBACd7E,QAAQC,GAAG,CAACI,KAAKe,SAAS,CAACqC,QAAQ,MAAM;gBACzC;YACF;YAGAzD,QAAQC,GAAG,CAAC,8BAA+BqE,CAAAA,MAAMN,KAAK,GAAG,CAAC,UAAU,EAAEM,MAAMN,KAAK,EAAE,GAAG,EAAC;YACvFhE,QAAQC,GAAG,CAAC,IAAI6E,MAAM,CAAC;YACvB9E,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEwD,OAAOhE,IAAI,IAAIyE,OAAOzE,IAAI,EAAE;YACjDO,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEwD,OAAO5E,SAAS,IAAIF,kBAAkB,CAACuF,OAAOzE,IAAI,CAAC,CAACZ,SAAS,EAAE;YACzFmB,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAEwD,OAAOC,kBAAkB,EAAE;YAC/D1D,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEwD,OAAOE,mBAAmB,EAAE;YACnD3D,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEwD,OAAOtB,YAAY,CAACD,OAAO,CAAC,IAAI;YAE9D,IAAIoC,MAAMN,KAAK,EAAE;gBAEfhE,QAAQC,GAAG,CAAC,CAAC,KAAK,EAAEqE,MAAMN,KAAK,CAAC,eAAe,CAAC;gBAChDhE,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAE,AAACwD,CAAAA,OAAOG,gBAAgB,CAACU,MAAMN,KAAK,CAAC,GAAG,GAAE,EAAG9B,OAAO,CAAC,GAAG,CAAC,CAAC;gBACzFlC,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAEkE,gBAAgB/B,MAAM,EAAE;gBACvDpC,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEkE,gBAAgBf,MAAM,CAACC,CAAAA,IAAKA,EAAEpB,MAAM,EAAEG,MAAM,EAAE;gBACxEpC,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEkE,gBAAgBf,MAAM,CAACC,CAAAA,IAAK,CAACA,EAAEpB,MAAM,EAAEG,MAAM,EAAE;gBAEzE,IAAIkC,MAAMS,QAAQ,IAAIT,MAAMU,MAAM,EAAE;oBAClChF,QAAQC,GAAG,CAAC;oBACZ,MAAMgF,cAAcd,gBAAgBe,KAAK,CAAC,CAAC;oBAC3C,KAAK,MAAM7B,KAAK4B,YAAa;wBAC3B,MAAME,OAAO,IAAIrE,KAAKuC,EAAExC,SAAS,EAAEuE,kBAAkB;wBACrDpF,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAEoD,EAAEpB,MAAM,GAAG,MAAM,IAAI,EAAE,EAAEkD,KAAK,EAAE,EAAE9B,EAAE/B,MAAM,CAAC,EAAE,EAAE+B,EAAErB,KAAK,CAACE,OAAO,CAAC,IAAI;wBACrF,IAAImB,EAAE3B,OAAO,IAAI4C,MAAMe,OAAO,EAAE;4BAC9B,KAAK,MAAM,CAACzD,OAAOC,OAAO,IAAIyD,OAAO1E,OAAO,CAACyC,EAAE3B,OAAO,EAAG;gCACvD1B,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAE2B,MAAM,EAAE,EAAEC,OAAOI,MAAM,GAAG,MAAM,IAAI,EAAE,EAAEJ,OAAOG,KAAK,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;4BAC3F;wBACF;oBACF;oBAGA,MAAMxC,SAASyE,gBAAgBJ,GAAG,CAACV,CAAAA,IAAKA,EAAErB,KAAK;oBAC/C,MAAMuD,WAAWC,KAAKC,GAAG,IAAI/F;oBAC7B,MAAMgG,WAAWF,KAAKG,GAAG,IAAIjG;oBAC7BM,QAAQC,GAAG,CAAC;oBACZD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEsF,SAASrD,OAAO,CAAC,IAAI;oBAClDlC,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEyF,SAASxD,OAAO,CAAC,IAAI;oBAClDlC,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEwD,OAAOtB,YAAY,CAACD,OAAO,CAAC,IAAI;oBAG3D,IAAIiC,gBAAgB/B,MAAM,GAAG,GAAG;wBAC9B,MAAMwD,UAAUzB,gBAAgBe,KAAK,CAAC,CAAC;wBACvC,MAAMW,SAAS1B,gBAAgBe,KAAK,CAAC,CAAC,IAAI,CAAC;wBAC3C,MAAMY,YAAYF,QAAQtC,MAAM,CAAC,CAACC,KAAKF,IAAME,MAAMF,EAAErB,KAAK,EAAE,KAAK4D,QAAQxD,MAAM;wBAC/E,MAAM2D,WAAWF,OAAOzD,MAAM,GAAG,IAC/ByD,OAAOvC,MAAM,CAAC,CAACC,KAAKF,IAAME,MAAMF,EAAErB,KAAK,EAAE,KAAK6D,OAAOzD,MAAM,GAAG;wBAEhEpC,QAAQC,GAAG,CAAC;wBACZ,IAAI8F,WAAW,GAAG;4BAChB,MAAMC,QAAQF,YAAYC;4BAC1B,MAAME,cAAcD,QAAQ,IAAI,MAAMA,QAAQ,IAAI,MAAM;4BACxDhG,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAE6F,UAAU5D,OAAO,CAAC,GAAG,CAAC,EAAE+D,aAAa;4BACvEjG,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAE8F,SAAS7D,OAAO,CAAC,IAAI;4BACzDlC,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAE+F,SAAS,IAAI,MAAM,KAAK,AAACA,CAAAA,QAAQ,GAAE,EAAG9D,OAAO,CAAC,GAAG,CAAC,CAAC;wBAC/E,OAAO;4BACLlC,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAE6F,UAAU5D,OAAO,CAAC,IAAI;wBAC1D;oBACF;gBACF;YACF,OAAO;gBACLlC,QAAQC,GAAG,CAAC;gBACZ,KAAK,MAAM,CAAC+D,OAAOkC,YAAY,IAAIZ,OAAO1E,OAAO,CAAC6C,OAAOG,gBAAgB,EAAG;oBAC1E5D,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAE+D,MAAM,EAAE,EAAE,AAACkC,CAAAA,cAAc,GAAE,EAAGhE,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC/D;YACF;YAGA,IAAIoC,MAAMb,MAAM,EAAE;gBAChBzD,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAE,AAAC,CAAA,AAACwD,OAAOE,mBAAmB,GAAGF,OAAOC,kBAAkB,GAAI,GAAE,EAAGxB,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC3GlC,QAAQC,GAAG,CAAC,CAAC,iBAAiB,EAAE,AAAC,CAAA,AAAEwD,CAAAA,OAAOC,kBAAkB,GAAGD,OAAOE,mBAAmB,AAAD,IAAKF,OAAOC,kBAAkB,GAAI,GAAE,EAAGxB,OAAO,CAAC,GAAG,CAAC,CAAC;gBAG5I,IAAIgC,OAAOtE,mBAAmB,CAACwC,MAAM,GAAG,GAAG;oBACzCpC,QAAQC,GAAG,CAAC;oBACZ,MAAMkG,SAASjC,OAAOtE,mBAAmB,CAACsF,KAAK,CAAC,CAAC;oBACjD,KAAK,MAAM7B,KAAK8C,OAAQ;wBACtB,MAAMhB,OAAO,IAAIrE,KAAKuC,EAAExC,SAAS,EAAEuE,kBAAkB;wBACrDpF,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAEoD,EAAEpB,MAAM,GAAG,MAAM,IAAI,EAAE,EAAEkD,KAAK,EAAE,EAAE9B,EAAE/B,MAAM,CAAC,EAAE,EAAE+B,EAAE9B,SAAS,CAAC,GAAG,EAAE8B,EAAErB,KAAK,CAACE,OAAO,CAAC,IAAI;oBACxG;gBACF;gBAGAlC,QAAQC,GAAG,CAAC;gBACZD,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEwD,OAAOtB,YAAY,IAAI,OAAO,MAAM,IAAI,CAAC,EAAE,AAACsB,CAAAA,OAAOtB,YAAY,GAAG,GAAE,EAAGD,OAAO,CAAC,GAAG,eAAe,CAAC;gBACpIlC,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEwD,OAAOE,mBAAmB,GAACF,OAAOC,kBAAkB,IAAI,MAAM,MAAM,IAAI,CAAC,EAAE,AAAC,CAAA,AAACD,OAAOE,mBAAmB,GAACF,OAAOC,kBAAkB,GAAI,GAAE,EAAGxB,OAAO,CAAC,GAAG,eAAe,CAAC;YACpM;YAGA,IAAIoC,MAAM8B,OAAO,EAAE;gBACjBpG,QAAQC,GAAG,CAAC;gBAGZ,MAAMoG,WAAWnC,OAAOtE,mBAAmB,CAACwD,MAAM,CAACC,CAAAA,IAAK,CAACA,EAAEpB,MAAM;gBACjE,IAAIoE,SAASjE,MAAM,GAAG,GAAG;oBACvB,MAAMkE,kBAAkB,CAAC;oBACzB,KAAK,MAAMC,KAAKF,SAAU;wBACxBC,eAAe,CAACC,EAAEhF,SAAS,CAAC,GAAG,AAAC+E,CAAAA,eAAe,CAACC,EAAEhF,SAAS,CAAC,IAAI,CAAA,IAAK;oBACvE;oBAEAvB,QAAQC,GAAG,CAAC;oBACZ,KAAK,MAAM,CAAC+D,OAAOwC,MAAM,IAAIlB,OAAO1E,OAAO,CAAC0F,iBAAkB;wBAC5D,MAAMG,aAAa,AAACD,CAAAA,QAAQH,SAASjE,MAAM,GAAG,GAAE,EAAGF,OAAO,CAAC;wBAC3DlC,QAAQC,GAAG,CAAC,CAAC,KAAK,EAAE+D,MAAM,EAAE,EAAEwC,MAAM,WAAW,EAAEC,WAAW,EAAE,CAAC;oBACjE;oBAGA,MAAMC,gBAAgBL,SAAStC,GAAG,CAACwC,CAAAA,IAAKA,EAAEvE,KAAK;oBAC/C,MAAM2E,kBAAkBD,cAAcpD,MAAM,CAAC,CAACsD,GAAGC,IAAMD,IAAIC,GAAG,KAAKH,cAActE,MAAM;oBACvFpC,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAE0G,gBAAgBzE,OAAO,CAAC,IAAI;oBACvElC,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAE,AAACwD,CAAAA,OAAO5E,SAAS,GAAG8H,eAAc,EAAGzE,OAAO,CAAC,IAAI;oBAG3FlC,QAAQC,GAAG,CAAC;oBACZ,IAAI0G,kBAAkB,KAAK;wBACzB3G,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC;oBACd,OAAO,IAAI0G,kBAAkBlD,OAAO5E,SAAS,EAAE;wBAC7CmB,QAAQC,GAAG,CAAC;wBACZD,QAAQC,GAAG,CAAC,mCAAmCqF,OAAOwB,IAAI,CAACR,iBAAiBS,IAAI,CAAC;wBACjF/G,QAAQC,GAAG,CAAC;oBACd;gBACF,OAAO;oBACLD,QAAQC,GAAG,CAAC;gBACd;YACF;YAGA,IAAIqE,MAAM0C,MAAM,EAAE;gBAChB,MAAMC,aAAa,OAAO3C,MAAM0C,MAAM,KAAK,WAAW1C,MAAM0C,MAAM,GAAG,CAAC,aAAa,EAAElG,KAAK6D,GAAG,GAAG,KAAK,CAAC;gBACtG,MAAMuC,aAAa;oBACjBzD;oBACAU;oBACAgD,UAAU;wBACRC,UAAU,IAAItG,OAAOC,WAAW;wBAChCsG,SAAS;4BACPrD,OAAOM,MAAMN,KAAK,IAAI;4BACtB1C,QAAQgD,MAAMhD,MAAM,IAAI;4BACxBzC,WAAWyF,MAAMzF,SAAS,IAAI;wBAChC;wBACAyI,SAAS;wBACTC,SAAS;oBACX;gBACF;gBAEA,IAAI;oBACF,MAAM/I,GAAG2C,SAAS,CAAC8F,YAAY5G,KAAKe,SAAS,CAAC8F,YAAY,MAAM;oBAChElH,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAEgH,YAAY;gBACtD,EAAE,OAAOzG,OAAO;oBACdR,QAAQQ,KAAK,CAAC,CAAC,6BAA6B,EAAEA,MAAMgH,OAAO,EAAE;gBAC/D;YACF;YACA;QAEF,KAAK;QACL;YACE,MAAMtD,OAAOnE,UAAU;YACvBC,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,IAAI6E,MAAM,CAAC;YACvB9E,QAAQC,GAAG,CAAC,CAAC,MAAM,EAAEiE,OAAOzE,IAAI,EAAE;YAClCO,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEiE,OAAOtE,mBAAmB,CAACwC,MAAM,EAAE;YACjEpC,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEiE,OAAOtE,mBAAmB,CAACsF,KAAK,CAAC,CAAC,GAAG9C,MAAM,CAAC,cAAc,CAAC;YAElF,IAAI8B,OAAOtE,mBAAmB,CAACwC,MAAM,GAAG,GAAG;gBACzC,MAAM+D,SAASjC,OAAOtE,mBAAmB,CAACsF,KAAK,CAAC,CAAC;gBACjDlF,QAAQC,GAAG,CAAC;gBACZ,KAAK,MAAMoD,KAAK8C,OAAQ;oBACtBnG,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAEoD,EAAEpB,MAAM,GAAG,MAAM,IAAI,CAAC,EAAEoB,EAAE/B,MAAM,CAAC,EAAE,EAAE+B,EAAE9B,SAAS,CAAC,GAAG,EAAE8B,EAAErB,KAAK,CAACE,OAAO,CAAC,IAAI;gBAC9F;YACF;YAEAlC,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ;IACJ;AACF;AAGA,OAAO,eAAewH,aAAapD,IAAI,EAAEC,KAAK;IAE5C,IAAIA,MAAME,IAAI,IAAIH,IAAI,CAAC,EAAE,KAAK,YAAYA,IAAI,CAAC,EAAE,KAAK,QAAQ;QAC5D,MAAM,EAAEI,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC;QACtCzE,QAAQC,GAAG,CAACwE,aAAaiD,KAAK;QAC9B;IACF;IACA,OAAOtD,oBAAoB;QAAC;WAAYC;KAAK,EAAEC;AACjD;AAGA,OAAO,eAAeqD,YAAYtD,IAAI,EAAEC,KAAK;IAE3C,IAAIA,MAAME,IAAI,IAAIH,IAAI,CAAC,EAAE,KAAK,YAAYA,IAAI,CAAC,EAAE,KAAK,QAAQ;QAC5D,MAAM,EAAEI,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC;QACtCzE,QAAQC,GAAG,CAACwE,aAAamD,IAAI;QAC7B;IACF;IACA5H,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC,IAAI6E,MAAM,CAAC;IAEvB,MAAMZ,SAAS,IAAI1E;IACnB,MAAM0E,OAAOpE,UAAU,CAAC;IAExBE,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZ,IAAIqE,MAAMuD,KAAK,EAAE;QACf7H,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QAGZ,IAAI6H,YAAY;QAChB,MAAMC,WAAWC,YAAY;YAC3BF;YACA9H,QAAQC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAIa,OAAOC,WAAW,GAAG,qBAAqB,EAAE+G,WAAW;YAE7E,MAAMxG,SAAS,CAAC,KAAK,EAAER,KAAK6D,GAAG,IAAI;YACnC,MAAM9C,SAAS,MAAMqC,OAAO7C,UAAU,CAACC,QAAQ,SAAS;gBAAEsB,SAAS4C,KAAKyC,MAAM,KAAK;YAAI;YAEvF,IAAIH,aAAa,KAAK,CAACjG,OAAOI,MAAM,EAAE;gBACpCiG,cAAcH;gBACd/H,QAAQC,GAAG,CAAC;YACd;QACF,GAAG;IACL,OAAO;QACLD,QAAQC,GAAG,CAAC;IACd;AACF;AAGA,eAAe;IACbmE;IACAqD;IACAE;AACF,EAAE"}