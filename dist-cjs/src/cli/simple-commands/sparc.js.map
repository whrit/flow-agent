{"version":3,"sources":["../../../../src/cli/simple-commands/sparc.js"],"sourcesContent":["// sparc.js - SPARC development mode commands\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { spawn } from 'child_process';\nimport { promisify } from 'util';\nimport { createSparcPrompt } from './sparc-modes/index.js';\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport process from 'process';\n\nexport async function sparcCommand(subArgs, flags) {\n  const sparcCmd = subArgs[0];\n\n  // Show help if requested or no args\n  if (\n    flags.help ||\n    flags.h ||\n    sparcCmd === '--help' ||\n    sparcCmd === '-h' ||\n    (!sparcCmd && Object.keys(flags).length === 0)\n  ) {\n    showSparcHelp();\n    return;\n  }\n\n  // Merge flags back into subArgs for backward compatibility\n  const mergedArgs = [...subArgs];\n  for (const [key, value] of Object.entries(flags)) {\n    if (key === 'non-interactive' || key === 'n') {\n      mergedArgs.push('--non-interactive');\n    } else if (key === 'dry-run' || key === 'd') {\n      mergedArgs.push('--dry-run');\n    } else if (key === 'verbose' || key === 'v') {\n      mergedArgs.push('--verbose');\n    } else if (key === 'no-permissions') {\n      mergedArgs.push('--no-permissions');\n    } else if (key === 'enable-permissions') {\n      mergedArgs.push('--enable-permissions');\n    } else if (key === 'namespace') {\n      mergedArgs.push('--namespace', value);\n    } else if (key === 'config') {\n      mergedArgs.push('--config', value);\n    } else if (key === 'interactive' || key === 'i') {\n      mergedArgs.push('--interactive');\n    }\n  }\n\n  // Check if first arg is a known subcommand\n  const knownSubcommands = ['modes', 'info', 'run', 'tdd'];\n\n  if (!knownSubcommands.includes(sparcCmd)) {\n    // If not a known subcommand, treat it as a task description for sparc orchestrator\n    // Insert 'run' and 'sparc' to make it: ['run', 'sparc', ...rest of args]\n    mergedArgs.unshift('run', 'sparc');\n  }\n\n  // Now process the command\n  const actualCmd = mergedArgs[0];\n\n  switch (actualCmd) {\n    case 'modes':\n      await listSparcModes(mergedArgs);\n      break;\n\n    case 'info':\n      await showModeInfo(mergedArgs);\n      break;\n\n    case 'run':\n      await runSparcMode(mergedArgs, flags);\n      break;\n\n    case 'tdd':\n      await runTddWorkflow(mergedArgs);\n      break;\n\n    default:\n      showSparcHelp();\n  }\n}\n\nasync function listSparcModes(subArgs) {\n  try {\n    // Get the actual working directory where the command was run from\n    const workingDir = process.env.PWD || cwd();\n    const configPath = `${workingDir}/.roomodes`;\n    let configContent;\n    try {\n      configContent = await fs.readFile(configPath, 'utf8');\n    } catch (error) {\n      printError('SPARC configuration file (.roomodes) not found');\n      console.log(`Please ensure .roomodes file exists in: ${workingDir}`);\n      console.log();\n      console.log('To enable SPARC development modes, run:');\n      console.log('  npx claude-flow@latest init --sparc');\n      console.log();\n      console.log('This will create:');\n      console.log('  ‚Ä¢ .roomodes file with 17+ SPARC development modes');\n      console.log('  ‚Ä¢ .roo/ directory with templates and workflows');\n      console.log('  ‚Ä¢ SPARC-enhanced CLAUDE.md configuration');\n      return;\n    }\n\n    const config = JSON.parse(configContent);\n    const verbose = subArgs.includes('--verbose') || subArgs.includes('-v');\n\n    printSuccess('Available SPARC Modes:');\n    console.log();\n\n    for (const mode of config.customModes) {\n      console.log(`‚Ä¢ ${mode.name} (${mode.slug})`);\n      if (verbose) {\n        console.log(`  ${mode.roleDefinition}`);\n        console.log(`  Tools: ${mode.groups.join(', ')}`);\n        console.log();\n      }\n    }\n\n    if (!verbose) {\n      console.log();\n      console.log('Use --verbose for detailed descriptions');\n    }\n  } catch (err) {\n    printError(`Failed to list SPARC modes: ${err.message}`);\n  }\n}\n\nasync function showModeInfo(subArgs) {\n  const modeSlug = subArgs[1];\n  if (!modeSlug) {\n    printError('Usage: sparc info <mode-slug>');\n    return;\n  }\n\n  try {\n    // Get the actual working directory where the command was run from\n    const workingDir = process.env.PWD || cwd();\n    const configPath = `${workingDir}/.roomodes`;\n    let configContent;\n    try {\n      configContent = await fs.readFile(configPath, 'utf8');\n    } catch (error) {\n      printError('SPARC configuration file (.roomodes) not found');\n      console.log(`Please ensure .roomodes file exists in: ${workingDir}`);\n      console.log();\n      console.log('To enable SPARC development modes, run:');\n      console.log('  npx claude-flow@latest init --sparc');\n      return;\n    }\n    const config = JSON.parse(configContent);\n    const mode = config.customModes.find((m) => m.slug === modeSlug);\n\n    if (!mode) {\n      printError(`Mode not found: ${modeSlug}`);\n      console.log('Available modes:');\n      for (const m of config.customModes) {\n        console.log(`  ${m.slug} - ${m.name}`);\n      }\n      return;\n    }\n\n    printSuccess(`SPARC Mode: ${mode.name}`);\n    console.log();\n    console.log('Role Definition:');\n    console.log(mode.roleDefinition);\n    console.log();\n    console.log('Custom Instructions:');\n    console.log(mode.customInstructions);\n    console.log();\n    console.log('Tool Groups:');\n    console.log(mode.groups.join(', '));\n    console.log();\n    console.log('Source:');\n    console.log(mode.source);\n  } catch (err) {\n    printError(`Failed to show mode info: ${err.message}`);\n  }\n}\n\nasync function runSparcMode(subArgs, flags) {\n  const runModeSlug = subArgs[1];\n  const taskDescription = subArgs\n    .slice(2)\n    .filter((arg) => !arg.startsWith('--'))\n    .join(' ');\n\n  if (!runModeSlug || !taskDescription) {\n    printError('Usage: sparc run <mode-slug> <task-description>');\n    return;\n  }\n\n  try {\n    // Get the actual working directory where the command was run from\n    const workingDir = process.env.PWD || cwd();\n    const configPath = `${workingDir}/.roomodes`;\n    let configContent;\n    try {\n      configContent = await fs.readFile(configPath, 'utf8');\n    } catch (error) {\n      printError('SPARC configuration file (.roomodes) not found');\n      console.log(`Please ensure .roomodes file exists in: ${workingDir}`);\n      console.log();\n      console.log('To enable SPARC development modes, run:');\n      console.log('  npx claude-flow@latest init --sparc');\n      return;\n    }\n    const config = JSON.parse(configContent);\n    const mode = config.customModes.find((m) => m.slug === runModeSlug);\n\n    if (!mode) {\n      printError(`Mode not found: ${runModeSlug}`);\n      return;\n    }\n\n    // Build enhanced SPARC prompt\n    const memoryNamespace = subArgs.includes('--namespace')\n      ? subArgs[subArgs.indexOf('--namespace') + 1]\n      : mode.slug;\n\n    const enhancedTask = createSparcPrompt(mode, taskDescription, memoryNamespace);\n\n    // Build tools based on mode groups\n    const tools = buildToolsFromGroups(mode.groups);\n    const toolsList = Array.from(tools).join(',');\n    const instanceId = `sparc-${runModeSlug}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    if (subArgs.includes('--dry-run') || subArgs.includes('-d')) {\n      printWarning('DRY RUN - SPARC Mode Configuration:');\n      console.log(`Mode: ${mode.name} (${mode.slug})`);\n      console.log(`Instance ID: ${instanceId}`);\n\n      const enablePermissions = subArgs.includes('--enable-permissions');\n      if (!enablePermissions) {\n        console.log(`Tools: ALL (via --dangerously-skip-permissions)`);\n        console.log(`Permissions: Will be auto-skipped`);\n      } else {\n        console.log(`Tools: ${toolsList}`);\n        console.log(`Permissions: Will prompt for actions`);\n      }\n\n      console.log(`Task: ${taskDescription}`);\n      console.log();\n      console.log('Enhanced prompt preview:');\n      console.log(enhancedTask.substring(0, 300) + '...');\n      return;\n    }\n\n    printSuccess(`Starting SPARC mode: ${mode.name}`);\n    console.log(`üìù Instance ID: ${instanceId}`);\n    console.log(`üéØ Mode: ${mode.slug}`);\n\n    const isNonInteractive = subArgs.includes('--non-interactive') || subArgs.includes('-n');\n    const enablePermissions = subArgs.includes('--enable-permissions');\n\n    if (!enablePermissions) {\n      console.log(`üîß Tools: ALL (including MCP and WebSearch via --dangerously-skip-permissions)`);\n      console.log(`‚ö° Permissions: Auto-skipped (--dangerously-skip-permissions)`);\n    } else {\n      console.log(`üîß Tools: ${toolsList}`);\n      console.log(`‚úÖ Permissions: Enabled (will prompt for actions)`);\n    }\n    console.log(`üìã Task: ${taskDescription}`);\n\n    if (isNonInteractive) {\n      console.log(`üöÄ Running in non-interactive mode with stream-json output`);\n      console.log();\n\n      // Show debug info immediately for non-interactive mode\n      console.log('üîç Debug: Preparing claude command...');\n      console.log(`Enhanced prompt length: ${enhancedTask.length} characters`);\n      console.log(`First 200 chars of prompt: ${enhancedTask.substring(0, 200)}...`);\n    }\n    console.log();\n\n    // Execute Claude with SPARC configuration\n    await executeClaude(enhancedTask, toolsList, instanceId, memoryNamespace, subArgs);\n  } catch (err) {\n    printError(`Failed to run SPARC mode: ${err.message}`);\n  }\n}\n\nasync function runTddWorkflow(subArgs) {\n  const tddTaskDescription = subArgs.slice(1).join(' ');\n\n  if (!tddTaskDescription) {\n    printError('Usage: sparc tdd <task-description>');\n    return;\n  }\n\n  printSuccess('Starting SPARC TDD Workflow');\n  console.log('Following Test-Driven Development with SPARC methodology');\n  console.log();\n\n  const phases = [\n    { name: 'Red', description: 'Write failing tests', mode: 'tdd' },\n    { name: 'Green', description: 'Minimal implementation', mode: 'code' },\n    { name: 'Refactor', description: 'Optimize and clean', mode: 'tdd' },\n  ];\n\n  console.log('TDD Phases:');\n  for (const phase of phases) {\n    console.log(`  ${phase.name}: ${phase.description} (${phase.mode} mode)`);\n  }\n  console.log();\n\n  if (subArgs.includes('--interactive') || subArgs.includes('-i')) {\n    printSuccess('Starting interactive TDD workflow');\n    console.log('This would walk through each phase interactively');\n    console.log('Run each phase with: sparc run <mode> \"Phase: <task>\"');\n  } else {\n    printSuccess('Starting full TDD workflow');\n    console.log('This would execute all phases automatically');\n    console.log('Use --interactive for step-by-step control');\n  }\n}\n\n// Remove the createSparcPrompt function from here as it's now imported from sparc-modes/index.js\n\nfunction buildToolsFromGroups(groups) {\n  const toolMappings = {\n    read: ['View', 'LS', 'GlobTool', 'GrepTool'],\n    edit: ['Edit', 'Replace', 'MultiEdit', 'Write'],\n    browser: ['WebFetch'],\n    mcp: ['mcp_tools'],\n    command: ['Bash', 'Terminal'],\n  };\n\n  const tools = new Set(['View', 'Edit', 'Bash']); // Always include basic tools\n\n  for (const group of groups) {\n    if (Array.isArray(group)) {\n      const groupName = group[0];\n      if (toolMappings[groupName]) {\n        toolMappings[groupName].forEach((tool) => tools.add(tool));\n      }\n    } else if (toolMappings[group]) {\n      toolMappings[group].forEach((tool) => tools.add(tool));\n    }\n  }\n\n  return tools;\n}\n\nasync function executeClaude(enhancedTask, toolsList, instanceId, memoryNamespace, subArgs) {\n  // Check for non-interactive mode\n  const isNonInteractive = subArgs.includes('--non-interactive') || subArgs.includes('-n');\n  const enablePermissions = subArgs.includes('--enable-permissions');\n\n  // Build arguments array correctly\n  const claudeArgs = [];\n  claudeArgs.push(enhancedTask);\n\n  // Add --dangerously-skip-permissions by default unless --enable-permissions is set\n  if (!enablePermissions) {\n    claudeArgs.push('--dangerously-skip-permissions');\n  }\n\n  if (isNonInteractive) {\n    // Non-interactive mode: add additional flags\n    claudeArgs.push('-p'); // Use short form for print\n    claudeArgs.push('--output-format', 'stream-json');\n    claudeArgs.push('--verbose');\n  } else {\n    // Interactive mode - check for verbose flag\n    if (subArgs.includes('--verbose') || subArgs.includes('-v')) {\n      claudeArgs.push('--verbose');\n    }\n  }\n\n  // When using --dangerously-skip-permissions, we don't need to specify individual tools\n  // as it enables ALL tools including mcp and websearch\n  // Only add --allowedTools if permissions are enabled\n  if (enablePermissions) {\n    claudeArgs.push('--allowedTools', toolsList);\n  }\n\n  if (subArgs.includes('--config')) {\n    const configIndex = subArgs.indexOf('--config');\n    claudeArgs.push('--mcp-config', subArgs[configIndex + 1]);\n  }\n\n  // Show debug info for non-interactive mode or when verbose\n  if (isNonInteractive || subArgs.includes('--verbose') || subArgs.includes('-v')) {\n    console.log('\\nüîç Debug: Executing claude with:');\n    console.log('Command: claude');\n    console.log(\n      'Permissions:',\n      enablePermissions\n        ? '‚úÖ Enabled (will prompt)'\n        : '‚ö° Skipped (--dangerously-skip-permissions)',\n    );\n    console.log(\n      'Tools:',\n      enablePermissions ? `Specified: ${toolsList}` : 'ALL tools enabled (MCP, WebSearch, etc.)',\n    );\n    console.log('Mode:', isNonInteractive ? 'ü§ñ Non-interactive' : 'üí¨ Interactive');\n    console.log('Args array length:', claudeArgs.length);\n    console.log('First arg (prompt) length:', claudeArgs[0].length, 'characters');\n\n    if (isNonInteractive) {\n      console.log('First 200 chars of prompt:', claudeArgs[0].substring(0, 200) + '...');\n      console.log('\\nAll arguments:');\n      claudeArgs.forEach((arg, i) => {\n        if (i === 0) {\n          console.log(`  [0] <SPARC prompt with ${arg.length} characters>`);\n        } else {\n          console.log(`  [${i}] ${arg}`);\n        }\n      });\n      console.log('\\nFull command structure:');\n      console.log('claude \"<SPARC prompt>\" ' + claudeArgs.slice(1).join(' '));\n    }\n    console.log();\n  }\n\n  try {\n    // Log the actual command being executed\n    console.log('\\nüöÄ Executing command:');\n    console.log(`Command: claude`);\n    console.log(`Working Directory: ${cwd()}`);\n    console.log(`Number of args: ${claudeArgs.length}`);\n\n    // Check if claude command exists\n    try {\n      const checkResult = await new Promise((resolve) => {\n        const child = spawn('which', ['claude'], {\n          stdio: ['pipe', 'pipe', 'pipe']\n        });\n        let stdout = '';\n        child.stdout?.on('data', (data) => { stdout += data; });\n        child.on('close', (code) => {\n          resolve({ success: code === 0, stdout: Buffer.from(stdout) });\n        });\n      });\n      if (!checkResult.success) {\n        console.error('‚ùå Error: claude command not found in PATH');\n        console.error('Please ensure claude CLI is installed and in your PATH');\n        return;\n      }\n      const claudePath = new TextDecoder().decode(checkResult.stdout).trim();\n      console.log(`Claude path: ${claudePath}`);\n    } catch (e) {\n      console.warn('‚ö†Ô∏è  Could not verify claude command location');\n    }\n\n    // Use spawn for claude command\n    const env = { ...process.env, CLAUDE_INSTANCE_ID: instanceId };\n\n    console.log('\\nüì° Spawning claude process...\\n');\n    const child = spawn('claude', claudeArgs, {\n      cwd: cwd(),\n      env: env,\n      stdio: 'inherit'\n    });\n    const status = await new Promise((resolve) => {\n      child.on('close', (code) => {\n        resolve({ code, success: code === 0 });\n      });\n    });\n\n    if (status.success) {\n      printSuccess(`SPARC instance ${instanceId} completed successfully`);\n    } else {\n      printError(`SPARC instance ${instanceId} exited with code ${status.code}`);\n    }\n  } catch (err) {\n    printError(`Failed to execute Claude: ${err.message}`);\n    console.error('Stack trace:', err.stack);\n  }\n}\n\nfunction showSparcHelp() {\n  console.log('SPARC commands:');\n  console.log('  <task>                   Run SPARC orchestrator (default mode)');\n  console.log('  modes                    List available SPARC development modes');\n  console.log('  info <mode>              Show detailed information about a mode');\n  console.log('  run <mode> <task>        Execute a task in specified SPARC mode');\n  console.log('  tdd <task>               Run Test-Driven Development workflow');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow sparc \"orchestrate app development\"    # Uses sparc orchestrator');\n  console.log('  claude-flow sparc modes --verbose');\n  console.log('  claude-flow sparc info architect');\n  console.log('  claude-flow sparc run code \"implement user authentication\"');\n  console.log('  claude-flow sparc run code \"add login feature\" --non-interactive');\n  console.log('  claude-flow sparc run tdd \"create test suite\" --namespace tests');\n  console.log('  claude-flow sparc tdd \"payment processing system\" --interactive');\n  console.log();\n  console.log('Parallel Execution with BatchTool:');\n  console.log('  # Run multiple SPARC modes concurrently');\n  console.log('  batchtool run --parallel \\\\');\n  console.log('    \"npx claude-flow sparc run code \\'user service\\' --non-interactive\" \\\\');\n  console.log('    \"npx claude-flow sparc run code \\'auth service\\' --non-interactive\" \\\\');\n  console.log('    \"npx claude-flow sparc run tdd \\'test suite\\' --non-interactive\"');\n  console.log();\n  console.log('  # Boomerang orchestration pattern');\n  console.log('  batchtool orchestrate --boomerang \\\\');\n  console.log(\n    '    --research \"npx claude-flow sparc run ask \\'requirements\\' --non-interactive\" \\\\',\n  );\n  console.log('    --design \"npx claude-flow sparc run architect \\'system\\' --non-interactive\" \\\\');\n  console.log('    --implement \"npx claude-flow sparc run code \\'features\\' --non-interactive\" \\\\');\n  console.log('    --test \"npx claude-flow sparc run tdd \\'validation\\' --non-interactive\"');\n  console.log();\n  console.log('Flags:');\n  console.log('  --dry-run, -d            Show configuration without executing');\n  console.log('  --verbose, -v            Show detailed output');\n  console.log('  --interactive, -i        Run TDD workflow interactively');\n  console.log('  --non-interactive, -n    Run in non-interactive mode with stream-json output');\n  console.log('  --enable-permissions     Enable permission prompts (default: skip permissions)');\n  console.log('  --namespace <ns>         Use custom memory namespace (default: mode slug)');\n  console.log('  --config <path>          Use custom MCP configuration file');\n  console.log();\n  console.log('Permission Behavior:');\n  console.log('  By default, SPARC runs with --dangerously-skip-permissions for efficiency');\n  console.log('  Use --enable-permissions to restore permission prompts if needed');\n  console.log();\n  console.log('Non-Interactive Mode:');\n  console.log('  When using --non-interactive, claude will be executed with:');\n  console.log('  - --dangerously-skip-permissions (unless --enable-permissions is set)');\n  console.log('  - -p (print mode for streaming output)');\n  console.log('  - --output-format stream-json (structured output format)');\n  console.log('  - --verbose (detailed execution logs)');\n  console.log();\n  console.log('Boomerang Pattern:');\n  console.log('  A cyclical orchestration where outputs from one phase feed into the next:');\n  console.log('  Research ‚Üí Design ‚Üí Implement ‚Üí Test ‚Üí Optimize ‚Üí Loop back');\n  console.log('  Perfect for iterative development with continuous refinement');\n}\n"],"names":["printSuccess","printError","printWarning","promises","fs","spawn","createSparcPrompt","cwd","process","sparcCommand","subArgs","flags","sparcCmd","help","h","Object","keys","length","showSparcHelp","mergedArgs","key","value","entries","push","knownSubcommands","includes","unshift","actualCmd","listSparcModes","showModeInfo","runSparcMode","runTddWorkflow","workingDir","env","PWD","configPath","configContent","readFile","error","console","log","config","JSON","parse","verbose","mode","customModes","name","slug","roleDefinition","groups","join","err","message","modeSlug","find","m","customInstructions","source","runModeSlug","taskDescription","slice","filter","arg","startsWith","memoryNamespace","indexOf","enhancedTask","tools","buildToolsFromGroups","toolsList","Array","from","instanceId","Date","now","Math","random","toString","substr","enablePermissions","substring","isNonInteractive","executeClaude","tddTaskDescription","phases","description","phase","toolMappings","read","edit","browser","mcp","command","Set","group","isArray","groupName","forEach","tool","add","claudeArgs","configIndex","i","checkResult","Promise","resolve","child","stdio","stdout","on","data","code","success","Buffer","claudePath","TextDecoder","decode","trim","e","warn","CLAUDE_INSTANCE_ID","status","stack"],"mappings":"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"}