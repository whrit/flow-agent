{"version":3,"sources":["../../../../src/cli/simple-commands/pair-old.js"],"sourcesContent":["/**\n * Pair Programming Command\n * Interactive pair programming with AI assistance and real-time verification\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { spawn, exec } from 'child_process';\nimport { promisify } from 'util';\nimport readline from 'readline';\n\nconst execAsync = promisify(exec);\n\nclass PairProgrammingSession {\n  constructor(options = {}) {\n    this.sessionId = `pair_${Date.now()}`;\n    this.mode = options.mode || 'switch';\n    this.agent = options.agent || 'auto';\n    this.verify = options.verify || false;\n    this.test = options.test || false;\n    this.threshold = options.threshold || 0.95;\n    this.startTime = new Date();\n    this.status = 'active';\n    this.currentRole = 'driver';\n    this.verificationScores = [];\n    this.testResults = [];\n    this.fileWatchers = new Map();\n    this.rl = null;\n  }\n\n  async start() {\n    await this.saveSession();\n    this.showWelcome();\n    \n    if (this.verify) {\n      await this.startVerification();\n    }\n    \n    if (this.test) {\n      await this.startTestWatcher();\n    }\n    \n    await this.startInteractiveMode();\n  }\n\n  showWelcome() {\n    console.log('\\nüöÄ Starting Pair Programming Session');\n    console.log('‚îÅ'.repeat(50));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Mode: ${this.mode}`);\n    console.log(`Agent: ${this.agent}`);\n    console.log(`Verification: ${this.verify ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log(`Testing: ${this.test ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log('‚îÅ'.repeat(50));\n\n    // Show mode details\n    switch (this.mode) {\n      case 'driver':\n        console.log('\\nüë§ You are the DRIVER - Write code while AI assists');\n        console.log('ü§ñ AI is the NAVIGATOR - Providing guidance and suggestions');\n        break;\n      case 'navigator':\n        console.log('\\nü§ñ AI is the DRIVER - Writing code based on your guidance');\n        console.log('üë§ You are the NAVIGATOR - Providing high-level direction');\n        break;\n      case 'switch':\n        console.log('\\nüîÑ SWITCH MODE - Roles alternate every 10 minutes');\n        console.log(`üë§ Current role: ${this.currentRole.toUpperCase()} (you)`);\n        console.log('ü§ñ AI role: ' + (this.currentRole === 'driver' ? 'NAVIGATOR' : 'DRIVER'));\n        this.startRoleTimer();\n        break;\n    }\n\n    this.showCommands();\n  }\n\n  showCommands() {\n    console.log('\\nüìù Session Commands:');\n    console.log('  /help      - Show available commands');\n    console.log('  /switch    - Switch driver/navigator roles');\n    console.log('  /suggest   - Get AI suggestions');\n    console.log('  /review    - Request code review');\n    console.log('  /test      - Run tests manually');\n    console.log('  /verify    - Run verification check');\n    console.log('  /status    - Show session status');\n    console.log('  /metrics   - Show quality metrics');\n    console.log('  /commit    - Commit with verification');\n    console.log('  /end       - End session');\n    console.log('  /exit      - Exit (same as /end)');\n  }\n\n  async startVerification() {\n    console.log('\\n‚úÖ Verification System Active');\n    console.log(`  ‚Ä¢ Threshold: ${this.threshold}`);\n    console.log('  ‚Ä¢ Real-time validation enabled');\n    console.log('  ‚Ä¢ Auto-rollback on failures');\n    \n    // Start verification loop\n    this.verificationInterval = setInterval(async () => {\n      await this.runVerification();\n    }, 30000); // Run every 30 seconds\n  }\n\n  async runVerification() {\n    console.log('\\nüîç Running verification check...');\n    \n    const checks = [\n      { name: 'Type Check', command: 'npm run typecheck 2>&1 || true' },\n      { name: 'Linting', command: 'npm run lint 2>&1 || true' },\n      { name: 'Build', command: 'npm run build 2>&1 || true' }\n    ];\n    \n    let totalScore = 0;\n    let passedChecks = 0;\n    \n    for (const check of checks) {\n      try {\n        const { stdout } = await execAsync(check.command);\n        const passed = !stdout.toLowerCase().includes('error');\n        const score = passed ? 1.0 : 0.5;\n        \n        totalScore += score;\n        if (passed) passedChecks++;\n        \n        console.log(`  ${passed ? '‚úÖ' : '‚ö†Ô∏è'} ${check.name}: ${score.toFixed(2)}`);\n      } catch (error) {\n        console.log(`  ‚ùå ${check.name}: 0.00 (failed)`);\n      }\n    }\n    \n    const averageScore = totalScore / checks.length;\n    this.verificationScores.push(averageScore);\n    \n    console.log(`\\nüìä Verification Score: ${averageScore.toFixed(2)}/${this.threshold}`);\n    \n    if (averageScore < this.threshold) {\n      console.log('‚ö†Ô∏è Verification threshold not met!');\n      if (this.verify && averageScore < 0.7) {\n        console.log('üîÑ Consider reverting recent changes');\n      }\n    } else {\n      console.log('‚úÖ Verification passed!');\n    }\n    \n    return averageScore;\n  }\n\n  async startTestWatcher() {\n    console.log('\\nüß™ Test Watcher Active');\n    console.log('  ‚Ä¢ Tests run on file changes');\n    console.log('  ‚Ä¢ Coverage tracking enabled');\n    \n    // Run initial test\n    await this.runTests();\n    \n    // Watch for file changes (simplified version)\n    this.testInterval = setInterval(async () => {\n      // In a real implementation, this would watch actual file changes\n      // For now, we'll just run tests periodically during the session\n    }, 60000); // Check every minute\n  }\n\n  async runTests() {\n    console.log('\\nüß™ Running tests...');\n    \n    try {\n      const { stdout } = await execAsync('npm test 2>&1 || true');\n      const lines = stdout.split('\\n');\n      \n      // Parse test results\n      const summaryLine = lines.find(l => l.includes('Tests:') || l.includes('PASS') || l.includes('FAIL'));\n      \n      if (summaryLine) {\n        console.log(`  ${summaryLine.trim()}`);\n        \n        // Extract coverage if available\n        const coverageLine = lines.find(l => l.includes('Coverage'));\n        if (coverageLine) {\n          console.log(`  ${coverageLine.trim()}`);\n        }\n        \n        this.testResults.push({\n          timestamp: new Date(),\n          passed: stdout.includes('PASS'),\n          summary: summaryLine\n        });\n        \n        return stdout.includes('PASS');\n      } else {\n        console.log('  ‚ö†Ô∏è No test results found');\n        return false;\n      }\n    } catch (error) {\n      console.log('  ‚ùå Test execution failed:', error.message);\n      return false;\n    }\n  }\n\n  startRoleTimer() {\n    if (this.mode !== 'switch') return;\n    \n    this.roleTimer = setTimeout(() => {\n      this.switchRoles();\n      this.startRoleTimer(); // Restart timer\n    }, 10 * 60 * 1000); // 10 minutes\n  }\n\n  switchRoles() {\n    const oldRole = this.currentRole;\n    this.currentRole = this.currentRole === 'driver' ? 'navigator' : 'driver';\n    \n    console.log('\\nüîÑ Role Switch!');\n    console.log(`  Previous role: ${oldRole.toUpperCase()}`);\n    console.log(`  New role: ${this.currentRole.toUpperCase()}`);\n    console.log('  Take a moment to transition...\\n');\n  }\n\n  async startInteractiveMode() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: '\\nüíª pair> '\n    });\n\n    console.log('\\nüí° Interactive mode active. Type /help for commands.\\n');\n    \n    this.rl.prompt();\n\n    this.rl.on('line', async (line) => {\n      const input = line.trim();\n      \n      if (input.startsWith('/')) {\n        await this.handleCommand(input);\n      } else if (input) {\n        // Handle regular input as code discussion\n        console.log('ü§ñ AI: Processing your input...');\n        // In a real implementation, this would send to AI\n      }\n      \n      this.rl.prompt();\n    });\n\n    this.rl.on('close', () => {\n      this.end();\n    });\n  }\n\n  async handleCommand(command) {\n    const [cmd, ...args] = command.split(' ');\n    \n    switch (cmd) {\n      case '/help':\n        this.showCommands();\n        break;\n        \n      case '/switch':\n        this.switchRoles();\n        break;\n        \n      case '/suggest':\n        console.log('ü§ñ AI Suggestion: Consider using async/await for better readability');\n        break;\n        \n      case '/review':\n        console.log('üîç Starting code review...');\n        await this.runVerification();\n        break;\n        \n      case '/test':\n        await this.runTests();\n        break;\n        \n      case '/verify':\n        await this.runVerification();\n        break;\n        \n      case '/status':\n        await this.showStatus();\n        break;\n        \n      case '/metrics':\n        this.showMetrics();\n        break;\n        \n      case '/commit':\n        await this.commitWithVerification();\n        break;\n        \n      case '/end':\n      case '/exit':\n        await this.end();\n        process.exit(0);\n        break;\n        \n      default:\n        console.log(`‚ùå Unknown command: ${cmd}`);\n        console.log('üí° Type /help for available commands');\n    }\n  }\n\n  async showStatus() {\n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    \n    console.log('\\nüìä Session Status');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Duration: ${duration} minutes`);\n    console.log(`Current Role: ${this.currentRole.toUpperCase()}`);\n    console.log(`Mode: ${this.mode}`);\n    console.log(`Status: ${this.status}`);\n    \n    if (this.verify && this.verificationScores.length > 0) {\n      const avgScore = this.verificationScores.reduce((a, b) => a + b, 0) / this.verificationScores.length;\n      console.log(`Average Verification: ${avgScore.toFixed(2)}`);\n    }\n    \n    if (this.test && this.testResults.length > 0) {\n      const passed = this.testResults.filter(r => r.passed).length;\n      console.log(`Tests Passed: ${passed}/${this.testResults.length}`);\n    }\n  }\n\n  showMetrics() {\n    console.log('\\nüìà Quality Metrics');\n    console.log('‚îÅ'.repeat(40));\n    \n    if (this.verificationScores.length > 0) {\n      console.log('\\nVerification History:');\n      this.verificationScores.slice(-5).forEach((score, i) => {\n        const bar = '‚ñà'.repeat(Math.floor(score * 20));\n        console.log(`  ${i + 1}. ${bar} ${score.toFixed(2)}`);\n      });\n    }\n    \n    if (this.testResults.length > 0) {\n      console.log('\\nTest Results:');\n      this.testResults.slice(-5).forEach((result, i) => {\n        console.log(`  ${i + 1}. ${result.passed ? '‚úÖ' : '‚ùå'} ${new Date(result.timestamp).toLocaleTimeString()}`);\n      });\n    }\n  }\n\n  async commitWithVerification() {\n    console.log('\\nüîç Pre-commit verification...');\n    \n    const score = await this.runVerification();\n    \n    if (score >= this.threshold) {\n      console.log('‚úÖ Verification passed! Ready to commit.');\n      console.log('üí° Run: git commit -m \"your message\"');\n    } else {\n      console.log('‚ùå Verification failed! Please fix issues before committing.');\n    }\n  }\n\n  async end() {\n    console.log('\\nüõë Ending pair programming session...');\n    \n    // Clear intervals\n    if (this.verificationInterval) clearInterval(this.verificationInterval);\n    if (this.testInterval) clearInterval(this.testInterval);\n    if (this.roleTimer) clearTimeout(this.roleTimer);\n    if (this.rl) this.rl.close();\n    \n    // Update session\n    this.status = 'completed';\n    await this.saveSession();\n    \n    // Show summary\n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    console.log('\\n‚ú® Session Complete!');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Duration: ${duration} minutes`);\n    \n    if (this.verificationScores.length > 0) {\n      const avgScore = this.verificationScores.reduce((a, b) => a + b, 0) / this.verificationScores.length;\n      console.log(`Average Verification: ${avgScore.toFixed(2)}`);\n    }\n    \n    if (this.testResults.length > 0) {\n      const passed = this.testResults.filter(r => r.passed).length;\n      console.log(`Test Success Rate: ${((passed / this.testResults.length) * 100).toFixed(0)}%`);\n    }\n    \n    console.log('\\nüëã Thanks for pair programming!\\n');\n  }\n\n  async saveSession() {\n    const sessionPath = '.claude-flow/sessions/pair';\n    await fs.mkdir(sessionPath, { recursive: true });\n    \n    const sessionData = {\n      id: this.sessionId,\n      mode: this.mode,\n      agent: this.agent,\n      verify: this.verify,\n      test: this.test,\n      threshold: this.threshold,\n      startTime: this.startTime.toISOString(),\n      status: this.status,\n      currentRole: this.currentRole,\n      verificationScores: this.verificationScores,\n      testResults: this.testResults\n    };\n    \n    await fs.writeFile(\n      path.join(sessionPath, `${this.sessionId}.json`),\n      JSON.stringify(sessionData, null, 2)\n    );\n  }\n}\n\nasync function pairCommand(args = [], flags = {}) {\n  console.log('\\nüë• Pair Programming Session');\n  console.log('‚îÅ'.repeat(50));\n\n  // Handle help flag\n  if (flags.help || args.includes('--help')) {\n    showHelp();\n    return;\n  }\n\n  // Handle background execution\n  if (flags.background || flags.bg) {\n    return startBackgroundSession(args, flags);\n  }\n\n  // Handle start flag\n  if (flags.start) {\n    const session = new PairProgrammingSession({\n      mode: flags.mode || 'switch',\n      agent: flags.agent || 'auto',\n      verify: flags.verify || false,\n      test: flags.test || false,\n      threshold: parseFloat(flags.threshold) || 0.95\n    });\n    \n    return await session.start();\n  }\n\n  // Handle status flag\n  if (flags.status) {\n    return showSessionStatus();\n  }\n\n  // Handle end flag\n  if (flags.end) {\n    return endSession(flags.sessionId || 'current');\n  }\n\n  // Default: show help\n  showHelp();\n}\n\nfunction showHelp() {\n  console.log(`\nüìö USAGE:\n  claude-flow pair [options]\n\n‚öôÔ∏è OPTIONS:\n  --start              Start a new pair programming session\n  --end                End current session\n  --status             Show session status\n  --mode <type>        Programming mode: driver, navigator, switch (default: switch)\n  --agent <name>       AI pair partner (default: auto-select)\n  --verify             Enable real-time verification\n  --test               Run tests after each change\n  --threshold <n>      Verification threshold (default: 0.95)\n  --background, --bg   Run in background\n  --help               Show this help message\n\nüìù MODES:\n  driver     You write code, AI assists\n  navigator  AI writes code, you guide\n  switch     Automatically alternate roles every 10 minutes\n\nüéØ SESSION COMMANDS:\n  /help      Show available commands\n  /switch    Switch driver/navigator roles\n  /suggest   Get AI suggestions\n  /review    Request code review\n  /test      Run tests manually\n  /verify    Run verification check\n  /status    Show session status\n  /metrics   Show quality metrics\n  /commit    Commit with verification\n  /end       End session\n\nüí° EXAMPLES:\n  claude-flow pair --start\n  claude-flow pair --start --mode driver --verify\n  claude-flow pair --start --verify --test\n  claude-flow pair --start --agent senior-dev --test\n  claude-flow pair --status\n  claude-flow pair --end\n\nüéØ QUICK START:\n  npx claude-flow@alpha pair --start --verify --test\n\nüìö For detailed documentation, see:\n  .claude/commands/pair/README.md\n`);\n}\n\nasync function startBackgroundSession(args, flags) {\n  console.log('\\nüîÑ Starting pair session in background...');\n  \n  const child = spawn(process.argv[0], [\n    process.argv[1],\n    'pair',\n    '--start',\n    ...args.filter(arg => arg !== '--background' && arg !== '--bg')\n  ], {\n    detached: true,\n    stdio: 'ignore'\n  });\n\n  child.unref();\n  \n  const pid = child.pid;\n  console.log(`‚úÖ Background session started (PID: ${pid})`);\n  console.log('\\nüìä Monitor with: claude-flow pair --status');\n  console.log('üõë Stop with: claude-flow pair --end\\n');\n}\n\nasync function showSessionStatus() {\n  try {\n    const sessionPath = '.claude-flow/sessions/pair';\n    const files = await fs.readdir(sessionPath);\n    const sessions = [];\n\n    for (const file of files) {\n      if (file.endsWith('.json')) {\n        const data = await fs.readFile(path.join(sessionPath, file), 'utf8');\n        sessions.push(JSON.parse(data));\n      }\n    }\n\n    if (sessions.length === 0) {\n      console.log('\\n‚ùå No active pair programming sessions\\n');\n      return;\n    }\n\n    console.log('\\nüìä Pair Programming Sessions:');\n    console.log('‚îÅ'.repeat(50));\n    \n    for (const session of sessions.filter(s => s.status === 'active')) {\n      const duration = Math.floor((Date.now() - new Date(session.startTime).getTime()) / 1000 / 60);\n      console.log(`\\nüîπ Session: ${session.id}`);\n      console.log(`   Mode: ${session.mode}`);\n      console.log(`   Agent: ${session.agent}`);\n      console.log(`   Duration: ${duration} minutes`);\n      console.log(`   Status: ${session.status}`);\n      console.log(`   Verification: ${session.verify ? '‚úÖ' : '‚ùå'}`);\n      console.log(`   Testing: ${session.test ? '‚úÖ' : '‚ùå'}`);\n      \n      if (session.verificationScores && session.verificationScores.length > 0) {\n        const avgScore = session.verificationScores.reduce((a, b) => a + b, 0) / session.verificationScores.length;\n        console.log(`   Avg Verification: ${avgScore.toFixed(2)}`);\n      }\n    }\n    \n    console.log('‚îÅ'.repeat(50));\n  } catch (error) {\n    console.log('\\n‚ùå No active pair programming sessions\\n');\n  }\n}\n\nasync function endSession(sessionId) {\n  console.log(`\\nüõë Ending pair programming session: ${sessionId}`);\n  \n  try {\n    const sessionPath = '.claude-flow/sessions/pair';\n    \n    if (sessionId === 'current') {\n      // End most recent active session\n      const files = await fs.readdir(sessionPath);\n      for (const file of files.filter(f => f.endsWith('.json'))) {\n        const data = await fs.readFile(path.join(sessionPath, file), 'utf8');\n        const session = JSON.parse(data);\n        if (session.status === 'active') {\n          sessionId = session.id;\n          break;\n        }\n      }\n    }\n    \n    const sessionFile = path.join(sessionPath, `${sessionId}.json`);\n    const data = await fs.readFile(sessionFile, 'utf8');\n    const session = JSON.parse(data);\n    \n    session.status = 'completed';\n    session.endTime = new Date().toISOString();\n    \n    await fs.writeFile(sessionFile, JSON.stringify(session, null, 2));\n    \n    console.log('‚úÖ Session ended successfully');\n    console.log(`\\nüìä Session Summary:`);\n    console.log(`  Duration: ${Math.floor((new Date(session.endTime) - new Date(session.startTime)) / 1000 / 60)} minutes`);\n    console.log(`  Mode: ${session.mode}`);\n    console.log(`  Agent: ${session.agent}\\n`);\n  } catch (error) {\n    console.log('‚ùå Failed to end session:', error.message);\n  }\n}\n\nexport default pairCommand;"],"names":["fs","path","spawn","exec","promisify","readline","execAsync","PairProgrammingSession","options","sessionId","Date","now","mode","agent","verify","test","threshold","startTime","status","currentRole","verificationScores","testResults","fileWatchers","Map","rl","start","saveSession","showWelcome","startVerification","startTestWatcher","startInteractiveMode","console","log","repeat","toUpperCase","startRoleTimer","showCommands","verificationInterval","setInterval","runVerification","checks","name","command","totalScore","passedChecks","check","stdout","passed","toLowerCase","includes","score","toFixed","error","averageScore","length","push","runTests","testInterval","lines","split","summaryLine","find","l","trim","coverageLine","timestamp","summary","message","roleTimer","setTimeout","switchRoles","oldRole","createInterface","input","process","stdin","output","prompt","on","line","startsWith","handleCommand","end","cmd","args","showStatus","showMetrics","commitWithVerification","exit","duration","Math","floor","avgScore","reduce","a","b","filter","r","slice","forEach","i","bar","result","toLocaleTimeString","clearInterval","clearTimeout","close","sessionPath","mkdir","recursive","sessionData","id","toISOString","writeFile","join","JSON","stringify","pairCommand","flags","help","showHelp","background","bg","startBackgroundSession","session","parseFloat","showSessionStatus","endSession","child","argv","arg","detached","stdio","unref","pid","files","readdir","sessions","file","endsWith","data","readFile","parse","s","getTime","f","sessionFile","endTime"],"mappings":"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"}