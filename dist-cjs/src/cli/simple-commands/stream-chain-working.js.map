{"version":3,"sources":["../../../../src/cli/simple-commands/stream-chain-working.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Stream Chain Command - Working implementation for Claude Code\n * Uses stream-json output but regular prompt input for compatibility\n */\n\nimport { spawn, execSync } from 'child_process';\n\n/**\n * Check if claude command is available\n */\nfunction checkClaudeAvailable() {\n  try {\n    execSync('which claude', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extract content from stream-json output\n */\nfunction extractContentFromStream(streamOutput) {\n  const lines = streamOutput.split('\\n').filter(line => line.trim());\n  let content = '';\n  \n  for (const line of lines) {\n    try {\n      const json = JSON.parse(line);\n      if (json.type === 'assistant' && json.message && json.message.content) {\n        for (const item of json.message.content) {\n          if (item.type === 'text' && item.text) {\n            content += item.text;\n          }\n        }\n      }\n    } catch (e) {\n      // Skip non-JSON lines\n    }\n  }\n  \n  return content.trim();\n}\n\n/**\n * Execute a single step with context from previous step\n */\nasync function executeStep(prompt, previousContent, stepNum, totalSteps, flags) {\n  return new Promise((resolve) => {\n    const startTime = Date.now();\n    const timeout = (flags.timeout || 30) * 1000;\n    \n    // Build the full prompt with context\n    let fullPrompt = prompt;\n    if (previousContent) {\n      fullPrompt = `Previous step output:\\n${previousContent}\\n\\nNext step: ${prompt}`;\n    }\n    \n    // Build command args\n    const args = ['-p'];\n    \n    // Always use stream-json output for parsing\n    args.push('--output-format', 'stream-json', '--verbose');\n    \n    // Add the prompt\n    args.push(fullPrompt);\n    \n    if (flags.verbose) {\n      console.log(`   Command: claude ${args[0]} ${args[1]} ${args[2]} \"${args[4].slice(0, 50)}...\"`);\n    }\n    \n    // Spawn Claude process\n    const claudeProcess = spawn('claude', args, {\n      stdio: ['pipe', 'pipe', 'pipe'],\n      env: process.env\n    });\n    \n    let output = '';\n    let stderr = '';\n    let completed = false;\n    \n    // Close stdin since we're not piping input\n    claudeProcess.stdin.end();\n    \n    // Capture output\n    claudeProcess.stdout.on('data', (chunk) => {\n      output += chunk.toString();\n    });\n    \n    // Capture errors\n    claudeProcess.stderr.on('data', (chunk) => {\n      stderr += chunk.toString();\n    });\n    \n    // Handle completion\n    claudeProcess.on('close', (code) => {\n      if (completed) return;\n      completed = true;\n      \n      const duration = Date.now() - startTime;\n      \n      if (code !== 0) {\n        console.error(`   Process exited with code ${code}`);\n        if (stderr && flags.verbose) {\n          console.error(`   stderr: ${stderr.slice(0, 200)}`);\n        }\n        resolve({\n          success: false,\n          duration,\n          content: null,\n          rawOutput: output\n        });\n        return;\n      }\n      \n      // Extract content from stream-json output\n      const content = extractContentFromStream(output);\n      \n      resolve({\n        success: true,\n        duration,\n        content,\n        rawOutput: output\n      });\n    });\n    \n    // Handle errors\n    claudeProcess.on('error', (error) => {\n      if (completed) return;\n      completed = true;\n      \n      console.error('   Process error:', error.message);\n      resolve({\n        success: false,\n        duration: Date.now() - startTime,\n        content: null,\n        rawOutput: null\n      });\n    });\n    \n    // Timeout\n    setTimeout(() => {\n      if (!completed) {\n        completed = true;\n        claudeProcess.kill('SIGTERM');\n        console.log('   ‚è±Ô∏è  Step timed out');\n        resolve({\n          success: false,\n          duration: timeout,\n          content: null,\n          rawOutput: null\n        });\n      }\n    }, timeout);\n  });\n}\n\n/**\n * Execute the chain\n */\nasync function executeChain(prompts, flags) {\n  const results = [];\n  let previousContent = null;\n  \n  for (let i = 0; i < prompts.length; i++) {\n    const prompt = prompts[i];\n    console.log(`\\nüîÑ Step ${i + 1}/${prompts.length}: ${prompt.slice(0, 50)}...`);\n    \n    const result = await executeStep(\n      prompt,\n      previousContent,\n      i + 1,\n      prompts.length,\n      flags\n    );\n    \n    results.push({\n      step: i + 1,\n      prompt: prompt.slice(0, 50),\n      success: result.success,\n      duration: result.duration,\n      content: result.content\n    });\n    \n    if (!result.success) {\n      console.error(`‚ùå Step ${i + 1} failed`);\n      break;\n    }\n    \n    console.log(`‚úÖ Step ${i + 1} completed (${result.duration}ms)`);\n    \n    if (result.content) {\n      previousContent = result.content;\n      if (flags.verbose) {\n        console.log(`   Content: ${result.content.slice(0, 100)}...`);\n      }\n    }\n  }\n  \n  return results;\n}\n\n/**\n * Main command\n */\nexport async function streamChainCommand(args, flags) {\n  const subcommand = args[0] || 'help';\n  \n  if (subcommand === 'help') {\n    showHelp();\n    return;\n  }\n  \n  if (!checkClaudeAvailable()) {\n    console.error('‚ùå Claude Code not found');\n    console.log('Please ensure Claude Code is installed and available');\n    return;\n  }\n  \n  switch (subcommand) {\n    case 'demo':\n      await runDemo(flags);\n      break;\n      \n    case 'run':\n      await runCustom(args.slice(1), flags);\n      break;\n      \n    case 'test':\n      await runTest(flags);\n      break;\n      \n    default:\n      console.error(`‚ùå Unknown subcommand: ${subcommand}`);\n      showHelp();\n  }\n}\n\nfunction showHelp() {\n  console.log(`\nüîó Stream Chain Command - Claude Code Context Chaining\n\nDESCRIPTION\n    Chain multiple Claude Code prompts with context preservation.\n    Each step receives the output from the previous step.\n\nUSAGE\n    stream-chain <subcommand> [options]\n\nSUBCOMMANDS\n    run <p1> <p2> [...]  Execute custom chain\n    demo                 Run demo chain\n    test                 Test chaining\n    help                 Show this help\n\nOPTIONS\n    --verbose            Show detailed output\n    --timeout <seconds>  Timeout per step (default: 30)\n\nEXAMPLES\n    stream-chain demo\n    stream-chain run \"Write code\" \"Review it\" \"Improve it\"\n    stream-chain test --verbose\n  `);\n}\n\nasync function runDemo(flags) {\n  console.log('üé≠ Running Stream Chain Demo');\n  console.log('‚îÅ'.repeat(50));\n  \n  const prompts = [\n    \"Write a simple Python function to reverse a string\",\n    \"Add type hints to the function\",\n    \"Add a docstring to the function\"\n  ];\n  \n  const results = await executeChain(prompts, flags);\n  showSummary(results);\n}\n\nasync function runCustom(prompts, flags) {\n  if (prompts.length < 2) {\n    console.error('‚ùå Need at least 2 prompts');\n    return;\n  }\n  \n  console.log('üîó Starting Custom Chain');\n  console.log('‚îÅ'.repeat(50));\n  \n  const results = await executeChain(prompts, flags);\n  showSummary(results);\n}\n\nasync function runTest(flags) {\n  console.log('üß™ Testing Stream Chain');\n  console.log('‚îÅ'.repeat(50));\n  \n  const prompts = [\n    \"Say exactly: 'Step 1 complete'\",\n    \"If the previous step said 'Step 1 complete', say 'Chain working!'\"\n  ];\n  \n  const results = await executeChain(prompts, { ...flags, verbose: true });\n  \n  const success = results.every(r => r.success);\n  console.log('\\n' + (success ? '‚úÖ Test passed!' : '‚ùå Test failed'));\n}\n\nfunction showSummary(results) {\n  console.log('\\n' + '‚ïê'.repeat(50));\n  console.log('üìä Summary');\n  console.log('‚ïê'.repeat(50));\n  \n  for (const r of results) {\n    const status = r.success ? '‚úÖ' : '‚ùå';\n    console.log(`${status} Step ${r.step}: ${r.prompt}... (${r.duration}ms)`);\n  }\n  \n  const total = results.reduce((sum, r) => sum + r.duration, 0);\n  const success = results.filter(r => r.success).length;\n  \n  console.log(`\\n‚è±Ô∏è  Total: ${total}ms`);\n  console.log(`üìà Success: ${success}/${results.length}`);\n}\n\nexport default streamChainCommand;"],"names":["spawn","execSync","checkClaudeAvailable","stdio","extractContentFromStream","streamOutput","lines","split","filter","line","trim","content","json","JSON","parse","type","message","item","text","e","executeStep","prompt","previousContent","stepNum","totalSteps","flags","Promise","resolve","startTime","Date","now","timeout","fullPrompt","args","push","verbose","console","log","slice","claudeProcess","env","process","output","stderr","completed","stdin","end","stdout","on","chunk","toString","code","duration","error","success","rawOutput","setTimeout","kill","executeChain","prompts","results","i","length","result","step","streamChainCommand","subcommand","showHelp","runDemo","runCustom","runTest","repeat","showSummary","every","r","status","total","reduce","sum"],"mappings":"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"}