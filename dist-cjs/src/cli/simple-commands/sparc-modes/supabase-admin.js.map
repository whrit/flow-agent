{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/supabase-admin.js"],"sourcesContent":["// supabase-admin.js - Supabase Admin mode orchestration template\nexport function getSupabaseAdminOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps - Supabase MCP Mode\n\n1. **Requirements Analysis & MCP Setup** (10 mins)\n   - Analyze database requirements: \"${taskDescription}\"\n   - Query existing project context:\n     \\`\\`\\`bash\n     npx claude-flow memory query ${memoryNamespace}_architecture\n     npx claude-flow memory query ${memoryNamespace}_data_models\n     npx claude-flow memory query ${memoryNamespace}_auth_requirements\n     \\`\\`\\`\n   - Connect to Supabase via MCP:\n     - List organizations: \\`list_organizations\\`\n     - List existing projects: \\`list_projects\\`\n     - Get project details if exists\n   - Review cost implications:\n     - Use \\`get_cost\\` before creating resources\n     - Confirm costs with user via \\`confirm_cost\\`\n   - Store analysis: \\`npx claude-flow memory store ${memoryNamespace}_supabase_requirements \"Requirements: ${taskDescription}. Tables needed: users, profiles, permissions. Auth: Email + OAuth. Storage: user avatars, documents.\"\\`\n\n2. **Database Schema Design** (15 mins)\n   - Design PostgreSQL schemas optimized for Supabase:\n     - Normalize data structures\n     - Plan for real-time subscriptions\n     - Design for RLS efficiency\n   - Define table relationships:\n     - Foreign keys and constraints\n     - Cascade rules\n     - Junction tables for many-to-many\n   - Plan indexes for performance:\n     - Primary key indexes\n     - Foreign key indexes\n     - Composite indexes for queries\n   - Design audit/history tables if needed\n   - Create modular migration approach (<500 lines per file)\n   - Store design: \\`npx claude-flow memory store ${memoryNamespace}_db_design \"Tables: users (id, email, created_at), profiles (user_id, full_name, avatar_url), roles (id, name), user_roles (user_id, role_id). Indexes: users_email_idx, profiles_user_id_idx.\"\\`\n\n3. **Schema Implementation via MCP** (20 mins)\n   - Create development branch (if needed):\n     - Check costs: \\`get_cost type:\"branch\"\\`\n     - Create branch: \\`create_branch\\`\n   - Implement schema using \\`execute_sql\\`:\n     \\`\\`\\`sql\n     -- Create schemas\n     CREATE SCHEMA IF NOT EXISTS auth_ext;\n     CREATE SCHEMA IF NOT EXISTS app;\n     \n     -- Create tables\n     CREATE TABLE app.profiles (\n       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n       user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n       full_name TEXT,\n       avatar_url TEXT,\n       created_at TIMESTAMPTZ DEFAULT NOW()\n     );\n     \\`\\`\\`\n   - Add performance indexes\n   - Create database functions and triggers\n   - Set up audit trails\n   - Store migrations: \\`npx claude-flow memory store ${memoryNamespace}_migrations \"Created: 5 tables, 8 indexes, 3 functions, 2 triggers. Branch: dev-${Date.now()}. Ready for RLS policies.\"\\`\n\n4. **Security & RLS Implementation** (15 mins)\n   - Implement Row Level Security policies:\n     - Enable RLS on all tables\n     - Create policies for CRUD operations\n     - Test policy effectiveness\n   - Configure authentication:\n     - Set up auth providers\n     - Configure JWT claims\n     - Create custom auth functions\n   - Implement data access patterns:\n     - User can only see own data\n     - Role-based access for admins\n     - Public read for certain tables\n   - Create security functions:\n     \\`\\`\\`sql\n     CREATE FUNCTION auth.user_has_role(role_name TEXT) \n     RETURNS BOOLEAN AS $$\n       SELECT EXISTS (\n         SELECT 1 FROM app.user_roles ur\n         JOIN app.roles r ON ur.role_id = r.id\n         WHERE ur.user_id = auth.uid() \n         AND r.name = role_name\n       );\n     $$ LANGUAGE SQL SECURITY DEFINER;\n     \\`\\`\\`\n   - Store security config: \\`npx claude-flow memory store ${memoryNamespace}_security \"RLS enabled on all tables. Policies: 15 created (CRUD + special cases). Auth providers: email, google. Custom claims: user_role, organization_id.\"\\`\n\n5. **API & Storage Configuration** (10 mins)\n   - Generate TypeScript types:\n     - Use \\`generate_typescript_types\\`\n     - Save to project repository\n   - Configure storage buckets:\n     - Create buckets for different file types\n     - Set up access policies\n     - Configure file size limits\n   - Document API endpoints:\n     - Get project URL: \\`get_project_url\\`\n     - Get anon key: \\`get_anon_key\\`\n     - Create API documentation\n   - Set up Edge Functions (if needed)\n   - Test API access patterns\n   - Store completion: \\`npx claude-flow memory store ${memoryNamespace}_supabase_complete \"Supabase setup complete. API URL: https://xxx.supabase.co. Types generated. Storage buckets: avatars (public), documents (authenticated). Ready for integration.\"\\`\n\n## Deliverables\n- migrations/\n  - 001_initial_schema.sql\n  - 002_create_profiles.sql\n  - 003_add_indexes.sql\n  - 004_rls_policies.sql\n  - 005_auth_functions.sql\n- types/\n  - supabase.ts (generated types)\n  - database.types.ts\n- docs/\n  - SCHEMA_DESIGN.md\n  - RLS_POLICIES.md\n  - API_ENDPOINTS.md\n  - STORAGE_GUIDE.md\n- config/\n  - supabase-config.json\n  - .env.example (with Supabase URLs)\n\n## Supabase Best Practices\n- NEVER expose service role key in code\n- Always use RLS for data protection\n- Test policies thoroughly before production\n- Use \\`execute_sql\\` for data operations, not \\`apply_migration\\`\n- Keep migration files modular and < 500 lines\n- Document all custom functions and triggers\n- Use parameterized queries to prevent SQL injection\n- Monitor database performance and optimize queries\n\n## MCP Tool Reminders\n- Always check costs before creating resources\n- Use development branches for testing\n- Verify changes with \\`list_tables\\` and \\`list_migrations\\`\n- Use \\`get_logs\\` to debug issues\n- Test API access with generated types\n- Document all database objects\n\n## Next Steps\nAfter Supabase setup:\n- \\`npx claude-flow sparc run code \"Integrate Supabase client in application\" --non-interactive\\`\n- \\`npx claude-flow sparc run tdd \"Write tests for Supabase operations\" --non-interactive\\`\n- \\`npx claude-flow sparc run docs-writer \"Create Supabase integration guide\" --non-interactive\\``;\n}\n"],"names":["getSupabaseAdminOrchestration","taskDescription","memoryNamespace","Date","now"],"mappings":"AACA,OAAO,SAASA,8BAA8BC,eAAe,EAAEC,eAAe;IAC5E,OAAO,CAAC;;;;qCAI2B,EAAED,gBAAgB;;;kCAGrB,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;;;;;oDASA,EAAEA,gBAAgB,sCAAsC,EAAED,gBAAgB;;;;;;;;;;;;;;;;;kDAiB5E,EAAEC,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;sDAwBd,EAAEA,gBAAgB,gFAAgF,EAAEC,KAAKC,GAAG,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA2B1G,EAAEF,gBAAgB;;;;;;;;;;;;;;;;sDAgBvB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iGA2CyB,CAAC;AAClG"}