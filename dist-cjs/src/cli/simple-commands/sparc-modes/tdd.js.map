{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/tdd.js"],"sourcesContent":["// tdd.js - Test-Driven Development mode orchestration template\nexport function getTddOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps - London School TDD\n\n1. **Test Planning & Analysis** (10 mins)\n   - Analyze requirements: \"${taskDescription}\"\n   - Query existing code and architecture:\n     \\\\\\`\\\\\\`\\\\\\`bash\n     npx claude-flow memory query ${memoryNamespace}_architecture\n     npx claude-flow memory query ${memoryNamespace}_implementation\n     npx claude-flow memory query ${memoryNamespace}_tech_specs\n     \\\\\\`\\\\\\`\\\\\\`\n   - Define test boundaries and acceptance criteria\n   - Plan test structure (unit, integration, e2e)\n   - Identify test doubles needed (mocks, stubs, spies)\n   - Store plan: \\`npx claude-flow memory store ${memoryNamespace}_test_plan \"Test strategy: Unit tests for domain logic, integration for APIs, e2e for workflows. Mocking: External services, database. Coverage target: 95%.\"\\`\n\n2. **Red Phase - Write Failing Tests** (20 mins)\n   - Create comprehensive test structure:\n     \\\\\\`\\\\\\`\\\\\\`\n     tests/\n     ├── unit/          # Isolated component tests\n     ├── integration/   # Component interaction tests\n     ├── e2e/          # End-to-end workflow tests\n     └── fixtures/      # Test data and mocks\n     \\\\\\`\\\\\\`\\\\\\`\n   - Write tests following London School TDD:\n     - Start with behavior/contract tests\n     - Use test doubles for dependencies\n     - Focus on interactions, not state\n   - Ensure NO hardcoded values in tests\n   - Create parameterized tests for edge cases\n   - Verify all tests fail with meaningful messages\n   - Store status: \\`npx claude-flow memory store ${memoryNamespace}_red_phase \"Written: 25 unit tests (all failing), 10 integration tests (all failing), 5 e2e tests (all failing). Coverage: 0%.\"\\`\n\n3. **Green Phase - Minimal Implementation** (20 mins)\n   - Implement ONLY enough code to pass tests:\n     - Start with the simplest implementation\n     - Make one test pass at a time\n     - Don't add unrequested functionality\n   - Maintain modularity (files < 500 lines)\n   - Use dependency injection for testability\n   - Implement proper error handling\n   - Track coverage as you progress\n   - Store progress: \\`npx claude-flow memory store ${memoryNamespace}_green_phase \"Progress: 20/25 unit tests passing, 8/10 integration tests passing. Current coverage: 75%. Remaining: Complex edge cases.\"\\`\n\n4. **Refactor Phase - Optimize & Clean** (15 mins)\n   - Refactor while keeping tests green:\n     - Extract common patterns into utilities\n     - Improve naming and code clarity\n     - Optimize algorithms and data structures\n     - Reduce duplication (DRY principle)\n   - Ensure files remain under 500 lines\n   - Add performance tests if needed\n   - Improve test maintainability\n   - Document complex test scenarios\n   - Store refactoring: \\`npx claude-flow memory store ${memoryNamespace}_refactor \"Extracted 3 common utilities, optimized database queries, improved test readability. All tests green. Coverage: 95%.\"\\`\n\n5. **Test Documentation & Validation** (10 mins)\n   - Generate coverage reports\n   - Document test scenarios and edge cases\n   - Create test execution guide\n   - Set up CI/CD test configuration\n   - Validate against acceptance criteria\n   - Store completion: \\`npx claude-flow memory store ${memoryNamespace}_tdd_complete \"TDD cycle complete. Coverage: 95%. All acceptance criteria met. Tests documented. CI/CD ready.\"\\`\n\n## Directory Safety\n- **IMPORTANT**: All test files should be created in the current working directory\n- **DO NOT** create files in system directories or node_modules\n- For named projects, create a subdirectory: \\\\\\`mkdir project-name && cd project-name\\\\\\`\n- Use relative paths from your working directory\n- Test files should follow project structure:\n  \\\\\\`\\\\\\`\\\\\\`\n  ./ (current directory)\n  ├── tests/\n  │   ├── unit/\n  │   ├── integration/\n  │   └── e2e/\n  ├── coverage/\n  └── docs/\n  \\\\\\`\\\\\\`\\\\\\`\n\n## Deliverables\n- tests/\n  - unit/ (isolated component tests)\n  - integration/ (interaction tests)\n  - e2e/ (workflow tests)\n  - fixtures/ (test data, no hardcoded values)\n  - helpers/ (test utilities)\n- coverage/\n  - coverage report (HTML + JSON)\n  - coverage badge\n- docs/\n  - TEST_GUIDE.md (how to run tests)\n  - TEST_SCENARIOS.md (test case documentation)\n- .github/workflows/ or .gitlab-ci.yml (CI configuration)\n\n## Testing Best Practices\n- NO hardcoded secrets or environment values in tests\n- Use test fixtures and factories for test data\n- Mock external dependencies at boundaries\n- Test behavior, not implementation details\n- Maintain test independence (no shared state)\n- Use descriptive test names that document behavior\n\n## Next Steps\nAfter TDD cycle completes:\n- \\`npx claude-flow sparc run debug \"Investigate any failing edge cases\" --non-interactive\\`\n- \\`npx claude-flow sparc run refinement-optimization-mode \"Optimize performance bottlenecks\" --non-interactive\\`\n- \\`npx claude-flow sparc run docs-writer \"Create user documentation\" --non-interactive\\``;\n}\n"],"names":["getTddOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,oBAAoBC,eAAe,EAAEC,eAAe;IAClE,OAAO,CAAC;;;;4BAIkB,EAAED,gBAAgB;;;kCAGZ,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;gDAKJ,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;kDAkBhB,EAAEA,gBAAgB;;;;;;;;;;;oDAWhB,EAAEA,gBAAgB;;;;;;;;;;;;uDAYf,EAAEA,gBAAgB;;;;;;;;sDAQnB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yFA6CiB,CAAC;AAC1F"}