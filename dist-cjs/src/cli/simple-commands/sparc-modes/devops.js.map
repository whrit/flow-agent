{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/devops.js"],"sourcesContent":["// devops.js - DevOps mode orchestration template\nexport function getDevOpsOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps\n\n1. **Environment Analysis** (10 mins)\n   - Run system analysis: \\`uname -a\\`\n   - Understand deployment requirements: \"${taskDescription}\"\n   - Query architecture and configuration:\n     \\`\\`\\`bash\n     npx claude-flow memory query ${memoryNamespace}_architecture\n     npx claude-flow memory query ${memoryNamespace}_deployment\n     npx claude-flow memory query ${memoryNamespace}_infrastructure\n     \\`\\`\\`\n   - Identify target environments:\n     - Development, staging, production\n     - Cloud providers (AWS, GCP, Azure)\n     - Edge platforms (Vercel, Cloudflare)\n     - Container orchestration (K8s, ECS)\n   - Review current infrastructure state\n   - Store analysis: \\`npx claude-flow memory store ${memoryNamespace}_devops_analysis \"Task: ${taskDescription}. Target: AWS ECS + CloudFront. Current: Local dev only. Requirements: Auto-scaling, blue-green deployment, monitoring.\"\\`\n\n2. **Infrastructure Provisioning** (20 mins)\n   - Set up infrastructure as code:\n     - Create Terraform/CloudFormation templates\n     - Define resource configurations\n     - Set up networking (VPC, subnets, security groups)\n   - Provision compute resources:\n     - Cloud functions (Lambda, Cloud Functions)\n     - Container services (ECS, GKE)\n     - Edge runtimes (Workers, Functions)\n   - Configure managed services:\n     - Databases (RDS, DynamoDB, Firestore)\n     - Caching (ElastiCache, Memorystore)\n     - Message queues (SQS, Pub/Sub)\n   - Set up secrets management:\n     - AWS Secrets Manager / GCP Secret Manager\n     - Vault integration\n     - Environment injection layers\n   - NEVER hardcode credentials or tokens\n   - Store provisioning: \\`npx claude-flow memory store ${memoryNamespace}_infrastructure \"Provisioned: ECS cluster (2 AZs), RDS PostgreSQL, ElastiCache Redis, ALB. Secrets: AWS Secrets Manager configured. Terraform state: S3 backend.\"\\`\n\n3. **CI/CD Pipeline Setup** (15 mins)\n   - Create pipeline configuration:\n     - GitHub Actions / GitLab CI / Jenkins\n     - Multi-stage pipeline (build, test, deploy)\n     - Environment-specific deployments\n   - Implement build stages:\n     \\`\\`\\`yaml\n     - Build: Compile, bundle, optimize\n     - Test: Unit, integration, e2e\n     - Security: SAST, dependency scanning\n     - Package: Docker images, artifacts\n     \\`\\`\\`\n   - Configure deployment strategies:\n     - Blue-green deployments\n     - Canary releases\n     - Rollback procedures\n   - Set up quality gates:\n     - Code coverage thresholds\n     - Performance benchmarks\n     - Security scan results\n   - Store pipeline config: \\`npx claude-flow memory store ${memoryNamespace}_cicd \"Pipeline: GitHub Actions. Stages: build->test->security->deploy. Environments: dev (auto), staging (manual), prod (approved). Rollback: Automated on failure.\"\\`\n\n4. **Monitoring & Observability** (15 mins)\n   - Set up application monitoring:\n     - APM tools (DataDog, New Relic, AppDynamics)\n     - Custom metrics and dashboards\n     - Real-time alerting\n   - Configure infrastructure monitoring:\n     - CloudWatch / Stackdriver metrics\n     - Resource utilization alerts\n     - Cost optimization tracking\n   - Implement logging strategy:\n     - Centralized logging (ELK, CloudWatch Logs)\n     - Structured logging format\n     - Log retention policies\n   - Set up distributed tracing:\n     - Request flow tracking\n     - Performance bottleneck identification\n     - Error correlation\n   - Configure alerting rules:\n     - SLA/SLO monitoring\n     - Anomaly detection\n     - Escalation procedures\n   - Store monitoring setup: \\`npx claude-flow memory store ${memoryNamespace}_monitoring \"APM: DataDog configured. Logs: CloudWatch Logs with 30-day retention. Alerts: CPU >80%, Memory >85%, Error rate >1%. Dashboards: App performance, infra health, cost tracking.\"\\`\n\n5. **Security & Compliance** (10 mins)\n   - Implement security best practices:\n     - TLS/SSL certificates (Let's Encrypt, ACM)\n     - WAF rules and DDoS protection\n     - Network segmentation\n     - IAM roles and policies\n   - Configure compliance controls:\n     - Audit logging\n     - Data encryption at rest/transit\n     - Backup and disaster recovery\n   - Set up security scanning:\n     - Container image scanning\n     - Infrastructure vulnerability scanning\n     - Compliance policy validation\n   - Document security procedures\n   - Store security config: \\`npx claude-flow memory store ${memoryNamespace}_devops_security \"TLS: ACM certificates on ALB. WAF: OWASP rules enabled. IAM: Least privilege roles. Backups: Daily snapshots, 30-day retention. Compliance: SOC2 controls implemented.\"\\`\n\n## Deliverables\n- infrastructure/\n  - terraform/ (IaC templates, < 500 lines per file)\n  - scripts/ (deployment scripts)\n  - configs/ (environment configurations)\n- .github/workflows/ or .gitlab-ci.yml\n  - ci.yml (build and test pipeline)\n  - deploy.yml (deployment pipeline)\n- monitoring/\n  - dashboards/ (monitoring dashboards)\n  - alerts/ (alerting rules)\n- docs/\n  - DEPLOYMENT.md (deployment procedures)\n  - RUNBOOK.md (operational runbook)\n  - DISASTER_RECOVERY.md (DR procedures)\n  - ROLLBACK.md (rollback instructions)\n\n## DevOps Best Practices\n- Immutable infrastructure deployments\n- Blue-green deployment strategy\n- Automated rollback on failures\n- Never hardcode credentials - use secrets managers\n- Infrastructure as Code for everything\n- Comprehensive monitoring and alerting\n- Regular disaster recovery testing\n- Cost optimization reviews\n\n## Next Steps\nAfter DevOps setup:\n- \\`npx claude-flow sparc run post-deployment-monitoring-mode \"Verify production deployment health\" --non-interactive\\`\n- \\`npx claude-flow sparc run security-review \"Audit infrastructure security\" --non-interactive\\`\n- \\`npx claude-flow sparc run refinement-optimization-mode \"Optimize deployment performance\" --non-interactive\\``;\n}\n"],"names":["getDevOpsOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,uBAAuBC,eAAe,EAAEC,eAAe;IACrE,OAAO,CAAC;;;;;0CAKgC,EAAED,gBAAgB;;;kCAG1B,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;;;;oDAQA,EAAEA,gBAAgB,wBAAwB,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;;;wDAoBxD,EAAEC,gBAAgB;;;;;;;;;;;;;;;;;;;;;;2DAsBf,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;4DAuBjB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;2DAiBnB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHAiCmC,CAAC;AACjH"}