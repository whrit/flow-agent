{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/tutorial.js"],"sourcesContent":["// tutorial.js - SPARC Tutorial mode orchestration template\nexport function getTutorialOrchestration(taskDescription, memoryNamespace) {\n  return `\n## üìò SPARC Tutorial - Learn by Building\n\nWelcome to the SPARC development methodology tutorial! I'll guide you through building \"${taskDescription}\" using systematic SPARC practices.\n\n## SPARC Overview\n\n**SPARC** stands for:\n- **S**pecification: Define what to build\n- **P**seudocode: Plan the logic\n- **A**rchitecture: Design the structure\n- **R**efinement: Build with quality\n- **C**ompletion: Integrate and deploy\n\n## Tutorial Structure\n\n### Phase 1: Specification (20 mins)\nLet's start by properly specifying what we're building:\n\n\\`\\`\\`bash\n# Store our learning objective\nnpx claude-flow memory store ${memoryNamespace}_tutorial_start \"Learning SPARC by building: ${taskDescription}\"\n\n# Use spec-pseudocode mode to define requirements\nnpx claude-flow sparc run spec-pseudocode \"Tutorial project: ${taskDescription} - create detailed specifications\" --non-interactive\n\\`\\`\\`\n\n**What you'll learn:**\n- How to break down requirements\n- Writing clear specifications\n- Identifying edge cases\n- Creating testable acceptance criteria\n\n**Key principles:**\n- Be specific about inputs/outputs\n- Consider error scenarios\n- Define success metrics\n- No implementation details yet\n\n### Phase 2: Architecture (20 mins)\nNow let's design a scalable system:\n\n\\`\\`\\`bash\n# Query our specifications\nnpx claude-flow memory query ${memoryNamespace}_requirements\n\n# Design the architecture\nnpx claude-flow sparc run architect \"Tutorial: Design architecture for ${taskDescription}\" --non-interactive\n\\`\\`\\`\n\n**What you'll learn:**\n- Creating modular designs\n- Defining service boundaries\n- Planning data flows\n- Security considerations\n\n**Key principles:**\n- Keep modules under 500 lines\n- Separate concerns clearly\n- Plan for extensibility\n- Never hardcode secrets\n\n### Phase 3: Test-Driven Development (30 mins)\nImplement with TDD for quality:\n\n\\`\\`\\`bash\n# Start with tests\nnpx claude-flow sparc run tdd \"Tutorial: Implement ${taskDescription} with TDD\" --non-interactive\n\n# Follow Red-Green-Refactor cycle:\n# 1. Red: Write failing tests\n# 2. Green: Make tests pass\n# 3. Refactor: Improve code quality\n\\`\\`\\`\n\n**What you'll learn:**\n- Writing tests first\n- London School TDD\n- Test doubles (mocks, stubs)\n- Achieving high coverage\n\n**TDD Cycle Practice:**\n1. Write a failing test for one feature\n2. Implement minimum code to pass\n3. Refactor while keeping tests green\n4. Repeat for next feature\n\n### Phase 4: Code Implementation (30 mins)\nBuild the full implementation:\n\n\\`\\`\\`bash\n# Implement based on TDD foundation\nnpx claude-flow sparc run code \"Tutorial: Complete implementation of ${taskDescription}\" --non-interactive\n\n# Store progress\nnpx claude-flow memory store ${memoryNamespace}_implementation_progress \"Core features complete, working on edge cases\"\n\\`\\`\\`\n\n**What you'll learn:**\n- Clean architecture principles\n- Dependency injection\n- Error handling patterns\n- Configuration management\n\n**Best practices to follow:**\n- Use environment variables properly\n- Implement comprehensive logging\n- Add input validation\n- Handle errors gracefully\n\n### Phase 5: Security & Quality (20 mins)\nEnsure security and quality:\n\n\\`\\`\\`bash\n# Security audit\nnpx claude-flow sparc run security-review \"Tutorial: Security review of ${taskDescription}\" --non-interactive\n\n# Code optimization\nnpx claude-flow sparc run refinement-optimization-mode \"Tutorial: Optimize ${taskDescription}\" --non-interactive\n\\`\\`\\`\n\n**What you'll learn:**\n- Identifying security vulnerabilities\n- OWASP best practices\n- Performance optimization\n- Code refactoring techniques\n\n### Phase 6: Documentation (15 mins)\nDocument your work:\n\n\\`\\`\\`bash\n# Create comprehensive docs\nnpx claude-flow sparc run docs-writer \"Tutorial: Document ${taskDescription}\" --non-interactive\n\\`\\`\\`\n\n**What you'll learn:**\n- Writing clear README files\n- API documentation\n- User guides\n- Troubleshooting sections\n\n### Phase 7: Integration & Deployment (20 mins)\nBring it all together:\n\n\\`\\`\\`bash\n# Integrate components\nnpx claude-flow sparc run integration \"Tutorial: Integrate all components of ${taskDescription}\" --non-interactive\n\n# Set up deployment\nnpx claude-flow sparc run devops \"Tutorial: Deploy ${taskDescription}\" --non-interactive\n\\`\\`\\`\n\n**What you'll learn:**\n- Component integration\n- CI/CD setup\n- Deployment strategies\n- Monitoring configuration\n\n## Interactive Exercises\n\n### Exercise 1: Memory Management\nPractice using Claude-Flow memory:\n\\`\\`\\`bash\n# Store different types of information\nnpx claude-flow memory store ${memoryNamespace}_decisions \"Chose PostgreSQL for data persistence due to ACID requirements\"\nnpx claude-flow memory store ${memoryNamespace}_blockers \"Need clarification on authentication requirements\"\n\n# Query your stored information\nnpx claude-flow memory query ${memoryNamespace}_decisions\n\\`\\`\\`\n\n### Exercise 2: Mode Coordination\nPractice coordinating between modes:\n\\`\\`\\`bash\n# Start with spec\nnpx claude-flow sparc run spec-pseudocode \"Define user registration flow\" --non-interactive\n\n# Then architecture\nnpx claude-flow sparc run architect \"Design registration service\" --non-interactive\n\n# Then TDD implementation\nnpx claude-flow sparc run tdd \"Implement registration with tests\" --non-interactive\n\\`\\`\\`\n\n### Exercise 3: Debugging Practice\nPractice debugging workflow:\n\\`\\`\\`bash\n# Simulate a bug\nnpx claude-flow sparc run debug \"Tutorial: Fix registration validation bug\" --non-interactive\n\\`\\`\\`\n\n## Mental Models for SPARC\n\n### 1. **The Building Model**\nThink of SPARC like constructing a building:\n- Specification = Blueprint\n- Pseudocode = Foundation plan\n- Architecture = Structural design\n- Refinement = Quality construction\n- Completion = Final inspection\n\n### 2. **The Iteration Model**\nEach SPARC cycle improves the system:\n- First pass: Core functionality\n- Second pass: Edge cases\n- Third pass: Optimization\n- Continuous: Improvements\n\n### 3. **The Quality Gate Model**\nEach phase has exit criteria:\n- Spec complete? ‚Üí Clear requirements\n- Architecture sound? ‚Üí Scalable design\n- Tests passing? ‚Üí Quality code\n- Security reviewed? ‚Üí Safe to deploy\n\n## Common Pitfalls to Avoid\n\n1. **Skipping Specification**\n   - ‚ùå Jumping straight to code\n   - ‚úÖ Define requirements first\n\n2. **Monolithic Design**\n   - ‚ùå One large file/component\n   - ‚úÖ Modular < 500 line files\n\n3. **Hardcoding Values**\n   - ‚ùå API keys in code\n   - ‚úÖ Environment configuration\n\n4. **Ignoring Tests**\n   - ‚ùå Testing after implementation\n   - ‚úÖ TDD from the start\n\n5. **Poor Documentation**\n   - ‚ùå Code without context\n   - ‚úÖ Comprehensive guides\n\n## Tutorial Completion\n\nCongratulations! You've learned SPARC by building \"${taskDescription}\". \n\n### Review your journey:\n\\`\\`\\`bash\n# See all your stored learnings\nnpx claude-flow memory query ${memoryNamespace}_tutorial\n\n# Check your implementation\nnpx claude-flow status\n\\`\\`\\`\n\n### Next steps:\n1. Try building another feature using SPARC\n2. Experiment with different mode combinations\n3. Create your own SPARC workflow templates\n4. Share your learnings with the team\n\nRemember: SPARC is about systematic, quality development. Each mode serves a purpose - use them wisely to build amazing software!\n\n## Quick Reference Card\n\n\\`\\`\\`bash\n# SPARC Quick Commands\nnpx claude-flow sparc run spec-pseudocode \"Define X\" --non-interactive      # Requirements\nnpx claude-flow sparc run architect \"Design X\" --non-interactive            # Architecture\nnpx claude-flow sparc run tdd \"Build X with tests\" --non-interactive       # TDD\nnpx claude-flow sparc run code \"Implement X\" --non-interactive             # Clean code\nnpx claude-flow sparc run debug \"Fix X issue\" --non-interactive            # Debugging\nnpx claude-flow sparc run security-review \"Audit X\" --non-interactive      # Security\nnpx claude-flow sparc run docs-writer \"Document X\" --non-interactive       # Documentation\nnpx claude-flow sparc run integration \"Connect X\" --non-interactive        # Integration\nnpx claude-flow sparc run devops \"Deploy X\" --non-interactive              # Deployment\n\\`\\`\\`\n\nHappy SPARC coding! üöÄ`;\n}\n"],"names":["getTutorialOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,yBAAyBC,eAAe,EAAEC,eAAe;IACvE,OAAO,CAAC;;;wFAG8E,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;6BAkB7E,EAAEC,gBAAgB,6CAA6C,EAAED,gBAAgB;;;6DAGjD,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;6BAoBlD,EAAEC,gBAAgB;;;uEAGwB,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;;;mDAoBtC,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;qEAyBA,EAAEA,gBAAgB;;;6BAG1D,EAAEC,gBAAgB;;;;;;;;;;;;;;;;;;;;wEAoByB,EAAED,gBAAgB;;;2EAGf,EAAEA,gBAAgB;;;;;;;;;;;;;;0DAcnC,EAAEA,gBAAgB;;;;;;;;;;;;;;6EAcC,EAAEA,gBAAgB;;;mDAG5C,EAAEA,gBAAgB;;;;;;;;;;;;;;;6BAexC,EAAEC,gBAAgB;6BAClB,EAAEA,gBAAgB;;;6BAGlB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAuEI,EAAED,gBAAgB;;;;;6BAKxC,EAAEC,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA6BzB,CAAC;AACvB"}