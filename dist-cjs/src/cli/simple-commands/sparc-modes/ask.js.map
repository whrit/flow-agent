{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/ask.js"],"sourcesContent":["// ask.js - Ask mode orchestration template\nexport function getAskOrchestration(taskDescription, memoryNamespace) {\n  return `\n## ‚ùì Ask Mode - SPARC Navigation Guide\n\nI'll help you navigate the SPARC methodology and determine the best approach for: \"${taskDescription}\"\n\n## Understanding Your Request\n\nLet me analyze your needs and guide you to the right SPARC mode:\n\n### 1. **Project Phase Analysis** (5 mins)\n   - What stage is your project in?\n   - What type of help do you need?\n   - What's your end goal?\n\n### 2. **SPARC Mode Recommendations**\n\nBased on your request, here are the relevant SPARC modes:\n\n#### üìã Planning & Design Modes:\n- **\\`spec-pseudocode\\`** - For creating detailed specifications, requirements, and high-level logic\n  - Use when: Starting a new feature, defining requirements, planning algorithms\n  - Example: \\`npx claude-flow sparc run spec-pseudocode \"Create user authentication flow\" --non-interactive\\`\n\n- **\\`architect\\`** - For system design, API boundaries, and service architecture\n  - Use when: Designing system structure, defining APIs, planning microservices\n  - Example: \\`npx claude-flow sparc run architect \"Design e-commerce platform architecture\" --non-interactive\\`\n\n#### üß† Implementation Modes:\n- **\\`code\\`** - For implementing features with clean architecture\n  - Use when: Building new features, writing production code\n  - Example: \\`npx claude-flow sparc run code \"Implement payment processing service\" --non-interactive\\`\n\n- **\\`tdd\\`** - For test-first development with comprehensive coverage\n  - Use when: Want high quality code, need test coverage, following TDD practices\n  - Example: \\`npx claude-flow sparc run tdd \"Build shopping cart with TDD\" --non-interactive\\`\n\n#### üîß Quality & Maintenance Modes:\n- **\\`debug\\`** - For troubleshooting issues and fixing bugs\n  - Use when: Something's broken, need to trace errors, fix runtime issues\n  - Example: \\`npx claude-flow sparc run debug \"Fix memory leak in data processor\" --non-interactive\\`\n\n- **\\`security-review\\`** - For security audits and vulnerability checks\n  - Use when: Need security audit, checking for exposed secrets, compliance review\n  - Example: \\`npx claude-flow sparc run security-review \"Audit user data handling\" --non-interactive\\`\n\n- **\\`refinement-optimization-mode\\`** - For performance optimization and refactoring\n  - Use when: Code needs optimization, files too large, performance issues\n  - Example: \\`npx claude-flow sparc run refinement-optimization-mode \"Optimize database queries\" --non-interactive\\`\n\n#### üìö Documentation & Integration:\n- **\\`docs-writer\\`** - For creating documentation and guides\n  - Use when: Need README, API docs, user guides\n  - Example: \\`npx claude-flow sparc run docs-writer \"Create API documentation\" --non-interactive\\`\n\n- **\\`integration\\`** - For connecting services and ensuring system cohesion\n  - Use when: Integrating components, connecting APIs, system integration\n  - Example: \\`npx claude-flow sparc run integration \"Connect auth service to user service\" --non-interactive\\`\n\n#### üöÄ Deployment & Operations:\n- **\\`devops\\`** - For deployment, CI/CD, and infrastructure\n  - Use when: Setting up deployment, configuring CI/CD, provisioning infrastructure\n  - Example: \\`npx claude-flow sparc run devops \"Deploy to AWS with auto-scaling\" --non-interactive\\`\n\n- **\\`post-deployment-monitoring-mode\\`** - For production monitoring\n  - Use when: Setting up monitoring, configuring alerts, tracking metrics\n  - Example: \\`npx claude-flow sparc run post-deployment-monitoring-mode \"Setup DataDog monitoring\" --non-interactive\\`\n\n#### üîê Specialized Modes:\n- **\\`supabase-admin\\`** - For Supabase database and auth management\n  - Use when: Working with Supabase, setting up database, configuring auth\n  - Example: \\`npx claude-flow sparc run supabase-admin \"Setup user authentication database\" --non-interactive\\`\n\n- **\\`mcp\\`** - For MCP (Model Context Protocol) integrations\n  - Use when: Integrating external tools via MCP, API connections\n  - Example: \\`npx claude-flow sparc run mcp \"Integrate Stripe payment API\" --non-interactive\\`\n\n### 3. **Workflow Recommendations**\n\nFor \"${taskDescription}\", I recommend this workflow:\n\n\\`\\`\\`bash\n# Step 1: Define requirements\nnpx claude-flow sparc run spec-pseudocode \"${taskDescription} - requirements and pseudocode\" --non-interactive\n\n# Step 2: Design architecture (if needed)\nnpx claude-flow sparc run architect \"${taskDescription} - system design\" --non-interactive\n\n# Step 3: Implement with TDD\nnpx claude-flow sparc run tdd \"${taskDescription} - implementation\" --non-interactive\n\n# Step 4: Security review\nnpx claude-flow sparc run security-review \"${taskDescription} - security audit\" --non-interactive\n\n# Step 5: Documentation\nnpx claude-flow sparc run docs-writer \"${taskDescription} - documentation\" --non-interactive\n\\`\\`\\`\n\n### 4. **Best Practices Reminder**\nWhen using any SPARC mode, remember:\n‚úÖ Keep files modular (< 500 lines)\n‚úÖ Never hardcode environment variables\n‚úÖ Use configuration files for env-specific values\n‚úÖ Write tests for critical functionality\n‚úÖ Document your decisions in memory\n\n### 5. **Memory Management**\nTrack your progress across modes:\n\\`\\`\\`bash\n# Store project context\nnpx claude-flow memory store ${memoryNamespace}_context \"Working on: ${taskDescription}\"\n\n# Query previous work\nnpx claude-flow memory query ${memoryNamespace}\n\n# List all memory entries\nnpx claude-flow memory list\n\\`\\`\\`\n\n## Next Steps\n\nBased on your request \"${taskDescription}\", which SPARC mode would you like to use? Or would you like me to help you break down your task into smaller, mode-specific subtasks?\n\nRemember: The SPARC methodology ensures systematic, high-quality development. Each mode has a specific purpose - use them in combination for best results!`;\n}\n"],"names":["getAskOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,oBAAoBC,eAAe,EAAEC,eAAe;IAClE,OAAO,CAAC;;;mFAGyE,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2EhG,EAAEA,gBAAgB;;;;2CAIoB,EAAEA,gBAAgB;;;qCAGxB,EAAEA,gBAAgB;;;+BAGxB,EAAEA,gBAAgB;;;2CAGN,EAAEA,gBAAgB;;;uCAGtB,EAAEA,gBAAgB;;;;;;;;;;;;;;;6BAe5B,EAAEC,gBAAgB,sBAAsB,EAAED,gBAAgB;;;6BAG1D,EAAEC,gBAAgB;;;;;;;;uBAQxB,EAAED,gBAAgB;;0JAEiH,CAAC;AAC3J"}