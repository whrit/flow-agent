{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/debug.js"],"sourcesContent":["// debug.js - Debugger mode orchestration template\nexport function getDebugOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps\n\n1. **Issue Analysis & Reproduction** (10 mins)\n   - Understand the reported issue: \"${taskDescription}\"\n   - Query relevant context and previous issues:\n     \\`\\`\\`bash\n     npx claude-flow memory query ${memoryNamespace}_bugs\n     npx claude-flow memory query ${memoryNamespace}_implementation\n     npx claude-flow memory query ${memoryNamespace}_tests\n     \\`\\`\\`\n   - Set up debugging environment:\n     - Enable verbose logging\n     - Configure debugging tools\n     - Prepare monitoring setup\n   - Reproduce the issue consistently\n   - Collect error messages, stack traces, and logs\n   - Identify affected components and dependencies\n   - Store findings: \\`npx claude-flow memory store ${memoryNamespace}_issue_analysis \"Issue: ${taskDescription}. Reproduction: Steps 1-3. Error: Stack trace at line X. Affected: auth-service, user-repository.\"\\`\n\n2. **Root Cause Investigation** (20 mins)\n   - Add strategic debug logging:\n     - Entry/exit points of suspect functions\n     - State before/after transformations\n     - External service call results\n   - Use debugging tools:\n     - Debugger breakpoints\n     - Memory profilers (if memory issue)\n     - Network analyzers (if API issue)\n   - Trace execution flow systematically:\n     - Follow data through the system\n     - Check assumptions at each step\n     - Verify external dependencies\n   - Analyze patterns:\n     - When does it fail? (timing, load, specific data)\n     - What changed recently? (code, config, dependencies)\n   - Avoid changing env configuration directly\n   - Store investigation: \\`npx claude-flow memory store ${memoryNamespace}_root_cause \"Root cause: Race condition in auth token refresh. Occurs under high load when token expires during request processing. Fix approach: Implement token refresh mutex.\"\\`\n\n3. **Solution Development** (15 mins)\n   - Develop targeted fix approach:\n     - Minimal change to resolve issue\n     - Maintain backward compatibility\n     - Consider edge cases\n   - Implement the solution:\n     - Keep changes modular\n     - Don't exceed 500 lines per file\n     - Add inline comments explaining the fix\n   - Add regression tests:\n     - Test the specific failure scenario\n     - Test related edge cases\n     - Ensure fix doesn't break existing tests\n   - Implement defensive coding:\n     - Add validation where missing\n     - Improve error messages\n     - Add circuit breakers if needed\n   - Store solution: \\`npx claude-flow memory store ${memoryNamespace}_solution \"Fix: Added mutex lock for token refresh. Tests: 3 regression tests added. Validation: Added token expiry check. No breaking changes.\"\\`\n\n4. **Validation & Performance Check** (10 mins)\n   - Run comprehensive test suite:\n     \\`\\`\\`bash\n     npm test\n     npm run test:integration\n     npm run test:e2e\n     \\`\\`\\`\n   - Verify original issue is resolved\n   - Check performance impact:\n     - Run performance benchmarks\n     - Monitor memory usage\n     - Check response times\n   - Test in conditions that triggered the bug\n   - Verify no new issues introduced\n   - Document the fix with context\n   - Store validation: \\`npx claude-flow memory store ${memoryNamespace}_debug_validation \"All tests passing. Performance impact: <5ms latency increase. Memory usage unchanged. Original issue resolved.\"\\`\n\n5. **Documentation & Cleanup** (5 mins)\n   - Create detailed fix documentation\n   - Remove debug logging (keep useful ones)\n   - Update error handling guides\n   - Create runbook for similar issues\n   - Submit for code review\n\n## Deliverables\n- Fixed code with:\n  - Inline comments explaining the fix\n  - Improved error messages\n  - Defensive coding additions\n- tests/regression/\n  - Test cases for the specific bug\n  - Edge case coverage\n- docs/\n  - DEBUG_REPORT.md (root cause analysis)\n  - FIX_DOCUMENTATION.md (what was changed and why)\n  - RUNBOOK.md (guide for similar issues)\n- Performance comparison report\n\n## Debugging Best Practices\n- Use structured logging with correlation IDs\n- Avoid changing production env during debugging\n- Keep debug changes isolated and reversible\n- Test fixes under same conditions as bug\n- Document investigation process for future reference\n- Consider using feature flags for gradual rollout\n\n## Next Steps\nAfter debugging completes:\n- \\`npx claude-flow sparc run security-review \"Review security impact of ${taskDescription} fix\" --non-interactive\\`\n- \\`npx claude-flow sparc run refinement-optimization-mode \"Refactor affected modules for better maintainability\" --non-interactive\\`\n- \\`npx claude-flow sparc run post-deployment-monitoring-mode \"Monitor ${taskDescription} fix in production\" --non-interactive\\``;\n}\n"],"names":["getDebugOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,sBAAsBC,eAAe,EAAEC,eAAe;IACpE,OAAO,CAAC;;;;qCAI2B,EAAED,gBAAgB;;;kCAGrB,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;;;;;oDASA,EAAEA,gBAAgB,wBAAwB,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;;yDAmBvD,EAAEC,gBAAgB;;;;;;;;;;;;;;;;;;;oDAmBvB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;sDAiBhB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yEAiCC,EAAED,gBAAgB;;uEAEpB,EAAEA,gBAAgB,uCAAuC,CAAC;AACjI"}