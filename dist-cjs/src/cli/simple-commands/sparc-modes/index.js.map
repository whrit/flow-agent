{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/index.js"],"sourcesContent":["// index.js - SPARC mode orchestration loader\nimport { getArchitectOrchestration } from './architect.js';\nimport { getCodeOrchestration } from './code.js';\nimport { getTddOrchestration } from './tdd.js';\nimport { getDebugOrchestration } from './debug.js';\nimport { getSecurityReviewOrchestration } from './security-review.js';\nimport { getDocsWriterOrchestration } from './docs-writer.js';\nimport { getIntegrationOrchestration } from './integration.js';\nimport { getMonitoringOrchestration } from './monitoring.js';\nimport { getOptimizationOrchestration } from './optimization.js';\nimport { getSupabaseAdminOrchestration } from './supabase-admin.js';\nimport { getSpecPseudocodeOrchestration } from './spec-pseudocode.js';\nimport { getMcpOrchestration } from './mcp.js';\nimport { getDevOpsOrchestration } from './devops.js';\nimport { getAskOrchestration } from './ask.js';\nimport { getTutorialOrchestration } from './tutorial.js';\nimport { getSparcOrchestratorOrchestration } from './sparc-orchestrator.js';\nimport { getGenericOrchestration } from './generic.js';\nimport { getSwarmOrchestration } from './swarm.js';\n\n// Mode orchestration mapping\nconst modeOrchestrations = {\n  architect: getArchitectOrchestration,\n  code: getCodeOrchestration,\n  tdd: getTddOrchestration,\n  debug: getDebugOrchestration,\n  'security-review': getSecurityReviewOrchestration,\n  'docs-writer': getDocsWriterOrchestration,\n  integration: getIntegrationOrchestration,\n  'post-deployment-monitoring-mode': getMonitoringOrchestration,\n  'refinement-optimization-mode': getOptimizationOrchestration,\n  'supabase-admin': getSupabaseAdminOrchestration,\n  'spec-pseudocode': getSpecPseudocodeOrchestration,\n  mcp: getMcpOrchestration,\n  devops: getDevOpsOrchestration,\n  ask: getAskOrchestration,\n  tutorial: getTutorialOrchestration,\n  sparc: getSparcOrchestratorOrchestration,\n  swarm: getSwarmOrchestration,\n};\n\n/**\n * Get orchestration template for a specific mode\n * @param {string} modeSlug - The mode slug identifier\n * @param {string} taskDescription - The task description\n * @param {string} memoryNamespace - The memory namespace\n * @returns {string} The orchestration template\n */\nexport function getModeOrchestration(modeSlug, taskDescription, memoryNamespace) {\n  const orchestrationFunction = modeOrchestrations[modeSlug];\n\n  if (orchestrationFunction) {\n    return orchestrationFunction(taskDescription, memoryNamespace);\n  }\n\n  // Return generic orchestration for unknown modes\n  return getGenericOrchestration(taskDescription, memoryNamespace);\n}\n\n/**\n * Get the base SPARC prompt template\n * @param {Object} mode - The mode configuration\n * @param {string} taskDescription - The task description\n * @param {string} memoryNamespace - The memory namespace\n * @returns {string} The complete SPARC prompt\n */\nexport function createSparcPrompt(mode, taskDescription, memoryNamespace) {\n  const orchestration = getModeOrchestration(mode.slug, taskDescription, memoryNamespace);\n  // Get the actual working directory where the command was run from\n  const cwd = process.env.PWD || process.cwd();\n\n  return `# ${mode.name} - Task Execution\n\n## üéØ Your Mission\nBuild exactly what the user requested: \"${taskDescription}\"\n\n## üìÅ IMPORTANT: Project Directory\n**Current Working Directory:** ${cwd}\n\n‚ö†Ô∏è **CRITICAL INSTRUCTIONS:**\n- Create ALL project files in the current working directory: ${cwd}\n- NEVER create files in node_modules/ or any claude-flow directories\n- If the task specifies a project name (e.g., \"hello-world\"), create it as a subdirectory in ${cwd}\n- Use paths relative to ${cwd} for all file operations\n- Example: If creating \"hello-world\" app, use ${cwd}/hello-world/\n\n## üöÄ Your Role\n${mode.roleDefinition}\n\n${orchestration}\n\n## üìã Mode-Specific Guidelines\n${mode.customInstructions}\n\n## üõ†Ô∏è Claude-Flow Integration\n\n### Memory Operations\nUse the memory system to track your progress and share context:\n\n\\`\\`\\`bash\n# Store your work\nnpx claude-flow memory store ${memoryNamespace}_<phase> \"description of work completed\"\n\n# Query previous work\nnpx claude-flow memory query ${memoryNamespace}\n\n# Examples for this task\nnpx claude-flow memory store ${memoryNamespace}_analysis \"Analyzed ${taskDescription} - found X components needed\"\nnpx claude-flow memory store ${memoryNamespace}_progress \"Completed Y% of implementation\"\nnpx claude-flow memory store ${memoryNamespace}_blockers \"Issue with Z - need clarification\"\n\\`\\`\\`\n\n### Task Orchestration\nFor complex tasks, coordinate with other specialists:\n\n\\`\\`\\`bash\n# Check system status\nnpx claude-flow status\n\n# View active agents (if --parallel was used)\nnpx claude-flow agent list\n\n# Monitor progress\nnpx claude-flow monitor\n\\`\\`\\`\n\n### üöÄ Parallel Execution with BatchTool\nUse BatchTool to orchestrate multiple SPARC modes concurrently in a boomerang pattern:\n\n\\`\\`\\`bash\n# Example: Parallel development workflow\nbatchtool run --parallel \\\\\n  \"npx claude-flow sparc run architect 'design user authentication system' --non-interactive\" \\\\\n  \"npx claude-flow sparc run security-review 'analyze authentication requirements' --non-interactive\" \\\\\n  \"npx claude-flow sparc run spec-pseudocode 'create auth flow pseudocode' --non-interactive\"\n\n# Boomerang Pattern: Research ‚Üí Design ‚Üí Implement ‚Üí Test ‚Üí Refine\nbatchtool orchestrate --boomerang \\\\\n  --phase1 \"npx claude-flow sparc run ask 'research best auth practices' --non-interactive\" \\\\\n  --phase2 \"npx claude-flow sparc run architect 'design based on research' --non-interactive\" \\\\\n  --phase3 \"npx claude-flow sparc run code 'implement auth system' --non-interactive\" \\\\\n  --phase4 \"npx claude-flow sparc run tdd 'test auth implementation' --non-interactive\" \\\\\n  --phase5 \"npx claude-flow sparc run optimization 'refine auth performance' --non-interactive\"\n\n# Concurrent Feature Development\nbatchtool run --concurrent --max-parallel 3 \\\\\n  \"npx claude-flow sparc run code 'implement login feature' --non-interactive\" \\\\\n  \"npx claude-flow sparc run code 'implement registration feature' --non-interactive\" \\\\\n  \"npx claude-flow sparc run code 'implement password reset' --non-interactive\" \\\\\n  \"npx claude-flow sparc run tdd 'create auth test suite' --non-interactive\"\n\\`\\`\\`\n\n#### Boomerang Orchestration Pattern\nThe boomerang pattern allows for iterative development where results from one phase inform the next:\n1. **Research Phase**: Gather requirements and best practices\n2. **Design Phase**: Create architecture based on research\n3. **Implementation Phase**: Build according to design\n4. **Testing Phase**: Validate implementation\n5. **Refinement Phase**: Optimize based on test results\n6. **Loop Back**: Results feed back to improve the cycle\n\nBenefits of --non-interactive mode with BatchTool:\n- No manual intervention required\n- Parallel execution of independent tasks\n- Automatic result collection and aggregation\n- Progress tracking across all concurrent operations\n- Efficient resource utilization\n\n## ‚ö° Execution Guidelines\n\n1. **Focus on User's Project**\n   - Build what they asked for, not improvements to claude-flow\n   - Create files ONLY in the current working directory: ${cwd}\n   - NEVER create files in node_modules/ or system directories\n   - If creating a named project, make it a subdirectory of ${cwd}\n   - Use appropriate project structure relative to ${cwd}\n\n2. **Directory Rules**\n   - Current directory: ${cwd}\n   - Create new projects as: ${cwd}/<project-name>/\n   - Use relative paths from ${cwd} for all operations\n   - Verify you're in the correct directory before creating files\n\n3. **Quality Standards**\n   - Keep all files under 500 lines\n   - Never hardcode secrets or credentials\n   - Use environment variables and config files\n   - Write clean, maintainable code\n\n4. **Communication**\n   - Store progress updates in memory\n   - Document key decisions\n   - Ask for clarification if needed\n   - Provide clear status updates\n\n## üèÅ Start Execution\n\nBegin with Step 1 of the orchestration plan above. Focus on delivering exactly what was requested: \"${taskDescription}\"\n\nRemember: You're building the user's project, using claude-flow only for memory and orchestration support.`;\n}\n"],"names":["getArchitectOrchestration","getCodeOrchestration","getTddOrchestration","getDebugOrchestration","getSecurityReviewOrchestration","getDocsWriterOrchestration","getIntegrationOrchestration","getMonitoringOrchestration","getOptimizationOrchestration","getSupabaseAdminOrchestration","getSpecPseudocodeOrchestration","getMcpOrchestration","getDevOpsOrchestration","getAskOrchestration","getTutorialOrchestration","getSparcOrchestratorOrchestration","getGenericOrchestration","getSwarmOrchestration","modeOrchestrations","architect","code","tdd","debug","integration","mcp","devops","ask","tutorial","sparc","swarm","getModeOrchestration","modeSlug","taskDescription","memoryNamespace","orchestrationFunction","createSparcPrompt","mode","orchestration","slug","cwd","process","env","PWD","name","roleDefinition","customInstructions"],"mappings":"AACA,SAASA,yBAAyB,QAAQ,iBAAiB;AAC3D,SAASC,oBAAoB,QAAQ,YAAY;AACjD,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,qBAAqB,QAAQ,aAAa;AACnD,SAASC,8BAA8B,QAAQ,uBAAuB;AACtE,SAASC,0BAA0B,QAAQ,mBAAmB;AAC9D,SAASC,2BAA2B,QAAQ,mBAAmB;AAC/D,SAASC,0BAA0B,QAAQ,kBAAkB;AAC7D,SAASC,4BAA4B,QAAQ,oBAAoB;AACjE,SAASC,6BAA6B,QAAQ,sBAAsB;AACpE,SAASC,8BAA8B,QAAQ,uBAAuB;AACtE,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,sBAAsB,QAAQ,cAAc;AACrD,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,wBAAwB,QAAQ,gBAAgB;AACzD,SAASC,iCAAiC,QAAQ,0BAA0B;AAC5E,SAASC,uBAAuB,QAAQ,eAAe;AACvD,SAASC,qBAAqB,QAAQ,aAAa;AAGnD,MAAMC,qBAAqB;IACzBC,WAAWnB;IACXoB,MAAMnB;IACNoB,KAAKnB;IACLoB,OAAOnB;IACP,mBAAmBC;IACnB,eAAeC;IACfkB,aAAajB;IACb,mCAAmCC;IACnC,gCAAgCC;IAChC,kBAAkBC;IAClB,mBAAmBC;IACnBc,KAAKb;IACLc,QAAQb;IACRc,KAAKb;IACLc,UAAUb;IACVc,OAAOb;IACPc,OAAOZ;AACT;AASA,OAAO,SAASa,qBAAqBC,QAAQ,EAAEC,eAAe,EAAEC,eAAe;IAC7E,MAAMC,wBAAwBhB,kBAAkB,CAACa,SAAS;IAE1D,IAAIG,uBAAuB;QACzB,OAAOA,sBAAsBF,iBAAiBC;IAChD;IAGA,OAAOjB,wBAAwBgB,iBAAiBC;AAClD;AASA,OAAO,SAASE,kBAAkBC,IAAI,EAAEJ,eAAe,EAAEC,eAAe;IACtE,MAAMI,gBAAgBP,qBAAqBM,KAAKE,IAAI,EAAEN,iBAAiBC;IAEvE,MAAMM,MAAMC,QAAQC,GAAG,CAACC,GAAG,IAAIF,QAAQD,GAAG;IAE1C,OAAO,CAAC,EAAE,EAAEH,KAAKO,IAAI,CAAC;;;wCAGgB,EAAEX,gBAAgB;;;+BAG3B,EAAEO,IAAI;;;6DAGwB,EAAEA,IAAI;;6FAE0B,EAAEA,IAAI;wBAC3E,EAAEA,IAAI;8CACgB,EAAEA,IAAI;;;AAGpD,EAAEH,KAAKQ,cAAc,CAAC;;AAEtB,EAAEP,cAAc;;;AAGhB,EAAED,KAAKS,kBAAkB,CAAC;;;;;;;;;6BASG,EAAEZ,gBAAgB;;;6BAGlB,EAAEA,gBAAgB;;;6BAGlB,EAAEA,gBAAgB,oBAAoB,EAAED,gBAAgB;6BACxD,EAAEC,gBAAgB;6BAClB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDA+DU,EAAEM,IAAI;;4DAEH,EAAEA,IAAI;mDACf,EAAEA,IAAI;;;wBAGjC,EAAEA,IAAI;6BACD,EAAEA,IAAI;6BACN,EAAEA,IAAI;;;;;;;;;;;;;;;;;oGAiBiE,EAAEP,gBAAgB;;0GAEZ,CAAC;AAC3G"}