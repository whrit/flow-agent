{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/security-review.js"],"sourcesContent":["// security-review.js - Security Reviewer mode orchestration template\nexport function getSecurityReviewOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps\n\n1. **Security Audit Scope Definition** (10 mins)\n   - Define audit boundaries for: \"${taskDescription}\"\n   - Query system architecture and sensitive areas:\n     \\`\\`\\`bash\n     npx claude-flow memory query ${memoryNamespace}_architecture\n     npx claude-flow memory query ${memoryNamespace}_auth\n     npx claude-flow memory query ${memoryNamespace}_config\n     \\`\\`\\`\n   - Identify critical assets:\n     - User data and PII\n     - Authentication tokens/sessions\n     - API keys and credentials\n     - Payment/financial data\n   - Map data flows and trust boundaries\n   - List all external interfaces and integrations\n   - Review authentication/authorization points\n   - Store scope: \\`npx claude-flow memory store ${memoryNamespace}_security_scope \"Audit scope: ${taskDescription}. Critical assets: user PII, JWT tokens, payment data. External interfaces: REST API, webhooks, third-party integrations.\"\\`\n\n2. **Static Security Analysis** (20 mins)\n   - Scan for hardcoded secrets and credentials:\n     - Check all code files for API keys, passwords\n     - Verify .env files are properly gitignored\n     - Ensure no secrets in logs or error messages\n   - Review environment configuration:\n     - Check for direct env coupling\n     - Verify secrets management approach\n     - Ensure config files don't expose sensitive data\n   - Analyze authentication/authorization:\n     - Review JWT implementation\n     - Check session management\n     - Verify role-based access control\n   - Inspect input validation and sanitization:\n     - SQL injection prevention\n     - XSS protection\n     - Command injection safeguards\n   - Check cryptographic implementations:\n     - Password hashing (bcrypt/scrypt/argon2)\n     - Data encryption at rest/transit\n     - Secure random number generation\n   - Audit file size compliance (< 500 lines)\n   - Review dependency vulnerabilities:\n     \\`\\`\\`bash\n     npm audit\n     \\`\\`\\`\n   - Store findings: \\`npx claude-flow memory store ${memoryNamespace}_vulnerabilities \"Critical: 2 hardcoded API keys found. High: Missing input validation in user-controller. Medium: Outdated JWT library. Low: Verbose error messages expose stack traces.\"\\`\n\n3. **Dynamic Security Analysis** (10 mins)\n   - Test authentication flows:\n     - Login/logout sequences\n     - Password reset process\n     - Token refresh mechanisms\n   - Check authorization boundaries:\n     - Test role-based access\n     - Verify resource ownership checks\n     - Test privilege escalation vectors\n   - Analyze rate limiting and DoS protection\n   - Review CORS and CSP policies\n   - Test error handling for information leakage\n   - Store dynamic findings: \\`npx claude-flow memory store ${memoryNamespace}_dynamic_findings \"Auth bypass: None found. Rate limiting: Missing on login endpoint. CORS: Overly permissive. Error handling: Leaks database schema in dev mode.\"\\`\n\n4. **Risk Assessment & Prioritization** (15 mins)\n   - Categorize findings by severity (CVSS scores):\n     - Critical (9.0-10.0): Immediate action required\n     - High (7.0-8.9): Fix before deployment\n     - Medium (4.0-6.9): Fix in next sprint\n     - Low (0.1-3.9): Track for future\n   - Assess potential business impact:\n     - Data breach consequences\n     - Compliance violations (GDPR, PCI-DSS)\n     - Reputation damage\n   - Calculate risk scores (likelihood Ã— impact)\n   - Prioritize remediation efforts\n   - Document attack vectors and exploit scenarios\n   - Store assessment: \\`npx claude-flow memory store ${memoryNamespace}_risk_assessment \"Critical risks: 2 (hardcoded secrets, missing auth on admin endpoints). High risks: 3 (outdated deps, missing rate limiting, weak session management). Compliance impact: GDPR violation risk due to logging PII.\"\\`\n\n5. **Remediation Plan & Implementation** (10 mins)\n   - Create specific fix recommendations:\n     - Move secrets to environment variables\n     - Implement proper secrets management (Vault/AWS Secrets Manager)\n     - Add comprehensive input validation\n     - Update vulnerable dependencies\n     - Implement rate limiting\n     - Fix authorization checks\n   - Suggest security enhancements:\n     - Add security headers (HSTS, CSP, X-Frame-Options)\n     - Implement audit logging\n     - Add intrusion detection\n     - Set up security monitoring\n   - Create security checklist for future development\n   - Implement critical fixes if authorized\n   - Store plan: \\`npx claude-flow memory store ${memoryNamespace}_remediation_plan \"Immediate: Remove hardcoded secrets, fix auth bypass. Next sprint: Implement rate limiting, update dependencies. Future: Add WAF, implement SIEM integration.\"\\`\n\n## Deliverables\n- security-audit-report.md:\n  - Executive summary\n  - Detailed findings with CVSS scores\n  - Risk assessment matrix\n  - Compliance gaps\n- remediation-plan.md:\n  - Prioritized fix list\n  - Implementation guidelines\n  - Timeline recommendations\n- security-checklist.md:\n  - Pre-deployment security checks\n  - Code review guidelines\n  - Security testing procedures\n- Fixed code (for critical issues):\n  - Removed hardcoded secrets\n  - Added input validation\n  - Fixed authorization gaps\n\n## Security Review Standards\n- OWASP Top 10 compliance\n- SANS CWE Top 25 coverage\n- Industry-specific requirements (PCI-DSS, HIPAA, etc.)\n- Zero tolerance for hardcoded secrets\n- All files must be < 500 lines for maintainability\n- Comprehensive logging without exposing sensitive data\n\n## Next Steps\nAfter security review:\n- \\`npx claude-flow sparc run code \"Implement security remediation plan\" --non-interactive\\`\n- \\`npx claude-flow sparc run tdd \"Write security test cases\" --non-interactive\\`\n- \\`npx claude-flow sparc run post-deployment-monitoring-mode \"Set up security monitoring and alerts\" --non-interactive\\``;\n}\n"],"names":["getSecurityReviewOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,+BAA+BC,eAAe,EAAEC,eAAe;IAC7E,OAAO,CAAC;;;;mCAIyB,EAAED,gBAAgB;;;kCAGnB,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;;;;;;iDAUH,EAAEA,gBAAgB,8BAA8B,EAAED,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA4B/D,EAAEC,gBAAgB;;;;;;;;;;;;;;4DAcV,EAAEA,gBAAgB;;;;;;;;;;;;;;;sDAexB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;gDAiBxB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHAiCuD,CAAC;AAC1H"}