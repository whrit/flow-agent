{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/architect.js"],"sourcesContent":["// architect.js - Architect mode orchestration template\nexport function getArchitectOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps\n\n1. **Requirements Analysis** (10 mins)\n   - Analyze the user's request: \"${taskDescription}\"\n   - Query existing project context: \\`npx claude-flow memory query ${memoryNamespace}\\`\n   - Identify core components, services, and modular boundaries\n   - List external dependencies and integration points\n   - Document scalability and security requirements\n   - Store findings: \\`npx claude-flow memory store ${memoryNamespace}_requirements \"Core components: X, Y, Z. External deps: API-A, Service-B. Security: OAuth2, RLS policies needed.\"\\`\n\n2. **System Architecture Design** (20 mins)\n   - Create modular architecture diagram using Mermaid syntax\n   - Define clear service boundaries and responsibilities\n   - Design API contracts between components\n   - Plan data flow and state management patterns\n   - Ensure NO hardcoded secrets or env values in design\n   - Create extensible integration points\n   - Store architecture: \\`npx claude-flow memory store ${memoryNamespace}_architecture \"Microservices: auth-service, user-service, data-processor. APIs: REST for external, gRPC for internal. State: Event-sourced with CQRS.\"\\`\n\n3. **Technical Specifications** (15 mins)\n   - Define detailed interface contracts (OpenAPI/AsyncAPI)\n   - Specify data models and database schemas\n   - Plan security boundaries and authentication flows\n   - Document performance and scaling considerations\n   - Define configuration management strategy\n   - Store specs: \\`npx claude-flow memory store ${memoryNamespace}_tech_specs \"Auth: JWT with refresh tokens. DB: PostgreSQL with read replicas. Cache: Redis. Config: Environment-based with secrets manager.\"\\`\n\n4. **Modular Implementation Plan** (10 mins)\n   - Break system into modules < 500 lines each\n   - Create development phases with clear milestones\n   - Define testing strategy (unit, integration, e2e)\n   - Plan deployment and rollback procedures\n   - Identify tasks for other SPARC modes\n   - Store plan: \\`npx claude-flow memory store ${memoryNamespace}_implementation_plan \"Phase 1: Core auth (tdd mode). Phase 2: User management (code mode). Phase 3: Integration (integration mode).\"\\`\n\n5. **Directory Safety**\n   - **IMPORTANT**: All files should be created in the current working directory\n   - **DO NOT** create files in system directories or node_modules\n   - For named projects, create a subdirectory: \\\\\\`mkdir project-name && cd project-name\\\\\\`\n   - Use relative paths from your working directory\n   - Example structure:\n     \\\\\\`\\\\\\`\\\\\\`\n     ./ (current directory)\n     ├── architecture/\n     │   ├── system-overview.md\n     │   └── api-specifications.md\n     └── implementation-plan.md\n     \\\\\\`\\\\\\`\\\\\\`\n\n6. **Deliverables**\n   - architecture/\n     - system-overview.md (with Mermaid diagrams)\n     - api-specifications.md (OpenAPI/AsyncAPI specs)\n     - data-models.md (schemas with relationships)\n     - security-architecture.md (auth flows, boundaries)\n     - deployment-architecture.md (infrastructure design)\n   - implementation-plan.md (phased approach with SPARC mode assignments)\n\n## Next Steps - Sequential and Background Execution\nAfter completing architecture, delegate to appropriate modes:\n\n### Sequential Mode (for simple tasks):\n- \\`npx claude-flow sparc run spec-pseudocode \"Create detailed pseudocode for ${taskDescription}\" --non-interactive\\`\n- \\`npx claude-flow sparc run security-review \"Review architecture for vulnerabilities\" --non-interactive\\`\n\n### Background Swarm Mode (for complex implementation):\n- \\`npx claude-flow swarm \"Implement complete ${taskDescription} based on architecture\" --strategy development --background --monitor\\`\n- \\`npx claude-flow swarm \"Create comprehensive test suite for ${taskDescription}\" --strategy testing --background --parallel\\`\n- \\`npx claude-flow swarm \"Generate complete documentation for ${taskDescription}\" --strategy research --background\\`\n\n## 🐝 Enhanced Architecture with Background Swarms\nLeverage background swarm processing for complex architecture tasks:\n\n\\`\\`\\`bash\n# Background research swarm for comprehensive analysis\nnpx claude-flow swarm \"Research and analyze all architectural patterns for ${taskDescription}\" \\\\\n  --strategy research --background --parallel --monitor \\\\\n  --output ./architecture-research\n\n# Background development swarm for proof of concepts\nnpx claude-flow swarm \"Create architectural proof of concepts and prototypes for ${taskDescription}\" \\\\\n  --strategy development --background --testing --monitor \\\\\n  --output ./architecture-prototypes\n\n# Background documentation swarm for comprehensive specs\nnpx claude-flow swarm \"Generate complete technical specifications and API documentation for ${taskDescription}\" \\\\\n  --strategy research --background --parallel \\\\\n  --output ./architecture-docs\n\n# Monitor all background swarms\nnpx claude-flow status\nnpx claude-flow monitor\n\n# Sequential architecture refinement with background support\nnpx claude-flow sparc run architect \"Initial system design for ${taskDescription}\" --non-interactive\nnpx claude-flow swarm \"Refine architecture based on security and performance analysis\" \\\\\n  --strategy optimization --background --review --testing \\\\\n  --output ./architecture-refined\n\\`\\`\\`\n\n## 🔄 Hybrid SPARC-Swarm Workflow\nCombine SPARC modes with background swarms for optimal efficiency:\n\n\\`\\`\\`bash\n# Phase 1: Quick architecture analysis (SPARC)\nnpx claude-flow sparc run architect \"Core system design\" --non-interactive\n\n# Phase 2: Parallel background research (Swarm)\nnpx claude-flow swarm \"Deep dive research into scalability patterns\" --strategy research --background &\nnpx claude-flow swarm \"Security analysis and threat modeling\" --strategy analysis --background &\nnpx claude-flow swarm \"Performance benchmarking and optimization research\" --strategy optimization --background &\n\n# Phase 3: Implementation swarm (Background)\nnpx claude-flow swarm \"Full implementation of ${taskDescription} architecture\" \\\\\n  --strategy development --background --parallel --monitor --testing \\\\\n  --max-agents 8 --output ./implementation\n\n# Monitor progress\nnpx claude-flow status\ntail -f ./swarm-runs/*/swarm.log\n\\`\\`\\``;\n}\n"],"names":["getArchitectOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,0BAA0BC,eAAe,EAAEC,eAAe;IACxE,OAAO,CAAC;;;;kCAIwB,EAAED,gBAAgB;oEACgB,EAAEC,gBAAgB;;;;oDAIlC,EAAEA,gBAAgB;;;;;;;;;wDASd,EAAEA,gBAAgB;;;;;;;;iDAQzB,EAAEA,gBAAgB;;;;;;;;gDAQnB,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8EA6BY,EAAED,gBAAgB;;;;8CAIlD,EAAEA,gBAAgB;+DACD,EAAEA,gBAAgB;+DAClB,EAAEA,gBAAgB;;;;;;;2EAON,EAAEA,gBAAgB;;;;;iFAKZ,EAAEA,gBAAgB;;;;;4FAKP,EAAEA,gBAAgB;;;;;;;;;+DAS/C,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;8CAmBnC,EAAEA,gBAAgB;;;;;;;MAO1D,CAAC;AACP"}