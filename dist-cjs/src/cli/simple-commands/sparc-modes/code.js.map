{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc-modes/code.js"],"sourcesContent":["// code.js - Auto-Coder mode orchestration template\nexport function getCodeOrchestration(taskDescription, memoryNamespace) {\n  return `\n## Task Orchestration Steps\n\n1. **Project Directory Setup & Context Review** (5 mins)\n   - Verify current working directory and create project structure\n   - For named projects (e.g., \"hello-world\"), create as subdirectory\n   - Review implementation task: \"${taskDescription}\"\n   - Query architecture and pseudocode: \n     \\`\\`\\`bash\n     npx claude-flow memory query ${memoryNamespace}_architecture\n     npx claude-flow memory query ${memoryNamespace}_pseudocode\n     npx claude-flow memory query ${memoryNamespace}_tech_specs\n     \\`\\`\\`\n   - Identify modules to implement and their boundaries\n   - Review configuration requirements\n   - Check for any blocking dependencies\n\n2. **Project Setup & Configuration** (10 mins)\n   - Initialize project structure in current directory or subdirectory\n   - IMPORTANT: Use pwd to verify you're NOT in node_modules/\n   - Set up environment configuration (NO hardcoded values):\n     - Create .env.example with all required variables\n     - Set up config/ directory with environment loaders\n     - Implement secrets management abstraction\n   - Install dependencies based on tech specs\n   - Create module structure (each file < 500 lines)\n   - Store setup: \\`npx claude-flow memory store ${memoryNamespace}_setup \"Project structure: src/{domain,application,infrastructure}. Config: dotenv + vault integration. Dependencies: express, joi, winston.\"\\`\n\n3. **Modular Implementation** (30 mins)\n   - Implement features using clean architecture principles:\n     - Domain layer: Business entities and rules\n     - Application layer: Use cases and workflows\n     - Infrastructure layer: External integrations\n   - Follow SOLID principles and dependency injection\n   - Keep each module/file under 500 lines\n   - Use configuration for ALL environment-specific values\n   - Implement comprehensive error handling\n   - Add structured logging with context\n   - Store progress: \\`npx claude-flow memory store ${memoryNamespace}_implementation \"Completed: auth-service (3 modules), user-repository (2 modules). Remaining: notification-service.\"\\`\n\n4. **Integration & Basic Testing** (15 mins)\n   - Wire up dependency injection container\n   - Connect modules following architecture design\n   - Implement health checks and monitoring endpoints\n   - Add input validation and sanitization\n   - Create smoke tests for critical paths\n   - Verify configuration loading works correctly\n   - Test error scenarios and graceful degradation\n   - Store results: \\`npx claude-flow memory store ${memoryNamespace}_tests \"Smoke tests passing. Health checks operational. Error handling verified. Ready for TDD mode deep testing.\"\\`\n\n5. **Code Quality & Documentation** (10 mins)\n   - Run linters and formatters\n   - Add inline documentation for complex logic\n   - Create API documentation (if applicable)\n   - Generate dependency graphs\n   - Update README with setup instructions\n   - Store completion: \\`npx claude-flow memory store ${memoryNamespace}_code_complete \"Implementation complete. All modules < 500 lines. No hardcoded secrets. Ready for testing and integration.\"\\`\n\n## Directory Safety Check\nBefore creating any files:\n1. Run \\`pwd\\` to verify current directory\n2. Ensure you're NOT in /node_modules/ or any system directory\n3. If creating a named project, create it as a subdirectory\n4. Example: For \"hello-world\", create ./hello-world/ in current directory\n\n## Deliverables\nAll files should be created relative to the current working directory:\n- src/\n  - domain/ (business logic, < 500 lines per file)\n  - application/ (use cases, < 500 lines per file)\n  - infrastructure/ (external integrations)\n  - config/ (environment management)\n- tests/\n  - smoke/ (basic functionality tests)\n  - fixtures/ (test data)\n- config/\n  - .env.example (all required variables)\n  - config.js (environment loader)\n- docs/\n  - API.md (if applicable)\n  - SETUP.md (detailed setup guide)\n\n## Tool Usage Reminders\n- Use \\`insert_content\\` for new files or empty targets\n- Use \\`apply_diff\\` for modifying existing code with complete search/replace blocks\n- Avoid \\`search_and_replace\\` unless absolutely necessary\n- Always verify all tool parameters before execution\n\n## Next Steps - Sequential and Background Options\nAfter implementation, choose appropriate execution mode:\n\n### Sequential Mode (for simple follow-up tasks):\n- \\`npx claude-flow sparc run tdd \"Write comprehensive tests for ${taskDescription}\" --non-interactive\\`\n- \\`npx claude-flow sparc run security-review \"Security audit for ${taskDescription}\" --non-interactive\\`\n\n### Background Swarm Mode (for complex comprehensive tasks):\n- \\`npx claude-flow swarm \"Create comprehensive test suite with unit, integration, and e2e tests for ${taskDescription}\" --strategy testing --background --parallel\\`\n- \\`npx claude-flow swarm \"Perform full security audit and penetration testing for ${taskDescription}\" --strategy analysis --background --review\\`\n- \\`npx claude-flow swarm \"Generate complete documentation, API specs, and deployment guides for ${taskDescription}\" --strategy research --background\\`\n\n## 🐝 Enhanced Development with Background Swarms\nLeverage background swarm processing for large-scale development:\n\n\\`\\`\\`bash\n# Background comprehensive implementation swarm\nnpx claude-flow swarm \"Implement complete ${taskDescription} with all modules, testing, and documentation\" \\\\\n  --strategy development --background --parallel --monitor --testing \\\\\n  --max-agents 6 --output ./implementation\n\n# Background quality assurance swarm\nnpx claude-flow swarm \"Comprehensive QA including testing, security review, and performance optimization for ${taskDescription}\" \\\\\n  --strategy testing --background --review --monitor \\\\\n  --output ./qa-results\n\n# Background documentation and deployment swarm\nnpx claude-flow swarm \"Create production-ready documentation, deployment scripts, and monitoring for ${taskDescription}\" \\\\\n  --strategy research --background --parallel \\\\\n  --output ./deployment-ready\n\n# Monitor all background development\nnpx claude-flow status\nnpx claude-flow monitor\n\\`\\`\\`\n\n## 🔄 Hybrid SPARC-Swarm Development Workflow\nCombine SPARC modes with background swarms for optimal development velocity:\n\n\\`\\`\\`bash\n# Phase 1: Quick prototyping (SPARC)\nnpx claude-flow sparc run code \"Core ${taskDescription} prototype\" --non-interactive\n\n# Phase 2: Parallel background development (Swarm)\nnpx claude-flow swarm \"Full implementation of ${taskDescription} with advanced features\" --strategy development --background --parallel &\nnpx claude-flow swarm \"Comprehensive testing strategy for ${taskDescription}\" --strategy testing --background &\nnpx claude-flow swarm \"Security hardening and performance optimization\" --strategy optimization --background &\n\n# Phase 3: Integration and deployment (Background)\nnpx claude-flow swarm \"Integration testing and production deployment preparation for ${taskDescription}\" \\\\\n  --strategy integration --background --monitor --testing \\\\\n  --output ./production-ready\n\n# Monitor all development streams\nnpx claude-flow status\ntail -f ./swarm-runs/*/swarm.log\n\\`\\`\\``;\n}\n"],"names":["getCodeOrchestration","taskDescription","memoryNamespace"],"mappings":"AACA,OAAO,SAASA,qBAAqBC,eAAe,EAAEC,eAAe;IACnE,OAAO,CAAC;;;;;;kCAMwB,EAAED,gBAAgB;;;kCAGlB,EAAEC,gBAAgB;kCAClB,EAAEA,gBAAgB;kCAClB,EAAEA,gBAAgB;;;;;;;;;;;;;;;iDAeH,EAAEA,gBAAgB;;;;;;;;;;;;oDAYf,EAAEA,gBAAgB;;;;;;;;;;mDAUnB,EAAEA,gBAAgB;;;;;;;;sDAQf,EAAEA,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEAoCP,EAAED,gBAAgB;kEACjB,EAAEA,gBAAgB;;;qGAGiB,EAAEA,gBAAgB;mFACpC,EAAEA,gBAAgB;iGACJ,EAAEA,gBAAgB;;;;;;;0CAOzE,EAAEA,gBAAgB;;;;;6GAKiD,EAAEA,gBAAgB;;;;;qGAK1B,EAAEA,gBAAgB;;;;;;;;;;;;;;qCAclF,EAAEA,gBAAgB;;;8CAGT,EAAEA,gBAAgB;0DACN,EAAEA,gBAAgB;;;;qFAIS,EAAEA,gBAAgB;;;;;;;MAOjG,CAAC;AACP"}