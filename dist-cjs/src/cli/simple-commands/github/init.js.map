{"version":3,"sources":["../../../../../src/cli/simple-commands/github/init.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * GitHub init command - Initialize GitHub-specific hooks and checkpoint system\n */\n\nimport { existsSync } from 'fs';\nimport { access, constants, mkdir, readFile, writeFile } from 'fs/promises';\nimport { join, dirname } from 'path';\nimport { printSuccess, printError, printWarning, printInfo } from '../../utils.js';\nimport { spawn } from 'child_process';\nimport { promisify } from 'util';\nconst exec = promisify(spawn);\n\n/**\n * Create GitHub-specific checkpoint hooks\n */\nasync function createGitHubCheckpointHooks() {\n  const helpersDir = join(process.cwd(), '.claude', 'helpers');\n  const checkpointHooksPath = join(helpersDir, 'github-checkpoint-hooks.sh');\n  \n  const content = `#!/bin/bash\n# GitHub-specific checkpoint hook functions for Claude settings.json\n\n# Function to handle pre-edit checkpoints\npre_edit_checkpoint() {\n    local tool_input=\"$1\"\n    local file=$(echo \"$tool_input\" | jq -r '.file_path // empty')\n    \n    if [ -n \"$file\" ]; then\n        local checkpoint_branch=\"checkpoint/pre-edit-$(date +%Y%m%d-%H%M%S)\"\n        local current_branch=$(git branch --show-current)\n        \n        # Create checkpoint\n        git add -A\n        git stash push -m \"Pre-edit checkpoint for $file\" >/dev/null 2>&1\n        git branch \"$checkpoint_branch\"\n        \n        # Store metadata\n        mkdir -p .claude/checkpoints\n        cat > \".claude/checkpoints/$(date +%s).json\" <<EOF\n{\n  \"branch\": \"$checkpoint_branch\",\n  \"file\": \"$file\",\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"type\": \"pre-edit\",\n  \"original_branch\": \"$current_branch\"\n}\nEOF\n        \n        # Restore working directory\n        git stash pop --quiet >/dev/null 2>&1 || true\n        \n        echo \"‚úÖ Created checkpoint: $checkpoint_branch for $file\"\n    fi\n}\n\n# Function to handle post-edit checkpoints with GitHub release\npost_edit_checkpoint() {\n    local tool_input=\"$1\"\n    local file=$(echo \"$tool_input\" | jq -r '.file_path // empty')\n    \n    if [ -n \"$file\" ] && [ -f \"$file\" ]; then\n        # Check if file was modified - first check if file is tracked\n        if ! git ls-files --error-unmatch \"$file\" >/dev/null 2>&1; then\n            # File is not tracked, add it first\n            git add \"$file\"\n        fi\n        \n        # Now check if there are changes\n        if git diff --cached --quiet \"$file\" 2>/dev/null && git diff --quiet \"$file\" 2>/dev/null; then\n            echo \"‚ÑπÔ∏è  No changes to checkpoint for $file\"\n        else\n            local tag_name=\"checkpoint-$(date +%Y%m%d-%H%M%S)\"\n            local current_branch=$(git branch --show-current)\n            \n            # Create commit\n            git add \"$file\"\n            if git commit -m \"üîñ Checkpoint: Edit $file\n\nAutomatic checkpoint created by Claude\n- File: $file\n- Branch: $current_branch\n- Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)\n\n[Auto-checkpoint]\" --quiet; then\n                # Create tag only if commit succeeded\n                git tag -a \"$tag_name\" -m \"Checkpoint after editing $file\"\n                \n                # Store metadata\n                mkdir -p .claude/checkpoints\n                local diff_stats=$(git diff HEAD~1 --stat | tr '\\\\n' ' ' | sed 's/\"/\\\\\\\\\"/g')\n                cat > \".claude/checkpoints/$(date +%s).json\" <<EOF\n{\n  \"tag\": \"$tag_name\",\n  \"file\": \"$file\",\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"type\": \"post-edit\",\n  \"branch\": \"$current_branch\",\n  \"diff_summary\": \"$diff_stats\"\n}\nEOF\n                \n                echo \"‚úÖ Created checkpoint: $tag_name for $file\"\n            else\n                echo \"‚ÑπÔ∏è  No commit created (no changes or commit failed)\"\n            fi\n        fi\n    fi\n}\n\n# Function to handle task checkpoints with GitHub release\ntask_checkpoint() {\n    local user_prompt=\"$1\"\n    local task=$(echo \"$user_prompt\" | head -c 100 | tr '\\\\n' ' ')\n    \n    if [ -n \"$task\" ]; then\n        local checkpoint_name=\"task-$(date +%Y%m%d-%H%M%S)\"\n        \n        # Commit current state\n        git add -A\n        git commit -m \"üîñ Task checkpoint: $task...\" --quiet || true\n        \n        # Create GitHub release if gh CLI is available\n        if command -v gh &> /dev/null; then\n            echo \"üöÄ Creating GitHub release for checkpoint...\"\n            gh release create \"$checkpoint_name\" \\\\\n                --title \"Checkpoint: $(date +'%Y-%m-%d %H:%M')\" \\\\\n                --notes \"Task: $task\n\n## Checkpoint Details\n- Branch: $(git branch --show-current)\n- Commit: $(git rev-parse HEAD)\n- Files changed: $(git diff HEAD~1 --stat | wc -l) files\n\n## Rollback Instructions\n\\`\\`\\`bash\n# To rollback to this checkpoint:\ngit checkout $checkpoint_name\n\\`\\`\\`\" \\\\\n                --prerelease || echo \"‚ö†Ô∏è  Failed to create GitHub release\"\n        fi\n        \n        # Store metadata\n        mkdir -p .claude/checkpoints\n        cat > \".claude/checkpoints/task-$(date +%s).json\" <<EOF\n{\n  \"checkpoint\": \"$checkpoint_name\",\n  \"task\": \"$task\",\n  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n  \"commit\": \"$(git rev-parse HEAD)\",\n  \"github_release\": \"$(command -v gh &> /dev/null && echo 'true' || echo 'false')\"\n}\nEOF\n        \n        echo \"‚úÖ Created task checkpoint: $checkpoint_name\"\n    fi\n}\n\n# Function to handle session end with GitHub summary\nsession_end_checkpoint() {\n    local session_id=\"session-$(date +%Y%m%d-%H%M%S)\"\n    local summary_file=\".claude/checkpoints/summary-$session_id.md\"\n    \n    mkdir -p .claude/checkpoints\n    \n    # Create detailed summary\n    cat > \"$summary_file\" <<EOF\n# Session Summary - $(date +'%Y-%m-%d %H:%M:%S')\n\n## Checkpoints Created\n$(find .claude/checkpoints -name '*.json' -mtime -1 -exec basename {} \\\\; | sort)\n\n## Files Modified\n$(git diff --name-only $(git log --format=%H -n 1 --before=\"1 hour ago\" 2>/dev/null) 2>/dev/null || echo \"No files tracked\")\n\n## Recent Commits\n$(git log --oneline -10 --grep=\"Checkpoint\" || echo \"No checkpoint commits\")\n\n## GitHub Releases Created\n$(gh release list --limit 10 | grep \"checkpoint-\" || echo \"No GitHub releases\")\n\n## Rollback Instructions\nTo rollback to a specific checkpoint:\n\\`\\`\\`bash\n# List all checkpoints\ngit tag -l 'checkpoint-*' | sort -r\n\n# List GitHub releases\ngh release list\n\n# Rollback to a checkpoint\ngit checkout checkpoint-YYYYMMDD-HHMMSS\n\n# Or download release\ngh release download checkpoint-YYYYMMDD-HHMMSS\n\n# Or reset to a checkpoint (destructive)\ngit reset --hard checkpoint-YYYYMMDD-HHMMSS\n\\`\\`\\`\nEOF\n    \n    # Create final checkpoint\n    git add -A\n    git commit -m \"üèÅ Session end checkpoint: $session_id\" --quiet || true\n    git tag -a \"session-end-$session_id\" -m \"End of Claude session\"\n    \n    # Create GitHub session summary if gh is available\n    if command -v gh &> /dev/null; then\n        echo \"üìä Creating GitHub session summary...\"\n        gh release create \"session-$session_id\" \\\\\n            --title \"Session Summary: $(date +'%Y-%m-%d %H:%M')\" \\\\\n            --notes-file \"$summary_file\" \\\\\n            --prerelease || echo \"‚ö†Ô∏è  Failed to create GitHub session summary\"\n    fi\n    \n    echo \"‚úÖ Session summary saved to: $summary_file\"\n    echo \"üìå Final checkpoint: session-end-$session_id\"\n}\n\n# Main entry point\ncase \"$1\" in\n    pre-edit)\n        pre_edit_checkpoint \"$2\"\n        ;;\n    post-edit)\n        post_edit_checkpoint \"$2\"\n        ;;\n    task)\n        task_checkpoint \"$2\"\n        ;;\n    session-end)\n        session_end_checkpoint\n        ;;\n    *)\n        echo \"Usage: $0 {pre-edit|post-edit|task|session-end} [input]\"\n        exit 1\n        ;;\nesac\n`;\n  \n  await writeFile(checkpointHooksPath, content, { mode: 0o755 });\n  return checkpointHooksPath;\n}\n\n/**\n * Create GitHub-specific settings.json\n */\nasync function createGitHubSettingsJson() {\n  const settingsPath = join(process.cwd(), '.claude', 'settings.json');\n  \n  const settings = {\n    env: {\n      CLAUDE_FLOW_AUTO_COMMIT: 'false',\n      CLAUDE_FLOW_AUTO_PUSH: 'false',\n      CLAUDE_FLOW_HOOKS_ENABLED: 'true',\n      CLAUDE_FLOW_TELEMETRY_ENABLED: 'true',\n      CLAUDE_FLOW_REMOTE_EXECUTION: 'true',\n      CLAUDE_FLOW_GITHUB_INTEGRATION: 'true',\n      CLAUDE_FLOW_CHECKPOINTS_ENABLED: 'true',\n      CREATE_GH_RELEASE: 'true'\n    },\n    permissions: {\n      allow: [\n        'Bash(npx claude-flow *)',\n        'Bash(npm run lint)',\n        'Bash(npm run test:*)',\n        'Bash(npm test *)',\n        'Bash(git status)',\n        'Bash(git diff *)',\n        'Bash(git log *)',\n        'Bash(git add *)',\n        'Bash(git commit *)',\n        'Bash(git push)',\n        'Bash(git config *)',\n        'Bash(git tag *)',\n        'Bash(git branch *)',\n        'Bash(git checkout *)',\n        'Bash(git stash *)',\n        'Bash(git reset *)',\n        'Bash(git rev-parse *)',\n        'Bash(git ls-files *)',\n        'Bash(gh *)',\n        'Bash(node *)',\n        'Bash(which *)',\n        'Bash(pwd)',\n        'Bash(ls *)',\n        'Bash(jq *)',\n        'Bash(test *)',\n        'Bash(find *)',\n        'Bash(grep *)',\n        'Bash(sed *)',\n        'Bash(awk *)',\n        'Bash(curl *)',\n        'Bash(mkdir *)',\n        'Bash(cd *)',\n        'Bash(cat *)',\n        'Bash(echo *)',\n        'Bash(npx claude-flow@alpha *)',\n        'Bash(./claude-flow *)',\n        'Bash(./.claude/helpers/*)'\n      ],\n      deny: [\n        'Bash(rm -rf /)',\n        'Bash(curl * | bash)',\n        'Bash(wget * | sh)',\n        'Bash(eval *)'\n      ]\n    },\n    hooks: {\n      PreToolUse: [\n        {\n          matcher: 'Bash',\n          hooks: [\n            {\n              type: 'command',\n              command: 'cat | jq -r \\'.tool_input.command // empty\\' | tr \\'\\\\n\\' \\'\\\\0\\' | xargs -0 -I {} npx claude-flow@alpha hooks pre-command --command \\'{}\\' --validate-safety true --prepare-resources true'\n            }\n          ]\n        },\n        {\n          matcher: 'Write|Edit|MultiEdit',\n          hooks: [\n            {\n              type: 'command',\n              command: 'cat | jq -r \\'.tool_input.file_path // .tool_input.path // empty\\' | tr \\'\\\\n\\' \\'\\\\0\\' | xargs -0 -I {} npx claude-flow@alpha hooks pre-edit --file \\'{}\\' --auto-assign-agents true --load-context true'\n            },\n            {\n              type: 'command',\n              command: 'bash .claude/helpers/github-checkpoint-hooks.sh pre-edit \"{{tool_input}}\"'\n            }\n          ]\n        }\n      ],\n      PostToolUse: [\n        {\n          matcher: 'Bash',\n          hooks: [\n            {\n              type: 'command',\n              command: 'cat | jq -r \\'.tool_input.command // empty\\' | tr \\'\\\\n\\' \\'\\\\0\\' | xargs -0 -I {} npx claude-flow@alpha hooks post-command --command \\'{}\\' --track-metrics true --store-results true'\n            }\n          ]\n        },\n        {\n          matcher: 'Write|Edit|MultiEdit',\n          hooks: [\n            {\n              type: 'command',\n              command: 'cat | jq -r \\'.tool_input.file_path // .tool_input.path // empty\\' | tr \\'\\\\n\\' \\'\\\\0\\' | xargs -0 -I {} npx claude-flow@alpha hooks post-edit --file \\'{}\\' --format true --update-memory true'\n            },\n            {\n              type: 'command',\n              command: 'bash .claude/helpers/github-checkpoint-hooks.sh post-edit \"{{tool_input}}\"'\n            }\n          ]\n        }\n      ],\n      UserPromptSubmit: [\n        {\n          hooks: [\n            {\n              type: 'command',\n              command: 'bash .claude/helpers/github-checkpoint-hooks.sh task \"{{user_prompt}}\"'\n            }\n          ]\n        }\n      ],\n      Stop: [\n        {\n          hooks: [\n            {\n              type: 'command',\n              command: 'npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true'\n            },\n            {\n              type: 'command',\n              command: 'bash .claude/helpers/github-checkpoint-hooks.sh session-end'\n            }\n          ]\n        }\n      ],\n      PreCompact: [\n        {\n          matcher: 'manual',\n          hooks: [\n            {\n              type: 'command',\n              command: '/bin/bash -c \\'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"üîÑ PreCompact Guidance:\"; echo \"üìã IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   ‚Ä¢ 54 available agents and concurrent usage patterns\"; echo \"   ‚Ä¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   ‚Ä¢ SPARC methodology workflows with batchtools optimization\"; echo \"   ‚Ä¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"üéØ Custom compact instructions: $CUSTOM\"; fi; echo \"‚úÖ Ready for compact operation\"\\''\n            }\n          ]\n        },\n        {\n          matcher: 'auto',\n          hooks: [\n            {\n              type: 'command',\n              command: '/bin/bash -c \\'echo \"üîÑ Auto-Compact Guidance (Context Window Full):\"; echo \"üìã CRITICAL: Before compacting, ensure you understand:\"; echo \"   ‚Ä¢ All 54 agents available in .claude/agents/ directory\"; echo \"   ‚Ä¢ Concurrent execution patterns from CLAUDE.md\"; echo \"   ‚Ä¢ Batchtools optimization for 300% performance gains\"; echo \"   ‚Ä¢ Swarm coordination strategies for complex tasks\"; echo \"‚ö° Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"‚úÖ Auto-compact proceeding with full agent context\"\\''\n            }\n          ]\n        }\n      ]\n    },\n    includeCoAuthoredBy: true,\n    enabledMcpjsonServers: ['claude-flow', 'ruv-swarm']\n  };\n  \n  await writeFile(settingsPath, JSON.stringify(settings, null, 2));\n  return settingsPath;\n}\n\n/**\n * Initialize GitHub-specific hooks and checkpoint system\n */\nexport async function githubInitCommand(flags = {}) {\n  try {\n    console.log('üêô Initializing GitHub-specific hooks and checkpoint system...\\n');\n    \n    // Check if we're in a git repository\n    try {\n      const { execSync } = await import('child_process');\n      execSync('git rev-parse --git-dir', { stdio: 'ignore' });\n    } catch (error) {\n      printError('‚ùå Not in a git repository. Please initialize git first.');\n      return;\n    }\n    \n    // Check if gh CLI is available\n    let ghAvailable = false;\n    try {\n      const { execSync } = await import('child_process');\n      execSync('gh --version', { stdio: 'ignore' });\n      ghAvailable = true;\n      printSuccess('‚úÖ GitHub CLI detected');\n    } catch (error) {\n      printWarning('‚ö†Ô∏è  GitHub CLI not found. Some features will be limited.');\n      console.log('   Install gh: https://cli.github.com/');\n    }\n    \n    // Create .claude directory structure\n    const claudeDir = join(process.cwd(), '.claude');\n    const helpersDir = join(claudeDir, 'helpers');\n    const checkpointsDir = join(claudeDir, 'checkpoints');\n    \n    await mkdir(claudeDir, { recursive: true });\n    await mkdir(helpersDir, { recursive: true });\n    await mkdir(checkpointsDir, { recursive: true });\n    \n    // Check if settings.json already exists\n    const settingsPath = join(claudeDir, 'settings.json');\n    if (existsSync(settingsPath) && !flags.force) {\n      printWarning('‚ö†Ô∏è  settings.json already exists. Use --force to overwrite.');\n      return;\n    }\n    \n    // Create GitHub checkpoint hooks\n    const hooksPath = await createGitHubCheckpointHooks();\n    printSuccess(`‚úÖ Created GitHub checkpoint hooks: ${hooksPath}`);\n    \n    // Copy standard checkpoint manager\n    const checkpointManagerPath = join(helpersDir, 'checkpoint-manager.sh');\n    const checkpointManagerContent = await readFile(\n      join(dirname(import.meta.url).replace('file://', ''), '..', 'init', 'templates', 'commands', 'helpers', 'checkpoint-manager.sh'),\n      'utf8'\n    ).catch(() => {\n      // Fallback content if template not found\n      return `#!/bin/bash\n# Checkpoint manager for Claude Flow\n# Use github-checkpoint-hooks.sh for checkpoint operations\n`;\n    });\n    \n    await writeFile(checkpointManagerPath, checkpointManagerContent, { mode: 0o755 });\n    printSuccess(`‚úÖ Created checkpoint manager: ${checkpointManagerPath}`);\n    \n    // Create GitHub-specific settings.json\n    await createGitHubSettingsJson();\n    printSuccess(`‚úÖ Created GitHub settings: ${settingsPath}`);\n    \n    // Initialize first checkpoint\n    try {\n      const { execSync } = await import('child_process');\n      execSync(`bash ${hooksPath} task \"Initialize GitHub checkpoint system\"`, { stdio: 'inherit' });\n      printSuccess('‚úÖ Created initial checkpoint');\n    } catch (error) {\n      printWarning('‚ö†Ô∏è  Could not create initial checkpoint: ' + error.message);\n    }\n    \n    // Show completion message\n    console.log('\\n' + '='.repeat(60));\n    printSuccess('üéâ GitHub hooks initialized successfully!');\n    console.log('='.repeat(60) + '\\n');\n    \n    console.log('üìã What\\'s been set up:\\n');\n    console.log('  1. GitHub-specific checkpoint hooks in .claude/helpers/');\n    console.log('  2. Automatic GitHub releases for checkpoints' + (ghAvailable ? ' ‚úÖ' : ' (requires gh CLI)'));\n    console.log('  3. Enhanced rollback with GitHub integration');\n    console.log('  4. Session summaries with GitHub releases');\n    console.log('  5. Full GitHub CLI permissions in settings.json');\n    \n    console.log('\\nüöÄ Quick Start:\\n');\n    console.log('  1. Edit any file - automatic checkpoint created');\n    console.log('  2. Start new tasks - task checkpoints with GitHub releases');\n    console.log('  3. End sessions - comprehensive GitHub summary');\n    \n    console.log('\\nüìö Checkpoint Management:\\n');\n    console.log('  # List all checkpoints');\n    console.log('  .claude/helpers/checkpoint-manager.sh list');\n    console.log('');\n    console.log('  # View GitHub releases');\n    console.log('  gh release list');\n    console.log('');\n    console.log('  # Rollback to checkpoint');\n    console.log('  .claude/helpers/checkpoint-manager.sh rollback checkpoint-YYYYMMDD-HHMMSS');\n    console.log('');\n    console.log('  # Download release');\n    console.log('  gh release download checkpoint-YYYYMMDD-HHMMSS');\n    \n    if (!ghAvailable) {\n      console.log('\\n‚ö†Ô∏è  Note: Install GitHub CLI for full features:');\n      console.log('  https://cli.github.com/');\n    }\n    \n    console.log('\\nüí° Pro tip: GitHub releases make it easy to share checkpoints with your team!');\n    \n  } catch (error) {\n    printError(`‚ùå Failed to initialize GitHub hooks: ${error.message}`);\n    console.error(error);\n  }\n}"],"names":["existsSync","mkdir","readFile","writeFile","join","dirname","printSuccess","printError","printWarning","spawn","promisify","exec","createGitHubCheckpointHooks","helpersDir","process","cwd","checkpointHooksPath","content","mode","createGitHubSettingsJson","settingsPath","settings","env","CLAUDE_FLOW_AUTO_COMMIT","CLAUDE_FLOW_AUTO_PUSH","CLAUDE_FLOW_HOOKS_ENABLED","CLAUDE_FLOW_TELEMETRY_ENABLED","CLAUDE_FLOW_REMOTE_EXECUTION","CLAUDE_FLOW_GITHUB_INTEGRATION","CLAUDE_FLOW_CHECKPOINTS_ENABLED","CREATE_GH_RELEASE","permissions","allow","deny","hooks","PreToolUse","matcher","type","command","PostToolUse","UserPromptSubmit","Stop","PreCompact","includeCoAuthoredBy","enabledMcpjsonServers","JSON","stringify","githubInitCommand","flags","console","log","execSync","stdio","error","ghAvailable","claudeDir","checkpointsDir","recursive","force","hooksPath","checkpointManagerPath","checkpointManagerContent","url","replace","catch","message","repeat"],"mappings":"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"}