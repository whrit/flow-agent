{"version":3,"sources":["../../../../../src/cli/simple-commands/github/github-api.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * GitHub API Integration Module\n * Provides authentication, rate limiting, and API wrappers for GitHub workflow commands\n * \n * Enhanced with GitHub CLI Safety Wrapper for secure command execution\n */\n\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { githubCli, GitHubCliSafe } from '../../utils/github-cli-safety-wrapper.js';\n\n// GitHub API Configuration\nconst GITHUB_API_BASE = 'https://api.github.com';\nconst GITHUB_RATE_LIMIT = 5000; // API calls per hour\nconst GITHUB_WEBHOOK_SECRET = process.env.GITHUB_WEBHOOK_SECRET;\n\nclass GitHubAPIClient {\n  constructor(token = null) {\n    this.token = token || process.env.GITHUB_TOKEN;\n    this.rateLimitRemaining = GITHUB_RATE_LIMIT;\n    this.rateLimitResetTime = null;\n    this.lastRequestTime = 0;\n    this.requestQueue = [];\n    this.isProcessingQueue = false;\n    \n    // Initialize GitHub CLI safety wrapper\n    this.cliSafe = new GitHubCliSafe({\n      timeout: 60000,           // 1 minute timeout for CLI operations\n      maxRetries: 3,\n      enableRateLimit: true,\n      enableLogging: false      // Can be enabled for debugging\n    });\n  }\n\n  /**\n   * Authentication Methods\n   */\n  async authenticate(token = null) {\n    if (token) {\n      this.token = token;\n    }\n\n    if (!this.token) {\n      printError('GitHub token not found. Set GITHUB_TOKEN environment variable or provide token.');\n      return false;\n    }\n\n    try {\n      const response = await this.request('/user');\n      if (response.success) {\n        printSuccess(`Authenticated as ${response.data.login}`);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      printError(`Authentication failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Rate Limiting Management\n   */\n  async checkRateLimit() {\n    if (this.rateLimitRemaining <= 1) {\n      const resetTime = new Date(this.rateLimitResetTime);\n      const now = new Date();\n      const waitTime = resetTime.getTime() - now.getTime();\n\n      if (waitTime > 0) {\n        printWarning(`Rate limit exceeded. Waiting ${Math.ceil(waitTime / 1000)}s...`);\n        await this.sleep(waitTime);\n      }\n    }\n  }\n\n  updateRateLimitInfo(headers) {\n    this.rateLimitRemaining = parseInt(headers['x-ratelimit-remaining'] || '0');\n    this.rateLimitResetTime = new Date((parseInt(headers['x-ratelimit-reset']) || 0) * 1000);\n  }\n\n  /**\n   * Core API Request Method\n   */\n  async request(endpoint, options = {}) {\n    await this.checkRateLimit();\n\n    const url = endpoint.startsWith('http') ? endpoint : `${GITHUB_API_BASE}${endpoint}`;\n    const headers = {\n      Authorization: `token ${this.token}`,\n      Accept: 'application/vnd.github.v3+json',\n      'User-Agent': 'Claude-Flow-GitHub-Integration',\n      ...options.headers,\n    };\n\n    const requestOptions = {\n      method: options.method || 'GET',\n      headers,\n      ...options,\n    };\n\n    if (options.body) {\n      requestOptions.body = JSON.stringify(options.body);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    try {\n      const response = await fetch(url, requestOptions);\n      this.updateRateLimitInfo(response.headers);\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`GitHub API error: ${data.message || response.statusText}`);\n      }\n\n      return {\n        success: true,\n        data,\n        headers: response.headers,\n        status: response.status,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        status: error.status || 500,\n      };\n    }\n  }\n\n  /**\n   * Repository Operations\n   */\n  async getRepository(owner, repo) {\n    return await this.request(`/repos/${owner}/${repo}`);\n  }\n\n  async listRepositories(options = {}) {\n    const params = new URLSearchParams({\n      sort: options.sort || 'updated',\n      direction: options.direction || 'desc',\n      per_page: options.perPage || 30,\n      page: options.page || 1,\n    });\n\n    return await this.request(`/user/repos?${params}`);\n  }\n\n  async createRepository(repoData) {\n    return await this.request('/user/repos', {\n      method: 'POST',\n      body: repoData,\n    });\n  }\n\n  /**\n   * Pull Request Operations\n   */\n  async listPullRequests(owner, repo, options = {}) {\n    const params = new URLSearchParams({\n      state: options.state || 'open',\n      sort: options.sort || 'created',\n      direction: options.direction || 'desc',\n      per_page: options.perPage || 30,\n      page: options.page || 1,\n    });\n\n    return await this.request(`/repos/${owner}/${repo}/pulls?${params}`);\n  }\n\n  async createPullRequest(owner, repo, prData) {\n    return await this.request(`/repos/${owner}/${repo}/pulls`, {\n      method: 'POST',\n      body: prData,\n    });\n  }\n\n  async updatePullRequest(owner, repo, prNumber, prData) {\n    return await this.request(`/repos/${owner}/${repo}/pulls/${prNumber}`, {\n      method: 'PATCH',\n      body: prData,\n    });\n  }\n\n  async mergePullRequest(owner, repo, prNumber, mergeData) {\n    return await this.request(`/repos/${owner}/${repo}/pulls/${prNumber}/merge`, {\n      method: 'PUT',\n      body: mergeData,\n    });\n  }\n\n  async requestPullRequestReview(owner, repo, prNumber, reviewData) {\n    return await this.request(`/repos/${owner}/${repo}/pulls/${prNumber}/requested_reviewers`, {\n      method: 'POST',\n      body: reviewData,\n    });\n  }\n\n  /**\n   * Issue Operations\n   */\n  async listIssues(owner, repo, options = {}) {\n    const params = new URLSearchParams({\n      state: options.state || 'open',\n      sort: options.sort || 'created',\n      direction: options.direction || 'desc',\n      per_page: options.perPage || 30,\n      page: options.page || 1,\n    });\n\n    if (options.labels) {\n      params.append('labels', options.labels);\n    }\n\n    return await this.request(`/repos/${owner}/${repo}/issues?${params}`);\n  }\n\n  async createIssue(owner, repo, issueData) {\n    return await this.request(`/repos/${owner}/${repo}/issues`, {\n      method: 'POST',\n      body: issueData,\n    });\n  }\n\n  async updateIssue(owner, repo, issueNumber, issueData) {\n    return await this.request(`/repos/${owner}/${repo}/issues/${issueNumber}`, {\n      method: 'PATCH',\n      body: issueData,\n    });\n  }\n\n  async addIssueLabels(owner, repo, issueNumber, labels) {\n    return await this.request(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`, {\n      method: 'POST',\n      body: { labels },\n    });\n  }\n\n  async assignIssue(owner, repo, issueNumber, assignees) {\n    return await this.request(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees`, {\n      method: 'POST',\n      body: { assignees },\n    });\n  }\n\n  /**\n   * Release Operations\n   */\n  async listReleases(owner, repo, options = {}) {\n    const params = new URLSearchParams({\n      per_page: options.perPage || 30,\n      page: options.page || 1,\n    });\n\n    return await this.request(`/repos/${owner}/${repo}/releases?${params}`);\n  }\n\n  async createRelease(owner, repo, releaseData) {\n    return await this.request(`/repos/${owner}/${repo}/releases`, {\n      method: 'POST',\n      body: releaseData,\n    });\n  }\n\n  async updateRelease(owner, repo, releaseId, releaseData) {\n    return await this.request(`/repos/${owner}/${repo}/releases/${releaseId}`, {\n      method: 'PATCH',\n      body: releaseData,\n    });\n  }\n\n  async deleteRelease(owner, repo, releaseId) {\n    return await this.request(`/repos/${owner}/${repo}/releases/${releaseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Workflow Operations\n   */\n  async listWorkflows(owner, repo) {\n    return await this.request(`/repos/${owner}/${repo}/actions/workflows`);\n  }\n\n  async triggerWorkflow(owner, repo, workflowId, ref = 'main', inputs = {}) {\n    return await this.request(\n      `/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches`,\n      {\n        method: 'POST',\n        body: { ref, inputs },\n      },\n    );\n  }\n\n  async listWorkflowRuns(owner, repo, options = {}) {\n    const params = new URLSearchParams({\n      per_page: options.perPage || 30,\n      page: options.page || 1,\n    });\n\n    if (options.status) {\n      params.append('status', options.status);\n    }\n\n    return await this.request(`/repos/${owner}/${repo}/actions/runs?${params}`);\n  }\n\n  /**\n   * Branch Operations\n   */\n  async listBranches(owner, repo) {\n    return await this.request(`/repos/${owner}/${repo}/branches`);\n  }\n\n  async createBranch(owner, repo, branchName, sha) {\n    return await this.request(`/repos/${owner}/${repo}/git/refs`, {\n      method: 'POST',\n      body: {\n        ref: `refs/heads/${branchName}`,\n        sha,\n      },\n    });\n  }\n\n  async getBranchProtection(owner, repo, branch) {\n    return await this.request(`/repos/${owner}/${repo}/branches/${branch}/protection`);\n  }\n\n  async updateBranchProtection(owner, repo, branch, protection) {\n    return await this.request(`/repos/${owner}/${repo}/branches/${branch}/protection`, {\n      method: 'PUT',\n      body: protection,\n    });\n  }\n\n  /**\n   * Webhook Operations\n   */\n  async listWebhooks(owner, repo) {\n    return await this.request(`/repos/${owner}/${repo}/hooks`);\n  }\n\n  async createWebhook(owner, repo, webhookData) {\n    return await this.request(`/repos/${owner}/${repo}/hooks`, {\n      method: 'POST',\n      body: webhookData,\n    });\n  }\n\n  async updateWebhook(owner, repo, hookId, webhookData) {\n    return await this.request(`/repos/${owner}/${repo}/hooks/${hookId}`, {\n      method: 'PATCH',\n      body: webhookData,\n    });\n  }\n\n  async deleteWebhook(owner, repo, hookId) {\n    return await this.request(`/repos/${owner}/${repo}/hooks/${hookId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Event Processing\n   */\n  async processWebhookEvent(event, signature, payload) {\n    if (!this.verifyWebhookSignature(signature, payload)) {\n      throw new Error('Invalid webhook signature');\n    }\n\n    const eventData = JSON.parse(payload);\n\n    switch (event) {\n      case 'push':\n        return this.handlePushEvent(eventData);\n      case 'pull_request':\n        return this.handlePullRequestEvent(eventData);\n      case 'issues':\n        return this.handleIssuesEvent(eventData);\n      case 'release':\n        return this.handleReleaseEvent(eventData);\n      case 'workflow_run':\n        return this.handleWorkflowRunEvent(eventData);\n      default:\n        printInfo(`Unhandled event type: ${event}`);\n        return { handled: false, event };\n    }\n  }\n\n  verifyWebhookSignature(signature, payload) {\n    if (!GITHUB_WEBHOOK_SECRET) {\n      printWarning('GITHUB_WEBHOOK_SECRET not set. Skipping signature verification.');\n      return true;\n    }\n\n    const crypto = require('crypto');\n    const hmac = crypto.createHmac('sha256', GITHUB_WEBHOOK_SECRET);\n    hmac.update(payload);\n    const expectedSignature = `sha256=${hmac.digest('hex')}`;\n\n    return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));\n  }\n\n  /**\n   * Event Handlers\n   */\n  async handlePushEvent(eventData) {\n    printInfo(`Push event: ${eventData.commits.length} commits to ${eventData.ref}`);\n    return { handled: true, event: 'push', data: eventData };\n  }\n\n  async handlePullRequestEvent(eventData) {\n    const action = eventData.action;\n    const pr = eventData.pull_request;\n    printInfo(`Pull request ${action}: #${pr.number} - ${pr.title}`);\n    return { handled: true, event: 'pull_request', action, data: eventData };\n  }\n\n  async handleIssuesEvent(eventData) {\n    const action = eventData.action;\n    const issue = eventData.issue;\n    printInfo(`Issue ${action}: #${issue.number} - ${issue.title}`);\n    return { handled: true, event: 'issues', action, data: eventData };\n  }\n\n  async handleReleaseEvent(eventData) {\n    const action = eventData.action;\n    const release = eventData.release;\n    printInfo(`Release ${action}: ${release.tag_name} - ${release.name}`);\n    return { handled: true, event: 'release', action, data: eventData };\n  }\n\n  async handleWorkflowRunEvent(eventData) {\n    const action = eventData.action;\n    const workflowRun = eventData.workflow_run;\n    printInfo(`Workflow run ${action}: ${workflowRun.name} - ${workflowRun.conclusion}`);\n    return { handled: true, event: 'workflow_run', action, data: eventData };\n  }\n\n  /**\n   * Utility Methods\n   */\n  async sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  parseRepository(repoString) {\n    const match = repoString.match(/^([^/]+)\\/([^/]+)$/);\n    if (!match) {\n      throw new Error('Invalid repository format. Use: owner/repo');\n    }\n    return { owner: match[1], repo: match[2] };\n  }\n\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleString();\n  }\n\n  formatFileSize(bytes) {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(2)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Safe GitHub CLI Methods\n   * These methods use the GitHubCliSafe wrapper for secure command execution\n   */\n\n  /**\n   * Create issue using GitHub CLI (safe alternative to createIssue API method)\n   * @param {Object} issueData - Issue data\n   * @returns {Promise<Object>} - CLI execution result\n   */\n  async createIssueCLI(issueData) {\n    try {\n      const result = await this.cliSafe.createIssue({\n        title: issueData.title,\n        body: issueData.body,\n        labels: issueData.labels || [],\n        assignees: issueData.assignees || []\n      });\n      \n      printSuccess(`Issue created via CLI: ${issueData.title}`);\n      return { success: true, data: result };\n    } catch (error) {\n      printError(`Failed to create issue via CLI: ${error.message}`);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create PR using GitHub CLI (safe alternative to createPullRequest API method)\n   * @param {Object} prData - PR data\n   * @returns {Promise<Object>} - CLI execution result\n   */\n  async createPullRequestCLI(prData) {\n    try {\n      const result = await this.cliSafe.createPR({\n        title: prData.title,\n        body: prData.body,\n        base: prData.base || 'main',\n        head: prData.head,\n        draft: prData.draft || false\n      });\n      \n      printSuccess(`PR created via CLI: ${prData.title}`);\n      return { success: true, data: result };\n    } catch (error) {\n      printError(`Failed to create PR via CLI: ${error.message}`);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Add issue comment using GitHub CLI\n   * @param {number} issueNumber - Issue number\n   * @param {string} body - Comment body\n   * @returns {Promise<Object>} - CLI execution result\n   */\n  async addIssueCommentCLI(issueNumber, body) {\n    try {\n      const result = await this.cliSafe.addIssueComment(issueNumber, body);\n      printSuccess(`Comment added to issue #${issueNumber}`);\n      return { success: true, data: result };\n    } catch (error) {\n      printError(`Failed to add comment to issue #${issueNumber}: ${error.message}`);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Add PR comment using GitHub CLI\n   * @param {number} prNumber - PR number\n   * @param {string} body - Comment body\n   * @returns {Promise<Object>} - CLI execution result\n   */\n  async addPRCommentCLI(prNumber, body) {\n    try {\n      const result = await this.cliSafe.addPRComment(prNumber, body);\n      printSuccess(`Comment added to PR #${prNumber}`);\n      return { success: true, data: result };\n    } catch (error) {\n      printError(`Failed to add comment to PR #${prNumber}: ${error.message}`);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create release using GitHub CLI\n   * @param {Object} releaseData - Release data\n   * @returns {Promise<Object>} - CLI execution result\n   */\n  async createReleaseCLI(releaseData) {\n    try {\n      const result = await this.cliSafe.createRelease({\n        tag: releaseData.tag_name,\n        title: releaseData.name,\n        body: releaseData.body,\n        prerelease: releaseData.prerelease || false,\n        draft: releaseData.draft || false\n      });\n      \n      printSuccess(`Release created via CLI: ${releaseData.tag_name}`);\n      return { success: true, data: result };\n    } catch (error) {\n      printError(`Failed to create release via CLI: ${error.message}`);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Check GitHub CLI authentication and availability\n   * @returns {Promise<boolean>} - True if CLI is ready to use\n   */\n  async checkCLIStatus() {\n    try {\n      const isAvailable = await this.cliSafe.checkGitHubCli();\n      if (!isAvailable) {\n        printWarning('GitHub CLI is not installed or not in PATH');\n        return false;\n      }\n\n      const isAuthenticated = await this.cliSafe.checkAuthentication();\n      if (!isAuthenticated) {\n        printWarning('GitHub CLI is not authenticated. Run: gh auth login');\n        return false;\n      }\n\n      printSuccess('GitHub CLI is ready for use');\n      return true;\n    } catch (error) {\n      printError(`GitHub CLI status check failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get GitHub CLI wrapper statistics\n   * @returns {Object} - Usage statistics\n   */\n  getCLIStats() {\n    return this.cliSafe.getStats();\n  }\n\n  /**\n   * Cleanup CLI resources (call before shutdown)\n   */\n  async cleanupCLI() {\n    await this.cliSafe.cleanup();\n  }\n}\n\n// Export singleton instance\nexport const githubAPI = new GitHubAPIClient();\nexport default GitHubAPIClient;\n"],"names":["printSuccess","printError","printWarning","printInfo","GitHubCliSafe","GITHUB_API_BASE","GITHUB_RATE_LIMIT","GITHUB_WEBHOOK_SECRET","process","env","GitHubAPIClient","token","GITHUB_TOKEN","rateLimitRemaining","rateLimitResetTime","lastRequestTime","requestQueue","isProcessingQueue","cliSafe","timeout","maxRetries","enableRateLimit","enableLogging","authenticate","response","request","success","data","login","error","message","checkRateLimit","resetTime","Date","now","waitTime","getTime","Math","ceil","sleep","updateRateLimitInfo","headers","parseInt","endpoint","options","url","startsWith","Authorization","Accept","requestOptions","method","body","JSON","stringify","fetch","json","ok","Error","statusText","status","getRepository","owner","repo","listRepositories","params","URLSearchParams","sort","direction","per_page","perPage","page","createRepository","repoData","listPullRequests","state","createPullRequest","prData","updatePullRequest","prNumber","mergePullRequest","mergeData","requestPullRequestReview","reviewData","listIssues","labels","append","createIssue","issueData","updateIssue","issueNumber","addIssueLabels","assignIssue","assignees","listReleases","createRelease","releaseData","updateRelease","releaseId","deleteRelease","listWorkflows","triggerWorkflow","workflowId","ref","inputs","listWorkflowRuns","listBranches","createBranch","branchName","sha","getBranchProtection","branch","updateBranchProtection","protection","listWebhooks","createWebhook","webhookData","updateWebhook","hookId","deleteWebhook","processWebhookEvent","event","signature","payload","verifyWebhookSignature","eventData","parse","handlePushEvent","handlePullRequestEvent","handleIssuesEvent","handleReleaseEvent","handleWorkflowRunEvent","handled","crypto","require","hmac","createHmac","update","expectedSignature","digest","timingSafeEqual","Buffer","from","commits","length","action","pr","pull_request","number","title","issue","release","tag_name","name","workflowRun","workflow_run","conclusion","ms","Promise","resolve","setTimeout","parseRepository","repoString","match","formatDate","dateString","toLocaleString","formatFileSize","bytes","units","size","unitIndex","toFixed","createIssueCLI","result","createPullRequestCLI","createPR","base","head","draft","addIssueCommentCLI","addIssueComment","addPRCommentCLI","addPRComment","createReleaseCLI","tag","prerelease","checkCLIStatus","isAvailable","checkGitHubCli","isAuthenticated","checkAuthentication","getCLIStats","getStats","cleanupCLI","cleanup","githubAPI"],"mappings":"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"}