{"version":3,"sources":["../../../../../src/cli/simple-commands/github/gh-coordinator.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * GitHub Coordinator Command\n * Provides GitHub workflow orchestration and coordination capabilities\n */\n\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { githubAPI } from './github-api.js';\nimport { execSync } from 'child_process';\n\nclass GitHubCoordinator {\n  constructor() {\n    this.api = githubAPI;\n    this.workflows = new Map();\n    this.activeCoordinations = new Map();\n  }\n\n  /**\n   * Initialize GitHub coordination\n   */\n  async initialize(options = {}) {\n    printInfo('üöÄ Initializing GitHub Coordinator...');\n\n    // Authenticate with GitHub\n    const authenticated = await this.api.authenticate(options.token);\n    if (!authenticated) {\n      throw new Error('Failed to authenticate with GitHub');\n    }\n\n    // Check if we're in a git repository\n    try {\n      const remoteUrl = execSync('git config --get remote.origin.url', { encoding: 'utf8' }).trim();\n      const repoMatch = remoteUrl.match(/github\\.com[:/]([^/]+)\\/([^/]+?)(?:\\.git)?$/);\n\n      if (repoMatch) {\n        this.currentRepo = { owner: repoMatch[1], repo: repoMatch[2] };\n        printSuccess(`Connected to repository: ${this.currentRepo.owner}/${this.currentRepo.repo}`);\n      }\n    } catch (error) {\n      printWarning('Not in a git repository or no GitHub remote found');\n    }\n\n    // Initialize swarm integration\n    await this.initializeSwarmIntegration();\n\n    printSuccess('‚úÖ GitHub Coordinator initialized successfully');\n  }\n\n  /**\n   * Initialize swarm integration for coordination\n   */\n  async initializeSwarmIntegration() {\n    try {\n      // Check if ruv-swarm is available\n      execSync('npx ruv-swarm --version', { stdio: 'pipe' });\n\n      // Initialize swarm for GitHub coordination\n      const swarmInit = execSync(\n        'npx ruv-swarm hook pre-task --description \"GitHub workflow coordination\"',\n        { encoding: 'utf8' },\n      );\n\n      if (swarmInit.includes('continue')) {\n        printSuccess('üêù Swarm integration initialized for GitHub coordination');\n        this.swarmEnabled = true;\n      }\n    } catch (error) {\n      printWarning('Swarm integration not available - continuing without swarm features');\n      this.swarmEnabled = false;\n    }\n  }\n\n  /**\n   * Coordinate CI/CD pipeline setup\n   */\n  async coordinateCIPipeline(options = {}) {\n    printInfo('üîÑ Coordinating CI/CD pipeline setup...');\n\n    if (!this.currentRepo) {\n      throw new Error('No GitHub repository context available');\n    }\n\n    const { owner, repo } = this.currentRepo;\n    const pipeline = options.pipeline || 'nodejs';\n    const autoApprove = options.autoApprove || false;\n\n    // Create workflow coordination plan\n    const coordinationPlan = {\n      id: `ci-setup-${Date.now()}`,\n      type: 'ci_pipeline_setup',\n      repository: `${owner}/${repo}`,\n      pipeline,\n      steps: [\n        'analyze_repository_structure',\n        'create_workflow_files',\n        'setup_environment_secrets',\n        'configure_branch_protection',\n        'test_pipeline_execution',\n        'setup_notifications',\n      ],\n      status: 'planning',\n    };\n\n    this.activeCoordinations.set(coordinationPlan.id, coordinationPlan);\n\n    // Execute coordination with swarm if available\n    if (this.swarmEnabled) {\n      await this.executeWithSwarm(coordinationPlan);\n    } else {\n      await this.executeCoordination(coordinationPlan);\n    }\n\n    return coordinationPlan;\n  }\n\n  /**\n   * Execute coordination with swarm integration\n   */\n  async executeWithSwarm(coordinationPlan) {\n    printInfo('üêù Executing coordination with swarm...');\n\n    // Store coordination plan in swarm memory\n    const memoryKey = `github-coordination/${coordinationPlan.id}`;\n    execSync(\n      `npx ruv-swarm hook notification --message \"GitHub Coordination: ${coordinationPlan.type} started\" --telemetry true`,\n    );\n\n    // Execute each step with swarm coordination\n    for (const step of coordinationPlan.steps) {\n      printInfo(`Executing step: ${step}`);\n\n      // Pre-step hook\n      execSync(`npx ruv-swarm hook pre-task --description \"GitHub step: ${step}\"`);\n\n      // Execute step\n      await this.executeCoordinationStep(coordinationPlan, step);\n\n      // Post-step hook\n      execSync(\n        `npx ruv-swarm hook post-edit --file \"github-coordination\" --memory-key \"${memoryKey}/${step}\"`,\n      );\n    }\n\n    // Final coordination notification\n    execSync(\n      `npx ruv-swarm hook notification --message \"GitHub Coordination: ${coordinationPlan.type} completed\" --telemetry true`,\n    );\n  }\n\n  /**\n   * Execute coordination without swarm\n   */\n  async executeCoordination(coordinationPlan) {\n    printInfo('‚ö° Executing coordination...');\n\n    for (const step of coordinationPlan.steps) {\n      printInfo(`Executing step: ${step}`);\n      await this.executeCoordinationStep(coordinationPlan, step);\n    }\n  }\n\n  /**\n   * Execute individual coordination step\n   */\n  async executeCoordinationStep(coordinationPlan, step) {\n    const { owner, repo } = this.currentRepo;\n\n    switch (step) {\n      case 'analyze_repository_structure':\n        await this.analyzeRepositoryStructure(owner, repo);\n        break;\n      case 'create_workflow_files':\n        await this.createWorkflowFiles(owner, repo, coordinationPlan.pipeline);\n        break;\n      case 'setup_environment_secrets':\n        await this.setupEnvironmentSecrets(owner, repo);\n        break;\n      case 'configure_branch_protection':\n        await this.configureBranchProtection(owner, repo);\n        break;\n      case 'test_pipeline_execution':\n        await this.testPipelineExecution(owner, repo);\n        break;\n      case 'setup_notifications':\n        await this.setupNotifications(owner, repo);\n        break;\n      default:\n        printWarning(`Unknown coordination step: ${step}`);\n    }\n  }\n\n  /**\n   * Analyze repository structure\n   */\n  async analyzeRepositoryStructure(owner, repo) {\n    printInfo('üìä Analyzing repository structure...');\n\n    const response = await this.api.getRepository(owner, repo);\n    if (!response.success) {\n      throw new Error(`Failed to get repository info: ${response.error}`);\n    }\n\n    const repoData = response.data;\n    const analysis = {\n      language: repoData.language,\n      size: repoData.size,\n      defaultBranch: repoData.default_branch,\n      hasWorkflows: false,\n      hasTests: false,\n      hasPackageJson: false,\n    };\n\n    // Check for existing workflows\n    const workflowsResponse = await this.api.listWorkflows(owner, repo);\n    if (workflowsResponse.success) {\n      analysis.hasWorkflows = workflowsResponse.data.total_count > 0;\n    }\n\n    // Check for package.json (Node.js projects)\n    try {\n      const packageResponse = await this.api.request(\n        `/repos/${owner}/${repo}/contents/package.json`,\n      );\n      analysis.hasPackageJson = packageResponse.success;\n    } catch (error) {\n      // package.json doesn't exist\n    }\n\n    printSuccess(`‚úÖ Repository analysis complete: ${analysis.language} project`);\n    return analysis;\n  }\n\n  /**\n   * Create workflow files\n   */\n  async createWorkflowFiles(owner, repo, pipeline) {\n    printInfo('üìù Creating workflow files...');\n\n    const workflowContent = this.generateWorkflowContent(pipeline);\n    const workflowPath = `.github/workflows/${pipeline}-ci.yml`;\n\n    // Create workflow file content\n    const createFileData = {\n      message: `Add ${pipeline} CI workflow`,\n      content: Buffer.from(workflowContent).toString('base64'),\n      path: workflowPath,\n    };\n\n    // Check if file exists\n    const existingFile = await this.api.request(`/repos/${owner}/${repo}/contents/${workflowPath}`);\n    if (existingFile.success) {\n      // Update existing file\n      createFileData.sha = existingFile.data.sha;\n      createFileData.message = `Update ${pipeline} CI workflow`;\n    }\n\n    const response = await this.api.request(`/repos/${owner}/${repo}/contents/${workflowPath}`, {\n      method: 'PUT',\n      body: createFileData,\n    });\n\n    if (response.success) {\n      printSuccess(`‚úÖ Workflow file created: ${workflowPath}`);\n    } else {\n      throw new Error(`Failed to create workflow file: ${response.error}`);\n    }\n  }\n\n  /**\n   * Generate workflow content based on pipeline type\n   */\n  generateWorkflowContent(pipeline) {\n    const templates = {\n      nodejs: `name: Node.js CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [16.x, 18.x, 20.x]\n        \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Use Node.js \\${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: \\${{ matrix.node-version }}\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run tests\n      run: npm test\n      \n    - name: Run linter\n      run: npm run lint\n      \n    - name: Build project\n      run: npm run build\n      \n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Run security audit\n      run: npm audit --audit-level moderate\n      \n    - name: Check for vulnerabilities\n      run: npm audit --audit-level high\n`,\n\n      python: `name: Python CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10, 3.11]\n        \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python \\${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: \\${{ matrix.python-version }}\n        \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest pytest-cov\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n        \n    - name: Run tests\n      run: pytest --cov=./ --cov-report=xml\n      \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n`,\n\n      docker: `name: Docker CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Build Docker image\n      run: docker build -t app .\n      \n    - name: Run container tests\n      run: docker run --rm app npm test\n      \n    - name: Security scan\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: 'app'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n`,\n    };\n\n    return templates[pipeline] || templates.nodejs;\n  }\n\n  /**\n   * Setup environment secrets\n   */\n  async setupEnvironmentSecrets(owner, repo) {\n    printInfo('üîê Setting up environment secrets...');\n\n    const secrets = [\n      { name: 'NODE_ENV', description: 'Node.js environment' },\n      { name: 'DATABASE_URL', description: 'Database connection string' },\n      { name: 'API_KEY', description: 'API authentication key' },\n    ];\n\n    printInfo('Recommended secrets to configure:');\n    secrets.forEach((secret) => {\n      console.log(`  - ${secret.name}: ${secret.description}`);\n    });\n\n    printWarning('Note: Secrets must be configured manually in GitHub repository settings');\n    printSuccess('‚úÖ Environment secrets guidance provided');\n  }\n\n  /**\n   * Configure branch protection\n   */\n  async configureBranchProtection(owner, repo) {\n    printInfo('üõ°Ô∏è  Configuring branch protection...');\n\n    const protectionConfig = {\n      required_status_checks: {\n        strict: true,\n        contexts: ['test'],\n      },\n      enforce_admins: true,\n      required_pull_request_reviews: {\n        required_approving_review_count: 1,\n        dismiss_stale_reviews: true,\n      },\n      restrictions: null,\n    };\n\n    const response = await this.api.updateBranchProtection(owner, repo, 'main', protectionConfig);\n\n    if (response.success) {\n      printSuccess('‚úÖ Branch protection configured for main branch');\n    } else {\n      printWarning(`‚ö†Ô∏è  Failed to configure branch protection: ${response.error}`);\n    }\n  }\n\n  /**\n   * Test pipeline execution\n   */\n  async testPipelineExecution(owner, repo) {\n    printInfo('üß™ Testing pipeline execution...');\n\n    const workflows = await this.api.listWorkflows(owner, repo);\n    if (!workflows.success) {\n      printWarning('No workflows found to test');\n      return;\n    }\n\n    const recentRuns = await this.api.listWorkflowRuns(owner, repo, { per_page: 5 });\n    if (recentRuns.success) {\n      printInfo(`Found ${recentRuns.data.total_count} recent workflow runs`);\n\n      const latestRun = recentRuns.data.workflow_runs[0];\n      if (latestRun) {\n        printInfo(`Latest run: ${latestRun.conclusion} (${latestRun.status})`);\n      }\n    }\n\n    printSuccess('‚úÖ Pipeline execution status checked');\n  }\n\n  /**\n   * Setup notifications\n   */\n  async setupNotifications(owner, repo) {\n    printInfo('üì¢ Setting up notifications...');\n\n    const webhookConfig = {\n      name: 'web',\n      active: true,\n      events: ['push', 'pull_request', 'issues', 'workflow_run'],\n      config: {\n        url: 'https://your-webhook-url.com/github',\n        content_type: 'json',\n        insecure_ssl: '0',\n      },\n    };\n\n    printInfo('Webhook configuration template:');\n    console.log(JSON.stringify(webhookConfig, null, 2));\n\n    printWarning('Note: Webhook URL must be configured with your actual endpoint');\n    printSuccess('‚úÖ Notification setup guidance provided');\n  }\n\n  /**\n   * Coordinate release process\n   */\n  async coordinateRelease(options = {}) {\n    printInfo('üöÄ Coordinating release process...');\n\n    if (!this.currentRepo) {\n      throw new Error('No GitHub repository context available');\n    }\n\n    const { owner, repo } = this.currentRepo;\n    const version = options.version || 'auto';\n    const prerelease = options.prerelease || false;\n\n    const coordinationPlan = {\n      id: `release-${Date.now()}`,\n      type: 'release_coordination',\n      repository: `${owner}/${repo}`,\n      version,\n      prerelease,\n      steps: [\n        'prepare_release_notes',\n        'create_release_branch',\n        'run_release_tests',\n        'create_release_tag',\n        'publish_release',\n        'notify_stakeholders',\n      ],\n      status: 'planning',\n    };\n\n    this.activeCoordinations.set(coordinationPlan.id, coordinationPlan);\n\n    if (this.swarmEnabled) {\n      await this.executeWithSwarm(coordinationPlan);\n    } else {\n      await this.executeCoordination(coordinationPlan);\n    }\n\n    return coordinationPlan;\n  }\n\n  /**\n   * Get coordination status\n   */\n  getCoordinationStatus(coordinationId) {\n    return this.activeCoordinations.get(coordinationId) || null;\n  }\n\n  /**\n   * List active coordinations\n   */\n  listActiveCoordinations() {\n    return Array.from(this.activeCoordinations.values());\n  }\n\n  /**\n   * Cancel coordination\n   */\n  cancelCoordination(coordinationId) {\n    const coordination = this.activeCoordinations.get(coordinationId);\n    if (coordination) {\n      coordination.status = 'cancelled';\n      this.activeCoordinations.delete(coordinationId);\n      printSuccess(`‚úÖ Coordination ${coordinationId} cancelled`);\n      return true;\n    }\n    return false;\n  }\n}\n\n// Export coordination function\nexport async function coordinateGitHubWorkflow(args, flags = {}) {\n  const coordinator = new GitHubCoordinator();\n\n  try {\n    await coordinator.initialize(flags);\n\n    const objective = args.join(' ').trim();\n\n    if (objective.includes('CI/CD') || objective.includes('pipeline')) {\n      return await coordinator.coordinateCIPipeline(flags);\n    } else if (objective.includes('release')) {\n      return await coordinator.coordinateRelease(flags);\n    } else {\n      // General coordination\n      printInfo(`üéØ Coordinating: ${objective}`);\n\n      const coordinationPlan = {\n        id: `general-${Date.now()}`,\n        type: 'general_coordination',\n        objective,\n        steps: ['analyze_requirements', 'create_action_plan', 'execute_plan'],\n        status: 'planning',\n      };\n\n      coordinator.activeCoordinations.set(coordinationPlan.id, coordinationPlan);\n\n      if (coordinator.swarmEnabled) {\n        await coordinator.executeWithSwarm(coordinationPlan);\n      } else {\n        await coordinator.executeCoordination(coordinationPlan);\n      }\n\n      return coordinationPlan;\n    }\n  } catch (error) {\n    printError(`‚ùå GitHub coordination failed: ${error.message}`);\n    throw error;\n  }\n}\n\nexport default GitHubCoordinator;\n"],"names":["printSuccess","printError","printWarning","printInfo","githubAPI","execSync","GitHubCoordinator","api","workflows","Map","activeCoordinations","initialize","options","authenticated","authenticate","token","Error","remoteUrl","encoding","trim","repoMatch","match","currentRepo","owner","repo","error","initializeSwarmIntegration","stdio","swarmInit","includes","swarmEnabled","coordinateCIPipeline","pipeline","autoApprove","coordinationPlan","id","Date","now","type","repository","steps","status","set","executeWithSwarm","executeCoordination","memoryKey","step","executeCoordinationStep","analyzeRepositoryStructure","createWorkflowFiles","setupEnvironmentSecrets","configureBranchProtection","testPipelineExecution","setupNotifications","response","getRepository","success","repoData","data","analysis","language","size","defaultBranch","default_branch","hasWorkflows","hasTests","hasPackageJson","workflowsResponse","listWorkflows","total_count","packageResponse","request","workflowContent","generateWorkflowContent","workflowPath","createFileData","message","content","Buffer","from","toString","path","existingFile","sha","method","body","templates","nodejs","python","docker","secrets","name","description","forEach","secret","console","log","protectionConfig","required_status_checks","strict","contexts","enforce_admins","required_pull_request_reviews","required_approving_review_count","dismiss_stale_reviews","restrictions","updateBranchProtection","recentRuns","listWorkflowRuns","per_page","latestRun","workflow_runs","conclusion","webhookConfig","active","events","config","url","content_type","insecure_ssl","JSON","stringify","coordinateRelease","version","prerelease","getCoordinationStatus","coordinationId","get","listActiveCoordinations","Array","values","cancelCoordination","coordination","delete","coordinateGitHubWorkflow","args","flags","coordinator","objective","join"],"mappings":"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"}