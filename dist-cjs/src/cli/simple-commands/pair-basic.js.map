{"version":3,"sources":["../../../../src/cli/simple-commands/pair-basic.js"],"sourcesContent":["/**\n * Optimized Pair Programming Command\n * Interactive pair programming with intelligent verification\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { spawn, exec } from 'child_process';\nimport { promisify } from 'util';\nimport readline from 'readline';\nimport { watch } from 'fs';\n\nconst execAsync = promisify(exec);\n\nclass PairProgrammingSession {\n  constructor(options = {}) {\n    this.sessionId = `pair_${Date.now()}`;\n    this.mode = options.mode || 'switch';\n    this.agent = options.agent || 'auto';\n    this.verify = options.verify || false;\n    this.test = options.test || false;\n    this.autoVerify = options.autoVerify || false; // New: control automatic verification\n    this.threshold = options.threshold || 0.95;\n    this.startTime = new Date();\n    this.status = 'active';\n    this.currentRole = 'driver';\n    this.verificationScores = [];\n    this.testResults = [];\n    this.fileWatchers = new Map();\n    this.rl = null;\n    this.lastVerificationTime = 0;\n    this.verificationCooldown = 60000; // 1 minute cooldown between auto-verifications\n    this.isVerifying = false; // Prevent concurrent verifications\n  }\n\n  async start() {\n    await this.saveSession();\n    this.showWelcome();\n    \n    if (this.verify) {\n      this.showVerificationSettings();\n      \n      // Only run initial verification once\n      if (this.autoVerify) {\n        console.log('\\nüîç Running initial verification...');\n        await this.runVerification();\n      }\n    }\n    \n    if (this.test) {\n      await this.setupTestWatcher();\n    }\n    \n    await this.startInteractiveMode();\n  }\n\n  showWelcome() {\n    console.log('\\nüöÄ Starting Pair Programming Session');\n    console.log('‚îÅ'.repeat(50));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Mode: ${this.mode}`);\n    console.log(`Agent: ${this.agent}`);\n    console.log(`Verification: ${this.verify ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log(`Auto-Verify: ${this.autoVerify ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log(`Testing: ${this.test ? '‚úÖ Enabled' : '‚ùå Disabled'}`);\n    console.log('‚îÅ'.repeat(50));\n\n    // Show mode details\n    switch (this.mode) {\n      case 'driver':\n        console.log('\\nüë§ You are the DRIVER - Write code while AI assists');\n        console.log('ü§ñ AI is the NAVIGATOR - Providing guidance and suggestions');\n        break;\n      case 'navigator':\n        console.log('\\nü§ñ AI is the DRIVER - Writing code based on your guidance');\n        console.log('üë§ You are the NAVIGATOR - Providing high-level direction');\n        break;\n      case 'switch':\n        console.log('\\nüîÑ SWITCH MODE - Roles alternate every 10 minutes');\n        console.log(`üë§ Current role: ${this.currentRole.toUpperCase()} (you)`);\n        console.log('ü§ñ AI role: ' + (this.currentRole === 'driver' ? 'NAVIGATOR' : 'DRIVER'));\n        this.startRoleTimer();\n        break;\n    }\n\n    this.showCommands();\n  }\n\n  showCommands() {\n    console.log('\\nüìù Session Commands:');\n    console.log('  /help      - Show available commands');\n    console.log('  /switch    - Switch driver/navigator roles');\n    console.log('  /suggest   - Get AI suggestions');\n    console.log('  /review    - Request code review');\n    console.log('  /test      - Run tests manually');\n    console.log('  /verify    - Run verification check');\n    console.log('  /status    - Show session status');\n    console.log('  /metrics   - Show quality metrics');\n    console.log('  /auto      - Toggle auto-verification');\n    console.log('  /watch     - Toggle file watching');\n    console.log('  /commit    - Commit with verification');\n    console.log('  /end       - End session');\n    console.log('  /exit      - Exit (same as /end)');\n  }\n\n  showVerificationSettings() {\n    console.log('\\n‚úÖ Verification Settings:');\n    console.log(`  ‚Ä¢ Threshold: ${this.threshold}`);\n    console.log(`  ‚Ä¢ Auto-verify: ${this.autoVerify ? 'Enabled' : 'Disabled'}`);\n    console.log(`  ‚Ä¢ Manual verify: Always available via /verify`);\n    \n    if (this.autoVerify) {\n      console.log(`  ‚Ä¢ Cooldown: ${this.verificationCooldown / 1000}s between checks`);\n      console.log('  ‚Ä¢ Use /auto to toggle automatic verification');\n    }\n  }\n\n  async runVerification() {\n    // Prevent concurrent verifications\n    if (this.isVerifying) {\n      console.log('‚è≥ Verification already in progress...');\n      return null;\n    }\n\n    // Check cooldown for automatic verifications\n    const now = Date.now();\n    if (this.autoVerify && (now - this.lastVerificationTime) < this.verificationCooldown) {\n      const remaining = Math.ceil((this.verificationCooldown - (now - this.lastVerificationTime)) / 1000);\n      console.log(`‚è±Ô∏è Verification cooldown: ${remaining}s remaining`);\n      return null;\n    }\n\n    this.isVerifying = true;\n    this.lastVerificationTime = now;\n\n    console.log('\\nüîç Running verification check...');\n    \n    const checks = [\n      { \n        name: 'Type Check', \n        command: 'npm run typecheck 2>&1 || true',\n        weight: 0.4 // Higher weight for type checking\n      },\n      { \n        name: 'Linting', \n        command: 'npm run lint 2>&1 || true',\n        weight: 0.3\n      },\n      { \n        name: 'Build', \n        command: 'npm run build 2>&1 || true',\n        weight: 0.3\n      }\n    ];\n    \n    let totalScore = 0;\n    let totalWeight = 0;\n    const results = [];\n    \n    for (const check of checks) {\n      try {\n        const { stdout, stderr } = await execAsync(check.command);\n        const output = stdout + stderr;\n        \n        // More intelligent scoring based on actual output\n        let score = 1.0;\n        \n        if (output.toLowerCase().includes('error')) {\n          const errorCount = (output.match(/error/gi) || []).length;\n          score = Math.max(0.2, 1.0 - (errorCount * 0.1)); // Deduct 0.1 per error, minimum 0.2\n        } else if (output.toLowerCase().includes('warning')) {\n          const warningCount = (output.match(/warning/gi) || []).length;\n          score = Math.max(0.7, 1.0 - (warningCount * 0.05)); // Deduct 0.05 per warning, minimum 0.7\n        }\n        \n        totalScore += score * check.weight;\n        totalWeight += check.weight;\n        \n        const icon = score >= 0.8 ? '‚úÖ' : score >= 0.5 ? '‚ö†Ô∏è' : '‚ùå';\n        console.log(`  ${icon} ${check.name}: ${score.toFixed(2)}`);\n        \n        results.push({ name: check.name, score, output: output.slice(0, 200) });\n      } catch (error) {\n        console.log(`  ‚ùå ${check.name}: 0.00 (failed to run)`);\n        results.push({ name: check.name, score: 0, error: error.message });\n        totalWeight += check.weight;\n      }\n    }\n    \n    const averageScore = totalWeight > 0 ? totalScore / totalWeight : 0;\n    this.verificationScores.push({ score: averageScore, timestamp: now, results });\n    \n    console.log(`\\nüìä Verification Score: ${averageScore.toFixed(2)}/${this.threshold}`);\n    \n    if (averageScore < this.threshold) {\n      console.log('‚ö†Ô∏è Verification threshold not met');\n      \n      // Only show detailed help if score is very low\n      if (averageScore < 0.5) {\n        console.log('\\nüí° Suggestions:');\n        console.log('  ‚Ä¢ Run /test to check test failures');\n        console.log('  ‚Ä¢ Check TypeScript errors with npm run typecheck');\n        console.log('  ‚Ä¢ Fix linting issues with npm run lint --fix');\n      }\n    } else {\n      console.log('‚úÖ Verification passed!');\n    }\n    \n    this.isVerifying = false;\n    return averageScore;\n  }\n\n  async setupTestWatcher() {\n    console.log('\\nüß™ Test Configuration:');\n    console.log('  ‚Ä¢ Manual testing via /test command');\n    console.log('  ‚Ä¢ File watching available via /watch');\n    \n    // Don't automatically run tests, wait for user command\n  }\n\n  async runTests() {\n    console.log('\\nüß™ Running tests...');\n    \n    try {\n      const { stdout, stderr } = await execAsync('npm test 2>&1 || true');\n      const output = stdout + stderr;\n      const lines = output.split('\\n');\n      \n      // Parse test results more intelligently\n      const passLine = lines.find(l => l.includes('passed'));\n      const failLine = lines.find(l => l.includes('failed'));\n      const suitesLine = lines.find(l => l.includes('Test Suites:'));\n      \n      let passed = false;\n      let summary = 'No test results found';\n      \n      if (suitesLine) {\n        summary = suitesLine.trim();\n        passed = !suitesLine.includes('failed');\n      } else if (passLine || failLine) {\n        summary = (passLine || failLine).trim();\n        passed = !!passLine && !failLine;\n      }\n      \n      console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${summary}`);\n      \n      // Extract coverage if available\n      const coverageLine = lines.find(l => l.includes('Coverage') || l.includes('Statements'));\n      if (coverageLine) {\n        console.log(`  üìä ${coverageLine.trim()}`);\n      }\n      \n      this.testResults.push({\n        timestamp: new Date(),\n        passed,\n        summary\n      });\n      \n      return passed;\n    } catch (error) {\n      console.log('  ‚ùå Test execution failed:', error.message);\n      return false;\n    }\n  }\n\n  startRoleTimer() {\n    if (this.mode !== 'switch') return;\n    \n    this.roleTimer = setTimeout(() => {\n      this.switchRoles();\n      this.startRoleTimer(); // Restart timer\n    }, 10 * 60 * 1000); // 10 minutes\n  }\n\n  switchRoles() {\n    const oldRole = this.currentRole;\n    this.currentRole = this.currentRole === 'driver' ? 'navigator' : 'driver';\n    \n    console.log('\\nüîÑ Role Switch!');\n    console.log(`  Previous role: ${oldRole.toUpperCase()}`);\n    console.log(`  New role: ${this.currentRole.toUpperCase()}`);\n    console.log('  Take a moment to transition...\\n');\n  }\n\n  async startInteractiveMode() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: '\\nüíª pair> '\n    });\n\n    console.log('\\nüí° Interactive mode active. Type /help for commands.\\n');\n    \n    this.rl.prompt();\n\n    this.rl.on('line', async (line) => {\n      const input = line.trim();\n      \n      if (input.startsWith('/')) {\n        await this.handleCommand(input);\n      } else if (input) {\n        // Handle regular input as code discussion\n        console.log('ü§ñ AI: Processing your input...');\n        // In a real implementation, this would send to AI\n      }\n      \n      this.rl.prompt();\n    });\n\n    this.rl.on('close', () => {\n      this.end();\n    });\n  }\n\n  async handleCommand(command) {\n    const [cmd, ...args] = command.split(' ');\n    \n    switch (cmd) {\n      case '/help':\n        this.showCommands();\n        break;\n        \n      case '/switch':\n        this.switchRoles();\n        break;\n        \n      case '/suggest':\n        console.log('ü§ñ AI Suggestion: Consider using async/await for better readability');\n        console.log('   Also check error handling in promise chains');\n        break;\n        \n      case '/review':\n        console.log('üîç Starting code review...');\n        await this.runVerification();\n        break;\n        \n      case '/test':\n        await this.runTests();\n        break;\n        \n      case '/verify':\n        await this.runVerification();\n        break;\n        \n      case '/status':\n        await this.showStatus();\n        break;\n        \n      case '/metrics':\n        this.showMetrics();\n        break;\n        \n      case '/auto':\n        this.autoVerify = !this.autoVerify;\n        console.log(`\\nüîÑ Auto-verification ${this.autoVerify ? 'enabled' : 'disabled'}`);\n        if (this.autoVerify) {\n          console.log(`  Cooldown: ${this.verificationCooldown / 1000}s between checks`);\n        }\n        break;\n        \n      case '/watch':\n        console.log('üìÇ File watching not yet implemented');\n        console.log('  Use /verify or /test for manual checks');\n        break;\n        \n      case '/commit':\n        await this.commitWithVerification();\n        break;\n        \n      case '/end':\n      case '/exit':\n        await this.end();\n        process.exit(0);\n        break;\n        \n      default:\n        console.log(`‚ùå Unknown command: ${cmd}`);\n        console.log('üí° Type /help for available commands');\n    }\n  }\n\n  async showStatus() {\n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    \n    console.log('\\nüìä Session Status');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Session ID: ${this.sessionId}`);\n    console.log(`Duration: ${duration} minutes`);\n    console.log(`Current Role: ${this.currentRole.toUpperCase()}`);\n    console.log(`Mode: ${this.mode}`);\n    console.log(`Status: ${this.status}`);\n    console.log(`Auto-Verify: ${this.autoVerify ? 'Enabled' : 'Disabled'}`);\n    \n    if (this.verify && this.verificationScores.length > 0) {\n      const recent = this.verificationScores[this.verificationScores.length - 1];\n      console.log(`Last Verification: ${recent.score.toFixed(2)} (${new Date(recent.timestamp).toLocaleTimeString()})`);\n    }\n    \n    if (this.test && this.testResults.length > 0) {\n      const passed = this.testResults.filter(r => r.passed).length;\n      console.log(`Tests Passed: ${passed}/${this.testResults.length}`);\n    }\n  }\n\n  showMetrics() {\n    console.log('\\nüìà Quality Metrics');\n    console.log('‚îÅ'.repeat(40));\n    \n    if (this.verificationScores.length > 0) {\n      console.log('\\nVerification History:');\n      this.verificationScores.slice(-5).forEach((item, i) => {\n        const bar = '‚ñà'.repeat(Math.floor(item.score * 20));\n        const time = new Date(item.timestamp).toLocaleTimeString();\n        console.log(`  ${i + 1}. ${bar} ${item.score.toFixed(2)} - ${time}`);\n      });\n      \n      // Show average\n      const avg = this.verificationScores.reduce((sum, item) => sum + item.score, 0) / this.verificationScores.length;\n      console.log(`\\n  Average: ${avg.toFixed(2)}`);\n    } else {\n      console.log('\\n  No verification history yet');\n      console.log('  Run /verify to check code quality');\n    }\n    \n    if (this.testResults.length > 0) {\n      console.log('\\nTest Results:');\n      this.testResults.slice(-5).forEach((result, i) => {\n        console.log(`  ${i + 1}. ${result.passed ? '‚úÖ' : '‚ùå'} ${new Date(result.timestamp).toLocaleTimeString()}`);\n      });\n      \n      // Show success rate\n      const passed = this.testResults.filter(r => r.passed).length;\n      const rate = (passed / this.testResults.length * 100).toFixed(0);\n      console.log(`\\n  Success Rate: ${rate}%`);\n    } else {\n      console.log('\\n  No test history yet');\n      console.log('  Run /test to execute test suite');\n    }\n  }\n\n  async commitWithVerification() {\n    console.log('\\nüîç Pre-commit verification...');\n    \n    const score = await this.runVerification();\n    \n    if (score === null) {\n      console.log('‚è≥ Please wait for cooldown or use /verify manually');\n      return;\n    }\n    \n    if (score >= this.threshold) {\n      console.log('‚úÖ Verification passed! Ready to commit.');\n      console.log('\\nüí° Next steps:');\n      console.log('  1. Review changes: git diff');\n      console.log('  2. Stage files: git add .');\n      console.log('  3. Commit: git commit -m \"your message\"');\n    } else {\n      console.log('‚ùå Verification failed!');\n      console.log('\\nüí° Fix issues before committing:');\n      console.log('  ‚Ä¢ Run npm run typecheck to see TypeScript errors');\n      console.log('  ‚Ä¢ Run npm run lint to check code style');\n      console.log('  ‚Ä¢ Run npm run build to verify compilation');\n    }\n  }\n\n  async end() {\n    console.log('\\nüõë Ending pair programming session...');\n    \n    // Clear timers\n    if (this.roleTimer) clearTimeout(this.roleTimer);\n    if (this.rl) this.rl.close();\n    \n    // Update session\n    this.status = 'completed';\n    await this.saveSession();\n    \n    // Show summary\n    const duration = Math.floor((Date.now() - this.startTime) / 1000 / 60);\n    console.log('\\n‚ú® Session Complete!');\n    console.log('‚îÅ'.repeat(40));\n    console.log(`Duration: ${duration} minutes`);\n    \n    if (this.verificationScores.length > 0) {\n      const avg = this.verificationScores.reduce((sum, item) => sum + item.score, 0) / this.verificationScores.length;\n      console.log(`Average Verification: ${avg.toFixed(2)}`);\n      console.log(`Total Checks: ${this.verificationScores.length}`);\n    }\n    \n    if (this.testResults.length > 0) {\n      const passed = this.testResults.filter(r => r.passed).length;\n      console.log(`Test Success Rate: ${((passed / this.testResults.length) * 100).toFixed(0)}%`);\n      console.log(`Total Test Runs: ${this.testResults.length}`);\n    }\n    \n    console.log('\\nüëã Thanks for pair programming!\\n');\n  }\n\n  async saveSession() {\n    const sessionPath = '.claude-flow/sessions/pair';\n    await fs.mkdir(sessionPath, { recursive: true });\n    \n    const sessionData = {\n      id: this.sessionId,\n      mode: this.mode,\n      agent: this.agent,\n      verify: this.verify,\n      autoVerify: this.autoVerify,\n      test: this.test,\n      threshold: this.threshold,\n      startTime: this.startTime.toISOString(),\n      status: this.status,\n      currentRole: this.currentRole,\n      verificationScores: this.verificationScores,\n      testResults: this.testResults\n    };\n    \n    await fs.writeFile(\n      path.join(sessionPath, `${this.sessionId}.json`),\n      JSON.stringify(sessionData, null, 2)\n    );\n  }\n}\n\nasync function pairCommand(args = [], flags = {}) {\n  console.log('\\nüë• Pair Programming Session');\n  console.log('‚îÅ'.repeat(50));\n\n  // Handle help flag\n  if (flags.help || args.includes('--help')) {\n    showHelp();\n    return;\n  }\n\n  // Handle background execution\n  if (flags.background || flags.bg) {\n    return startBackgroundSession(args, flags);\n  }\n\n  // Handle start flag\n  if (flags.start) {\n    const session = new PairProgrammingSession({\n      mode: flags.mode || 'switch',\n      agent: flags.agent || 'auto',\n      verify: flags.verify || false,\n      test: flags.test || false,\n      autoVerify: flags.auto || false, // New flag for automatic verification\n      threshold: parseFloat(flags.threshold) || 0.95\n    });\n    \n    return await session.start();\n  }\n\n  // Handle status flag\n  if (flags.status) {\n    return showSessionStatus();\n  }\n\n  // Handle end flag\n  if (flags.end) {\n    return endSession(flags.sessionId || 'current');\n  }\n\n  // Default: show help\n  showHelp();\n}\n\nfunction showHelp() {\n  console.log(`\nüìö USAGE:\n  claude-flow pair [options]\n\n‚öôÔ∏è OPTIONS:\n  --start              Start a new pair programming session\n  --end                End current session\n  --status             Show session status\n  --mode <type>        Programming mode: driver, navigator, switch (default: switch)\n  --agent <name>       AI pair partner (default: auto-select)\n  --verify             Enable verification (manual via /verify)\n  --auto               Enable automatic verification (with cooldown)\n  --test               Enable testing (manual via /test)\n  --threshold <n>      Verification threshold (default: 0.95)\n  --background, --bg   Run in background\n  --help               Show this help message\n\nüìù MODES:\n  driver     You write code, AI assists\n  navigator  AI writes code, you guide\n  switch     Automatically alternate roles every 10 minutes\n\nüéØ SESSION COMMANDS:\n  /help      Show available commands\n  /switch    Switch driver/navigator roles\n  /suggest   Get AI suggestions\n  /review    Request code review\n  /test      Run tests manually\n  /verify    Run verification check\n  /status    Show session status\n  /metrics   Show quality metrics\n  /auto      Toggle auto-verification\n  /watch     Toggle file watching\n  /commit    Commit with verification\n  /end       End session\n\nüí° EXAMPLES:\n  # Basic session with manual verification\n  claude-flow pair --start --verify\n  \n  # Session with automatic verification (60s cooldown)\n  claude-flow pair --start --verify --auto\n  \n  # Driver mode with testing\n  claude-flow pair --start --mode driver --test\n  \n  # Check session status\n  claude-flow pair --status\n\nüéØ OPTIMIZATION TIPS:\n  ‚Ä¢ Use /verify manually when needed\n  ‚Ä¢ Enable --auto only for continuous monitoring\n  ‚Ä¢ Use /metrics to track quality trends\n  ‚Ä¢ Run /test before commits\n\nüìö For detailed documentation, see:\n  .claude/commands/pair/README.md\n`);\n}\n\nasync function startBackgroundSession(args, flags) {\n  console.log('\\nüîÑ Starting pair session in background...');\n  \n  const child = spawn(process.argv[0], [\n    process.argv[1],\n    'pair',\n    '--start',\n    ...args.filter(arg => arg !== '--background' && arg !== '--bg')\n  ], {\n    detached: true,\n    stdio: 'ignore'\n  });\n\n  child.unref();\n  \n  const pid = child.pid;\n  console.log(`‚úÖ Background session started (PID: ${pid})`);\n  console.log('\\nüìä Monitor with: claude-flow pair --status');\n  console.log('üõë Stop with: claude-flow pair --end\\n');\n}\n\nasync function showSessionStatus() {\n  try {\n    const sessionPath = '.claude-flow/sessions/pair';\n    const files = await fs.readdir(sessionPath);\n    const sessions = [];\n\n    for (const file of files) {\n      if (file.endsWith('.json')) {\n        const data = await fs.readFile(path.join(sessionPath, file), 'utf8');\n        sessions.push(JSON.parse(data));\n      }\n    }\n\n    if (sessions.length === 0) {\n      console.log('\\n‚ùå No active pair programming sessions\\n');\n      return;\n    }\n\n    console.log('\\nüìä Pair Programming Sessions:');\n    console.log('‚îÅ'.repeat(50));\n    \n    for (const session of sessions.filter(s => s.status === 'active')) {\n      const duration = Math.floor((Date.now() - new Date(session.startTime).getTime()) / 1000 / 60);\n      console.log(`\\nüîπ Session: ${session.id}`);\n      console.log(`   Mode: ${session.mode}`);\n      console.log(`   Duration: ${duration} minutes`);\n      console.log(`   Status: ${session.status}`);\n      console.log(`   Verification: ${session.verify ? '‚úÖ' : '‚ùå'}`);\n      console.log(`   Auto-Verify: ${session.autoVerify ? '‚úÖ' : '‚ùå'}`);\n      console.log(`   Testing: ${session.test ? '‚úÖ' : '‚ùå'}`);\n      \n      if (session.verificationScores && session.verificationScores.length > 0) {\n        const scores = session.verificationScores.map(s => s.score || s);\n        const avg = scores.reduce((a, b) => a + b, 0) / scores.length;\n        console.log(`   Avg Verification: ${avg.toFixed(2)}`);\n        console.log(`   Total Checks: ${scores.length}`);\n      }\n    }\n    \n    console.log('‚îÅ'.repeat(50));\n  } catch (error) {\n    console.log('\\n‚ùå No active pair programming sessions\\n');\n  }\n}\n\nasync function endSession(sessionId) {\n  console.log(`\\nüõë Ending pair programming session: ${sessionId}`);\n  \n  try {\n    const sessionPath = '.claude-flow/sessions/pair';\n    \n    if (sessionId === 'current') {\n      // End most recent active session\n      const files = await fs.readdir(sessionPath);\n      for (const file of files.filter(f => f.endsWith('.json'))) {\n        const data = await fs.readFile(path.join(sessionPath, file), 'utf8');\n        const session = JSON.parse(data);\n        if (session.status === 'active') {\n          sessionId = session.id;\n          break;\n        }\n      }\n    }\n    \n    const sessionFile = path.join(sessionPath, `${sessionId}.json`);\n    const data = await fs.readFile(sessionFile, 'utf8');\n    const session = JSON.parse(data);\n    \n    session.status = 'completed';\n    session.endTime = new Date().toISOString();\n    \n    await fs.writeFile(sessionFile, JSON.stringify(session, null, 2));\n    \n    console.log('‚úÖ Session ended successfully');\n    console.log(`\\nüìä Session Summary:`);\n    console.log(`  Duration: ${Math.floor((new Date(session.endTime) - new Date(session.startTime)) / 1000 / 60)} minutes`);\n    console.log(`  Mode: ${session.mode}`);\n    console.log(`  Agent: ${session.agent}\\n`);\n  } catch (error) {\n    console.log('‚ùå Failed to end session:', error.message);\n  }\n}\n\nexport default pairCommand;"],"names":["fs","path","spawn","exec","promisify","readline","execAsync","PairProgrammingSession","options","sessionId","Date","now","mode","agent","verify","test","autoVerify","threshold","startTime","status","currentRole","verificationScores","testResults","fileWatchers","Map","rl","lastVerificationTime","verificationCooldown","isVerifying","start","saveSession","showWelcome","showVerificationSettings","console","log","runVerification","setupTestWatcher","startInteractiveMode","repeat","toUpperCase","startRoleTimer","showCommands","remaining","Math","ceil","checks","name","command","weight","totalScore","totalWeight","results","check","stdout","stderr","output","score","toLowerCase","includes","errorCount","match","length","max","warningCount","icon","toFixed","push","slice","error","message","averageScore","timestamp","runTests","lines","split","passLine","find","l","failLine","suitesLine","passed","summary","trim","coverageLine","roleTimer","setTimeout","switchRoles","oldRole","createInterface","input","process","stdin","prompt","on","line","startsWith","handleCommand","end","cmd","args","showStatus","showMetrics","commitWithVerification","exit","duration","floor","recent","toLocaleTimeString","filter","r","forEach","item","i","bar","time","avg","reduce","sum","result","rate","clearTimeout","close","sessionPath","mkdir","recursive","sessionData","id","toISOString","writeFile","join","JSON","stringify","pairCommand","flags","help","showHelp","background","bg","startBackgroundSession","session","auto","parseFloat","showSessionStatus","endSession","child","argv","arg","detached","stdio","unref","pid","files","readdir","sessions","file","endsWith","data","readFile","parse","s","getTime","scores","map","a","b","f","sessionFile","endTime"],"mappings":"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"}