{"version":3,"sources":["../../../../src/cli/simple-commands/batch-manager.js"],"sourcesContent":["// batch-manager.js - Batch configuration management utility\nimport { printSuccess, printError, printInfo, printWarning } from '../utils.js';\nimport { promises as fs } from 'fs';\nimport { PROJECT_TEMPLATES, ENVIRONMENT_CONFIGS } from './init/batch-init.js';\nimport { cwd, exit, existsSync } from '../node-compat.js';\n\nexport async function batchManagerCommand(subArgs, flags) {\n  const command = subArgs[0];\n\n  switch (command) {\n    case 'create-config':\n      return await createBatchConfig(subArgs.slice(1), flags);\n    case 'validate-config':\n      return await validateBatchConfig(subArgs.slice(1), flags);\n    case 'list-templates':\n      return listTemplates();\n    case 'list-environments':\n      return listEnvironments();\n    case 'estimate':\n      return await estimateBatchOperation(subArgs.slice(1), flags);\n    case 'help':\n    default:\n      return showBatchManagerHelp();\n  }\n}\n\nasync function createBatchConfig(args, flags) {\n  const outputFile = args[0] || 'batch-config.json';\n  const interactive = flags.interactive || flags.i;\n\n  if (interactive) {\n    return await createInteractiveConfig(outputFile);\n  }\n\n  // Create basic template\n  const config = {\n    projects: ['project1', 'project2', 'project3'],\n    baseOptions: {\n      sparc: true,\n      parallel: true,\n      maxConcurrency: 5,\n      template: 'web-api',\n      environments: ['dev'],\n    },\n  };\n\n  try {\n    await fs.writeFile(outputFile, JSON.stringify(config, null, 2, 'utf8'));\n    printSuccess(`Created batch configuration template: ${outputFile}`);\n    console.log('Edit the file to customize your batch initialization setup.');\n  } catch (error) {\n    printError(`Failed to create config file: ${error.message}`);\n  }\n}\n\nasync function createInteractiveConfig(outputFile) {\n  console.log('üöÄ Interactive Batch Configuration Creator');\n  console.log('==========================================\\n');\n\n  // This would require a proper CLI prompt library in a real implementation\n  // For now, we'll create a comprehensive template with comments\n  const config = {\n    _comment: 'Batch initialization configuration',\n    _templates: Object.keys(PROJECT_TEMPLATES),\n    _environments: Object.keys(ENVIRONMENT_CONFIGS),\n\n    baseOptions: {\n      sparc: true,\n      parallel: true,\n      maxConcurrency: 5,\n      force: false,\n      minimal: false,\n      progressTracking: true,\n    },\n\n    projects: {\n      _simple_list: ['project1', 'project2', 'project3'],\n      _or_use_projectConfigs_below: 'for individual customization',\n    },\n\n    projectConfigs: {\n      'example-api': {\n        template: 'web-api',\n        environment: 'dev',\n        customConfig: {\n          database: 'postgresql',\n          auth: 'jwt',\n        },\n      },\n      'example-frontend': {\n        template: 'react-app',\n        environment: 'dev',\n        customConfig: {\n          ui: 'material-ui',\n          state: 'redux',\n        },\n      },\n    },\n  };\n\n  try {\n    await fs.writeFile(outputFile, JSON.stringify(config, null, 2, 'utf8'));\n    printSuccess(`Created interactive batch configuration: ${outputFile}`);\n    console.log('\\nNext steps:');\n    console.log('1. Edit the configuration file to match your needs');\n    console.log('2. Remove the \"_comment\" and example entries');\n    console.log('3. Use either \"projects\" array OR \"projectConfigs\" object');\n    console.log(`4. Run: claude-flow init --config ${outputFile}`);\n  } catch (error) {\n    printError(`Failed to create interactive config: ${error.message}`);\n  }\n}\n\nasync function validateBatchConfig(args, flags) {\n  const configFile = args[0];\n\n  if (!configFile) {\n    printError('Please specify a configuration file to validate');\n    return;\n  }\n\n  try {\n    const content = await fs.readFile(configFile, 'utf8');\n    const config = JSON.parse(content);\n\n    console.log(`üìã Validating batch configuration: ${configFile}`);\n    console.log('================================================\\n');\n\n    const issues = [];\n    const warnings = [];\n\n    // Validate structure\n    if (!config.projects && !config.projectConfigs) {\n      issues.push('Missing \"projects\" array or \"projectConfigs\" object');\n    }\n\n    if (config.projects && config.projectConfigs) {\n      warnings.push(\n        'Both \"projects\" and \"projectConfigs\" specified. \"projectConfigs\" will take precedence.',\n      );\n    }\n\n    // Validate base options\n    if (config.baseOptions) {\n      const { maxConcurrency, template, environments } = config.baseOptions;\n\n      if (maxConcurrency && (maxConcurrency < 1 || maxConcurrency > 20)) {\n        issues.push('maxConcurrency must be between 1 and 20');\n      }\n\n      if (template && !PROJECT_TEMPLATES[template]) {\n        issues.push(\n          `Unknown template: ${template}. Available: ${Object.keys(PROJECT_TEMPLATES).join(', ')}`,\n        );\n      }\n\n      if (environments) {\n        for (const env of environments) {\n          if (!ENVIRONMENT_CONFIGS[env]) {\n            issues.push(\n              `Unknown environment: ${env}. Available: ${Object.keys(ENVIRONMENT_CONFIGS).join(', ')}`,\n            );\n          }\n        }\n      }\n    }\n\n    // Validate project configs\n    if (config.projectConfigs) {\n      for (const [projectName, projectConfig] of Object.entries(config.projectConfigs)) {\n        if (projectConfig.template && !PROJECT_TEMPLATES[projectConfig.template]) {\n          issues.push(`Project ${projectName}: Unknown template ${projectConfig.template}`);\n        }\n\n        if (projectConfig.environment && !ENVIRONMENT_CONFIGS[projectConfig.environment]) {\n          issues.push(`Project ${projectName}: Unknown environment ${projectConfig.environment}`);\n        }\n      }\n    }\n\n    // Report results\n    if (issues.length === 0) {\n      printSuccess('‚úÖ Configuration is valid!');\n\n      if (warnings.length > 0) {\n        console.log('\\n‚ö†Ô∏è  Warnings:');\n        warnings.forEach((warning) => console.log(`  - ${warning}`));\n      }\n\n      // Summary\n      console.log('\\nüìä Configuration Summary:');\n      const projectCount = config.projects\n        ? config.projects.length\n        : config.projectConfigs\n          ? Object.keys(config.projectConfigs).length\n          : 0;\n      console.log(`  Projects: ${projectCount}`);\n\n      if (config.baseOptions) {\n        console.log(`  Parallel: ${config.baseOptions.parallel ? 'Yes' : 'No'}`);\n        console.log(`  Max Concurrency: ${config.baseOptions.maxConcurrency || 5}`);\n        console.log(`  SPARC: ${config.baseOptions.sparc ? 'Enabled' : 'Disabled'}`);\n        console.log(`  Template: ${config.baseOptions.template || 'default'}`);\n      }\n    } else {\n      printError('‚ùå Configuration has issues:');\n      issues.forEach((issue) => console.error(`  - ${issue}`));\n\n      if (warnings.length > 0) {\n        console.log('\\n‚ö†Ô∏è  Warnings:');\n        warnings.forEach((warning) => console.log(`  - ${warning}`));\n      }\n    }\n  } catch (error) {\n    if (error instanceof Deno.errors.NotFound) {\n      printError(`Configuration file not found: ${configFile}`);\n    } else if (error instanceof SyntaxError) {\n      printError(`Invalid JSON in configuration file: ${error.message}`);\n    } else {\n      printError(`Failed to validate configuration: ${error.message}`);\n    }\n  }\n}\n\nfunction listTemplates() {\n  console.log('üìã Available Project Templates');\n  console.log('==============================\\n');\n\n  for (const [key, template] of Object.entries(PROJECT_TEMPLATES)) {\n    console.log(`üèóÔ∏è  ${key}`);\n    console.log(`   Name: ${template.name}`);\n    console.log(`   Description: ${template.description}`);\n    console.log(`   Extra Directories: ${template.extraDirs ? template.extraDirs.length : 0}`);\n    console.log(\n      `   Extra Files: ${template.extraFiles ? Object.keys(template.extraFiles).length : 0}`,\n    );\n    console.log();\n  }\n}\n\nfunction listEnvironments() {\n  console.log('üåç Available Environment Configurations');\n  console.log('=======================================\\n');\n\n  for (const [key, env] of Object.entries(ENVIRONMENT_CONFIGS)) {\n    console.log(`‚öôÔ∏è  ${key}`);\n    console.log(`   Name: ${env.name}`);\n    console.log(`   Features: ${env.features.join(', ')}`);\n    console.log(`   Config Variables: ${Object.keys(env.config).length}`);\n    console.log();\n  }\n}\n\nasync function estimateBatchOperation(args, flags) {\n  const configFile = args[0];\n\n  if (!configFile) {\n    printError('Please specify a configuration file to estimate');\n    return;\n  }\n\n  try {\n    const content = await fs.readFile(configFile, 'utf8');\n    const config = JSON.parse(content);\n\n    console.log('‚è±Ô∏è  Batch Operation Estimation');\n    console.log('=============================\\n');\n\n    let projectCount = 0;\n    let totalEnvironments = 0;\n\n    if (config.projects) {\n      projectCount = config.projects.length;\n      const environments = config.baseOptions?.environments || ['dev'];\n      totalEnvironments = projectCount * environments.length;\n    } else if (config.projectConfigs) {\n      projectCount = Object.keys(config.projectConfigs).length;\n      totalEnvironments = projectCount; // Each project has its own environment\n    }\n\n    const parallel = config.baseOptions?.parallel !== false;\n    const maxConcurrency = config.baseOptions?.maxConcurrency || 5;\n    const avgTimePerProject = 15; // seconds estimate\n\n    const sequentialTime = totalEnvironments * avgTimePerProject;\n    const parallelTime = parallel\n      ? Math.ceil(totalEnvironments / maxConcurrency) * avgTimePerProject\n      : sequentialTime;\n\n    console.log(`üìä Project Count: ${projectCount}`);\n    console.log(`üåç Total Environments: ${totalEnvironments}`);\n    console.log(`‚ö° Parallel Processing: ${parallel ? 'Enabled' : 'Disabled'}`);\n    console.log(`üîÑ Max Concurrency: ${maxConcurrency}`);\n    console.log();\n    console.log(`‚è±Ô∏è  Estimated Time:`);\n    console.log(`   Sequential: ~${Math.ceil(sequentialTime / 60)} minutes`);\n    console.log(`   Parallel: ~${Math.ceil(parallelTime / 60)} minutes`);\n    console.log(`   Time Savings: ${Math.ceil((sequentialTime - parallelTime) / 60)} minutes`);\n    console.log();\n    console.log(`üíæ Estimated Disk Usage:`);\n    console.log(`   Per Project: ~50-200 MB`);\n    console.log(`   Total: ~${Math.ceil((totalEnvironments * 125) / 1024)} GB`);\n  } catch (error) {\n    printError(`Failed to estimate batch operation: ${error.message}`);\n  }\n}\n\nfunction showBatchManagerHelp() {\n  console.log('üõ†Ô∏è  Batch Manager - Configuration and Estimation Tools');\n  console.log('====================================================\\n');\n\n  console.log('USAGE:');\n  console.log('  claude-flow batch <command> [options]\\n');\n\n  console.log('COMMANDS:');\n  console.log('  create-config [file]     Create batch configuration template');\n  console.log('  validate-config <file>   Validate batch configuration file');\n  console.log('  list-templates          Show available project templates');\n  console.log('  list-environments       Show available environment configs');\n  console.log('  estimate <config>       Estimate time and resources for batch operation');\n  console.log('  help                    Show this help message\\n');\n\n  console.log('OPTIONS:');\n  console.log('  --interactive, -i       Create interactive configuration');\n  console.log('  --help, -h             Show command help\\n');\n\n  console.log('EXAMPLES:');\n  console.log('  claude-flow batch create-config my-batch.json');\n  console.log('  claude-flow batch create-config --interactive');\n  console.log('  claude-flow batch validate-config my-batch.json');\n  console.log('  claude-flow batch estimate my-batch.json');\n  console.log('  claude-flow batch list-templates');\n  console.log('  claude-flow batch list-environments\\n');\n\n  console.log('INTEGRATION:');\n  console.log('  Use created configs with: claude-flow init --config <file>');\n  console.log('  Or batch init directly: claude-flow init --batch-init project1,project2');\n}\n"],"names":["printSuccess","printError","promises","fs","PROJECT_TEMPLATES","ENVIRONMENT_CONFIGS","batchManagerCommand","subArgs","flags","command","createBatchConfig","slice","validateBatchConfig","listTemplates","listEnvironments","estimateBatchOperation","showBatchManagerHelp","args","outputFile","interactive","i","createInteractiveConfig","config","projects","baseOptions","sparc","parallel","maxConcurrency","template","environments","writeFile","JSON","stringify","console","log","error","message","_comment","_templates","Object","keys","_environments","force","minimal","progressTracking","_simple_list","_or_use_projectConfigs_below","projectConfigs","environment","customConfig","database","auth","ui","state","configFile","content","readFile","parse","issues","warnings","push","join","env","projectName","projectConfig","entries","length","forEach","warning","projectCount","issue","Deno","errors","NotFound","SyntaxError","key","name","description","extraDirs","extraFiles","features","totalEnvironments","avgTimePerProject","sequentialTime","parallelTime","Math","ceil"],"mappings":"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"}