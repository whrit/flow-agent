{"version":3,"sources":["../../../../src/cli/simple-commands/verification-integration.js"],"sourcesContent":["/**\n * Verification Integration Module\n * Connects verification system to actual agent operations and task execution\n */\n\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\n\nconst execAsync = promisify(exec);\n\n/**\n * Verification middleware for task execution\n * Intercepts task results and verifies them\n */\nexport class VerificationMiddleware {\n  constructor(verificationSystem) {\n    this.verificationSystem = verificationSystem;\n    this.enabled = true;\n    this.autoRollback = true;\n  }\n\n  /**\n   * Wrap task execution with verification\n   */\n  async executeWithVerification(taskFn, taskId, agentType, context) {\n    // Pre-task verification\n    const preCheck = await this.preTaskVerification(taskId, context);\n    if (!preCheck.passed && this.enabled) {\n      console.log(`❌ Pre-task verification failed for ${taskId}`);\n      return { success: false, reason: 'Pre-task verification failed', preCheck };\n    }\n\n    // Execute the actual task\n    let result;\n    let error;\n    try {\n      result = await taskFn();\n    } catch (err) {\n      error = err;\n      result = { success: false, error: err.message };\n    }\n\n    // Post-task verification\n    const postCheck = await this.postTaskVerification(taskId, agentType, result, context);\n    \n    // If verification fails and auto-rollback is enabled\n    if (!postCheck.passed && this.autoRollback) {\n      await this.rollbackTask(taskId, context);\n      return { \n        success: false, \n        reason: 'Post-task verification failed', \n        result,\n        verification: postCheck,\n        rollback: true \n      };\n    }\n\n    return {\n      success: postCheck.passed,\n      result,\n      verification: postCheck\n    };\n  }\n\n  /**\n   * Pre-task verification checks\n   */\n  async preTaskVerification(taskId, context) {\n    const checks = [];\n\n    // Check if environment is clean\n    if (context.requiresCleanState) {\n      const gitStatus = await this.checkGitStatus();\n      checks.push({\n        name: 'clean-state',\n        passed: gitStatus.clean,\n        score: gitStatus.clean ? 1.0 : 0.0\n      });\n    }\n\n    // Check dependencies\n    if (context.dependencies) {\n      for (const dep of context.dependencies) {\n        const exists = await this.checkDependency(dep);\n        checks.push({\n          name: `dependency-${dep}`,\n          passed: exists,\n          score: exists ? 1.0 : 0.0\n        });\n      }\n    }\n\n    const score = checks.length > 0 \n      ? checks.reduce((sum, c) => sum + c.score, 0) / checks.length\n      : 1.0;\n\n    return {\n      passed: score >= 0.95,\n      score,\n      checks,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Post-task verification checks\n   */\n  async postTaskVerification(taskId, agentType, result, context) {\n    const checks = [];\n\n    // Verify based on agent type\n    switch (agentType) {\n      case 'coder':\n        // Check if code compiles\n        if (context.language === 'typescript' || context.language === 'javascript') {\n          const typecheck = await this.runTypeCheck();\n          checks.push({\n            name: 'typecheck',\n            passed: typecheck.passed,\n            score: typecheck.score\n          });\n        }\n\n        // Check if tests pass\n        if (context.hasTests) {\n          const tests = await this.runTests();\n          checks.push({\n            name: 'tests',\n            passed: tests.passed,\n            score: tests.score\n          });\n        }\n\n        // Check linting\n        const lint = await this.runLint();\n        checks.push({\n          name: 'lint',\n          passed: lint.passed,\n          score: lint.score\n        });\n        break;\n\n      case 'researcher':\n        // Verify research output has required sections\n        if (result && result.output) {\n          const hasFindings = result.output.includes('findings') || result.output.includes('results');\n          checks.push({\n            name: 'research-completeness',\n            passed: hasFindings,\n            score: hasFindings ? 1.0 : 0.5\n          });\n        }\n        break;\n\n      case 'tester':\n        // Verify test coverage meets threshold\n        if (context.requiresCoverage) {\n          const coverage = await this.checkTestCoverage();\n          checks.push({\n            name: 'coverage',\n            passed: coverage.percentage >= 80,\n            score: coverage.percentage / 100\n          });\n        }\n        break;\n\n      case 'architect':\n        // Verify architecture decisions are documented\n        const hasDocs = await this.checkDocumentation();\n        checks.push({\n          name: 'documentation',\n          passed: hasDocs,\n          score: hasDocs ? 1.0 : 0.3\n        });\n        break;\n    }\n\n    // Check result success claim\n    if (result && result.success !== undefined) {\n      checks.push({\n        name: 'claimed-success',\n        passed: result.success,\n        score: result.success ? 1.0 : 0.0\n      });\n    }\n\n    const score = checks.length > 0\n      ? checks.reduce((sum, c) => sum + c.score, 0) / checks.length\n      : 0.5;\n\n    // Store verification result\n    await this.verificationSystem.verifyTask(taskId, agentType, {\n      success: result?.success,\n      checks,\n      score\n    });\n\n    return {\n      passed: score >= this.verificationSystem.getThreshold(),\n      score,\n      checks,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Rollback task changes\n   */\n  async rollbackTask(taskId, context) {\n    console.log(`🔄 Rolling back task ${taskId}...`);\n    \n    try {\n      // If we have a git checkpoint, rollback to it\n      if (context.gitCheckpoint) {\n        await execAsync(`git reset --hard ${context.gitCheckpoint}`);\n        console.log(`✅ Rolled back to checkpoint ${context.gitCheckpoint}`);\n      } else {\n        // Otherwise just reset to last commit\n        await execAsync('git reset --hard HEAD');\n        console.log(`✅ Rolled back to last commit`);\n      }\n      return true;\n    } catch (error) {\n      console.error(`❌ Rollback failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  // Helper methods for actual checks\n\n  async checkGitStatus() {\n    try {\n      const { stdout } = await execAsync('git status --porcelain');\n      return { clean: stdout.trim() === '' };\n    } catch {\n      return { clean: false };\n    }\n  }\n\n  async checkDependency(dep) {\n    try {\n      await execAsync(`which ${dep}`);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async runTypeCheck() {\n    try {\n      const { stdout } = await execAsync('npm run typecheck 2>&1 || true');\n      const hasErrors = stdout.toLowerCase().includes('error');\n      return {\n        passed: !hasErrors,\n        score: hasErrors ? 0.5 : 1.0\n      };\n    } catch {\n      return { passed: false, score: 0.3 };\n    }\n  }\n\n  async runTests() {\n    try {\n      const { stdout } = await execAsync('npm test 2>&1 || true');\n      const passed = stdout.includes('PASS') || stdout.includes('passing');\n      const failed = stdout.includes('FAIL') || stdout.includes('failing');\n      \n      if (passed && !failed) {\n        return { passed: true, score: 1.0 };\n      } else if (passed && failed) {\n        return { passed: false, score: 0.7 };\n      } else {\n        return { passed: false, score: 0.3 };\n      }\n    } catch {\n      return { passed: false, score: 0.0 };\n    }\n  }\n\n  async runLint() {\n    try {\n      const { stdout } = await execAsync('npm run lint 2>&1 || true');\n      const hasErrors = stdout.toLowerCase().includes('error');\n      const hasWarnings = stdout.toLowerCase().includes('warning');\n      \n      if (!hasErrors && !hasWarnings) {\n        return { passed: true, score: 1.0 };\n      } else if (!hasErrors && hasWarnings) {\n        return { passed: true, score: 0.8 };\n      } else {\n        return { passed: false, score: 0.5 };\n      }\n    } catch {\n      return { passed: false, score: 0.3 };\n    }\n  }\n\n  async checkTestCoverage() {\n    try {\n      const { stdout } = await execAsync('npm run coverage 2>&1 || true');\n      const match = stdout.match(/(\\d+(\\.\\d+)?)\\s*%/);\n      const percentage = match ? parseFloat(match[1]) : 0;\n      return { percentage };\n    } catch {\n      return { percentage: 0 };\n    }\n  }\n\n  async checkDocumentation() {\n    try {\n      // Check if common documentation files exist\n      const docFiles = ['README.md', 'ARCHITECTURE.md', 'docs/design.md'];\n      for (const file of docFiles) {\n        try {\n          await fs.access(file);\n          return true;\n        } catch {\n          // Continue checking other files\n        }\n      }\n      return false;\n    } catch {\n      return false;\n    }\n  }\n}\n\n/**\n * Integration with swarm command\n */\nexport function integrateWithSwarm(swarmCommand, verificationSystem) {\n  const originalExecute = swarmCommand.execute;\n  const middleware = new VerificationMiddleware(verificationSystem);\n\n  swarmCommand.execute = async function(objective, options) {\n    // Create checkpoint before swarm execution\n    const checkpoint = await createGitCheckpoint();\n    \n    // Wrap the original execution with verification\n    const context = {\n      requiresCleanState: !options.allowDirty,\n      dependencies: options.dependencies || [],\n      language: options.language || 'javascript',\n      hasTests: options.runTests !== false,\n      requiresCoverage: options.coverage === true,\n      gitCheckpoint: checkpoint\n    };\n\n    // Execute with verification\n    return await middleware.executeWithVerification(\n      () => originalExecute.call(this, objective, options),\n      `swarm-${Date.now()}`,\n      'swarm',\n      context\n    );\n  };\n\n  return swarmCommand;\n}\n\n/**\n * Integration with non-interactive mode\n */\nexport function integrateWithNonInteractive(flags, verificationSystem) {\n  // Add verification flags to non-interactive mode\n  const verificationFlags = {\n    ...flags,\n    verify: true,\n    verificationThreshold: flags.threshold || 0.95,\n    autoRollback: flags.rollback !== false\n  };\n\n  // Return a verification wrapper for non-interactive execution\n  return {\n    flags: verificationFlags,\n    preExecute: async (taskId) => {\n      await verificationSystem.initialize('strict');\n      console.log('✅ Verification enabled for non-interactive mode');\n    },\n    postExecute: async (taskId, result) => {\n      const verification = await verificationSystem.verifyTask(\n        taskId,\n        'non-interactive',\n        result\n      );\n      \n      if (!verification.passed) {\n        console.error('❌ Verification failed in non-interactive mode');\n        process.exit(1);\n      }\n    }\n  };\n}\n\n/**\n * Integration with training system\n */\nexport function integrateWithTraining(trainingSystem, verificationSystem) {\n  // Feed verification results to training system\n  verificationSystem.onVerification = async (verification) => {\n    // Convert verification to training data\n    const trainingData = {\n      input: {\n        taskId: verification.taskId,\n        agentType: verification.agentType,\n        context: verification.context\n      },\n      output: {\n        success: verification.passed,\n        score: verification.score,\n        checks: verification.results\n      }\n    };\n\n    // Feed to training system\n    await trainingSystem.learn(trainingData);\n    \n    // Update agent model based on performance\n    if (verification.agentType) {\n      await trainingSystem.updateAgentModel(\n        verification.agentType,\n        verification.score\n      );\n    }\n  };\n\n  return verificationSystem;\n}\n\n/**\n * Create git checkpoint for rollback\n */\nasync function createGitCheckpoint() {\n  try {\n    // Create a temporary commit as checkpoint\n    const { stdout } = await execAsync('git rev-parse HEAD');\n    return stdout.trim();\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Export verification hooks for command integration\n */\nexport const verificationHooks = {\n  beforeTask: async (taskId, context) => {\n    // Hook called before task execution\n    console.log(`🔍 Pre-task verification for ${taskId}`);\n  },\n  \n  afterTask: async (taskId, result, context) => {\n    // Hook called after task execution\n    console.log(`✅ Post-task verification for ${taskId}`);\n  },\n  \n  onFailure: async (taskId, verification) => {\n    // Hook called when verification fails\n    console.log(`❌ Verification failed for ${taskId}: ${verification.score}`);\n  }\n};\n\nexport default {\n  VerificationMiddleware,\n  integrateWithSwarm,\n  integrateWithNonInteractive,\n  integrateWithTraining,\n  verificationHooks\n};"],"names":["exec","promisify","fs","execAsync","VerificationMiddleware","verificationSystem","enabled","autoRollback","executeWithVerification","taskFn","taskId","agentType","context","preCheck","preTaskVerification","passed","console","log","success","reason","result","error","err","message","postCheck","postTaskVerification","rollbackTask","verification","rollback","checks","requiresCleanState","gitStatus","checkGitStatus","push","name","clean","score","dependencies","dep","exists","checkDependency","length","reduce","sum","c","timestamp","Date","toISOString","language","typecheck","runTypeCheck","hasTests","tests","runTests","lint","runLint","output","hasFindings","includes","requiresCoverage","coverage","checkTestCoverage","percentage","hasDocs","checkDocumentation","undefined","verifyTask","getThreshold","gitCheckpoint","stdout","trim","hasErrors","toLowerCase","failed","hasWarnings","match","parseFloat","docFiles","file","access","integrateWithSwarm","swarmCommand","originalExecute","execute","middleware","objective","options","checkpoint","createGitCheckpoint","allowDirty","call","now","integrateWithNonInteractive","flags","verificationFlags","verify","verificationThreshold","threshold","preExecute","initialize","postExecute","process","exit","integrateWithTraining","trainingSystem","onVerification","trainingData","input","results","learn","updateAgentModel","verificationHooks","beforeTask","afterTask","onFailure"],"mappings":"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"}