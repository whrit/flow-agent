{"version":3,"sources":["../../../../src/cli/simple-commands/hook-safety.js"],"sourcesContent":["/**\n * Hook Safety System - Prevents recursive hook execution and financial damage\n *\n * This system protects against infinite loops where Claude Code hooks call\n * 'claude' commands, which could bypass rate limits and cost thousands of dollars.\n *\n * Critical protections:\n * - Environment variable context detection\n * - Recursive call prevention\n * - Circuit breaker for Stop hooks\n * - Configuration validation\n * - Emergency override flags\n */\n\nimport { printError, printWarning, printSuccess } from '../utils.js';\nimport { existsSync, readFileSync } from 'fs';\nimport path from 'path';\n\n/**\n * Hook Safety Configuration\n */\nconst HOOK_SAFETY_CONFIG = {\n  // Maximum hook execution depth before blocking\n  MAX_HOOK_DEPTH: 3,\n\n  // Maximum Stop hook executions per session\n  MAX_STOP_HOOK_EXECUTIONS: 2,\n\n  // Circuit breaker timeout (milliseconds)\n  CIRCUIT_BREAKER_TIMEOUT: 60000, // 1 minute\n\n  // Environment variables for context detection\n  ENV_VARS: {\n    CONTEXT: 'CLAUDE_HOOK_CONTEXT',\n    DEPTH: 'CLAUDE_HOOK_DEPTH',\n    SESSION_ID: 'CLAUDE_HOOK_SESSION_ID',\n    SKIP_HOOKS: 'CLAUDE_SKIP_HOOKS',\n    SAFE_MODE: 'CLAUDE_SAFE_MODE',\n  },\n};\n\n/**\n * Global hook execution tracking\n */\nclass HookExecutionTracker {\n  constructor() {\n    this.executions = new Map();\n    this.sessionId = this.generateSessionId();\n    this.resetTimeout = null;\n  }\n\n  generateSessionId() {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  track(hookType) {\n    const key = `${this.sessionId}:${hookType}`;\n    const count = this.executions.get(key) || 0;\n    this.executions.set(key, count + 1);\n\n    // Auto-reset after timeout\n    if (this.resetTimeout) clearTimeout(this.resetTimeout);\n    this.resetTimeout = setTimeout(() => {\n      this.executions.clear();\n    }, HOOK_SAFETY_CONFIG.CIRCUIT_BREAKER_TIMEOUT);\n\n    return count + 1;\n  }\n\n  getExecutionCount(hookType) {\n    const key = `${this.sessionId}:${hookType}`;\n    return this.executions.get(key) || 0;\n  }\n\n  reset() {\n    this.executions.clear();\n    this.sessionId = this.generateSessionId();\n  }\n}\n\n// Global instance\nconst executionTracker = new HookExecutionTracker();\n\n/**\n * Hook Context Manager - Tracks hook execution context\n */\nexport class HookContextManager {\n  static setContext(hookType, depth = 1) {\n    process.env[HOOK_SAFETY_CONFIG.ENV_VARS.CONTEXT] = hookType;\n    process.env[HOOK_SAFETY_CONFIG.ENV_VARS.DEPTH] = depth.toString();\n    process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SESSION_ID] = executionTracker.sessionId;\n  }\n\n  static getContext() {\n    return {\n      type: process.env[HOOK_SAFETY_CONFIG.ENV_VARS.CONTEXT],\n      depth: parseInt(process.env[HOOK_SAFETY_CONFIG.ENV_VARS.DEPTH] || '0'),\n      sessionId: process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SESSION_ID],\n      skipHooks: process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SKIP_HOOKS] === 'true',\n      safeMode: process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SAFE_MODE] === 'true',\n    };\n  }\n\n  static clearContext() {\n    delete process.env[HOOK_SAFETY_CONFIG.ENV_VARS.CONTEXT];\n    delete process.env[HOOK_SAFETY_CONFIG.ENV_VARS.DEPTH];\n    delete process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SESSION_ID];\n  }\n\n  static isInHookContext() {\n    return !!process.env[HOOK_SAFETY_CONFIG.ENV_VARS.CONTEXT];\n  }\n\n  static setSafeMode(enabled = true) {\n    if (enabled) {\n      process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SAFE_MODE] = 'true';\n    } else {\n      delete process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SAFE_MODE];\n    }\n  }\n\n  static setSkipHooks(enabled = true) {\n    if (enabled) {\n      process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SKIP_HOOKS] = 'true';\n    } else {\n      delete process.env[HOOK_SAFETY_CONFIG.ENV_VARS.SKIP_HOOKS];\n    }\n  }\n}\n\n/**\n * Command Validator - Validates commands for hook safety\n */\nexport class HookCommandValidator {\n  /**\n   * Validate if a command is safe to execute from a hook\n   */\n  static validateCommand(command, hookType) {\n    const context = HookContextManager.getContext();\n    const warnings = [];\n    const errors = [];\n\n    // Critical check: Claude commands in Stop hooks\n    if (hookType === 'Stop' && this.isClaudeCommand(command)) {\n      errors.push({\n        type: 'CRITICAL_RECURSION_RISK',\n        message:\n          '🚨 CRITICAL ERROR: Claude command detected in Stop hook!\\n' +\n          'This creates an INFINITE LOOP that can cost THOUSANDS OF DOLLARS.\\n' +\n          'Stop hooks that call \"claude\" commands bypass rate limits and\\n' +\n          'can result in massive unexpected API charges.\\n\\n' +\n          'BLOCKED FOR SAFETY - Use alternative patterns instead.',\n      });\n    }\n\n    // General recursion detection\n    if (context.type && this.isClaudeCommand(command)) {\n      const depth = context.depth;\n\n      if (depth >= HOOK_SAFETY_CONFIG.MAX_HOOK_DEPTH) {\n        errors.push({\n          type: 'HOOK_RECURSION_LIMIT',\n          message:\n            `🚨 Hook recursion limit exceeded! (Depth: ${depth})\\n` +\n            `Hook type: ${context.type}\\n` +\n            'Blocking execution to prevent infinite loop.',\n        });\n      } else {\n        warnings.push({\n          type: 'POTENTIAL_RECURSION',\n          message:\n            `⚠️  WARNING: Claude command in ${context.type} hook (depth: ${depth})\\n` +\n            'This could create recursion. Consider using --skip-hooks flag.',\n        });\n      }\n    }\n\n    // Check for other dangerous patterns\n    if (this.isDangerousPattern(command, hookType)) {\n      warnings.push({\n        type: 'DANGEROUS_PATTERN',\n        message:\n          `⚠️  WARNING: Potentially dangerous hook pattern detected.\\n` +\n          'Review the command and consider safer alternatives.',\n      });\n    }\n\n    return { warnings, errors, safe: errors.length === 0 };\n  }\n\n  static isClaudeCommand(command) {\n    // Match various forms of claude command invocation\n    const claudePatterns = [\n      /\\bclaude\\b/, // Direct claude command\n      /claude-code\\b/, // claude-code command\n      /npx\\s+claude\\b/, // NPX claude\n      /\\.\\/claude\\b/, // Local claude wrapper\n      /claude\\.exe\\b/, // Windows executable\n    ];\n\n    return claudePatterns.some((pattern) => pattern.test(command));\n  }\n\n  static isDangerousPattern(command, hookType) {\n    const dangerousPatterns = [\n      // Commands that could trigger more hooks\n      /git\\s+commit.*--all/,\n      /git\\s+add\\s+\\./,\n      // File operations that might trigger watchers\n      /watch\\s+.*claude/,\n      /nodemon.*claude/,\n      // Recursive script execution\n      /bash.*hook/,\n      /sh.*hook/,\n    ];\n\n    return dangerousPatterns.some((pattern) => pattern.test(command));\n  }\n}\n\n/**\n * Circuit Breaker - Prevents runaway hook execution\n */\nexport class HookCircuitBreaker {\n  /**\n   * Check if hook execution should be allowed\n   */\n  static checkExecution(hookType) {\n    const executionCount = executionTracker.track(hookType);\n\n    // Stop hook protection - maximum 2 executions per session\n    if (hookType === 'Stop' && executionCount > HOOK_SAFETY_CONFIG.MAX_STOP_HOOK_EXECUTIONS) {\n      throw new Error(\n        `🚨 CIRCUIT BREAKER ACTIVATED!\\n` +\n          `Stop hook has executed ${executionCount} times in this session.\\n` +\n          `This indicates a potential infinite loop that could cost thousands of dollars.\\n` +\n          `Execution blocked for financial protection.\\n\\n` +\n          `To reset: Use --reset-circuit-breaker flag or restart your session.`,\n      );\n    }\n\n    // General protection for any hook type\n    if (executionCount > 20) {\n      throw new Error(\n        `🚨 CIRCUIT BREAKER: ${hookType} hook executed ${executionCount} times!\\n` +\n          `This is highly unusual and indicates a potential problem.\\n` +\n          `Execution blocked to prevent system overload.`,\n      );\n    }\n\n    // Log warnings for concerning patterns\n    if (hookType === 'Stop' && executionCount > 1) {\n      printWarning(`⚠️  Stop hook execution #${executionCount} detected. Monitor for recursion.`);\n    }\n\n    return true;\n  }\n\n  static reset() {\n    executionTracker.reset();\n    printSuccess('Circuit breaker reset successfully.');\n  }\n\n  static getStatus() {\n    return {\n      sessionId: executionTracker.sessionId,\n      executions: Array.from(executionTracker.executions.entries()).map(([key, count]) => {\n        const [sessionId, hookType] = key.split(':');\n        return { hookType, count };\n      }),\n    };\n  }\n}\n\n/**\n * Configuration Validator - Validates hook configurations for safety\n */\nexport class HookConfigValidator {\n  /**\n   * Validate Claude Code settings.json for dangerous hook configurations\n   */\n  static validateClaudeCodeConfig(configPath = null) {\n    if (!configPath) {\n      // Try to find Claude Code settings\n      const possiblePaths = [\n        path.join(process.env.HOME || '.', '.claude', 'settings.json'),\n        path.join(process.cwd(), '.claude', 'settings.json'),\n        path.join(process.cwd(), 'settings.json'),\n      ];\n\n      configPath = possiblePaths.find((p) => existsSync(p));\n\n      if (!configPath) {\n        return { safe: true, message: 'No Claude Code configuration found.' };\n      }\n    }\n\n    try {\n      const config = JSON.parse(readFileSync(configPath, 'utf8'));\n      const validation = this.validateHooksConfig(config.hooks || {});\n\n      return {\n        safe: validation.errors.length === 0,\n        configPath,\n        ...validation,\n      };\n    } catch (err) {\n      return {\n        safe: false,\n        error: `Failed to validate configuration: ${err.message}`,\n        configPath,\n      };\n    }\n  }\n\n  /**\n   * Validate hooks configuration object\n   */\n  static validateHooksConfig(hooksConfig) {\n    const warnings = [];\n    const errors = [];\n\n    // Check Stop hooks specifically\n    if (hooksConfig.Stop) {\n      for (const hookGroup of hooksConfig.Stop) {\n        for (const hook of hookGroup.hooks || []) {\n          if (hook.type === 'command' && hook.command) {\n            const result = HookCommandValidator.validateCommand(hook.command, 'Stop');\n            warnings.push(...result.warnings);\n            errors.push(...result.errors);\n          }\n        }\n      }\n    }\n\n    // Check other dangerous hook types\n    const dangerousHookTypes = ['SubagentStop', 'PostToolUse'];\n    for (const hookType of dangerousHookTypes) {\n      if (hooksConfig[hookType]) {\n        for (const hookGroup of hooksConfig[hookType]) {\n          for (const hook of hookGroup.hooks || []) {\n            if (hook.type === 'command' && hook.command) {\n              const result = HookCommandValidator.validateCommand(hook.command, hookType);\n              warnings.push(...result.warnings);\n              errors.push(...result.errors);\n            }\n          }\n        }\n      }\n    }\n\n    return { warnings, errors };\n  }\n\n  /**\n   * Generate safe configuration recommendations\n   */\n  static generateSafeAlternatives(dangerousConfig) {\n    const alternatives = [];\n\n    // Example: Stop hook calling claude\n    if (dangerousConfig.includes('claude')) {\n      alternatives.push({\n        pattern: 'Stop hook with claude command',\n        problem: 'Creates infinite recursion loop',\n        solution: 'Use flag-based approach instead',\n        example: `\n// Instead of this DANGEROUS pattern:\n{\n  \"Stop\": [{\n    \"hooks\": [{\"type\": \"command\", \"command\": \"claude -c -p 'Update history'\"}]\n  }]\n}\n\n// Use this SAFE pattern:\n{\n  \"Stop\": [{\n    \"hooks\": [{\"type\": \"command\", \"command\": \"touch ~/.claude/needs_update\"}]\n  }]\n}\n\n// Then manually run: claude -c -p \"Update history\" when needed\n        `,\n      });\n\n      alternatives.push({\n        pattern: 'PostToolUse hook alternative',\n        problem: 'Stop hooks execute too frequently',\n        solution: 'Use PostToolUse for specific tools',\n        example: `\n// SAFER: Use PostToolUse for specific operations\n{\n  \"PostToolUse\": [{\n    \"matcher\": \"Write|Edit|MultiEdit\",\n    \"hooks\": [{\"type\": \"command\", \"command\": \"echo 'File modified' >> ~/.claude/changes.log\"}]\n  }]\n}\n        `,\n      });\n    }\n\n    return alternatives;\n  }\n}\n\n/**\n * Safe Hook Execution Wrapper\n */\nexport class SafeHookExecutor {\n  /**\n   * Safely execute a hook command with all safety checks\n   */\n  static async executeHookCommand(command, hookType, options = {}) {\n    try {\n      // Skip if hooks are disabled\n      if (HookContextManager.getContext().skipHooks) {\n        console.log(`⏭️  Skipping ${hookType} hook (hooks disabled)`);\n        return { success: true, skipped: true };\n      }\n\n      // Circuit breaker check\n      HookCircuitBreaker.checkExecution(hookType);\n\n      // Command validation\n      const validation = HookCommandValidator.validateCommand(command, hookType);\n\n      // Show warnings\n      for (const warning of validation.warnings) {\n        printWarning(warning.message);\n      }\n\n      // Block on errors\n      if (!validation.safe) {\n        for (const error of validation.errors) {\n          printError(error.message);\n        }\n        return { success: false, blocked: true, errors: validation.errors };\n      }\n\n      // Set hook context for nested calls\n      const currentContext = HookContextManager.getContext();\n      const newDepth = currentContext.depth + 1;\n      HookContextManager.setContext(hookType, newDepth);\n\n      // Execute the command with safety context\n      const result = await this.executeCommand(command, options);\n\n      return { success: true, result };\n    } catch (err) {\n      printError(`Hook execution failed: ${err.message}`);\n      return { success: false, error: err.message };\n    } finally {\n      // Clear context\n      HookContextManager.clearContext();\n    }\n  }\n\n  static async executeCommand(command, options = {}) {\n    // This would integrate with the actual command execution system\n    // For now, just log what would be executed\n    console.log(`🔗 Executing hook command: ${command}`);\n\n    // Here you would actually execute the command\n    // return await execCommand(command, options);\n\n    return { stdout: '', stderr: '', exitCode: 0 };\n  }\n}\n\n/**\n * Hook Safety CLI Commands\n */\nexport async function hookSafetyCommand(subArgs, flags) {\n  const subcommand = subArgs[0];\n\n  switch (subcommand) {\n    case 'validate':\n      return await validateConfigCommand(subArgs, flags);\n    case 'status':\n      return await statusCommand(subArgs, flags);\n    case 'reset':\n      return await resetCommand(subArgs, flags);\n    case 'safe-mode':\n      return await safeModeCommand(subArgs, flags);\n    default:\n      showHookSafetyHelp();\n  }\n}\n\nasync function validateConfigCommand(subArgs, flags) {\n  const configPath = flags.config || flags.c;\n\n  console.log('🔍 Validating hook configuration for safety...\\n');\n\n  const result = HookConfigValidator.validateClaudeCodeConfig(configPath);\n\n  if (result.safe) {\n    printSuccess('✅ Hook configuration is safe!');\n    if (result.configPath) {\n      console.log(`📄 Validated: ${result.configPath}`);\n    }\n  } else {\n    printError('❌ DANGEROUS hook configuration detected!');\n\n    if (result.errors) {\n      console.log('\\n🚨 CRITICAL ERRORS:');\n      for (const error of result.errors) {\n        console.log(`\\n${error.message}`);\n      }\n    }\n\n    if (result.warnings) {\n      console.log('\\n⚠️  WARNINGS:');\n      for (const warning of result.warnings) {\n        console.log(`\\n${warning.message}`);\n      }\n    }\n\n    console.log('\\n💡 RECOMMENDATIONS:');\n    console.log('1. Remove claude commands from Stop hooks');\n    console.log('2. Use PostToolUse hooks for specific tools');\n    console.log('3. Implement flag-based update patterns');\n    console.log('4. Use claude --skip-hooks for manual updates');\n  }\n}\n\nasync function statusCommand(subArgs, flags) {\n  const context = HookContextManager.getContext();\n  const circuitStatus = HookCircuitBreaker.getStatus();\n\n  console.log('🔗 Hook Safety Status\\n');\n\n  console.log('📊 Current Context:');\n  if (context.type) {\n    console.log(`  🔄 Hook Type: ${context.type}`);\n    console.log(`  📏 Depth: ${context.depth}`);\n    console.log(`  🆔 Session: ${context.sessionId}`);\n    console.log(`  ⏭️  Skip Hooks: ${context.skipHooks ? 'Yes' : 'No'}`);\n    console.log(`  🛡️  Safe Mode: ${context.safeMode ? 'Yes' : 'No'}`);\n  } else {\n    console.log('  ✅ Not currently in hook context');\n  }\n\n  console.log('\\n⚡ Circuit Breaker Status:');\n  console.log(`  🆔 Session: ${circuitStatus.sessionId}`);\n\n  if (circuitStatus.executions.length > 0) {\n    console.log('  📊 Hook Executions:');\n    for (const exec of circuitStatus.executions) {\n      console.log(`    • ${exec.hookType}: ${exec.count} times`);\n    }\n  } else {\n    console.log('  ✅ No hook executions in current session');\n  }\n}\n\nasync function resetCommand(subArgs, flags) {\n  console.log('🔄 Resetting hook safety systems...\\n');\n\n  HookCircuitBreaker.reset();\n  HookContextManager.clearContext();\n\n  printSuccess('✅ Hook safety systems reset successfully!');\n  console.log('All execution counters and context cleared.');\n}\n\nasync function safeModeCommand(subArgs, flags) {\n  const enable = !flags.disable && !flags.off;\n\n  if (enable) {\n    HookContextManager.setSafeMode(true);\n    HookContextManager.setSkipHooks(true);\n    printSuccess('🛡️  Safe mode enabled!');\n    console.log('• All hooks will be skipped');\n    console.log('• Claude commands will show safety warnings');\n    console.log('• Additional validation will be performed');\n  } else {\n    HookContextManager.setSafeMode(false);\n    HookContextManager.setSkipHooks(false);\n    printSuccess('⚡ Safe mode disabled.');\n    console.log('Normal hook execution restored.');\n  }\n}\n\nfunction showHookSafetyHelp() {\n  console.log(`\n🛡️  Hook Safety System - Prevent Infinite Loops & Financial Damage\n\nUSAGE:\n  claude-flow hook-safety <command> [options]\n\nCOMMANDS:\n  validate      Validate hook configuration for dangerous patterns\n  status        Show current hook safety status and context\n  reset         Reset circuit breakers and execution counters\n  safe-mode     Enable/disable safe mode (skips all hooks)\n\nVALIDATE OPTIONS:\n  --config, -c <path>     Path to Claude Code settings.json\n\nSAFE-MODE OPTIONS:\n  --disable, --off        Disable safe mode\n\nEXAMPLES:\n  # Check your Claude Code hooks for dangerous patterns\n  claude-flow hook-safety validate\n\n  # Check specific configuration file\n  claude-flow hook-safety validate --config ~/.claude/settings.json\n\n  # View current safety status\n  claude-flow hook-safety status\n\n  # Reset if circuit breaker is triggered\n  claude-flow hook-safety reset\n\n  # Enable safe mode (skips all hooks)\n  claude-flow hook-safety safe-mode\n\n  # Disable safe mode\n  claude-flow hook-safety safe-mode --disable\n\n🚨 CRITICAL WARNING:\nStop hooks that call 'claude' commands create INFINITE LOOPS that can:\n• Bypass API rate limits\n• Cost thousands of dollars per day\n• Make your system unresponsive\n\nSAFE ALTERNATIVES:\n• Use PostToolUse hooks instead of Stop hooks\n• Implement flag-based update patterns\n• Use 'claude --skip-hooks' for manual updates\n• Create conditional execution scripts\n\nFor more information: https://github.com/ruvnet/claude-flow/issues/166\n`);\n}\n\n/**\n * Emergency CLI flags for Claude commands\n */\nexport function addSafetyFlags(command) {\n  // Add safety flags to any claude command\n  const context = HookContextManager.getContext();\n\n  if (context.type) {\n    // Automatically add --skip-hooks if in hook context\n    if (!command.includes('--skip-hooks')) {\n      command += ' --skip-hooks';\n    }\n  }\n\n  if (context.safeMode) {\n    // Add additional safety flags in safe mode\n    if (!command.includes('--dry-run')) {\n      command += ' --dry-run';\n    }\n  }\n\n  return command;\n}\n\nexport default {\n  HookContextManager,\n  HookCommandValidator,\n  HookCircuitBreaker,\n  HookConfigValidator,\n  SafeHookExecutor,\n  hookSafetyCommand,\n  addSafetyFlags,\n};\n"],"names":["printError","printWarning","printSuccess","existsSync","readFileSync","path","HOOK_SAFETY_CONFIG","MAX_HOOK_DEPTH","MAX_STOP_HOOK_EXECUTIONS","CIRCUIT_BREAKER_TIMEOUT","ENV_VARS","CONTEXT","DEPTH","SESSION_ID","SKIP_HOOKS","SAFE_MODE","HookExecutionTracker","executions","Map","sessionId","generateSessionId","resetTimeout","Date","now","Math","random","toString","substr","track","hookType","key","count","get","set","clearTimeout","setTimeout","clear","getExecutionCount","reset","executionTracker","HookContextManager","setContext","depth","process","env","getContext","type","parseInt","skipHooks","safeMode","clearContext","isInHookContext","setSafeMode","enabled","setSkipHooks","HookCommandValidator","validateCommand","command","context","warnings","errors","isClaudeCommand","push","message","isDangerousPattern","safe","length","claudePatterns","some","pattern","test","dangerousPatterns","HookCircuitBreaker","checkExecution","executionCount","Error","getStatus","Array","from","entries","map","split","HookConfigValidator","validateClaudeCodeConfig","configPath","possiblePaths","join","HOME","cwd","find","p","config","JSON","parse","validation","validateHooksConfig","hooks","err","error","hooksConfig","Stop","hookGroup","hook","result","dangerousHookTypes","generateSafeAlternatives","dangerousConfig","alternatives","includes","problem","solution","example","SafeHookExecutor","executeHookCommand","options","console","log","success","skipped","warning","blocked","currentContext","newDepth","executeCommand","stdout","stderr","exitCode","hookSafetyCommand","subArgs","flags","subcommand","validateConfigCommand","statusCommand","resetCommand","safeModeCommand","showHookSafetyHelp","c","circuitStatus","exec","enable","disable","off","addSafetyFlags"],"mappings":"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"}