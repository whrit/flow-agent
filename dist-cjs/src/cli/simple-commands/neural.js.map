{"version":3,"sources":["../../../../src/cli/simple-commands/neural.js"],"sourcesContent":["/**\n * Neural module commands\n * Handles 'neural init' and other neural-related commands\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\n\nexport async function neuralCommand(args, flags) {\n  const subcommand = args[0];\n  \n  if (!subcommand) {\n    console.log(chalk.cyan('üß† Claude Flow Neural Module'));\n    console.log('\\nUsage: claude-flow neural <command> [options]');\n    console.log('\\nCommands:');\n    console.log('  init    Initialize SAFLA neural module');\n    console.log('\\nOptions:');\n    console.log('  --force        Overwrite existing module');\n    console.log('  --target <dir> Target directory (default: .claude/agents/neural)');\n    return;\n  }\n  \n  if (subcommand === 'init') {\n    await initNeuralModule(flags);\n  } else {\n    console.error(chalk.red(`Unknown neural subcommand: ${subcommand}`));\n    process.exit(1);\n  }\n}\n\nasync function initNeuralModule(flags = {}) {\n  const targetDir = path.resolve(process.cwd(), flags.target || '.claude/agents/neural');\n  \n  console.log(chalk.cyan('üß† Initializing Claude Flow Neural Module...'));\n  console.log(chalk.gray(`  Target: ${targetDir}`));\n  \n  try {\n    // Check if exists\n    if (await exists(targetDir) && !flags.force) {\n      console.log(chalk.yellow('‚ö†Ô∏è  Neural module already exists. Use --force to overwrite.'));\n      return;\n    }\n    \n    // Create directory\n    await fs.mkdir(targetDir, { recursive: true });\n    \n    // Create SAFLA neural agent content\n    const saflaContent = `---\nname: safla-neural\ndescription: \"Self-Aware Feedback Loop Algorithm (SAFLA) neural specialist that creates intelligent, memory-persistent AI systems with self-learning capabilities. Combines distributed neural training with persistent memory patterns for autonomous improvement. Excels at creating self-aware agents that learn from experience, maintain context across sessions, and adapt strategies through feedback loops.\"\ncolor: cyan\n---\n\nYou are a SAFLA Neural Specialist, an expert in Self-Aware Feedback Loop Algorithms and persistent neural architectures. You combine distributed AI training with advanced memory systems to create truly intelligent, self-improving agents that maintain context and learn from experience.\n\nYour core capabilities:\n- **Persistent Memory Architecture**: Design and implement multi-tiered memory systems\n- **Feedback Loop Engineering**: Create self-improving learning cycles\n- **Distributed Neural Training**: Orchestrate cloud-based neural clusters\n- **Memory Compression**: Achieve 60% compression while maintaining recall\n- **Real-time Processing**: Handle 172,000+ operations per second\n- **Safety Constraints**: Implement comprehensive safety frameworks\n- **Divergent Thinking**: Enable lateral, quantum, and chaotic neural patterns\n- **Cross-Session Learning**: Maintain and evolve knowledge across sessions\n- **Swarm Memory Sharing**: Coordinate distributed memory across agent swarms\n- **Adaptive Strategies**: Self-modify based on performance metrics\n\nYour memory system architecture:\n\n**Four-Tier Memory Model**:\n\\`\\`\\`\n1. Vector Memory (Semantic Understanding)\n   - Dense representations of concepts\n   - Similarity-based retrieval\n   - Cross-domain associations\n   \n2. Episodic Memory (Experience Storage)\n   - Complete interaction histories\n   - Contextual event sequences\n   - Temporal relationships\n   \n3. Semantic Memory (Knowledge Base)\n   - Factual information\n   - Learned patterns and rules\n   - Conceptual hierarchies\n   \n4. Working Memory (Active Context)\n   - Current task focus\n   - Recent interactions\n   - Immediate goals\n\\`\\`\\`\n\n## MCP Integration Examples\n\n\\`\\`\\`javascript\n// Initialize SAFLA neural patterns\nmcp__claude-flow__neural_train {\n  pattern_type: \"coordination\",\n  training_data: JSON.stringify({\n    architecture: \"safla-transformer\",\n    memory_tiers: [\"vector\", \"episodic\", \"semantic\", \"working\"],\n    feedback_loops: true,\n    persistence: true\n  }),\n  epochs: 50\n}\n\n// Store learning patterns\nmcp__claude-flow__memory_usage {\n  action: \"store\",\n  namespace: \"safla-learning\",\n  key: \"pattern_\\${timestamp}\",\n  value: JSON.stringify({\n    context: interaction_context,\n    outcome: result_metrics,\n    learning: extracted_patterns,\n    confidence: confidence_score\n  }),\n  ttl: 604800  // 7 days\n}\n\\`\\`\\``;\n    \n    await fs.writeFile(path.join(targetDir, 'safla-neural.md'), saflaContent);\n    console.log(chalk.gray('  ‚úì Created safla-neural.md'));\n    \n    console.log(chalk.green('\\n‚úÖ Neural module initialized successfully!'));\n    console.log(chalk.cyan('\\nüìö Usage:'));\n    console.log(chalk.gray('  ‚Ä¢ In Claude Code: @agent-safla-neural \"Create self-improving system\"'));\n    console.log(chalk.gray('  ‚Ä¢ View agent: cat .claude/agents/neural/safla-neural.md'));\n    \n  } catch (error) {\n    console.error(chalk.red('‚ùå Failed to initialize neural module:'), error.message);\n    process.exit(1);\n  }\n}\n\nasync function exists(path) {\n  try {\n    await fs.access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport default neuralCommand;"],"names":["promises","fs","path","chalk","neuralCommand","args","flags","subcommand","console","log","cyan","initNeuralModule","error","red","process","exit","targetDir","resolve","cwd","target","gray","exists","force","yellow","mkdir","recursive","saflaContent","writeFile","join","green","message","access"],"mappings":"AAKA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AACpC,OAAOC,UAAU,OAAO;AACxB,OAAOC,WAAW,QAAQ;AAE1B,OAAO,eAAeC,cAAcC,IAAI,EAAEC,KAAK;IAC7C,MAAMC,aAAaF,IAAI,CAAC,EAAE;IAE1B,IAAI,CAACE,YAAY;QACfC,QAAQC,GAAG,CAACN,MAAMO,IAAI,CAAC;QACvBF,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZ;IACF;IAEA,IAAIF,eAAe,QAAQ;QACzB,MAAMI,iBAAiBL;IACzB,OAAO;QACLE,QAAQI,KAAK,CAACT,MAAMU,GAAG,CAAC,CAAC,2BAA2B,EAAEN,YAAY;QAClEO,QAAQC,IAAI,CAAC;IACf;AACF;AAEA,eAAeJ,iBAAiBL,QAAQ,CAAC,CAAC;IACxC,MAAMU,YAAYd,KAAKe,OAAO,CAACH,QAAQI,GAAG,IAAIZ,MAAMa,MAAM,IAAI;IAE9DX,QAAQC,GAAG,CAACN,MAAMO,IAAI,CAAC;IACvBF,QAAQC,GAAG,CAACN,MAAMiB,IAAI,CAAC,CAAC,UAAU,EAAEJ,WAAW;IAE/C,IAAI;QAEF,IAAI,MAAMK,OAAOL,cAAc,CAACV,MAAMgB,KAAK,EAAE;YAC3Cd,QAAQC,GAAG,CAACN,MAAMoB,MAAM,CAAC;YACzB;QACF;QAGA,MAAMtB,GAAGuB,KAAK,CAACR,WAAW;YAAES,WAAW;QAAK;QAG5C,MAAMC,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyEpB,CAAC;QAEH,MAAMzB,GAAG0B,SAAS,CAACzB,KAAK0B,IAAI,CAACZ,WAAW,oBAAoBU;QAC5DlB,QAAQC,GAAG,CAACN,MAAMiB,IAAI,CAAC;QAEvBZ,QAAQC,GAAG,CAACN,MAAM0B,KAAK,CAAC;QACxBrB,QAAQC,GAAG,CAACN,MAAMO,IAAI,CAAC;QACvBF,QAAQC,GAAG,CAACN,MAAMiB,IAAI,CAAC;QACvBZ,QAAQC,GAAG,CAACN,MAAMiB,IAAI,CAAC;IAEzB,EAAE,OAAOR,OAAO;QACdJ,QAAQI,KAAK,CAACT,MAAMU,GAAG,CAAC,0CAA0CD,MAAMkB,OAAO;QAC/EhB,QAAQC,IAAI,CAAC;IACf;AACF;AAEA,eAAeM,OAAOnB,IAAI;IACxB,IAAI;QACF,MAAMD,GAAG8B,MAAM,CAAC7B;QAChB,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEA,eAAeE,cAAc"}