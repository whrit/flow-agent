{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc/phase-base.js"],"sourcesContent":["// Base class for SPARC phases\n// Provides common functionality for all phases\n\nexport class SparcPhase {\n  constructor(phaseName, taskDescription, options = {}) {\n    this.phaseName = phaseName;\n    this.taskDescription = taskDescription;\n    this.options = options;\n    this.startTime = null;\n    this.endTime = null;\n    this.artifacts = [];\n    this.memory = {};\n    this.swarmContext = null;\n    this.remediationContext = null;\n  }\n\n  /**\n   * Initialize phase execution\n   */\n  async initializePhase() {\n    this.startTime = Date.now();\n    console.log(`🚀 Initializing ${this.phaseName} phase`);\n\n    // Load previous context from memory\n    if (this.options.swarmEnabled) {\n      await this.loadSwarmContext();\n    }\n\n    // Store phase start in memory\n    await this.storeInMemory(`${this.phaseName}_started`, {\n      timestamp: this.startTime,\n      taskDescription: this.taskDescription,\n    });\n  }\n\n  /**\n   * Finalize phase execution\n   */\n  async finalizePhase() {\n    this.endTime = Date.now();\n    const duration = this.endTime - this.startTime;\n\n    console.log(`✅ ${this.phaseName} phase completed in ${duration}ms`);\n\n    // Store phase completion in memory\n    await this.storeInMemory(`${this.phaseName}_completed`, {\n      timestamp: this.endTime,\n      duration: duration,\n      artifacts: this.artifacts,\n    });\n\n    // Update swarm context if enabled\n    if (this.options.swarmEnabled) {\n      await this.updateSwarmContext();\n    }\n  }\n\n  /**\n   * Store data in memory system\n   */\n  async storeInMemory(key, data) {\n    try {\n      const memoryKey = `${this.options.namespace}_${key}`;\n      const memoryData = JSON.stringify(data);\n\n      // Store in local memory\n      this.memory[key] = data;\n\n      // Store in swarm memory if enabled\n      if (this.options.swarmEnabled) {\n        await this.storeInSwarmMemory(memoryKey, memoryData);\n      }\n\n      console.log(`💾 Stored in memory: ${memoryKey}`);\n    } catch (error) {\n      console.warn(`⚠️ Failed to store in memory: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieve data from memory system\n   */\n  async retrieveFromMemory(key) {\n    try {\n      const memoryKey = `${this.options.namespace}_${key}`;\n\n      // Try local memory first\n      if (this.memory[key]) {\n        return this.memory[key];\n      }\n\n      // Try swarm memory if enabled\n      if (this.options.swarmEnabled) {\n        return await this.retrieveFromSwarmMemory(memoryKey);\n      }\n\n      return null;\n    } catch (error) {\n      console.warn(`⚠️ Failed to retrieve from memory: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Store data in swarm memory\n   */\n  async storeInSwarmMemory(key, data) {\n    if (!this.options.swarmEnabled) return;\n\n    try {\n      // Use ruv-swarm memory hooks\n      const { spawn } = await import('child_process');\n\n      return new Promise((resolve, reject) => {\n        const process = spawn(\n          'npx',\n          ['ruv-swarm', 'hook', 'memory-store', '--key', key, '--data', data],\n          {\n            stdio: 'pipe',\n          },\n        );\n\n        let output = '';\n        process.stdout.on('data', (data) => {\n          output += data.toString();\n        });\n\n        process.on('close', (code) => {\n          if (code === 0) {\n            resolve(output);\n          } else {\n            reject(new Error(`Memory store failed with code ${code}`));\n          }\n        });\n      });\n    } catch (error) {\n      console.warn(`⚠️ Failed to store in swarm memory: ${error.message}`);\n    }\n  }\n\n  /**\n   * Retrieve data from swarm memory\n   */\n  async retrieveFromSwarmMemory(key) {\n    if (!this.options.swarmEnabled) return null;\n\n    try {\n      const { spawn } = await import('child_process');\n\n      return new Promise((resolve, reject) => {\n        const process = spawn('npx', ['ruv-swarm', 'hook', 'memory-retrieve', '--key', key], {\n          stdio: 'pipe',\n        });\n\n        let output = '';\n        process.stdout.on('data', (data) => {\n          output += data.toString();\n        });\n\n        process.on('close', (code) => {\n          if (code === 0) {\n            try {\n              const data = JSON.parse(output);\n              resolve(data);\n            } catch (parseError) {\n              resolve(null);\n            }\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    } catch (error) {\n      console.warn(`⚠️ Failed to retrieve from swarm memory: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Load swarm context\n   */\n  async loadSwarmContext() {\n    try {\n      this.swarmContext = await this.retrieveFromSwarmMemory(\n        `${this.options.namespace}_swarm_context`,\n      );\n      if (this.swarmContext) {\n        console.log(`🐝 Loaded swarm context for ${this.phaseName}`);\n      }\n    } catch (error) {\n      console.warn(`⚠️ Failed to load swarm context: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update swarm context\n   */\n  async updateSwarmContext() {\n    try {\n      const contextUpdate = {\n        phase: this.phaseName,\n        timestamp: Date.now(),\n        artifacts: this.artifacts,\n        memory: this.memory,\n        status: 'completed',\n      };\n\n      await this.storeInSwarmMemory(\n        `${this.options.namespace}_swarm_context`,\n        JSON.stringify(contextUpdate),\n      );\n      console.log(`🐝 Updated swarm context for ${this.phaseName}`);\n    } catch (error) {\n      console.warn(`⚠️ Failed to update swarm context: ${error.message}`);\n    }\n  }\n\n  /**\n   * Save artifact to file system\n   */\n  async saveArtifact(filename, content) {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n\n      const artifactDir = path.join(process.cwd(), 'sparc-artifacts', this.options.namespace);\n      await fs.mkdir(artifactDir, { recursive: true });\n\n      const filePath = path.join(artifactDir, filename);\n      await fs.writeFile(filePath, content, 'utf8');\n\n      this.artifacts.push({\n        filename,\n        path: filePath,\n        timestamp: Date.now(),\n      });\n\n      console.log(`📄 Saved artifact: ${filename}`);\n      return filePath;\n    } catch (error) {\n      console.warn(`⚠️ Failed to save artifact: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Load artifact from file system\n   */\n  async loadArtifact(filename) {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n\n      const artifactDir = path.join(process.cwd(), 'sparc-artifacts', this.options.namespace);\n      const filePath = path.join(artifactDir, filename);\n\n      const content = await fs.readFile(filePath, 'utf8');\n      return content;\n    } catch (error) {\n      console.warn(`⚠️ Failed to load artifact: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Set remediation context for quality gate failures\n   */\n  setRemediationContext(qualityGate) {\n    this.remediationContext = qualityGate;\n    console.log(\n      `🔧 Set remediation context for ${this.phaseName}: ${qualityGate.reasons.join(', ')}`,\n    );\n  }\n\n  /**\n   * Get phase metrics\n   */\n  getMetrics() {\n    return {\n      phaseName: this.phaseName,\n      duration: this.endTime ? this.endTime - this.startTime : null,\n      artifactsCount: this.artifacts.length,\n      memoryKeys: Object.keys(this.memory).length,\n      hasSwarmContext: !!this.swarmContext,\n      hasRemediationContext: !!this.remediationContext,\n    };\n  }\n\n  /**\n   * Validate phase prerequisites\n   */\n  async validatePrerequisites() {\n    // Base validation - override in subclasses\n    return { valid: true, reasons: [] };\n  }\n\n  /**\n   * Execute phase - must be implemented by subclasses\n   */\n  async execute() {\n    throw new Error(`Execute method must be implemented by ${this.phaseName} phase`);\n  }\n\n  /**\n   * Get phase status\n   */\n  getStatus() {\n    return {\n      phase: this.phaseName,\n      started: !!this.startTime,\n      completed: !!this.endTime,\n      duration: this.endTime ? this.endTime - this.startTime : null,\n      artifacts: this.artifacts.length,\n      hasContext: !!this.swarmContext,\n      hasRemediation: !!this.remediationContext,\n    };\n  }\n\n  /**\n   * Neural learning hook\n   */\n  async recordLearning(learningData) {\n    if (!this.options.neuralLearning) return;\n\n    try {\n      const learningRecord = {\n        phase: this.phaseName,\n        timestamp: Date.now(),\n        data: learningData,\n        context: {\n          task: this.taskDescription,\n          options: this.options,\n          metrics: this.getMetrics(),\n        },\n      };\n\n      await this.storeInMemory(`learning_${Date.now()}`, learningRecord);\n\n      // Store in neural learning system if available\n      if (this.options.swarmEnabled) {\n        await this.storeInSwarmMemory(\n          `neural_learning_${this.phaseName}`,\n          JSON.stringify(learningRecord),\n        );\n      }\n\n      console.log(`🧠 Recorded learning for ${this.phaseName}`);\n    } catch (error) {\n      console.warn(`⚠️ Failed to record learning: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get learning insights\n   */\n  async getLearningInsights() {\n    if (!this.options.neuralLearning) return [];\n\n    try {\n      const insights = [];\n\n      // Analyze previous executions\n      const learningKeys = Object.keys(this.memory).filter((key) => key.startsWith('learning_'));\n\n      for (const key of learningKeys) {\n        const record = this.memory[key];\n        if (record && record.phase === this.phaseName) {\n          insights.push({\n            timestamp: record.timestamp,\n            insight: this.generateInsight(record),\n            confidence: this.calculateConfidence(record),\n          });\n        }\n      }\n\n      return insights;\n    } catch (error) {\n      console.warn(`⚠️ Failed to get learning insights: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Generate insight from learning record\n   */\n  generateInsight(record) {\n    // Basic insight generation - can be enhanced with ML\n    const patterns = this.identifyPatterns(record);\n    return `Pattern identified: ${patterns.join(', ')}`;\n  }\n\n  /**\n   * Calculate confidence score\n   */\n  calculateConfidence(record) {\n    // Simple confidence calculation based on recency and success\n    const age = Date.now() - record.timestamp;\n    const recencyScore = Math.max(0, 1 - age / (24 * 60 * 60 * 1000)); // Decay over 24 hours\n    const successScore = record.data.success ? 1 : 0.5;\n\n    return (recencyScore + successScore) / 2;\n  }\n\n  /**\n   * Identify patterns in learning data\n   */\n  identifyPatterns(record) {\n    const patterns = [];\n\n    if (record.data.duration) {\n      if (record.data.duration > 60000) {\n        patterns.push('Long execution time');\n      } else if (record.data.duration < 10000) {\n        patterns.push('Fast execution');\n      }\n    }\n\n    if (record.data.errors && record.data.errors.length > 0) {\n      patterns.push('Error prone');\n    }\n\n    if (record.data.qualityGate && !record.data.qualityGate.passed) {\n      patterns.push('Quality gate failures');\n    }\n\n    return patterns;\n  }\n}\n\nexport default SparcPhase;\n"],"names":["SparcPhase","phaseName","taskDescription","options","startTime","endTime","artifacts","memory","swarmContext","remediationContext","initializePhase","Date","now","console","log","swarmEnabled","loadSwarmContext","storeInMemory","timestamp","finalizePhase","duration","updateSwarmContext","key","data","memoryKey","namespace","memoryData","JSON","stringify","storeInSwarmMemory","error","warn","message","retrieveFromMemory","retrieveFromSwarmMemory","spawn","Promise","resolve","reject","process","stdio","output","stdout","on","toString","code","Error","parse","parseError","contextUpdate","phase","status","saveArtifact","filename","content","fs","path","artifactDir","join","cwd","mkdir","recursive","filePath","writeFile","push","loadArtifact","readFile","setRemediationContext","qualityGate","reasons","getMetrics","artifactsCount","length","memoryKeys","Object","keys","hasSwarmContext","hasRemediationContext","validatePrerequisites","valid","execute","getStatus","started","completed","hasContext","hasRemediation","recordLearning","learningData","neuralLearning","learningRecord","context","task","metrics","getLearningInsights","insights","learningKeys","filter","startsWith","record","insight","generateInsight","confidence","calculateConfidence","patterns","identifyPatterns","age","recencyScore","Math","max","successScore","success","errors","passed"],"mappings":"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"}