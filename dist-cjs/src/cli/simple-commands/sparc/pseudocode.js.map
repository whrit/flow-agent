{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc/pseudocode.js"],"sourcesContent":["// SPARC Pseudocode Phase\n// Generate pseudocode and flow diagrams based on specifications\n\nimport { SparcPhase } from './phase-base.js';\n\nexport class SparcPseudocode extends SparcPhase {\n  constructor(taskDescription, options) {\n    super('pseudocode', taskDescription, options);\n    this.flowDiagram = null;\n    this.pseudocode = [];\n    this.algorithms = [];\n    this.dataStructures = [];\n    this.interfaces = [];\n  }\n\n  /**\n   * Execute pseudocode phase\n   */\n  async execute() {\n    console.log('🔄 Starting Pseudocode Phase');\n\n    await this.initializePhase();\n\n    const result = {\n      flowDiagram: null,\n      pseudocode: [],\n      algorithms: [],\n      dataStructures: [],\n      interfaces: [],\n      logicFlow: [],\n      edgeCases: [],\n      complexityAnalysis: {},\n      dependencies: [],\n    };\n\n    try {\n      // Load specification from previous phase\n      const specification = await this.retrieveFromMemory('specification_complete');\n      if (!specification) {\n        throw new Error('Specification phase must be completed first');\n      }\n\n      // Generate flow diagram\n      result.flowDiagram = await this.generateFlowDiagram(specification);\n\n      // Generate pseudocode\n      result.pseudocode = await this.generatePseudocode(specification);\n\n      // Define algorithms\n      result.algorithms = await this.defineAlgorithms(specification);\n\n      // Define data structures\n      result.dataStructures = await this.defineDataStructures(specification);\n\n      // Define interfaces\n      result.interfaces = await this.defineInterfaces(specification);\n\n      // Map logic flow\n      result.logicFlow = await this.mapLogicFlow(specification);\n\n      // Identify edge cases\n      result.edgeCases = await this.identifyEdgeCases(specification);\n\n      // Analyze complexity\n      result.complexityAnalysis = await this.analyzeComplexity(result.pseudocode);\n\n      // Identify dependencies\n      result.dependencies = await this.identifyDependencies(specification);\n\n      // Generate pseudocode document\n      await this.generatePseudocodeDocument(result);\n\n      // Store in memory\n      await this.storeInMemory('pseudocode_complete', result);\n\n      console.log('✅ Pseudocode phase completed');\n      return result;\n    } catch (error) {\n      console.error('❌ Pseudocode phase failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate flow diagram\n   */\n  async generateFlowDiagram(specification) {\n    const flowDiagram = {\n      title: `Flow Diagram: ${this.taskDescription}`,\n      nodes: [],\n      edges: [],\n      entry: 'start',\n      exit: 'end',\n      type: 'sequential',\n    };\n\n    // Determine flow type based on requirements\n    const requirements = specification.requirements || [];\n    const hasApiRequirements = requirements.some((req) => req.toLowerCase().includes('api'));\n    const hasUiRequirements = requirements.some(\n      (req) => req.toLowerCase().includes('ui') || req.toLowerCase().includes('interface'),\n    );\n    const hasDataRequirements = requirements.some((req) => req.toLowerCase().includes('data'));\n\n    if (hasApiRequirements) {\n      flowDiagram.type = 'api';\n      flowDiagram.nodes = this.generateApiFlowNodes(requirements);\n    } else if (hasUiRequirements) {\n      flowDiagram.type = 'ui';\n      flowDiagram.nodes = this.generateUiFlowNodes(requirements);\n    } else if (hasDataRequirements) {\n      flowDiagram.type = 'data';\n      flowDiagram.nodes = this.generateDataFlowNodes(requirements);\n    } else {\n      flowDiagram.type = 'general';\n      flowDiagram.nodes = this.generateGeneralFlowNodes(requirements);\n    }\n\n    // Generate edges between nodes\n    flowDiagram.edges = this.generateFlowEdges(flowDiagram.nodes);\n\n    return flowDiagram;\n  }\n\n  /**\n   * Generate API flow nodes\n   */\n  generateApiFlowNodes(requirements) {\n    return [\n      { id: 'start', type: 'start', label: 'Start' },\n      { id: 'validate_input', type: 'process', label: 'Validate Input' },\n      { id: 'authenticate', type: 'process', label: 'Authenticate Request' },\n      { id: 'authorize', type: 'process', label: 'Authorize Access' },\n      { id: 'process_request', type: 'process', label: 'Process Request' },\n      { id: 'validate_data', type: 'decision', label: 'Data Valid?' },\n      { id: 'handle_error', type: 'process', label: 'Handle Error' },\n      { id: 'execute_logic', type: 'process', label: 'Execute Business Logic' },\n      { id: 'prepare_response', type: 'process', label: 'Prepare Response' },\n      { id: 'log_activity', type: 'process', label: 'Log Activity' },\n      { id: 'return_response', type: 'process', label: 'Return Response' },\n      { id: 'end', type: 'end', label: 'End' },\n    ];\n  }\n\n  /**\n   * Generate UI flow nodes\n   */\n  generateUiFlowNodes(requirements) {\n    return [\n      { id: 'start', type: 'start', label: 'Start' },\n      { id: 'load_interface', type: 'process', label: 'Load Interface' },\n      { id: 'initialize_state', type: 'process', label: 'Initialize State' },\n      { id: 'render_components', type: 'process', label: 'Render Components' },\n      { id: 'wait_user_input', type: 'input', label: 'Wait for User Input' },\n      { id: 'validate_input', type: 'process', label: 'Validate Input' },\n      { id: 'input_valid', type: 'decision', label: 'Input Valid?' },\n      { id: 'show_error', type: 'process', label: 'Show Error Message' },\n      { id: 'update_state', type: 'process', label: 'Update State' },\n      { id: 'make_api_call', type: 'process', label: 'Make API Call' },\n      { id: 'handle_response', type: 'process', label: 'Handle Response' },\n      { id: 'update_ui', type: 'process', label: 'Update UI' },\n      { id: 'end', type: 'end', label: 'End' },\n    ];\n  }\n\n  /**\n   * Generate data flow nodes\n   */\n  generateDataFlowNodes(requirements) {\n    return [\n      { id: 'start', type: 'start', label: 'Start' },\n      { id: 'connect_database', type: 'process', label: 'Connect to Database' },\n      { id: 'validate_schema', type: 'process', label: 'Validate Schema' },\n      { id: 'begin_transaction', type: 'process', label: 'Begin Transaction' },\n      { id: 'execute_query', type: 'process', label: 'Execute Query' },\n      { id: 'check_results', type: 'decision', label: 'Results Valid?' },\n      { id: 'rollback_transaction', type: 'process', label: 'Rollback Transaction' },\n      { id: 'transform_data', type: 'process', label: 'Transform Data' },\n      { id: 'validate_constraints', type: 'process', label: 'Validate Constraints' },\n      { id: 'commit_transaction', type: 'process', label: 'Commit Transaction' },\n      { id: 'close_connection', type: 'process', label: 'Close Connection' },\n      { id: 'end', type: 'end', label: 'End' },\n    ];\n  }\n\n  /**\n   * Generate general flow nodes\n   */\n  generateGeneralFlowNodes(requirements) {\n    return [\n      { id: 'start', type: 'start', label: 'Start' },\n      { id: 'initialize', type: 'process', label: 'Initialize System' },\n      { id: 'load_configuration', type: 'process', label: 'Load Configuration' },\n      { id: 'validate_prerequisites', type: 'process', label: 'Validate Prerequisites' },\n      { id: 'execute_main_logic', type: 'process', label: 'Execute Main Logic' },\n      { id: 'handle_exceptions', type: 'process', label: 'Handle Exceptions' },\n      { id: 'cleanup_resources', type: 'process', label: 'Cleanup Resources' },\n      { id: 'end', type: 'end', label: 'End' },\n    ];\n  }\n\n  /**\n   * Generate flow edges\n   */\n  generateFlowEdges(nodes) {\n    const edges = [];\n\n    for (let i = 0; i < nodes.length - 1; i++) {\n      const current = nodes[i];\n      const next = nodes[i + 1];\n\n      if (current.type === 'decision') {\n        // Decision nodes have multiple paths\n        edges.push({\n          from: current.id,\n          to: next.id,\n          label: 'Yes',\n          condition: true,\n        });\n\n        // Find alternative path (usually error handling)\n        const errorNode = nodes.find((n) => n.id.includes('error') || n.id.includes('handle'));\n        if (errorNode) {\n          edges.push({\n            from: current.id,\n            to: errorNode.id,\n            label: 'No',\n            condition: false,\n          });\n        }\n      } else {\n        edges.push({\n          from: current.id,\n          to: next.id,\n          label: '',\n        });\n      }\n    }\n\n    return edges;\n  }\n\n  /**\n   * Generate pseudocode\n   */\n  async generatePseudocode(specification) {\n    const pseudocode = [];\n    const requirements = specification.requirements || [];\n\n    // Main function\n    pseudocode.push({\n      function: 'main',\n      description: 'Main entry point for the system',\n      steps: [\n        'BEGIN main',\n        '  INITIALIZE system_configuration',\n        '  VALIDATE prerequisites',\n        '  CALL execute_primary_logic()',\n        '  HANDLE exceptions',\n        '  CLEANUP resources',\n        '  RETURN success_status',\n        'END main',\n      ],\n    });\n\n    // Generate pseudocode for each requirement\n    for (const [index, requirement] of requirements.entries()) {\n      const functionName = this.generateFunctionName(requirement);\n      const steps = this.generatePseudocodeSteps(requirement);\n\n      pseudocode.push({\n        function: functionName,\n        description: requirement,\n        steps: steps,\n        complexity: this.estimateComplexity(steps),\n      });\n    }\n\n    return pseudocode;\n  }\n\n  /**\n   * Generate function name from requirement\n   */\n  generateFunctionName(requirement) {\n    const words = requirement.toLowerCase().split(' ');\n    const actionWords = words.filter((word) =>\n      [\n        'provide',\n        'handle',\n        'ensure',\n        'validate',\n        'process',\n        'manage',\n        'create',\n        'update',\n        'delete',\n      ].includes(word),\n    );\n    const objectWords = words.filter((word) =>\n      [\n        'api',\n        'data',\n        'user',\n        'system',\n        'request',\n        'response',\n        'authentication',\n        'authorization',\n      ].includes(word),\n    );\n\n    const action = actionWords[0] || 'execute';\n    const object = objectWords[0] || 'operation';\n\n    return `${action}_${object}`;\n  }\n\n  /**\n   * Generate pseudocode steps\n   */\n  generatePseudocodeSteps(requirement) {\n    const steps = [];\n    const reqLower = requirement.toLowerCase();\n\n    // Common patterns\n    steps.push(`BEGIN ${this.generateFunctionName(requirement)}`);\n\n    if (reqLower.includes('validate')) {\n      steps.push('  VALIDATE input_parameters');\n      steps.push('  IF validation_fails THEN');\n      steps.push('    RETURN error_response');\n      steps.push('  END IF');\n    }\n\n    if (reqLower.includes('authenticate')) {\n      steps.push('  AUTHENTICATE user_credentials');\n      steps.push('  IF authentication_fails THEN');\n      steps.push('    RETURN unauthorized_error');\n      steps.push('  END IF');\n    }\n\n    if (reqLower.includes('data')) {\n      steps.push('  CONNECT to_database');\n      steps.push('  BEGIN transaction');\n      steps.push('  EXECUTE data_operation');\n      steps.push('  IF operation_successful THEN');\n      steps.push('    COMMIT transaction');\n      steps.push('  ELSE');\n      steps.push('    ROLLBACK transaction');\n      steps.push('  END IF');\n    }\n\n    if (reqLower.includes('api')) {\n      steps.push('  PARSE request_parameters');\n      steps.push('  VALIDATE request_format');\n      steps.push('  EXECUTE business_logic');\n      steps.push('  FORMAT response_data');\n      steps.push('  RETURN api_response');\n    }\n\n    // Generic steps if no specific patterns found\n    if (steps.length === 1) {\n      steps.push('  INITIALIZE operation_context');\n      steps.push('  EXECUTE primary_operation');\n      steps.push('  HANDLE potential_errors');\n      steps.push('  RETURN operation_result');\n    }\n\n    steps.push(`END ${this.generateFunctionName(requirement)}`);\n\n    return steps;\n  }\n\n  /**\n   * Estimate complexity\n   */\n  estimateComplexity(steps) {\n    const decisionSteps = steps.filter(\n      (step) => step.includes('IF') || step.includes('WHILE') || step.includes('FOR'),\n    );\n    const operationSteps = steps.filter(\n      (step) => step.includes('EXECUTE') || step.includes('CALL'),\n    );\n\n    return {\n      cyclomatic: decisionSteps.length + 1,\n      operations: operationSteps.length,\n      lines: steps.length,\n      level: decisionSteps.length > 5 ? 'high' : decisionSteps.length > 2 ? 'medium' : 'low',\n    };\n  }\n\n  /**\n   * Define algorithms\n   */\n  async defineAlgorithms(specification) {\n    const algorithms = [];\n    const requirements = specification.requirements || [];\n\n    // Search for algorithmic requirements\n    for (const requirement of requirements) {\n      const reqLower = requirement.toLowerCase();\n\n      if (\n        reqLower.includes('sort') ||\n        reqLower.includes('search') ||\n        reqLower.includes('optimize')\n      ) {\n        algorithms.push({\n          name: 'Search and Sort Algorithm',\n          purpose: 'Efficient data retrieval and ordering',\n          complexity: 'O(n log n)',\n          approach: 'Quick sort with binary search optimization',\n        });\n      }\n\n      if (reqLower.includes('cache') || reqLower.includes('performance')) {\n        algorithms.push({\n          name: 'Caching Algorithm',\n          purpose: 'Improve response time through intelligent caching',\n          complexity: 'O(1) average case',\n          approach: 'LRU cache with time-based expiration',\n        });\n      }\n\n      if (reqLower.includes('validate') || reqLower.includes('check')) {\n        algorithms.push({\n          name: 'Validation Algorithm',\n          purpose: 'Ensure data integrity and format compliance',\n          complexity: 'O(n)',\n          approach: 'Rule-based validation with early termination',\n        });\n      }\n    }\n\n    // Default algorithms for common patterns\n    if (algorithms.length === 0) {\n      algorithms.push({\n        name: 'Sequential Processing Algorithm',\n        purpose: 'Process operations in defined sequence',\n        complexity: 'O(n)',\n        approach: 'Linear processing with error handling',\n      });\n    }\n\n    return algorithms;\n  }\n\n  /**\n   * Define data structures\n   */\n  async defineDataStructures(specification) {\n    const dataStructures = [];\n    const requirements = specification.requirements || [];\n\n    // Analyze requirements for data structure needs\n    for (const requirement of requirements) {\n      const reqLower = requirement.toLowerCase();\n\n      if (\n        reqLower.includes('list') ||\n        reqLower.includes('array') ||\n        reqLower.includes('collection')\n      ) {\n        dataStructures.push({\n          name: 'Dynamic Array',\n          purpose: 'Store variable-length collections',\n          operations: ['add', 'remove', 'search', 'iterate'],\n          complexity: { access: 'O(1)', insertion: 'O(n)', deletion: 'O(n)' },\n        });\n      }\n\n      if (reqLower.includes('map') || reqLower.includes('dictionary') || reqLower.includes('key')) {\n        dataStructures.push({\n          name: 'Hash Map',\n          purpose: 'Key-value pair storage with fast lookup',\n          operations: ['put', 'get', 'remove', 'contains'],\n          complexity: { access: 'O(1)', insertion: 'O(1)', deletion: 'O(1)' },\n        });\n      }\n\n      if (reqLower.includes('queue') || reqLower.includes('fifo') || reqLower.includes('buffer')) {\n        dataStructures.push({\n          name: 'Queue',\n          purpose: 'First-in-first-out data processing',\n          operations: ['enqueue', 'dequeue', 'peek', 'isEmpty'],\n          complexity: { access: 'O(n)', insertion: 'O(1)', deletion: 'O(1)' },\n        });\n      }\n\n      if (reqLower.includes('stack') || reqLower.includes('lifo') || reqLower.includes('undo')) {\n        dataStructures.push({\n          name: 'Stack',\n          purpose: 'Last-in-first-out operations',\n          operations: ['push', 'pop', 'peek', 'isEmpty'],\n          complexity: { access: 'O(n)', insertion: 'O(1)', deletion: 'O(1)' },\n        });\n      }\n    }\n\n    // Default data structures\n    if (dataStructures.length === 0) {\n      dataStructures.push({\n        name: 'Object',\n        purpose: 'Basic data encapsulation',\n        operations: ['create', 'read', 'update', 'delete'],\n        complexity: { access: 'O(1)', insertion: 'O(1)', deletion: 'O(1)' },\n      });\n    }\n\n    return dataStructures;\n  }\n\n  /**\n   * Define interfaces\n   */\n  async defineInterfaces(specification) {\n    const interfaces = [];\n    const requirements = specification.requirements || [];\n\n    // API interfaces\n    if (requirements.some((req) => req.toLowerCase().includes('api'))) {\n      interfaces.push({\n        name: 'APIInterface',\n        type: 'REST API',\n        methods: [\n          {\n            name: 'GET',\n            purpose: 'Retrieve data',\n            parameters: ['id', 'filters'],\n            returns: 'data object',\n          },\n          {\n            name: 'POST',\n            purpose: 'Create new resource',\n            parameters: ['data'],\n            returns: 'created resource',\n          },\n          {\n            name: 'PUT',\n            purpose: 'Update existing resource',\n            parameters: ['id', 'data'],\n            returns: 'updated resource',\n          },\n          {\n            name: 'DELETE',\n            purpose: 'Remove resource',\n            parameters: ['id'],\n            returns: 'success status',\n          },\n        ],\n      });\n    }\n\n    // Database interfaces\n    if (requirements.some((req) => req.toLowerCase().includes('data'))) {\n      interfaces.push({\n        name: 'DatabaseInterface',\n        type: 'Data Access Layer',\n        methods: [\n          {\n            name: 'connect',\n            purpose: 'Establish connection',\n            parameters: ['config'],\n            returns: 'connection object',\n          },\n          {\n            name: 'query',\n            purpose: 'Execute query',\n            parameters: ['sql', 'params'],\n            returns: 'result set',\n          },\n          {\n            name: 'transaction',\n            purpose: 'Execute transaction',\n            parameters: ['operations'],\n            returns: 'transaction result',\n          },\n          { name: 'disconnect', purpose: 'Close connection', parameters: [], returns: 'void' },\n        ],\n      });\n    }\n\n    // Service interfaces\n    interfaces.push({\n      name: 'ServiceInterface',\n      type: 'Business Logic Layer',\n      methods: [\n        {\n          name: 'initialize',\n          purpose: 'Initialize service',\n          parameters: ['config'],\n          returns: 'service instance',\n        },\n        {\n          name: 'execute',\n          purpose: 'Execute main operation',\n          parameters: ['request'],\n          returns: 'response',\n        },\n        {\n          name: 'validate',\n          purpose: 'Validate input',\n          parameters: ['data'],\n          returns: 'validation result',\n        },\n        { name: 'cleanup', purpose: 'Clean up resources', parameters: [], returns: 'void' },\n      ],\n    });\n\n    return interfaces;\n  }\n\n  /**\n   * Map logic flow\n   */\n  async mapLogicFlow(specification) {\n    const logicFlow = [];\n    const requirements = specification.requirements || [];\n\n    // Main flow\n    logicFlow.push({\n      step: 1,\n      name: 'Initialization',\n      description: 'System startup and configuration',\n      inputs: ['configuration', 'environment variables'],\n      outputs: ['initialized system'],\n      conditions: ['valid configuration', 'available resources'],\n    });\n\n    // Process each requirement as a flow step\n    for (const [index, requirement] of requirements.entries()) {\n      logicFlow.push({\n        step: index + 2,\n        name: this.generateFunctionName(requirement),\n        description: requirement,\n        inputs: this.identifyInputs(requirement),\n        outputs: this.identifyOutputs(requirement),\n        conditions: this.identifyConditions(requirement),\n      });\n    }\n\n    // Final step\n    logicFlow.push({\n      step: requirements.length + 2,\n      name: 'Finalization',\n      description: 'Cleanup and result reporting',\n      inputs: ['execution results'],\n      outputs: ['final status', 'cleanup confirmation'],\n      conditions: ['all operations completed'],\n    });\n\n    return logicFlow;\n  }\n\n  /**\n   * Identify inputs for requirement\n   */\n  identifyInputs(requirement) {\n    const inputs = [];\n    const reqLower = requirement.toLowerCase();\n\n    if (reqLower.includes('api')) inputs.push('HTTP request', 'request parameters');\n    if (reqLower.includes('data')) inputs.push('data payload', 'database connection');\n    if (reqLower.includes('user')) inputs.push('user credentials', 'user input');\n    if (reqLower.includes('validate')) inputs.push('validation rules', 'input data');\n    if (reqLower.includes('authenticate')) inputs.push('authentication credentials');\n\n    return inputs.length > 0 ? inputs : ['system input'];\n  }\n\n  /**\n   * Identify outputs for requirement\n   */\n  identifyOutputs(requirement) {\n    const outputs = [];\n    const reqLower = requirement.toLowerCase();\n\n    if (reqLower.includes('api')) outputs.push('HTTP response', 'status code');\n    if (reqLower.includes('data')) outputs.push('processed data', 'transaction result');\n    if (reqLower.includes('validate')) outputs.push('validation result', 'error messages');\n    if (reqLower.includes('authenticate')) outputs.push('authentication token', 'user session');\n\n    return outputs.length > 0 ? outputs : ['operation result'];\n  }\n\n  /**\n   * Identify conditions for requirement\n   */\n  identifyConditions(requirement) {\n    const conditions = [];\n    const reqLower = requirement.toLowerCase();\n\n    if (reqLower.includes('validate')) conditions.push('data is valid', 'rules are satisfied');\n    if (reqLower.includes('authenticate')) conditions.push('credentials are valid', 'user exists');\n    if (reqLower.includes('data'))\n      conditions.push('database is available', 'data integrity maintained');\n    if (reqLower.includes('api'))\n      conditions.push('request format is valid', 'service is available');\n\n    return conditions.length > 0 ? conditions : ['preconditions met'];\n  }\n\n  /**\n   * Identify edge cases\n   */\n  async identifyEdgeCases(specification) {\n    const edgeCases = [];\n    const requirements = specification.requirements || [];\n\n    // Common edge cases\n    edgeCases.push({\n      case: 'Empty or null input',\n      description: 'System receives no input or null values',\n      handling: 'Validate inputs and return appropriate error messages',\n      severity: 'high',\n    });\n\n    edgeCases.push({\n      case: 'Network connectivity issues',\n      description: 'External services are unavailable',\n      handling: 'Implement retry logic with exponential backoff',\n      severity: 'medium',\n    });\n\n    edgeCases.push({\n      case: 'Concurrent access',\n      description: 'Multiple users access same resources simultaneously',\n      handling: 'Implement proper locking and transaction management',\n      severity: 'high',\n    });\n\n    edgeCases.push({\n      case: 'Resource exhaustion',\n      description: 'System runs out of memory or disk space',\n      handling: 'Monitor resources and implement graceful degradation',\n      severity: 'high',\n    });\n\n    // Requirement-specific edge cases\n    for (const requirement of requirements) {\n      const reqLower = requirement.toLowerCase();\n\n      if (reqLower.includes('api')) {\n        edgeCases.push({\n          case: 'API rate limiting',\n          description: 'Too many requests from single client',\n          handling: 'Implement rate limiting and throttling',\n          severity: 'medium',\n        });\n      }\n\n      if (reqLower.includes('data')) {\n        edgeCases.push({\n          case: 'Data corruption',\n          description: 'Database contains invalid or corrupted data',\n          handling: 'Implement data validation and recovery procedures',\n          severity: 'high',\n        });\n      }\n\n      if (reqLower.includes('authenticate')) {\n        edgeCases.push({\n          case: 'Authentication timeout',\n          description: 'User session expires during operation',\n          handling: 'Implement session refresh and re-authentication',\n          severity: 'medium',\n        });\n      }\n    }\n\n    return edgeCases;\n  }\n\n  /**\n   * Analyze complexity\n   */\n  async analyzeComplexity(pseudocode) {\n    const analysis = {\n      overall: 'medium',\n      functions: {},\n      recommendations: [],\n    };\n\n    let totalComplexity = 0;\n    let functionCount = 0;\n\n    for (const func of pseudocode) {\n      if (func.complexity) {\n        analysis.functions[func.function] = func.complexity;\n        totalComplexity += func.complexity.cyclomatic;\n        functionCount++;\n      }\n    }\n\n    const averageComplexity = functionCount > 0 ? totalComplexity / functionCount : 1;\n\n    if (averageComplexity > 10) {\n      analysis.overall = 'high';\n      analysis.recommendations.push('Consider breaking down complex functions');\n    } else if (averageComplexity > 5) {\n      analysis.overall = 'medium';\n      analysis.recommendations.push('Monitor function complexity during implementation');\n    } else {\n      analysis.overall = 'low';\n      analysis.recommendations.push('Complexity is manageable');\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Identify dependencies\n   */\n  async identifyDependencies(specification) {\n    const dependencies = [];\n    const requirements = specification.requirements || [];\n\n    // Analyze requirements for dependencies\n    for (const requirement of requirements) {\n      const reqLower = requirement.toLowerCase();\n\n      if (reqLower.includes('api')) {\n        dependencies.push('HTTP client library');\n        dependencies.push('JSON parsing library');\n        dependencies.push('Authentication middleware');\n      }\n\n      if (reqLower.includes('data')) {\n        dependencies.push('Database driver');\n        dependencies.push('ORM or query builder');\n        dependencies.push('Connection pooling');\n      }\n\n      if (reqLower.includes('validate')) {\n        dependencies.push('Validation library');\n        dependencies.push('Schema definition');\n      }\n\n      if (reqLower.includes('test')) {\n        dependencies.push('Testing framework');\n        dependencies.push('Mocking library');\n      }\n    }\n\n    // Remove duplicates\n    return [...new Set(dependencies)];\n  }\n\n  /**\n   * Generate pseudocode document\n   */\n  async generatePseudocodeDocument(result) {\n    const document = `# ${this.taskDescription} - Pseudocode\n\n## Flow Diagram\n**Type**: ${result.flowDiagram.type}\n**Entry**: ${result.flowDiagram.entry}\n**Exit**: ${result.flowDiagram.exit}\n\n### Nodes\n${result.flowDiagram.nodes.map((node) => `- **${node.id}** (${node.type}): ${node.label}`).join('\\n')}\n\n### Edges\n${result.flowDiagram.edges.map((edge) => `- ${edge.from} → ${edge.to} ${edge.label ? `(${edge.label})` : ''}`).join('\\n')}\n\n## Pseudocode\n\n${result.pseudocode\n  .map(\n    (func, index) => `\n### ${index + 1}. ${func.function}\n**Description**: ${func.description}\n**Complexity**: ${func.complexity ? `Cyclomatic: ${func.complexity.cyclomatic}, Lines: ${func.complexity.lines}` : 'N/A'}\n\n\\`\\`\\`\n${func.steps.join('\\n')}\n\\`\\`\\`\n`,\n  )\n  .join('\\n')}\n\n## Algorithms\n\n${result.algorithms\n  .map(\n    (algo, index) => `\n### ${index + 1}. ${algo.name}\n**Purpose**: ${algo.purpose}\n**Complexity**: ${algo.complexity}\n**Approach**: ${algo.approach}\n`,\n  )\n  .join('\\n')}\n\n## Data Structures\n\n${result.dataStructures\n  .map(\n    (ds, index) => `\n### ${index + 1}. ${ds.name}\n**Purpose**: ${ds.purpose}\n**Operations**: ${ds.operations.join(', ')}\n**Complexity**: Access: ${ds.complexity.access}, Insertion: ${ds.complexity.insertion}, Deletion: ${ds.complexity.deletion}\n`,\n  )\n  .join('\\n')}\n\n## Interfaces\n\n${result.interfaces\n  .map(\n    (iface, index) => `\n### ${index + 1}. ${iface.name}\n**Type**: ${iface.type}\n\n${iface.methods\n  .map(\n    (method) => `\n#### ${method.name}\n- **Purpose**: ${method.purpose}\n- **Parameters**: ${method.parameters.join(', ')}\n- **Returns**: ${method.returns}\n`,\n  )\n  .join('\\n')}\n`,\n  )\n  .join('\\n')}\n\n## Logic Flow\n\n${result.logicFlow\n  .map(\n    (step) => `\n### Step ${step.step}: ${step.name}\n**Description**: ${step.description}\n**Inputs**: ${step.inputs.join(', ')}\n**Outputs**: ${step.outputs.join(', ')}\n**Conditions**: ${step.conditions.join(', ')}\n`,\n  )\n  .join('\\n')}\n\n## Edge Cases\n\n${result.edgeCases\n  .map(\n    (edge, index) => `\n### ${index + 1}. ${edge.case}\n**Description**: ${edge.description}\n**Handling**: ${edge.handling}\n**Severity**: ${edge.severity}\n`,\n  )\n  .join('\\n')}\n\n## Complexity Analysis\n**Overall Complexity**: ${result.complexityAnalysis.overall}\n\n### Function Complexity\n${Object.entries(result.complexityAnalysis.functions || {})\n  .map(\n    ([func, complexity]) => `\n- **${func}**: Cyclomatic: ${complexity.cyclomatic}, Lines: ${complexity.lines}, Level: ${complexity.level}\n`,\n  )\n  .join('\\n')}\n\n### Recommendations\n${result.complexityAnalysis.recommendations.map((rec) => `- ${rec}`).join('\\n')}\n\n## Dependencies\n${result.dependencies.map((dep, index) => `${index + 1}. ${dep}`).join('\\n')}\n`;\n\n    // Save document\n    await this.saveArtifact('pseudocode.md', document);\n    return document;\n  }\n}\n\nexport default SparcPseudocode;\n"],"names":["SparcPhase","SparcPseudocode","taskDescription","options","flowDiagram","pseudocode","algorithms","dataStructures","interfaces","execute","console","log","initializePhase","result","logicFlow","edgeCases","complexityAnalysis","dependencies","specification","retrieveFromMemory","Error","generateFlowDiagram","generatePseudocode","defineAlgorithms","defineDataStructures","defineInterfaces","mapLogicFlow","identifyEdgeCases","analyzeComplexity","identifyDependencies","generatePseudocodeDocument","storeInMemory","error","message","title","nodes","edges","entry","exit","type","requirements","hasApiRequirements","some","req","toLowerCase","includes","hasUiRequirements","hasDataRequirements","generateApiFlowNodes","generateUiFlowNodes","generateDataFlowNodes","generateGeneralFlowNodes","generateFlowEdges","id","label","i","length","current","next","push","from","to","condition","errorNode","find","n","function","description","steps","index","requirement","entries","functionName","generateFunctionName","generatePseudocodeSteps","complexity","estimateComplexity","words","split","actionWords","filter","word","objectWords","action","object","reqLower","decisionSteps","step","operationSteps","cyclomatic","operations","lines","level","name","purpose","approach","access","insertion","deletion","methods","parameters","returns","inputs","outputs","conditions","identifyInputs","identifyOutputs","identifyConditions","case","handling","severity","analysis","overall","functions","recommendations","totalComplexity","functionCount","func","averageComplexity","Set","document","map","node","join","edge","algo","ds","iface","method","Object","rec","dep","saveArtifact"],"mappings":"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"}