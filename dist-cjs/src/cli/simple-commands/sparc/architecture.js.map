{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc/architecture.js"],"sourcesContent":["// SPARC Architecture Phase\n// Design system architecture and component planning\n\nimport { SparcPhase } from './phase-base.js';\n\nexport class SparcArchitecture extends SparcPhase {\n  constructor(taskDescription, options) {\n    super('architecture', taskDescription, options);\n    this.components = [];\n    this.designPatterns = [];\n    this.systemDesign = null;\n    this.dataModel = null;\n    this.apiDesign = null;\n  }\n\n  /**\n   * Execute architecture phase\n   */\n  async execute() {\n    console.log('🏗️ Starting Architecture Phase');\n\n    await this.initializePhase();\n\n    const result = {\n      systemDesign: null,\n      components: [],\n      designPatterns: [],\n      dataModel: null,\n      apiDesign: null,\n      deploymentArchitecture: null,\n      securityArchitecture: null,\n      scalabilityPlan: null,\n      integrationPoints: [],\n      qualityAttributes: {},\n      architecturalDecisions: [],\n      riskAssessment: [],\n    };\n\n    try {\n      // Load previous phases\n      const specification = await this.retrieveFromMemory('specification_complete');\n      const pseudocode = await this.retrieveFromMemory('pseudocode_complete');\n\n      if (!specification || !pseudocode) {\n        throw new Error('Specification and Pseudocode phases must be completed first');\n      }\n\n      // Design system architecture\n      result.systemDesign = await this.designSystemArchitecture(specification, pseudocode);\n\n      // Define components\n      result.components = await this.defineComponents(specification, pseudocode);\n\n      // Select design patterns\n      result.designPatterns = await this.selectDesignPatterns(specification, pseudocode);\n\n      // Design data model\n      result.dataModel = await this.designDataModel(specification);\n\n      // Design API structure\n      result.apiDesign = await this.designApiStructure(specification);\n\n      // Plan deployment architecture\n      result.deploymentArchitecture = await this.planDeploymentArchitecture(specification);\n\n      // Design security architecture\n      result.securityArchitecture = await this.designSecurityArchitecture(specification);\n\n      // Plan scalability\n      result.scalabilityPlan = await this.planScalability(specification);\n\n      // Identify integration points\n      result.integrationPoints = await this.identifyIntegrationPoints(specification);\n\n      // Define quality attributes\n      result.qualityAttributes = await this.defineQualityAttributes(specification);\n\n      // Document architectural decisions\n      result.architecturalDecisions = await this.documentArchitecturalDecisions(result);\n\n      // Assess risks\n      result.riskAssessment = await this.assessArchitecturalRisks(result);\n\n      // Generate architecture document\n      await this.generateArchitectureDocument(result);\n\n      // Store in memory\n      await this.storeInMemory('architecture_complete', result);\n\n      console.log('✅ Architecture phase completed');\n      return result;\n    } catch (error) {\n      console.error('❌ Architecture phase failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Design system architecture\n   */\n  async designSystemArchitecture(specification, pseudocode) {\n    const architecture = {\n      style: 'layered',\n      layers: [],\n      components: [],\n      dataFlow: [],\n      controlFlow: [],\n      boundaries: [],\n    };\n\n    // Determine architecture style based on requirements\n    const requirements = specification.requirements || [];\n    const hasApiRequirements = requirements.some((req) => req.toLowerCase().includes('api'));\n    const hasUiRequirements = requirements.some((req) => req.toLowerCase().includes('ui'));\n    const hasDataRequirements = requirements.some((req) => req.toLowerCase().includes('data'));\n    const hasDistributedRequirements = requirements.some(\n      (req) =>\n        req.toLowerCase().includes('distributed') || req.toLowerCase().includes('microservice'),\n    );\n\n    if (hasDistributedRequirements) {\n      architecture.style = 'microservices';\n      architecture.layers = [\n        { name: 'API Gateway', responsibility: 'Request routing and authentication' },\n        { name: 'Service Layer', responsibility: 'Business logic microservices' },\n        { name: 'Data Layer', responsibility: 'Database and storage services' },\n        { name: 'Infrastructure Layer', responsibility: 'Monitoring and deployment' },\n      ];\n    } else if (hasApiRequirements && hasUiRequirements) {\n      architecture.style = 'mvc';\n      architecture.layers = [\n        { name: 'Presentation Layer', responsibility: 'User interface and user experience' },\n        { name: 'Controller Layer', responsibility: 'Request handling and routing' },\n        { name: 'Service Layer', responsibility: 'Business logic and processing' },\n        { name: 'Data Access Layer', responsibility: 'Database operations' },\n        { name: 'Infrastructure Layer', responsibility: 'Cross-cutting concerns' },\n      ];\n    } else if (hasApiRequirements) {\n      architecture.style = 'layered';\n      architecture.layers = [\n        { name: 'API Layer', responsibility: 'External interface and contracts' },\n        { name: 'Business Layer', responsibility: 'Core business logic' },\n        { name: 'Data Layer', responsibility: 'Data persistence and retrieval' },\n        { name: 'Infrastructure Layer', responsibility: 'Logging, monitoring, security' },\n      ];\n    } else {\n      architecture.style = 'modular';\n      architecture.layers = [\n        { name: 'Interface Layer', responsibility: 'External interactions' },\n        { name: 'Processing Layer', responsibility: 'Core processing logic' },\n        { name: 'Storage Layer', responsibility: 'Data management' },\n        { name: 'Utility Layer', responsibility: 'Common utilities and helpers' },\n      ];\n    }\n\n    // Define data flow\n    architecture.dataFlow = this.defineDataFlow(architecture.layers);\n\n    // Define control flow\n    architecture.controlFlow = this.defineControlFlow(architecture.layers);\n\n    // Define boundaries\n    architecture.boundaries = this.defineBoundaries(architecture.layers);\n\n    return architecture;\n  }\n\n  /**\n   * Define data flow\n   */\n  defineDataFlow(layers) {\n    const dataFlow = [];\n\n    for (let i = 0; i < layers.length - 1; i++) {\n      dataFlow.push({\n        from: layers[i].name,\n        to: layers[i + 1].name,\n        direction: 'downstream',\n        dataType: 'processed data',\n      });\n\n      dataFlow.push({\n        from: layers[i + 1].name,\n        to: layers[i].name,\n        direction: 'upstream',\n        dataType: 'results/responses',\n      });\n    }\n\n    return dataFlow;\n  }\n\n  /**\n   * Define control flow\n   */\n  defineControlFlow(layers) {\n    return layers.map((layer, index) => ({\n      layer: layer.name,\n      order: index + 1,\n      triggers: index === 0 ? ['external request'] : [`${layers[index - 1].name} completion`],\n      actions: ['process', 'validate', 'transform', 'forward'],\n      outcomes:\n        index === layers.length - 1 ? ['final response'] : [`trigger ${layers[index + 1].name}`],\n    }));\n  }\n\n  /**\n   * Define boundaries\n   */\n  defineBoundaries(layers) {\n    return layers.map((layer) => ({\n      layer: layer.name,\n      type: 'logical',\n      encapsulation: 'interface-based',\n      dependencies: 'unidirectional',\n      contracts: 'well-defined APIs',\n    }));\n  }\n\n  /**\n   * Define components\n   */\n  async defineComponents(specification, pseudocode) {\n    const components = [];\n    const requirements = specification.requirements || [];\n    const functions = pseudocode.pseudocode || [];\n\n    // Create components based on functional requirements\n    for (const requirement of requirements) {\n      const component = this.createComponentFromRequirement(requirement);\n      components.push(component);\n    }\n\n    // Create components based on pseudocode functions\n    for (const func of functions) {\n      const component = this.createComponentFromFunction(func);\n      components.push(component);\n    }\n\n    // Add infrastructure components\n    components.push(...this.createInfrastructureComponents());\n\n    // Remove duplicates and merge similar components\n    const uniqueComponents = this.mergeComponents(components);\n\n    return uniqueComponents;\n  }\n\n  /**\n   * Create component from requirement\n   */\n  createComponentFromRequirement(requirement) {\n    const reqLower = requirement.toLowerCase();\n\n    if (reqLower.includes('api')) {\n      return {\n        name: 'APIController',\n        type: 'controller',\n        responsibility: 'Handle API requests and responses',\n        interfaces: ['HTTP', 'REST'],\n        dependencies: ['AuthenticationService', 'ValidationService'],\n        patterns: ['Controller', 'Facade'],\n        complexity: 'medium',\n      };\n    } else if (reqLower.includes('authenticate')) {\n      return {\n        name: 'AuthenticationService',\n        type: 'service',\n        responsibility: 'Manage user authentication and authorization',\n        interfaces: ['IAuthenticationService'],\n        dependencies: ['UserRepository', 'TokenManager'],\n        patterns: ['Service', 'Strategy'],\n        complexity: 'high',\n      };\n    } else if (reqLower.includes('data')) {\n      return {\n        name: 'DataRepository',\n        type: 'repository',\n        responsibility: 'Manage data persistence and retrieval',\n        interfaces: ['IRepository'],\n        dependencies: ['DatabaseConnection', 'DataMapper'],\n        patterns: ['Repository', 'Unit of Work'],\n        complexity: 'medium',\n      };\n    } else if (reqLower.includes('validate')) {\n      return {\n        name: 'ValidationService',\n        type: 'service',\n        responsibility: 'Validate input data and business rules',\n        interfaces: ['IValidationService'],\n        dependencies: ['ValidationRules', 'ErrorHandler'],\n        patterns: ['Strategy', 'Chain of Responsibility'],\n        complexity: 'low',\n      };\n    } else {\n      return {\n        name: 'GenericService',\n        type: 'service',\n        responsibility: 'Handle general business logic',\n        interfaces: ['IService'],\n        dependencies: ['CommonUtilities'],\n        patterns: ['Service'],\n        complexity: 'low',\n      };\n    }\n  }\n\n  /**\n   * Create component from function\n   */\n  createComponentFromFunction(func) {\n    return {\n      name: this.toPascalCase(func.function) + 'Component',\n      type: 'component',\n      responsibility: func.description,\n      interfaces: [`I${this.toPascalCase(func.function)}`],\n      dependencies: this.extractDependencies(func.steps),\n      patterns: this.inferPatterns(func.steps),\n      complexity: func.complexity ? func.complexity.level : 'medium',\n    };\n  }\n\n  /**\n   * Create infrastructure components\n   */\n  createInfrastructureComponents() {\n    return [\n      {\n        name: 'Logger',\n        type: 'utility',\n        responsibility: 'Centralized logging and monitoring',\n        interfaces: ['ILogger'],\n        dependencies: ['LoggingProvider'],\n        patterns: ['Singleton', 'Factory'],\n        complexity: 'low',\n      },\n      {\n        name: 'ConfigurationManager',\n        type: 'utility',\n        responsibility: 'Manage application configuration',\n        interfaces: ['IConfigurationManager'],\n        dependencies: ['EnvironmentProvider'],\n        patterns: ['Singleton'],\n        complexity: 'low',\n      },\n      {\n        name: 'ErrorHandler',\n        type: 'utility',\n        responsibility: 'Global error handling and reporting',\n        interfaces: ['IErrorHandler'],\n        dependencies: ['Logger'],\n        patterns: ['Strategy', 'Chain of Responsibility'],\n        complexity: 'medium',\n      },\n      {\n        name: 'CacheManager',\n        type: 'utility',\n        responsibility: 'Caching and performance optimization',\n        interfaces: ['ICacheManager'],\n        dependencies: ['CacheProvider'],\n        patterns: ['Proxy', 'Decorator'],\n        complexity: 'medium',\n      },\n    ];\n  }\n\n  /**\n   * Merge similar components\n   */\n  mergeComponents(components) {\n    const componentMap = new Map();\n\n    for (const component of components) {\n      const key = component.name;\n\n      if (componentMap.has(key)) {\n        const existing = componentMap.get(key);\n        // Merge dependencies and interfaces\n        existing.dependencies = [...new Set([...existing.dependencies, ...component.dependencies])];\n        existing.interfaces = [...new Set([...existing.interfaces, ...component.interfaces])];\n        existing.patterns = [...new Set([...existing.patterns, ...component.patterns])];\n      } else {\n        componentMap.set(key, component);\n      }\n    }\n\n    return Array.from(componentMap.values());\n  }\n\n  /**\n   * Convert to PascalCase\n   */\n  toPascalCase(str) {\n    return str\n      .replace(/_([a-z])/g, (match, letter) => letter.toUpperCase())\n      .replace(/^([a-z])/, (match, letter) => letter.toUpperCase());\n  }\n\n  /**\n   * Extract dependencies from steps\n   */\n  extractDependencies(steps) {\n    const dependencies = [];\n\n    for (const step of steps) {\n      if (step.includes('database')) dependencies.push('DatabaseConnection');\n      if (step.includes('authenticate')) dependencies.push('AuthenticationService');\n      if (step.includes('validate')) dependencies.push('ValidationService');\n      if (step.includes('log')) dependencies.push('Logger');\n      if (step.includes('cache')) dependencies.push('CacheManager');\n    }\n\n    return [...new Set(dependencies)];\n  }\n\n  /**\n   * Infer patterns from steps\n   */\n  inferPatterns(steps) {\n    const patterns = [];\n\n    if (steps.some((step) => step.includes('CALL'))) patterns.push('Command');\n    if (steps.some((step) => step.includes('IF'))) patterns.push('Strategy');\n    if (steps.some((step) => step.includes('VALIDATE'))) patterns.push('Chain of Responsibility');\n    if (steps.some((step) => step.includes('RETURN'))) patterns.push('Factory');\n\n    return patterns.length > 0 ? patterns : ['Service'];\n  }\n\n  /**\n   * Select design patterns\n   */\n  async selectDesignPatterns(specification, pseudocode) {\n    const patterns = [];\n    const requirements = specification.requirements || [];\n\n    // Creational patterns\n    if (\n      requirements.some(\n        (req) => req.toLowerCase().includes('create') || req.toLowerCase().includes('instantiate'),\n      )\n    ) {\n      patterns.push({\n        name: 'Factory Pattern',\n        type: 'creational',\n        purpose: 'Create objects without specifying exact classes',\n        applicability: 'Object creation with varying configurations',\n        implementation: 'Factory classes with creation methods',\n        benefits: ['Loose coupling', 'Easy extensibility', 'Centralized creation logic'],\n      });\n    }\n\n    // Structural patterns\n    if (\n      requirements.some(\n        (req) => req.toLowerCase().includes('interface') || req.toLowerCase().includes('adapt'),\n      )\n    ) {\n      patterns.push({\n        name: 'Adapter Pattern',\n        type: 'structural',\n        purpose: 'Allow incompatible interfaces to work together',\n        applicability: 'Integration with external systems',\n        implementation: 'Wrapper classes implementing target interfaces',\n        benefits: ['Code reuse', 'Separation of concerns', 'Easy integration'],\n      });\n    }\n\n    // Behavioral patterns\n    if (\n      requirements.some(\n        (req) => req.toLowerCase().includes('strategy') || req.toLowerCase().includes('algorithm'),\n      )\n    ) {\n      patterns.push({\n        name: 'Strategy Pattern',\n        type: 'behavioral',\n        purpose: 'Define family of algorithms and make them interchangeable',\n        applicability: 'Multiple ways to perform operations',\n        implementation: 'Strategy interfaces with concrete implementations',\n        benefits: ['Flexibility', 'Open/closed principle', 'Runtime selection'],\n      });\n    }\n\n    // Common patterns for all systems\n    patterns.push({\n      name: 'Repository Pattern',\n      type: 'architectural',\n      purpose: 'Separate data access logic from business logic',\n      applicability: 'Data persistence operations',\n      implementation: 'Repository interfaces with concrete implementations',\n      benefits: ['Testability', 'Loose coupling', 'Centralized data access'],\n    });\n\n    patterns.push({\n      name: 'Dependency Injection',\n      type: 'architectural',\n      purpose: 'Manage dependencies between objects',\n      applicability: 'All components requiring external dependencies',\n      implementation: 'Constructor injection with DI container',\n      benefits: ['Testability', 'Loose coupling', 'Flexibility'],\n    });\n\n    patterns.push({\n      name: 'Observer Pattern',\n      type: 'behavioral',\n      purpose: 'Notify multiple objects about state changes',\n      applicability: 'Event-driven communication',\n      implementation: 'Subject-observer relationships with event notifications',\n      benefits: ['Loose coupling', 'Dynamic relationships', 'Broadcast communication'],\n    });\n\n    return patterns;\n  }\n\n  /**\n   * Design data model\n   */\n  async designDataModel(specification) {\n    const dataModel = {\n      entities: [],\n      relationships: [],\n      constraints: [],\n      indexes: [],\n      views: [],\n    };\n\n    // Extract entities from requirements\n    const requirements = specification.requirements || [];\n    const entities = this.extractEntities(requirements);\n\n    for (const entityName of entities) {\n      const entity = {\n        name: entityName,\n        attributes: this.generateAttributes(entityName),\n        primaryKey: 'id',\n        foreignKeys: [],\n        constraints: this.generateConstraints(entityName),\n        indexes: this.generateIndexes(entityName),\n      };\n\n      dataModel.entities.push(entity);\n    }\n\n    // Define relationships\n    dataModel.relationships = this.defineRelationships(dataModel.entities);\n\n    // Define global constraints\n    dataModel.constraints = this.defineGlobalConstraints();\n\n    // Define indexes\n    dataModel.indexes = this.defineGlobalIndexes(dataModel.entities);\n\n    // Define views\n    dataModel.views = this.defineViews(dataModel.entities);\n\n    return dataModel;\n  }\n\n  /**\n   * Extract entities from requirements\n   */\n  extractEntities(requirements) {\n    const entities = new Set();\n\n    for (const requirement of requirements) {\n      const words = requirement.split(' ');\n\n      for (const word of words) {\n        // Look for nouns that could be entities\n        if (\n          word.length > 3 &&\n          !['system', 'must', 'should', 'will', 'data', 'user', 'interface'].includes(\n            word.toLowerCase(),\n          )\n        ) {\n          if (word[0] === word[0].toUpperCase()) {\n            entities.add(word);\n          }\n        }\n      }\n    }\n\n    // Add default entities if none found\n    if (entities.size === 0) {\n      entities.add('User');\n      entities.add('Session');\n      entities.add('Configuration');\n    }\n\n    return Array.from(entities);\n  }\n\n  /**\n   * Generate attributes for entity\n   */\n  generateAttributes(entityName) {\n    const commonAttributes = [\n      { name: 'id', type: 'UUID', nullable: false, unique: true },\n      { name: 'created_at', type: 'TIMESTAMP', nullable: false, default: 'CURRENT_TIMESTAMP' },\n      { name: 'updated_at', type: 'TIMESTAMP', nullable: false, default: 'CURRENT_TIMESTAMP' },\n      { name: 'version', type: 'INTEGER', nullable: false, default: '1' },\n    ];\n\n    const specificAttributes = [];\n    const entityLower = entityName.toLowerCase();\n\n    if (entityLower.includes('user')) {\n      specificAttributes.push(\n        { name: 'username', type: 'VARCHAR(50)', nullable: false, unique: true },\n        { name: 'email', type: 'VARCHAR(255)', nullable: false, unique: true },\n        { name: 'password_hash', type: 'VARCHAR(255)', nullable: false },\n        { name: 'is_active', type: 'BOOLEAN', nullable: false, default: 'true' },\n        { name: 'last_login', type: 'TIMESTAMP', nullable: true },\n      );\n    } else if (entityLower.includes('session')) {\n      specificAttributes.push(\n        { name: 'user_id', type: 'UUID', nullable: false },\n        { name: 'token', type: 'VARCHAR(255)', nullable: false, unique: true },\n        { name: 'expires_at', type: 'TIMESTAMP', nullable: false },\n        { name: 'ip_address', type: 'INET', nullable: true },\n        { name: 'user_agent', type: 'TEXT', nullable: true },\n      );\n    } else {\n      specificAttributes.push(\n        { name: 'name', type: 'VARCHAR(255)', nullable: false },\n        { name: 'description', type: 'TEXT', nullable: true },\n        { name: 'status', type: 'VARCHAR(50)', nullable: false, default: \"'active'\" },\n      );\n    }\n\n    return [...commonAttributes, ...specificAttributes];\n  }\n\n  /**\n   * Generate constraints for entity\n   */\n  generateConstraints(entityName) {\n    const constraints = [\n      { name: `${entityName.toLowerCase()}_id_pk`, type: 'PRIMARY KEY', column: 'id' },\n      {\n        name: `${entityName.toLowerCase()}_version_positive`,\n        type: 'CHECK',\n        condition: 'version > 0',\n      },\n      {\n        name: `${entityName.toLowerCase()}_created_before_updated`,\n        type: 'CHECK',\n        condition: 'created_at <= updated_at',\n      },\n    ];\n\n    const entityLower = entityName.toLowerCase();\n\n    if (entityLower.includes('user')) {\n      constraints.push(\n        {\n          name: 'user_email_format',\n          type: 'CHECK',\n          condition: \"email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$'\",\n        },\n        { name: 'user_username_length', type: 'CHECK', condition: 'length(username) >= 3' },\n      );\n    }\n\n    return constraints;\n  }\n\n  /**\n   * Generate indexes for entity\n   */\n  generateIndexes(entityName) {\n    const indexes = [\n      {\n        name: `idx_${entityName.toLowerCase()}_created_at`,\n        type: 'BTREE',\n        columns: ['created_at'],\n      },\n      {\n        name: `idx_${entityName.toLowerCase()}_updated_at`,\n        type: 'BTREE',\n        columns: ['updated_at'],\n      },\n    ];\n\n    const entityLower = entityName.toLowerCase();\n\n    if (entityLower.includes('user')) {\n      indexes.push(\n        { name: 'idx_user_email', type: 'BTREE', columns: ['email'] },\n        { name: 'idx_user_username', type: 'BTREE', columns: ['username'] },\n        { name: 'idx_user_active', type: 'BTREE', columns: ['is_active'] },\n      );\n    }\n\n    return indexes;\n  }\n\n  /**\n   * Define relationships between entities\n   */\n  defineRelationships(entities) {\n    const relationships = [];\n\n    // Look for entities that could have relationships\n    const userEntity = entities.find((e) => e.name.toLowerCase().includes('user'));\n    const sessionEntity = entities.find((e) => e.name.toLowerCase().includes('session'));\n\n    if (userEntity && sessionEntity) {\n      relationships.push({\n        name: 'user_sessions',\n        type: 'one-to-many',\n        parent: userEntity.name,\n        child: sessionEntity.name,\n        parentKey: 'id',\n        childKey: 'user_id',\n        onDelete: 'CASCADE',\n        onUpdate: 'RESTRICT',\n      });\n    }\n\n    return relationships;\n  }\n\n  /**\n   * Define global constraints\n   */\n  defineGlobalConstraints() {\n    return [\n      { name: 'no_future_created_at', type: 'CHECK', condition: 'created_at <= CURRENT_TIMESTAMP' },\n      { name: 'no_future_updated_at', type: 'CHECK', condition: 'updated_at <= CURRENT_TIMESTAMP' },\n    ];\n  }\n\n  /**\n   * Define global indexes\n   */\n  defineGlobalIndexes(entities) {\n    const indexes = [];\n\n    // Add composite indexes for common query patterns\n    for (const entity of entities) {\n      indexes.push({\n        name: `idx_${entity.name.toLowerCase()}_status_created`,\n        type: 'BTREE',\n        table: entity.name,\n        columns: ['status', 'created_at'],\n      });\n    }\n\n    return indexes;\n  }\n\n  /**\n   * Define views\n   */\n  defineViews(entities) {\n    const views = [];\n\n    // Create a view for active entities\n    for (const entity of entities) {\n      if (entity.attributes.some((attr) => attr.name === 'is_active' || attr.name === 'status')) {\n        views.push({\n          name: `active_${entity.name.toLowerCase()}s`,\n          definition: `SELECT * FROM ${entity.name} WHERE ${entity.attributes.some((attr) => attr.name === 'is_active') ? 'is_active = true' : \"status = 'active'\"}`,\n          purpose: `Show only active ${entity.name.toLowerCase()} records`,\n        });\n      }\n    }\n\n    return views;\n  }\n\n  /**\n   * Design API structure\n   */\n  async designApiStructure(specification) {\n    const apiDesign = {\n      version: 'v1',\n      baseUrl: '/api/v1',\n      authentication: 'Bearer Token',\n      endpoints: [],\n      schemas: [],\n      errorHandling: {},\n      rateLimiting: {},\n      versioning: {},\n    };\n\n    // Generate endpoints based on requirements\n    const requirements = specification.requirements || [];\n\n    for (const requirement of requirements) {\n      if (requirement.toLowerCase().includes('api')) {\n        const endpoints = this.generateEndpoints(requirement);\n        apiDesign.endpoints.push(...endpoints);\n      }\n    }\n\n    // Generate schemas\n    apiDesign.schemas = this.generateApiSchemas(apiDesign.endpoints);\n\n    // Define error handling\n    apiDesign.errorHandling = this.defineApiErrorHandling();\n\n    // Define rate limiting\n    apiDesign.rateLimiting = this.defineApiRateLimiting();\n\n    // Define versioning strategy\n    apiDesign.versioning = this.defineApiVersioning();\n\n    return apiDesign;\n  }\n\n  /**\n   * Generate endpoints from requirement\n   */\n  generateEndpoints(requirement) {\n    const endpoints = [];\n\n    // Basic CRUD endpoints\n    endpoints.push(\n      {\n        path: '/resources',\n        method: 'GET',\n        summary: 'List all resources',\n        parameters: [\n          { name: 'page', type: 'integer', description: 'Page number' },\n          { name: 'limit', type: 'integer', description: 'Items per page' },\n          { name: 'sort', type: 'string', description: 'Sort field' },\n        ],\n        responses: {\n          200: { description: 'Success', schema: 'ResourceList' },\n          400: { description: 'Bad Request', schema: 'Error' },\n          401: { description: 'Unauthorized', schema: 'Error' },\n        },\n      },\n      {\n        path: '/resources/{id}',\n        method: 'GET',\n        summary: 'Get resource by ID',\n        parameters: [{ name: 'id', type: 'string', description: 'Resource ID', required: true }],\n        responses: {\n          200: { description: 'Success', schema: 'Resource' },\n          404: { description: 'Not Found', schema: 'Error' },\n          401: { description: 'Unauthorized', schema: 'Error' },\n        },\n      },\n      {\n        path: '/resources',\n        method: 'POST',\n        summary: 'Create new resource',\n        requestBody: { schema: 'CreateResourceRequest' },\n        responses: {\n          201: { description: 'Created', schema: 'Resource' },\n          400: { description: 'Bad Request', schema: 'Error' },\n          401: { description: 'Unauthorized', schema: 'Error' },\n        },\n      },\n      {\n        path: '/resources/{id}',\n        method: 'PUT',\n        summary: 'Update resource',\n        parameters: [{ name: 'id', type: 'string', description: 'Resource ID', required: true }],\n        requestBody: { schema: 'UpdateResourceRequest' },\n        responses: {\n          200: { description: 'Updated', schema: 'Resource' },\n          404: { description: 'Not Found', schema: 'Error' },\n          400: { description: 'Bad Request', schema: 'Error' },\n          401: { description: 'Unauthorized', schema: 'Error' },\n        },\n      },\n      {\n        path: '/resources/{id}',\n        method: 'DELETE',\n        summary: 'Delete resource',\n        parameters: [{ name: 'id', type: 'string', description: 'Resource ID', required: true }],\n        responses: {\n          204: { description: 'Deleted' },\n          404: { description: 'Not Found', schema: 'Error' },\n          401: { description: 'Unauthorized', schema: 'Error' },\n        },\n      },\n    );\n\n    return endpoints;\n  }\n\n  /**\n   * Generate API schemas\n   */\n  generateApiSchemas(endpoints) {\n    const schemas = [];\n\n    // Basic resource schema\n    schemas.push({\n      name: 'Resource',\n      type: 'object',\n      properties: {\n        id: { type: 'string', format: 'uuid' },\n        name: { type: 'string' },\n        description: { type: 'string' },\n        status: { type: 'string', enum: ['active', 'inactive'] },\n        created_at: { type: 'string', format: 'date-time' },\n        updated_at: { type: 'string', format: 'date-time' },\n      },\n      required: ['id', 'name', 'status'],\n    });\n\n    // Resource list schema\n    schemas.push({\n      name: 'ResourceList',\n      type: 'object',\n      properties: {\n        data: { type: 'array', items: { $ref: '#/schemas/Resource' } },\n        pagination: {\n          type: 'object',\n          properties: {\n            page: { type: 'integer' },\n            limit: { type: 'integer' },\n            total: { type: 'integer' },\n            pages: { type: 'integer' },\n          },\n        },\n      },\n    });\n\n    // Error schema\n    schemas.push({\n      name: 'Error',\n      type: 'object',\n      properties: {\n        error: { type: 'string' },\n        message: { type: 'string' },\n        details: { type: 'array', items: { type: 'string' } },\n        timestamp: { type: 'string', format: 'date-time' },\n      },\n      required: ['error', 'message'],\n    });\n\n    return schemas;\n  }\n\n  /**\n   * Define API error handling\n   */\n  defineApiErrorHandling() {\n    return {\n      strategy: 'Consistent error responses with proper HTTP status codes',\n      errorCodes: {\n        400: 'Bad Request - Invalid input data',\n        401: 'Unauthorized - Authentication required',\n        403: 'Forbidden - Insufficient permissions',\n        404: 'Not Found - Resource not found',\n        409: 'Conflict - Resource already exists',\n        422: 'Unprocessable Entity - Validation errors',\n        429: 'Too Many Requests - Rate limit exceeded',\n        500: 'Internal Server Error - Server error',\n        503: 'Service Unavailable - Service temporarily unavailable',\n      },\n      errorFormat: {\n        error: 'Error type',\n        message: 'Human-readable error message',\n        details: 'Array of specific error details',\n        timestamp: 'ISO 8601 timestamp',\n      },\n      logging: 'All errors logged with request ID and stack trace',\n    };\n  }\n\n  /**\n   * Define API rate limiting\n   */\n  defineApiRateLimiting() {\n    return {\n      strategy: 'Token bucket algorithm with per-user and per-IP limits',\n      limits: {\n        authenticated: { requests: 1000, window: '1 hour' },\n        anonymous: { requests: 100, window: '1 hour' },\n        burst: { requests: 10, window: '1 minute' },\n      },\n      headers: {\n        'X-RateLimit-Limit': 'Request limit for current window',\n        'X-RateLimit-Remaining': 'Remaining requests in current window',\n        'X-RateLimit-Reset': 'Unix timestamp when limit resets',\n      },\n      handling: 'Return 429 status with retry-after header',\n    };\n  }\n\n  /**\n   * Define API versioning\n   */\n  defineApiVersioning() {\n    return {\n      strategy: 'URL path versioning with backward compatibility',\n      format: '/api/v{major}',\n      lifecycle: {\n        development: 'Active development with breaking changes',\n        stable: 'Stable API with backward compatibility',\n        deprecated: 'Deprecated with migration guide',\n        retired: 'No longer supported',\n      },\n      migration: 'Gradual migration with parallel support periods',\n    };\n  }\n\n  /**\n   * Plan deployment architecture\n   */\n  async planDeploymentArchitecture(specification) {\n    const deployment = {\n      strategy: 'containerized',\n      environments: [],\n      infrastructure: {},\n      monitoring: {},\n      security: {},\n      scalability: {},\n    };\n\n    // Define environments\n    deployment.environments = [\n      {\n        name: 'development',\n        purpose: 'Development and testing',\n        resources: 'Single node with shared resources',\n        database: 'SQLite or embedded database',\n        monitoring: 'Basic logging',\n      },\n      {\n        name: 'staging',\n        purpose: 'Pre-production testing',\n        resources: 'Production-like environment with reduced capacity',\n        database: 'Managed database service',\n        monitoring: 'Full monitoring stack',\n      },\n      {\n        name: 'production',\n        purpose: 'Live application serving users',\n        resources: 'Multiple nodes with load balancing',\n        database: 'High-availability managed database',\n        monitoring: 'Comprehensive monitoring and alerting',\n      },\n    ];\n\n    // Define infrastructure\n    deployment.infrastructure = {\n      platform: 'Container orchestration (Kubernetes/Docker Swarm)',\n      compute: 'Auto-scaling container instances',\n      storage: 'Persistent volumes with backup',\n      networking: 'Load balancer with SSL termination',\n      dns: 'Managed DNS with health checks',\n    };\n\n    // Define monitoring\n    deployment.monitoring = {\n      metrics: 'Application and infrastructure metrics',\n      logging: 'Centralized logging with log aggregation',\n      tracing: 'Distributed tracing for request flow',\n      alerting: 'Multi-channel alerting for critical issues',\n      dashboards: 'Real-time dashboards for system health',\n    };\n\n    // Define security\n    deployment.security = {\n      secrets: 'Encrypted secrets management',\n      network: 'Network policies and firewall rules',\n      access: 'Role-based access control',\n      scanning: 'Container and dependency vulnerability scanning',\n      compliance: 'Security compliance monitoring',\n    };\n\n    // Define scalability\n    deployment.scalability = {\n      horizontal: 'Auto-scaling based on CPU/memory/requests',\n      vertical: 'Resource limits and requests optimization',\n      database: 'Database scaling with read replicas',\n      caching: 'Multi-layer caching strategy',\n      cdn: 'Content delivery network for static assets',\n    };\n\n    return deployment;\n  }\n\n  /**\n   * Design security architecture\n   */\n  async designSecurityArchitecture(specification) {\n    const security = {\n      authentication: {},\n      authorization: {},\n      dataProtection: {},\n      networkSecurity: {},\n      monitoring: {},\n      compliance: {},\n    };\n\n    // Authentication design\n    security.authentication = {\n      mechanism: 'JWT tokens with refresh token rotation',\n      providers: ['Local credentials', 'OAuth2/OpenID Connect'],\n      session: 'Stateless with secure token storage',\n      mfa: 'Multi-factor authentication for sensitive operations',\n      passwordPolicy: 'Strong password requirements with complexity rules',\n    };\n\n    // Authorization design\n    security.authorization = {\n      model: 'Role-based access control (RBAC)',\n      permissions: 'Fine-grained permissions with resource-level access',\n      policies: 'Attribute-based access control for complex rules',\n      delegation: 'Secure delegation with time-limited tokens',\n      auditing: 'Complete audit trail of access decisions',\n    };\n\n    // Data protection design\n    security.dataProtection = {\n      encryption: {\n        atRest: 'AES-256 encryption for stored data',\n        inTransit: 'TLS 1.3 for all network communication',\n        keys: 'Hardware security module or managed key service',\n      },\n      privacy: {\n        pii: 'Personal information identification and protection',\n        anonymization: 'Data anonymization for analytics',\n        retention: 'Data retention policies with automatic deletion',\n      },\n      backup: {\n        encryption: 'Encrypted backups with separate key management',\n        testing: 'Regular backup restoration testing',\n        offsite: 'Geographically distributed backup storage',\n      },\n    };\n\n    // Network security design\n    security.networkSecurity = {\n      firewall: 'Web application firewall with DDoS protection',\n      segmentation: 'Network segmentation with micro-segmentation',\n      monitoring: 'Network traffic monitoring and analysis',\n      vpn: 'VPN access for administrative operations',\n      certificates: 'Automated certificate management and renewal',\n    };\n\n    // Security monitoring design\n    security.monitoring = {\n      siem: 'Security information and event management',\n      ids: 'Intrusion detection and prevention systems',\n      behavior: 'User and entity behavior analytics',\n      threat: 'Threat intelligence integration',\n      incident: 'Automated incident response workflows',\n    };\n\n    // Compliance design\n    security.compliance = {\n      frameworks: ['GDPR', 'SOC 2', 'ISO 27001'],\n      auditing: 'Regular security audits and penetration testing',\n      documentation: 'Security policies and procedures documentation',\n      training: 'Security awareness training for all personnel',\n      reporting: 'Compliance reporting and evidence collection',\n    };\n\n    return security;\n  }\n\n  /**\n   * Plan scalability\n   */\n  async planScalability(specification) {\n    const scalability = {\n      horizontalScaling: {},\n      verticalScaling: {},\n      dataScaling: {},\n      performanceOptimization: {},\n      monitoring: {},\n    };\n\n    // Horizontal scaling plan\n    scalability.horizontalScaling = {\n      strategy: 'Auto-scaling based on demand metrics',\n      triggers: ['CPU utilization > 70%', 'Memory utilization > 80%', 'Request queue length > 10'],\n      limits: { minimum: 2, maximum: 20, scaleUpRate: 2, scaleDownRate: 1 },\n      loadBalancing: 'Round-robin with health checks',\n      sessionAffinity: 'Stateless design with external session storage',\n    };\n\n    // Vertical scaling plan\n    scalability.verticalScaling = {\n      strategy: 'Resource optimization based on usage patterns',\n      monitoring: 'Continuous resource utilization monitoring',\n      recommendations: 'Automated resource recommendation engine',\n      limits: 'Resource limits to prevent resource exhaustion',\n      optimization: 'Container resource optimization',\n    };\n\n    // Data scaling plan\n    scalability.dataScaling = {\n      database: {\n        readReplicas: 'Read replicas for read-heavy workloads',\n        sharding: 'Database sharding for large datasets',\n        caching: 'Multi-layer caching with Redis/Memcached',\n        indexing: 'Optimized indexing strategies',\n      },\n      storage: {\n        tiering: 'Storage tiering based on access patterns',\n        compression: 'Data compression for storage efficiency',\n        archiving: 'Automatic archiving of old data',\n        partitioning: 'Data partitioning for improved performance',\n      },\n    };\n\n    // Performance optimization plan\n    scalability.performanceOptimization = {\n      caching: {\n        application: 'In-memory application caching',\n        database: 'Database query result caching',\n        cdn: 'Content delivery network for static assets',\n        browser: 'Browser caching with appropriate headers',\n      },\n      optimization: {\n        queries: 'Database query optimization',\n        algorithms: 'Algorithm complexity optimization',\n        resources: 'Resource usage optimization',\n        networking: 'Network latency optimization',\n      },\n    };\n\n    // Monitoring plan\n    scalability.monitoring = {\n      metrics: [\n        'Response time and latency',\n        'Throughput and requests per second',\n        'Error rates and success rates',\n        'Resource utilization (CPU, memory, disk)',\n        'Database performance metrics',\n      ],\n      alerting: 'Proactive alerting for performance degradation',\n      capacity: 'Capacity planning based on growth projections',\n      testing: 'Regular performance testing and load testing',\n    };\n\n    return scalability;\n  }\n\n  /**\n   * Identify integration points\n   */\n  async identifyIntegrationPoints(specification) {\n    const integrations = [];\n    const requirements = specification.requirements || [];\n\n    // Analyze requirements for integration needs\n    for (const requirement of requirements) {\n      const reqLower = requirement.toLowerCase();\n\n      if (reqLower.includes('external') || reqLower.includes('third-party')) {\n        integrations.push({\n          name: 'External API Integration',\n          type: 'REST API',\n          purpose: 'Integrate with external services',\n          protocol: 'HTTPS',\n          authentication: 'API Key or OAuth2',\n          dataFormat: 'JSON',\n          errorHandling: 'Retry with exponential backoff',\n          monitoring: 'API health checks and response time monitoring',\n        });\n      }\n\n      if (reqLower.includes('database') || reqLower.includes('data')) {\n        integrations.push({\n          name: 'Database Integration',\n          type: 'Database',\n          purpose: 'Data persistence and retrieval',\n          protocol: 'Database-specific protocol',\n          authentication: 'Connection string with credentials',\n          dataFormat: 'SQL or NoSQL',\n          errorHandling: 'Connection pooling and retry logic',\n          monitoring: 'Database performance and connection monitoring',\n        });\n      }\n\n      if (reqLower.includes('message') || reqLower.includes('event')) {\n        integrations.push({\n          name: 'Message Queue Integration',\n          type: 'Message Queue',\n          purpose: 'Asynchronous communication',\n          protocol: 'AMQP or proprietary',\n          authentication: 'Queue-specific authentication',\n          dataFormat: 'JSON or Binary',\n          errorHandling: 'Dead letter queues and retry policies',\n          monitoring: 'Queue depth and processing time monitoring',\n        });\n      }\n    }\n\n    // Add common integrations\n    integrations.push({\n      name: 'Logging Integration',\n      type: 'Logging Service',\n      purpose: 'Centralized logging and monitoring',\n      protocol: 'HTTP/HTTPS',\n      authentication: 'API Key',\n      dataFormat: 'Structured logs (JSON)',\n      errorHandling: 'Local buffering with batch sending',\n      monitoring: 'Log ingestion and processing monitoring',\n    });\n\n    return integrations;\n  }\n\n  /**\n   * Define quality attributes\n   */\n  async defineQualityAttributes(specification) {\n    return {\n      performance: {\n        responseTime: 'API responses under 200ms for 95th percentile',\n        throughput: 'Handle 1000+ requests per second',\n        scalability: 'Scale horizontally to handle load increases',\n        efficiency: 'Optimize resource usage and minimize waste',\n      },\n      reliability: {\n        availability: '99.9% uptime with planned maintenance windows',\n        faultTolerance: 'Graceful degradation when components fail',\n        recoverability: 'Automatic recovery from transient failures',\n        durability: 'Data persistence with backup and recovery',\n      },\n      security: {\n        confidentiality: 'Protect sensitive data with encryption',\n        integrity: 'Ensure data accuracy and prevent tampering',\n        authentication: 'Verify user identity before access',\n        authorization: 'Control access based on user permissions',\n      },\n      usability: {\n        learnability: 'Intuitive interfaces requiring minimal training',\n        efficiency: 'Allow experienced users to work efficiently',\n        memorability: 'Easy to remember after periods of non-use',\n        errors: 'Minimize user errors and provide clear error messages',\n      },\n      maintainability: {\n        modifiability: 'Easy to modify and extend functionality',\n        testability: 'Comprehensive test coverage and automated testing',\n        reusability: 'Modular design with reusable components',\n        analyzability: 'Clear code structure and documentation',\n      },\n    };\n  }\n\n  /**\n   * Document architectural decisions\n   */\n  async documentArchitecturalDecisions(result) {\n    const decisions = [];\n\n    // Architecture style decision\n    decisions.push({\n      id: 'AD-001',\n      title: `Use ${result.systemDesign.style} Architecture`,\n      status: 'Accepted',\n      context: 'Need to choose appropriate architectural style for the system',\n      decision: `Implement ${result.systemDesign.style} architecture with ${result.systemDesign.layers.length} layers`,\n      consequences: {\n        positive: [\n          'Clear separation of concerns',\n          'Maintainable code structure',\n          'Scalable design',\n        ],\n        negative: ['Potential performance overhead', 'Added complexity for simple operations'],\n      },\n      alternatives: ['Monolithic', 'Microservices', 'Event-driven'],\n      date: new Date().toISOString(),\n    });\n\n    // Design patterns decision\n    decisions.push({\n      id: 'AD-002',\n      title: 'Apply Standard Design Patterns',\n      status: 'Accepted',\n      context: 'Need to ensure consistent and well-understood design patterns',\n      decision: `Implement ${result.designPatterns.length} design patterns including Repository, Factory, and Strategy patterns`,\n      consequences: {\n        positive: [\n          'Improved code maintainability',\n          'Better testability',\n          'Consistent design approach',\n        ],\n        negative: ['Learning curve for developers', 'Potential over-engineering'],\n      },\n      alternatives: ['Ad-hoc design', 'Framework-specific patterns'],\n      date: new Date().toISOString(),\n    });\n\n    // Data model decision\n    decisions.push({\n      id: 'AD-003',\n      title: 'Relational Database Design',\n      status: 'Accepted',\n      context: 'Need to choose appropriate data storage and modeling approach',\n      decision: `Use relational database with ${result.dataModel.entities.length} entities and normalized schema`,\n      consequences: {\n        positive: ['ACID compliance', 'Strong consistency', 'Mature ecosystem'],\n        negative: ['Potential scalability limitations', 'Schema migration complexity'],\n      },\n      alternatives: ['NoSQL database', 'Document database', 'Graph database'],\n      date: new Date().toISOString(),\n    });\n\n    return decisions;\n  }\n\n  /**\n   * Assess architectural risks\n   */\n  async assessArchitecturalRisks(result) {\n    const risks = [];\n\n    // Complexity risk\n    risks.push({\n      id: 'AR-001',\n      category: 'Complexity',\n      description: 'System complexity may lead to maintenance challenges',\n      probability: 'Medium',\n      impact: 'High',\n      riskLevel: 'High',\n      mitigation: [\n        'Implement comprehensive documentation',\n        'Provide developer training',\n        'Establish coding standards',\n        'Regular code reviews',\n      ],\n      monitoring: 'Code complexity metrics and maintainability index',\n    });\n\n    // Performance risk\n    risks.push({\n      id: 'AR-002',\n      category: 'Performance',\n      description: 'Layered architecture may introduce performance overhead',\n      probability: 'Low',\n      impact: 'Medium',\n      riskLevel: 'Medium',\n      mitigation: [\n        'Performance testing and profiling',\n        'Caching strategies',\n        'Database optimization',\n        'Load balancing',\n      ],\n      monitoring: 'Response time and throughput monitoring',\n    });\n\n    // Security risk\n    risks.push({\n      id: 'AR-003',\n      category: 'Security',\n      description: 'Multiple integration points increase attack surface',\n      probability: 'Medium',\n      impact: 'High',\n      riskLevel: 'High',\n      mitigation: [\n        'Security architecture review',\n        'Regular security testing',\n        'Input validation and sanitization',\n        'Secure communication protocols',\n      ],\n      monitoring: 'Security event monitoring and alerting',\n    });\n\n    // Scalability risk\n    risks.push({\n      id: 'AR-004',\n      category: 'Scalability',\n      description: 'Database may become bottleneck under high load',\n      probability: 'Medium',\n      impact: 'High',\n      riskLevel: 'High',\n      mitigation: [\n        'Database optimization',\n        'Read replicas and caching',\n        'Connection pooling',\n        'Horizontal scaling strategies',\n      ],\n      monitoring: 'Database performance and connection monitoring',\n    });\n\n    return risks;\n  }\n\n  /**\n   * Generate architecture document\n   */\n  async generateArchitectureDocument(result) {\n    const document = `# ${this.taskDescription} - Architecture Design\n\n## System Architecture\n\n### Architecture Style\n**Style**: ${result.systemDesign.style}\n**Layers**: ${result.systemDesign.layers.length}\n\n${result.systemDesign.layers\n  .map(\n    (layer, index) => `\n#### ${index + 1}. ${layer.name}\n**Responsibility**: ${layer.responsibility}\n`,\n  )\n  .join('\\n')}\n\n### Data Flow\n${result.systemDesign.dataFlow.map((flow) => `- ${flow.from} → ${flow.to} (${flow.direction}): ${flow.dataType}`).join('\\n')}\n\n### Control Flow\n${result.systemDesign.controlFlow\n  .map(\n    (flow) => `\n#### ${flow.layer}\n- **Order**: ${flow.order}\n- **Triggers**: ${flow.triggers.join(', ')}\n- **Actions**: ${flow.actions.join(', ')}\n- **Outcomes**: ${flow.outcomes.join(', ')}\n`,\n  )\n  .join('\\n')}\n\n## Components\n\n${result.components\n  .map(\n    (component, index) => `\n### ${index + 1}. ${component.name}\n**Type**: ${component.type}\n**Responsibility**: ${component.responsibility}\n**Interfaces**: ${component.interfaces.join(', ')}\n**Dependencies**: ${component.dependencies.join(', ')}\n**Patterns**: ${component.patterns.join(', ')}\n**Complexity**: ${component.complexity}\n`,\n  )\n  .join('\\n')}\n\n## Design Patterns\n\n${result.designPatterns\n  .map(\n    (pattern, index) => `\n### ${index + 1}. ${pattern.name}\n**Type**: ${pattern.type}\n**Purpose**: ${pattern.purpose}\n**Applicability**: ${pattern.applicability}\n**Implementation**: ${pattern.implementation}\n**Benefits**: ${pattern.benefits.join(', ')}\n`,\n  )\n  .join('\\n')}\n\n## Data Model\n\n### Entities\n${result.dataModel.entities\n  .map(\n    (entity, index) => `\n#### ${index + 1}. ${entity.name}\n**Primary Key**: ${entity.primaryKey}\n**Attributes**:\n${entity.attributes.map((attr) => `- ${attr.name}: ${attr.type}${attr.nullable ? '' : ' NOT NULL'}${attr.unique ? ' UNIQUE' : ''}${attr.default ? ` DEFAULT ${attr.default}` : ''}`).join('\\n')}\n\n**Constraints**:\n${entity.constraints.map((constraint) => `- ${constraint.name}: ${constraint.type}${constraint.condition ? ` (${constraint.condition})` : ''}`).join('\\n')}\n\n**Indexes**:\n${entity.indexes.map((index) => `- ${index.name}: ${index.type} (${index.columns.join(', ')})`).join('\\n')}\n`,\n  )\n  .join('\\n')}\n\n### Relationships\n${result.dataModel.relationships\n  .map(\n    (rel, index) => `\n#### ${index + 1}. ${rel.name}\n**Type**: ${rel.type}\n**Parent**: ${rel.parent} (${rel.parentKey})\n**Child**: ${rel.child} (${rel.childKey})\n**On Delete**: ${rel.onDelete}\n**On Update**: ${rel.onUpdate}\n`,\n  )\n  .join('\\n')}\n\n## API Design\n\n### General Information\n**Version**: ${result.apiDesign.version}\n**Base URL**: ${result.apiDesign.baseUrl}\n**Authentication**: ${result.apiDesign.authentication}\n\n### Endpoints\n${result.apiDesign.endpoints\n  .map(\n    (endpoint, index) => `\n#### ${index + 1}. ${endpoint.method} ${endpoint.path}\n**Summary**: ${endpoint.summary}\n**Parameters**: ${endpoint.parameters ? endpoint.parameters.map((p) => `${p.name} (${p.type})`).join(', ') : 'None'}\n**Request Body**: ${endpoint.requestBody ? endpoint.requestBody.schema : 'None'}\n**Responses**: ${Object.entries(endpoint.responses)\n      .map(([code, resp]) => `${code}: ${resp.description}`)\n      .join(', ')}\n`,\n  )\n  .join('\\n')}\n\n### Schemas\n${result.apiDesign.schemas\n  .map(\n    (schema, index) => `\n#### ${index + 1}. ${schema.name}\n**Type**: ${schema.type}\n**Properties**:\n${Object.entries(schema.properties)\n  .map(\n    ([name, prop]) =>\n      `- ${name}: ${prop.type}${prop.format ? ` (${prop.format})` : ''}${prop.enum ? ` [${prop.enum.join(', ')}]` : ''}`,\n  )\n  .join('\\n')}\n**Required**: ${schema.required ? schema.required.join(', ') : 'None'}\n`,\n  )\n  .join('\\n')}\n\n## Deployment Architecture\n\n### Environments\n${result.deploymentArchitecture.environments\n  .map(\n    (env, index) => `\n#### ${index + 1}. ${env.name}\n**Purpose**: ${env.purpose}\n**Resources**: ${env.resources}\n**Database**: ${env.database}\n**Monitoring**: ${env.monitoring}\n`,\n  )\n  .join('\\n')}\n\n### Infrastructure\n**Platform**: ${result.deploymentArchitecture.infrastructure.platform}\n**Compute**: ${result.deploymentArchitecture.infrastructure.compute}\n**Storage**: ${result.deploymentArchitecture.infrastructure.storage}\n**Networking**: ${result.deploymentArchitecture.infrastructure.networking}\n**DNS**: ${result.deploymentArchitecture.infrastructure.dns}\n\n## Security Architecture\n\n### Authentication\n**Mechanism**: ${result.securityArchitecture.authentication.mechanism}\n**Providers**: ${result.securityArchitecture.authentication.providers.join(', ')}\n**Session**: ${result.securityArchitecture.authentication.session}\n**MFA**: ${result.securityArchitecture.authentication.mfa}\n\n### Authorization\n**Model**: ${result.securityArchitecture.authorization.model}\n**Permissions**: ${result.securityArchitecture.authorization.permissions}\n**Policies**: ${result.securityArchitecture.authorization.policies}\n\n### Data Protection\n**Encryption at Rest**: ${result.securityArchitecture.dataProtection.encryption.atRest}\n**Encryption in Transit**: ${result.securityArchitecture.dataProtection.encryption.inTransit}\n**Key Management**: ${result.securityArchitecture.dataProtection.encryption.keys}\n\n## Scalability Plan\n\n### Horizontal Scaling\n**Strategy**: ${result.scalabilityPlan.horizontalScaling.strategy}\n**Triggers**: ${result.scalabilityPlan.horizontalScaling.triggers.join(', ')}\n**Limits**: Min: ${result.scalabilityPlan.horizontalScaling.limits.minimum}, Max: ${result.scalabilityPlan.horizontalScaling.limits.maximum}\n\n### Data Scaling\n**Read Replicas**: ${result.scalabilityPlan.dataScaling.database.readReplicas}\n**Sharding**: ${result.scalabilityPlan.dataScaling.database.sharding}\n**Caching**: ${result.scalabilityPlan.dataScaling.database.caching}\n\n## Quality Attributes\n\n${Object.entries(result.qualityAttributes)\n  .map(\n    ([category, attributes]) => `\n### ${category.charAt(0).toUpperCase() + category.slice(1)}\n${Object.entries(attributes)\n  .map(([attr, desc]) => `- **${attr}**: ${desc}`)\n  .join('\\n')}\n`,\n  )\n  .join('\\n')}\n\n## Architectural Decisions\n\n${result.architecturalDecisions\n  .map(\n    (decision, index) => `\n### ${decision.id}: ${decision.title}\n**Status**: ${decision.status}\n**Context**: ${decision.context}\n**Decision**: ${decision.decision}\n**Positive Consequences**: ${decision.consequences.positive.join(', ')}\n**Negative Consequences**: ${decision.consequences.negative.join(', ')}\n**Alternatives Considered**: ${decision.alternatives.join(', ')}\n**Date**: ${decision.date}\n`,\n  )\n  .join('\\n')}\n\n## Risk Assessment\n\n${result.riskAssessment\n  .map(\n    (risk, index) => `\n### ${risk.id}: ${risk.category}\n**Description**: ${risk.description}\n**Probability**: ${risk.probability}\n**Impact**: ${risk.impact}\n**Risk Level**: ${risk.riskLevel}\n**Mitigation**: ${risk.mitigation.join(', ')}\n**Monitoring**: ${risk.monitoring}\n`,\n  )\n  .join('\\n')}\n\n## Integration Points\n\n${result.integrationPoints\n  .map(\n    (integration, index) => `\n### ${index + 1}. ${integration.name}\n**Type**: ${integration.type}\n**Purpose**: ${integration.purpose}\n**Protocol**: ${integration.protocol}\n**Authentication**: ${integration.authentication}\n**Data Format**: ${integration.dataFormat}\n**Error Handling**: ${integration.errorHandling}\n**Monitoring**: ${integration.monitoring}\n`,\n  )\n  .join('\\n')}\n`;\n\n    // Save document\n    await this.saveArtifact('architecture.md', document);\n    return document;\n  }\n}\n\nexport default SparcArchitecture;\n"],"names":["SparcPhase","SparcArchitecture","taskDescription","options","components","designPatterns","systemDesign","dataModel","apiDesign","execute","console","log","initializePhase","result","deploymentArchitecture","securityArchitecture","scalabilityPlan","integrationPoints","qualityAttributes","architecturalDecisions","riskAssessment","specification","retrieveFromMemory","pseudocode","Error","designSystemArchitecture","defineComponents","selectDesignPatterns","designDataModel","designApiStructure","planDeploymentArchitecture","designSecurityArchitecture","planScalability","identifyIntegrationPoints","defineQualityAttributes","documentArchitecturalDecisions","assessArchitecturalRisks","generateArchitectureDocument","storeInMemory","error","message","architecture","style","layers","dataFlow","controlFlow","boundaries","requirements","hasApiRequirements","some","req","toLowerCase","includes","hasUiRequirements","hasDataRequirements","hasDistributedRequirements","name","responsibility","defineDataFlow","defineControlFlow","defineBoundaries","i","length","push","from","to","direction","dataType","map","layer","index","order","triggers","actions","outcomes","type","encapsulation","dependencies","contracts","functions","requirement","component","createComponentFromRequirement","func","createComponentFromFunction","createInfrastructureComponents","uniqueComponents","mergeComponents","reqLower","interfaces","patterns","complexity","toPascalCase","function","description","extractDependencies","steps","inferPatterns","level","componentMap","Map","key","has","existing","get","Set","set","Array","values","str","replace","match","letter","toUpperCase","step","purpose","applicability","implementation","benefits","entities","relationships","constraints","indexes","views","extractEntities","entityName","entity","attributes","generateAttributes","primaryKey","foreignKeys","generateConstraints","generateIndexes","defineRelationships","defineGlobalConstraints","defineGlobalIndexes","defineViews","words","split","word","add","size","commonAttributes","nullable","unique","default","specificAttributes","entityLower","column","condition","columns","userEntity","find","e","sessionEntity","parent","child","parentKey","childKey","onDelete","onUpdate","table","attr","definition","version","baseUrl","authentication","endpoints","schemas","errorHandling","rateLimiting","versioning","generateEndpoints","generateApiSchemas","defineApiErrorHandling","defineApiRateLimiting","defineApiVersioning","path","method","summary","parameters","responses","schema","required","requestBody","properties","id","format","status","enum","created_at","updated_at","data","items","$ref","pagination","page","limit","total","pages","details","timestamp","strategy","errorCodes","errorFormat","logging","limits","authenticated","requests","window","anonymous","burst","headers","handling","lifecycle","development","stable","deprecated","retired","migration","deployment","environments","infrastructure","monitoring","security","scalability","resources","database","platform","compute","storage","networking","dns","metrics","tracing","alerting","dashboards","secrets","network","access","scanning","compliance","horizontal","vertical","caching","cdn","authorization","dataProtection","networkSecurity","mechanism","providers","session","mfa","passwordPolicy","model","permissions","policies","delegation","auditing","encryption","atRest","inTransit","keys","privacy","pii","anonymization","retention","backup","testing","offsite","firewall","segmentation","vpn","certificates","siem","ids","behavior","threat","incident","frameworks","documentation","training","reporting","horizontalScaling","verticalScaling","dataScaling","performanceOptimization","minimum","maximum","scaleUpRate","scaleDownRate","loadBalancing","sessionAffinity","recommendations","optimization","readReplicas","sharding","indexing","tiering","compression","archiving","partitioning","application","browser","queries","algorithms","capacity","integrations","protocol","dataFormat","performance","responseTime","throughput","efficiency","reliability","availability","faultTolerance","recoverability","durability","confidentiality","integrity","usability","learnability","memorability","errors","maintainability","modifiability","testability","reusability","analyzability","decisions","title","context","decision","consequences","positive","negative","alternatives","date","Date","toISOString","risks","category","probability","impact","riskLevel","mitigation","document","join","flow","pattern","constraint","rel","endpoint","p","Object","entries","code","resp","prop","env","charAt","slice","desc","risk","integration","saveArtifact"],"mappings":"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"}