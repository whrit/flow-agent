{"version":3,"sources":["../../../../../src/cli/simple-commands/sparc/commands.js"],"sourcesContent":["// SPARC Command Variations\n// Specialized SPARC commands for different development scenarios\n\nimport { SparcMethodology } from './index.js';\n\n/**\n * SPARC Development Command\n * Full-stack development workflow with TDD\n */\nexport async function sparcDev(taskDescription, options = {}) {\n  console.log('üöÄ SPARC Development Workflow');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-dev',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    autoRemediation: true,\n    mode: 'development',\n    focus: ['specification', 'architecture', 'refinement'],\n    qualityGates: {\n      testCoverage: 85,\n      codeQuality: 80,\n      performance: 200, // ms\n    },\n    tddCycles: true,\n    continuousIntegration: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Development completed');\n    console.log(`üìä Test Coverage: ${result.refinement?.testResults?.coverage?.toFixed(1)}%`);\n    console.log(`üéØ Code Quality: ${result.refinement?.codeQuality?.overall?.toFixed(1)}/100`);\n    console.log(`‚ö° Performance: ${result.refinement?.performance?.responseTime?.average}ms`);\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Development failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC API Command\n * API-focused development with OpenAPI specs\n */\nexport async function sparcApi(taskDescription, options = {}) {\n  console.log('üîå SPARC API Development');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-api',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'api',\n    focus: ['specification', 'architecture', 'refinement'],\n    specializations: {\n      specification: 'api_requirements',\n      architecture: 'api_design',\n      refinement: 'api_testing',\n    },\n    qualityGates: {\n      apiCoverage: 100,\n      responseTime: 100, // ms\n      securityScore: 90,\n    },\n    generateOpenAPI: true,\n    includeAuthentication: true,\n    includeValidation: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC API Development completed');\n    console.log(`üîå API Endpoints: ${result.architecture?.apiDesign?.endpoints?.length || 0}`);\n    console.log(`üîí Security Score: ${result.refinement?.security?.score || 0}/100`);\n    console.log(`üìã OpenAPI Spec: Generated`);\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC API Development failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC UI Command\n * Frontend/UI development with component architecture\n */\nexport async function sparcUi(taskDescription, options = {}) {\n  console.log('üé® SPARC UI Development');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-ui',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'ui',\n    focus: ['specification', 'pseudocode', 'architecture', 'refinement'],\n    specializations: {\n      specification: 'ux_requirements',\n      pseudocode: 'ui_flows',\n      architecture: 'component_design',\n      refinement: 'ui_testing',\n    },\n    qualityGates: {\n      accessibility: 95,\n      performance: 3000, // ms load time\n      responsiveness: 100,\n    },\n    includeAccessibility: true,\n    includeResponsiveDesign: true,\n    includeComponentLibrary: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC UI Development completed');\n    console.log(`üé® Components: ${result.architecture?.components?.length || 0}`);\n    console.log(\n      `‚ôø Accessibility: ${result.refinement?.validation?.usability?.accessibility?.score || 0}%`,\n    );\n    console.log(\n      `üì± Responsive: ${result.refinement?.validation?.compatibility?.devices?.score || 0}%`,\n    );\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC UI Development failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Test Command\n * Test-driven development with comprehensive testing\n */\nexport async function sparcTest(taskDescription, options = {}) {\n  console.log('üß™ SPARC Test-Driven Development');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-test',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'testing',\n    focus: ['specification', 'refinement'],\n    specializations: {\n      specification: 'test_requirements',\n      refinement: 'comprehensive_testing',\n    },\n    qualityGates: {\n      testCoverage: 95,\n      mutationScore: 80,\n      performanceTests: 100,\n    },\n    tddCycles: true,\n    includeUnitTests: true,\n    includeIntegrationTests: true,\n    includeE2ETests: true,\n    includePerformanceTests: true,\n    includeMutationTesting: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Test Development completed');\n    console.log(`üß™ Test Coverage: ${result.refinement?.testResults?.coverage?.toFixed(1)}%`);\n    console.log(`üî¨ Test Types: Unit, Integration, E2E, Performance`);\n    console.log(`‚ö° TDD Cycles: ${result.refinement?.tddCycles?.length || 0}`);\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Test Development failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Refactor Command\n * Code refactoring and optimization\n */\nexport async function sparcRefactor(taskDescription, options = {}) {\n  console.log('üîÑ SPARC Refactoring');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-refactor',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'refactoring',\n    focus: ['architecture', 'refinement'],\n    specializations: {\n      architecture: 'refactoring_design',\n      refinement: 'code_optimization',\n    },\n    qualityGates: {\n      codeQuality: 90,\n      performance: 150, // ms improvement\n      maintainability: 85,\n    },\n    preserveFunctionality: true,\n    incremental: true,\n    safetyFirst: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Refactoring completed');\n    console.log(\n      `üìà Quality Improvement: +${result.refinement?.refactoring?.after?.overall - result.refinement?.refactoring?.before?.overall || 0} points`,\n    );\n    console.log(\n      `‚ö° Performance Gain: ${result.refinement?.optimizations?.length || 0} optimizations applied`,\n    );\n    console.log(\n      `üîß Refactoring Techniques: ${result.refinement?.refactoring?.techniques?.length || 0}`,\n    );\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Refactoring failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Research Command\n * Research and analysis workflow\n */\nexport async function sparcResearch(taskDescription, options = {}) {\n  console.log('üîç SPARC Research & Analysis');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-research',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'research',\n    focus: ['specification', 'pseudocode'],\n    specializations: {\n      specification: 'research_requirements',\n      pseudocode: 'analysis_workflow',\n    },\n    qualityGates: {\n      comprehensiveness: 90,\n      accuracy: 95,\n      relevance: 85,\n    },\n    includeWebSearch: true,\n    includeDataAnalysis: true,\n    includeLiteratureReview: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Research completed');\n    console.log(`üìö Sources Analyzed: ${result.specification?.userStories?.length || 0}`);\n    console.log(`üìä Analysis Workflows: ${result.pseudocode?.algorithms?.length || 0}`);\n    console.log(\n      `üéØ Research Quality: ${result.specification?.requirements?.filter((r) => r.fulfilled)?.length || 0} requirements validated`,\n    );\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Research failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Data Command\n * Data engineering and analytics workflow\n */\nexport async function sparcData(taskDescription, options = {}) {\n  console.log('üìä SPARC Data Engineering');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-data',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'data',\n    focus: ['specification', 'architecture', 'refinement'],\n    specializations: {\n      specification: 'data_requirements',\n      architecture: 'data_architecture',\n      refinement: 'data_validation',\n    },\n    qualityGates: {\n      dataQuality: 95,\n      performance: 1000, // ms query time\n      accuracy: 99,\n    },\n    includeDataModeling: true,\n    includeETL: true,\n    includeValidation: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Data Engineering completed');\n    console.log(`üìä Data Models: ${result.architecture?.dataModel?.entities?.length || 0}`);\n    console.log(`üîÑ ETL Pipelines: ${result.architecture?.integrationPoints?.length || 0}`);\n    console.log(`‚úÖ Data Quality: ${result.refinement?.validation?.score || 0}/100`);\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Data Engineering failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Security Command\n * Security-focused development and auditing\n */\nexport async function sparcSecurity(taskDescription, options = {}) {\n  console.log('üîí SPARC Security Development');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-security',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'security',\n    focus: ['specification', 'architecture', 'refinement'],\n    specializations: {\n      specification: 'security_requirements',\n      architecture: 'security_architecture',\n      refinement: 'security_testing',\n    },\n    qualityGates: {\n      securityScore: 95,\n      vulnerabilities: 0,\n      compliance: 100,\n    },\n    includeSecurityReview: true,\n    includePenetrationTesting: true,\n    includeComplianceCheck: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Security Development completed');\n    console.log(`üîí Security Score: ${result.refinement?.security?.score || 0}/100`);\n    console.log(`üõ°Ô∏è Vulnerabilities: ${result.refinement?.security?.vulnerabilities?.length || 0}`);\n    console.log(\n      `üìã Compliance: ${Object.values(result.refinement?.security?.compliance || {}).filter((c) => c).length}/3 standards`,\n    );\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Security Development failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC DevOps Command\n * DevOps and deployment workflow\n */\nexport async function sparcDevOps(taskDescription, options = {}) {\n  console.log('‚öôÔ∏è SPARC DevOps Workflow');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-devops',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'devops',\n    focus: ['architecture', 'completion'],\n    specializations: {\n      architecture: 'deployment_architecture',\n      completion: 'devops_deployment',\n    },\n    qualityGates: {\n      deployment: 100,\n      monitoring: 100,\n      automation: 90,\n    },\n    includeCI: true,\n    includeCD: true,\n    includeMonitoring: true,\n    includeInfrastructureAsCode: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC DevOps completed');\n    console.log(\n      `üöÄ Deployments: ${result.completion?.deployment?.environments?.length || 0} environments`,\n    );\n    console.log(\n      `üìä Monitoring: ${result.completion?.monitoring?.alerts?.length || 0} alerts configured`,\n    );\n    console.log(\n      `ü§ñ Automation: ${result.completion?.deployment?.successful ? 'Successful' : 'Pending'}`,\n    );\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC DevOps failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * SPARC Performance Command\n * Performance optimization and monitoring\n */\nexport async function sparcPerformance(taskDescription, options = {}) {\n  console.log('‚ö° SPARC Performance Optimization');\n\n  const sparcOptions = {\n    ...options,\n    namespace: options.namespace || 'sparc-performance',\n    swarmEnabled: options.swarm || false,\n    neuralLearning: options.learning !== false,\n    mode: 'performance',\n    focus: ['architecture', 'refinement'],\n    specializations: {\n      architecture: 'performance_architecture',\n      refinement: 'performance_optimization',\n    },\n    qualityGates: {\n      responseTime: 100, // ms\n      throughput: 1000, // req/s\n      resourceUsage: 70, // %\n    },\n    includeLoadTesting: true,\n    includeProfiler: true,\n    includeCaching: true,\n    includeOptimization: true,\n  };\n\n  const sparc = new SparcMethodology(taskDescription, sparcOptions);\n\n  try {\n    const result = await sparc.execute();\n\n    console.log('\\n‚úÖ SPARC Performance Optimization completed');\n    console.log(\n      `‚ö° Response Time: ${result.refinement?.performance?.responseTime?.average || 0}ms`,\n    );\n    console.log(\n      `üöÄ Throughput: ${result.refinement?.performance?.throughput?.requestsPerSecond || 0} req/s`,\n    );\n    console.log(`üìà Optimizations: ${result.refinement?.optimizations?.length || 0} applied`);\n\n    return result;\n  } catch (error) {\n    console.error('‚ùå SPARC Performance Optimization failed:', error.message);\n    throw error;\n  }\n}\n\n/**\n * Command factory for creating SPARC command variations\n */\nexport const sparcCommands = {\n  dev: sparcDev,\n  api: sparcApi,\n  ui: sparcUi,\n  test: sparcTest,\n  refactor: sparcRefactor,\n  research: sparcResearch,\n  data: sparcData,\n  security: sparcSecurity,\n  devops: sparcDevOps,\n  performance: sparcPerformance,\n};\n\n/**\n * Get available SPARC command variations\n */\nexport function getSparcCommands() {\n  return Object.keys(sparcCommands);\n}\n\n/**\n * Execute a SPARC command variation\n */\nexport async function executeSparcCommand(command, taskDescription, options = {}) {\n  if (!sparcCommands[command]) {\n    throw new Error(\n      `Unknown SPARC command: ${command}. Available commands: ${getSparcCommands().join(', ')}`,\n    );\n  }\n\n  return await sparcCommands[command](taskDescription, options);\n}\n\n/**\n * Get help for SPARC command variations\n */\nexport function getSparcCommandHelp(command) {\n  const helpTexts = {\n    dev: 'Full-stack development workflow with TDD and quality gates',\n    api: 'API-focused development with OpenAPI specifications and security',\n    ui: 'Frontend/UI development with component architecture and accessibility',\n    test: 'Test-driven development with comprehensive testing strategies',\n    refactor: 'Code refactoring and optimization while preserving functionality',\n    research: 'Research and analysis workflow with data gathering',\n    data: 'Data engineering and analytics with quality validation',\n    security: 'Security-focused development with auditing and compliance',\n    devops: 'DevOps workflow with CI/CD and infrastructure automation',\n    performance: 'Performance optimization with load testing and monitoring',\n  };\n\n  return helpTexts[command] || 'Unknown command';\n}\n\n/**\n * Show help for all SPARC command variations\n */\nexport function showSparcCommandsHelp() {\n  console.log('üéØ SPARC Command Variations:');\n  console.log();\n\n  for (const [command, helpText] of Object.entries(\n    getSparcCommands().reduce((acc, cmd) => {\n      acc[cmd] = getSparcCommandHelp(cmd);\n      return acc;\n    }, {}),\n  )) {\n    console.log(`  sparc-${command.padEnd(12)} ${helpText}`);\n  }\n\n  console.log();\n  console.log('Usage:');\n  console.log('  claude-flow sparc-<command> \"<task-description>\" [options]');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow sparc-dev \"build user authentication system\"');\n  console.log('  claude-flow sparc-api \"create REST API for e-commerce\" --swarm');\n  console.log('  claude-flow sparc-test \"comprehensive testing for payment module\"');\n  console.log('  claude-flow sparc-security \"security audit for web application\"');\n}\n\nexport default {\n  sparcCommands,\n  getSparcCommands,\n  executeSparcCommand,\n  getSparcCommandHelp,\n  showSparcCommandsHelp,\n};\n"],"names":["SparcMethodology","sparcDev","taskDescription","options","console","log","sparcOptions","namespace","swarmEnabled","swarm","neuralLearning","learning","autoRemediation","mode","focus","qualityGates","testCoverage","codeQuality","performance","tddCycles","continuousIntegration","sparc","result","execute","refinement","testResults","coverage","toFixed","overall","responseTime","average","error","message","sparcApi","specializations","specification","architecture","apiCoverage","securityScore","generateOpenAPI","includeAuthentication","includeValidation","apiDesign","endpoints","length","security","score","sparcUi","pseudocode","accessibility","responsiveness","includeAccessibility","includeResponsiveDesign","includeComponentLibrary","components","validation","usability","compatibility","devices","sparcTest","mutationScore","performanceTests","includeUnitTests","includeIntegrationTests","includeE2ETests","includePerformanceTests","includeMutationTesting","sparcRefactor","maintainability","preserveFunctionality","incremental","safetyFirst","refactoring","after","before","optimizations","techniques","sparcResearch","comprehensiveness","accuracy","relevance","includeWebSearch","includeDataAnalysis","includeLiteratureReview","userStories","algorithms","requirements","filter","r","fulfilled","sparcData","dataQuality","includeDataModeling","includeETL","dataModel","entities","integrationPoints","sparcSecurity","vulnerabilities","compliance","includeSecurityReview","includePenetrationTesting","includeComplianceCheck","Object","values","c","sparcDevOps","completion","deployment","monitoring","automation","includeCI","includeCD","includeMonitoring","includeInfrastructureAsCode","environments","alerts","successful","sparcPerformance","throughput","resourceUsage","includeLoadTesting","includeProfiler","includeCaching","includeOptimization","requestsPerSecond","sparcCommands","dev","api","ui","test","refactor","research","data","devops","getSparcCommands","keys","executeSparcCommand","command","Error","join","getSparcCommandHelp","helpTexts","showSparcCommandsHelp","helpText","entries","reduce","acc","cmd","padEnd"],"mappings":"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"}