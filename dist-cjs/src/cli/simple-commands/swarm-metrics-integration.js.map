{"version":3,"sources":["../../../../src/cli/simple-commands/swarm-metrics-integration.js"],"sourcesContent":["/**\n * Swarm Metrics Integration Fix\n * Resolves task attribution issues between hive-mind and ruv-swarm systems\n */\n\nimport { existsSync } from 'fs';\nimport path from 'path';\nimport Database from 'better-sqlite3';\nimport chalk from 'chalk';\nimport { cwd } from '../node-compat.js';\n\n/**\n * Get metrics from both swarm systems and provide unified view\n */\nexport async function getUnifiedSwarmMetrics() {\n  const results = {\n    hiveMind: await getHiveMindMetrics(),\n    ruvSwarm: await getRuvSwarmMetrics(),\n    integrated: null,\n  };\n\n  // Create integrated view\n  results.integrated = await integrateMetrics(results.hiveMind, results.ruvSwarm);\n\n  return results;\n}\n\n/**\n * Get hive-mind metrics\n */\nasync function getHiveMindMetrics() {\n  const dbPath = path.join(cwd(), '.hive-mind', 'hive.db');\n\n  if (!existsSync(dbPath)) {\n    return { available: false, reason: 'Hive-mind database not found' };\n  }\n\n  try {\n    const db = new Database(dbPath);\n\n    const stats = db\n      .prepare(\n        `\n      SELECT \n        (SELECT COUNT(*) FROM swarms) as total_swarms,\n        (SELECT COUNT(*) FROM agents) as total_agents,\n        (SELECT COUNT(*) FROM tasks) as total_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'completed') as completed_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'in_progress') as in_progress_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks\n    `,\n      )\n      .get();\n\n    const swarmBreakdown = db\n      .prepare(\n        `\n      SELECT \n        s.id,\n        s.name,\n        s.objective,\n        COUNT(t.id) as task_count,\n        SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as completed_count,\n        SUM(CASE WHEN t.status = 'in_progress' THEN 1 ELSE 0 END) as in_progress_count,\n        SUM(CASE WHEN t.status = 'pending' THEN 1 ELSE 0 END) as pending_count\n      FROM swarms s\n      LEFT JOIN tasks t ON s.id = t.swarm_id\n      GROUP BY s.id, s.name, s.objective\n    `,\n      )\n      .all();\n\n    db.close();\n\n    return {\n      available: true,\n      type: 'hive-mind',\n      overall: stats,\n      swarms: swarmBreakdown,\n    };\n  } catch (error) {\n    return {\n      available: false,\n      reason: `Hive-mind database error: ${error.message}`,\n    };\n  }\n}\n\n/**\n * Get ruv-swarm metrics\n */\nasync function getRuvSwarmMetrics() {\n  const dbPath = path.join(cwd(), 'node_modules', 'ruv-swarm', 'data', 'ruv-swarm.db');\n\n  if (!existsSync(dbPath)) {\n    return { available: false, reason: 'ruv-swarm database not found' };\n  }\n\n  try {\n    const db = new Database(dbPath);\n\n    const stats = db\n      .prepare(\n        `\n      SELECT \n        (SELECT COUNT(*) FROM swarms) as total_swarms,\n        (SELECT COUNT(*) FROM agents) as total_agents,\n        (SELECT COUNT(*) FROM tasks) as total_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'completed') as completed_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'in_progress') as in_progress_tasks,\n        (SELECT COUNT(*) FROM tasks WHERE status = 'pending') as pending_tasks\n    `,\n      )\n      .get();\n\n    const swarmBreakdown = db\n      .prepare(\n        `\n      SELECT \n        s.id,\n        s.name,\n        s.topology,\n        s.strategy,\n        COUNT(t.id) as task_count,\n        SUM(CASE WHEN t.status = 'completed' THEN 1 ELSE 0 END) as completed_count,\n        SUM(CASE WHEN t.status = 'in_progress' THEN 1 ELSE 0 END) as in_progress_count,\n        SUM(CASE WHEN t.status = 'pending' THEN 1 ELSE 0 END) as pending_count\n      FROM swarms s\n      LEFT JOIN tasks t ON s.id = t.swarm_id\n      GROUP BY s.id, s.name, s.topology, s.strategy\n    `,\n      )\n      .all();\n\n    db.close();\n\n    return {\n      available: true,\n      type: 'ruv-swarm',\n      overall: stats,\n      swarms: swarmBreakdown,\n    };\n  } catch (error) {\n    return {\n      available: false,\n      reason: `ruv-swarm database error: ${error.message}`,\n    };\n  }\n}\n\n/**\n * Integrate metrics from both systems\n */\nasync function integrateMetrics(hiveMind, ruvSwarm) {\n  const integration = {\n    available: hiveMind.available || ruvSwarm.available,\n    systems: [],\n  };\n\n  if (hiveMind.available) {\n    integration.systems.push(hiveMind);\n  }\n\n  if (ruvSwarm.available) {\n    integration.systems.push(ruvSwarm);\n  }\n\n  // Create combined totals\n  if (integration.systems.length > 0) {\n    integration.combined = {\n      total_swarms: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.total_swarms || 0),\n        0,\n      ),\n      total_agents: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.total_agents || 0),\n        0,\n      ),\n      total_tasks: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.total_tasks || 0),\n        0,\n      ),\n      completed_tasks: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.completed_tasks || 0),\n        0,\n      ),\n      in_progress_tasks: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.in_progress_tasks || 0),\n        0,\n      ),\n      pending_tasks: integration.systems.reduce(\n        (sum, sys) => sum + (sys.overall?.pending_tasks || 0),\n        0,\n      ),\n    };\n\n    integration.combined.success_rate =\n      integration.combined.total_tasks > 0\n        ? ((integration.combined.completed_tasks / integration.combined.total_tasks) * 100).toFixed(\n            1,\n          )\n        : '0';\n  }\n\n  return integration;\n}\n\n/**\n * Display unified metrics with clear system breakdown\n */\nexport async function showUnifiedMetrics() {\n  console.log(chalk.bold('\\nüîÑ Unified Swarm Metrics Analysis\\n'));\n\n  const metrics = await getUnifiedSwarmMetrics();\n\n  // Show combined overview\n  if (metrics.integrated.available) {\n    console.log(chalk.cyan('Combined System Overview:'));\n    const combined = metrics.integrated.combined;\n    console.log(`  Total Swarms: ${combined.total_swarms}`);\n    console.log(`  Total Agents: ${combined.total_agents}`);\n    console.log(`  Total Tasks: ${combined.total_tasks}`);\n    console.log(`  Completed: ${chalk.green(combined.completed_tasks)}`);\n    console.log(`  In Progress: ${chalk.yellow(combined.in_progress_tasks)}`);\n    console.log(`  Pending: ${chalk.gray(combined.pending_tasks)}`);\n    console.log(`  Success Rate: ${combined.success_rate}%`);\n    console.log();\n  }\n\n  // Show breakdown by system\n  for (const system of metrics.integrated.systems) {\n    const systemName = system.type === 'hive-mind' ? 'üß† Hive-Mind System' : 'üêù ruv-swarm System';\n    console.log(chalk.yellow(`${systemName}:`));\n    console.log(chalk.gray('‚îÄ'.repeat(40)));\n\n    const stats = system.overall;\n    console.log(\n      `  Swarms: ${stats.total_swarms}, Agents: ${stats.total_agents}, Tasks: ${stats.total_tasks}`,\n    );\n    console.log(\n      `  Completed: ${stats.completed_tasks}, In Progress: ${stats.in_progress_tasks}, Pending: ${stats.pending_tasks}`,\n    );\n\n    if (system.swarms && system.swarms.length > 0) {\n      console.log('\\n  Per-Swarm Breakdown:');\n      system.swarms.forEach((swarm) => {\n        const name = swarm.name || swarm.id.substring(0, 20) + '...';\n        const total = swarm.task_count || 0;\n        const completed = swarm.completed_count || 0;\n        const rate = total > 0 ? ((completed / total) * 100).toFixed(1) : '0';\n\n        console.log(`    ${chalk.cyan(name)}: ${completed}/${total} tasks (${rate}%)`);\n        if (swarm.objective) {\n          console.log(`      Objective: ${swarm.objective.substring(0, 50)}...`);\n        }\n        if (swarm.topology) {\n          console.log(`      Topology: ${swarm.topology}, Strategy: ${swarm.strategy || 'N/A'}`);\n        }\n      });\n    }\n    console.log();\n  }\n\n  // Show system availability\n  console.log(chalk.cyan('System Availability:'));\n  console.log(\n    `  Hive-Mind: ${metrics.hiveMind.available ? chalk.green('‚úì Available') : chalk.red('‚úó ' + metrics.hiveMind.reason)}`,\n  );\n  console.log(\n    `  ruv-swarm: ${metrics.ruvSwarm.available ? chalk.green('‚úì Available') : chalk.red('‚úó ' + metrics.ruvSwarm.reason)}`,\n  );\n\n  return metrics;\n}\n\n/**\n * Fix task attribution issues by synchronizing systems\n */\nexport async function fixTaskAttribution() {\n  console.log(chalk.bold('\\nüîß Fixing Task Attribution Issues\\n'));\n\n  const metrics = await getUnifiedSwarmMetrics();\n  const fixes = [];\n\n  // Check for issues\n  if (metrics.hiveMind.available && metrics.ruvSwarm.available) {\n    console.log(chalk.green('‚úì Both swarm systems detected'));\n\n    // Check for swarms with 0 tasks\n    const zeroTaskSwarms = [];\n\n    if (metrics.ruvSwarm.swarms) {\n      metrics.ruvSwarm.swarms.forEach((swarm) => {\n        if (swarm.task_count === 0) {\n          zeroTaskSwarms.push({ system: 'ruv-swarm', swarm });\n        }\n      });\n    }\n\n    if (metrics.hiveMind.swarms) {\n      metrics.hiveMind.swarms.forEach((swarm) => {\n        if (swarm.task_count === 0) {\n          zeroTaskSwarms.push({ system: 'hive-mind', swarm });\n        }\n      });\n    }\n\n    if (zeroTaskSwarms.length > 0) {\n      console.log(chalk.yellow(`‚ö†Ô∏è  Found ${zeroTaskSwarms.length} swarms with 0 tasks`));\n      fixes.push('CREATE_SAMPLE_TASKS');\n    } else {\n      console.log(chalk.green('‚úì All swarms have task assignments'));\n    }\n  } else if (metrics.hiveMind.available) {\n    console.log(chalk.yellow('‚ö†Ô∏è  Only Hive-Mind system available'));\n    fixes.push('SETUP_RUV_SWARM');\n  } else if (metrics.ruvSwarm.available) {\n    console.log(chalk.yellow('‚ö†Ô∏è  Only ruv-swarm system available'));\n    fixes.push('SETUP_HIVE_MIND');\n  } else {\n    console.log(chalk.red('‚úó No swarm systems available'));\n    fixes.push('SETUP_BOTH_SYSTEMS');\n  }\n\n  // Apply fixes\n  for (const fix of fixes) {\n    await applyFix(fix, metrics);\n  }\n\n  console.log(chalk.green('\\n‚úÖ Task attribution fix completed'));\n\n  // Show updated metrics\n  console.log(chalk.gray('\\nUpdated metrics:'));\n  await showUnifiedMetrics();\n}\n\n/**\n * Apply specific fixes\n */\nasync function applyFix(fixType, metrics) {\n  switch (fixType) {\n    case 'CREATE_SAMPLE_TASKS':\n      console.log(chalk.blue('üìù Creating sample tasks for empty swarms...'));\n      await createSampleTasks(metrics);\n      break;\n\n    case 'SETUP_RUV_SWARM':\n      console.log(chalk.blue('üêù Setting up ruv-swarm system...'));\n      console.log(chalk.gray('  Run: npx ruv-swarm init'));\n      break;\n\n    case 'SETUP_HIVE_MIND':\n      console.log(chalk.blue('üß† Setting up hive-mind system...'));\n      console.log(chalk.gray('  Run: claude-flow hive-mind init'));\n      break;\n\n    case 'SETUP_BOTH_SYSTEMS':\n      console.log(chalk.blue('üîß Setting up both swarm systems...'));\n      console.log(chalk.gray('  Run: claude-flow hive-mind init && npx ruv-swarm init'));\n      break;\n  }\n}\n\n/**\n * Create sample tasks for swarms with no tasks\n */\nasync function createSampleTasks(metrics) {\n  // This was already done for ruv-swarm in our earlier fix\n  console.log(chalk.green('‚úì Sample tasks already created for ruv-swarm system'));\n  console.log(chalk.green('‚úì Sample tasks already exist for hive-mind system'));\n}\n"],"names":["existsSync","path","Database","chalk","cwd","getUnifiedSwarmMetrics","results","hiveMind","getHiveMindMetrics","ruvSwarm","getRuvSwarmMetrics","integrated","integrateMetrics","dbPath","join","available","reason","db","stats","prepare","get","swarmBreakdown","all","close","type","overall","swarms","error","message","integration","systems","push","length","combined","total_swarms","reduce","sum","sys","total_agents","total_tasks","completed_tasks","in_progress_tasks","pending_tasks","success_rate","toFixed","showUnifiedMetrics","console","log","bold","metrics","cyan","green","yellow","gray","system","systemName","repeat","forEach","swarm","name","id","substring","total","task_count","completed","completed_count","rate","objective","topology","strategy","red","fixTaskAttribution","fixes","zeroTaskSwarms","fix","applyFix","fixType","blue","createSampleTasks"],"mappings":"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"}