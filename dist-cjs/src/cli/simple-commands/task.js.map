{"version":3,"sources":["../../../../src/cli/simple-commands/task.js"],"sourcesContent":["// task.js - Task management commands with improved argument parsing\nimport { printSuccess, printError, printWarning } from '../utils.js';\nimport { Command } from 'commander';\n\nexport async function taskCommand(subArgs, flags) {\n  const taskCmd = subArgs[0];\n\n  switch (taskCmd) {\n    case 'create':\n      await createTask(subArgs, flags);\n      break;\n\n    case 'list':\n      await listTasks(subArgs, flags);\n      break;\n\n    case 'status':\n      await showTaskStatus(subArgs, flags);\n      break;\n\n    case 'cancel':\n      await cancelTask(subArgs, flags);\n      break;\n\n    case 'workflow':\n      await executeWorkflow(subArgs, flags);\n      break;\n\n    case 'coordination':\n      await manageCoordination(subArgs, flags);\n      break;\n\n    default:\n      showTaskHelp();\n  }\n}\n\nasync function createTask(subArgs, flags) {\n  // Use commander for robust argument parsing\n  const program = new Command()\n    .exitOverride()\n    .allowUnknownOption()\n    .option('--priority <value>', 'Set task priority (1-10)', '5');\n\n  try {\n    // Parse the arguments starting from the create command\n    program.parse(subArgs, { from: 'user' });\n  } catch (err) {\n    // Continue even if commander throws\n  }\n\n  const opts = program.opts();\n  const args = program.args;\n\n  // Extract task type and description with proper quote handling\n  const taskType = args[1]; // First arg after 'create'\n\n  // Join remaining args for description, handling quoted strings properly\n  let description = '';\n  if (args.length > 2) {\n    // If the description starts with a quote, find the matching end quote\n    const descriptionArgs = args.slice(2);\n    description = parseQuotedDescription(descriptionArgs);\n  }\n\n  if (!taskType || !description) {\n    printError('Usage: task create <type> \"<description>\"');\n    console.log('Types: research, code, analysis, coordination, general');\n    return;\n  }\n\n  const taskId = `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const priority = parseInt(opts.priority || '5', 10);\n\n  // Create the task object\n  const task = {\n    id: taskId,\n    type: taskType,\n    description: description,\n    priority: priority,\n    status: 'queued',\n    createdAt: Date.now(),\n    assignedTo: null,\n    progress: 0\n  };\n\n  // Store task in tasks directory\n  const { promises: fs } = await import('fs');\n  const path = await import('path');\n  \n  // Ensure tasks directory exists\n  const tasksDir = '.claude-flow/tasks';\n  await fs.mkdir(tasksDir, { recursive: true });\n  \n  // Save task data\n  const taskFile = path.join(tasksDir, `${taskId}.json`);\n  await fs.writeFile(taskFile, JSON.stringify(task, null, 2));\n  \n  // Update task queue file\n  const queueFile = '.claude-flow/tasks/queue.json';\n  let queue = [];\n  try {\n    const queueData = await fs.readFile(queueFile, 'utf8');\n    queue = JSON.parse(queueData);\n  } catch (e) {\n    // Queue file doesn't exist yet\n  }\n  \n  // Add task to queue (sorted by priority)\n  queue.push(task);\n  queue.sort((a, b) => b.priority - a.priority);\n  await fs.writeFile(queueFile, JSON.stringify(queue, null, 2));\n\n  printSuccess(`‚úÖ Created ${taskType} task: ${taskId}`);\n  console.log(`üìã Description: ${description}`);\n  console.log(`‚ö° Priority: ${priority}/10`);\n  console.log(`üè∑Ô∏è  Type: ${taskType}`);\n  console.log(`üìÖ Status: Queued`);\n  console.log(`üìÅ Location: ${taskFile}`);\n  console.log(`\\n‚úÖ Task successfully added to queue (${queue.length} total tasks)`);\n}\n\nfunction parseQuotedDescription(args) {\n  const fullString = args.join(' ');\n\n  // Check if it starts with a quote\n  if (fullString.startsWith('\"') || fullString.startsWith(\"'\")) {\n    const quoteChar = fullString[0];\n    const endIndex = fullString.lastIndexOf(quoteChar);\n\n    if (endIndex > 0) {\n      // Extract the quoted content\n      return fullString.substring(1, endIndex);\n    }\n  }\n\n  // If not quoted or improperly quoted, return the full string\n  return fullString;\n}\n\nasync function listTasks(subArgs, flags) {\n  const program = new Command()\n    .exitOverride()\n    .allowUnknownOption()\n    .option('--filter <status>', 'Filter by task status')\n    .option('--verbose', 'Show detailed output')\n    .option('-v', 'Show detailed output');\n\n  try {\n    program.parse(subArgs, { from: 'user' });\n  } catch (err) {\n    // Continue\n  }\n\n  const opts = program.opts();\n  const filter = opts.filter;\n  const verbose = opts.verbose || opts.v;\n\n  const { promises: fs } = await import('fs');\n  \n  let queue = [];\n  try {\n    const queueFile = '.claude-flow/tasks/queue.json';\n    const queueData = await fs.readFile(queueFile, 'utf8');\n    queue = JSON.parse(queueData);\n  } catch (e) {\n    // Queue file doesn't exist yet\n  }\n\n  // Apply filter if specified\n  if (filter) {\n    queue = queue.filter(task => task.status === filter);\n    console.log(`üìä Filtered by status: ${filter}`);\n  }\n  \n  if (queue.length > 0) {\n    printSuccess(`Task queue (${queue.length} tasks):`);\n    queue.forEach((task, index) => {\n      const statusEmoji = task.status === 'queued' ? '‚è≥' : \n                          task.status === 'running' ? 'üîÑ' : \n                          task.status === 'completed' ? '‚úÖ' : '‚ùå';\n      console.log(`${index + 1}. ${statusEmoji} [${task.type}] ${task.description}`);\n      console.log(`   Priority: ${task.priority}/10 | Status: ${task.status}`);\n      if (verbose) {\n        console.log(`   ID: ${task.id}`);\n        console.log(`   Created: ${new Date(task.createdAt).toLocaleString()}`);\n      }\n      console.log('');\n    });\n  } else {\n    console.log('üìã No tasks in queue' + (filter ? ` with status: ${filter}` : ''));\n    console.log('\\nTo create tasks:');\n    console.log('  claude-flow task create research \"Market analysis\"');\n    console.log('  claude-flow task create code \"Implement API\"');\n    console.log('  claude-flow task create analysis \"Data processing\"');\n  }\n}\n\nasync function showTaskStatus(subArgs, flags) {\n  const taskId = subArgs[1];\n\n  if (!taskId) {\n    printError('Usage: task status <task-id>');\n    return;\n  }\n\n  printSuccess(`Task status: ${taskId}`);\n  console.log('üìä Task details would include:');\n  console.log('   Status, progress, assigned agent, execution time, results');\n}\n\nasync function cancelTask(subArgs, flags) {\n  const taskId = subArgs[1];\n\n  if (!taskId) {\n    printError('Usage: task cancel <task-id>');\n    return;\n  }\n\n  printSuccess(`Cancelling task: ${taskId}`);\n  console.log('üõë Task would be gracefully cancelled');\n}\n\nasync function executeWorkflow(subArgs, flags) {\n  const workflowFile = subArgs[1];\n\n  if (!workflowFile) {\n    printError('Usage: task workflow <workflow-file>');\n    return;\n  }\n\n  printSuccess(`Executing workflow: ${workflowFile}`);\n  console.log('üîÑ Workflow execution would include:');\n  console.log('   - Parsing workflow definition');\n  console.log('   - Creating dependent tasks');\n  console.log('   - Orchestrating execution');\n  console.log('   - Progress tracking');\n}\n\nasync function manageCoordination(subArgs, flags) {\n  const coordCmd = subArgs[1];\n\n  switch (coordCmd) {\n    case 'status':\n      printSuccess('Task coordination status:');\n      console.log('üéØ Coordination engine: Not running');\n      console.log('   Active coordinators: 0');\n      console.log('   Pending tasks: 0');\n      console.log('   Resource utilization: 0%');\n      break;\n\n    case 'optimize':\n      printSuccess('Optimizing task coordination...');\n      console.log('‚ö° Optimization would include:');\n      console.log('   - Task dependency analysis');\n      console.log('   - Resource allocation optimization');\n      console.log('   - Parallel execution planning');\n      break;\n\n    default:\n      console.log('Coordination commands: status, optimize');\n  }\n}\n\nfunction showTaskHelp() {\n  console.log('Task commands:');\n  console.log('  create <type> \"<description>\"    Create new task');\n  console.log('  list [--filter <status>]        List tasks');\n  console.log('  status <id>                      Show task details');\n  console.log('  cancel <id>                      Cancel running task');\n  console.log('  workflow <file>                  Execute workflow file');\n  console.log('  coordination <status|optimize>   Manage coordination');\n  console.log();\n  console.log('Task Types:');\n  console.log('  research      Information gathering and analysis');\n  console.log('  code          Software development tasks');\n  console.log('  analysis      Data processing and insights');\n  console.log('  coordination  Task orchestration and management');\n  console.log('  general       General purpose tasks');\n  console.log();\n  console.log('Options:');\n  console.log('  --priority <1-10>                Set task priority');\n  console.log('  --filter <status>                Filter by status');\n  console.log('  --verbose, -v                    Show detailed output');\n  console.log();\n  console.log('Examples:');\n  console.log('  claude-flow task create research \"Market analysis\" --priority 8');\n  console.log('  claude-flow task list --filter running');\n  console.log('  claude-flow task workflow examples/development-workflow.json');\n  console.log('  claude-flow task coordination status');\n}\n"],"names":["printSuccess","printError","Command","taskCommand","subArgs","flags","taskCmd","createTask","listTasks","showTaskStatus","cancelTask","executeWorkflow","manageCoordination","showTaskHelp","program","exitOverride","allowUnknownOption","option","parse","from","err","opts","args","taskType","description","length","descriptionArgs","slice","parseQuotedDescription","console","log","taskId","Date","now","Math","random","toString","substr","priority","parseInt","task","id","type","status","createdAt","assignedTo","progress","promises","fs","path","tasksDir","mkdir","recursive","taskFile","join","writeFile","JSON","stringify","queueFile","queue","queueData","readFile","e","push","sort","a","b","fullString","startsWith","quoteChar","endIndex","lastIndexOf","substring","filter","verbose","v","forEach","index","statusEmoji","toLocaleString","workflowFile","coordCmd"],"mappings":"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"}