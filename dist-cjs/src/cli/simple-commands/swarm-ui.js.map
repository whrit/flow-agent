{"version":3,"sources":["../../../../src/cli/simple-commands/swarm-ui.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Enhanced Swarm UI with real-time monitoring and control\n * Uses blessed for terminal UI\n */\n\nconst blessed = require('blessed');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { spawn } = require('child_process');\n\nclass SwarmUI {\n  constructor() {\n    this.screen = null;\n    this.swarmData = {\n      objectives: [],\n      agents: [],\n      tasks: [],\n      status: 'idle',\n    };\n    this.selectedObjective = null;\n    this.updateInterval = null;\n    this.logBuffer = [];\n    this.maxLogLines = 100;\n    this.activeProcesses = new Map(); // Track active processes for cross-platform termination\n  }\n\n  async init() {\n    // Create blessed screen\n    this.screen = blessed.screen({\n      smartCSR: true,\n      title: 'Claude Flow - Swarm Control Center',\n    });\n\n    this.createLayout();\n    this.bindEvents();\n    this.startMonitoring();\n\n    this.screen.render();\n  }\n\n  createLayout() {\n    // Main container\n    const mainBox = blessed.box({\n      parent: this.screen,\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      border: {\n        type: 'line',\n      },\n      style: {\n        border: {\n          fg: 'cyan',\n        },\n      },\n    });\n\n    // Header\n    this.headerBox = blessed.box({\n      parent: mainBox,\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: 3,\n      content: '{center}🐝 Claude Flow Swarm Control Center{/center}',\n      tags: true,\n      style: {\n        fg: 'white',\n        bg: 'blue',\n      },\n    });\n\n    // Status bar\n    this.statusBox = blessed.box({\n      parent: mainBox,\n      top: 2,\n      left: 0,\n      width: '100%',\n      height: 1,\n      content: 'Status: Initializing...',\n      style: {\n        fg: 'yellow',\n      },\n    });\n\n    // Left panel - Objectives and Agents\n    const leftPanel = blessed.box({\n      parent: mainBox,\n      top: 3,\n      left: 0,\n      width: '30%',\n      height: '70%',\n      border: {\n        type: 'line',\n      },\n      label: ' Objectives & Agents ',\n      style: {\n        border: {\n          fg: 'green',\n        },\n      },\n    });\n\n    // Objectives list\n    this.objectivesList = blessed.list({\n      parent: leftPanel,\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '50%',\n      label: ' Objectives ',\n      items: ['No objectives'],\n      keys: true,\n      vi: true,\n      mouse: true,\n      style: {\n        selected: {\n          bg: 'blue',\n        },\n        item: {\n          fg: 'white',\n        },\n      },\n    });\n\n    // Agents list\n    this.agentsList = blessed.list({\n      parent: leftPanel,\n      top: '50%',\n      left: 0,\n      width: '100%',\n      height: '50%',\n      label: ' Agents ',\n      items: ['No agents'],\n      keys: true,\n      vi: true,\n      mouse: true,\n      style: {\n        selected: {\n          bg: 'green',\n        },\n        item: {\n          fg: 'white',\n        },\n      },\n    });\n\n    // Center panel - Tasks and Details\n    const centerPanel = blessed.box({\n      parent: mainBox,\n      top: 3,\n      left: '30%',\n      width: '40%',\n      height: '70%',\n      border: {\n        type: 'line',\n      },\n      label: ' Tasks & Details ',\n      style: {\n        border: {\n          fg: 'yellow',\n        },\n      },\n    });\n\n    // Tasks list\n    this.tasksList = blessed.list({\n      parent: centerPanel,\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '50%',\n      label: ' Tasks ',\n      items: ['No tasks'],\n      keys: true,\n      vi: true,\n      mouse: true,\n      style: {\n        selected: {\n          bg: 'yellow',\n          fg: 'black',\n        },\n        item: {\n          fg: 'white',\n        },\n      },\n    });\n\n    // Task details\n    this.taskDetails = blessed.box({\n      parent: centerPanel,\n      top: '50%',\n      left: 0,\n      width: '100%',\n      height: '50%',\n      label: ' Task Details ',\n      content: 'Select a task to view details',\n      scrollable: true,\n      alwaysScroll: true,\n      keys: true,\n      vi: true,\n      mouse: true,\n      style: {\n        fg: 'white',\n      },\n    });\n\n    // Right panel - Logs and Controls\n    const rightPanel = blessed.box({\n      parent: mainBox,\n      top: 3,\n      left: '70%',\n      width: '30%',\n      height: '70%',\n      border: {\n        type: 'line',\n      },\n      label: ' Logs & Controls ',\n      style: {\n        border: {\n          fg: 'magenta',\n        },\n      },\n    });\n\n    // Activity logs\n    this.logBox = blessed.log({\n      parent: rightPanel,\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '60%',\n      label: ' Activity Log ',\n      tags: true,\n      mouse: true,\n      scrollable: true,\n      alwaysScroll: true,\n      style: {\n        fg: 'white',\n      },\n    });\n\n    // Control buttons\n    this.controlBox = blessed.box({\n      parent: rightPanel,\n      top: '60%',\n      left: 0,\n      width: '100%',\n      height: '40%',\n      label: ' Controls ',\n    });\n\n    // Create objective button\n    this.createButton = blessed.button({\n      parent: this.controlBox,\n      top: 1,\n      left: 1,\n      width: '90%',\n      height: 3,\n      content: 'Create Objective',\n      align: 'center',\n      style: {\n        bg: 'blue',\n        fg: 'white',\n        focus: {\n          bg: 'red',\n        },\n      },\n    });\n\n    // Stop swarm button\n    this.stopButton = blessed.button({\n      parent: this.controlBox,\n      top: 5,\n      left: 1,\n      width: '90%',\n      height: 3,\n      content: 'Stop Swarm',\n      align: 'center',\n      style: {\n        bg: 'red',\n        fg: 'white',\n        focus: {\n          bg: 'yellow',\n          fg: 'black',\n        },\n      },\n    });\n\n    // Bottom panel - Command input\n    this.commandBox = blessed.textbox({\n      parent: mainBox,\n      bottom: 0,\n      left: 0,\n      width: '100%',\n      height: 3,\n      label: ' Command Input (Press Enter to execute) ',\n      keys: true,\n      mouse: true,\n      inputOnFocus: true,\n      style: {\n        border: {\n          fg: 'cyan',\n        },\n        fg: 'white',\n      },\n    });\n  }\n\n  bindEvents() {\n    // Screen events\n    this.screen.key(['escape', 'q', 'C-c'], () => {\n      this.cleanup();\n      process.exit(0);\n    });\n\n    // Objective selection\n    this.objectivesList.on('select', (item, index) => {\n      this.selectedObjective = this.swarmData.objectives[index];\n      this.updateTasksList();\n      this.log(`Selected objective: ${this.selectedObjective?.description || 'Unknown'}`);\n    });\n\n    // Task selection\n    this.tasksList.on('select', (item, index) => {\n      const task = this.swarmData.tasks[index];\n      if (task) {\n        this.updateTaskDetails(task);\n      }\n    });\n\n    // Create objective button\n    this.createButton.on('press', () => {\n      this.promptCreateObjective();\n    });\n\n    // Stop swarm button\n    this.stopButton.on('press', () => {\n      this.stopSwarm();\n    });\n\n    // Command input\n    this.commandBox.on('submit', (value) => {\n      this.executeCommand(value);\n      this.commandBox.clearValue();\n      this.screen.render();\n    });\n\n    // Focus management\n    this.screen.key(['tab'], () => {\n      this.screen.focusNext();\n    });\n\n    this.screen.key(['S-tab'], () => {\n      this.screen.focusPrevious();\n    });\n  }\n\n  async startMonitoring() {\n    this.log('Starting swarm monitoring...');\n\n    // Update interval\n    this.updateInterval = setInterval(() => {\n      this.updateSwarmData();\n    }, 2000);\n\n    // Initial update\n    await this.updateSwarmData();\n  }\n\n  async updateSwarmData() {\n    try {\n      // Load swarm data from file system\n      const swarmRunsDir = './swarm-runs';\n\n      try {\n        const runs = await fs.readdir(swarmRunsDir);\n        this.swarmData.objectives = [];\n        this.swarmData.agents = [];\n        this.swarmData.tasks = [];\n\n        for (const runDir of runs) {\n          const configPath = path.join(swarmRunsDir, runDir, 'config.json');\n          try {\n            const configData = await fs.readFile(configPath, 'utf-8');\n            const config = JSON.parse(configData);\n\n            this.swarmData.objectives.push({\n              id: config.swarmId,\n              description: config.objective,\n              status: 'running',\n              startTime: config.startTime,\n            });\n\n            // Load agents\n            const agentsDir = path.join(swarmRunsDir, runDir, 'agents');\n            try {\n              const agents = await fs.readdir(agentsDir);\n              for (const agentDir of agents) {\n                const taskPath = path.join(agentsDir, agentDir, 'task.json');\n                try {\n                  const taskData = await fs.readFile(taskPath, 'utf-8');\n                  const task = JSON.parse(taskData);\n\n                  this.swarmData.agents.push({\n                    id: task.agentId,\n                    swarmId: config.swarmId,\n                    status: task.status || 'active',\n                    task: task.task,\n                  });\n\n                  this.swarmData.tasks.push(task);\n                } catch (e) {\n                  // Skip invalid task files\n                }\n              }\n            } catch (e) {\n              // No agents directory\n            }\n          } catch (e) {\n            // Skip invalid config files\n          }\n        }\n\n        this.updateDisplay();\n      } catch (e) {\n        // No swarm runs directory\n        this.swarmData.status = 'idle';\n      }\n    } catch (error) {\n      this.log(`Error updating swarm data: ${error.message}`, 'error');\n    }\n  }\n\n  updateDisplay() {\n    // Update status\n    const activeObjectives = this.swarmData.objectives.filter((o) => o.status === 'running').length;\n    const activeAgents = this.swarmData.agents.filter((a) => a.status === 'active').length;\n\n    this.statusBox.setContent(\n      `Status: ${this.swarmData.status} | ` +\n        `Objectives: ${activeObjectives} | ` +\n        `Agents: ${activeAgents} | ` +\n        `Tasks: ${this.swarmData.tasks.length}`,\n    );\n\n    // Update objectives list\n    const objectiveItems = this.swarmData.objectives.map(\n      (obj) => `${obj.status === 'running' ? '🟢' : '🔴'} ${obj.description.substring(0, 25)}...`,\n    );\n    this.objectivesList.setItems(objectiveItems.length > 0 ? objectiveItems : ['No objectives']);\n\n    // Update agents list\n    const agentItems = this.swarmData.agents.map(\n      (agent) => `${agent.status === 'active' ? '🤖' : '💤'} ${agent.id.substring(0, 15)}...`,\n    );\n    this.agentsList.setItems(agentItems.length > 0 ? agentItems : ['No agents']);\n\n    // Update tasks list if objective is selected\n    if (this.selectedObjective) {\n      this.updateTasksList();\n    }\n\n    this.screen.render();\n  }\n\n  updateTasksList() {\n    if (!this.selectedObjective) return;\n\n    const objectiveTasks = this.swarmData.tasks.filter(\n      (task) => task.swarmId === this.selectedObjective.id,\n    );\n\n    const taskItems = objectiveTasks.map((task) => {\n      const statusIcon =\n        {\n          active: '🔄',\n          completed: '✅',\n          failed: '❌',\n          pending: '⏳',\n        }[task.status] || '❓';\n\n      return `${statusIcon} ${task.task?.type || 'Unknown'}: ${task.task?.description?.substring(0, 20) || 'No description'}...`;\n    });\n\n    this.tasksList.setItems(taskItems.length > 0 ? taskItems : ['No tasks']);\n    this.screen.render();\n  }\n\n  updateTaskDetails(task) {\n    const details = [\n      `Task ID: ${task.agentId}`,\n      `Swarm ID: ${task.swarmId}`,\n      `Type: ${task.task?.type || 'Unknown'}`,\n      `Description: ${task.task?.description || 'No description'}`,\n      `Status: ${task.status || 'Unknown'}`,\n      `Start Time: ${task.startTime || 'Not started'}`,\n      '',\n      'Task Data:',\n      JSON.stringify(task.task, null, 2),\n    ].join('\\n');\n\n    this.taskDetails.setContent(details);\n    this.screen.render();\n  }\n\n  promptCreateObjective() {\n    // Create a prompt box\n    const promptBox = blessed.prompt({\n      parent: this.screen,\n      top: 'center',\n      left: 'center',\n      width: 60,\n      height: 10,\n      label: ' Create New Objective ',\n      content: 'Enter objective description:',\n      border: {\n        type: 'line',\n      },\n      style: {\n        border: {\n          fg: 'cyan',\n        },\n      },\n    });\n\n    promptBox.input('Enter objective:', '', (err, value) => {\n      if (!err && value) {\n        this.createObjective(value);\n      }\n      promptBox.destroy();\n      this.screen.render();\n    });\n\n    this.screen.render();\n  }\n\n  async createObjective(description) {\n    try {\n      this.log(`Creating objective: ${description}`);\n\n      // Execute swarm command\n      const args = ['swarm', description, '--ui', '--monitor'];\n      const process = spawn('claude-flow', args, {\n        detached: true,\n        stdio: 'ignore',\n      });\n\n      process.unref();\n\n      // Track the process for later termination\n      const processId = `swarm-${Date.now()}`;\n      this.activeProcesses.set(processId, process);\n\n      this.log(`Launched swarm with PID: ${process.pid} (ID: ${processId})`);\n\n      // Update data after a delay\n      setTimeout(() => {\n        this.updateSwarmData();\n      }, 2000);\n    } catch (error) {\n      this.log(`Error creating objective: ${error.message}`, 'error');\n    }\n  }\n\n  async stopSwarm() {\n    this.log('Stopping all swarm operations...');\n\n    try {\n      // Cross-platform process termination\n      let stoppedCount = 0;\n\n      // First, try to stop tracked processes\n      for (const [processId, process] of this.activeProcesses) {\n        try {\n          // Use process.kill() for cross-platform compatibility\n          if (process.pid && !process.killed) {\n            process.kill('SIGTERM');\n            stoppedCount++;\n            this.log(`Stopped process ${processId} (PID: ${process.pid})`);\n          }\n        } catch (err) {\n          // Process might already be dead\n          this.log(`Process ${processId} already terminated`, 'warn');\n        }\n      }\n\n      // Clear the tracked processes\n      this.activeProcesses.clear();\n\n      // Also find and stop any orphaned processes\n      await this.stopOrphanedProcesses();\n\n      this.log(`Swarm operations stopped (${stoppedCount} processes terminated)`);\n\n      // Update display\n      this.swarmData.status = 'stopped';\n      this.updateDisplay();\n    } catch (error) {\n      this.log(`Error stopping swarm: ${error.message}`, 'error');\n    }\n  }\n\n  async stopOrphanedProcesses() {\n    // Cross-platform approach to find and stop orphaned processes\n    const { exec } = require('child_process');\n    const os = require('os');\n\n    if (os.platform() === 'win32') {\n      // Windows: Use wmic to find and kill processes\n      exec(\n        'wmic process where \"commandline like \\'%claude-flow swarm%\\'\" get processid',\n        (error, stdout) => {\n          if (!error && stdout) {\n            const pids = stdout\n              .split('\\n')\n              .map((line) => line.trim())\n              .filter((line) => /^\\d+$/.test(line));\n\n            pids.forEach((pid) => {\n              exec(`taskkill /F /PID ${pid}`, (killError) => {\n                if (!killError) {\n                  this.log(`Stopped orphaned process PID: ${pid}`);\n                }\n              });\n            });\n          }\n        },\n      );\n    } else {\n      // Unix-like systems: Use ps and grep\n      exec('ps aux | grep \"claude-flow swarm\" | grep -v grep', (error, stdout) => {\n        if (!error && stdout) {\n          const lines = stdout.split('\\n').filter((line) => line.trim());\n          lines.forEach((line) => {\n            const parts = line.split(/\\s+/);\n            const pid = parts[1];\n            if (pid && /^\\d+$/.test(pid)) {\n              try {\n                process.kill(parseInt(pid), 'SIGTERM');\n                this.log(`Stopped orphaned process PID: ${pid}`);\n              } catch (killError) {\n                // Process might not exist or no permission\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  async executeCommand(command) {\n    this.log(`Executing command: ${command}`);\n\n    try {\n      const { exec } = require('child_process');\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          this.log(`Command error: ${error.message}`, 'error');\n        } else {\n          if (stdout) this.log(`Output: ${stdout.trim()}`);\n          if (stderr) this.log(`Error: ${stderr.trim()}`, 'warn');\n        }\n      });\n    } catch (error) {\n      this.log(`Failed to execute command: ${error.message}`, 'error');\n    }\n  }\n\n  log(message, level = 'info') {\n    const timestamp = new Date().toLocaleTimeString();\n    const levelColors = {\n      info: 'white',\n      warn: 'yellow',\n      error: 'red',\n      success: 'green',\n    };\n\n    const coloredMessage = `{${levelColors[level] || 'white'}-fg}[${timestamp}] ${message}{/}`;\n\n    this.logBuffer.push(coloredMessage);\n    if (this.logBuffer.length > this.maxLogLines) {\n      this.logBuffer.shift();\n    }\n\n    if (this.logBox) {\n      this.logBox.log(coloredMessage);\n      this.screen.render();\n    }\n  }\n\n  cleanup() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n\n    // Clean up any remaining processes\n    for (const [processId, process] of this.activeProcesses) {\n      try {\n        if (process.pid && !process.killed) {\n          process.kill('SIGTERM');\n        }\n      } catch (err) {\n        // Ignore errors during cleanup\n      }\n    }\n    this.activeProcesses.clear();\n  }\n}\n\n// Main execution\nasync function main() {\n  const ui = new SwarmUI();\n\n  try {\n    await ui.init();\n  } catch (error) {\n    console.error('Failed to initialize Swarm UI:', error);\n    process.exit(1);\n  }\n}\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught exception:', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (error) => {\n  console.error('Unhandled rejection:', error);\n  process.exit(1);\n});\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = SwarmUI;\n"],"names":["blessed","require","fs","promises","path","spawn","SwarmUI","screen","swarmData","objectives","agents","tasks","status","selectedObjective","updateInterval","logBuffer","maxLogLines","activeProcesses","Map","init","smartCSR","title","createLayout","bindEvents","startMonitoring","render","mainBox","box","parent","top","left","width","height","border","type","style","fg","headerBox","content","tags","bg","statusBox","leftPanel","label","objectivesList","list","items","keys","vi","mouse","selected","item","agentsList","centerPanel","tasksList","taskDetails","scrollable","alwaysScroll","rightPanel","logBox","log","controlBox","createButton","button","align","focus","stopButton","commandBox","textbox","bottom","inputOnFocus","key","cleanup","process","exit","on","index","updateTasksList","description","task","updateTaskDetails","promptCreateObjective","stopSwarm","value","executeCommand","clearValue","focusNext","focusPrevious","setInterval","updateSwarmData","swarmRunsDir","runs","readdir","runDir","configPath","join","configData","readFile","config","JSON","parse","push","id","swarmId","objective","startTime","agentsDir","agentDir","taskPath","taskData","agentId","e","updateDisplay","error","message","activeObjectives","filter","o","length","activeAgents","a","setContent","objectiveItems","map","obj","substring","setItems","agentItems","agent","objectiveTasks","taskItems","statusIcon","active","completed","failed","pending","details","stringify","promptBox","prompt","input","err","createObjective","destroy","args","detached","stdio","unref","processId","Date","now","set","pid","setTimeout","stoppedCount","killed","kill","clear","stopOrphanedProcesses","exec","os","platform","stdout","pids","split","line","trim","test","forEach","killError","lines","parts","parseInt","command","stderr","level","timestamp","toLocaleTimeString","levelColors","info","warn","success","coloredMessage","shift","clearInterval","main","ui","console","module","exports"],"mappings":"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"}