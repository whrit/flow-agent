{"version":3,"sources":["../../../../src/cli/simple-commands/hive.js"],"sourcesContent":["/**\n * Hive Mind command for simple CLI\n * Provides basic implementation that can work without TypeScript\n */\n\nexport async function hiveCommand(args, flags) {\n  const objective = (args || []).join(' ').trim();\n\n  if (!objective || flags.help || flags.h) {\n    showHiveHelp();\n    return;\n  }\n\n  console.log('🐝 Initializing Hive Mind...');\n  console.log(`👑 Queen Genesis coordinating...`);\n  console.log(`📋 Objective: ${objective}`);\n  console.log(`🏗️ Topology: ${flags.topology || 'hierarchical'}`);\n  console.log(`🗳️ Consensus: ${flags.consensus || 'quorum'}`);\n  console.log(`🤖 Max Agents: ${flags['max-agents'] || 8}`);\n  console.log('');\n\n  // Simulate Hive initialization\n  const hiveId = `hive_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  console.log(`✅ Hive Mind initialized: ${hiveId}`);\n  console.log('');\n\n  // Show agent spawning\n  console.log('🐝 Spawning specialized agents...');\n  const agents = [\n    { type: '👑', name: 'Queen-Genesis', role: 'Orchestrator' },\n    { type: '🏗️', name: 'Architect-Prime', role: 'System Design' },\n    { type: '🐝', name: 'Worker-1', role: 'Backend Development' },\n    { type: '🐝', name: 'Worker-2', role: 'Frontend Development' },\n    { type: '🔍', name: 'Scout-Alpha', role: 'Research & Analysis' },\n    { type: '🛡️', name: 'Guardian-Omega', role: 'Quality Assurance' },\n  ];\n\n  for (const agent of agents) {\n    console.log(`  ${agent.type} ${agent.name} - ${agent.role}`);\n  }\n  console.log('');\n\n  // Show task decomposition\n  console.log('🧩 Phase 1: Task Decomposition');\n  console.log('  👑 Queen proposes task breakdown...');\n  console.log('  🗳️ Agents voting on tasks...');\n  console.log('  ✅ Consensus reached (87.5% approval)');\n  console.log('');\n\n  // Show task assignment\n  console.log('🗳️ Phase 2: Task Assignment');\n  console.log('  📌 analysis → Scout-Alpha');\n  console.log('  📌 design → Architect-Prime');\n  console.log('  📌 implementation → Worker-1, Worker-2');\n  console.log('  📌 testing → Guardian-Omega');\n  console.log('  📌 documentation → Scout-Alpha');\n  console.log('');\n\n  // Show execution\n  console.log('⚡ Phase 3: Parallel Execution');\n  console.log('  [▓▓▓▓▓▓▓▓░░░░░░░░░░] 40% - Analysis in progress...');\n  console.log('  [▓▓▓░░░░░░░░░░░░░░░] 15% - Design starting...');\n  console.log('  [░░░░░░░░░░░░░░░░░░] 0%  - Implementation pending...');\n  console.log('');\n\n  // Show monitoring dashboard\n  if (flags.monitor) {\n    console.log('📊 Hive Mind Dashboard');\n    console.log('═══════════════════════════════════════════════════════════════');\n    console.log('Status: EXECUTING | Time: ' + new Date().toLocaleTimeString());\n    console.log('');\n    console.log('Consensus: 87.5% | Tasks: 2/5 | Quality: 92%');\n    console.log('Messages: 42 | Knowledge: 15 entries');\n    console.log('═══════════════════════════════════════════════════════════════');\n  }\n\n  console.log('');\n  console.log('🐝 Hive Mind is coordinating your objective...');\n  console.log('');\n  console.log('Note: This is a preview. Full Hive Mind functionality requires');\n  console.log('the complete TypeScript implementation to be built.');\n}\n\nfunction showHiveHelp() {\n  console.log(`\n🐝 Hive Mind - Advanced Multi-Agent Coordination\n\nUSAGE:\n  claude-flow hive <objective> [options]\n\nDESCRIPTION:\n  Hive Mind implements advanced swarm intelligence with consensus mechanisms,\n  distributed decision-making, and quality-driven execution.\n\nEXAMPLES:\n  claude-flow hive \"Build microservices architecture\"\n  claude-flow hive \"Optimize database performance\" --consensus unanimous\n  claude-flow hive \"Develop ML pipeline\" --topology mesh --monitor\n\nTOPOLOGIES:\n  hierarchical   Queen-led hierarchy (default)\n  mesh           Peer-to-peer coordination\n  ring           Sequential processing\n  star           Centralized hub\n\nCONSENSUS MECHANISMS:\n  quorum         Simple majority (default)\n  unanimous      All agents must agree\n  weighted       Capability-based voting\n  leader         Queen decides with input\n\nOPTIONS:\n  --topology <type>         Swarm topology (default: hierarchical)\n  --consensus <type>        Decision mechanism (default: quorum)\n  --max-agents <n>          Maximum agents (default: 8)\n  --quality-threshold <n>   Min quality 0-1 (default: 0.8)\n  --memory-namespace <ns>   Memory namespace (default: hive)\n  --monitor                 Real-time monitoring\n  --background              Run in background\n  --sparc                   Use SPARC methodology\n  --timeout <min>           Timeout minutes (default: 60)\n\nAGENT TYPES:\n  👑 Queen        Orchestrator and decision maker\n  🏗️ Architect    System design and planning\n  🐝 Worker       Implementation and execution\n  🔍 Scout        Research and exploration\n  🛡️ Guardian     Quality and validation\n\nFEATURES:\n  • Consensus-based task decomposition\n  • Capability-based task assignment\n  • Parallel execution with monitoring\n  • Quality-driven result aggregation\n  • Distributed memory sharing\n  • SPARC methodology support\n\nFor more info: https://github.com/ruvnet/claude-code-flow/docs/hive.md\n`);\n}\n"],"names":["hiveCommand","args","flags","objective","join","trim","help","h","showHiveHelp","console","log","topology","consensus","hiveId","Date","now","Math","random","toString","substr","agents","type","name","role","agent","monitor","toLocaleTimeString"],"mappings":"AAKA,OAAO,eAAeA,YAAYC,IAAI,EAAEC,KAAK;IAC3C,MAAMC,YAAY,AAACF,CAAAA,QAAQ,EAAE,AAAD,EAAGG,IAAI,CAAC,KAAKC,IAAI;IAE7C,IAAI,CAACF,aAAaD,MAAMI,IAAI,IAAIJ,MAAMK,CAAC,EAAE;QACvCC;QACA;IACF;IAEAC,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC,CAAC,gCAAgC,CAAC;IAC9CD,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEP,WAAW;IACxCM,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAER,MAAMS,QAAQ,IAAI,gBAAgB;IAC/DF,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAER,MAAMU,SAAS,IAAI,UAAU;IAC3DH,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAER,KAAK,CAAC,aAAa,IAAI,GAAG;IACxDO,QAAQC,GAAG,CAAC;IAGZ,MAAMG,SAAS,CAAC,KAAK,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;IAC9EV,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAEG,QAAQ;IAChDJ,QAAQC,GAAG,CAAC;IAGZD,QAAQC,GAAG,CAAC;IACZ,MAAMU,SAAS;QACb;YAAEC,MAAM;YAAMC,MAAM;YAAiBC,MAAM;QAAe;QAC1D;YAAEF,MAAM;YAAOC,MAAM;YAAmBC,MAAM;QAAgB;QAC9D;YAAEF,MAAM;YAAMC,MAAM;YAAYC,MAAM;QAAsB;QAC5D;YAAEF,MAAM;YAAMC,MAAM;YAAYC,MAAM;QAAuB;QAC7D;YAAEF,MAAM;YAAMC,MAAM;YAAeC,MAAM;QAAsB;QAC/D;YAAEF,MAAM;YAAOC,MAAM;YAAkBC,MAAM;QAAoB;KAClE;IAED,KAAK,MAAMC,SAASJ,OAAQ;QAC1BX,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEc,MAAMH,IAAI,CAAC,CAAC,EAAEG,MAAMF,IAAI,CAAC,GAAG,EAAEE,MAAMD,IAAI,EAAE;IAC7D;IACAd,QAAQC,GAAG,CAAC;IAGZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAGZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAGZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAGZ,IAAIR,MAAMuB,OAAO,EAAE;QACjBhB,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,+BAA+B,IAAII,OAAOY,kBAAkB;QACxEjB,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd;IAEAD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd;AAEA,SAASF;IACPC,QAAQC,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDf,CAAC;AACD"}