{"version":3,"sources":["../../../../src/cli/simple-commands/stream-chain-clean.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Stream Chain Command - Connect multiple Claude instances via stream-json\n * Clean implementation focused on real Claude CLI execution\n */\n\nimport { exec, execSync } from 'child_process';\n\n/**\n * Check if claude CLI is available\n */\nfunction checkClaudeAvailable() {\n  try {\n    execSync('which claude', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Mock implementation for fallback\n */\nfunction mockResponse(prompt) {\n  return {\n    success: true,\n    duration: 500,\n    output: `‚úÖ Mock response for: ${prompt.slice(0, 50)}...`,\n    stream: null,\n    error: null\n  };\n}\n\n/**\n * Execute a single Claude CLI command\n */\nasync function executeClaudeCommand(prompt, timeout = 20000, useStreamJson = false) {\n  return new Promise((resolve) => {\n    const args = ['-p'];\n    \n    if (useStreamJson) {\n      args.push('--output-format', 'stream-json', '--verbose');\n    }\n    \n    args.push(prompt);\n    const command = `claude ${args.join(' ')}`;\n    \n    console.log(`üîÑ Executing: ${command}`);\n    \n    const startTime = Date.now();\n    \n    exec(command, { \n      timeout,\n      maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n    }, (error, stdout, stderr) => {\n      const duration = Date.now() - startTime;\n      \n      if (error && error.code === 'TIMEOUT') {\n        console.log('‚ö†Ô∏è  Claude CLI timed out, using mock response...');\n        resolve(mockResponse(prompt));\n        return;\n      }\n      \n      if (error) {\n        console.error('Claude CLI error:', error.message);\n        resolve(mockResponse(prompt));\n        return;\n      }\n      \n      resolve({\n        success: true,\n        duration,\n        output: stdout.trim(),\n        stream: useStreamJson ? stdout : null,\n        error: stderr ? stderr.trim() : null\n      });\n    });\n  });\n}\n\n/**\n * Main stream chain command\n */\nexport async function streamChainCommand(args, flags) {\n  const subcommand = args[0] || 'help';\n  \n  if (subcommand === 'help') {\n    console.log(`\nüîó Stream Chain Command\n\nUSAGE:\n  stream-chain run \"prompt1\" \"prompt2\" [...]  # Execute custom chain\n  stream-chain demo                           # Run demo chain\n  stream-chain test                           # Test Claude CLI\n  stream-chain help                           # Show this help\n\nOPTIONS:\n  --timeout <seconds>   Timeout per step (default: 20)\n  --mock               Force mock mode\n  --verbose            Show detailed output\n\nEXAMPLES:\n  stream-chain run \"Hello\" \"How are you?\"\n  stream-chain demo --timeout 30\n  stream-chain test\n\nFor real execution, Claude CLI must be installed and configured.\n    `);\n    return;\n  }\n  \n  if (subcommand === 'test') {\n    console.log('üß™ Testing Claude CLI...');\n    \n    if (!checkClaudeAvailable()) {\n      console.log('‚ùå Claude CLI not found');\n      return;\n    }\n    \n    const result = await executeClaudeCommand('Hello, test', 10000);\n    console.log('‚úÖ Test result:', result.success ? 'PASSED' : 'FAILED');\n    if (result.output) {\n      console.log('üìÑ Output:', result.output.slice(0, 100) + '...');\n    }\n    return;\n  }\n  \n  if (subcommand === 'demo') {\n    console.log('üé≠ Running Stream Chain Demo');\n    console.log('‚îÅ'.repeat(50));\n    \n    const prompts = [\n      \"Analyze requirements for a todo app\",\n      \"Design the data model\",\n      \"Create implementation plan\"\n    ];\n    \n    return runChain(prompts, flags);\n  }\n  \n  if (subcommand === 'run') {\n    const prompts = args.slice(1);\n    \n    if (prompts.length < 2) {\n      console.error('‚ùå Error: Need at least 2 prompts');\n      console.log('Usage: stream-chain run \"prompt1\" \"prompt2\" [...]');\n      return;\n    }\n    \n    return runChain(prompts, flags);\n  }\n  \n  console.error(`‚ùå Unknown subcommand: ${subcommand}`);\n  console.log('Use \"stream-chain help\" for usage information');\n}\n\n/**\n * Execute a chain of prompts\n */\nasync function runChain(prompts, flags) {\n  const timeout = (flags.timeout || 20) * 1000;\n  const useMock = flags.mock || !checkClaudeAvailable();\n  \n  if (useMock) {\n    console.log('‚ÑπÔ∏è  Using mock mode (Claude CLI not available or --mock flag used)');\n  } else {\n    console.log('‚ÑπÔ∏è  Using real Claude CLI execution');\n  }\n  \n  console.log(`üìù Chain length: ${prompts.length} steps\\n`);\n  \n  const results = [];\n  \n  for (let i = 0; i < prompts.length; i++) {\n    const prompt = prompts[i];\n    console.log(`üîÑ Step ${i + 1}/${prompts.length}: ${prompt.slice(0, 50)}...`);\n    \n    let result;\n    if (useMock) {\n      result = mockResponse(prompt);\n    } else {\n      result = await executeClaudeCommand(prompt, timeout, false);\n    }\n    \n    results.push({\n      step: i + 1,\n      prompt: prompt.slice(0, 50),\n      success: result.success,\n      duration: result.duration\n    });\n    \n    if (!result.success) {\n      console.error(`‚ùå Step ${i + 1} failed`);\n      break;\n    }\n    \n    console.log(`‚úÖ Step ${i + 1} completed (${result.duration}ms)`);\n    if (flags.verbose && result.output) {\n      console.log(`   Output: ${result.output.slice(0, 200)}...`);\n    }\n  }\n  \n  // Summary\n  console.log('\\n' + '‚ïê'.repeat(50));\n  console.log('üìä Chain Summary');\n  console.log('‚ïê'.repeat(50));\n  \n  for (const result of results) {\n    const status = result.success ? '‚úÖ' : '‚ùå';\n    console.log(`${status} Step ${result.step}: ${result.prompt}... (${result.duration}ms)`);\n  }\n  \n  const totalTime = results.reduce((sum, r) => sum + r.duration, 0);\n  console.log(`\\n‚è±Ô∏è  Total execution time: ${totalTime}ms`);\n}\n\nexport default streamChainCommand;"],"names":["exec","execSync","checkClaudeAvailable","stdio","mockResponse","prompt","success","duration","output","slice","stream","error","executeClaudeCommand","timeout","useStreamJson","Promise","resolve","args","push","command","join","console","log","startTime","Date","now","maxBuffer","stdout","stderr","code","message","trim","streamChainCommand","flags","subcommand","result","repeat","prompts","runChain","length","useMock","mock","results","i","step","verbose","status","totalTime","reduce","sum","r"],"mappings":"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"}