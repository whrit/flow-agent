{"version":3,"sources":["../../../../src/cli/simple-commands/swarm.js"],"sourcesContent":["/**\n * Swarm command wrapper for simple CLI\n */\n\nimport { args, mkdirAsync, writeTextFile, exit, cwd } from '../node-compat.js';\nimport { spawn, execSync } from 'child_process';\nimport { existsSync, chmodSync, statSync, readFileSync } from 'fs';\nimport { open } from 'fs/promises';\nimport process from 'process';\nimport path from 'path';\n\n/**\n * Detects if the environment is headless (non-interactive)\n */\nfunction isHeadlessEnvironment() {\n  // Check for common CI environment variables\n  const ciEnvironments = [\n    'CI',\n    'GITHUB_ACTIONS',\n    'GITLAB_CI',\n    'JENKINS_URL',\n    'CIRCLECI',\n    'TRAVIS',\n    'BUILDKITE',\n    'DRONE',\n    'DOCKER_CONTAINER',\n  ];\n  \n  const isCI = ciEnvironments.some(env => process.env[env]);\n  \n  // Check if running in Docker\n  let isDocker = existsSync('/.dockerenv');\n  \n  // Additional Docker check for cgroup\n  if (!isDocker && existsSync('/proc/1/cgroup')) {\n    try {\n      const cgroupContent = readFileSync('/proc/1/cgroup', 'utf8');\n      isDocker = cgroupContent.includes('docker');\n    } catch {\n      // Ignore read errors\n    }\n  }\n  \n  // Check TTY availability\n  const hasTTY = process.stdin.isTTY && process.stdout.isTTY;\n  \n  return isCI || isDocker || !hasTTY;\n}\n\n/**\n * Basic swarm implementation for fallback scenarios\n */\nasync function basicSwarmNew(args, flags) {\n  const objective = (args || []).join(' ').trim();\n  \n  if (!objective) {\n    console.error('‚ùå Usage: swarm <objective>');\n    showSwarmHelp();\n    return;\n  }\n\n  const isHeadless = isHeadlessEnvironment();\n  \n  // Configure for headless mode\n  if (isHeadless) {\n    console.log('ü§ñ Headless environment detected - running in non-interactive mode');\n    flags = {\n      ...flags,\n      'non-interactive': true,\n      'output-format': flags['output-format'] || 'stream-json', // Use stream-json for Claude compatibility\n      'no-auto-permissions': false,\n    };\n  }\n\n  // Set up graceful shutdown handlers\n  const cleanup = () => {\n    console.log('\\nüõë Shutting down swarm gracefully...');\n    process.exit(0);\n  };\n\n  process.on('SIGTERM', cleanup);\n  process.on('SIGINT', cleanup);\n\n  try {\n    // Try to use the swarm executor\n    const { executeSwarm } = await import('./swarm-executor.js');\n    \n    console.log(`üêù Starting basic swarm execution...`);\n    console.log(`üìã Objective: ${objective}`);\n    console.log(`üéØ Strategy: ${flags.strategy || 'auto'}`);\n    console.log(`üèóÔ∏è  Mode: ${flags.mode || 'centralized'}`);\n    console.log(`ü§ñ Max Agents: ${flags['max-agents'] || 5}`);\n    \n    if (isHeadless) {\n      console.log(`üñ•Ô∏è  Headless Mode: Enabled`);\n      console.log(`üìÑ Output Format: ${flags['output-format']}`);\n    }\n\n    const result = await executeSwarm(objective, flags);\n\n    // Handle output based on format\n    if (flags['output-format'] === 'json') {\n      // In JSON mode, output clean JSON\n      const output = {\n        success: result.success,\n        swarmId: result.summary?.swarmId,\n        objective: objective,\n        duration: result.summary?.duration,\n        agents: result.summary?.totalAgents,\n        tasks: result.summary?.totalTasks,\n        timestamp: new Date().toISOString(),\n      };\n      \n      if (flags['output-file']) {\n        const fs = await import('fs/promises');\n        await fs.writeFile(flags['output-file'], JSON.stringify(output, null, 2));\n        console.log(`‚úÖ Output saved to: ${flags['output-file']}`);\n      } else {\n        console.log(JSON.stringify(output, null, 2));\n      }\n    } else {\n      // Text mode output\n      if (result.success) {\n        console.log(`\\n‚úÖ Swarm execution completed successfully!`);\n        if (result.summary) {\n          console.log(`   Duration: ${result.summary.duration}`);\n          console.log(`   Agents: ${result.summary.totalAgents}`);\n          console.log(`   Tasks: ${result.summary.totalTasks}`);\n        }\n      } else {\n        console.error(`\\n‚ùå Swarm execution failed: ${result.error}`);\n      }\n    }\n\n    return result;\n  } catch (error) {\n    console.error(`‚ùå Basic swarm execution error: ${error.message}`);\n    \n    // In headless mode, ensure we output JSON error\n    if (flags['output-format'] === 'json') {\n      const errorOutput = {\n        success: false,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      };\n      console.log(JSON.stringify(errorOutput, null, 2));\n    }\n    \n    throw error;\n  }\n}\n\nfunction showSwarmHelp() {\n  console.log(`\nüêù Claude Flow Advanced Swarm System\n\nUSAGE:\n  claude-flow swarm <objective> [options]\n\nEXAMPLES:\n  claude-flow swarm \"Build a REST API with authentication\"\n  claude-flow swarm \"Research cloud architecture patterns\" --strategy research\n  claude-flow swarm \"Analyze database performance\" --max-agents 3 --parallel\n  claude-flow swarm \"Develop user registration feature\" --mode distributed\n  claude-flow swarm \"Optimize React app performance\" --strategy optimization\n  claude-flow swarm \"Create microservice\" --executor  # Use built-in executor\n  claude-flow swarm \"Build API\" --claude  # Open Claude Code CLI\n  claude-flow swarm \"Build API endpoints\" --output-format json  # Get JSON output\n  claude-flow swarm \"Research AI trends\" --output-format json --output-file results.json\n\nDEFAULT BEHAVIOR:\n  Swarm attempts to open Claude Code CLI with comprehensive MCP tool instructions\n  including memory coordination, agent management, and task orchestration.\n  \n  If Claude CLI is not available:\n  ‚Ä¢ Use --claude flag to open Claude Code CLI\n  ‚Ä¢ Use --executor flag to run with the built-in executor\n\nSTRATEGIES:\n  auto           Automatically determine best approach (default)\n  research       Research and information gathering\n  development    Software development and coding\n  analysis       Data analysis and insights\n  testing        Testing and quality assurance\n  optimization   Performance optimization\n  maintenance    System maintenance\n\nMODES:\n  centralized    Single coordinator (default)\n  distributed    Multiple coordinators\n  hierarchical   Tree structure coordination\n  mesh           Peer-to-peer coordination\n  hybrid         Mixed coordination strategies\n\nKEY FEATURES:\n  ü§ñ Intelligent agent management with specialized types\n  ‚ö° Timeout-free background task execution\n  üß† Distributed memory sharing between agents\n  üîÑ Work stealing and advanced load balancing\n  üõ°Ô∏è  Circuit breaker patterns for fault tolerance\n  üìä Real-time monitoring and comprehensive metrics\n  üéõÔ∏è  Multiple coordination strategies and algorithms\n  üíæ Persistent state with backup and recovery\n  üîí Security features with encryption options\n  üñ•Ô∏è  Interactive terminal UI for management\n\nOPTIONS:\n  --strategy <type>          Execution strategy (default: auto)\n  --mode <type>              Coordination mode (default: centralized)\n  --max-agents <n>           Maximum agents (default: 5)\n  --timeout <minutes>        Timeout in minutes (default: 60)\n  --task-timeout-minutes <n> Task execution timeout in minutes (default: 59)\n  --parallel                 Enable parallel execution\n  --distributed              Enable distributed coordination\n  --monitor                  Enable real-time monitoring\n  --ui                       Launch terminal UI interface\n  --background               Run in background mode\n  --review                   Enable peer review\n  --testing                  Enable automated testing\n  --encryption               Enable encryption\n  --verbose                  Enable detailed logging\n  --dry-run                  Show configuration without executing\n  --executor                 Use built-in executor instead of Claude Code\n  --claude                   Open Claude Code CLI\n  --output-format <format>   Output format: json, text (default: text)\n  --output-file <path>       Save output to file instead of stdout\n  --no-interactive           Run in non-interactive mode (auto-enabled with --output-format json)\n  --auto                     (Deprecated: auto-permissions enabled by default)\n  --no-auto-permissions      Disable automatic --dangerously-skip-permissions\n  --analysis                 Enable analysis/read-only mode (no code changes)\n  --read-only                Enable read-only mode (alias for --analysis)\n\nADVANCED OPTIONS:\n  --quality-threshold <n>    Quality threshold 0-1 (default: 0.8)\n  --memory-namespace <name>  Memory namespace (default: swarm)\n  --agent-selection <type>   Agent selection strategy\n  --task-scheduling <type>   Task scheduling algorithm\n  --load-balancing <type>    Load balancing method\n  --fault-tolerance <type>   Fault tolerance strategy\n  --headless                 Force headless mode for CI/Docker environments\n  --health-check             Perform health check and exit (for Docker health)\n  --json-logs                Output all logs in JSON format for log aggregation\n\nHEADLESS MODE:\n  Automatically detected and enabled when running in:\n  - CI/CD environments (GitHub Actions, GitLab CI, Jenkins, etc.)\n  - Docker containers without TTY\n  - Non-interactive shells (no stdin/stdout TTY)\n  \n  In headless mode:\n  - Output defaults to JSON format\n  - Non-interactive mode is enabled\n  - Graceful shutdown on SIGTERM/SIGINT\n  - Suitable for containerized deployments\n\nFor complete documentation and examples:\nhttps://github.com/ruvnet/claude-code-flow/docs/swarm.md\n`);\n}\n\nexport async function swarmCommand(args, flags) {\n  // Handle headless mode early\n  if (flags && flags.headless) {\n    const isHeadless = isHeadlessEnvironment();\n    // Configure for headless mode\n    flags = {\n      ...flags,\n      'non-interactive': true,\n      'output-format': flags['output-format'] || 'stream-json',\n      'no-auto-permissions': false,\n    };\n  }\n  \n  // Handle health check first\n  if (flags && flags['health-check']) {\n    try {\n      // Quick health check for Docker/K8s\n      console.log(JSON.stringify({\n        status: 'healthy',\n        service: 'claude-flow-swarm',\n        version: process.env.npm_package_version || '2.0.0',\n        timestamp: new Date().toISOString()\n      }));\n      process.exit(0);\n    } catch (error) {\n      console.error(JSON.stringify({\n        status: 'unhealthy',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      }));\n      process.exit(1);\n    }\n  }\n\n  const objective = (args || []).join(' ').trim();\n\n  if (!objective) {\n    console.error('‚ùå Usage: swarm <objective>');\n    showSwarmHelp();\n    return;\n  }\n\n  // Force headless mode if flag is set\n  if (flags && flags.headless) {\n    const isHeadless = isHeadlessEnvironment();\n    if (!isHeadless) {\n      console.log('ü§ñ Forcing headless mode as requested');\n    }\n    flags = {\n      ...flags,\n      'non-interactive': true,\n      'output-format': flags['output-format'] || 'json',\n      'no-auto-permissions': false,\n    };\n  }\n\n  // Handle JSON output format\n  const outputFormat = flags && flags['output-format'];\n  const outputFile = flags && flags['output-file'];\n  const isJsonOutput = outputFormat === 'json';\n  const isNonInteractive = isJsonOutput || (flags && flags['no-interactive']);\n  const useJsonLogs = flags && flags['json-logs'];\n\n  // Override console.log for JSON logs if requested\n  if (useJsonLogs) {\n    const originalLog = console.log;\n    const originalError = console.error;\n    \n    console.log = (...args) => {\n      originalLog(JSON.stringify({\n        level: 'info',\n        message: args.join(' '),\n        timestamp: new Date().toISOString(),\n        service: 'claude-flow-swarm'\n      }));\n    };\n    \n    console.error = (...args) => {\n      originalError(JSON.stringify({\n        level: 'error',\n        message: args.join(' '),\n        timestamp: new Date().toISOString(),\n        service: 'claude-flow-swarm'\n      }));\n    };\n  }\n\n  // Handle analysis/read-only mode\n  const isAnalysisMode = flags && (flags.analysis || flags['read-only']);\n  const analysisMode = isAnalysisMode ? 'analysis' : 'standard';\n\n  // For JSON output, allow using Claude with stream-json format\n  // Only force executor mode if explicitly using 'json' format (not 'stream-json')\n  if (flags && flags['output-format'] === 'json' && !(flags && flags.executor)) {\n    // Keep backward compatibility - regular 'json' format uses executor\n    flags = { ...(flags || {}), executor: true };\n  }\n\n  // Check if we should use the old executor (opt-in with --executor flag)\n  if (flags && flags.executor) {\n    // Continue with the old swarm executor implementation below\n  } else {\n    // Default behavior: spawn Claude Code with comprehensive swarm MCP instructions\n    try {\n      const { execSync, spawn } = await import('child_process');\n\n      // Get configuration values first\n      const strategy = flags.strategy || 'auto';\n      const mode = flags.mode || 'centralized';\n      const maxAgents = flags['max-agents'] || 5;\n\n      // Get strategy-specific guidance\n      const strategyGuidance = getStrategyGuidance(strategy, objective);\n      const modeGuidance = getModeGuidance(mode);\n      const agentRecommendations = getAgentRecommendations(strategy, maxAgents, objective);\n\n      const enableSparc =\n        flags.sparc !== false && (strategy === 'development' || strategy === 'auto');\n\n      // Build the complete swarm prompt before checking for claude\n      const swarmPrompt = `You are orchestrating a Claude Flow Swarm using Claude Code's Task tool for agent execution.\n\nüö® CRITICAL INSTRUCTION: Use Claude Code's Task Tool for ALL Agent Spawning!\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úÖ Claude Code's Task tool = Spawns agents that DO the actual work\n‚ùå MCP tools = Only for coordination setup, NOT for execution\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüéØ OBJECTIVE: ${objective}\n\nüêù SWARM CONFIGURATION:\n- Strategy: ${strategy}\n- Mode: ${mode}\n- Max Agents: ${maxAgents}\n- Timeout: ${flags.timeout || 60} minutes\n- Parallel Execution: MANDATORY (Always use BatchTool)\n- Review Mode: ${flags.review || false}\n- Testing Mode: ${flags.testing || false}\n- Analysis Mode: ${isAnalysisMode ? 'ENABLED (Read-Only)' : 'DISABLED'}\n\n${\n  isAnalysisMode\n    ? `üîç ANALYSIS MODE CONSTRAINTS:\n\n‚ö†Ô∏è  READ-ONLY MODE ACTIVE - NO CODE MODIFICATIONS ALLOWED\n\nREQUIRED BEHAVIORS:\n1. ‚úÖ READ files for analysis (Read tool)\n2. ‚úÖ SEARCH codebases (Glob, Grep tools)\n3. ‚úÖ ANALYZE code structure and patterns\n4. ‚úÖ GENERATE reports and documentation\n5. ‚úÖ CREATE analysis summaries\n6. ‚úÖ STORE findings in memory for collaboration\n7. ‚úÖ COMMUNICATE between agents about findings\n\nFORBIDDEN OPERATIONS:\n1. ‚ùå NEVER use Write tool to modify files\n2. ‚ùå NEVER use Edit or MultiEdit tools\n3. ‚ùå NEVER use Bash to run commands that modify files\n4. ‚ùå NEVER create new files or directories\n5. ‚ùå NEVER install packages or dependencies\n6. ‚ùå NEVER modify configuration files\n7. ‚ùå NEVER execute code that changes system state\n\nALL AGENTS MUST OPERATE IN READ-ONLY MODE. Focus on:\n- Code analysis and understanding\n- Security vulnerability assessment\n- Performance bottleneck identification\n- Architecture documentation\n- Technical debt analysis\n- Dependency mapping\n- Testing strategy recommendations\n\nGenerate comprehensive reports instead of making changes.\n\n`\n    : ''\n}üö® CRITICAL: PARALLEL EXECUTION IS MANDATORY! üö®\n\nüìã CLAUDE-FLOW SWARM BATCHTOOL INSTRUCTIONS\n\n‚ö° THE GOLDEN RULE:\nIf you need to do X operations, they should be in 1 message, not X messages.\n\nüéØ MANDATORY PATTERNS FOR CLAUDE-FLOW SWARMS:\n\n1Ô∏è‚É£ **SWARM INITIALIZATION** - Use Claude Code's Task Tool for Agents:\n\nStep A: Optional MCP Coordination Setup (Single Message):\n\\`\\`\\`javascript\n[MCP Tools - Coordination ONLY]:\n  // Set up coordination topology (OPTIONAL)\n  mcp__claude-flow__swarm_init {\"topology\": \"mesh\", \"maxAgents\": ${maxAgents}}\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"SwarmLead\"}\n  mcp__claude-flow__memory_store {\"key\": \"swarm/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__memory_store {\"key\": \"swarm/config\", \"value\": {\"strategy\": \"${strategy}\"}}\n\\`\\`\\`\n\nStep B: REQUIRED - Claude Code Task Tool for ACTUAL Agent Execution (Single Message):\n\\`\\`\\`javascript\n[Claude Code Task Tool - CONCURRENT Agent Spawning]:\n  // Spawn ALL agents using Task tool in ONE message\n  Task(\"Coordinator\", \"Lead swarm coordination. Use hooks for memory sharing.\", \"coordinator\")\n  Task(\"Researcher\", \"Analyze requirements and patterns. Coordinate via hooks.\", \"researcher\")\n  Task(\"Backend Dev\", \"Implement server-side features. Share progress via hooks.\", \"coder\")\n  Task(\"Frontend Dev\", \"Build UI components. Sync with backend via memory.\", \"coder\")\n  Task(\"QA Engineer\", \"Create and run tests. Report findings via hooks.\", \"tester\")\n  \n  // Batch ALL todos in ONE TodoWrite call (5-10+ todos)\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize ${maxAgents} agent swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Analyze: ${objective}\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Design architecture\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Implement backend\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"5\", \"content\": \"Implement frontend\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"6\", \"content\": \"Write unit tests\", \"status\": \"pending\", \"priority\": \"medium\"},\n    {\"id\": \"7\", \"content\": \"Integration testing\", \"status\": \"pending\", \"priority\": \"medium\"},\n    {\"id\": \"8\", \"content\": \"Performance optimization\", \"status\": \"pending\", \"priority\": \"low\"},\n    {\"id\": \"9\", \"content\": \"Documentation\", \"status\": \"pending\", \"priority\": \"low\"}\n  ]}\n\\`\\`\\`\n\n‚ö†Ô∏è CRITICAL: Claude Code's Task tool does the ACTUAL work!\n- MCP tools = Coordination setup only\n- Task tool = Spawns agents that execute real work\n- ALL agents MUST be spawned in ONE message\n- ALL todos MUST be batched in ONE TodoWrite call\n\n2Ô∏è‚É£ **TASK COORDINATION** - Batch ALL assignments:\n\\`\\`\\`javascript\n[Single Message]:\n  // Assign all tasks\n  mcp__claude-flow__task_assign {\"taskId\": \"research-1\", \"agentId\": \"researcher-1\"}\n  mcp__claude-flow__task_assign {\"taskId\": \"design-1\", \"agentId\": \"architect-1\"}\n  mcp__claude-flow__task_assign {\"taskId\": \"code-1\", \"agentId\": \"coder-1\"}\n  mcp__claude-flow__task_assign {\"taskId\": \"code-2\", \"agentId\": \"coder-2\"}\n  \n  // Communicate to all agents\n  mcp__claude-flow__agent_communicate {\"to\": \"all\", \"message\": \"Begin phase 1\"}\n  \n  // Update multiple task statuses\n  mcp__claude-flow__task_update {\"taskId\": \"research-1\", \"status\": \"in_progress\"}\n  mcp__claude-flow__task_update {\"taskId\": \"design-1\", \"status\": \"pending\"}\n\\`\\`\\`\n\n3Ô∏è‚É£ **MEMORY COORDINATION** - Store/retrieve in batches:\n\\`\\`\\`javascript\n[Single Message]:\n  // Store multiple findings\n  mcp__claude-flow__memory_store {\"key\": \"research/requirements\", \"value\": {...}}\n  mcp__claude-flow__memory_store {\"key\": \"research/constraints\", \"value\": {...}}\n  mcp__claude-flow__memory_store {\"key\": \"architecture/decisions\", \"value\": {...}}\n  \n  // Retrieve related data\n  mcp__claude-flow__memory_retrieve {\"key\": \"research/*\"}\n  mcp__claude-flow__memory_search {\"pattern\": \"architecture\"}\n\\`\\`\\`\n\n4Ô∏è‚É£ **FILE & CODE OPERATIONS** - Parallel execution:\n\\`\\`\\`javascript\n[Single Message]:\n  // Read multiple files\n  Read {\"file_path\": \"/src/index.js\"}\n  Read {\"file_path\": \"/src/config.js\"}\n  Read {\"file_path\": \"/package.json\"}\n  \n  // Write multiple files\n  Write {\"file_path\": \"/src/api/auth.js\", \"content\": \"...\"}\n  Write {\"file_path\": \"/src/api/users.js\", \"content\": \"...\"}\n  Write {\"file_path\": \"/tests/auth.test.js\", \"content\": \"...\"}\n  \n  // Update memory with results\n  mcp__claude-flow__memory_store {\"key\": \"code/api/auth\", \"value\": \"implemented\"}\n  mcp__claude-flow__memory_store {\"key\": \"code/api/users\", \"value\": \"implemented\"}\n\\`\\`\\`\n\n5Ô∏è‚É£ **MONITORING & STATUS** - Combined checks:\n\\`\\`\\`javascript\n[Single Message]:\n  mcp__claude-flow__swarm_monitor {}\n  mcp__claude-flow__swarm_status {}\n  mcp__claude-flow__agent_list {\"status\": \"active\"}\n  mcp__claude-flow__task_status {\"includeCompleted\": false}\n  TodoRead {}\n\\`\\`\\`\n\n‚ùå NEVER DO THIS (Sequential = SLOW):\n\\`\\`\\`\nMessage 1: mcp__claude-flow__agent_spawn\nMessage 2: mcp__claude-flow__agent_spawn\nMessage 3: TodoWrite (one todo)\nMessage 4: Read file\nMessage 5: mcp__claude-flow__memory_store\n\\`\\`\\`\n\n‚úÖ ALWAYS DO THIS (Batch = FAST):\n\\`\\`\\`\nMessage 1: [All operations in one message]\n\\`\\`\\`\n\nüí° BATCHTOOL BEST PRACTICES:\n- Group by operation type (all spawns, all reads, all writes)\n- Use TodoWrite with 5-10 todos at once\n- Combine file operations when analyzing codebases\n- Store multiple memory items per message\n- Never send more than one message for related operations\n\n${strategyGuidance}\n\n${modeGuidance}\n\n${agentRecommendations}\n\nüìã MANDATORY PARALLEL WORKFLOW:\n\n1. **INITIAL SPAWN (Single BatchTool Message):**\n   - Spawn ALL agents at once\n   - Create ALL initial todos at once\n   - Store initial memory state\n   - Create task hierarchy\n   \n   Example:\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__agent_spawn (coordinator)\n     mcp__claude-flow__agent_spawn (architect)\n     mcp__claude-flow__agent_spawn (coder-1)\n     mcp__claude-flow__agent_spawn (coder-2)\n     mcp__claude-flow__agent_spawn (tester)\n     mcp__claude-flow__memory_store { key: \"init\", value: {...} }\n     mcp__claude-flow__task_create { name: \"Main\", subtasks: [...] }\n     TodoWrite { todos: [5-10 todos at once] }\n   \\`\\`\\`\n\n2. **TASK EXECUTION (Parallel Batches):**\n   - Assign multiple tasks in one batch\n   - Update multiple statuses together\n   - Store multiple results simultaneously\n   \n3. **MONITORING (Combined Operations):**\n   - Check all agent statuses together\n   - Retrieve multiple memory items\n   - Update all progress markers\n\nüîß AVAILABLE MCP TOOLS FOR SWARM COORDINATION:\n\nüìä MONITORING & STATUS:\n- mcp__claude-flow__swarm_status - Check current swarm status and agent activity\n- mcp__claude-flow__swarm_monitor - Real-time monitoring of swarm execution\n- mcp__claude-flow__agent_list - List all active agents and their capabilities\n- mcp__claude-flow__task_status - Check task progress and dependencies\n\nüß† MEMORY & KNOWLEDGE:\n- mcp__claude-flow__memory_store - Store knowledge in swarm collective memory\n- mcp__claude-flow__memory_retrieve - Retrieve shared knowledge from memory\n- mcp__claude-flow__memory_search - Search collective memory by pattern\n- mcp__claude-flow__memory_sync - Synchronize memory across agents\n\nü§ñ AGENT MANAGEMENT:\n- mcp__claude-flow__agent_spawn - Spawn specialized agents for tasks\n- mcp__claude-flow__agent_assign - Assign tasks to specific agents\n- mcp__claude-flow__agent_communicate - Send messages between agents\n- mcp__claude-flow__agent_coordinate - Coordinate agent activities\n\nüìã TASK ORCHESTRATION:\n- mcp__claude-flow__task_create - Create new tasks with dependencies\n- mcp__claude-flow__task_assign - Assign tasks to agents\n- mcp__claude-flow__task_update - Update task status and progress\n- mcp__claude-flow__task_complete - Mark tasks as complete with results\n\nüéõÔ∏è COORDINATION MODES:\n1. CENTRALIZED (default): Single coordinator manages all agents\n   - Use when: Clear hierarchy needed, simple workflows\n   - Tools: agent_assign, task_create, swarm_monitor\n\n2. DISTRIBUTED: Multiple coordinators share responsibility\n   - Use when: Large scale tasks, fault tolerance needed\n   - Tools: agent_coordinate, memory_sync, task_update\n\n3. HIERARCHICAL: Tree structure with team leads\n   - Use when: Complex projects with sub-teams\n   - Tools: agent_spawn (with parent), task_create (with subtasks)\n\n4. MESH: Peer-to-peer agent coordination\n   - Use when: Maximum flexibility, self-organizing teams\n   - Tools: agent_communicate, memory_store/retrieve\n\n‚ö° EXECUTION WORKFLOW - ALWAYS USE BATCHTOOL:\n${\n  enableSparc\n    ? `\n1. SPARC METHODOLOGY WITH PARALLEL EXECUTION:\n   \n   S - Specification Phase (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__memory_store { key: \"specs/requirements\", value: {...} }\n     mcp__claude-flow__task_create { name: \"Requirement 1\" }\n     mcp__claude-flow__task_create { name: \"Requirement 2\" }\n     mcp__claude-flow__task_create { name: \"Requirement 3\" }\n     mcp__claude-flow__agent_spawn { type: \"researcher\", name: \"SpecAnalyst\" }\n   \\`\\`\\`\n   \n   P - Pseudocode Phase (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__memory_store { key: \"pseudocode/main\", value: {...} }\n     mcp__claude-flow__task_create { name: \"Design API\" }\n     mcp__claude-flow__task_create { name: \"Design Data Model\" }\n     mcp__claude-flow__agent_communicate { to: \"all\", message: \"Review design\" }\n   \\`\\`\\`\n   \n   A - Architecture Phase (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__agent_spawn { type: \"architect\", name: \"LeadArchitect\" }\n     mcp__claude-flow__memory_store { key: \"architecture/decisions\", value: {...} }\n     mcp__claude-flow__task_create { name: \"Backend\", subtasks: [...] }\n     mcp__claude-flow__task_create { name: \"Frontend\", subtasks: [...] }\n   \\`\\`\\`\n   \n   R - Refinement Phase (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__swarm_monitor {}\n     mcp__claude-flow__task_update { taskId: \"1\", progress: 50 }\n     mcp__claude-flow__task_update { taskId: \"2\", progress: 75 }\n     mcp__claude-flow__memory_store { key: \"learnings/iteration1\", value: {...} }\n   \\`\\`\\`\n   \n   C - Completion Phase (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__task_complete { taskId: \"1\", results: {...} }\n     mcp__claude-flow__task_complete { taskId: \"2\", results: {...} }\n     mcp__claude-flow__memory_retrieve { pattern: \"**/*\" }\n     TodoWrite { todos: [{content: \"Final review\", status: \"completed\"}] }\n   \\`\\`\\`\n`\n    : `\n1. STANDARD SWARM EXECUTION WITH PARALLEL OPERATIONS:\n   \n   Initial Setup (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__task_create { name: \"Main\", subtasks: [...] }\n     mcp__claude-flow__agent_spawn { type: \"coordinator\" }\n     mcp__claude-flow__agent_spawn { type: \"coder\" }\n     mcp__claude-flow__agent_spawn { type: \"tester\" }\n     mcp__claude-flow__memory_store { key: \"init\", value: {...} }\n   \\`\\`\\`\n   \n   Task Assignment (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__task_assign { taskId: \"1\", agentId: \"agent-1\" }\n     mcp__claude-flow__task_assign { taskId: \"2\", agentId: \"agent-2\" }\n     mcp__claude-flow__task_assign { taskId: \"3\", agentId: \"agent-3\" }\n   \\`\\`\\`\n   \n   Monitoring & Updates (Single BatchTool):\n   \\`\\`\\`\n   [BatchTool]:\n     mcp__claude-flow__swarm_monitor {}\n     mcp__claude-flow__agent_communicate { to: \"all\", message: \"Status update\" }\n     mcp__claude-flow__memory_store { key: \"progress\", value: {...} }\n   \\`\\`\\`\n`\n}\n\nü§ù AGENT TYPES & THEIR MCP TOOL USAGE:\n\nCOORDINATOR:\n- Primary tools: swarm_monitor, agent_assign, task_create\n- Monitors overall progress and assigns work\n- Uses memory_store for decisions and memory_retrieve for context\n\nRESEARCHER:\n- Primary tools: memory_search, memory_store\n- Gathers information and stores findings\n- Uses agent_communicate to share discoveries\n\nCODER:\n- Primary tools: task_update, memory_retrieve, memory_store\n- Implements solutions and updates progress\n- Retrieves specs from memory, stores code artifacts\n\nANALYST:\n- Primary tools: memory_search, swarm_monitor\n- Analyzes data and patterns\n- Stores insights and recommendations\n\nTESTER:\n- Primary tools: task_status, agent_communicate\n- Validates implementations\n- Reports issues via task_update\n\nüìù EXAMPLE MCP TOOL USAGE PATTERNS:\n\n1. Starting a swarm:\n   mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"SwarmLead\"}\n   mcp__claude-flow__memory_store {\"key\": \"objective\", \"value\": \"${objective}\"}\n   mcp__claude-flow__task_create {\"name\": \"Main Objective\", \"type\": \"parent\"}\n\n2. Spawning worker agents:\n   mcp__claude-flow__agent_spawn {\"type\": \"researcher\", \"capabilities\": [\"web-search\"]}\n   mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"capabilities\": [\"python\", \"testing\"]}\n   mcp__claude-flow__task_assign {\"taskId\": \"task-123\", \"agentId\": \"agent-456\"}\n\n3. Coordinating work:\n   mcp__claude-flow__agent_communicate {\"to\": \"agent-123\", \"message\": \"Begin phase 2\"}\n   mcp__claude-flow__memory_store {\"key\": \"phase1/results\", \"value\": {...}}\n   mcp__claude-flow__task_update {\"taskId\": \"task-123\", \"progress\": 75}\n\n4. Monitoring progress:\n   mcp__claude-flow__swarm_monitor {}\n   mcp__claude-flow__task_status {\"includeCompleted\": true}\n   mcp__claude-flow__agent_list {\"status\": \"active\"}\n\nüíæ MEMORY PATTERNS:\n\nUse hierarchical keys for organization:\n- \"specs/requirements\" - Store specifications\n- \"architecture/decisions\" - Architecture choices\n- \"code/modules/[name]\" - Code artifacts\n- \"tests/results/[id]\" - Test outcomes\n- \"docs/api/[endpoint]\" - Documentation\n\nüöÄ BEGIN SWARM EXECUTION:\n\nStart by spawning a coordinator agent and creating the initial task structure. Use the MCP tools to orchestrate the swarm, coordinate agents, and track progress. Remember to store important decisions and artifacts in collective memory for other agents to access.\n\nThe swarm should be self-documenting - use memory_store to save all important information, decisions, and results throughout the execution.`;\n\n      // If --claude flag is used, force Claude Code even if CLI not available\n      if (flags && flags.claude) {\n        // Inject memory coordination protocol into CLAUDE.md\n        try {\n          const { injectMemoryProtocol, enhanceSwarmPrompt } = await import('./inject-memory-protocol.js');\n          await injectMemoryProtocol();\n          \n          // Enhance the prompt with memory coordination instructions\n          swarmPrompt = enhanceSwarmPrompt(swarmPrompt, maxAgents);\n        } catch (err) {\n          // If injection module not available, continue with original prompt\n          console.log('‚ö†Ô∏è  Memory protocol injection not available, using standard prompt');\n        }\n        \n        // --claude flag means interactive mode, so don't apply non-interactive\n        console.log('üêù Launching Claude Flow Swarm System...');\n        console.log(`üìã Objective: ${objective}`);\n        console.log(`üéØ Strategy: ${strategy}`);\n        console.log(`üèóÔ∏è  Mode: ${mode}`);\n        console.log(`ü§ñ Max Agents: ${maxAgents}\\n`);\n        \n        console.log('üöÄ Launching Claude Code with Swarm Coordination');\n        console.log('üìù Memory protocol injected into CLAUDE.md');\n        console.log('‚îÄ'.repeat(60));\n        \n        // Build arguments properly: for interactive mode, prompt can be first\n        const claudeArgs = [];\n        \n        // Add auto-permission flag first\n        if (flags['dangerously-skip-permissions'] !== false && !flags['no-auto-permissions']) {\n          claudeArgs.push('--dangerously-skip-permissions');\n          console.log('üîì Using --dangerously-skip-permissions by default for seamless swarm execution');\n        }\n        \n        // Add the enhanced prompt\n        claudeArgs.push(swarmPrompt);\n        \n        // --claude flag means interactive mode, so don't add non-interactive flags\n        \n        // For --claude interactive mode, spawn Claude directly\n        // Temporarily disable telemetry to avoid console output interference\n        const claudeEnv = { ...process.env };\n        \n        // Remove telemetry env vars to prevent console output\n        delete claudeEnv.CLAUDE_CODE_ENABLE_TELEMETRY;\n        delete claudeEnv.OTEL_METRICS_EXPORTER;\n        delete claudeEnv.OTEL_LOGS_EXPORTER;\n        \n        const claudeProcess = spawn('claude', claudeArgs, {\n          stdio: 'inherit',\n          shell: false,\n          env: claudeEnv\n        });\n        \n        console.log('\\n‚úì Claude Code launched with swarm coordination prompt!');\n        console.log('  The swarm coordinator will orchestrate all agent tasks');\n        console.log('  Use MCP tools for coordination and memory sharing');\n        \n        console.log('\\nüí° Pro Tips:');\n        console.log('‚îÄ'.repeat(30));\n        console.log('‚Ä¢ Use TodoWrite to track parallel tasks');\n        console.log('‚Ä¢ Store results with mcp__claude-flow__memory_usage');\n        console.log('‚Ä¢ Monitor progress with mcp__claude-flow__swarm_monitor');\n        console.log('‚Ä¢ Check task status with mcp__claude-flow__task_status');\n        \n        // Set up clean termination\n        const cleanup = () => {\n          console.log('\\nüõë Shutting down swarm gracefully...');\n          if (claudeProcess && !claudeProcess.killed) {\n            claudeProcess.kill('SIGTERM');\n          }\n          process.exit(0);\n        };\n        \n        process.on('SIGINT', cleanup);\n        process.on('SIGTERM', cleanup);\n        \n        // Wait for claude to exit\n        claudeProcess.on('exit', (code) => {\n          if (code === 0) {\n            console.log('\\n‚úì Swarm execution completed successfully');\n          } else if (code !== null) {\n            console.log(`\\n‚úó Swarm execution exited with code ${code}`);\n          }\n          process.exit(code || 0);\n        });\n        \n        // Handle spawn errors (e.g., claude not found)\n        claudeProcess.on('error', (err) => {\n          if (err.code === 'ENOENT') {\n            console.error('\\n‚ùå Claude Code CLI not found. Please install Claude Code:');\n            console.error('   https://claude.ai/download');\n          } else {\n            console.error('\\n‚ùå Failed to launch Claude Code:', err.message);\n          }\n          process.exit(1);\n        });\n        \n        return;\n      }\n\n      // Check if we're in non-interactive/headless mode FIRST (like alpha.83)\n      const isNonInteractive = flags['no-interactive'] || \n                               flags['non-interactive'] || \n                               flags['output-format'] === 'stream-json' ||\n                               isHeadlessEnvironment();\n      \n      // Check if claude command exists\n      let claudeAvailable = false;\n      try {\n        execSync('which claude', { stdio: 'ignore' });\n        claudeAvailable = true;\n      } catch {\n        if (!isNonInteractive) {\n          console.log('‚ö†Ô∏è  Claude Code CLI not found in PATH');\n          console.log('Install it with: npm install -g @anthropic-ai/claude-code');\n          console.log('Or use --claude flag to open Claude Code CLI');\n          console.log('\\nWould spawn Claude Code with swarm objective:');\n          console.log(`üìã Objective: ${objective}`);\n          console.log('\\nOptions:');\n          console.log('  ‚Ä¢ Use --executor flag for built-in executor: claude-flow swarm \"objective\" --executor');\n          console.log('  ‚Ä¢ Use --claude flag to open Claude Code CLI: claude-flow swarm \"objective\" --claude');\n        } else {\n          // In non-interactive mode, output JSON error\n          console.error(JSON.stringify({\n            error: 'Claude Code CLI not found',\n            message: 'Install with: npm install -g @anthropic-ai/claude-code',\n            fallback: 'Use --executor flag for built-in executor'\n          }));\n        }\n        return;\n      }\n\n      // Claude is available, use it to run swarm\n      if (!isNonInteractive) {\n        console.log('üêù Launching Claude Flow Swarm System...');\n        console.log(`üìã Objective: ${objective}`);\n        console.log(`üéØ Strategy: ${flags.strategy || 'auto'}`);\n        console.log(`üèóÔ∏è  Mode: ${flags.mode || 'centralized'}`);\n        console.log(`ü§ñ Max Agents: ${flags['max-agents'] || 5}`);\n        if (isAnalysisMode) {\n          console.log(`üîç Analysis Mode: ENABLED (Read-Only - No Code Changes)`);\n        }\n        console.log();\n      } else {\n        // Non-interactive mode output\n        console.log('ü§ñ Running in non-interactive mode with Claude');\n        console.log('üìã Command: claude [prompt] -p --output-format stream-json --verbose');\n      }\n\n      // Continue with the default swarm behavior if not using --claude flag\n\n      // Build arguments in correct order: flags first, then prompt\n      const claudeArgs = [];\n\n      // Add non-interactive flags FIRST if needed\n      if (isNonInteractive) {\n        claudeArgs.push('-p'); // Print mode\n        claudeArgs.push('--output-format', 'stream-json'); // JSON streaming\n        claudeArgs.push('--verbose'); // Verbose output\n      }\n\n      // Add auto-permission flag BEFORE the prompt\n      if (flags['dangerously-skip-permissions'] !== false && !flags['no-auto-permissions']) {\n        claudeArgs.push('--dangerously-skip-permissions');\n        if (!isNonInteractive) {\n          console.log(\n            'üîì Using --dangerously-skip-permissions by default for seamless swarm execution',\n          );\n        }\n      }\n\n      // Add the prompt as the LAST argument\n      claudeArgs.push(swarmPrompt);\n\n      // Spawn claude with properly ordered arguments\n      const claudeProcess = spawn('claude', claudeArgs, {\n        stdio: 'inherit',\n        shell: false,\n      });\n\n      if (!isNonInteractive) {\n        console.log('‚úì Claude Code launched with swarm coordination prompt!');\n        console.log('\\nüöÄ The swarm coordination instructions have been injected into Claude Code');\n        console.log('   The prompt includes:');\n        console.log('   ‚Ä¢ Strategy-specific guidance for', strategy);\n        console.log('   ‚Ä¢ Coordination patterns for', mode, 'mode');\n        console.log('   ‚Ä¢ Recommended agents and MCP tool usage');\n        console.log('   ‚Ä¢ Complete workflow documentation\\n');\n      }\n\n      // Handle process events\n      claudeProcess.on('error', (err) => {\n        console.error('‚ùå Failed to launch Claude Code:', err.message);\n      });\n\n      // Don't wait for completion - let it run\n      return;\n    } catch (error) {\n      console.error('‚ùå Failed to spawn Claude Code:', error.message);\n      console.log('\\nFalling back to built-in executor...');\n      // Fall through to executor implementation\n    }\n  }\n\n  // Check if we should run in background mode\n  if (flags && flags.background && !process.env.CLAUDE_SWARM_NO_BG) {\n    // Check if we're in Deno environment\n    if (typeof Deno !== 'undefined') {\n      // In Deno, spawn a new process for true background execution\n      const objective = (args || []).join(' ').trim();\n      const swarmId = `swarm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const swarmRunDir = `./swarm-runs/${swarmId}`;\n\n      // Create swarm directory\n      await mkdirAsync(swarmRunDir, { recursive: true });\n\n      console.log(`üêù Launching swarm in background mode...`);\n      console.log(`üìã Objective: ${objective}`);\n      console.log(`üÜî Swarm ID: ${swarmId}`);\n      console.log(`üìÅ Results: ${swarmRunDir}`);\n\n      // Build command args without background flag (to prevent infinite loop)\n      const commandArgs = ['run', '--allow-all', import.meta.url, objective];\n      const newFlags = { ...flags };\n      delete newFlags.background; // Remove background flag\n\n      for (const [key, value] of Object.entries(newFlags)) {\n        commandArgs.push(`--${key}`);\n        if (value !== true) {\n          commandArgs.push(String(value));\n        }\n      }\n\n      // Create log file\n      const logFile = `${swarmRunDir}/swarm.log`;\n      const logHandle = await open(logFile, 'w');\n\n      // Create a script to run the swarm without background flag\n      const scriptContent = `#!/usr/bin/env -S deno run --allow-all\nimport { swarmCommand } from \"${import.meta.url}\";\nimport { cwd, exit, existsSync } from '../node-compat.js';\nimport process from 'process';\n\n// Remove background flag to prevent recursion\nconst flags = ${JSON.stringify(newFlags)};\nconst args = ${JSON.stringify(args)};\n\n// Set env to prevent background spawning\nprocess.env.CLAUDE_SWARM_NO_BG = 'true';\n\n// Run the swarm\nawait swarmCommand(args, flags);\n`;\n\n      const scriptPath = `${swarmRunDir}/run-swarm.js`;\n      await writeTextFile(scriptPath, scriptContent);\n\n      // Save process info first\n      await writeTextFile(\n        `${swarmRunDir}/process.json`,\n        JSON.stringify(\n          {\n            swarmId: swarmId,\n            objective: objective,\n            startTime: new Date().toISOString(),\n            logFile: logFile,\n            status: 'starting',\n          },\n          null,\n          2,\n        ),\n      );\n\n      // Close log handle before spawning\n      logHandle.close();\n\n      // Use the bash script for true background execution\n      const binDir = new URL('../../../bin/', import.meta.url).pathname;\n      const bgScriptPath = `${binDir}claude-flow-swarm-bg`;\n\n      try {\n        // Check if the background script exists\n        statSync(bgScriptPath);\n\n        // Build command args for the background script\n        const bgArgs = [objective];\n        for (const [key, value] of Object.entries(newFlags)) {\n          bgArgs.push(`--${key}`);\n          if (value !== true) {\n            bgArgs.push(String(value));\n          }\n        }\n\n        // Use the bash background script\n        const bgProcess = spawn(bgScriptPath, bgArgs, {\n          stdio: ['ignore', 'pipe', 'pipe'],\n        });\n\n        // Read and display output\n        const decoder = new TextDecoder();\n        const output = await bgProcess.output();\n        console.log(decoder.decode(output.stdout));\n\n        // Exit immediately after launching\n        exit(0);\n      } catch (error) {\n        // Fallback: create a double-fork pattern using a shell script\n        console.log(`\\n‚ö†Ô∏è  Background script not found, using fallback method`);\n\n        // Create a shell script that will run the swarm\n        const shellScript = `#!/bin/bash\n# Double fork to detach from parent\n(\n  (\n    node \"${scriptPath}\" > \"${logFile}\" 2>&1 &\n    echo $! > \"${swarmRunDir}/swarm.pid\"\n  ) &\n)\nexit 0\n`;\n\n        const shellScriptPath = `${swarmRunDir}/launch-background.sh`;\n        await writeTextFile(shellScriptPath, shellScript);\n        chmodSync(shellScriptPath, 0o755);\n\n        // Execute the shell script\n        const shellProcess = spawn('bash', [shellScriptPath], {\n          stdio: 'ignore',\n          detached: true,\n        });\n        shellProcess.unref();\n\n        console.log(`\\n‚úÖ Swarm launched in background!`);\n        console.log(`üìÑ Logs: tail -f ${logFile}`);\n        console.log(`üìä Status: claude-flow swarm status ${swarmId}`);\n        console.log(`\\nThe swarm will continue running independently.`);\n\n        // Exit immediately\n        exit(0);\n      }\n    }\n\n    // Node.js environment - use background script\n    const { execSync } = await import('child_process');\n    const path = await import('path');\n    const fs = await import('fs');\n\n    const objective = (args || []).join(' ').trim();\n\n    // Get the claude-flow-swarm-bg script path\n    const bgScriptPath = path.join(\n      path.dirname(new URL(import.meta.url).pathname),\n      '../../../bin/claude-flow-swarm-bg',\n    );\n\n    // Check if background script exists\n    if (fs.existsSync(bgScriptPath)) {\n      // Build command args\n      const commandArgs = [objective];\n      for (const [key, value] of Object.entries(flags)) {\n        if (key !== 'background') {\n          // Skip background flag\n          commandArgs.push(`--${key}`);\n          if (value !== true) {\n            commandArgs.push(String(value));\n          }\n        }\n      }\n\n      // Execute the background script\n      try {\n        execSync(`\"${bgScriptPath}\" ${commandArgs.map((arg) => `\"${arg}\"`).join(' ')}`, {\n          stdio: 'inherit',\n        });\n      } catch (error) {\n        console.error('Failed to launch background swarm:', error.message);\n      }\n    } else {\n      // Fallback to simple message\n      console.log(`üêù Background mode requested`);\n      console.log(`üìã Objective: ${objective}`);\n      console.log(`\\n‚ö†Ô∏è  Background execution requires the claude-flow-swarm-bg script.`);\n      console.log(`\\nFor true background execution, use:`);\n      console.log(\n        `  nohup claude-flow swarm \"${objective}\" ${Object.entries(flags)\n          .filter(([k, v]) => k !== 'background' && v)\n          .map(([k, v]) => `--${k}${v !== true ? ` ${v}` : ''}`)\n          .join(' ')} > swarm.log 2>&1 &`,\n      );\n    }\n    return;\n  }\n\n  try {\n    // Try to load the compiled JavaScript module first\n    let swarmAction;\n    try {\n      // Try the compiled version first (for production/npm packages)\n      const distPath = new URL('../../../dist/cli/commands/swarm-new.js', import.meta.url);\n      const module = await import(distPath);\n      swarmAction = module.swarmAction;\n    } catch (distError) {\n      // Instead of immediately falling back to basic mode, \n      // continue to the Claude integration below\n      console.log('üì¶ Compiled swarm module not found, checking for Claude CLI...');\n    }\n\n    // Only call swarmAction if it was successfully loaded\n    if (swarmAction) {\n      // Create command context compatible with TypeScript version\n      const ctx = {\n        args: args || [],\n        flags: flags || {},\n        command: 'swarm',\n      };\n\n      await swarmAction(ctx);\n      return; // Exit after successful execution\n    }\n  } catch (error) {\n    // If import fails (e.g., in node_modules), provide inline implementation\n    if (\n      error.code === 'ERR_MODULE_NOT_FOUND' ||\n      error.code === 'ERR_UNSUPPORTED_NODE_MODULES_TYPE_STRIPPING' ||\n      error.code === 'ERR_UNKNOWN_FILE_EXTENSION'\n    ) {\n      // Provide a basic swarm implementation that works without TypeScript imports\n      const objective = (args || []).join(' ').trim();\n\n      if (!objective) {\n        console.error('‚ùå Usage: swarm <objective>');\n        showSwarmHelp();\n        return;\n      }\n\n      // Try to use the swarm executor directly\n      try {\n        const { executeSwarm } = await import('./swarm-executor.js');\n        const result = await executeSwarm(objective, flags);\n\n        // If execution was successful, exit\n        if (result && result.success) {\n          return;\n        }\n      } catch (execError) {\n        console.log(`‚ö†Ô∏è  Swarm executor error: ${execError.message}`);\n        // If swarm executor fails, try to create files directly\n        try {\n          await createSwarmFiles(objective, flags);\n          return;\n        } catch (createError) {\n          console.log(`‚ö†Ô∏è  Direct file creation error: ${createError.message}`);\n          // Continue with fallback implementation\n        }\n      }\n\n      // Provide a basic inline swarm implementation for npm packages\n      console.log('üêù Launching swarm system...');\n      console.log(`üìã Objective: ${objective}`);\n      console.log(`üéØ Strategy: ${flags.strategy || 'auto'}`);\n      console.log(`üèóÔ∏è  Mode: ${flags.mode || 'centralized'}`);\n      console.log(`ü§ñ Max Agents: ${flags['max-agents'] || 5}`);\n      console.log();\n\n      // Generate swarm ID\n      const swarmId = `swarm_${Math.random().toString(36).substring(2, 11)}_${Math.random().toString(36).substring(2, 11)}`;\n\n      if (flags['dry-run']) {\n        console.log(`üÜî Swarm ID: ${swarmId}`);\n        console.log(`üìä Max Tasks: ${flags['max-tasks'] || 100}`);\n        console.log(`‚è∞ Timeout: ${flags.timeout || 60} minutes`);\n        console.log(`üîÑ Parallel: ${flags.parallel || false}`);\n        console.log(`üåê Distributed: ${flags.distributed || false}`);\n        console.log(`üîç Monitoring: ${flags.monitor || false}`);\n        console.log(`üë• Review Mode: ${flags.review || false}`);\n        console.log(`üß™ Testing: ${flags.testing || false}`);\n        console.log(`üß† Memory Namespace: ${flags['memory-namespace'] || 'swarm'}`);\n        console.log(`üíæ Persistence: ${flags.persistence !== false}`);\n        console.log(`üîí Encryption: ${flags.encryption || false}`);\n        console.log(`üìä Quality Threshold: ${flags['quality-threshold'] || 0.8}`);\n        console.log();\n        console.log('üéõÔ∏è  Coordination Strategy:');\n        console.log(`  ‚Ä¢ Agent Selection: ${flags['agent-selection'] || 'capability-based'}`);\n        console.log(`  ‚Ä¢ Task Scheduling: ${flags['task-scheduling'] || 'priority'}`);\n        console.log(`  ‚Ä¢ Load Balancing: ${flags['load-balancing'] || 'work-stealing'}`);\n        console.log(`  ‚Ä¢ Fault Tolerance: ${flags['fault-tolerance'] || 'retry'}`);\n        console.log(`  ‚Ä¢ Communication: ${flags.communication || 'event-driven'}`);\n        console.log('‚ö†Ô∏è  DRY RUN - Advanced Swarm Configuration');\n        return;\n      }\n\n      // For actual execution in npm context, try to find and run swarm-demo.ts\n      try {\n        const path = await import('path');\n        const { fileURLToPath } = await import('url');\n        const fs = await import('fs');\n        const { spawn } = await import('child_process');\n\n        const __filename = fileURLToPath(import.meta.url);\n        const __dirname = path.dirname(__filename);\n\n        // Look for swarm-demo.ts in the package\n        const possiblePaths = [\n          path.join(__dirname, '../../../swarm-demo.ts'),\n          path.join(__dirname, '../../swarm-demo.ts'),\n        ];\n\n        let swarmDemoPath = null;\n        for (const p of possiblePaths) {\n          if (fs.existsSync(p)) {\n            swarmDemoPath = p;\n            break;\n          }\n        }\n\n        if (swarmDemoPath && Deno) {\n          // Run swarm-demo.ts directly with Deno\n          const swarmArgs = [objective];\n          for (const [key, value] of Object.entries(flags || {})) {\n            swarmArgs.push(`--${key}`);\n            if (value !== true) {\n              swarmArgs.push(String(value));\n            }\n          }\n\n          console.log('üöÄ Starting advanced swarm execution...');\n          const swarmProcess = spawn('node', [swarmDemoPath, ...swarmArgs], {\n            stdio: 'inherit',\n          });\n\n          swarmProcess.on('error', (err) => {\n            console.error('‚ùå Failed to launch swarm:', err.message);\n          });\n\n          swarmProcess.on('exit', (code) => {\n            if (code !== 0) {\n              console.error(`‚ùå Swarm exited with code ${code}`);\n            }\n          });\n          return;\n        }\n      } catch (e) {\n        // Fallback to basic message if can't run swarm-demo.ts\n      }\n\n      // Try to use Claude wrapper approach like SPARC does\n      try {\n        const { execSync } = await import('child_process');\n\n        // Check if claude command exists\n        try {\n          execSync('which claude', { stdio: 'ignore' });\n        } catch (e) {\n          // Claude not found, show fallback message\n          console.log(`‚úÖ Swarm initialized with ID: ${swarmId}`);\n          console.log('\\n‚ö†Ô∏è  Note: Advanced swarm features require Claude or local installation.');\n          console.log('Install Claude: https://claude.ai/code');\n          console.log('Or install locally: npm install -g claude-flow@latest');\n          console.log('\\nThe swarm system would coordinate the following:');\n          console.log('1. Agent spawning and task distribution');\n          console.log('2. Parallel execution of subtasks');\n          console.log('3. Memory sharing between agents');\n          console.log('4. Progress monitoring and reporting');\n          console.log('5. Result aggregation and quality checks');\n          return;\n        }\n\n        // Claude is available, use it to run swarm\n        console.log('üöÄ Launching swarm via Claude wrapper...');\n        if (flags.sparc !== false) {\n          console.log('üß™ SPARC methodology enabled - using full TDD workflow');\n        }\n\n        // Build the prompt for Claude using SPARC methodology\n        const enableSparc = flags.sparc !== false;\n        const swarmPrompt = `Execute a swarm coordination task using ${enableSparc ? 'the full SPARC methodology' : 'standard approach'}:\n\nOBJECTIVE: ${objective}\n\nCONFIGURATION:\n- Strategy: ${flags.strategy || 'auto'}\n- Mode: ${flags.mode || 'centralized'}\n- Max Agents: ${flags['max-agents'] || 5}\n- Memory Namespace: ${flags['memory-namespace'] || 'swarm'}\n- Quality Threshold: ${flags['quality-threshold'] || 0.8}\n${enableSparc ? '- SPARC Enabled: YES - Use full Specification, Pseudocode, Architecture, Refinement (TDD), Completion methodology' : ''}\n\n${\n  enableSparc\n    ? `\nSPARC METHODOLOGY REQUIREMENTS:\n\n1. SPECIFICATION PHASE:\n   - Create detailed requirements and acceptance criteria\n   - Define user stories with clear objectives\n   - Document functional and non-functional requirements\n   - Establish quality metrics and success criteria\n\n2. PSEUDOCODE PHASE:\n   - Design algorithms and data structures\n   - Create flow diagrams and logic patterns\n   - Define interfaces and contracts\n   - Plan error handling strategies\n\n3. ARCHITECTURE PHASE:\n   - Design system architecture with proper components\n   - Define APIs and service boundaries\n   - Plan database schemas if applicable\n   - Create deployment architecture\n\n4. REFINEMENT PHASE (TDD):\n   - RED: Write comprehensive failing tests first\n   - GREEN: Implement minimal code to pass tests\n   - REFACTOR: Optimize and clean up implementation\n   - Ensure >80% test coverage\n\n5. COMPLETION PHASE:\n   - Integrate all components\n   - Create comprehensive documentation\n   - Perform end-to-end testing\n   - Validate against original requirements\n`\n    : ''\n}\n\nEXECUTION APPROACH:\n1. Analyze the objective and break it down into specific tasks\n2. Create a comprehensive implementation plan\n3. ${enableSparc ? 'Follow SPARC phases sequentially with proper artifacts for each phase' : 'Implement the solution directly'}\n4. Generate production-ready code with proper structure\n5. Include all necessary files (source code, tests, configs, documentation)\n6. Ensure the implementation is complete and functional\n\nTARGET DIRECTORY:\nExtract from the objective or use a sensible default. Create all files in the appropriate directory structure.\n\nIMPORTANT:\n- Create actual, working implementations - not templates or placeholders\n- Include comprehensive tests using appropriate testing frameworks\n- Add proper error handling and logging\n- Include configuration files (package.json, requirements.txt, etc.)\n- Create detailed README with setup and usage instructions\n- Follow best practices for the technology stack\n- Make the code production-ready, not just examples\n\nBegin execution now. Create all necessary files and provide a complete, working solution.`;\n\n        // Execute Claude non-interactively by piping the prompt\n        const { spawn } = await import('child_process');\n\n        const claudeArgs = [];\n\n        // Add auto-permission flag by default for swarm mode (unless explicitly disabled)\n        if (flags['dangerously-skip-permissions'] !== false && !flags['no-auto-permissions']) {\n          claudeArgs.push('--dangerously-skip-permissions');\n        }\n\n        // Spawn claude process\n        const claudeProcess = spawn('claude', claudeArgs, {\n          stdio: ['pipe', 'inherit', 'inherit'],\n          shell: false,\n        });\n\n        // Write the prompt to stdin and close it\n        claudeProcess.stdin.write(swarmPrompt);\n        claudeProcess.stdin.end();\n\n        // Wait for the process to complete\n        await new Promise((resolve, reject) => {\n          claudeProcess.on('close', (code) => {\n            if (code === 0) {\n              resolve();\n            } else {\n              reject(new Error(`Claude process exited with code ${code}`));\n            }\n          });\n\n          claudeProcess.on('error', (err) => {\n            reject(err);\n          });\n        });\n      } catch (error) {\n        // Fallback if Claude execution fails\n        console.log(`‚úÖ Swarm initialized with ID: ${swarmId}`);\n        console.log('\\n‚ö†Ô∏è  Note: Advanced swarm features require Claude or local installation.');\n        console.log('Install Claude: https://claude.ai/code');\n        console.log('Or install locally: npm install -g claude-flow@latest');\n        console.log('\\nThe swarm system would coordinate the following:');\n        console.log('1. Agent spawning and task distribution');\n        console.log('2. Parallel execution of subtasks');\n        console.log('3. Memory sharing between agents');\n        console.log('4. Progress monitoring and reporting');\n        console.log('5. Result aggregation and quality checks');\n      }\n\n      return;\n    }\n\n    console.error('Swarm command error:', error);\n\n    // Fallback to comprehensive help if there's an import error\n    console.log(`\nüêù Claude Flow Advanced Swarm System\n\nUSAGE:\n  claude-flow swarm <objective> [options]\n\nEXAMPLES:\n  claude-flow swarm \"Build a REST API\" --strategy development\n  claude-flow swarm \"Research cloud architecture\" --strategy research --ui\n  claude-flow swarm \"Analyze data trends\" --strategy analysis --parallel\n  claude-flow swarm \"Optimize performance\" --distributed --monitor\n\nSTRATEGIES:\n  auto           Automatically determine best approach (default)\n  research       Research and information gathering\n  development    Software development and coding\n  analysis       Data analysis and insights\n  testing        Testing and quality assurance\n  optimization   Performance optimization\n  maintenance    System maintenance\n\nMODES:\n  centralized    Single coordinator (default)\n  distributed    Multiple coordinators\n  hierarchical   Tree structure coordination\n  mesh           Peer-to-peer coordination\n  hybrid         Mixed coordination strategies\n\nKEY FEATURES:\n  ü§ñ Intelligent agent management with specialized types\n  ‚ö° Timeout-free background task execution\n  üß† Distributed memory sharing between agents\n  üîÑ Work stealing and advanced load balancing\n  üõ°Ô∏è  Circuit breaker patterns for fault tolerance\n  üìä Real-time monitoring and comprehensive metrics\n  üéõÔ∏è  Multiple coordination strategies and algorithms\n  üíæ Persistent state with backup and recovery\n  üîí Security features with encryption options\n  üñ•Ô∏è  Interactive terminal UI for management\n\nOPTIONS:\n  --strategy <type>          Execution strategy (default: auto)\n  --mode <type>              Coordination mode (default: centralized)\n  --max-agents <n>           Maximum agents (default: 5)\n  --timeout <minutes>        Timeout in minutes (default: 60)\n  --task-timeout-minutes <n> Task execution timeout in minutes (default: 59)\n  --parallel                 Enable parallel execution\n  --distributed              Enable distributed coordination\n  --monitor                  Enable real-time monitoring\n  --ui                       Launch terminal UI interface\n  --background               Run in background mode\n  --review                   Enable peer review\n  --testing                  Enable automated testing\n  --encryption               Enable encryption\n  --verbose                  Enable detailed logging\n  --dry-run                  Show configuration without executing\n  --executor                 Use built-in executor instead of Claude Code\n  --claude                   Open Claude Code CLI\n  --output-format <format>   Output format: json, text (default: text)\n  --output-file <path>       Save output to file instead of stdout\n  --no-interactive           Run in non-interactive mode (auto-enabled with --output-format json)\n  --auto                     (Deprecated: auto-permissions enabled by default)\n  --no-auto-permissions      Disable automatic --dangerously-skip-permissions\n  --analysis                 Enable analysis/read-only mode (no code changes)\n  --read-only                Enable read-only mode (alias for --analysis)\n\nADVANCED OPTIONS:\n  --quality-threshold <n>    Quality threshold 0-1 (default: 0.8)\n  --memory-namespace <name>  Memory namespace (default: swarm)\n  --agent-selection <type>   Agent selection strategy\n  --task-scheduling <type>   Task scheduling algorithm\n  --load-balancing <type>    Load balancing method\n  --fault-tolerance <type>   Fault tolerance strategy\n\nFor complete documentation and examples:\nhttps://github.com/ruvnet/claude-code-flow/docs/swarm.md\n`);\n  }\n}\n\n// Function to create swarm files directly\nasync function createSwarmFiles(objective, flags) {\n  const fs = await import('fs');\n  const path = await import('path');\n\n  const swarmId = `swarm_${Math.random().toString(36).substring(2, 11)}_${Math.random().toString(36).substring(2, 11)}`;\n\n  console.log(`üêù Swarm Execution Started: ${swarmId}`);\n  console.log(`üìã Objective: ${objective}`);\n  console.log(`üéØ Strategy: ${flags.strategy || 'auto'}`);\n\n  // Extract target directory from objective\n  const targetMatch = objective.match(/in\\s+([^\\s]+)\\/?$/i);\n  let targetDir = targetMatch ? targetMatch[1] : 'output';\n\n  // Resolve relative paths\n  if (!targetDir.startsWith('/')) {\n    targetDir = path.join(process.cwd(), targetDir);\n  }\n\n  console.log(`üìÅ Target directory: ${targetDir}`);\n\n  // Ensure target directory exists\n  await fs.promises.mkdir(targetDir, { recursive: true });\n\n  // Determine what to build based on objective\n  const isRestAPI =\n    objective.toLowerCase().includes('rest api') || objective.toLowerCase().includes('api');\n\n  if (isRestAPI) {\n    // Create REST API\n    const apiDir = path.join(targetDir, 'rest-api');\n    await fs.promises.mkdir(apiDir, { recursive: true });\n\n    console.log(`\\nüèóÔ∏è  Creating REST API...`);\n    console.log(`  ü§ñ Agent developer-1: Creating server implementation`);\n\n    // Create server.js\n    const serverCode = `const express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'healthy',\n    service: 'REST API',\n    swarmId: '${swarmId}',\n    created: new Date().toISOString()\n  });\n});\n\n// Sample endpoints\napp.get('/api/v1/items', (req, res) => {\n  res.json({\n    items: [\n      { id: 1, name: 'Item 1', description: 'First item' },\n      { id: 2, name: 'Item 2', description: 'Second item' }\n    ],\n    total: 2\n  });\n});\n\napp.get('/api/v1/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  res.json({\n    id,\n    name: \\`Item \\${id}\\`,\n    description: \\`Description for item \\${id}\\`\n  });\n});\n\napp.post('/api/v1/items', (req, res) => {\n  const newItem = {\n    id: Date.now(),\n    ...req.body,\n    createdAt: new Date().toISOString()\n  };\n  res.status(201).json(newItem);\n});\n\n// Start server\napp.listen(port, () => {\n  console.log(\\`REST API server running on port \\${port}\\`);\n  console.log('Created by Claude Flow Swarm');\n});\n\nmodule.exports = app;\n`;\n\n    await fs.promises.writeFile(path.join(apiDir, 'server.js'), serverCode);\n    console.log(`  ‚úÖ Created: server.js`);\n\n    // Create package.json\n    const packageJson = {\n      name: 'rest-api',\n      version: '1.0.0',\n      description: 'REST API created by Claude Flow Swarm',\n      main: 'server.js',\n      scripts: {\n        start: 'node server.js',\n        dev: 'nodemon server.js',\n        test: 'jest',\n      },\n      keywords: ['rest', 'api', 'swarm', 'claude-flow'],\n      author: 'Claude Flow Swarm',\n      license: 'MIT',\n      dependencies: {\n        express: '^4.18.2',\n      },\n      devDependencies: {\n        nodemon: '^3.0.1',\n        jest: '^29.7.0',\n        supertest: '^6.3.3',\n      },\n      swarmMetadata: {\n        swarmId,\n        strategy: flags.strategy || 'development',\n        created: new Date().toISOString(),\n      },\n    };\n\n    await fs.promises.writeFile(\n      path.join(apiDir, 'package.json'),\n      JSON.stringify(packageJson, null, 2),\n    );\n    console.log(`  ‚úÖ Created: package.json`);\n\n    // Create README\n    const readme = `# REST API\n\nThis REST API was created by the Claude Flow Swarm system.\n\n## Swarm Details\n- Swarm ID: ${swarmId}\n- Strategy: ${flags.strategy || 'development'}\n- Generated: ${new Date().toISOString()}\n\n## Installation\n\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\nStart the server:\n\\`\\`\\`bash\nnpm start\n\\`\\`\\`\n\n## API Endpoints\n\n- \\`GET /health\\` - Health check\n- \\`GET /api/v1/items\\` - Get all items\n- \\`GET /api/v1/items/:id\\` - Get item by ID\n- \\`POST /api/v1/items\\` - Create new item\n\n---\nCreated by Claude Flow Swarm\n`;\n\n    await fs.promises.writeFile(path.join(apiDir, 'README.md'), readme);\n    console.log(`  ‚úÖ Created: README.md`);\n\n    console.log(`\\n‚úÖ Swarm completed successfully!`);\n    console.log(`üìÅ Files created in: ${apiDir}`);\n    console.log(`üÜî Swarm ID: ${swarmId}`);\n  } else {\n    // Create generic application\n    console.log(`\\nüèóÔ∏è  Creating application...`);\n\n    const appCode = `// Application created by Claude Flow Swarm\n// Objective: ${objective}\n// Swarm ID: ${swarmId}\n\nfunction main() {\n  console.log('Executing swarm objective: ${objective}');\n  console.log('Implementation would be based on the specific requirements');\n}\n\nmain();\n`;\n\n    await fs.promises.writeFile(path.join(targetDir, 'app.js'), appCode);\n    console.log(`  ‚úÖ Created: app.js`);\n\n    const packageJson = {\n      name: 'swarm-app',\n      version: '1.0.0',\n      description: `Application created by Claude Flow Swarm: ${objective}`,\n      main: 'app.js',\n      scripts: {\n        start: 'node app.js',\n      },\n      swarmMetadata: {\n        swarmId,\n        objective,\n        created: new Date().toISOString(),\n      },\n    };\n\n    await fs.promises.writeFile(\n      path.join(targetDir, 'package.json'),\n      JSON.stringify(packageJson, null, 2),\n    );\n    console.log(`  ‚úÖ Created: package.json`);\n\n    console.log(`\\n‚úÖ Swarm completed successfully!`);\n    console.log(`üìÅ Files created in: ${targetDir}`);\n    console.log(`üÜî Swarm ID: ${swarmId}`);\n  }\n}\n\n/**\n * Get strategy-specific guidance for swarm execution\n */\nfunction getStrategyGuidance(strategy, objective) {\n  const guidanceMap = {\n    auto: `ü§ñ AUTO STRATEGY - INTELLIGENT TASK ANALYSIS:\nThe swarm will analyze \"${objective}\" and automatically determine the best approach.\n\nANALYSIS APPROACH:\n1. Task Decomposition: Break down the objective into subtasks\n2. Skill Matching: Identify required capabilities and expertise\n3. Agent Selection: Spawn appropriate agent types based on needs\n4. Workflow Design: Create optimal execution flow\n\nMCP TOOL PATTERN:\n- Start with memory_store to save the objective analysis\n- Use task_create to build a hierarchical task structure\n- Spawn agents with agent_spawn based on detected requirements\n- Monitor with swarm_monitor and adjust strategy as needed`,\n\n    research: `üî¨ RESEARCH STRATEGY - INFORMATION GATHERING & ANALYSIS:\nOptimized for: \"${objective}\"\n\nRESEARCH PHASES:\n1. Discovery: Broad information gathering\n2. Analysis: Deep dive into findings\n3. Synthesis: Combine insights\n4. Reporting: Document conclusions\n\nRECOMMENDED AGENTS:\n- Lead Researcher: Coordinates research efforts\n- Data Analysts: Process and analyze findings\n- Subject Experts: Domain-specific investigation\n- Documentation Specialist: Compile reports\n\nMCP TOOL USAGE:\n- memory_store: Save all research findings with structured keys\n- memory_search: Find related information across research\n- agent_communicate: Share discoveries between researchers\n- task_create: Break research into focused sub-investigations`,\n\n    development: `üíª DEVELOPMENT STRATEGY - SOFTWARE CREATION:\nBuilding: \"${objective}\"\n\nDEVELOPMENT WORKFLOW:\n1. Architecture: Design system structure\n2. Implementation: Build components\n3. Integration: Connect systems\n4. Testing: Validate functionality\n5. Documentation: Create guides\n\nRECOMMENDED AGENTS:\n- System Architect: Overall design\n- Backend Developers: API/server implementation\n- Frontend Developers: UI/UX implementation\n- DevOps Engineer: Infrastructure setup\n- QA Engineers: Testing and validation\n\nMCP TOOL USAGE:\n- memory_store: Save architecture decisions, code modules\n- task_create: Create implementation tasks with dependencies\n- agent_assign: Assign specific components to developers\n- swarm_monitor: Track build progress and blockers`,\n\n    analysis: `üìä ANALYSIS STRATEGY - DATA EXAMINATION:\nAnalyzing: \"${objective}\"\n\nANALYSIS FRAMEWORK:\n1. Data Collection: Gather relevant information\n2. Processing: Clean and prepare data\n3. Analysis: Apply analytical methods\n4. Visualization: Create insights\n5. Recommendations: Actionable outcomes\n\nRECOMMENDED AGENTS:\n- Lead Analyst: Coordinate analysis efforts\n- Data Engineers: Prepare data pipelines\n- Statistical Analysts: Apply analytical methods\n- Visualization Experts: Create dashboards\n- Business Analysts: Translate to recommendations\n\nMCP TOOL USAGE:\n- memory_store: Save datasets and analysis results\n- memory_retrieve: Access historical analysis\n- task_create: Define analysis pipelines\n- agent_coordinate: Sync analysis phases`,\n\n    testing: `üß™ TESTING STRATEGY - QUALITY ASSURANCE:\nTesting: \"${objective}\"\n\nTESTING PHASES:\n1. Test Planning: Define test scenarios\n2. Test Development: Create test cases\n3. Execution: Run test suites\n4. Bug Tracking: Document issues\n5. Regression: Ensure fixes work\n\nRECOMMENDED AGENTS:\n- Test Lead: Coordinate testing efforts\n- Unit Testers: Component-level testing\n- Integration Testers: System-level testing\n- Performance Testers: Load and stress testing\n- Security Testers: Vulnerability assessment\n\nMCP TOOL USAGE:\n- task_create: Create test cases and scenarios\n- memory_store: Save test results and bug reports\n- agent_communicate: Report bugs to developers\n- swarm_monitor: Track testing coverage and progress`,\n\n    optimization: `‚ö° OPTIMIZATION STRATEGY - PERFORMANCE IMPROVEMENT:\nOptimizing: \"${objective}\"\n\nOPTIMIZATION PROCESS:\n1. Profiling: Identify bottlenecks\n2. Analysis: Understand root causes\n3. Implementation: Apply optimizations\n4. Validation: Measure improvements\n5. Documentation: Record changes\n\nRECOMMENDED AGENTS:\n- Performance Lead: Coordinate optimization\n- System Profilers: Identify bottlenecks\n- Algorithm Experts: Optimize logic\n- Database Specialists: Query optimization\n- Infrastructure Engineers: System tuning\n\nMCP TOOL USAGE:\n- memory_store: Save performance baselines and results\n- task_create: Create optimization tasks by priority\n- swarm_monitor: Track performance improvements\n- agent_communicate: Coordinate optimization efforts`,\n\n    maintenance: `üîß MAINTENANCE STRATEGY - SYSTEM UPKEEP:\nMaintaining: \"${objective}\"\n\nMAINTENANCE WORKFLOW:\n1. Assessment: Evaluate current state\n2. Planning: Prioritize updates\n3. Implementation: Apply changes\n4. Testing: Verify stability\n5. Documentation: Update records\n\nRECOMMENDED AGENTS:\n- Maintenance Lead: Coordinate efforts\n- System Administrators: Infrastructure updates\n- Security Engineers: Patch vulnerabilities\n- Database Administrators: Data maintenance\n- Documentation Writers: Update guides\n\nMCP TOOL USAGE:\n- memory_retrieve: Access system history\n- task_create: Schedule maintenance tasks\n- agent_assign: Delegate specific updates\n- memory_store: Document all changes`,\n  };\n\n  return guidanceMap[strategy] || guidanceMap['auto'];\n}\n\n/**\n * Get mode-specific guidance for coordination\n */\nfunction getModeGuidance(mode) {\n  const modeMap = {\n    centralized: `üéØ CENTRALIZED MODE - SINGLE COORDINATOR:\nAll decisions flow through one coordinator agent.\n\nCOORDINATION PATTERN:\n- Spawn a single COORDINATOR as the first agent\n- All other agents report to the coordinator\n- Coordinator assigns tasks and monitors progress\n- Use agent_assign for task delegation\n- Use swarm_monitor for oversight\n\nBENEFITS:\n- Clear chain of command\n- Consistent decision making\n- Simple communication flow\n- Easy progress tracking\n\nBEST FOR:\n- Small to medium projects\n- Well-defined objectives\n- Clear task dependencies`,\n\n    distributed: `üåê DISTRIBUTED MODE - MULTIPLE COORDINATORS:\nMultiple coordinators share responsibility by domain.\n\nCOORDINATION PATTERN:\n- Spawn domain-specific coordinators (e.g., frontend-lead, backend-lead)\n- Each coordinator manages their domain agents\n- Use agent_coordinate for inter-coordinator sync\n- Use memory_sync to share state\n- Implement consensus protocols for decisions\n\nBENEFITS:\n- Fault tolerance\n- Parallel decision making\n- Domain expertise\n- Scalability\n\nBEST FOR:\n- Large projects\n- Multiple workstreams\n- Complex systems\n- High availability needs`,\n\n    hierarchical: `üèóÔ∏è HIERARCHICAL MODE - TREE STRUCTURE:\nAgents organized in management layers.\n\nCOORDINATION PATTERN:\n- Spawn top-level coordinator\n- Spawn team leads under coordinator\n- Spawn workers under team leads\n- Use parent parameter in agent_spawn\n- Tasks flow down, results flow up\n\nBENEFITS:\n- Clear reporting structure\n- Efficient for large teams\n- Natural work breakdown\n- Manageable span of control\n\nBEST FOR:\n- Enterprise projects\n- Multi-team efforts\n- Complex hierarchies\n- Phased deliveries`,\n\n    mesh: `üîó MESH MODE - PEER-TO-PEER:\nAgents coordinate directly without central authority.\n\nCOORDINATION PATTERN:\n- All agents are peers\n- Use agent_communicate for direct messaging\n- Consensus through voting or protocols\n- Self-organizing teams\n- Emergent leadership\n\nBENEFITS:\n- Maximum flexibility\n- Fast local decisions\n- Resilient to failures\n- Creative solutions\n\nBEST FOR:\n- Research projects\n- Exploratory work\n- Innovation tasks\n- Small expert teams`,\n\n    hybrid: `üé® HYBRID MODE - MIXED STRATEGIES:\nCombine different coordination patterns as needed.\n\nCOORDINATION PATTERN:\n- Start with one mode, adapt as needed\n- Mix hierarchical for structure with mesh for innovation\n- Use distributed for resilience with centralized for control\n- Dynamic reorganization based on task needs\n\nBENEFITS:\n- Adaptability\n- Best of all modes\n- Task-appropriate structure\n- Evolution over time\n\nBEST FOR:\n- Complex projects\n- Uncertain requirements\n- Long-term efforts\n- Diverse objectives`,\n  };\n\n  return modeMap[mode] || modeMap['centralized'];\n}\n\n/**\n * Get agent recommendations based on strategy\n */\nfunction getAgentRecommendations(strategy, maxAgents, objective) {\n  const recommendations = {\n    auto: `\nü§ñ RECOMMENDED AGENT COMPOSITION (Auto-detected):\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"SwarmLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"researcher\", \"name\": \"RequirementsAnalyst\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"architect\", \"name\": \"SystemDesigner\"}\n  mcp__claude-flow__memory_store {\"key\": \"swarm/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"Analyze Requirements\", \"assignTo\": \"RequirementsAnalyst\"}\n  mcp__claude-flow__task_create {\"name\": \"Design Architecture\", \"assignTo\": \"SystemDesigner\", \"dependsOn\": [\"Analyze Requirements\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize swarm coordination\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Analyze objective requirements\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Design system architecture\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Spawn additional agents as needed\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n\n    research: `\nüî¨ RECOMMENDED RESEARCH AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"ResearchLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"researcher\", \"name\": \"PrimaryInvestigator\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"DataScientist\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"researcher\", \"name\": \"LiteratureExpert\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"InsightsCompiler\"}\n  mcp__claude-flow__memory_store {\"key\": \"research/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"Literature Review\", \"assignTo\": \"LiteratureExpert\"}\n  mcp__claude-flow__task_create {\"name\": \"Primary Research\", \"assignTo\": \"PrimaryInvestigator\"}\n  mcp__claude-flow__task_create {\"name\": \"Data Analysis\", \"assignTo\": \"DataScientist\"}\n  mcp__claude-flow__task_create {\"name\": \"Compile Insights\", \"assignTo\": \"InsightsCompiler\", \"dependsOn\": [\"Literature Review\", \"Primary Research\", \"Data Analysis\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize research swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Conduct literature review\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Execute primary research\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Analyze collected data\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"5\", \"content\": \"Compile and synthesize insights\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n\n    development: `\nüíª RECOMMENDED DEVELOPMENT AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"TechLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"architect\", \"name\": \"SystemArchitect\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"BackendDev\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"FrontendDev\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"QAEngineer\"}\n  mcp__claude-flow__memory_store {\"key\": \"dev/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"System Architecture\", \"assignTo\": \"SystemArchitect\"}\n  mcp__claude-flow__task_create {\"name\": \"Backend Implementation\", \"assignTo\": \"BackendDev\", \"dependsOn\": [\"System Architecture\"]}\n  mcp__claude-flow__task_create {\"name\": \"Frontend Implementation\", \"assignTo\": \"FrontendDev\", \"dependsOn\": [\"System Architecture\"]}\n  mcp__claude-flow__task_create {\"name\": \"Testing Suite\", \"assignTo\": \"QAEngineer\", \"dependsOn\": [\"Backend Implementation\", \"Frontend Implementation\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize development swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Design system architecture\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Implement backend services\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Implement frontend UI\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"5\", \"content\": \"Create comprehensive tests\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n\n    analysis: `\nüìä RECOMMENDED ANALYSIS AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"AnalysisLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"DataEngineer\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"StatisticalExpert\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"VisualizationDev\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"BusinessAnalyst\"}\n  mcp__claude-flow__memory_store {\"key\": \"analysis/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"Data Pipeline Setup\", \"assignTo\": \"DataEngineer\"}\n  mcp__claude-flow__task_create {\"name\": \"Statistical Analysis\", \"assignTo\": \"StatisticalExpert\", \"dependsOn\": [\"Data Pipeline Setup\"]}\n  mcp__claude-flow__task_create {\"name\": \"Create Visualizations\", \"assignTo\": \"VisualizationDev\", \"dependsOn\": [\"Statistical Analysis\"]}\n  mcp__claude-flow__task_create {\"name\": \"Business Insights\", \"assignTo\": \"BusinessAnalyst\", \"dependsOn\": [\"Statistical Analysis\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize analysis swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Setup data pipelines\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Perform statistical analysis\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Create data visualizations\", \"status\": \"pending\", \"priority\": \"medium\"},\n    {\"id\": \"5\", \"content\": \"Generate business insights\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n\n    testing: `\nüß™ RECOMMENDED TESTING AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"QALead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"UnitTestEngineer\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"IntegrationTester\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"PerformanceTester\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"SecurityAuditor\"}\n  mcp__claude-flow__memory_store {\"key\": \"testing/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"Unit Test Suite\", \"assignTo\": \"UnitTestEngineer\"}\n  mcp__claude-flow__task_create {\"name\": \"Integration Tests\", \"assignTo\": \"IntegrationTester\"}\n  mcp__claude-flow__task_create {\"name\": \"Performance Tests\", \"assignTo\": \"PerformanceTester\"}\n  mcp__claude-flow__task_create {\"name\": \"Security Audit\", \"assignTo\": \"SecurityAuditor\"}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize testing swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Create unit tests\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Create integration tests\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Run performance tests\", \"status\": \"pending\", \"priority\": \"medium\"},\n    {\"id\": \"5\", \"content\": \"Execute security audit\", \"status\": \"pending\", \"priority\": \"high\"}\n  ]}\n\\`\\`\\``,\n\n    optimization: `\n‚ö° RECOMMENDED OPTIMIZATION AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"OptimizationLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"PerformanceProfiler\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"AlgorithmExpert\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"DatabaseOptimizer\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"SystemsTuner\"}\n  mcp__claude-flow__memory_store {\"key\": \"optimization/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"Performance Profiling\", \"assignTo\": \"PerformanceProfiler\"}\n  mcp__claude-flow__task_create {\"name\": \"Algorithm Optimization\", \"assignTo\": \"AlgorithmExpert\", \"dependsOn\": [\"Performance Profiling\"]}\n  mcp__claude-flow__task_create {\"name\": \"Database Optimization\", \"assignTo\": \"DatabaseOptimizer\", \"dependsOn\": [\"Performance Profiling\"]}\n  mcp__claude-flow__task_create {\"name\": \"System Tuning\", \"assignTo\": \"SystemsTuner\", \"dependsOn\": [\"Performance Profiling\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize optimization swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Profile system performance\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Optimize algorithms\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Optimize database queries\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"5\", \"content\": \"Tune system parameters\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n\n    maintenance: `\nüîß RECOMMENDED MAINTENANCE AGENTS:\n‚ö° SPAWN ALL AGENTS IN ONE BATCH - Copy this entire block:\n\n\\`\\`\\`\n[BatchTool - Single Message]:\n  mcp__claude-flow__agent_spawn {\"type\": \"coordinator\", \"name\": \"MaintenanceLead\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"SystemAuditor\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"coder\", \"name\": \"PatchDeveloper\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"tester\", \"name\": \"RegressionTester\"}\n  mcp__claude-flow__agent_spawn {\"type\": \"analyst\", \"name\": \"DocumentationUpdater\"}\n  mcp__claude-flow__memory_store {\"key\": \"maintenance/objective\", \"value\": \"${objective}\"}\n  mcp__claude-flow__task_create {\"name\": \"System Audit\", \"assignTo\": \"SystemAuditor\"}\n  mcp__claude-flow__task_create {\"name\": \"Develop Patches\", \"assignTo\": \"PatchDeveloper\", \"dependsOn\": [\"System Audit\"]}\n  mcp__claude-flow__task_create {\"name\": \"Regression Testing\", \"assignTo\": \"RegressionTester\", \"dependsOn\": [\"Develop Patches\"]}\n  mcp__claude-flow__task_create {\"name\": \"Update Documentation\", \"assignTo\": \"DocumentationUpdater\", \"dependsOn\": [\"Develop Patches\"]}\n  TodoWrite {\"todos\": [\n    {\"id\": \"1\", \"content\": \"Initialize maintenance swarm\", \"status\": \"completed\", \"priority\": \"high\"},\n    {\"id\": \"2\", \"content\": \"Audit system health\", \"status\": \"in_progress\", \"priority\": \"high\"},\n    {\"id\": \"3\", \"content\": \"Develop necessary patches\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"4\", \"content\": \"Run regression tests\", \"status\": \"pending\", \"priority\": \"high\"},\n    {\"id\": \"5\", \"content\": \"Update documentation\", \"status\": \"pending\", \"priority\": \"medium\"}\n  ]}\n\\`\\`\\``,\n  };\n\n  return recommendations[strategy] || recommendations['auto'];\n}\n\n// Allow direct execution\nif (import.meta.main) {\n  // When called directly as a script, parse all arguments\n  const args = [];\n  const flags = {};\n\n  // Parse arguments and flags\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (arg.startsWith('--')) {\n      const flagName = arg.substring(2);\n      const nextArg = args[i + 1];\n\n      if (nextArg && !nextArg.startsWith('--')) {\n        flags[flagName] = nextArg;\n        i++; // Skip the next argument\n      } else {\n        flags[flagName] = true;\n      }\n    } else {\n      args.push(arg);\n    }\n  }\n\n  // The objective is all non-flag arguments joined\n  const objective = args.join(' ');\n\n  // Execute the swarm command\n  await swarmCommand([objective], flags);\n}\n"],"names":["mkdirAsync","writeTextFile","exit","spawn","existsSync","chmodSync","statSync","readFileSync","open","process","isHeadlessEnvironment","ciEnvironments","isCI","some","env","isDocker","cgroupContent","includes","hasTTY","stdin","isTTY","stdout","basicSwarmNew","args","flags","objective","join","trim","console","error","showSwarmHelp","isHeadless","log","cleanup","on","executeSwarm","strategy","mode","result","output","success","swarmId","summary","duration","agents","totalAgents","tasks","totalTasks","timestamp","Date","toISOString","fs","writeFile","JSON","stringify","message","errorOutput","swarmCommand","headless","status","service","version","npm_package_version","outputFormat","outputFile","isJsonOutput","isNonInteractive","useJsonLogs","originalLog","originalError","level","isAnalysisMode","analysis","analysisMode","executor","execSync","maxAgents","strategyGuidance","getStrategyGuidance","modeGuidance","getModeGuidance","agentRecommendations","getAgentRecommendations","enableSparc","sparc","swarmPrompt","timeout","review","testing","claude","injectMemoryProtocol","enhanceSwarmPrompt","err","repeat","claudeArgs","push","claudeEnv","CLAUDE_CODE_ENABLE_TELEMETRY","OTEL_METRICS_EXPORTER","OTEL_LOGS_EXPORTER","claudeProcess","stdio","shell","killed","kill","code","claudeAvailable","fallback","background","CLAUDE_SWARM_NO_BG","Deno","now","Math","random","toString","substr","swarmRunDir","recursive","commandArgs","url","newFlags","key","value","Object","entries","String","logFile","logHandle","scriptContent","scriptPath","startTime","close","binDir","URL","pathname","bgScriptPath","bgArgs","bgProcess","decoder","TextDecoder","decode","shellScript","shellScriptPath","shellProcess","detached","unref","path","dirname","map","arg","filter","k","v","swarmAction","distPath","module","distError","ctx","command","execError","createSwarmFiles","createError","substring","parallel","distributed","monitor","persistence","encryption","communication","fileURLToPath","__filename","__dirname","possiblePaths","swarmDemoPath","p","swarmArgs","swarmProcess","e","write","end","Promise","resolve","reject","Error","targetMatch","match","targetDir","startsWith","cwd","promises","mkdir","isRestAPI","toLowerCase","apiDir","serverCode","packageJson","name","description","main","scripts","start","dev","test","keywords","author","license","dependencies","express","devDependencies","nodemon","jest","supertest","swarmMetadata","created","readme","appCode","guidanceMap","auto","research","development","optimization","maintenance","modeMap","centralized","hierarchical","mesh","hybrid","recommendations","i","length","flagName","nextArg"],"mappings":"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"}