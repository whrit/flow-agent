{"version":3,"sources":["../../../../src/cli/simple-commands/token-tracker.js"],"sourcesContent":["/**\n * Real Token Usage Tracking for Claude API Calls\n * Tracks actual token consumption from Claude Code interactions\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Token tracking cache\nlet tokenCache = {\n  sessions: {},\n  totals: {\n    input: 0,\n    output: 0,\n    total: 0\n  },\n  byAgent: {},\n  byCommand: {},\n  history: []\n};\n\n// Get metrics directory\nfunction getMetricsDir() {\n  return path.join(process.cwd(), '.claude-flow', 'metrics');\n}\n\n// Get token file path\nfunction getTokenFilePath() {\n  return path.join(getMetricsDir(), 'token-usage.json');\n}\n\n// Load existing token data\nexport async function loadTokenData() {\n  try {\n    const filePath = getTokenFilePath();\n    const data = await fs.readFile(filePath, 'utf-8');\n    tokenCache = JSON.parse(data);\n    return tokenCache;\n  } catch (error) {\n    // File doesn't exist or is invalid, use default\n    return tokenCache;\n  }\n}\n\n// Save token data to disk\nexport async function saveTokenData() {\n  try {\n    const dir = getMetricsDir();\n    await fs.mkdir(dir, { recursive: true });\n    \n    const filePath = getTokenFilePath();\n    await fs.writeFile(filePath, JSON.stringify(tokenCache, null, 2));\n  } catch (error) {\n    console.error('Failed to save token data:', error.message);\n  }\n}\n\n/**\n * Track tokens from a Claude interaction\n * @param {Object} params Token tracking parameters\n */\nexport async function trackTokens(params) {\n  const {\n    sessionId,\n    agentType = 'general',\n    command = 'unknown',\n    inputTokens = 0,\n    outputTokens = 0,\n    metadata = {}\n  } = params;\n  \n  // Update totals\n  tokenCache.totals.input += inputTokens;\n  tokenCache.totals.output += outputTokens;\n  tokenCache.totals.total += (inputTokens + outputTokens);\n  \n  // Track by agent type\n  if (!tokenCache.byAgent[agentType]) {\n    tokenCache.byAgent[agentType] = {\n      input: 0,\n      output: 0,\n      total: 0,\n      count: 0\n    };\n  }\n  tokenCache.byAgent[agentType].input += inputTokens;\n  tokenCache.byAgent[agentType].output += outputTokens;\n  tokenCache.byAgent[agentType].total += (inputTokens + outputTokens);\n  tokenCache.byAgent[agentType].count++;\n  \n  // Track by command\n  if (!tokenCache.byCommand[command]) {\n    tokenCache.byCommand[command] = {\n      input: 0,\n      output: 0,\n      total: 0,\n      count: 0\n    };\n  }\n  tokenCache.byCommand[command].input += inputTokens;\n  tokenCache.byCommand[command].output += outputTokens;\n  tokenCache.byCommand[command].total += (inputTokens + outputTokens);\n  tokenCache.byCommand[command].count++;\n  \n  // Add to history\n  tokenCache.history.push({\n    timestamp: Date.now(),\n    sessionId,\n    agentType,\n    command,\n    inputTokens,\n    outputTokens,\n    metadata\n  });\n  \n  // Keep only last 1000 entries in history\n  if (tokenCache.history.length > 1000) {\n    tokenCache.history = tokenCache.history.slice(-1000);\n  }\n  \n  // Save to disk\n  await saveTokenData();\n  \n  return {\n    sessionTotal: inputTokens + outputTokens,\n    grandTotal: tokenCache.totals.total\n  };\n}\n\n/**\n * Get real token usage data\n * @param {string} agentFilter Filter by agent type\n */\nexport async function getRealTokenUsage(agentFilter = 'all') {\n  await loadTokenData();\n  \n  // If no data tracked yet, check for Claude API logs\n  if (tokenCache.totals.total === 0) {\n    // Try to read from Claude Code's own tracking if available\n    const claudeTokens = await getClaudeCodeTokenUsage();\n    if (claudeTokens) {\n      return claudeTokens;\n    }\n  }\n  \n  // Filter by agent if specified\n  if (agentFilter !== 'all' && tokenCache.byAgent[agentFilter]) {\n    const agentData = tokenCache.byAgent[agentFilter];\n    return {\n      total: agentData.total,\n      input: agentData.input,\n      output: agentData.output,\n      byAgent: { [agentFilter]: agentData.total }\n    };\n  }\n  \n  // Return all data\n  const byAgent = {};\n  Object.entries(tokenCache.byAgent).forEach(([type, data]) => {\n    byAgent[type] = data.total;\n  });\n  \n  return {\n    total: tokenCache.totals.total,\n    input: tokenCache.totals.input,\n    output: tokenCache.totals.output,\n    byAgent,\n    byCommand: tokenCache.byCommand,\n    history: tokenCache.history\n  };\n}\n\n/**\n * Try to get token usage from Claude Code's own tracking\n */\nasync function getClaudeCodeTokenUsage() {\n  try {\n    // Check common locations for Claude token logs\n    const possiblePaths = [\n      path.join(process.env.HOME, '.config', 'claude', 'usage.json'),\n      path.join(process.env.HOME, '.claude', 'metrics.json'),\n      path.join(process.cwd(), '.claude', 'usage.json')\n    ];\n    \n    for (const logPath of possiblePaths) {\n      try {\n        const data = await fs.readFile(logPath, 'utf-8');\n        const usage = JSON.parse(data);\n        \n        // Convert Claude's format to our format\n        if (usage.tokens || usage.usage) {\n          const tokens = usage.tokens || usage.usage;\n          return {\n            total: tokens.total || 0,\n            input: tokens.input || tokens.prompt_tokens || 0,\n            output: tokens.output || tokens.completion_tokens || 0,\n            byAgent: {},\n            source: 'claude-code'\n          };\n        }\n      } catch (e) {\n        // Continue to next path\n      }\n    }\n  } catch (error) {\n    // No Claude tracking found\n  }\n  \n  // Return empty if no data found\n  return {\n    total: 0,\n    input: 0,\n    output: 0,\n    byAgent: {},\n    source: 'none'\n  };\n}\n\n/**\n * Calculate cost based on token usage\n * Using Claude 3 pricing (as of 2024)\n */\nexport function calculateCost(tokenData) {\n  // Claude 3 Opus pricing (per 1M tokens)\n  const INPUT_COST_PER_1M = 15.00;  // $15 per 1M input tokens\n  const OUTPUT_COST_PER_1M = 75.00; // $75 per 1M output tokens\n  \n  const inputCost = (tokenData.input / 1000000) * INPUT_COST_PER_1M;\n  const outputCost = (tokenData.output / 1000000) * OUTPUT_COST_PER_1M;\n  \n  return {\n    input: inputCost,\n    output: outputCost,\n    total: inputCost + outputCost\n  };\n}\n\n/**\n * Generate optimization suggestions based on real usage\n */\nexport function generateOptimizationSuggestions(tokenData) {\n  const suggestions = [];\n  \n  // Check if there's actual data\n  if (tokenData.total === 0) {\n    return ['No token usage data available. Start using Claude Code to track tokens.'];\n  }\n  \n  // Analyze input/output ratio\n  const outputRatio = tokenData.output / tokenData.total;\n  if (outputRatio > 0.6) {\n    suggestions.push('High output ratio detected. Consider more concise prompts to reduce generation.');\n  }\n  \n  // Analyze by agent type\n  if (tokenData.byAgent) {\n    const sortedAgents = Object.entries(tokenData.byAgent)\n      .sort((a, b) => b[1] - a[1]);\n    \n    if (sortedAgents.length > 0) {\n      const [topAgent, topUsage] = sortedAgents[0];\n      const percentage = (topUsage / tokenData.total) * 100;\n      \n      if (percentage > 50) {\n        suggestions.push(`${topAgent} agents consume ${percentage.toFixed(0)}% of tokens. Consider optimization or caching.`);\n      }\n    }\n  }\n  \n  // Check for repeated patterns in history\n  if (tokenData.history && tokenData.history.length > 10) {\n    const recentCommands = tokenData.history.slice(-20).map(h => h.command);\n    const duplicates = recentCommands.filter((cmd, i) => recentCommands.indexOf(cmd) !== i);\n    \n    if (duplicates.length > 5) {\n      suggestions.push('Repeated commands detected. Consider implementing result caching.');\n    }\n  }\n  \n  // Cost optimization\n  if (tokenData.total > 100000) {\n    suggestions.push('Consider using Claude Haiku for non-critical tasks to reduce costs by ~90%.');\n  }\n  \n  // General suggestions based on volume\n  if (tokenData.total > 50000) {\n    suggestions.push('Implement prompt templates to reduce input token usage.');\n    suggestions.push('Use streaming responses to optimize output generation.');\n  }\n  \n  return suggestions.length > 0 ? suggestions : ['Token usage is within optimal range.'];\n}\n\n/**\n * Generate detailed token usage report\n */\nexport async function generateTokenUsageReport(tokenData, agentFilter) {\n  const reportDir = path.join(process.cwd(), 'analysis-reports');\n  await fs.mkdir(reportDir, { recursive: true });\n  \n  const timestamp = Date.now();\n  const csvPath = path.join(reportDir, `token-usage-${timestamp}.csv`);\n  \n  // Create CSV content\n  let csv = 'Timestamp,Session,Agent,Command,Input Tokens,Output Tokens,Total\\n';\n  \n  if (tokenData.history) {\n    tokenData.history.forEach(entry => {\n      const date = new Date(entry.timestamp).toISOString();\n      const total = entry.inputTokens + entry.outputTokens;\n      csv += `${date},${entry.sessionId},${entry.agentType},${entry.command},${entry.inputTokens},${entry.outputTokens},${total}\\n`;\n    });\n  }\n  \n  // Add summary at the end\n  csv += '\\nSUMMARY\\n';\n  csv += `Total Input Tokens,${tokenData.input}\\n`;\n  csv += `Total Output Tokens,${tokenData.output}\\n`;\n  csv += `Total Tokens,${tokenData.total}\\n`;\n  \n  if (tokenData.byAgent) {\n    csv += '\\nBY AGENT TYPE\\n';\n    Object.entries(tokenData.byAgent).forEach(([type, usage]) => {\n      csv += `${type},${usage}\\n`;\n    });\n  }\n  \n  await fs.writeFile(csvPath, csv);\n  return csvPath;\n}\n\n/**\n * Get icon for agent type\n */\nexport function getAgentIcon(agentType) {\n  const icons = {\n    coordinator: '🎯',\n    developer: '👨‍💻',\n    researcher: '🔍',\n    analyzer: '📊',\n    tester: '🧪',\n    architect: '🏗️',\n    general: '🤖'\n  };\n  return icons[agentType] || '🤖';\n}\n\n/**\n * Reset token tracking (for testing)\n */\nexport async function resetTokenTracking() {\n  tokenCache = {\n    sessions: {},\n    totals: {\n      input: 0,\n      output: 0,\n      total: 0\n    },\n    byAgent: {},\n    byCommand: {},\n    history: []\n  };\n  await saveTokenData();\n}"],"names":["promises","fs","path","fileURLToPath","dirname","__filename","url","__dirname","tokenCache","sessions","totals","input","output","total","byAgent","byCommand","history","getMetricsDir","join","process","cwd","getTokenFilePath","loadTokenData","filePath","data","readFile","JSON","parse","error","saveTokenData","dir","mkdir","recursive","writeFile","stringify","console","message","trackTokens","params","sessionId","agentType","command","inputTokens","outputTokens","metadata","count","push","timestamp","Date","now","length","slice","sessionTotal","grandTotal","getRealTokenUsage","agentFilter","claudeTokens","getClaudeCodeTokenUsage","agentData","Object","entries","forEach","type","possiblePaths","env","HOME","logPath","usage","tokens","prompt_tokens","completion_tokens","source","e","calculateCost","tokenData","INPUT_COST_PER_1M","OUTPUT_COST_PER_1M","inputCost","outputCost","generateOptimizationSuggestions","suggestions","outputRatio","sortedAgents","sort","a","b","topAgent","topUsage","percentage","toFixed","recentCommands","map","h","duplicates","filter","cmd","i","indexOf","generateTokenUsageReport","reportDir","csvPath","csv","entry","date","toISOString","getAgentIcon","icons","coordinator","developer","researcher","analyzer","tester","architect","general","resetTokenTracking"],"mappings":"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"}