{"version":3,"sources":["../../../../src/cli/simple-commands/enhanced-webui-complete.js"],"sourcesContent":["/**\n * Enhanced Web UI Complete - Full Integration\n * Combines all MCP tools with enhanced UI views and real-time updates\n * Provides access to all 87 Claude-Flow MCP tools through a comprehensive interface\n */\n\nimport { printSuccess, printError, printWarning, printInfo } from '../utils.js';\nimport { compat } from '../runtime-detector.js';\nimport SwarmWebUIIntegration from './swarm-webui-integration.js';\nimport MCPIntegrationLayer from './mcp-integration-layer.js';\nimport ToolExecutionFramework from './tool-execution-framework.js';\nimport { EnhancedUIViews, ENHANCED_VIEWS } from './enhanced-ui-views.js';\nimport RealtimeUpdateSystem from './realtime-update-system.js';\n\n// Enhanced view modes with all tool categories\nconst ALL_VIEWS = {\n  ...ENHANCED_VIEWS,\n  // Add any additional views if needed\n};\n\nexport class EnhancedWebUIComplete {\n  constructor() {\n    this.processes = new Map();\n    this.running = true;\n    this.selectedIndex = 0;\n    this.currentView = ALL_VIEWS.PROCESSES;\n    this.agents = [];\n    this.tasks = [];\n    this.memoryStats = {\n      totalEntries: 0,\n      totalSize: 0,\n      namespaces: [],\n    };\n    this.logs = [];\n    this.systemStats = {\n      uptime: 0,\n      totalTasks: 0,\n      completedTasks: 0,\n      activeAgents: 0,\n      memoryUsage: 0,\n      cpuUsage: 0,\n    };\n\n    // Enhanced components\n    this.mcpIntegration = null;\n    this.toolFramework = null;\n    this.enhancedViews = null;\n    this.realtimeUpdates = null;\n\n    // Input handling\n    this.inputBuffer = '';\n    this.commandHistory = [];\n    this.historyIndex = -1;\n\n    // Colors for consistent styling\n    this.colors = {\n      cyan: (text) => `\\x1b[36m${text}\\x1b[0m`,\n      gray: (text) => `\\x1b[90m${text}\\x1b[0m`,\n      white: (text) => `\\x1b[37m${text}\\x1b[0m`,\n      yellow: (text) => `\\x1b[33m${text}\\x1b[0m`,\n      green: (text) => `\\x1b[32m${text}\\x1b[0m`,\n      red: (text) => `\\x1b[31m${text}\\x1b[0m`,\n      blue: (text) => `\\x1b[34m${text}\\x1b[0m`,\n      magenta: (text) => `\\x1b[35m${text}\\x1b[0m`,\n      bold: (text) => `\\x1b[1m${text}\\x1b[0m`,\n      dim: (text) => `\\x1b[2m${text}\\x1b[0m`,\n    };\n\n    this.initializeEnhancedUI();\n  }\n\n  /**\n   * Initialize all enhanced UI components\n   */\n  async initializeEnhancedUI() {\n    try {\n      // Initialize original swarm integration\n      this.swarmIntegration = new SwarmWebUIIntegration(this);\n\n      // Initialize MCP integration layer\n      this.mcpIntegration = new MCPIntegrationLayer(this);\n\n      // Initialize tool execution framework\n      this.toolFramework = new ToolExecutionFramework(this);\n\n      // Initialize enhanced UI views\n      this.enhancedViews = new EnhancedUIViews(this);\n\n      // Initialize real-time update system\n      this.realtimeUpdates = new RealtimeUpdateSystem(this);\n\n      // Initialize default processes\n      this.initializeProcesses();\n\n      // Initialize mock data\n      await this.initializeSystemData();\n\n      // Start system monitoring\n      this.startSystemMonitoring();\n\n      this.addLog('success', '🚀 Enhanced Web UI fully initialized with all 87 MCP tools');\n    } catch (error) {\n      this.addLog('error', `Failed to initialize enhanced UI: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize system processes\n   */\n  initializeProcesses() {\n    const PROCESSES = [\n      { id: 'event-bus', name: 'Event Bus', description: 'Central event distribution system' },\n      { id: 'orchestrator', name: 'Orchestrator', description: 'Main coordination engine' },\n      { id: 'memory-manager', name: 'Memory Manager', description: 'Persistent memory system' },\n      { id: 'terminal-pool', name: 'Terminal Pool', description: 'Terminal session management' },\n      { id: 'mcp-server', name: 'MCP Server', description: 'Model Context Protocol server' },\n      { id: 'coordinator', name: 'Coordinator', description: 'Task coordination service' },\n      { id: 'neural-engine', name: 'Neural Engine', description: 'Neural network processing' },\n      { id: 'analysis-service', name: 'Analysis Service', description: 'Performance analysis' },\n      { id: 'workflow-engine', name: 'Workflow Engine', description: 'Automation workflows' },\n      { id: 'github-connector', name: 'GitHub Connector', description: 'GitHub integration' },\n      { id: 'daa-controller', name: 'DAA Controller', description: 'Dynamic agent architecture' },\n    ];\n\n    PROCESSES.forEach((p) => {\n      this.processes.set(p.id, {\n        ...p,\n        status: 'running', // Start most services as running\n        pid: Math.floor(Math.random() * 50000) + 1000,\n        uptime: Math.floor(Math.random() * 86400), // Random uptime up to 24h\n        cpu: Math.random() * 5,\n        memory: Math.random() * 100,\n      });\n    });\n  }\n\n  /**\n   * Initialize system data\n   */\n  async initializeSystemData() {\n    // Initialize swarm\n    await this.swarmIntegration.initializeSwarm('hierarchical', 8);\n\n    // Initialize memory stats\n    this.memoryStats = {\n      totalEntries: 156,\n      totalSize: '2.3 MB',\n      namespaces: [\n        { name: 'neural', entries: 42, size: '856 KB' },\n        { name: 'swarm', entries: 35, size: '645 KB' },\n        { name: 'analysis', entries: 28, size: '423 KB' },\n        { name: 'workflow', entries: 24, size: '298 KB' },\n        { name: 'github', entries: 15, size: '156 KB' },\n        { name: 'system', entries: 12, size: '89 KB' },\n      ],\n    };\n\n    // Initialize logs\n    this.logs = [\n      {\n        time: new Date(),\n        level: 'success',\n        message: '🧠 Neural engine initialized with 27 models',\n      },\n      {\n        time: new Date(),\n        level: 'success',\n        message: '🐝 Swarm orchestration active with hierarchical topology',\n      },\n      {\n        time: new Date(),\n        level: 'info',\n        message: '📊 Analysis service monitoring 13 performance metrics',\n      },\n      {\n        time: new Date(),\n        level: 'success',\n        message: '🔄 Workflow engine loaded 11 automation tools',\n      },\n      {\n        time: new Date(),\n        level: 'info',\n        message: '🐙 GitHub connector established with 8 integration tools',\n      },\n      {\n        time: new Date(),\n        level: 'success',\n        message: '🤖 DAA controller managing 8 dynamic agent tools',\n      },\n      {\n        time: new Date(),\n        level: 'success',\n        message: '💾 Memory system active with 12 persistence tools',\n      },\n      {\n        time: new Date(),\n        level: 'success',\n        message: '🛠️ System utilities loaded 8 management tools',\n      },\n    ];\n\n    // Start uptime counter\n    setInterval(() => {\n      this.systemStats.uptime++;\n      // Update process uptimes\n      this.processes.forEach((process) => {\n        if (process.status === 'running') {\n          process.uptime++;\n        }\n      });\n    }, 1000);\n  }\n\n  /**\n   * Start system monitoring\n   */\n  startSystemMonitoring() {\n    setInterval(() => {\n      // Update system stats\n      this.systemStats.cpuUsage = Math.max(\n        0,\n        this.systemStats.cpuUsage + (Math.random() - 0.5) * 2,\n      );\n      this.systemStats.memoryUsage = Math.max(\n        0,\n        this.systemStats.memoryUsage + (Math.random() - 0.5) * 3,\n      );\n\n      // Update process stats\n      this.processes.forEach((process) => {\n        if (process.status === 'running') {\n          process.cpu = Math.max(0, process.cpu + (Math.random() - 0.5) * 1);\n          process.memory = Math.max(0, process.memory + (Math.random() - 0.5) * 5);\n        }\n      });\n\n      // Emit performance metrics for real-time updates\n      if (this.realtimeUpdates) {\n        this.realtimeUpdates.emit('system_stats_update', {\n          cpuUsage: this.systemStats.cpuUsage,\n          memoryUsage: this.systemStats.memoryUsage,\n          processCount: this.processes.size,\n        });\n      }\n    }, 5000);\n  }\n\n  /**\n   * Start the enhanced UI\n   */\n  async start() {\n    // Clear screen\n    console.clear();\n\n    // Show enhanced welcome\n    printSuccess('🧠 Claude-Flow Enhanced Web UI v2.0.0');\n    printInfo('🔧 Comprehensive MCP Tool Integration - 87 Tools Available');\n    console.log('─'.repeat(80));\n    console.log();\n\n    // Show tool categories summary\n    this.showToolCategoriesSummary();\n\n    // Initial render\n    this.render();\n\n    // Setup input handling\n    this.setupInputHandling();\n\n    // Main UI loop\n    while (this.running) {\n      await this.handleInput();\n      if (this.running) {\n        this.render();\n      }\n    }\n  }\n\n  /**\n   * Show tool categories summary at startup\n   */\n  showToolCategoriesSummary() {\n    const categories = [\n      { name: 'Swarm Coordination', count: 12, icon: '🐝' },\n      { name: 'Neural Networks', count: 15, icon: '🧠' },\n      { name: 'Memory & Persistence', count: 12, icon: '💾' },\n      { name: 'Analysis & Monitoring', count: 13, icon: '📊' },\n      { name: 'Workflow & Automation', count: 11, icon: '🔄' },\n      { name: 'GitHub Integration', count: 8, icon: '🐙' },\n      { name: 'Dynamic Agents (DAA)', count: 8, icon: '🤖' },\n      { name: 'System & Utilities', count: 8, icon: '🛠️' },\n    ];\n\n    console.log(this.colors.cyan('📂 Available Tool Categories:'));\n    categories.forEach((cat) => {\n      console.log(\n        `  ${cat.icon} ${this.colors.white(cat.name)}: ${this.colors.yellow(cat.count)} tools`,\n      );\n    });\n    console.log();\n    console.log(this.colors.green(`Total: ${this.colors.bold('87')} MCP tools ready for use`));\n    console.log();\n  }\n\n  /**\n   * Setup input handling for enhanced features\n   */\n  setupInputHandling() {\n    // Enable raw input mode for better key handling\n    if (process.stdin.setRawMode) {\n      process.stdin.setRawMode(true);\n    }\n    process.stdin.resume();\n  }\n\n  /**\n   * Enhanced render method\n   */\n  render() {\n    // Clear screen and move cursor to top\n    console.log('\\x1b[2J\\x1b[H');\n\n    // Header with enhanced navigation\n    this.renderEnhancedHeader();\n\n    // Main content based on current view\n    switch (this.currentView) {\n      case ALL_VIEWS.PROCESSES:\n        this.renderProcessView();\n        break;\n      case ALL_VIEWS.STATUS:\n        this.renderStatusView();\n        break;\n      case ALL_VIEWS.ORCHESTRATION:\n        this.renderOrchestrationView();\n        break;\n      case ALL_VIEWS.MEMORY:\n        this.renderMemoryView();\n        break;\n      case ALL_VIEWS.LOGS:\n        this.renderLogsView();\n        break;\n      case ALL_VIEWS.NEURAL:\n        this.enhancedViews.renderNeuralView();\n        break;\n      case ALL_VIEWS.ANALYSIS:\n        this.enhancedViews.renderAnalysisView();\n        break;\n      case ALL_VIEWS.WORKFLOW:\n        this.enhancedViews.renderWorkflowView();\n        break;\n      case ALL_VIEWS.GITHUB:\n        this.enhancedViews.renderGitHubView();\n        break;\n      case ALL_VIEWS.DAA:\n        this.enhancedViews.renderDAAView();\n        break;\n      case ALL_VIEWS.SYSTEM:\n        this.enhancedViews.renderSystemView();\n        break;\n      case ALL_VIEWS.TOOLS:\n        this.enhancedViews.renderToolsView();\n        break;\n      case ALL_VIEWS.HELP:\n        this.renderEnhancedHelpView();\n        break;\n    }\n\n    // Enhanced footer with more controls\n    this.renderEnhancedFooter();\n  }\n\n  /**\n   * Render enhanced header with all navigation options\n   */\n  renderEnhancedHeader() {\n    console.log(this.colors.cyan(this.colors.bold('🧠 Claude-Flow Enhanced Web UI v2.0.0')));\n    console.log(this.colors.gray('─'.repeat(80)));\n\n    // Main navigation tabs (row 1)\n    const mainTabs = [\n      { key: '1', view: ALL_VIEWS.PROCESSES, label: 'Processes' },\n      { key: '2', view: ALL_VIEWS.STATUS, label: 'Status' },\n      { key: '3', view: ALL_VIEWS.ORCHESTRATION, label: 'Orchestration' },\n      { key: '4', view: ALL_VIEWS.MEMORY, label: 'Memory' },\n      { key: '5', view: ALL_VIEWS.LOGS, label: 'Logs' },\n    ];\n\n    let mainTabLine = '';\n    mainTabs.forEach((tab) => {\n      const isActive = this.currentView === tab.view;\n      const label = isActive\n        ? this.colors.yellow(`[${tab.label}]`)\n        : this.colors.gray(`${tab.label}`);\n      mainTabLine += `  ${this.colors.bold(tab.key)}:${label}`;\n    });\n\n    console.log(mainTabLine);\n\n    // Enhanced tool tabs (row 2)\n    const toolTabs = [\n      { key: '6', view: ALL_VIEWS.NEURAL, label: 'Neural', icon: '🧠' },\n      { key: '7', view: ALL_VIEWS.ANALYSIS, label: 'Analysis', icon: '📊' },\n      { key: '8', view: ALL_VIEWS.WORKFLOW, label: 'Workflow', icon: '🔄' },\n      { key: '9', view: ALL_VIEWS.GITHUB, label: 'GitHub', icon: '🐙' },\n      { key: '0', view: ALL_VIEWS.DAA, label: 'DAA', icon: '🤖' },\n    ];\n\n    let toolTabLine = '';\n    toolTabs.forEach((tab) => {\n      const isActive = this.currentView === tab.view;\n      const label = isActive\n        ? this.colors.yellow(`[${tab.icon}${tab.label}]`)\n        : this.colors.gray(`${tab.icon}${tab.label}`);\n      toolTabLine += `  ${this.colors.bold(tab.key)}:${label}`;\n    });\n\n    console.log(toolTabLine);\n\n    // Additional tabs (row 3)\n    const additionalTabs = [\n      { key: 't', view: ALL_VIEWS.TOOLS, label: 'Tools', icon: '🎛️' },\n      { key: 's', view: ALL_VIEWS.SYSTEM, label: 'System', icon: '🛠️' },\n      { key: 'h', view: ALL_VIEWS.HELP, label: 'Help', icon: '❓' },\n    ];\n\n    let additionalTabLine = '';\n    additionalTabs.forEach((tab) => {\n      const isActive = this.currentView === tab.view;\n      const label = isActive\n        ? this.colors.yellow(`[${tab.icon}${tab.label}]`)\n        : this.colors.gray(`${tab.icon}${tab.label}`);\n      additionalTabLine += `  ${this.colors.bold(tab.key)}:${label}`;\n    });\n\n    console.log(additionalTabLine);\n    console.log(this.colors.gray('─'.repeat(80)));\n    console.log();\n  }\n\n  /**\n   * Render enhanced help view\n   */\n  renderEnhancedHelpView() {\n    console.log(this.colors.white(this.colors.bold('❓ Enhanced Web UI Help')));\n    console.log();\n\n    console.log(this.colors.cyan('🗝️ Navigation Keys:'));\n    console.log('  1-5: Main views (Processes, Status, Orchestration, Memory, Logs)');\n    console.log('  6-0: Tool categories (Neural, Analysis, Workflow, GitHub, DAA)');\n    console.log('  t:   Tool execution center');\n    console.log('  s:   System utilities');\n    console.log('  h:   This help screen');\n    console.log();\n\n    console.log(this.colors.cyan('🔧 Tool Categories:'));\n    console.log('  🧠 Neural (15 tools): Training, prediction, model management');\n    console.log('  📊 Analysis (13 tools): Performance reports, monitoring, metrics');\n    console.log('  🔄 Workflow (11 tools): Automation, pipelines, scheduling');\n    console.log('  🐙 GitHub (8 tools): Repository management, PR automation');\n    console.log('  🤖 DAA (8 tools): Dynamic agent architecture');\n    console.log('  🛠️ System (8 tools): Configuration, security, diagnostics');\n    console.log('  🐝 Swarm (12 tools): Agent coordination, task orchestration');\n    console.log('  💾 Memory (12 tools): Persistence, caching, namespaces');\n    console.log();\n\n    console.log(this.colors.cyan('⚡ Quick Actions:'));\n    console.log('  r: Run custom tool (from any view)');\n    console.log('  w: Execute workflow');\n    console.log('  b: Batch tool execution');\n    console.log('  c: Clear screen');\n    console.log('  q: Quit application');\n    console.log();\n\n    console.log(this.colors.cyan('💡 Features:'));\n    console.log('  • Real-time updates and monitoring');\n    console.log('  • Comprehensive MCP tool integration');\n    console.log('  • Batch and workflow execution');\n    console.log('  • Performance tracking and analysis');\n    console.log('  • Memory management and persistence');\n    console.log('  • GitHub integration and automation');\n    console.log('  • Dynamic agent architecture');\n    console.log('  • Neural network management');\n  }\n\n  /**\n   * Render enhanced footer\n   */\n  renderEnhancedFooter() {\n    console.log();\n    console.log(this.colors.gray('─'.repeat(80)));\n\n    // Status line\n    const mcpStatus = this.mcpIntegration ? this.mcpIntegration.getStatus() : null;\n    const toolStatus = this.toolFramework ? this.toolFramework.getStatus() : null;\n\n    let statusLine = `🧠 Claude-Flow Enhanced UI | `;\n    statusLine += `MCP: ${mcpStatus?.mcpAvailable ? this.colors.green('✓') : this.colors.red('✗')} | `;\n    statusLine += `Tools: ${this.colors.yellow(mcpStatus?.totalTools || 87)} | `;\n    statusLine += `Active: ${this.colors.blue(toolStatus?.currentExecutions || 0)} | `;\n    statusLine += `Queued: ${this.colors.cyan(toolStatus?.queuedExecutions || 0)} | `;\n    statusLine += `Uptime: ${this.colors.white(this.formatUptime(this.systemStats.uptime))}`;\n\n    console.log(statusLine);\n\n    // Controls line\n    let controlsLine = `${this.colors.gray('Controls:')} `;\n    controlsLine += `${this.colors.yellow('r')}=Run Tool | `;\n    controlsLine += `${this.colors.yellow('w')}=Workflow | `;\n    controlsLine += `${this.colors.yellow('b')}=Batch | `;\n    controlsLine += `${this.colors.yellow('c')}=Clear | `;\n    controlsLine += `${this.colors.yellow('q')}=Quit | `;\n    controlsLine += `${this.colors.yellow('↑↓')}=Navigate`;\n\n    console.log(controlsLine);\n  }\n\n  /**\n   * Enhanced input handling\n   */\n  async handleInput() {\n    return new Promise((resolve) => {\n      const onData = async (chunk) => {\n        const key = chunk.toString();\n\n        // Remove listener\n        process.stdin.removeListener('data', onData);\n\n        try {\n          // Handle navigation keys\n          if (await this.handleNavigationInput(key)) {\n            resolve();\n            return;\n          }\n\n          // Handle enhanced view input\n          if (await this.handleEnhancedViewInput(key)) {\n            resolve();\n            return;\n          }\n\n          // Handle global commands\n          if (await this.handleGlobalCommands(key)) {\n            resolve();\n            return;\n          }\n\n          // Handle original input\n          await this.handleOriginalInput(key);\n        } catch (error) {\n          this.addLog('error', `Input handling error: ${error.message}`);\n        }\n\n        resolve();\n      };\n\n      process.stdin.once('data', onData);\n    });\n  }\n\n  /**\n   * Handle navigation input\n   */\n  async handleNavigationInput(key) {\n    const navigationMap = {\n      1: ALL_VIEWS.PROCESSES,\n      2: ALL_VIEWS.STATUS,\n      3: ALL_VIEWS.ORCHESTRATION,\n      4: ALL_VIEWS.MEMORY,\n      5: ALL_VIEWS.LOGS,\n      6: ALL_VIEWS.NEURAL,\n      7: ALL_VIEWS.ANALYSIS,\n      8: ALL_VIEWS.WORKFLOW,\n      9: ALL_VIEWS.GITHUB,\n      0: ALL_VIEWS.DAA,\n      t: ALL_VIEWS.TOOLS,\n      s: ALL_VIEWS.SYSTEM,\n      h: ALL_VIEWS.HELP,\n    };\n\n    if (navigationMap[key]) {\n      this.currentView = navigationMap[key];\n      this.selectedIndex = 0;\n      this.addLog('info', `Switched to ${this.currentView} view`);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Handle enhanced view input\n   */\n  async handleEnhancedViewInput(key) {\n    if (this.enhancedViews) {\n      return await this.enhancedViews.handleEnhancedInput(key, this.currentView);\n    }\n    return false;\n  }\n\n  /**\n   * Handle global commands\n   */\n  async handleGlobalCommands(key) {\n    switch (key) {\n      case 'r':\n        await this.promptRunTool();\n        return true;\n      case 'w':\n        await this.promptRunWorkflow();\n        return true;\n      case 'b':\n        await this.promptBatchExecution();\n        return true;\n      case 'c':\n        console.clear();\n        return true;\n      case 'q':\n      case '\\x03': // Ctrl+C\n        await this.shutdown();\n        return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Prompt for tool execution\n   */\n  async promptRunTool() {\n    // In a real implementation, this would show an interactive prompt\n    // For now, execute a sample tool\n    this.addLog('info', 'Tool execution prompt (demo)');\n\n    try {\n      const result = await this.toolFramework.executeTool('features_detect');\n      this.addLog('success', 'Tool executed successfully');\n      this.enhancedViews.displayToolResult(result);\n    } catch (error) {\n      this.addLog('error', `Tool execution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Prompt for workflow execution\n   */\n  async promptRunWorkflow() {\n    this.addLog('info', 'Executing sample workflow...');\n\n    try {\n      const result = await this.toolFramework.executePredefinedWorkflow('performance_analysis');\n      this.addLog('success', 'Workflow completed successfully');\n    } catch (error) {\n      this.addLog('error', `Workflow failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Prompt for batch execution\n   */\n  async promptBatchExecution() {\n    this.addLog('info', 'Executing sample batch...');\n\n    const batchTools = [\n      { toolName: 'swarm_status' },\n      { toolName: 'neural_status' },\n      { toolName: 'memory_usage', parameters: { action: 'list' } },\n    ];\n\n    try {\n      const result = await this.toolFramework.executeToolsBatch(batchTools, { parallel: true });\n      this.addLog(\n        'success',\n        `Batch completed: ${result.summary.successful}/${result.summary.total} successful`,\n      );\n    } catch (error) {\n      this.addLog('error', `Batch execution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Handle original input for backward compatibility\n   */\n  async handleOriginalInput(key) {\n    // Handle original process view navigation\n    if (this.currentView === ALL_VIEWS.PROCESSES) {\n      switch (key) {\n        case '\\x1b[A': // Up arrow\n          this.selectedIndex = Math.max(0, this.selectedIndex - 1);\n          break;\n        case '\\x1b[B': // Down arrow\n          this.selectedIndex = Math.min(this.processes.size - 1, this.selectedIndex + 1);\n          break;\n        case ' ':\n        case '\\r':\n          await this.toggleSelectedProcess();\n          break;\n      }\n    }\n  }\n\n  /**\n   * Toggle selected process status\n   */\n  async toggleSelectedProcess() {\n    const processes = Array.from(this.processes.values());\n    const selected = processes[this.selectedIndex];\n\n    if (selected) {\n      if (selected.status === 'running') {\n        selected.status = 'stopped';\n        selected.pid = null;\n        this.addLog('warning', `Stopped ${selected.name}`);\n      } else {\n        selected.status = 'running';\n        selected.pid = Math.floor(Math.random() * 50000) + 1000;\n        this.addLog('success', `Started ${selected.name}`);\n      }\n    }\n  }\n\n  /**\n   * Add log entry with enhanced formatting\n   */\n  addLog(level, message) {\n    const logEntry = {\n      time: new Date(),\n      level,\n      message,\n    };\n\n    this.logs.unshift(logEntry);\n\n    // Keep only last 100 logs\n    if (this.logs.length > 100) {\n      this.logs = this.logs.slice(0, 100);\n    }\n\n    // Emit log event for real-time updates\n    if (this.realtimeUpdates) {\n      this.realtimeUpdates.emit('log_added', logEntry);\n    }\n  }\n\n  /**\n   * Render process view (original)\n   */\n  renderProcessView() {\n    console.log(this.colors.white(this.colors.bold('Process Management')));\n    console.log();\n\n    let index = 0;\n    for (const [id, process] of this.processes) {\n      const selected = index === this.selectedIndex;\n      const prefix = selected ? this.colors.yellow('▶ ') : '  ';\n      const status = this.getStatusIcon(process.status);\n      const name = selected ? this.colors.yellow(process.name) : this.colors.white(process.name);\n\n      console.log(`${prefix}${status} ${name}`);\n      console.log(`     ${this.colors.gray(process.description)}`);\n\n      if (process.status === 'running') {\n        const stats = this.colors.dim(\n          `PID: ${process.pid} | Uptime: ${this.formatUptime(process.uptime)} | CPU: ${process.cpu.toFixed(1)}% | Mem: ${process.memory.toFixed(0)}MB`,\n        );\n        console.log(`     ${stats}`);\n      }\n      console.log();\n\n      index++;\n    }\n\n    // Enhanced stats\n    const running = Array.from(this.processes.values()).filter(\n      (p) => p.status === 'running',\n    ).length;\n    console.log(this.colors.gray('─'.repeat(80)));\n    console.log(\n      this.colors.white(\n        `Total: ${this.processes.size} | Running: ${this.colors.green(running)} | Stopped: ${this.colors.gray(this.processes.size - running)}`,\n      ),\n    );\n    console.log(\n      this.colors.cyan(\n        `Enhanced: ${this.colors.yellow('87 MCP tools')} available across ${this.colors.yellow('8 categories')}`,\n      ),\n    );\n  }\n\n  /**\n   * Render status view with enhanced metrics\n   */\n  renderStatusView() {\n    console.log(this.colors.white(this.colors.bold('Enhanced System Status')));\n    console.log();\n\n    // System overview\n    console.log(this.colors.cyan('📊 System Overview'));\n    console.log(`  Uptime: ${this.colors.green(this.formatUptime(this.systemStats.uptime))}`);\n    console.log(`  Process Health: ${this.getHealthBar()}`);\n    console.log(`  MCP Tools: ${this.colors.yellow('87')} available`);\n    console.log(`  Tool Categories: ${this.colors.blue('8')} active`);\n    console.log();\n\n    // Enhanced resource usage\n    console.log(this.colors.cyan('💻 Resource Usage'));\n    console.log(\n      `  CPU Usage: ${this.getUsageBar(this.systemStats.cpuUsage, 100)} ${this.systemStats.cpuUsage.toFixed(1)}%`,\n    );\n    console.log(\n      `  Memory: ${this.getUsageBar(this.systemStats.memoryUsage, 100)} ${this.systemStats.memoryUsage.toFixed(1)}%`,\n    );\n    console.log();\n\n    // Enhanced activity metrics\n    console.log(this.colors.cyan('📈 Enhanced Activity Metrics'));\n    console.log(\n      `  Active Agents: ${this.colors.yellow(this.agents.filter((a) => a.status === 'working').length)}/${this.agents.length}`,\n    );\n    console.log(`  Total Tasks: ${this.tasks.length}`);\n    console.log(`  Tool Executions: ${this.colors.green('Running')}`);\n    console.log(`  Real-time Updates: ${this.colors.green('Active')}`);\n    console.log();\n\n    // Tool status\n    const mcpStatus = this.mcpIntegration ? this.mcpIntegration.getStatus() : null;\n    if (mcpStatus) {\n      console.log(this.colors.cyan('🔧 Tool System Status'));\n      console.log(\n        `  MCP Connection: ${mcpStatus.mcpAvailable ? this.colors.green('Connected') : this.colors.red('Mock Mode')}`,\n      );\n      console.log(`  Active Executions: ${this.colors.yellow(mcpStatus.activeExecutions || 0)}`);\n      console.log(`  Cache Size: ${this.colors.blue(mcpStatus.cacheSize || 0)} entries`);\n      console.log();\n    }\n\n    // Recent events\n    console.log(this.colors.cyan('🔔 Recent Events'));\n    this.logs.slice(0, 5).forEach((log) => {\n      const time = log.time.toLocaleTimeString();\n      const icon =\n        log.level === 'success'\n          ? '✓'\n          : log.level === 'warning'\n            ? '⚠'\n            : log.level === 'error'\n              ? '❌'\n              : 'ℹ';\n      const color =\n        log.level === 'success'\n          ? this.colors.green\n          : log.level === 'warning'\n            ? this.colors.yellow\n            : log.level === 'error'\n              ? this.colors.red\n              : this.colors.blue;\n      console.log(`  ${this.colors.gray(time)} ${color(icon)} ${log.message}`);\n    });\n  }\n\n  /**\n   * Render orchestration view (enhanced)\n   */\n  renderOrchestrationView() {\n    console.log(this.colors.white(this.colors.bold('Enhanced Swarm Orchestration')));\n    console.log();\n\n    // Enhanced swarm metrics\n    const metrics = this.swarmIntegration.getSwarmMetrics();\n    if (metrics) {\n      console.log(this.colors.cyan('🐝 Swarm Status'));\n      console.log(`  Swarm ID: ${this.colors.yellow(metrics.swarmId)}`);\n      console.log(`  Topology: ${this.colors.blue('hierarchical')} (optimized)`);\n      console.log(\n        `  Agents: ${this.colors.green(metrics.agents.active)}/${metrics.agents.total} active`,\n      );\n      console.log(\n        `  Tasks: ${this.colors.yellow(metrics.tasks.inProgress)} in progress, ${this.colors.green(metrics.tasks.completed)} completed`,\n      );\n      console.log(`  Efficiency: ${this.colors.green(metrics.efficiency + '%')}`);\n      console.log(`  Coordination Tools: ${this.colors.cyan('12')} available`);\n      console.log();\n    }\n\n    // Enhanced agents section\n    console.log(this.colors.cyan('🤖 Enhanced Agent Pool'));\n    console.log();\n    this.agents.forEach((agent, index) => {\n      const selected = this.currentView === ALL_VIEWS.ORCHESTRATION && index === this.selectedIndex;\n      const prefix = selected ? this.colors.yellow('▶ ') : '  ';\n      const statusIcon =\n        agent.status === 'working' ? this.colors.green('●') : this.colors.gray('○');\n      const name = selected ? this.colors.yellow(agent.name) : this.colors.white(agent.name);\n\n      console.log(`${prefix}${statusIcon} ${name} (${agent.type})`);\n      console.log(`     ID: ${agent.id} | Tasks: ${agent.tasks} | Status: ${agent.status}`);\n      if (agent.capabilities && agent.capabilities.length > 0) {\n        console.log(`     Capabilities: ${this.colors.dim(agent.capabilities.join(', '))}`);\n      }\n      console.log();\n    });\n\n    console.log(this.colors.gray('─'.repeat(40)));\n    console.log(\n      this.colors.cyan('⚡ Quick Actions: [1-9] Execute swarm tools | [r] Run custom tool'),\n    );\n  }\n\n  /**\n   * Render memory view (enhanced)\n   */\n  renderMemoryView() {\n    console.log(this.colors.white(this.colors.bold('Enhanced Memory Management')));\n    console.log();\n\n    // Enhanced memory overview\n    console.log(this.colors.cyan('💾 Memory Overview'));\n    console.log(`  Total Entries: ${this.colors.yellow(this.memoryStats.totalEntries)}`);\n    console.log(`  Total Size: ${this.colors.blue(this.memoryStats.totalSize)}`);\n    console.log(`  Namespaces: ${this.colors.green(this.memoryStats.namespaces.length)}`);\n    console.log(`  Persistence Tools: ${this.colors.cyan('12')} available`);\n    console.log();\n\n    // Enhanced namespace details\n    console.log(this.colors.cyan('📂 Namespace Details'));\n    this.memoryStats.namespaces.forEach((ns) => {\n      const usageBar = this.getUsageBar(ns.entries, 100);\n      console.log(\n        `  ${this.colors.white(ns.name.padEnd(12))} ${usageBar} ${this.colors.yellow(ns.entries)} entries (${this.colors.blue(ns.size)})`,\n      );\n    });\n\n    console.log();\n    console.log(this.colors.cyan('⚡ Memory Tools Available:'));\n    console.log(`  ${this.colors.gray('• Store/Retrieve operations')}`);\n    console.log(`  ${this.colors.gray('• Backup and restore')}`);\n    console.log(`  ${this.colors.gray('• Cross-session persistence')}`);\n    console.log(`  ${this.colors.gray('• Memory analytics and compression')}`);\n  }\n\n  /**\n   * Render logs view (enhanced)\n   */\n  renderLogsView() {\n    console.log(this.colors.white(this.colors.bold('Enhanced System Logs')));\n    console.log();\n\n    console.log(this.colors.cyan(`📋 Recent Activity (${this.logs.length} total entries)`));\n    console.log();\n\n    this.logs.slice(0, 15).forEach((log) => {\n      const time = log.time.toLocaleTimeString();\n      const icon =\n        log.level === 'success'\n          ? this.colors.green('✅')\n          : log.level === 'warning'\n            ? this.colors.yellow('⚠️')\n            : log.level === 'error'\n              ? this.colors.red('❌')\n              : this.colors.blue('ℹ️');\n\n      console.log(`${this.colors.gray(time)} ${icon} ${log.message}`);\n    });\n\n    console.log();\n    console.log(this.colors.gray('─'.repeat(80)));\n    console.log(\n      this.colors.cyan(\n        '🔍 Log Analysis Tools Available: Pattern detection, error analysis, usage statistics',\n      ),\n    );\n  }\n\n  /**\n   * Utility methods\n   */\n  getStatusIcon(status) {\n    return status === 'running' ? this.colors.green('●') : this.colors.gray('○');\n  }\n\n  formatUptime(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours}h ${minutes}m ${secs}s`;\n  }\n\n  getHealthBar() {\n    const running = Array.from(this.processes.values()).filter(\n      (p) => p.status === 'running',\n    ).length;\n    const total = this.processes.size;\n    const percentage = (running / total) * 100;\n    return this.getUsageBar(percentage, 100);\n  }\n\n  getUsageBar(value, max, width = 20) {\n    const percentage = Math.min((value / max) * 100, 100);\n    const filled = Math.round((percentage / 100) * width);\n    const empty = width - filled;\n\n    const color =\n      percentage > 80 ? this.colors.red : percentage > 60 ? this.colors.yellow : this.colors.green;\n    return color('█'.repeat(filled)) + this.colors.gray('░'.repeat(empty));\n  }\n\n  /**\n   * Shutdown the enhanced UI\n   */\n  async shutdown() {\n    console.log();\n    this.addLog('info', 'Shutting down Enhanced Web UI...');\n\n    // Cleanup enhanced components\n    if (this.enhancedViews) {\n      this.enhancedViews.cleanup();\n    }\n\n    if (this.realtimeUpdates) {\n      this.realtimeUpdates.cleanup();\n    }\n\n    // Reset terminal\n    if (process.stdin.setRawMode) {\n      process.stdin.setRawMode(false);\n    }\n    process.stdin.pause();\n\n    this.running = false;\n\n    console.log();\n    printSuccess('👋 Enhanced Web UI shutdown complete');\n    process.exit(0);\n  }\n}\n\nexport default EnhancedWebUIComplete;\n"],"names":["printSuccess","printInfo","SwarmWebUIIntegration","MCPIntegrationLayer","ToolExecutionFramework","EnhancedUIViews","ENHANCED_VIEWS","RealtimeUpdateSystem","ALL_VIEWS","EnhancedWebUIComplete","processes","Map","running","selectedIndex","currentView","PROCESSES","agents","tasks","memoryStats","totalEntries","totalSize","namespaces","logs","systemStats","uptime","totalTasks","completedTasks","activeAgents","memoryUsage","cpuUsage","mcpIntegration","toolFramework","enhancedViews","realtimeUpdates","inputBuffer","commandHistory","historyIndex","colors","cyan","text","gray","white","yellow","green","red","blue","magenta","bold","dim","initializeEnhancedUI","swarmIntegration","initializeProcesses","initializeSystemData","startSystemMonitoring","addLog","error","message","id","name","description","forEach","p","set","status","pid","Math","floor","random","cpu","memory","initializeSwarm","entries","size","time","Date","level","setInterval","process","max","emit","processCount","start","console","clear","log","repeat","showToolCategoriesSummary","render","setupInputHandling","handleInput","categories","count","icon","cat","stdin","setRawMode","resume","renderEnhancedHeader","renderProcessView","STATUS","renderStatusView","ORCHESTRATION","renderOrchestrationView","MEMORY","renderMemoryView","LOGS","renderLogsView","NEURAL","renderNeuralView","ANALYSIS","renderAnalysisView","WORKFLOW","renderWorkflowView","GITHUB","renderGitHubView","DAA","renderDAAView","SYSTEM","renderSystemView","TOOLS","renderToolsView","HELP","renderEnhancedHelpView","renderEnhancedFooter","mainTabs","key","view","label","mainTabLine","tab","isActive","toolTabs","toolTabLine","additionalTabs","additionalTabLine","mcpStatus","getStatus","toolStatus","statusLine","mcpAvailable","totalTools","currentExecutions","queuedExecutions","formatUptime","controlsLine","Promise","resolve","onData","chunk","toString","removeListener","handleNavigationInput","handleEnhancedViewInput","handleGlobalCommands","handleOriginalInput","once","navigationMap","t","s","h","handleEnhancedInput","promptRunTool","promptRunWorkflow","promptBatchExecution","shutdown","result","executeTool","displayToolResult","executePredefinedWorkflow","batchTools","toolName","parameters","action","executeToolsBatch","parallel","summary","successful","total","min","toggleSelectedProcess","Array","from","values","selected","logEntry","unshift","length","slice","index","prefix","getStatusIcon","stats","toFixed","filter","getHealthBar","getUsageBar","a","activeExecutions","cacheSize","toLocaleTimeString","color","metrics","getSwarmMetrics","swarmId","active","inProgress","completed","efficiency","agent","statusIcon","type","capabilities","join","ns","usageBar","padEnd","seconds","hours","minutes","secs","percentage","value","width","filled","round","empty","cleanup","pause","exit"],"mappings":"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"}