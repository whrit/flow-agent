{"version":3,"sources":["../../../src/cli/cli-core.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Claude-Flow CLI - Core implementation using Node.js\n */\n\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport const VERSION = '1.0.45';\n\ninterface CommandContext {\n  args: string[];\n  flags: Record<string, unknown>;\n  config?: Record<string, unknown> | undefined;\n}\n\ninterface Command {\n  name: string;\n  description: string;\n  aliases?: string[];\n  subcommands?: Command[];\n  action?: (ctx: CommandContext) => Promise<void> | void;\n  options?: Option[];\n}\n\ninterface Option {\n  name: string;\n  short?: string;\n  description: string;\n  type?: 'string' | 'boolean' | 'number';\n  default?: unknown;\n  required?: boolean;\n}\n\nclass CLI {\n  private commands: Map<string, Command> = new Map();\n  private globalOptions: Option[] = [\n    {\n      name: 'help',\n      short: 'h',\n      description: 'Show help',\n      type: 'boolean',\n    },\n    {\n      name: 'version',\n      short: 'v',\n      description: 'Show version',\n      type: 'boolean',\n    },\n    {\n      name: 'config',\n      short: 'c',\n      description: 'Path to configuration file',\n      type: 'string',\n    },\n    {\n      name: 'verbose',\n      description: 'Enable verbose logging',\n      type: 'boolean',\n    },\n    {\n      name: 'log-level',\n      description: 'Set log level (debug, info, warn, error)',\n      type: 'string',\n      default: 'info',\n    },\n  ];\n\n  constructor(\n    private name: string,\n    private description: string,\n  ) {}\n\n  command(cmd: Command): this {\n    // Handle both our Command interface and Commander.js Command objects\n    const cmdName =\n      typeof (cmd as any).name === 'function' ? (cmd as any).name() : cmd.name || 'unknown';\n    this.commands.set(cmdName, cmd);\n    if (cmd.aliases && typeof cmd.aliases[Symbol.iterator] === 'function') {\n      for (const alias of cmd.aliases) {\n        this.commands.set(alias, cmd);\n      }\n    }\n    return this;\n  }\n\n  async run(args = process.argv.slice(2)): Promise<void> {\n    // Parse arguments manually since we're replacing the Deno parse function\n    const flags = this.parseArgs(args);\n\n    if (flags.version || flags.v) {\n      console.log(`${this.name} v${VERSION}`);\n      return;\n    }\n\n    const commandName = flags._[0]?.toString() || '';\n\n    if (!commandName || flags.help || flags.h) {\n      this.showHelp();\n      return;\n    }\n\n    const command = this.commands.get(commandName);\n    if (!command) {\n      console.error(chalk.red(`Unknown command: ${commandName}`));\n      console.log(`Run \"${this.name} help\" for available commands`);\n      process.exit(1);\n    }\n\n    const ctx: CommandContext = {\n      args: flags._.slice(1).map(String),\n      flags: flags as Record<string, unknown>,\n      config: await this.loadConfig(flags.config as string),\n    };\n\n    try {\n      if (command.action) {\n        await command.action(ctx);\n      } else {\n        console.log(chalk.yellow(`Command '${commandName}' has no action defined`));\n      }\n    } catch (error) {\n      console.error(\n        chalk.red(`Error executing command '${commandName}':`),\n        (error as Error).message,\n      );\n      if (flags.verbose) {\n        console.error(error);\n      }\n      process.exit(1);\n    }\n  }\n\n  private parseArgs(args: string[]): Record<string, any> {\n    const result: Record<string, any> = { _: [] };\n    let i = 0;\n\n    while (i < args.length) {\n      const arg = args[i];\n\n      if (arg.startsWith('--')) {\n        const key = arg.slice(2);\n        if (i + 1 < args.length && !args[i + 1].startsWith('-')) {\n          result[key] = args[i + 1];\n          i += 2;\n        } else {\n          result[key] = true;\n          i++;\n        }\n      } else if (arg.startsWith('-')) {\n        const key = arg.slice(1);\n        if (i + 1 < args.length && !args[i + 1].startsWith('-')) {\n          result[key] = args[i + 1];\n          i += 2;\n        } else {\n          result[key] = true;\n          i++;\n        }\n      } else {\n        result._.push(arg);\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  private async loadConfig(configPath?: string): Promise<Record<string, unknown> | undefined> {\n    const configFile = configPath || 'claude-flow.config.json';\n    try {\n      const content = await fs.readFile(configFile, 'utf8');\n      return JSON.parse(content);\n    } catch {\n      return undefined;\n    }\n  }\n\n  private getBooleanFlags(): string[] {\n    const flags: string[] = [];\n    for (const opt of [...this.globalOptions, ...this.getAllOptions()]) {\n      if (opt.type === 'boolean') {\n        flags.push(opt.name);\n        if (opt.short) flags.push(opt.short);\n      }\n    }\n    return flags;\n  }\n\n  private getStringFlags(): string[] {\n    const flags: string[] = [];\n    for (const opt of [...this.globalOptions, ...this.getAllOptions()]) {\n      if (opt.type === 'string' || opt.type === 'number') {\n        flags.push(opt.name);\n        if (opt.short) flags.push(opt.short);\n      }\n    }\n    return flags;\n  }\n\n  private getAliases(): Record<string, string> {\n    const aliases: Record<string, string> = {};\n    for (const opt of [...this.globalOptions, ...this.getAllOptions()]) {\n      if (opt.short) {\n        aliases[opt.short] = opt.name;\n      }\n    }\n    return aliases;\n  }\n\n  private getDefaults(): Record<string, unknown> {\n    const defaults: Record<string, unknown> = {};\n    for (const opt of [...this.globalOptions, ...this.getAllOptions()]) {\n      if (opt.default !== undefined) {\n        defaults[opt.name] = opt.default;\n      }\n    }\n    return defaults;\n  }\n\n  private getAllOptions(): Option[] {\n    const options: Option[] = [];\n    for (const cmd of this.commands.values()) {\n      if (cmd.options) {\n        options.push(...cmd.options);\n      }\n    }\n    return options;\n  }\n\n  private showHelp(): void {\n    console.log(`\n${chalk.bold(chalk.blue(`üß† ${this.name} v${VERSION}`))} - ${this.description}\n\n${chalk.bold('USAGE:')}\n  ${this.name} [COMMAND] [OPTIONS]\n\n${chalk.bold('COMMANDS:')}\n${this.formatCommands()}\n\n${chalk.bold('GLOBAL OPTIONS:')}\n${this.formatOptions(this.globalOptions)}\n\n${chalk.bold('EXAMPLES:')}\n  ${this.name} start                                    # Start orchestrator\n  ${this.name} agent spawn researcher --name \"Bot\"     # Spawn research agent\n  ${this.name} task create research \"Analyze data\"     # Create task\n  ${this.name} config init                             # Initialize config\n  ${this.name} status                                  # Show system status\n\nFor more detailed help on specific commands, use:\n  ${this.name} [COMMAND] --help\n\nDocumentation: https://github.com/ruvnet/claude-code-flow\nIssues: https://github.com/ruvnet/claude-code-flow/issues\n\nCreated by rUv - Built with ‚ù§Ô∏è for the Claude community\n`);\n  }\n\n  private formatCommands(): string {\n    const commands = Array.from(new Set(this.commands.values()));\n    return commands\n      .filter((cmd) => cmd && cmd.name) // Filter out invalid commands\n      .map((cmd) => `  ${String(cmd.name).padEnd(20)} ${cmd.description || ''}`)\n      .join('\\n');\n  }\n\n  private formatOptions(options: Option[]): string {\n    return options\n      .map((opt) => {\n        const flags = opt.short ? `-${opt.short}, --${opt.name}` : `    --${opt.name}`;\n        return `  ${flags.padEnd(25)} ${opt.description}`;\n      })\n      .join('\\n');\n  }\n}\n\n// Helper functions\nfunction success(message: string): void {\n  console.log(chalk.green(`‚úÖ ${message}`));\n}\n\nfunction error(message: string): void {\n  console.error(chalk.red(`‚ùå ${message}`));\n}\n\nfunction warning(message: string): void {\n  console.warn(chalk.yellow(`‚ö†Ô∏è  ${message}`));\n}\n\nfunction info(message: string): void {\n  console.log(chalk.blue(`‚ÑπÔ∏è  ${message}`));\n}\n\n// Export for use in other modules\nexport { CLI, success, error, warning, info };\nexport type { Command, CommandContext, Option };\n\n// Main CLI setup if running directly\nasync function main() {\n  if (\n    process.argv[1] &&\n    (process.argv[1].endsWith('cli-core.js') || process.argv[1].endsWith('cli-core.ts'))\n  ) {\n    const cli = new CLI('claude-flow', 'Advanced AI Agent Orchestration System');\n\n    // Import and register all commands\n    const { setupCommands } = await import('./commands/index.js');\n    setupCommands(cli);\n\n    // Run the CLI\n    await cli.run();\n  }\n}\n\n// Execute main if this is the entry point\nmain().catch(console.error);\n"],"names":["chalk","fs","VERSION","CLI","commands","Map","globalOptions","name","short","description","type","default","command","cmd","cmdName","set","aliases","Symbol","iterator","alias","run","args","process","argv","slice","flags","parseArgs","version","v","console","log","commandName","_","toString","help","h","showHelp","get","error","red","exit","ctx","map","String","config","loadConfig","action","yellow","message","verbose","result","i","length","arg","startsWith","key","push","configPath","configFile","content","readFile","JSON","parse","undefined","getBooleanFlags","opt","getAllOptions","getStringFlags","getAliases","getDefaults","defaults","options","values","bold","blue","formatCommands","formatOptions","Array","from","Set","filter","padEnd","join","success","green","warning","warn","info","main","endsWith","cli","setupCommands","catch"],"mappings":"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"}