{"version":3,"sources":["../../../src/cli/node-repl.ts"],"sourcesContent":["/**\n * Node.js Interactive REPL for Claude-Flow\n * Compatible implementation using Node.js readline and inquirer\n */\n\nimport readline from 'readline';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { spawn } from 'child_process';\nimport chalk from 'chalk';\nimport colors from 'chalk';\nimport Table from 'cli-table3';\nimport inquirer from 'inquirer';\n\ninterface REPLCommand {\n  name: string;\n  aliases?: string[];\n  description: string;\n  usage?: string;\n  examples?: string[];\n  handler: (args: string[], context: REPLContext) => Promise<void>;\n}\n\ninterface REPLContext {\n  options: any;\n  history: string[];\n  workingDirectory: string;\n  currentSession?: string;\n  connectionStatus: 'connected' | 'disconnected' | 'connecting';\n  lastActivity: Date;\n  rl: readline.Interface;\n}\n\nclass CommandHistory {\n  private history: string[] = [];\n  private maxSize = 1000;\n  private historyFile: string;\n\n  constructor(historyFile?: string) {\n    this.historyFile = historyFile || path.join(process.cwd(), '.claude-flow-history');\n    this.loadHistory();\n  }\n\n  add(command: string): void {\n    if (command.trim() && command !== this.history[this.history.length - 1]) {\n      this.history.push(command);\n      if (this.history.length > this.maxSize) {\n        this.history = this.history.slice(-this.maxSize);\n      }\n      this.saveHistory();\n    }\n  }\n\n  get(): string[] {\n    return [...this.history];\n  }\n\n  search(query: string): string[] {\n    return this.history.filter((cmd) => cmd.includes(query));\n  }\n\n  private async loadHistory(): Promise<void> {\n    try {\n      const content = await fs.readFile(this.historyFile, 'utf-8');\n      this.history = content.split('\\n').filter((line) => line.trim());\n    } catch {\n      // History file doesn't exist yet\n    }\n  }\n\n  private async saveHistory(): Promise<void> {\n    try {\n      await fs.writeFile(this.historyFile, this.history.join('\\n'));\n    } catch {\n      // Ignore save errors\n    }\n  }\n}\n\n/**\n * Start the Node.js interactive REPL\n */\nexport async function startNodeREPL(options: any = {}): Promise<void> {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    prompt: '',\n  });\n\n  const context: REPLContext = {\n    options,\n    history: [],\n    workingDirectory: process.cwd(),\n    connectionStatus: 'disconnected',\n    lastActivity: new Date(),\n    rl,\n  };\n\n  const history = new CommandHistory(options.historyFile);\n\n  const commands: REPLCommand[] = [\n    {\n      name: 'help',\n      aliases: ['h', '?'],\n      description: 'Show available commands or help for a specific command',\n      usage: 'help [command]',\n      examples: ['help', 'help agent', 'help task create'],\n      handler: async (args) => {\n        if (args.length === 0) {\n          showHelp(commands);\n        } else {\n          showCommandHelp(commands, args[0]);\n        }\n      },\n    },\n    {\n      name: 'status',\n      aliases: ['st'],\n      description: 'Show system status and connection info',\n      usage: 'status [component]',\n      examples: ['status', 'status orchestrator'],\n      handler: async (args, ctx) => {\n        await showSystemStatus(ctx, args[0]);\n      },\n    },\n    {\n      name: 'connect',\n      aliases: ['conn'],\n      description: 'Connect to Claude-Flow orchestrator',\n      usage: 'connect [host:port]',\n      examples: ['connect', 'connect localhost:3000'],\n      handler: async (args, ctx) => {\n        await connectToOrchestrator(ctx, args[0]);\n      },\n    },\n    {\n      name: 'agent',\n      description: 'Agent management (spawn, list, terminate, info)',\n      usage: 'agent <subcommand> [options]',\n      examples: [\n        'agent list',\n        'agent spawn researcher --name \"Research Agent\"',\n        'agent info agent-001',\n        'agent terminate agent-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleAgentCommand(args, ctx);\n      },\n    },\n    {\n      name: 'task',\n      description: 'Task management (create, list, status, cancel)',\n      usage: 'task <subcommand> [options]',\n      examples: [\n        'task list',\n        'task create research \"Find quantum computing papers\"',\n        'task status task-001',\n        'task cancel task-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleTaskCommand(args, ctx);\n      },\n    },\n    {\n      name: 'memory',\n      description: 'Memory operations (query, stats, export)',\n      usage: 'memory <subcommand> [options]',\n      examples: ['memory stats', 'memory query --agent agent-001', 'memory export memory.json'],\n      handler: async (args, ctx) => {\n        await handleMemoryCommand(args, ctx);\n      },\n    },\n    {\n      name: 'session',\n      description: 'Session management (save, restore, list)',\n      usage: 'session <subcommand> [options]',\n      examples: [\n        'session list',\n        'session save \"Development Session\"',\n        'session restore session-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleSessionCommand(args, ctx);\n      },\n    },\n    {\n      name: 'workflow',\n      description: 'Workflow operations (run, list, status)',\n      usage: 'workflow <subcommand> [options]',\n      examples: ['workflow list', 'workflow run workflow.json', 'workflow status workflow-001'],\n      handler: async (args, ctx) => {\n        await handleWorkflowCommand(args, ctx);\n      },\n    },\n    {\n      name: 'monitor',\n      aliases: ['mon'],\n      description: 'Start monitoring mode',\n      usage: 'monitor [--interval seconds]',\n      examples: ['monitor', 'monitor --interval 5'],\n      handler: async (args) => {\n        console.log(chalk.cyan('Starting monitor mode...'));\n        console.log(chalk.gray('(This would start the live dashboard)'));\n      },\n    },\n    {\n      name: 'history',\n      aliases: ['hist'],\n      description: 'Show command history',\n      usage: 'history [--search query]',\n      examples: ['history', 'history --search agent'],\n      handler: async (args) => {\n        const searchQuery =\n          args.indexOf('--search') >= 0 ? args[args.indexOf('--search') + 1] : null;\n        const historyItems = searchQuery ? history.search(searchQuery) : history.get();\n\n        console.log(\n          chalk.cyan.bold(`Command History${searchQuery ? ` (search: ${searchQuery})` : ''}`),\n        );\n        console.log('─'.repeat(50));\n\n        if (historyItems.length === 0) {\n          console.log(chalk.gray('No commands in history'));\n          return;\n        }\n\n        const recent = historyItems.slice(-20); // Show last 20\n        recent.forEach((cmd, i) => {\n          const lineNumber = historyItems.length - recent.length + i + 1;\n          console.log(`${chalk.gray(lineNumber.toString().padStart(3))} ${cmd}`);\n        });\n      },\n    },\n    {\n      name: 'clear',\n      aliases: ['cls'],\n      description: 'Clear the screen',\n      handler: async () => {\n        console.clear();\n      },\n    },\n    {\n      name: 'cd',\n      description: 'Change working directory',\n      usage: 'cd <directory>',\n      examples: ['cd /path/to/project', 'cd ..'],\n      handler: async (args, ctx) => {\n        if (args.length === 0) {\n          console.log(ctx.workingDirectory);\n          return;\n        }\n\n        try {\n          const newDir = args[0] === '~' ? process.env.HOME || '/' : args[0];\n          process.chdir(newDir);\n          ctx.workingDirectory = process.cwd();\n          console.log(chalk.gray(`Changed to: ${ctx.workingDirectory}`));\n        } catch (error) {\n          console.error(\n            chalk.red('Error:'),\n            error instanceof Error ? error.message : String(error),\n          );\n        }\n      },\n    },\n    {\n      name: 'pwd',\n      description: 'Print working directory',\n      handler: async (_, ctx) => {\n        console.log(ctx.workingDirectory);\n      },\n    },\n    {\n      name: 'echo',\n      description: 'Echo arguments',\n      usage: 'echo <text>',\n      examples: ['echo \"Hello, world!\"'],\n      handler: async (args) => {\n        console.log(args.join(' '));\n      },\n    },\n    {\n      name: 'exit',\n      aliases: ['quit', 'q'],\n      description: 'Exit the REPL',\n      handler: async (_, ctx) => {\n        console.log(chalk.gray('Goodbye!'));\n        ctx.rl.close();\n        process.exit(0);\n      },\n    },\n  ];\n\n  // Show initial status\n  if (options.banner !== false) {\n    displayBanner();\n  }\n\n  await showSystemStatus(context);\n  console.log(chalk.gray('Type \"help\" for available commands or \"exit\" to quit.\\n'));\n\n  // Main REPL loop\n  const processCommand = async (input: string) => {\n    if (!input.trim()) {\n      return;\n    }\n\n    // Add to history\n    history.add(input);\n    context.history.push(input);\n    context.lastActivity = new Date();\n\n    // Parse command\n    const args = parseCommand(input);\n    const [commandName, ...commandArgs] = args;\n\n    // Find and execute command\n    const command = commands.find(\n      (c) => c.name === commandName || (c.aliases && c.aliases.includes(commandName)),\n    );\n\n    if (command) {\n      try {\n        await command.handler(commandArgs, context);\n      } catch (error) {\n        console.error(\n          chalk.red('Command failed:'),\n          error instanceof Error ? error.message : String(error),\n        );\n      }\n    } else {\n      console.log(chalk.red(`Unknown command: ${commandName}`));\n      console.log(chalk.gray('Type \"help\" for available commands'));\n\n      // Suggest similar commands\n      const suggestions = findSimilarCommands(commandName, commands);\n      if (suggestions.length > 0) {\n        console.log(chalk.gray('Did you mean:'), suggestions.map((s) => chalk.cyan(s)).join(', '));\n      }\n    }\n  };\n\n  // Set up readline prompt\n  const showPrompt = () => {\n    const prompt = createPrompt(context);\n    rl.setPrompt(prompt);\n    rl.prompt();\n  };\n\n  rl.on('line', async (input) => {\n    try {\n      await processCommand(input);\n    } catch (error) {\n      console.error(\n        chalk.red('REPL Error:'),\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n    showPrompt();\n  });\n\n  rl.on('close', () => {\n    console.log('\\n' + chalk.gray('Goodbye!'));\n    process.exit(0);\n  });\n\n  rl.on('SIGINT', () => {\n    console.log('\\n' + chalk.gray('Use \"exit\" to quit or Ctrl+D'));\n    showPrompt();\n  });\n\n  // Start the REPL\n  showPrompt();\n}\n\nfunction displayBanner(): void {\n  const banner = `\n${chalk.cyan.bold('╔══════════════════════════════════════════════════════════════╗')}\n${chalk.cyan.bold('║')}             ${chalk.white.bold('🧠 Claude-Flow REPL')}                        ${chalk.cyan.bold('║')}\n${chalk.cyan.bold('║')}          ${chalk.gray('Interactive AI Agent Orchestration')}             ${chalk.cyan.bold('║')}\n${chalk.cyan.bold('╚══════════════════════════════════════════════════════════════╝')}\n`;\n  console.log(banner);\n}\n\nfunction createPrompt(context: REPLContext): string {\n  const statusIcon = getConnectionStatusIcon(context.connectionStatus);\n  const dir = path.basename(context.workingDirectory) || '/';\n\n  return `${statusIcon} ${chalk.cyan('claude-flow')}:${chalk.yellow(dir)}${chalk.white('> ')}`;\n}\n\nfunction getConnectionStatusIcon(status: string): string {\n  switch (status) {\n    case 'connected':\n      return chalk.green('●');\n    case 'connecting':\n      return chalk.yellow('◐');\n    case 'disconnected':\n      return chalk.red('○');\n    default:\n      return chalk.gray('?');\n  }\n}\n\nfunction parseCommand(input: string): string[] {\n  // Simple command parsing - handle quoted strings\n  const args: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  let quoteChar = '';\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n\n    if (inQuotes) {\n      if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      } else {\n        current += char;\n      }\n    } else {\n      if (char === '\"' || char === \"'\") {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === ' ' || char === '\\t') {\n        if (current.trim()) {\n          args.push(current.trim());\n          current = '';\n        }\n      } else {\n        current += char;\n      }\n    }\n  }\n\n  if (current.trim()) {\n    args.push(current.trim());\n  }\n\n  return args;\n}\n\nfunction showHelp(commands: REPLCommand[]): void {\n  console.log(chalk.cyan.bold('Claude-Flow Interactive REPL'));\n  console.log('─'.repeat(50));\n  console.log();\n\n  console.log(chalk.white.bold('Available Commands:'));\n  console.log();\n\n  const table = new Table({\n    head: ['Command', 'Aliases', 'Description'],\n    style: { head: ['cyan'] },\n  });\n\n  for (const cmd of commands) {\n    table.push([\n      chalk.cyan(cmd.name),\n      cmd.aliases ? chalk.gray(cmd.aliases.join(', ')) : '',\n      cmd.description,\n    ]);\n  }\n\n  console.log(table.toString());\n  console.log();\n\n  console.log(chalk.gray('Tips:'));\n  console.log(chalk.gray('• Use TAB for command completion'));\n  console.log(chalk.gray('• Use \"help <command>\" for detailed help'));\n  console.log(chalk.gray('• Use UP/DOWN arrows for command history'));\n  console.log(chalk.gray('• Use Ctrl+C or \"exit\" to quit'));\n}\n\nfunction showCommandHelp(commands: REPLCommand[], commandName: string): void {\n  const command = commands.find(\n    (c) => c.name === commandName || (c.aliases && c.aliases.includes(commandName)),\n  );\n\n  if (!command) {\n    console.log(chalk.red(`Unknown command: ${commandName}`));\n    return;\n  }\n\n  console.log(chalk.cyan.bold(`Command: ${command.name}`));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('Description:')} ${command.description}`);\n\n  if (command.aliases) {\n    console.log(`${chalk.white('Aliases:')} ${command.aliases.join(', ')}`);\n  }\n\n  if (command.usage) {\n    console.log(`${chalk.white('Usage:')} ${command.usage}`);\n  }\n\n  if (command.examples) {\n    console.log();\n    console.log(chalk.white.bold('Examples:'));\n    for (const example of command.examples) {\n      console.log(`  ${chalk.gray('$')} ${chalk.cyan(example)}`);\n    }\n  }\n}\n\nasync function showSystemStatus(context: REPLContext, component?: string): Promise<void> {\n  console.log(chalk.cyan.bold('System Status'));\n  console.log('─'.repeat(30));\n\n  const statusIcon = context.connectionStatus === 'connected' ? chalk.green('✓') : chalk.red('✗');\n  console.log(`${statusIcon} Connection: ${context.connectionStatus}`);\n  console.log(`${chalk.white('Working Directory:')} ${context.workingDirectory}`);\n  console.log(`${chalk.white('Last Activity:')} ${context.lastActivity.toLocaleTimeString()}`);\n\n  if (context.currentSession) {\n    console.log(`${chalk.white('Current Session:')} ${context.currentSession}`);\n  }\n\n  console.log(`${chalk.white('Commands in History:')} ${context.history.length}`);\n\n  if (context.connectionStatus === 'disconnected') {\n    console.log();\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    console.log(chalk.gray('Use \"connect\" command to establish connection'));\n  }\n}\n\nasync function connectToOrchestrator(context: REPLContext, target?: string): Promise<void> {\n  const host = target || 'localhost:3000';\n\n  console.log(chalk.yellow(`Connecting to ${host}...`));\n  context.connectionStatus = 'connecting';\n\n  // Mock connection attempt\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Check if orchestrator is actually running by trying to execute status command\n  try {\n    const result = await executeCliCommand(['status']);\n    if (result.success) {\n      context.connectionStatus = 'connected';\n      console.log(chalk.green('✓ Connected successfully'));\n    } else {\n      context.connectionStatus = 'disconnected';\n      console.log(chalk.red('✗ Connection failed'));\n      console.log(chalk.gray('Make sure Claude-Flow is running with: npx claude-flow start'));\n    }\n  } catch (error) {\n    context.connectionStatus = 'disconnected';\n    console.log(chalk.red('✗ Connection failed'));\n    console.log(chalk.gray('Make sure Claude-Flow is running with: npx claude-flow start'));\n  }\n}\n\nasync function executeCliCommand(args: string[]): Promise<{ success: boolean; output: string }> {\n  return new Promise((resolve) => {\n    const child = spawn('npx', ['tsx', 'src/cli/simple-cli.ts', ...args], {\n      stdio: 'pipe',\n      cwd: process.cwd(),\n    });\n\n    let output = '';\n    let error = '';\n\n    child.stdout?.on('data', (data) => {\n      output += data.toString();\n    });\n\n    child.stderr?.on('data', (data) => {\n      error += data.toString();\n    });\n\n    child.on('close', (code) => {\n      resolve({\n        success: code === 0,\n        output: output || error,\n      });\n    });\n\n    child.on('error', (err) => {\n      resolve({\n        success: false,\n        output: err.message,\n      });\n    });\n  });\n}\n\nasync function handleAgentCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    console.log(chalk.gray('Use \"connect\" to establish connection first'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: agent <spawn|list|terminate|info> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  const cliArgs = ['agent', ...args];\n\n  try {\n    const result = await executeCliCommand(cliArgs);\n    console.log(result.output);\n  } catch (error) {\n    console.error(\n      chalk.red('Error executing agent command:'),\n      error instanceof Error ? error.message : String(error),\n    );\n  }\n}\n\nasync function handleTaskCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: task <create|list|status|cancel> [options]'));\n    return;\n  }\n\n  const cliArgs = ['task', ...args];\n\n  try {\n    const result = await executeCliCommand(cliArgs);\n    console.log(result.output);\n  } catch (error) {\n    console.error(\n      chalk.red('Error executing task command:'),\n      error instanceof Error ? error.message : String(error),\n    );\n  }\n}\n\nasync function handleMemoryCommand(args: string[], context: REPLContext): Promise<void> {\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: memory <query|stats|export> [options]'));\n    return;\n  }\n\n  const cliArgs = ['memory', ...args];\n\n  try {\n    const result = await executeCliCommand(cliArgs);\n    console.log(result.output);\n  } catch (error) {\n    console.error(\n      chalk.red('Error executing memory command:'),\n      error instanceof Error ? error.message : String(error),\n    );\n  }\n}\n\nasync function handleSessionCommand(args: string[], context: REPLContext): Promise<void> {\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: session <list|save|restore> [options]'));\n    return;\n  }\n\n  const cliArgs = ['session', ...args];\n\n  try {\n    const result = await executeCliCommand(cliArgs);\n    console.log(result.output);\n  } catch (error) {\n    console.error(\n      chalk.red('Error executing session command:'),\n      error instanceof Error ? error.message : String(error),\n    );\n  }\n}\n\nasync function handleWorkflowCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: workflow <list|run|status> [options]'));\n    return;\n  }\n\n  const cliArgs = ['workflow', ...args];\n\n  try {\n    const result = await executeCliCommand(cliArgs);\n    console.log(result.output);\n  } catch (error) {\n    console.error(\n      chalk.red('Error executing workflow command:'),\n      error instanceof Error ? error.message : String(error),\n    );\n  }\n}\n\nfunction findSimilarCommands(input: string, commands: REPLCommand[]): string[] {\n  const allNames = commands.flatMap((c) => [c.name, ...(c.aliases || [])]);\n\n  return allNames\n    .filter((name) => {\n      // Simple similarity check - could use Levenshtein distance\n      const commonChars = input.split('').filter((char) => name.includes(char)).length;\n      return commonChars >= Math.min(2, input.length / 2);\n    })\n    .slice(0, 3); // Top 3 suggestions\n}\n"],"names":["readline","fs","path","spawn","chalk","Table","CommandHistory","history","maxSize","historyFile","join","process","cwd","loadHistory","add","command","trim","length","push","slice","saveHistory","get","search","query","filter","cmd","includes","content","readFile","split","line","writeFile","startNodeREPL","options","rl","createInterface","input","stdin","output","stdout","prompt","context","workingDirectory","connectionStatus","lastActivity","Date","commands","name","aliases","description","usage","examples","handler","args","showHelp","showCommandHelp","ctx","showSystemStatus","connectToOrchestrator","handleAgentCommand","handleTaskCommand","handleMemoryCommand","handleSessionCommand","handleWorkflowCommand","console","log","cyan","gray","searchQuery","indexOf","historyItems","bold","repeat","recent","forEach","i","lineNumber","toString","padStart","clear","newDir","env","HOME","chdir","error","red","Error","message","String","_","close","exit","banner","displayBanner","processCommand","parseCommand","commandName","commandArgs","find","c","suggestions","findSimilarCommands","map","s","showPrompt","createPrompt","setPrompt","on","white","statusIcon","getConnectionStatusIcon","dir","basename","yellow","status","green","current","inQuotes","quoteChar","char","table","head","style","example","component","toLocaleTimeString","currentSession","target","host","Promise","resolve","setTimeout","result","executeCliCommand","success","child","stdio","data","stderr","code","err","subcommand","cliArgs","allNames","flatMap","commonChars","Math","min"],"mappings":"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"}