{"version":3,"sources":["../../../src/cli/simple-orchestrator.ts"],"sourcesContent":["/**\n * Simple orchestrator implementation for Node.js compatibility\n */\n\nimport { EventEmitter } from 'events';\nimport express from 'express';\nimport { WebSocketServer } from 'ws';\nimport { createServer } from 'http';\nimport { spawn } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport cors from 'cors';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Simple in-memory stores\nconst agents = new Map();\nconst tasks = new Map();\nconst memory = new Map();\n\n// Event bus\nconst eventBus = new EventEmitter();\n\n// Component status\nconst componentStatus = {\n  eventBus: false,\n  orchestrator: false,\n  memoryManager: false,\n  terminalPool: false,\n  mcpServer: false,\n  coordinationManager: false,\n  webUI: false,\n};\n\n// Simple MCP server\nfunction startMCPServer(port: number) {\n  console.log(`🌐 Starting MCP server on port ${port}...`);\n  // In a real implementation, this would start the actual MCP server\n  componentStatus.mcpServer = true;\n  return true;\n}\n\n// Enhanced web UI with console interface\nfunction startWebUI(host: string, port: number) {\n  const app = express();\n  const server = createServer(app);\n  const wss = new WebSocketServer({ server });\n\n  // Add CORS middleware for cross-origin support\n  app.use(\n    cors({\n      origin: '*',\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n      allowedHeaders: ['Content-Type', 'Authorization'],\n      credentials: true,\n    }),\n  );\n\n  // Global error handler middleware\n  app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n    console.error('Global error handler:', err);\n    res.status(err.status || 500).json({\n      error: err.message || 'Internal server error',\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // Request logging middleware\n  app.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);\n    next();\n  });\n\n  // Store CLI output history and active connections\n  const outputHistory: string[] = [];\n  const activeConnections: Set<any> = new Set();\n\n  // CLI output capture system\n  let cliProcess: any = null;\n\n  const consoleHTML = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Claude-Flow Console</title>\n        <style>\n            * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n            }\n            body {\n                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                background: #0d1117;\n                color: #c9d1d9;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n            }\n            .header {\n                background: #161b22;\n                border-bottom: 1px solid #21262d;\n                padding: 10px 20px;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n            }\n            .title {\n                font-weight: bold;\n                color: #58a6ff;\n            }\n            .connection-status {\n                font-size: 12px;\n                color: #7c3aed;\n            }\n            .console-container {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n            }\n            .console-output {\n                flex: 1;\n                overflow-y: auto;\n                padding: 10px;\n                background: #0d1117;\n                font-size: 13px;\n                line-height: 1.4;\n                white-space: pre-wrap;\n                word-wrap: break-word;\n            }\n            .console-input {\n                background: #161b22;\n                border: none;\n                border-top: 1px solid #21262d;\n                padding: 10px;\n                color: #c9d1d9;\n                font-family: inherit;\n                font-size: 13px;\n                outline: none;\n            }\n            .console-input:focus {\n                background: #21262d;\n            }\n            .prompt {\n                color: #58a6ff;\n                font-weight: bold;\n            }\n            .error {\n                color: #ff7b72;\n            }\n            .success {\n                color: #3fb950;\n            }\n            .warning {\n                color: #ffa657;\n            }\n            .info {\n                color: #79c0ff;\n            }\n            .dim {\n                color: #8b949e;\n            }\n            .scrollbar {\n                scrollbar-width: thin;\n                scrollbar-color: #21262d #0d1117;\n            }\n            .scrollbar::-webkit-scrollbar {\n                width: 8px;\n            }\n            .scrollbar::-webkit-scrollbar-track {\n                background: #0d1117;\n            }\n            .scrollbar::-webkit-scrollbar-thumb {\n                background: #21262d;\n                border-radius: 4px;\n            }\n            .scrollbar::-webkit-scrollbar-thumb:hover {\n                background: #30363d;\n            }\n            .system-status {\n                display: flex;\n                gap: 15px;\n                font-size: 11px;\n            }\n            .status-item {\n                display: flex;\n                align-items: center;\n                gap: 5px;\n            }\n            .status-dot {\n                width: 6px;\n                height: 6px;\n                border-radius: 50%;\n                background: #3fb950;\n            }\n            .status-dot.inactive {\n                background: #f85149;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <div class=\"title\">🧠 Claude-Flow Console</div>\n            <div class=\"system-status\">\n                <div class=\"status-item\">\n                    <div class=\"status-dot\" id=\"ws-status\"></div>\n                    <span id=\"ws-text\">Connecting...</span>\n                </div>\n                <div class=\"status-item\">\n                    <div class=\"status-dot\" id=\"cli-status\"></div>\n                    <span id=\"cli-text\">CLI Ready</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"console-container\">\n            <div class=\"console-output scrollbar\" id=\"output\"></div>\n            <input type=\"text\" class=\"console-input\" id=\"input\" placeholder=\"Enter claude-flow command...\" autocomplete=\"off\">\n        </div>\n\n        <script>\n            const output = document.getElementById('output');\n            const input = document.getElementById('input');\n            const wsStatus = document.getElementById('ws-status');\n            const wsText = document.getElementById('ws-text');\n            const cliStatus = document.getElementById('cli-status');\n            const cliText = document.getElementById('cli-text');\n            \n            let ws = null;\n            let commandHistory = [];\n            let historyIndex = -1;\n            let reconnectAttempts = 0;\n            let reconnectTimer = null;\n            let isReconnecting = false;\n            const MAX_RECONNECT_ATTEMPTS = 10;\n            const BASE_RECONNECT_DELAY = 1000;\n            \n            function getReconnectDelay() {\n                // Exponential backoff with jitter\n                const exponentialDelay = Math.min(BASE_RECONNECT_DELAY * Math.pow(2, reconnectAttempts), 30000);\n                const jitter = Math.random() * 0.3 * exponentialDelay;\n                return exponentialDelay + jitter;\n            }\n            \n            function connect() {\n                if (isReconnecting || (ws && ws.readyState === WebSocket.CONNECTING)) {\n                    console.log('Already connecting, skipping duplicate attempt');\n                    return;\n                }\n                \n                isReconnecting = true;\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const wsUrl = \\`\\${protocol}//\\${window.location.host}\\`;\n                \n                try {\n                    console.log(\\`Attempting WebSocket connection to \\${wsUrl}\\`);\n                    ws = new WebSocket(wsUrl);\n                    \n                    ws.onopen = () => {\n                        console.log('WebSocket connected successfully');\n                        wsStatus.classList.remove('inactive');\n                        wsText.textContent = 'Connected';\n                        reconnectAttempts = 0;\n                        isReconnecting = false;\n                        \n                        if (reconnectTimer) {\n                            clearTimeout(reconnectTimer);\n                            reconnectTimer = null;\n                        }\n                        \n                        appendOutput('\\n<span class=\"success\">🔗 Connected to Claude-Flow Console</span>\\n');\n                        appendOutput('<span class=\"info\">Type \"help\" for available commands or use any claude-flow command</span>\\n\\n');\n                    };\n                    \n                    ws.onmessage = (event) => {\n                        try {\n                            const data = JSON.parse(event.data);\n                            handleMessage(data);\n                        } catch (error) {\n                            console.error('Failed to parse WebSocket message:', error);\n                            appendOutput(\\`\\n<span class=\"error\">❌ Invalid message received: \\${(error instanceof Error ? error.message : String(error))}</span>\\n\\`);\n                        }\n                    };\n                    \n                    ws.onclose = (event) => {\n                        console.log(\\`WebSocket closed: code=\\${event.code}, reason=\\${event.reason}\\`);\n                        wsStatus.classList.add('inactive');\n                        wsText.textContent = 'Disconnected';\n                        isReconnecting = false;\n                        \n                        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n                            reconnectAttempts++;\n                            const delay = getReconnectDelay();\n                            appendOutput(\\`\\n<span class=\"error\">🔗 Connection lost. Reconnecting in \\${Math.round(delay/1000)}s... (attempt \\${reconnectAttempts}/\\${MAX_RECONNECT_ATTEMPTS})</span>\\n\\`);\n                            \n                            reconnectTimer = setTimeout(() => {\n                                reconnectTimer = null;\n                                connect();\n                            }, delay);\n                        } else {\n                            appendOutput(\\`\\n<span class=\"error\">❌ Failed to reconnect after \\${MAX_RECONNECT_ATTEMPTS} attempts. Please refresh the page.</span>\\n\\`);\n                            wsText.textContent = 'Failed to connect';\n                        }\n                    };\n                    \n                    ws.onerror = (error) => {\n                        console.error('WebSocket error:', error);\n                        appendOutput(\\`\\n<span class=\"error\">❌ WebSocket error: \\${(error instanceof Error ? error.message : String(error)) || 'Connection failed'}</span>\\n\\`);\n                        isReconnecting = false;\n                    };\n                    \n                } catch (error) {\n                    console.error('Failed to create WebSocket:', error);\n                    appendOutput(\\`\\n<span class=\"error\">❌ Failed to create WebSocket connection: \\${(error instanceof Error ? error.message : String(error))}</span>\\n\\`);\n                    isReconnecting = false;\n                    \n                    // Try reconnect if not exceeded max attempts\n                    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n                        reconnectAttempts++;\n                        const delay = getReconnectDelay();\n                        reconnectTimer = setTimeout(() => {\n                            reconnectTimer = null;\n                            connect();\n                        }, delay);\n                    }\n                }\n            }\n            \n            function handleMessage(data) {\n                switch (data.type) {\n                    case 'output':\n                        appendOutput(data.data);\n                        break;\n                    case 'error':\n                        appendOutput('<span class=\"error\">' + data.data + '</span>');\n                        break;\n                    case 'command_complete':\n                        appendOutput('\\n<span class=\"prompt\">claude-flow> </span>');\n                        break;\n                    case 'status':\n                        updateStatus(data.data);\n                        break;\n                }\n            }\n            \n            function appendOutput(text) {\n                output.innerHTML += text;\n                output.scrollTop = output.scrollHeight;\n            }\n            \n            function updateStatus(status) {\n                // Update CLI status based on server response\n                if (status.cliActive) {\n                    cliStatus.classList.remove('inactive');\n                    cliText.textContent = 'CLI Active';\n                } else {\n                    cliStatus.classList.add('inactive');\n                    cliText.textContent = 'CLI Inactive';\n                }\n            }\n            \n            function sendCommand(command) {\n                if (ws && ws.readyState === WebSocket.OPEN) {\n                    appendOutput('<span class=\"prompt\">claude-flow> </span>' + command + '\\n');\n                    ws.send(JSON.stringify({\n                        type: 'command',\n                        data: command\n                    }));\n                    \n                    // Add to history\n                    if (command.trim() && commandHistory[commandHistory.length - 1] !== command) {\n                        commandHistory.push(command);\n                        if (commandHistory.length > 100) {\n                            commandHistory.shift();\n                        }\n                    }\n                    historyIndex = commandHistory.length;\n                }\n            }\n            \n            // Input handling\n            input.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter') {\n                    const command = input.value.trim();\n                    if (command) {\n                        sendCommand(command);\n                        input.value = '';\n                    }\n                } else if (e.key === 'ArrowUp') {\n                    e.preventDefault();\n                    if (historyIndex > 0) {\n                        historyIndex--;\n                        input.value = commandHistory[historyIndex] || '';\n                    }\n                } else if (e.key === 'ArrowDown') {\n                    e.preventDefault();\n                    if (historyIndex < commandHistory.length - 1) {\n                        historyIndex++;\n                        input.value = commandHistory[historyIndex] || '';\n                    } else {\n                        historyIndex = commandHistory.length;\n                        input.value = '';\n                    }\n                } else if (e.key === 'Tab') {\n                    e.preventDefault();\n                    // Basic tab completion for common commands\n                    const value = input.value;\n                    const commands = ['help', 'status', 'agent', 'task', 'memory', 'config', 'start', 'stop'];\n                    const matches = commands.filter(cmd => cmd.startsWith(value));\n                    if (matches.length === 1) {\n                        input.value = matches[0] + ' ';\n                    }\n                }\n            });\n            \n            // Focus input on page load\n            window.addEventListener('load', () => {\n                input.focus();\n                connect();\n            });\n            \n            // Implement heartbeat to detect stale connections\n            setInterval(() => {\n                if (ws && ws.readyState === WebSocket.OPEN) {\n                    ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));\n                }\n            }, 30000); // Ping every 30 seconds\n            \n            // Handle page visibility changes\n            document.addEventListener('visibilitychange', () => {\n                if (!document.hidden && ws && ws.readyState !== WebSocket.OPEN) {\n                    console.log('Page became visible, checking connection...');\n                    reconnectAttempts = 0; // Reset attempts when page becomes visible\n                    connect();\n                }\n            });\n            \n            // Keep input focused\n            document.addEventListener('click', () => {\n                input.focus();\n            });\n        </script>\n    </body>\n    </html>\n  `;\n\n  app.get('/', (req, res) => {\n    res.send(consoleHTML);\n  });\n\n  // API endpoints\n  app.get('/api/status', (req, res) => {\n    res.json({\n      components: componentStatus,\n      metrics: {\n        agents: agents.size,\n        tasks: tasks.size,\n        memory: memory.size,\n        connectedClients: activeConnections.size,\n      },\n    });\n  });\n\n  app.get('/api/history', (req, res) => {\n    const limit = parseInt(req.query.limit as string) || 100;\n    res.json({\n      history: outputHistory.slice(-limit),\n      total: outputHistory.length,\n    });\n  });\n\n  app.post('/api/command', express.json(), (req, res) => {\n    const { command } = req.body;\n    if (!command) {\n      res.status(400).json({ error: 'Command is required' });\n      return;\n    }\n\n    // Execute command and return immediately\n    // Output will be sent via WebSocket\n    try {\n      broadcastToClients({\n        type: 'output',\n        data: `<span class=\"prompt\">API> </span>${command}\\\\n`,\n      });\n\n      executeCliCommand(command, null);\n\n      res.json({ success: true, message: 'Command executed' });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.get('/api/agents', (req, res) => {\n    const agentList = Array.from(agents.entries()).map(([id, agent]) => ({\n      id,\n      ...agent,\n    }));\n    res.json(agentList);\n  });\n\n  app.get('/api/tasks', (req, res) => {\n    const taskList = Array.from(tasks.entries()).map(([id, task]) => ({\n      id,\n      ...task,\n    }));\n    res.json(taskList);\n  });\n\n  app.get('/api/memory', (req, res) => {\n    const memoryList = Array.from(memory.entries()).map(([key, value]) => ({\n      key,\n      value,\n      type: typeof value,\n      size: JSON.stringify(value).length,\n    }));\n    res.json(memoryList);\n  });\n\n  // Health check endpoint\n  app.get('/health', (req, res) => {\n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      components: componentStatus,\n    });\n  });\n\n  // WebSocket for real-time CLI interaction\n  wss.on('connection', (ws, req) => {\n    const clientIp = req.headers['x-forwarded-for'] || req.socket.remoteAddress;\n    console.log(`🔌 WebSocket client connected from ${clientIp}`);\n    activeConnections.add(ws);\n\n    // Send initial status and history\n    ws.send(\n      JSON.stringify({\n        type: 'status',\n        data: { ...componentStatus, cliActive: true },\n      }),\n    );\n\n    // Send recent output history\n    outputHistory.slice(-50).forEach((line) => {\n      ws.send(\n        JSON.stringify({\n          type: 'output',\n          data: line,\n        }),\n      );\n    });\n\n    // Handle incoming commands\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log(`Received command from client: ${data.type}`);\n\n        if (data.type === 'command') {\n          handleCliCommand(data.data, ws);\n        } else if (data.type === 'ping') {\n          // Handle ping/pong for connection keepalive\n          ws.send(JSON.stringify({ type: 'pong', timestamp: Date.now() }));\n        }\n      } catch (error) {\n        console.error('Failed to handle WebSocket message:', error);\n        ws.send(\n          JSON.stringify({\n            type: 'error',\n            data: `Invalid message format: ${error instanceof Error ? error.message : String(error)}`,\n            timestamp: new Date().toISOString(),\n          }),\n        );\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('🔌 WebSocket client disconnected');\n      activeConnections.delete(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket client error:', error);\n      // Send detailed error information to client before closing\n      try {\n        ws.send(\n          JSON.stringify({\n            type: 'error',\n            data: `Server WebSocket error: ${(error instanceof Error ? error.message : String(error)) || 'Unknown error'}`,\n            timestamp: new Date().toISOString(),\n          }),\n        );\n      } catch (sendError) {\n        console.error('Failed to send error to client:', sendError);\n      }\n      activeConnections.delete(ws);\n    });\n  });\n\n  // Helper function to send response to specific client or broadcast\n  function sendResponse(ws: any, data: any) {\n    if (ws) {\n      ws.send(JSON.stringify(data));\n    } else {\n      broadcastToClients(data);\n    }\n  }\n\n  // CLI command execution handler\n  function handleCliCommand(command: string, ws: any) {\n    try {\n      // Add timestamp and format output\n      const timestamp = new Date().toLocaleTimeString();\n      const logEntry = `[${timestamp}] Executing: ${command}`;\n      outputHistory.push(logEntry);\n\n      // Broadcast to all connected clients\n      broadcastToClients({\n        type: 'output',\n        data: `<span class=\"dim\">[${timestamp}]</span> <span class=\"info\">Executing:</span> ${command}\\\\n`,\n      });\n\n      // Execute the command\n      executeCliCommand(command, ws);\n    } catch (error) {\n      const errorMsg = `Error executing command: ${error instanceof Error ? error.message : String(error)}`;\n      outputHistory.push(errorMsg);\n      sendResponse(ws, {\n        type: 'error',\n        data: errorMsg,\n      });\n    }\n  }\n\n  // Execute CLI commands and capture output\n  function executeCliCommand(command: string, ws: any) {\n    // Handle built-in commands first\n    if (command === 'help') {\n      const helpText = `<span class=\"success\">Available Commands:</span>\n• <span class=\"info\">help</span> - Show this help message\n• <span class=\"info\">status</span> - Show system status\n• <span class=\"info\">agent list</span> - List all agents\n• <span class=\"info\">agent spawn [type]</span> - Spawn a new agent\n• <span class=\"info\">task list</span> - List all tasks\n• <span class=\"info\">memory list</span> - List memory entries\n• <span class=\"info\">config show</span> - Show configuration\n• <span class=\"info\">clear</span> - Clear console\n• <span class=\"info\">version</span> - Show version information\n\n<span class=\"warning\">Note:</span> This is a web console interface for claude-flow CLI commands.\n`;\n      sendResponse(ws, {\n        type: 'output',\n        data: helpText,\n      });\n      sendResponse(ws, { type: 'command_complete' });\n      return;\n    }\n\n    if (command === 'clear') {\n      sendResponse(ws, {\n        type: 'output',\n        data: '\\\\x1b[2J\\\\x1b[H', // ANSI clear screen\n      });\n      sendResponse(ws, { type: 'command_complete' });\n      return;\n    }\n\n    if (command === 'status') {\n      const statusText = `<span class=\"success\">System Status:</span>\n• Event Bus: <span class=\"${componentStatus.eventBus ? 'success' : 'error'}\">${componentStatus.eventBus ? 'Active' : 'Inactive'}</span>\n• Orchestrator: <span class=\"${componentStatus.orchestrator ? 'success' : 'error'}\">${componentStatus.orchestrator ? 'Active' : 'Inactive'}</span>\n• Memory Manager: <span class=\"${componentStatus.memoryManager ? 'success' : 'error'}\">${componentStatus.memoryManager ? 'Active' : 'Inactive'}</span>\n• Terminal Pool: <span class=\"${componentStatus.terminalPool ? 'success' : 'error'}\">${componentStatus.terminalPool ? 'Active' : 'Inactive'}</span>\n• MCP Server: <span class=\"${componentStatus.mcpServer ? 'success' : 'error'}\">${componentStatus.mcpServer ? 'Active' : 'Inactive'}</span>\n• Coordination Manager: <span class=\"${componentStatus.coordinationManager ? 'success' : 'error'}\">${componentStatus.coordinationManager ? 'Active' : 'Inactive'}</span>\n• Web UI: <span class=\"${componentStatus.webUI ? 'success' : 'error'}\">${componentStatus.webUI ? 'Active' : 'Inactive'}</span>\n\n<span class=\"info\">Metrics:</span>\n• Active Agents: ${agents.size}\n• Pending Tasks: ${tasks.size}\n• Memory Entries: ${memory.size}\n`;\n      sendResponse(ws, {\n        type: 'output',\n        data: statusText,\n      });\n      sendResponse(ws, { type: 'command_complete' });\n      return;\n    }\n\n    // For other commands, spawn a subprocess\n    const args = command.split(' ');\n    const cmd = args[0];\n    const cmdArgs = args.slice(1);\n\n    // Determine the correct claude-flow executable path\n    const rootDir = path.resolve(__dirname, '../..');\n    const cliPath = path.join(rootDir, 'bin', 'claude-flow');\n\n    // Spawn the command\n    const child = spawn('node', [path.join(rootDir, 'src/cli/simple-cli.js'), ...cmdArgs], {\n      stdio: ['pipe', 'pipe', 'pipe'],\n      env: { ...process.env, CLAUDE_FLOW_WEB_MODE: 'true' },\n    });\n\n    // Handle stdout\n    child.stdout.on('data', (data) => {\n      const output = data.toString();\n      outputHistory.push(output);\n\n      // Convert ANSI colors to HTML spans\n      const htmlOutput = convertAnsiToHtml(output);\n\n      broadcastToClients({\n        type: 'output',\n        data: htmlOutput,\n      });\n    });\n\n    // Handle stderr\n    child.stderr.on('data', (data) => {\n      const error = data.toString();\n      outputHistory.push(error);\n\n      broadcastToClients({\n        type: 'error',\n        data: convertAnsiToHtml(error),\n      });\n    });\n\n    // Handle process exit\n    child.on('close', (code) => {\n      const exitMsg =\n        code === 0\n          ? `<span class=\"success\">Command completed successfully</span>`\n          : `<span class=\"error\">Command failed with exit code ${code}</span>`;\n\n      broadcastToClients({\n        type: 'output',\n        data: `\\\\n${exitMsg}\\\\n`,\n      });\n\n      sendResponse(ws, { type: 'command_complete' });\n    });\n\n    child.on('error', (error) => {\n      const errorMsg = `<span class=\"error\">Failed to execute command: ${error instanceof Error ? error.message : String(error)}</span>`;\n      outputHistory.push(errorMsg);\n\n      sendResponse(ws, {\n        type: 'error',\n        data: errorMsg,\n      });\n\n      sendResponse(ws, { type: 'command_complete' });\n    });\n  }\n\n  // Broadcast message to all connected clients\n  function broadcastToClients(message: any) {\n    const messageStr = JSON.stringify(message);\n    activeConnections.forEach((client) => {\n      if (client.readyState === 1) {\n        // WebSocket.OPEN\n        client.send(messageStr);\n      }\n    });\n  }\n\n  // Convert ANSI escape codes to HTML\n  function convertAnsiToHtml(text: string): string {\n    return text\n      .replace(/\\x1b\\[0m/g, '</span>')\n      .replace(/\\x1b\\[1m/g, '<span style=\"font-weight: bold;\">')\n      .replace(/\\x1b\\[31m/g, '<span class=\"error\">')\n      .replace(/\\x1b\\[32m/g, '<span class=\"success\">')\n      .replace(/\\x1b\\[33m/g, '<span class=\"warning\">')\n      .replace(/\\x1b\\[34m/g, '<span class=\"info\">')\n      .replace(/\\x1b\\[35m/g, '<span style=\"color: #d946ef;\">')\n      .replace(/\\x1b\\[36m/g, '<span style=\"color: #06b6d4;\">')\n      .replace(/\\x1b\\[37m/g, '<span class=\"dim\">')\n      .replace(/\\x1b\\[90m/g, '<span class=\"dim\">')\n      .replace(/\\x1b\\[[0-9;]*m/g, '') // Remove any remaining ANSI codes\n      .replace(/\\n/g, '\\\\n')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/&lt;span/g, '<span')\n      .replace(/span&gt;/g, 'span>');\n  }\n\n  return new Promise((resolve, reject) => {\n    server.on('error', (err: any) => {\n      if (err.code === 'EADDRINUSE') {\n        console.error(`\\n❌ Port ${port} is already in use`);\n        console.log(`💡 Try a different port: claude-flow start --ui --port ${port + 1}`);\n        console.log(`💡 Or stop the process using port ${port}: lsof -ti:${port} | xargs kill -9`);\n        componentStatus.webUI = false;\n        reject(err);\n      } else {\n        console.error('❌ Web UI server error:', err.message, err.stack);\n        reject(err);\n      }\n    });\n\n    server.listen(port, host, () => {\n      console.log(`🌐 Web UI available at http://${host}:${port}`);\n      componentStatus.webUI = true;\n      resolve(server);\n    });\n  });\n}\n\n// Start all components\nexport async function startOrchestrator(options: any) {\n  console.log('\\n🚀 Starting orchestration components...\\n');\n\n  // Start Event Bus\n  console.log('⚡ Starting Event Bus...');\n  componentStatus.eventBus = true;\n  eventBus.emit('system:start');\n  console.log('✅ Event Bus started');\n\n  // Start Orchestrator Engine\n  console.log('🧠 Starting Orchestrator Engine...');\n  componentStatus.orchestrator = true;\n  console.log('✅ Orchestrator Engine started');\n\n  // Start Memory Manager\n  console.log('💾 Starting Memory Manager...');\n  componentStatus.memoryManager = true;\n  console.log('✅ Memory Manager started');\n\n  // Start Terminal Pool\n  console.log('🖥️  Starting Terminal Pool...');\n  componentStatus.terminalPool = true;\n  console.log('✅ Terminal Pool started');\n\n  // Start MCP Server\n  const mcpPort = options.mcpPort || 3001;\n  startMCPServer(mcpPort);\n  console.log('✅ MCP Server started');\n\n  // Start Coordination Manager\n  console.log('🔄 Starting Coordination Manager...');\n  componentStatus.coordinationManager = true;\n  console.log('✅ Coordination Manager started');\n\n  // Start Web UI if requested\n  if (options.ui && !options.noUi) {\n    const host = options.host || 'localhost';\n    const port = options.port || 3000;\n    try {\n      await startWebUI(host, port);\n    } catch (err: any) {\n      if (err.code === 'EADDRINUSE') {\n        console.log('\\n⚠️  Web UI could not start due to port conflict');\n        console.log('   Orchestrator is running without Web UI');\n      } else {\n        console.error('\\n⚠️  Web UI failed to start:', err.message);\n      }\n    }\n  }\n\n  console.log('\\n✅ All components started successfully!');\n  console.log('\\n📊 System Status:');\n  console.log('   • Event Bus: Active');\n  console.log('   • Orchestrator: Active');\n  console.log('   • Memory Manager: Active');\n  console.log('   • Terminal Pool: Active');\n  console.log('   • MCP Server: Active');\n  console.log('   • Coordination Manager: Active');\n  if (options.ui && !options.noUi) {\n    console.log(\n      `   • Web UI: Active at http://${options.host || 'localhost'}:${options.port || 3000}`,\n    );\n  }\n\n  console.log('\\n💡 Use \"claude-flow status\" to check system status');\n  console.log('💡 Use \"claude-flow stop\" to stop the orchestrator');\n\n  // Keep the process running\n  if (!options.daemon) {\n    console.log('\\n📌 Press Ctrl+C to stop the orchestrator...\\n');\n\n    // Handle graceful shutdown\n    process.on('SIGINT', () => {\n      console.log('\\n\\n🛑 Shutting down orchestrator...');\n      process.exit(0);\n    });\n  }\n}\n\n// Export component status for other commands\nexport function getComponentStatus() {\n  return componentStatus;\n}\n\n// Export stores for other commands\nexport function getStores() {\n  return { agents, tasks, memory };\n}\n"],"names":["EventEmitter","express","WebSocketServer","createServer","spawn","path","fileURLToPath","cors","__filename","url","__dirname","dirname","agents","Map","tasks","memory","eventBus","componentStatus","orchestrator","memoryManager","terminalPool","mcpServer","coordinationManager","webUI","startMCPServer","port","console","log","startWebUI","host","app","server","wss","use","origin","methods","allowedHeaders","credentials","err","req","res","next","error","status","json","message","timestamp","Date","toISOString","method","outputHistory","activeConnections","Set","cliProcess","consoleHTML","get","send","components","metrics","size","connectedClients","limit","parseInt","query","history","slice","total","length","post","command","body","broadcastToClients","type","data","executeCliCommand","success","Error","String","agentList","Array","from","entries","map","id","agent","taskList","task","memoryList","key","value","JSON","stringify","uptime","process","on","ws","clientIp","headers","socket","remoteAddress","add","cliActive","forEach","line","parse","toString","handleCliCommand","now","delete","sendError","sendResponse","toLocaleTimeString","logEntry","push","errorMsg","helpText","statusText","args","split","cmd","cmdArgs","rootDir","resolve","cliPath","join","child","stdio","env","CLAUDE_FLOW_WEB_MODE","stdout","output","htmlOutput","convertAnsiToHtml","stderr","code","exitMsg","messageStr","client","readyState","text","replace","Promise","reject","stack","listen","startOrchestrator","options","emit","mcpPort","ui","noUi","daemon","exit","getComponentStatus","getStores"],"mappings":"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"}