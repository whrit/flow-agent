{"version":3,"sources":["../../../../src/cli/commands/swarm.ts"],"sourcesContent":["/**\n * Claude Swarm Mode - Self-orchestrating agent swarms using claude-flow\n */\n\nimport { generateId } from '../../utils/helpers.js';\nimport { promises as fs } from 'node:fs';\nimport { success, error, warning, info } from '../cli-core.js';\nimport type { CommandContext } from '../cli-core.js';\nimport { BackgroundExecutor } from '../../coordination/background-executor.js';\nimport { SwarmCoordinator } from '../../coordination/swarm-coordinator.js';\nimport { SwarmMemoryManager } from '../../memory/swarm-memory.js';\nexport async function swarmAction(ctx: CommandContext) {\n  // First check if help is requested\n  if (ctx.flags.help || ctx.flags.h) {\n    // Show help is handled by the CLI framework\n    return;\n  }\n\n  // The objective should be all the non-flag arguments joined together\n  const objective = ctx.args.join(' ').trim();\n\n  if (!objective) {\n    error('Usage: swarm <objective>');\n    console.log('\\nExamples:');\n    console.log('  claude-flow swarm \"Build a REST API\"');\n    console.log('  claude-flow swarm \"Research cloud architecture\"');\n    console.log('\\nOptions:');\n    console.log('  --dry-run              Show configuration without executing');\n    console.log('  --strategy <type>      Strategy: auto, research, development, analysis');\n    console.log('  --max-agents <n>       Maximum number of agents (default: 5)');\n    console.log('  --timeout <minutes>    Timeout in minutes (default: 60)');\n    console.log('  --research             Enable research capabilities');\n    console.log('  --parallel             Enable parallel execution');\n    console.log('  --review               Enable peer review between agents');\n    console.log('  --monitor              Enable real-time monitoring');\n    console.log('  --ui                   Use blessed terminal UI (requires node.js)');\n    console.log('  --background           Run swarm in background mode');\n    console.log('  --distributed          Enable distributed coordination');\n    console.log('  --memory-namespace     Memory namespace for swarm (default: swarm)');\n    console.log('  --persistence          Enable task persistence (default: true)');\n    return;\n  }\n\n  const options = {\n    strategy: (ctx.flags.strategy as string) || 'auto',\n    maxAgents: (ctx.flags.maxAgents as number) || (ctx.flags['max-agents'] as number) || 5,\n    maxDepth: (ctx.flags.maxDepth as number) || (ctx.flags['max-depth'] as number) || 3,\n    research: (ctx.flags.research as boolean) || false,\n    parallel: (ctx.flags.parallel as boolean) || false,\n    memoryNamespace:\n      (ctx.flags.memoryNamespace as string) || (ctx.flags['memory-namespace'] as string) || 'swarm',\n    timeout: (ctx.flags.timeout as number) || 60,\n    review: (ctx.flags.review as boolean) || false,\n    coordinator: (ctx.flags.coordinator as boolean) || false,\n    config: (ctx.flags.config as string) || (ctx.flags.c as string),\n    verbose: (ctx.flags.verbose as boolean) || (ctx.flags.v as boolean) || false,\n    dryRun:\n      (ctx.flags.dryRun as boolean) ||\n      (ctx.flags['dry-run'] as boolean) ||\n      (ctx.flags.d as boolean) ||\n      false,\n    monitor: (ctx.flags.monitor as boolean) || false,\n    ui: (ctx.flags.ui as boolean) || false,\n    background: (ctx.flags.background as boolean) || false,\n    persistence: (ctx.flags.persistence as boolean) || true,\n    distributed: (ctx.flags.distributed as boolean) || false,\n  };\n\n  const swarmId = generateId('swarm');\n\n  if (options.dryRun) {\n    warning('DRY RUN - Swarm Configuration:');\n    console.log(`Swarm ID: ${swarmId}`);\n    console.log(`Objective: ${objective}`);\n    console.log(`Strategy: ${options.strategy}`);\n    console.log(`Max Agents: ${options.maxAgents}`);\n    console.log(`Max Depth: ${options.maxDepth}`);\n    console.log(`Research: ${options.research}`);\n    console.log(`Parallel: ${options.parallel}`);\n    console.log(`Review Mode: ${options.review}`);\n    console.log(`Coordinator: ${options.coordinator}`);\n    console.log(`Memory Namespace: ${options.memoryNamespace}`);\n    console.log(`Timeout: ${options.timeout} minutes`);\n    return;\n  }\n\n  // If UI mode is requested, use the blessed UI version\n  if (options.ui) {\n    try {\n      const scriptPath = new URL(import.meta.url).pathname;\n      const projectRoot = scriptPath.substring(0, scriptPath.indexOf('/src/'));\n      const uiScriptPath = `${projectRoot}/src/cli/simple-commands/swarm-ui.js`;\n\n      // Check if the UI script exists\n      try {\n        await fs.stat(uiScriptPath);\n      } catch {\n        warning('Swarm UI script not found. Falling back to standard mode.');\n        options.ui = false;\n      }\n\n      if (options.ui) {\n        const command = new Deno.Command('node', {\n          args: [uiScriptPath],\n          stdin: 'inherit',\n          stdout: 'inherit',\n          stderr: 'inherit',\n        });\n\n        const process = command.spawn();\n        const { code } = await process.status;\n\n        if (code !== 0) {\n          error(`Swarm UI exited with code ${code}`);\n        }\n        return;\n      }\n    } catch (err) {\n      warning(`Failed to launch blessed UI: ${(err as Error).message}`);\n      console.log('Falling back to standard mode...');\n      options.ui = false;\n    }\n  }\n\n  success(`üêù Initializing Claude Swarm: ${swarmId}`);\n  console.log(`üìã Objective: ${objective}`);\n  console.log(`üéØ Strategy: ${options.strategy}`);\n\n  try {\n    // Initialize swarm coordination system\n    const coordinator = new SwarmCoordinator({\n      maxAgents: options.maxAgents,\n      maxConcurrentTasks: options.parallel ? options.maxAgents : 1,\n      taskTimeout: options.timeout * 60 * 1000, // Convert minutes to milliseconds\n      enableMonitoring: options.monitor,\n      enableWorkStealing: options.parallel,\n      enableCircuitBreaker: true,\n      memoryNamespace: options.memoryNamespace,\n      coordinationStrategy: options.distributed ? 'distributed' : 'centralized',\n    });\n\n    // Initialize background executor\n    const executor = new BackgroundExecutor({\n      maxConcurrentTasks: options.maxAgents,\n      defaultTimeout: options.timeout * 60 * 1000,\n      logPath: `./swarm-runs/${swarmId}/background-tasks`,\n      enablePersistence: options.persistence,\n    });\n\n    // Initialize swarm memory\n    const memory = new SwarmMemoryManager({\n      namespace: options.memoryNamespace,\n      enableDistribution: options.distributed,\n      enableKnowledgeBase: true,\n      persistencePath: `./swarm-runs/${swarmId}/memory`,\n    });\n\n    // Start all systems\n    await coordinator.start();\n    await executor.start();\n    await memory.initialize();\n\n    // Create swarm tracking directory\n    const swarmDir = `./swarm-runs/${swarmId}`;\n    await Deno.mkdir(swarmDir, { recursive: true });\n\n    // Create objective in coordinator\n    const objectiveId = await coordinator.createObjective(\n      objective,\n      (options.strategy || 'auto') as any\n    );\n\n    console.log(`\\nüìù Objective created with ID: ${objectiveId}`);\n\n    // Register agents based on strategy\n    const agentTypes = getAgentTypesForStrategy(options.strategy);\n    const agents = [];\n\n    for (let i = 0; i < Math.min(options.maxAgents, agentTypes.length); i++) {\n      const agentType = agentTypes[i % agentTypes.length];\n      const agentId = await coordinator.registerAgent(\n        `${agentType}-${i + 1}`,\n        agentType,\n        getCapabilitiesForType(agentType),\n      );\n      agents.push(agentId);\n      console.log(`  ü§ñ Registered ${agentType} agent: ${agentId}`);\n    }\n\n    // Write swarm configuration\n    await fs.writeFile(\n      `${swarmDir}/config.json`,\n      JSON.stringify(\n        {\n          swarmId,\n          objectiveId,\n          objective,\n          options,\n          agents,\n          startTime: new Date().toISOString(),\n        },\n        null,\n        2,\n      ),\n    );\n\n    // Start objective execution\n    await coordinator.executeObjective(objectiveId);\n    console.log(`\\nüöÄ Swarm execution started...`);\n\n    if (options.background) {\n      console.log(\n        `Running in background mode. Check status with: claude-flow swarm status ${swarmId}`,\n      );\n\n      // Save coordinator state and exit\n      await fs.writeFile(\n        `${swarmDir}/coordinator.json`,\n        JSON.stringify(\n          {\n            coordinatorRunning: true,\n            pid: Deno.pid,\n            startTime: new Date().toISOString(),\n          },\n          null,\n          2,\n        ),\n      );\n    } else {\n      // Wait for completion in foreground\n      await waitForObjectiveCompletion(coordinator, objectiveId, options);\n\n      // Write completion status\n      await fs.writeFile(\n        `${swarmDir}/status.json`,\n        JSON.stringify(\n          {\n            status: 'completed',\n            endTime: new Date().toISOString(),\n          },\n          null,\n          2,\n        ),\n      );\n\n      // Show summary\n      const swarmStatus = coordinator.getSwarmStatus();\n      console.log(`\\nüìä Swarm Summary:`);\n      console.log(`  - Objectives: ${swarmStatus.objectives}`);\n      console.log(`  - Tasks Completed: ${swarmStatus.tasks.completed}`);\n      console.log(`  - Tasks Failed: ${swarmStatus.tasks.failed}`);\n      console.log(`  - Agents Used: ${swarmStatus.agents.total}`);\n      console.log(`  - Results saved to: ${swarmDir}`);\n\n      success(`\\n‚úÖ Swarm ${swarmId} completed successfully`);\n    }\n\n    // Cleanup\n    if (!options.background) {\n      await coordinator.stop();\n      await executor.stop();\n      await memory.shutdown();\n    }\n  } catch (err) {\n    error(`Failed to execute swarm: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Decompose objective into subtasks based on strategy\n */\nasync function decomposeObjective(objective: string, options: any): Promise<any[]> {\n  const subtasks = [];\n\n  switch (options.strategy) {\n    case 'research':\n      subtasks.push(\n        { type: 'research', description: `Research background information on: ${objective}` },\n        { type: 'analysis', description: `Analyze findings and identify key patterns` },\n        { type: 'synthesis', description: `Synthesize research into actionable insights` },\n      );\n      break;\n\n    case 'development':\n      subtasks.push(\n        { type: 'planning', description: `Plan architecture and design for: ${objective}` },\n        { type: 'implementation', description: `Implement core functionality` },\n        { type: 'testing', description: `Test and validate implementation` },\n        { type: 'documentation', description: `Document the solution` },\n      );\n      break;\n\n    case 'analysis':\n      subtasks.push(\n        { type: 'data-gathering', description: `Gather relevant data for: ${objective}` },\n        { type: 'analysis', description: `Perform detailed analysis` },\n        { type: 'visualization', description: `Create visualizations and reports` },\n      );\n      break;\n\n    default: // auto\n      // Analyze objective to determine best approach\n      if (objective.toLowerCase().includes('build') || objective.toLowerCase().includes('create')) {\n        subtasks.push(\n          { type: 'planning', description: `Plan solution for: ${objective}` },\n          { type: 'implementation', description: `Implement the solution` },\n          { type: 'testing', description: `Test and validate` },\n        );\n      } else if (\n        objective.toLowerCase().includes('research') ||\n        objective.toLowerCase().includes('analyze')\n      ) {\n        subtasks.push(\n          { type: 'research', description: `Research: ${objective}` },\n          { type: 'analysis', description: `Analyze findings` },\n          { type: 'report', description: `Generate report` },\n        );\n      } else {\n        subtasks.push(\n          { type: 'exploration', description: `Explore requirements for: ${objective}` },\n          { type: 'execution', description: `Execute main tasks` },\n          { type: 'validation', description: `Validate results` },\n        );\n      }\n  }\n\n  return subtasks;\n}\n\n/**\n * Execute tasks in parallel\n */\nasync function executeParallelTasks(tasks: any[], options: any, swarmId: string, swarmDir: string) {\n  const promises = tasks.map(async (task, index) => {\n    const agentId = generateId('agent');\n    console.log(`  ü§ñ Spawning agent ${agentId} for: ${task.type}`);\n\n    // Create agent directory\n    const agentDir = `${swarmDir}/agents/${agentId}`;\n    await Deno.mkdir(agentDir, { recursive: true });\n\n    // Write agent task\n    await fs.writeFile(\n      `${agentDir}/task.json`,\n      JSON.stringify(\n        {\n          agentId,\n          swarmId,\n          task,\n          status: 'active',\n          startTime: new Date().toISOString(),\n        },\n        null,\n        2,\n      ),\n    );\n\n    // Execute agent task\n    await executeAgentTask(agentId, task, options, agentDir);\n\n    // Update status\n    await fs.writeFile(\n      `${agentDir}/status.json`,\n      JSON.stringify(\n        {\n          status: 'completed',\n          endTime: new Date().toISOString(),\n        },\n        null,\n        2,\n      ),\n    );\n\n    console.log(`  ‚úÖ Agent ${agentId} completed: ${task.type}`);\n  });\n\n  await Promise.all(promises);\n}\n\n/**\n * Execute tasks sequentially\n */\nasync function executeSequentialTasks(\n  tasks: any[],\n  options: any,\n  swarmId: string,\n  swarmDir: string,\n) {\n  for (const [index, task] of tasks.entries()) {\n    const agentId = generateId('agent');\n    console.log(`  ü§ñ Spawning agent ${agentId} for: ${task.type}`);\n\n    // Create agent directory\n    const agentDir = `${swarmDir}/agents/${agentId}`;\n    await Deno.mkdir(agentDir, { recursive: true });\n\n    // Write agent task\n    await fs.writeFile(\n      `${agentDir}/task.json`,\n      JSON.stringify(\n        {\n          agentId,\n          swarmId,\n          task,\n          status: 'active',\n          startTime: new Date().toISOString(),\n        },\n        null,\n        2,\n      ),\n    );\n\n    // Execute agent task\n    await executeAgentTask(agentId, task, options, agentDir);\n\n    // Update status\n    await fs.writeFile(\n      `${agentDir}/status.json`,\n      JSON.stringify(\n        {\n          status: 'completed',\n          endTime: new Date().toISOString(),\n        },\n        null,\n        2,\n      ),\n    );\n\n    console.log(`  ‚úÖ Agent ${agentId} completed: ${task.type}`);\n  }\n}\n\n/**\n * Execute a single agent task using claude\n */\nasync function executeAgentTask(agentId: string, task: any, options: any, agentDir: string) {\n  console.log(`    ‚Üí Executing: ${task.type} task`);\n\n  try {\n    // Check if claude CLI is available and not in simulation mode\n    const checkClaude = new Deno.Command('which', { args: ['claude'] });\n    const checkResult = await checkClaude.output();\n\n    if (checkResult.success && options.simulate !== true) {\n      // Write prompt to a file for claude to read\n      const promptFile = `${agentDir}/prompt.txt`;\n      const prompt = `You are an AI agent with ID: ${agentId}\n\nYour task type is: ${task.type}\nYour specific task is: ${task.description}\n\nPlease execute this task and provide a detailed response.\n${task.type === 'research' ? 'Use web search and research tools as needed.' : ''}\n${task.type === 'implementation' ? 'Write clean, well-documented code.' : ''}\n${task.type === 'testing' ? 'Create comprehensive tests.' : ''}\n\nProvide your output in a structured format.\n\nWhen you're done, please end with \"TASK COMPLETED\" on its own line.`;\n\n      await fs.writeFile(promptFile, prompt);\n\n      // Build claude command using bash to pipe the prompt\n      let tools = 'View,GlobTool,GrepTool,LS';\n      if (task.type === 'research' || options.research) {\n        tools = 'WebFetchTool,WebSearch';\n      } else if (task.type === 'implementation') {\n        tools = 'View,Edit,Replace,GlobTool,GrepTool,LS,Bash';\n      }\n\n      // Build claude command arguments for non-interactive mode\n      const claudeArgs = [\n        '-p', // Non-interactive print mode\n        task.description, // The prompt\n        '--dangerously-skip-permissions',\n        '--allowedTools',\n        tools,\n      ];\n\n      // Write command to file for tracking\n      await fs.writeFile(`${agentDir}/command.txt`, `claude ${claudeArgs.join(' ')}`);\n\n      console.log(`    ‚Üí Running: ${task.description}`);\n\n      // For real-time output, we need to capture it differently\n      // First run with piped to capture for file, then run with inherit for display\n\n      // Create a wrapper script that will tee the output\n      const wrapperScript = `#!/bin/bash\nclaude ${claudeArgs.map((arg) => `\"${arg}\"`).join(' ')} | tee \"${agentDir}/output.txt\"\nexit \\${PIPESTATUS[0]}`;\n\n      const wrapperPath = `${agentDir}/wrapper.sh`;\n      await fs.writeFile(wrapperPath, wrapperScript);\n      await Deno.chmod(wrapperPath, 0o755);\n\n      console.log(`    ‚îå‚îÄ Claude Output ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);\n\n      const command = new Deno.Command('bash', {\n        args: [wrapperPath],\n        stdout: 'inherit', // This allows real-time streaming to console\n        stderr: 'inherit',\n      });\n\n      try {\n        const process = command.spawn();\n        const { code, success } = await process.status;\n\n        console.log(`    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`);\n\n        if (!success) {\n          throw new Error(`Claude exited with code ${code}`);\n        }\n\n        console.log(`    ‚úì Task completed`);\n      } catch (err) {\n        throw err;\n      }\n    } else {\n      // Simulate execution if claude CLI not available\n      console.log(`    ‚Üí Simulating: ${task.type} (claude CLI not available)`);\n\n      // For now, let's use the claude-flow claude spawn command instead\n      const claudeFlowArgs = ['claude', 'spawn', task.description];\n\n      if (task.type === 'research' || options.research) {\n        claudeFlowArgs.push('--research');\n      }\n\n      if (options.parallel) {\n        claudeFlowArgs.push('--parallel');\n      }\n\n      console.log(`    ‚Üí Using: claude-flow ${claudeFlowArgs.join(' ')}`);\n\n      // Get the path to claude-flow binary\n      const claudeFlowPath = new URL(import.meta.url).pathname;\n      const projectRoot = claudeFlowPath.substring(0, claudeFlowPath.indexOf('/src/'));\n      const claudeFlowBin = `${projectRoot}/bin/claude-flow`;\n\n      // Execute claude-flow command\n      const command = new Deno.Command(claudeFlowBin, {\n        args: claudeFlowArgs,\n        stdout: 'piped',\n        stderr: 'piped',\n      });\n\n      const { code, stdout, stderr } = await command.output();\n\n      // Save output\n      await fs.writeFile(`${agentDir}/output.txt`, new TextDecoder().decode(stdout));\n      if (stderr.length > 0) {\n        await fs.writeFile(`${agentDir}/error.txt`, new TextDecoder().decode(stderr));\n      }\n\n      if (code !== 0) {\n        console.log(`    ‚ö†Ô∏è  Command exited with code ${code}`);\n      }\n    }\n  } catch (err) {\n    // Log error but continue\n    console.log(`    ‚ö†Ô∏è  Error executing task: ${(err as Error).message}`);\n    await fs.writeFile(`${agentDir}/error.txt`, (err as Error).message);\n  }\n}\n\nfunction getAgentTypesForStrategy(\n  strategy: string,\n): ('researcher' | 'coder' | 'analyst' | 'coordinator' | 'reviewer')[] {\n  switch (strategy) {\n    case 'research':\n      return ['researcher', 'analyst', 'coordinator'];\n    case 'development':\n      return ['coder', 'analyst', 'reviewer', 'coordinator'];\n    case 'analysis':\n      return ['analyst', 'researcher', 'coordinator'];\n    default: // auto\n      return ['coordinator', 'researcher', 'coder', 'analyst'];\n  }\n}\n\nfunction getCapabilitiesForType(type: string): string[] {\n  switch (type) {\n    case 'researcher':\n      return ['web-search', 'data-collection', 'analysis', 'documentation'];\n    case 'coder':\n      return ['coding', 'testing', 'debugging', 'architecture'];\n    case 'analyst':\n      return ['data-analysis', 'visualization', 'reporting', 'insights'];\n    case 'reviewer':\n      return ['code-review', 'quality-assurance', 'validation', 'testing'];\n    case 'coordinator':\n      return ['planning', 'coordination', 'task-management', 'communication'];\n    default:\n      return ['general'];\n  }\n}\n\nasync function waitForObjectiveCompletion(\n  coordinator: any,\n  objectiveId: string,\n  options: any,\n): Promise<void> {\n  return new Promise((resolve) => {\n    const checkInterval = setInterval(() => {\n      const objective = coordinator.getObjectiveStatus(objectiveId);\n\n      if (!objective) {\n        clearInterval(checkInterval);\n        resolve();\n        return;\n      }\n\n      if (objective.status === 'completed' || objective.status === 'failed') {\n        clearInterval(checkInterval);\n        resolve();\n        return;\n      }\n\n      // Show progress if verbose\n      if (options.verbose) {\n        const swarmStatus = coordinator.getSwarmStatus();\n        console.log(\n          `Progress: ${swarmStatus.tasks.completed}/${swarmStatus.tasks.total} tasks completed`,\n        );\n      }\n    }, 5000); // Check every 5 seconds\n\n    // Timeout after the specified time\n    setTimeout(\n      () => {\n        clearInterval(checkInterval);\n        console.log('‚ö†Ô∏è  Swarm execution timed out');\n        resolve();\n      },\n      options.timeout * 60 * 1000,\n    );\n  });\n}\n"],"names":["generateId","promises","fs","success","error","warning","BackgroundExecutor","SwarmCoordinator","SwarmMemoryManager","swarmAction","ctx","flags","help","h","objective","args","join","trim","console","log","options","strategy","maxAgents","maxDepth","research","parallel","memoryNamespace","timeout","review","coordinator","config","c","verbose","v","dryRun","d","monitor","ui","background","persistence","distributed","swarmId","scriptPath","URL","url","pathname","projectRoot","substring","indexOf","uiScriptPath","stat","command","Deno","Command","stdin","stdout","stderr","process","spawn","code","status","err","message","maxConcurrentTasks","taskTimeout","enableMonitoring","enableWorkStealing","enableCircuitBreaker","coordinationStrategy","executor","defaultTimeout","logPath","enablePersistence","memory","namespace","enableDistribution","enableKnowledgeBase","persistencePath","start","initialize","swarmDir","mkdir","recursive","objectiveId","createObjective","agentTypes","getAgentTypesForStrategy","agents","i","Math","min","length","agentType","agentId","registerAgent","getCapabilitiesForType","push","writeFile","JSON","stringify","startTime","Date","toISOString","executeObjective","coordinatorRunning","pid","waitForObjectiveCompletion","endTime","swarmStatus","getSwarmStatus","objectives","tasks","completed","failed","total","stop","shutdown","decomposeObjective","subtasks","type","description","toLowerCase","includes","executeParallelTasks","map","task","index","agentDir","executeAgentTask","Promise","all","executeSequentialTasks","entries","checkClaude","checkResult","output","simulate","promptFile","prompt","tools","claudeArgs","wrapperScript","arg","wrapperPath","chmod","Error","claudeFlowArgs","claudeFlowPath","claudeFlowBin","TextDecoder","decode","resolve","checkInterval","setInterval","getObjectiveStatus","clearInterval","setTimeout"],"mappings":"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"}