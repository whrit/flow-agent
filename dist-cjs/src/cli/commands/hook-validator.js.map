{"version":3,"sources":["../../../../src/cli/commands/hook-validator.ts"],"sourcesContent":["/**\n * Hook validation utilities\n */\n\nimport type { HookType } from './hook-types.js';\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Validate hook parameters before execution\n */\nexport function validateHookParams(\n  hookType: HookType,\n  params: Record<string, any>,\n): ValidationResult {\n  const result: ValidationResult = {\n    valid: true,\n    errors: [],\n    warnings: [],\n  };\n\n  // Common validations\n  if (params.metadata && typeof params.metadata === 'string') {\n    try {\n      JSON.parse(params.metadata);\n    } catch {\n      result.errors.push('Invalid JSON in --metadata parameter');\n      result.valid = false;\n    }\n  }\n\n  // Hook-specific validations\n  switch (hookType) {\n    case 'pre-task':\n      if (params.complexity && !['low', 'medium', 'high'].includes(params.complexity)) {\n        result.errors.push('--complexity must be one of: low, medium, high');\n        result.valid = false;\n      }\n      if (params.estimatedMinutes && isNaN(Number(params.estimatedMinutes))) {\n        result.errors.push('--estimated-minutes must be a number');\n        result.valid = false;\n      }\n      break;\n\n    case 'post-task':\n      if (!params.taskId) {\n        result.errors.push('--task-id is required for post-task hook');\n        result.valid = false;\n      }\n      break;\n\n    case 'pre-edit':\n    case 'post-edit':\n      if (!params.file) {\n        result.errors.push(`--file is required for ${hookType} hook`);\n        result.valid = false;\n      }\n      if (hookType === 'pre-edit' && params.operation) {\n        if (!['read', 'write', 'edit', 'delete'].includes(params.operation)) {\n          result.errors.push('--operation must be one of: read, write, edit, delete');\n          result.valid = false;\n        }\n      }\n      break;\n\n    case 'pre-command':\n    case 'post-command':\n      if (!params.command) {\n        result.errors.push(`--command is required for ${hookType} hook`);\n        result.valid = false;\n      }\n      if (hookType === 'post-command' && params.exitCode) {\n        if (isNaN(Number(params.exitCode))) {\n          result.errors.push('--exit-code must be a number');\n          result.valid = false;\n        }\n      }\n      break;\n\n    case 'session-restore':\n      if (!params.sessionId) {\n        result.errors.push('--session-id is required for session-restore hook');\n        result.valid = false;\n      }\n      break;\n\n    case 'pre-search':\n      if (!params.query) {\n        result.errors.push('--query is required for pre-search hook');\n        result.valid = false;\n      }\n      if (params.maxResults && isNaN(Number(params.maxResults))) {\n        result.errors.push('--max-results must be a number');\n        result.valid = false;\n      }\n      break;\n\n    case 'notification':\n      if (!params.message) {\n        result.errors.push('--message is required for notification hook');\n        result.valid = false;\n      }\n      if (params.level && !['info', 'warning', 'error'].includes(params.level)) {\n        result.errors.push('--level must be one of: info, warning, error');\n        result.valid = false;\n      }\n      break;\n\n    case 'performance':\n      if (params.duration && isNaN(Number(params.duration))) {\n        result.errors.push('--duration must be a number');\n        result.valid = false;\n      }\n      if (params.metrics && typeof params.metrics === 'string') {\n        try {\n          JSON.parse(params.metrics);\n        } catch {\n          result.errors.push('Invalid JSON in --metrics parameter');\n          result.valid = false;\n        }\n      }\n      break;\n\n    case 'memory-sync':\n      if (params.direction && !['push', 'pull', 'sync'].includes(params.direction)) {\n        result.errors.push('--direction must be one of: push, pull, sync');\n        result.valid = false;\n      }\n      break;\n\n    case 'telemetry':\n      if (!params.event) {\n        result.errors.push('--event is required for telemetry hook');\n        result.valid = false;\n      }\n      if (params.data && typeof params.data === 'string') {\n        try {\n          JSON.parse(params.data);\n        } catch {\n          result.errors.push('Invalid JSON in --data parameter');\n          result.valid = false;\n        }\n      }\n      break;\n  }\n\n  // Add warnings for deprecated or unusual usage\n  if (hookType === 'session-start' && params.loadPrevious && !params.sessionId) {\n    result.warnings.push('--load-previous without --session-id may load unexpected data');\n  }\n\n  if (\n    hookType === 'post-edit' &&\n    params.format &&\n    !params.file?.match(/\\.(js|ts|jsx|tsx|py|java|cpp|cs)$/)\n  ) {\n    result.warnings.push('--format may not work correctly for this file type');\n  }\n\n  return result;\n}\n\n/**\n * Sanitize hook parameters for safe execution\n */\nexport function sanitizeHookParams(params: Record<string, any>): Record<string, any> {\n  const sanitized: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(params)) {\n    if (value === undefined || value === null) {\n      continue;\n    }\n\n    // Sanitize file paths\n    if (['file', 'saveTo', 'target'].includes(key) && typeof value === 'string') {\n      // Remove potentially dangerous characters\n      sanitized[key] = value.replace(/[<>\"|?*]/g, '');\n    }\n    // Sanitize commands\n    else if (key === 'command' && typeof value === 'string') {\n      // Basic command injection prevention\n      sanitized[key] = value.replace(/[;&|`$()]/g, '');\n    }\n    // Keep other values as-is\n    else {\n      sanitized[key] = value;\n    }\n  }\n\n  return sanitized;\n}\n"],"names":["validateHookParams","hookType","params","result","valid","errors","warnings","metadata","JSON","parse","push","complexity","includes","estimatedMinutes","isNaN","Number","taskId","file","operation","command","exitCode","sessionId","query","maxResults","message","level","duration","metrics","direction","event","data","loadPrevious","format","match","sanitizeHookParams","sanitized","key","value","Object","entries","undefined","replace"],"mappings":"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"}