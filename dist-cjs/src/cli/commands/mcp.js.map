{"version":3,"sources":["../../../../src/cli/commands/mcp.ts"],"sourcesContent":["/**\n * MCP command for Claude-Flow\n */\n\nimport { Command } from '@cliffy/command';\nimport chalk from 'chalk';\nimport { logger } from '../../core/logger.js';\nimport { configManager } from '../../core/config.js';\nimport { MCPServer } from '../../mcp/server.js';\nimport { eventBus } from '../../core/event-bus.js';\n\nlet mcpServer: MCPServer | null = null;\n\nexport const mcpCommand = new Command()\n  .description('Manage MCP server and tools')\n  .action(() => {\n    console.log(chalk.yellow('Please specify a subcommand:'));\n    console.log('  start   - Start the MCP server');\n    console.log('  stop    - Stop the MCP server');\n    console.log('  status  - Show MCP server status');\n    console.log('  tools   - List available MCP tools');\n    console.log('  config  - Show MCP configuration');\n    console.log('  restart - Restart the MCP server');\n    console.log('  logs    - Show MCP server logs');\n  })\n  .command(\n    'start',\n    new Command()\n      .description('Start the MCP server')\n      .option('-p, --port <port:number>', 'Port for MCP server', { default: 3000 })\n      .option('-h, --host <host:string>', 'Host for MCP server', { default: 'localhost' })\n      .option('--transport <transport:string>', 'Transport type (stdio, http)', {\n        default: 'stdio',\n      })\n      .action(async (options: any) => {\n        try {\n          const config = await configManager.load();\n\n          // Override with CLI options\n          const mcpConfig = {\n            ...config.mcp,\n            port: options.port,\n            host: options.host,\n            transport: options.transport,\n          };\n\n          mcpServer = new MCPServer(mcpConfig, eventBus, logger);\n          await mcpServer.start();\n\n          console.log(chalk.green(`‚úÖ MCP server started on ${options.host}:${options.port}`));\n          console.log(chalk.cyan(`üì° Server URL: http://${options.host}:${options.port}`));\n          console.log(chalk.cyan(`üîß Available tools: Research, Code, Terminal, Memory`));\n          console.log(\n            chalk.cyan(`üìö API documentation: http://${options.host}:${options.port}/docs`),\n          );\n        } catch (error) {\n          console.error(chalk.red(`‚ùå Failed to start MCP server: ${(error as Error).message}`));\n          process.exit(1);\n        }\n      }),\n  )\n  .command(\n    'stop',\n    new Command().description('Stop the MCP server').action(async () => {\n      try {\n        if (mcpServer) {\n          await mcpServer.stop();\n          mcpServer = null;\n          console.log(chalk.green('‚úÖ MCP server stopped'));\n        } else {\n          console.log(chalk.yellow('‚ö†Ô∏è  MCP server is not running'));\n        }\n      } catch (error) {\n        console.error(chalk.red(`‚ùå Failed to stop MCP server: ${(error as Error).message}`));\n        process.exit(1);\n      }\n    }),\n  )\n  .command(\n    'status',\n    new Command().description('Show MCP server status').action(async () => {\n      try {\n        const config = await configManager.load();\n        const isRunning = mcpServer !== null;\n\n        console.log(chalk.cyan('MCP Server Status:'));\n        console.log(`üåê Status: ${isRunning ? chalk.green('Running') : chalk.red('Stopped')}`);\n\n        if (isRunning) {\n          console.log(`üìç Address: ${config.mcp.host}:${config.mcp.port}`);\n          console.log(\n            `üîê Authentication: ${config.mcp.auth ? chalk.green('Enabled') : chalk.yellow('Disabled')}`,\n          );\n          console.log(`üîß Tools: ${chalk.green('Available')}`);\n          console.log(`üìä Metrics: ${chalk.green('Collecting')}`);\n        } else {\n          console.log(chalk.gray('Use \"claude-flow mcp start\" to start the server'));\n        }\n      } catch (error) {\n        console.error(chalk.red(`‚ùå Failed to get MCP status: ${(error as Error).message}`));\n      }\n    }),\n  )\n  .command(\n    'tools',\n    new Command().description('List available MCP tools').action(() => {\n      console.log(chalk.cyan('Available MCP Tools:'));\n\n      console.log('\\nüìä Research Tools:');\n      console.log('  ‚Ä¢ web_search - Search the web for information');\n      console.log('  ‚Ä¢ web_fetch - Fetch content from URLs');\n      console.log('  ‚Ä¢ knowledge_query - Query knowledge base');\n\n      console.log('\\nüíª Code Tools:');\n      console.log('  ‚Ä¢ code_edit - Edit code files');\n      console.log('  ‚Ä¢ code_search - Search through codebase');\n      console.log('  ‚Ä¢ code_analyze - Analyze code quality');\n\n      console.log('\\nüñ•Ô∏è  Terminal Tools:');\n      console.log('  ‚Ä¢ terminal_execute - Execute shell commands');\n      console.log('  ‚Ä¢ terminal_session - Manage terminal sessions');\n      console.log('  ‚Ä¢ file_operations - File system operations');\n\n      console.log('\\nüíæ Memory Tools:');\n      console.log('  ‚Ä¢ memory_store - Store information');\n      console.log('  ‚Ä¢ memory_query - Query stored information');\n      console.log('  ‚Ä¢ memory_index - Index and search content');\n    }),\n  )\n  .command(\n    'config',\n    new Command().description('Show MCP configuration').action(async () => {\n      try {\n        const config = await configManager.load();\n\n        console.log(chalk.cyan('MCP Configuration:'));\n        console.log(JSON.stringify(config.mcp, null, 2));\n      } catch (error) {\n        console.error(chalk.red(`‚ùå Failed to show MCP config: ${(error as Error).message}`));\n      }\n    }),\n  )\n  .command(\n    'restart',\n    new Command().description('Restart the MCP server').action(async () => {\n      try {\n        console.log(chalk.yellow('üîÑ Stopping MCP server...'));\n        if (mcpServer) {\n          await mcpServer.stop();\n        }\n\n        console.log(chalk.yellow('üîÑ Starting MCP server...'));\n        const config = await configManager.load();\n        mcpServer = new MCPServer(config.mcp, eventBus, logger);\n        await mcpServer.start();\n\n        console.log(\n          chalk.green(`‚úÖ MCP server restarted on ${config.mcp.host}:${config.mcp.port}`),\n        );\n      } catch (error) {\n        console.error(chalk.red(`‚ùå Failed to restart MCP server: ${(error as Error).message}`));\n        process.exit(1);\n      }\n    }),\n  )\n  .command(\n    'logs',\n    new Command()\n      .description('Show MCP server logs')\n      .option('-n, --lines <lines:number>', 'Number of log lines to show', { default: 50 })\n      .action((options: any) => {\n        console.log(chalk.cyan(`MCP Server Logs (last ${options.lines} lines):`));\n\n        // Mock logs since logging system might not be fully implemented\n        const logEntries = [\n          '2024-01-10 10:00:00 [INFO] MCP server started on localhost:3000',\n          '2024-01-10 10:00:01 [INFO] Tools registered: 12',\n          '2024-01-10 10:00:02 [INFO] Authentication disabled',\n          '2024-01-10 10:01:00 [INFO] Client connected: claude-desktop',\n          '2024-01-10 10:01:05 [INFO] Tool called: web_search',\n          '2024-01-10 10:01:10 [INFO] Tool response sent successfully',\n          '2024-01-10 10:02:00 [INFO] Tool called: terminal_execute',\n          '2024-01-10 10:02:05 [INFO] Command executed successfully',\n          '2024-01-10 10:03:00 [INFO] Memory operation: store',\n          '2024-01-10 10:03:01 [INFO] Data stored in namespace: default',\n        ];\n\n        const startIndex = Math.max(0, logEntries.length - options.lines);\n        const displayLogs = logEntries.slice(startIndex);\n\n        for (const entry of displayLogs) {\n          if (entry.includes('[ERROR]')) {\n            console.log(chalk.red(entry));\n          } else if (entry.includes('[WARN]')) {\n            console.log(chalk.yellow(entry));\n          } else if (entry.includes('[INFO]')) {\n            console.log(chalk.green(entry));\n          } else {\n            console.log(chalk.gray(entry));\n          }\n        }\n      }),\n  );\n"],"names":["Command","chalk","logger","configManager","MCPServer","eventBus","mcpServer","mcpCommand","description","action","console","log","yellow","command","option","default","options","config","load","mcpConfig","mcp","port","host","transport","start","green","cyan","error","red","message","process","exit","stop","isRunning","auth","gray","JSON","stringify","lines","logEntries","startIndex","Math","max","length","displayLogs","slice","entry","includes"],"mappings":"AAIA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,WAAW,QAAQ;AAC1B,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,IAAIC,YAA8B;AAElC,OAAO,MAAMC,aAAa,IAAIP,UAC3BQ,WAAW,CAAC,+BACZC,MAAM,CAAC;IACNC,QAAQC,GAAG,CAACV,MAAMW,MAAM,CAAC;IACzBF,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd,GACCE,OAAO,CACN,SACA,IAAIb,UACDQ,WAAW,CAAC,wBACZM,MAAM,CAAC,4BAA4B,uBAAuB;IAAEC,SAAS;AAAK,GAC1ED,MAAM,CAAC,4BAA4B,uBAAuB;IAAEC,SAAS;AAAY,GACjFD,MAAM,CAAC,kCAAkC,gCAAgC;IACxEC,SAAS;AACX,GACCN,MAAM,CAAC,OAAOO;IACb,IAAI;QACF,MAAMC,SAAS,MAAMd,cAAce,IAAI;QAGvC,MAAMC,YAAY;YAChB,GAAGF,OAAOG,GAAG;YACbC,MAAML,QAAQK,IAAI;YAClBC,MAAMN,QAAQM,IAAI;YAClBC,WAAWP,QAAQO,SAAS;QAC9B;QAEAjB,YAAY,IAAIF,UAAUe,WAAWd,UAAUH;QAC/C,MAAMI,UAAUkB,KAAK;QAErBd,QAAQC,GAAG,CAACV,MAAMwB,KAAK,CAAC,CAAC,wBAAwB,EAAET,QAAQM,IAAI,CAAC,CAAC,EAAEN,QAAQK,IAAI,EAAE;QACjFX,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC,CAAC,sBAAsB,EAAEV,QAAQM,IAAI,CAAC,CAAC,EAAEN,QAAQK,IAAI,EAAE;QAC9EX,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC,CAAC,oDAAoD,CAAC;QAC7EhB,QAAQC,GAAG,CACTV,MAAMyB,IAAI,CAAC,CAAC,6BAA6B,EAAEV,QAAQM,IAAI,CAAC,CAAC,EAAEN,QAAQK,IAAI,CAAC,KAAK,CAAC;IAElF,EAAE,OAAOM,OAAO;QACdjB,QAAQiB,KAAK,CAAC1B,MAAM2B,GAAG,CAAC,CAAC,8BAA8B,EAAE,AAACD,MAAgBE,OAAO,EAAE;QACnFC,QAAQC,IAAI,CAAC;IACf;AACF,IAEHlB,OAAO,CACN,QACA,IAAIb,UAAUQ,WAAW,CAAC,uBAAuBC,MAAM,CAAC;IACtD,IAAI;QACF,IAAIH,WAAW;YACb,MAAMA,UAAU0B,IAAI;YACpB1B,YAAY;YACZI,QAAQC,GAAG,CAACV,MAAMwB,KAAK,CAAC;QAC1B,OAAO;YACLf,QAAQC,GAAG,CAACV,MAAMW,MAAM,CAAC;QAC3B;IACF,EAAE,OAAOe,OAAO;QACdjB,QAAQiB,KAAK,CAAC1B,MAAM2B,GAAG,CAAC,CAAC,6BAA6B,EAAE,AAACD,MAAgBE,OAAO,EAAE;QAClFC,QAAQC,IAAI,CAAC;IACf;AACF,IAEDlB,OAAO,CACN,UACA,IAAIb,UAAUQ,WAAW,CAAC,0BAA0BC,MAAM,CAAC;IACzD,IAAI;QACF,MAAMQ,SAAS,MAAMd,cAAce,IAAI;QACvC,MAAMe,YAAY3B,cAAc;QAEhCI,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC;QACvBhB,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEsB,YAAYhC,MAAMwB,KAAK,CAAC,aAAaxB,MAAM2B,GAAG,CAAC,YAAY;QAErF,IAAIK,WAAW;YACbvB,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEM,OAAOG,GAAG,CAACE,IAAI,CAAC,CAAC,EAAEL,OAAOG,GAAG,CAACC,IAAI,EAAE;YAC/DX,QAAQC,GAAG,CACT,CAAC,mBAAmB,EAAEM,OAAOG,GAAG,CAACc,IAAI,GAAGjC,MAAMwB,KAAK,CAAC,aAAaxB,MAAMW,MAAM,CAAC,aAAa;YAE7FF,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEV,MAAMwB,KAAK,CAAC,cAAc;YACnDf,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEV,MAAMwB,KAAK,CAAC,eAAe;QACxD,OAAO;YACLf,QAAQC,GAAG,CAACV,MAAMkC,IAAI,CAAC;QACzB;IACF,EAAE,OAAOR,OAAO;QACdjB,QAAQiB,KAAK,CAAC1B,MAAM2B,GAAG,CAAC,CAAC,4BAA4B,EAAE,AAACD,MAAgBE,OAAO,EAAE;IACnF;AACF,IAEDhB,OAAO,CACN,SACA,IAAIb,UAAUQ,WAAW,CAAC,4BAA4BC,MAAM,CAAC;IAC3DC,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC;IAEvBhB,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;AACd,IAEDE,OAAO,CACN,UACA,IAAIb,UAAUQ,WAAW,CAAC,0BAA0BC,MAAM,CAAC;IACzD,IAAI;QACF,MAAMQ,SAAS,MAAMd,cAAce,IAAI;QAEvCR,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC;QACvBhB,QAAQC,GAAG,CAACyB,KAAKC,SAAS,CAACpB,OAAOG,GAAG,EAAE,MAAM;IAC/C,EAAE,OAAOO,OAAO;QACdjB,QAAQiB,KAAK,CAAC1B,MAAM2B,GAAG,CAAC,CAAC,6BAA6B,EAAE,AAACD,MAAgBE,OAAO,EAAE;IACpF;AACF,IAEDhB,OAAO,CACN,WACA,IAAIb,UAAUQ,WAAW,CAAC,0BAA0BC,MAAM,CAAC;IACzD,IAAI;QACFC,QAAQC,GAAG,CAACV,MAAMW,MAAM,CAAC;QACzB,IAAIN,WAAW;YACb,MAAMA,UAAU0B,IAAI;QACtB;QAEAtB,QAAQC,GAAG,CAACV,MAAMW,MAAM,CAAC;QACzB,MAAMK,SAAS,MAAMd,cAAce,IAAI;QACvCZ,YAAY,IAAIF,UAAUa,OAAOG,GAAG,EAAEf,UAAUH;QAChD,MAAMI,UAAUkB,KAAK;QAErBd,QAAQC,GAAG,CACTV,MAAMwB,KAAK,CAAC,CAAC,0BAA0B,EAAER,OAAOG,GAAG,CAACE,IAAI,CAAC,CAAC,EAAEL,OAAOG,GAAG,CAACC,IAAI,EAAE;IAEjF,EAAE,OAAOM,OAAO;QACdjB,QAAQiB,KAAK,CAAC1B,MAAM2B,GAAG,CAAC,CAAC,gCAAgC,EAAE,AAACD,MAAgBE,OAAO,EAAE;QACrFC,QAAQC,IAAI,CAAC;IACf;AACF,IAEDlB,OAAO,CACN,QACA,IAAIb,UACDQ,WAAW,CAAC,wBACZM,MAAM,CAAC,8BAA8B,+BAA+B;IAAEC,SAAS;AAAG,GAClFN,MAAM,CAAC,CAACO;IACPN,QAAQC,GAAG,CAACV,MAAMyB,IAAI,CAAC,CAAC,sBAAsB,EAAEV,QAAQsB,KAAK,CAAC,QAAQ,CAAC;IAGvE,MAAMC,aAAa;QACjB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,MAAMC,aAAaC,KAAKC,GAAG,CAAC,GAAGH,WAAWI,MAAM,GAAG3B,QAAQsB,KAAK;IAChE,MAAMM,cAAcL,WAAWM,KAAK,CAACL;IAErC,KAAK,MAAMM,SAASF,YAAa;QAC/B,IAAIE,MAAMC,QAAQ,CAAC,YAAY;YAC7BrC,QAAQC,GAAG,CAACV,MAAM2B,GAAG,CAACkB;QACxB,OAAO,IAAIA,MAAMC,QAAQ,CAAC,WAAW;YACnCrC,QAAQC,GAAG,CAACV,MAAMW,MAAM,CAACkC;QAC3B,OAAO,IAAIA,MAAMC,QAAQ,CAAC,WAAW;YACnCrC,QAAQC,GAAG,CAACV,MAAMwB,KAAK,CAACqB;QAC1B,OAAO;YACLpC,QAAQC,GAAG,CAACV,MAAMkC,IAAI,CAACW;QACzB;IACF;AACF,IACF"}