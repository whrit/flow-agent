{"version":3,"sources":["../../../../src/cli/commands/config-integration.ts"],"sourcesContent":["/**\n * Configuration integration commands for ruv-swarm\n *\n * These commands provide enhanced configuration management\n * specifically for ruv-swarm integration with Claude Code.\n */\n\nimport { success, error, warning, info } from '../cli-core.js';\nimport type { CommandContext } from '../cli-core.js';\nimport { configManager } from '../../config/config-manager.js';\nimport {\n  getRuvSwarmIntegration,\n  RuvSwarmConfigHelpers,\n  initializeRuvSwarmIntegration,\n} from '../../config/ruv-swarm-integration.js';\n\n/**\n * Enhanced configuration command with ruv-swarm integration\n */\nexport async function configIntegrationAction(ctx: CommandContext) {\n  if (ctx.flags.help || ctx.flags.h || ctx.args.length === 0) {\n    showConfigIntegrationHelp();\n    return;\n  }\n\n  const subcommand = ctx.args[0];\n  const subArgs = ctx.args.slice(1);\n\n  try {\n    switch (subcommand) {\n      case 'setup':\n        await handleSetup(ctx);\n        break;\n      case 'sync':\n        await handleSync(ctx);\n        break;\n      case 'status':\n        await handleStatus(ctx);\n        break;\n      case 'validate':\n        await handleValidate(ctx);\n        break;\n      case 'preset':\n        await handlePreset(ctx);\n        break;\n      case 'export':\n        await handleExport(ctx);\n        break;\n      case 'import':\n        await handleImport(ctx);\n        break;\n      default:\n        error(`Unknown config-integration subcommand: ${subcommand}`);\n        showConfigIntegrationHelp();\n        break;\n    }\n  } catch (err) {\n    error(`Configuration integration command failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Show configuration integration help\n */\nfunction showConfigIntegrationHelp() {\n  console.log('config-integration - Enhanced configuration management with ruv-swarm\\\\n');\n\n  console.log('Usage:');\n  console.log('  claude-flow config-integration <command> [options]\\\\n');\n\n  console.log('Commands:');\n  console.log('  setup                      Initialize ruv-swarm integration');\n  console.log('  sync                       Synchronize configurations');\n  console.log('  status                     Show integration status');\n  console.log('  validate                   Validate all configurations');\n  console.log('  preset <type>              Apply configuration preset');\n  console.log('  export <file>              Export unified configuration');\n  console.log('  import <file>              Import and apply configuration\\\\n');\n\n  console.log('Presets:');\n  console.log('  development                Optimized for development workflows');\n  console.log('  research                   Optimized for research and analysis');\n  console.log('  production                 Optimized for production environments\\\\n');\n\n  console.log('Examples:');\n  console.log('  claude-flow config-integration setup --enable-ruv-swarm');\n  console.log('  claude-flow config-integration preset development');\n  console.log('  claude-flow config-integration sync --force');\n  console.log('  claude-flow config-integration export my-config.json');\n  console.log('  claude-flow config-integration status --verbose');\n}\n\n/**\n * Handle setup command\n */\nasync function handleSetup(ctx: CommandContext) {\n  const enableRuvSwarm =\n    (ctx.flags.enableRuvSwarm as boolean) || (ctx.flags['enable-ruv-swarm'] as boolean) || true;\n  const force = (ctx.flags.force as boolean) || (ctx.flags.f as boolean);\n\n  info('Setting up ruv-swarm integration...');\n\n  try {\n    // Enable ruv-swarm in main config if requested\n    if (enableRuvSwarm) {\n      configManager.setRuvSwarmConfig({ enabled: true });\n      await configManager.save();\n      success('ruv-swarm enabled in main configuration');\n    }\n\n    // Initialize integration\n    const result = await initializeRuvSwarmIntegration();\n\n    if (result.success) {\n      success('ruv-swarm integration setup completed successfully!');\n      console.log(`✅ ${result.message}`);\n\n      // Show quick status\n      const integration = getRuvSwarmIntegration();\n      const status = integration.getStatus();\n\n      console.log('\\\\n📋 Integration Status:');\n      console.log(`  Enabled: ${status.enabled ? '✅' : '❌'}`);\n      console.log(`  Synchronized: ${status.synchronized ? '✅' : '⚠️'}`);\n      console.log(`  Topology: ${status.mainConfig.defaultTopology}`);\n      console.log(`  Max Agents: ${status.mainConfig.maxAgents}`);\n      console.log(`  Strategy: ${status.mainConfig.defaultStrategy}`);\n    } else {\n      error('ruv-swarm integration setup failed');\n      console.log(`❌ ${result.message}`);\n\n      if (force) {\n        warning('Continuing despite errors due to --force flag');\n      }\n    }\n  } catch (err) {\n    error(`Setup failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle sync command\n */\nasync function handleSync(ctx: CommandContext) {\n  const force = (ctx.flags.force as boolean) || (ctx.flags.f as boolean);\n\n  info('Synchronizing configurations...');\n\n  try {\n    const integration = getRuvSwarmIntegration();\n\n    // Check current sync status\n    const statusBefore = integration.getStatus();\n    if (statusBefore.synchronized && !force) {\n      success('Configurations are already synchronized');\n      return;\n    }\n\n    // Perform sync\n    integration.syncConfiguration();\n\n    // Verify sync\n    const statusAfter = integration.getStatus();\n\n    if (statusAfter.synchronized) {\n      success('Configuration synchronization completed');\n      console.log('✅ Main config and ruv-swarm config are now synchronized');\n    } else {\n      warning('Synchronization completed but configurations may still differ');\n      console.log('⚠️  Manual review recommended');\n    }\n  } catch (err) {\n    error(`Synchronization failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle status command\n */\nasync function handleStatus(ctx: CommandContext) {\n  const verbose = (ctx.flags.verbose as boolean) || (ctx.flags.v as boolean);\n  const json = ctx.flags.json as boolean;\n\n  try {\n    const integration = getRuvSwarmIntegration();\n    const status = integration.getStatus();\n\n    if (json) {\n      console.log(JSON.stringify(status, null, 2));\n      return;\n    }\n\n    console.log('🔧 Configuration Integration Status\\\\n');\n\n    // Main status\n    console.log('📊 Overview:');\n    console.log(`  ruv-swarm Enabled: ${status.enabled ? '✅ Yes' : '❌ No'}`);\n    console.log(`  Configurations Synchronized: ${status.synchronized ? '✅ Yes' : '⚠️  No'}`);\n\n    // Main configuration\n    console.log('\\\\n⚙️  Main Configuration:');\n    console.log(`  Default Topology: ${status.mainConfig.defaultTopology}`);\n    console.log(`  Max Agents: ${status.mainConfig.maxAgents}`);\n    console.log(`  Default Strategy: ${status.mainConfig.defaultStrategy}`);\n    console.log(`  Auto Init: ${status.mainConfig.autoInit ? '✅' : '❌'}`);\n    console.log(`  Hooks Enabled: ${status.mainConfig.enableHooks ? '✅' : '❌'}`);\n    console.log(`  Persistence Enabled: ${status.mainConfig.enablePersistence ? '✅' : '❌'}`);\n    console.log(`  Neural Training: ${status.mainConfig.enableNeuralTraining ? '✅' : '❌'}`);\n\n    if (verbose) {\n      console.log('\\\\n🧠 ruv-swarm Configuration:');\n      console.log(`  Swarm Max Agents: ${status.ruvSwarmConfig.swarm.maxAgents}`);\n      console.log(\n        `  Memory Persistence: ${status.ruvSwarmConfig.memory.enablePersistence ? '✅' : '❌'}`,\n      );\n      console.log(\n        `  Neural Training: ${status.ruvSwarmConfig.neural.enableTraining ? '✅' : '❌'}`,\n      );\n      console.log(`  MCP Tools: ${status.ruvSwarmConfig.integration.enableMCPTools ? '✅' : '❌'}`);\n      console.log(\n        `  CLI Commands: ${status.ruvSwarmConfig.integration.enableCLICommands ? '✅' : '❌'}`,\n      );\n\n      console.log('\\\\n📈 Monitoring:');\n      console.log(\n        `  Metrics Enabled: ${status.ruvSwarmConfig.monitoring.enableMetrics ? '✅' : '❌'}`,\n      );\n      console.log(\n        `  Alerts Enabled: ${status.ruvSwarmConfig.monitoring.enableAlerts ? '✅' : '❌'}`,\n      );\n      console.log(`  CPU Threshold: ${status.ruvSwarmConfig.monitoring.alertThresholds.cpu}%`);\n      console.log(\n        `  Memory Threshold: ${status.ruvSwarmConfig.monitoring.alertThresholds.memory}%`,\n      );\n    }\n  } catch (err) {\n    error(`Failed to get status: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle validate command\n */\nasync function handleValidate(ctx: CommandContext) {\n  const fix = (ctx.flags.fix as boolean) || (ctx.flags.f as boolean);\n\n  info('Validating configurations...');\n\n  try {\n    const integration = getRuvSwarmIntegration();\n\n    // Validate main config\n    console.log('🔍 Validating main configuration...');\n    try {\n      const mainConfig = configManager.show();\n      configManager.validate(mainConfig);\n      success('Main configuration is valid');\n    } catch (err) {\n      error(`Main configuration validation failed: ${(err as Error).message}`);\n      if (fix) {\n        warning('Auto-fix for main configuration not implemented');\n      }\n      return;\n    }\n\n    // Validate ruv-swarm config\n    console.log('🔍 Validating ruv-swarm configuration...');\n    const ruvSwarmManager = integration['ruvSwarmManager'];\n    const ruvSwarmValidation = ruvSwarmManager.validateConfig();\n\n    if (ruvSwarmValidation.valid) {\n      success('ruv-swarm configuration is valid');\n    } else {\n      error('ruv-swarm configuration validation failed:');\n      ruvSwarmValidation.errors.forEach((err) => console.log(`  - ${err}`));\n\n      if (fix) {\n        warning('Auto-fix for ruv-swarm configuration not implemented');\n      }\n      return;\n    }\n\n    // Check synchronization\n    console.log('🔍 Checking synchronization...');\n    const status = integration.getStatus();\n\n    if (status.synchronized) {\n      success('Configurations are synchronized');\n    } else {\n      warning('Configurations are not synchronized');\n      if (fix) {\n        info('Attempting to synchronize...');\n        integration.syncConfiguration();\n        success('Synchronization completed');\n      }\n    }\n\n    success('All validations passed');\n  } catch (err) {\n    error(`Validation failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle preset command\n */\nasync function handlePreset(ctx: CommandContext) {\n  if (ctx.args.length < 2) {\n    error('Preset type is required');\n    console.log('Available presets: development, research, production');\n    return;\n  }\n\n  const presetType = ctx.args[1] as 'development' | 'research' | 'production';\n  const dryRun = (ctx.flags.dryRun as boolean) || (ctx.flags['dry-run'] as boolean);\n\n  if (!['development', 'research', 'production'].includes(presetType)) {\n    error('Invalid preset type');\n    console.log('Available presets: development, research, production');\n    return;\n  }\n\n  try {\n    if (dryRun) {\n      info(`Showing ${presetType} preset configuration (dry run):`);\n      const config = RuvSwarmConfigHelpers.getConfigForUseCase(presetType);\n      console.log(JSON.stringify(config, null, 2));\n      return;\n    }\n\n    info(`Applying ${presetType} preset...`);\n\n    switch (presetType) {\n      case 'development':\n        RuvSwarmConfigHelpers.setupDevelopmentConfig();\n        break;\n      case 'research':\n        RuvSwarmConfigHelpers.setupResearchConfig();\n        break;\n      case 'production':\n        RuvSwarmConfigHelpers.setupProductionConfig();\n        break;\n    }\n\n    // Save configuration\n    await configManager.save();\n\n    success(`${presetType} preset applied successfully`);\n\n    // Show applied configuration\n    const integration = getRuvSwarmIntegration();\n    const status = integration.getStatus();\n\n    console.log('\\\\n📋 Applied Configuration:');\n    console.log(`  Topology: ${status.mainConfig.defaultTopology}`);\n    console.log(`  Max Agents: ${status.mainConfig.maxAgents}`);\n    console.log(`  Strategy: ${status.mainConfig.defaultStrategy}`);\n    console.log(\n      `  Features: ${Object.entries(status.mainConfig)\n        .filter(([key, value]) => key.startsWith('enable') && value)\n        .map(([key]) => key.replace('enable', '').toLowerCase())\n        .join(', ')}`,\n    );\n  } catch (err) {\n    error(`Failed to apply preset: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle export command\n */\nasync function handleExport(ctx: CommandContext) {\n  if (ctx.args.length < 2) {\n    error('Export file path is required');\n    console.log('Usage: config-integration export <file>');\n    return;\n  }\n\n  const filePath = ctx.args[1];\n  const format = (ctx.flags.format as string) || 'json';\n\n  try {\n    const integration = getRuvSwarmIntegration();\n    const status = integration.getStatus();\n\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      main: status.mainConfig,\n      ruvSwarm: status.ruvSwarmConfig,\n      unified: integration.getUnifiedCommandArgs(),\n    };\n\n    const { writeFile } = await import('fs/promises');\n\n    if (format === 'yaml') {\n      // Simple YAML export (basic implementation)\n      const yamlContent = `# Claude-Flow Configuration Export\n# Generated: ${exportData.timestamp}\n\nmain:\n${JSON.stringify(exportData.main, null, 2)\n  .split('\\\\n')\n  .map((line) => '  ' + line)\n  .join('\\\\n')}\n\nruvSwarm:\n${JSON.stringify(exportData.ruvSwarm, null, 2)\n  .split('\\\\n')\n  .map((line) => '  ' + line)\n  .join('\\\\n')}\n\nunified:\n${JSON.stringify(exportData.unified, null, 2)\n  .split('\\\\n')\n  .map((line) => '  ' + line)\n  .join('\\\\n')}\n`;\n      await writeFile(filePath, yamlContent, 'utf8');\n    } else {\n      await writeFile(filePath, JSON.stringify(exportData, null, 2), 'utf8');\n    }\n\n    success(`Configuration exported to: ${filePath}`);\n    console.log(`📄 Format: ${format}`);\n    console.log(`📊 Size: ${JSON.stringify(exportData).length} bytes`);\n  } catch (err) {\n    error(`Export failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle import command\n */\nasync function handleImport(ctx: CommandContext) {\n  if (ctx.args.length < 2) {\n    error('Import file path is required');\n    console.log('Usage: config-integration import <file>');\n    return;\n  }\n\n  const filePath = ctx.args[1];\n  const dryRun = (ctx.flags.dryRun as boolean) || (ctx.flags['dry-run'] as boolean);\n  const force = (ctx.flags.force as boolean) || (ctx.flags.f as boolean);\n\n  try {\n    const { readFile } = await import('fs/promises');\n    const content = await readFile(filePath, 'utf8');\n\n    let importData;\n    try {\n      importData = JSON.parse(content);\n    } catch {\n      error('Invalid JSON format in import file');\n      return;\n    }\n\n    if (!importData.main || !importData.ruvSwarm) {\n      error('Import file does not contain required configuration sections');\n      return;\n    }\n\n    if (dryRun) {\n      info('Import preview (dry run):');\n      console.log('\\\\n📋 Main Configuration Changes:');\n      console.log(JSON.stringify(importData.main, null, 2));\n      console.log('\\\\n🧠 ruv-swarm Configuration Changes:');\n      console.log(JSON.stringify(importData.ruvSwarm, null, 2));\n      return;\n    }\n\n    if (!force) {\n      warning('This will overwrite current configuration');\n      console.log('Use --force to proceed or --dry-run to preview changes');\n      return;\n    }\n\n    info('Importing configuration...');\n\n    const integration = getRuvSwarmIntegration();\n\n    // Update configurations\n    integration.updateConfiguration({\n      main: importData.main,\n      ruvSwarm: importData.ruvSwarm,\n    });\n\n    // Save changes\n    await configManager.save();\n\n    success('Configuration imported successfully');\n    console.log(`📄 Source: ${filePath}`);\n    console.log(`📅 Imported: ${importData.timestamp || 'Unknown timestamp'}`);\n  } catch (err) {\n    error(`Import failed: ${(err as Error).message}`);\n  }\n}\n\nexport default {\n  configIntegrationAction,\n};\n"],"names":["success","error","warning","info","configManager","getRuvSwarmIntegration","RuvSwarmConfigHelpers","initializeRuvSwarmIntegration","configIntegrationAction","ctx","flags","help","h","args","length","showConfigIntegrationHelp","subcommand","subArgs","slice","handleSetup","handleSync","handleStatus","handleValidate","handlePreset","handleExport","handleImport","err","message","console","log","enableRuvSwarm","force","f","setRuvSwarmConfig","enabled","save","result","integration","status","getStatus","synchronized","mainConfig","defaultTopology","maxAgents","defaultStrategy","statusBefore","syncConfiguration","statusAfter","verbose","v","json","JSON","stringify","autoInit","enableHooks","enablePersistence","enableNeuralTraining","ruvSwarmConfig","swarm","memory","neural","enableTraining","enableMCPTools","enableCLICommands","monitoring","enableMetrics","enableAlerts","alertThresholds","cpu","fix","show","validate","ruvSwarmManager","ruvSwarmValidation","validateConfig","valid","errors","forEach","presetType","dryRun","includes","config","getConfigForUseCase","setupDevelopmentConfig","setupResearchConfig","setupProductionConfig","Object","entries","filter","key","value","startsWith","map","replace","toLowerCase","join","filePath","format","exportData","timestamp","Date","toISOString","version","main","ruvSwarm","unified","getUnifiedCommandArgs","writeFile","yamlContent","split","line","readFile","content","importData","parse","updateConfiguration"],"mappings":"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"}