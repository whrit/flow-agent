{"version":3,"sources":["../../../../src/cli/commands/swarm-spawn.ts"],"sourcesContent":["/**\n * Swarm spawning utilities\n */\n\ninterface Agent {\n  id: string;\n  type: string;\n  status: string;\n  name: string;\n  task: string;\n  parentId?: string;\n  terminalId?: string;\n}\n\ninterface SwarmState {\n  swarmId: string;\n  objective: string;\n  agents: Map<string, Agent>;\n  startTime: number;\n}\n\nconst swarmStates = new Map<string, SwarmState>();\n\nexport function initializeSwarm(swarmId: string, objective: string): void {\n  swarmStates.set(swarmId, {\n    swarmId: swarmId,\n    objective,\n    agents: new Map<string, Agent>(),\n    startTime: Date.now(),\n  });\n}\n\nexport async function spawnSwarmAgent(\n  swarmId: string,\n  agentType: string,\n  task: string,\n): Promise<string> {\n  const swarm = swarmStates.get(swarmId);\n  if (!swarm) {\n    throw new Error(`Swarm ${swarmId} not found`);\n  }\n\n  const agentId = `${swarmId}-agent-${Date.now()}`;\n  const agent: Agent = {\n    id: agentId,\n    type: agentType,\n    status: 'active',\n    name: `${agentType}-${agentId}`,\n    task: task,\n  };\n  swarm.agents.set(agentId, agent);\n\n  // In a real implementation, this would spawn actual Claude instances\n  console.log(`[SWARM] Spawned ${agentType} agent: ${agentId}`);\n  console.log(`[SWARM] Task: ${task}`);\n\n  return agentId;\n}\n\nexport async function monitorSwarm(swarmId: string): Promise<void> {\n  const swarm = swarmStates.get(swarmId);\n  if (!swarm) {\n    throw new Error(`Swarm ${swarmId} not found`);\n  }\n\n  // Simple monitoring loop\n  let running = true;\n  const interval = setInterval(() => {\n    if (!running) {\n      clearInterval(interval);\n      return;\n    }\n\n    console.log(`[MONITOR] Swarm ${swarmId} - Agents: ${swarm.agents.size}`);\n    const activeAgents = Array.from(swarm.agents.values()).filter(\n      (a) => a.status === 'active',\n    ).length;\n    console.log(`[MONITOR] Active: ${activeAgents}`);\n  }, 5000);\n\n  // Stop monitoring after timeout\n  setTimeout(\n    () => {\n      running = false;\n    },\n    60 * 60 * 1000,\n  ); // 1 hour\n}\n\nexport function getSwarmState(swarmId: string): SwarmState | undefined {\n  return swarmStates.get(swarmId);\n}\n"],"names":["swarmStates","Map","initializeSwarm","swarmId","objective","set","agents","startTime","Date","now","spawnSwarmAgent","agentType","task","swarm","get","Error","agentId","agent","id","type","status","name","console","log","monitorSwarm","running","interval","setInterval","clearInterval","size","activeAgents","Array","from","values","filter","a","length","setTimeout","getSwarmState"],"mappings":"AAqBA,MAAMA,cAAc,IAAIC;AAExB,OAAO,SAASC,gBAAgBC,OAAe,EAAEC,SAAiB;IAChEJ,YAAYK,GAAG,CAACF,SAAS;QACvBA,SAASA;QACTC;QACAE,QAAQ,IAAIL;QACZM,WAAWC,KAAKC,GAAG;IACrB;AACF;AAEA,OAAO,eAAeC,gBACpBP,OAAe,EACfQ,SAAiB,EACjBC,IAAY;IAEZ,MAAMC,QAAQb,YAAYc,GAAG,CAACX;IAC9B,IAAI,CAACU,OAAO;QACV,MAAM,IAAIE,MAAM,CAAC,MAAM,EAAEZ,QAAQ,UAAU,CAAC;IAC9C;IAEA,MAAMa,UAAU,GAAGb,QAAQ,OAAO,EAAEK,KAAKC,GAAG,IAAI;IAChD,MAAMQ,QAAe;QACnBC,IAAIF;QACJG,MAAMR;QACNS,QAAQ;QACRC,MAAM,GAAGV,UAAU,CAAC,EAAEK,SAAS;QAC/BJ,MAAMA;IACR;IACAC,MAAMP,MAAM,CAACD,GAAG,CAACW,SAASC;IAG1BK,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAEZ,UAAU,QAAQ,EAAEK,SAAS;IAC5DM,QAAQC,GAAG,CAAC,CAAC,cAAc,EAAEX,MAAM;IAEnC,OAAOI;AACT;AAEA,OAAO,eAAeQ,aAAarB,OAAe;IAChD,MAAMU,QAAQb,YAAYc,GAAG,CAACX;IAC9B,IAAI,CAACU,OAAO;QACV,MAAM,IAAIE,MAAM,CAAC,MAAM,EAAEZ,QAAQ,UAAU,CAAC;IAC9C;IAGA,IAAIsB,UAAU;IACd,MAAMC,WAAWC,YAAY;QAC3B,IAAI,CAACF,SAAS;YACZG,cAAcF;YACd;QACF;QAEAJ,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAEpB,QAAQ,WAAW,EAAEU,MAAMP,MAAM,CAACuB,IAAI,EAAE;QACvE,MAAMC,eAAeC,MAAMC,IAAI,CAACnB,MAAMP,MAAM,CAAC2B,MAAM,IAAIC,MAAM,CAC3D,CAACC,IAAMA,EAAEf,MAAM,KAAK,UACpBgB,MAAM;QACRd,QAAQC,GAAG,CAAC,CAAC,kBAAkB,EAAEO,cAAc;IACjD,GAAG;IAGHO,WACE;QACEZ,UAAU;IACZ,GACA,KAAK,KAAK;AAEd;AAEA,OAAO,SAASa,cAAcnC,OAAe;IAC3C,OAAOH,YAAYc,GAAG,CAACX;AACzB"}