{"version":3,"sources":["../../../../src/cli/commands/maestro.ts"],"sourcesContent":["import { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { MaestroCLIBridge } from '../maestro-cli-bridge.js';\n\nexport const maestroCommand = new Command('maestro')\n  .description('Specs Driven Development Framework for Claude-Flow')\n  .action(() => {\n    maestroCommand.outputHelp();\n  });\n\n// Global CLI bridge instance for reuse\nlet cliBridge: MaestroCLIBridge | undefined;\n\n// Get or create CLI bridge with caching\nasync function getCLIBridge(): Promise<MaestroCLIBridge> {\n  if (!cliBridge) {\n    cliBridge = new MaestroCLIBridge({\n      enablePerformanceMonitoring: true,\n      initializationTimeout: 30000,\n      cacheEnabled: true,\n      logLevel: 'info'\n    });\n  }\n  return cliBridge;\n}\n\n// Enhanced error handler with context\nfunction handleError(error: Error, command?: string): void {\n  console.error(chalk.red(`‚ùå Maestro Error${command ? ` (${command})` : ''}: ${error.message}`));\n  \n  // Provide helpful guidance based on error type\n  if (error.message.includes('ENOENT')) {\n    console.log(chalk.yellow('üí° Tip: Make sure you\\'re in the correct project directory'));\n  } else if (error.message.includes('permission')) {\n    console.log(chalk.yellow('üí° Tip: Check file permissions or run with appropriate privileges'));\n  } else if (error.message.includes('timeout')) {\n    console.log(chalk.yellow('üí° Tip: Network or service timeout - try again or check connectivity'));\n  }\n  \n  process.exit(1);\n}\n\nmaestroCommand.command('create-spec')\n  .description('Create a new feature specification')\n  .argument('<feature-name>', 'Name of the feature to create specification for')\n  .option('-r, --request <request>', 'Initial feature request description')\n  .option('--no-hive-mind', 'Disable hive mind collective intelligence')\n  .option('--consensus-threshold <threshold>', 'Consensus threshold (0-1)', '0.66')\n  .option('--max-agents <count>', 'Maximum number of agents', '8')\n  .action(async (featureName: string, options) => {\n    try {\n      console.log(chalk.blue(`üìã Creating specification for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('create_spec', async () => {\n        await orchestrator.createSpec(featureName, options.request || `Feature specification for ${featureName}`);\n      }, { featureName, hasRequest: !!options.request });\n      \n      console.log(chalk.green(`‚úÖ Specification created successfully for '${featureName}'`));\n      console.log(chalk.gray(`   üìÅ Location: docs/maestro/specs/${featureName}/requirements.md`));\n      \n    } catch (error) {\n      handleError(error as Error, 'create-spec');\n    }\n  });\n\nmaestroCommand.command('generate-design')\n  .description('Generate technical design from requirements')\n  .argument('<feature-name>', 'Name of the feature to generate design for')\n  .option('--no-hive-mind', 'Disable hive mind collective intelligence')\n  .action(async (featureName: string, options) => {\n    try {\n      console.log(chalk.blue(`üé® Generating design for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('generate_design', async () => {\n        await orchestrator.generateDesign(featureName);\n      }, { featureName, useHiveMind: !options.noHiveMind });\n      \n      console.log(chalk.green(`‚úÖ Design generated successfully for '${featureName}'`));\n      console.log(chalk.gray(`   üìÅ Location: docs/maestro/specs/${featureName}/design.md`));\n      \n    } catch (error) {\n      handleError(error as Error, 'generate-design');\n    }\n  });\n\nmaestroCommand.command('generate-tasks')\n  .description('Generate implementation tasks from design')\n  .argument('<feature-name>', 'Name of the feature to generate tasks for')\n  .action(async (featureName: string) => {\n    try {\n      console.log(chalk.blue(`üìã Generating tasks for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('generate_tasks', async () => {\n        await orchestrator.generateTasks(featureName);\n      }, { featureName });\n      \n      console.log(chalk.green(`‚úÖ Tasks generated successfully for '${featureName}'`));\n      console.log(chalk.gray(`   üìÅ Location: docs/maestro/specs/${featureName}/tasks.md`));\n      \n    } catch (error) {\n      handleError(error as Error, 'generate-tasks');\n    }\n  });\n\nmaestroCommand.command('implement-task')\n  .description('Implement a specific task')\n  .argument('<feature-name>', 'Name of the feature')\n  .argument('<task-id>', 'Task number to implement')\n  .option('--skip-consensus', 'Skip consensus validation')\n  .action(async (featureName: string, taskIdStr: string, options) => {\n    try {\n      const taskId = parseInt(taskIdStr);\n      if (isNaN(taskId) || taskId < 1) {\n        throw new Error(`Invalid task ID: ${taskIdStr}. Must be a positive integer.`);\n      }\n      \n      console.log(chalk.blue(`üî® Implementing task ${taskId} for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('implement_task', async () => {\n        await orchestrator.implementTask(featureName, taskId);\n      }, { featureName, taskId, skipConsensus: options.skipConsensus });\n      \n      console.log(chalk.green(`‚úÖ Task ${taskId} implemented successfully for '${featureName}'`));\n      \n    } catch (error) {\n      handleError(error as Error, 'implement-task');\n    }\n  });\n\nmaestroCommand.command('review-tasks')\n  .description('Review implemented tasks for quality assurance')\n  .argument('<feature-name>', 'Name of the feature')\n  .action(async (featureName: string) => {\n    try {\n      console.log(chalk.blue(`üîç Reviewing tasks for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('review_tasks', async () => {\n        await orchestrator.reviewTasks(featureName);\n      }, { featureName });\n      \n      console.log(chalk.green(`‚úÖ Quality review completed for '${featureName}'`));\n      \n    } catch (error) {\n      handleError(error as Error, 'review-tasks');\n    }\n  });\n\nmaestroCommand.command('approve-phase')\n  .description('Approve current phase and progress to next')\n  .argument('<feature-name>', 'Name of the feature')\n  .action(async (featureName: string) => {\n    try {\n      console.log(chalk.blue(`‚úÖ Approving current phase for ${featureName}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      await bridge.executeWithMonitoring('approve_phase', async () => {\n        await orchestrator.approvePhase(featureName);\n      }, { featureName });\n      \n      console.log(chalk.green(`‚úÖ Phase approved successfully for '${featureName}'`));\n      \n    } catch (error) {\n      handleError(error as Error, 'approve-phase');\n    }\n  });\n\nmaestroCommand.command('status')\n  .description('Show workflow status')\n  .argument('<feature-name>', 'Name of the feature')\n  .option('--json', 'Output as JSON')\n  .option('--detailed', 'Show detailed history')\n  .action(async (featureName: string, options) => {\n    try {\n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      const state = orchestrator.getWorkflowState(featureName);\n      \n      if (!state) {\n        console.log(chalk.yellow(`‚ö†Ô∏è  No workflow found for '${featureName}'. Use 'create-spec' to start.`));\n        return;\n      }\n      \n      if (options.json) {\n        console.log(JSON.stringify(state, null, 2));\n        return;\n      }\n      \n      // Display formatted status\n      console.log(chalk.cyan(`üìä Workflow Status: ${featureName}`));\n      console.log(chalk.cyan('‚ïê'.repeat(50)));\n      console.log(`Current Phase: ${chalk.yellow(state.currentPhase)}`);\n      console.log(`Status: ${state.status === 'completed' ? chalk.green(state.status) : chalk.blue(state.status)}`);\n      console.log(`Current Task: ${state.currentTaskIndex}`);\n      console.log(`Last Activity: ${state.lastActivity.toLocaleString()}`);\n      \n      if (options.detailed && state.history.length > 0) {\n        console.log(chalk.cyan('\\nüìú History:'));\n        state.history.forEach((entry, index) => {\n          const status = entry.status === 'completed' ? '‚úÖ' : '‚ùå';\n          console.log(`  ${index + 1}. ${status} ${entry.phase} (${entry.timestamp.toLocaleString()})`);\n        });\n      }\n      \n      // Show performance summary\n      const perfSummary = bridge.getPerformanceSummary();\n      console.log(chalk.cyan('\\n‚ö° Performance Summary:'));\n      console.log(`  Operations: ${perfSummary.totalOperations} (${perfSummary.successRate.toFixed(1)}% success)`);\n      console.log(`  Avg Duration: ${perfSummary.averageDuration}ms`);\n      \n    } catch (error) {\n      handleError(error as Error, 'status');\n    }\n  });\n\nmaestroCommand.command('init-steering')\n  .description('Create steering document for project context')\n  .argument('[domain]', 'Domain name (e.g., product, tech, architecture)', 'general')\n  .option('-c, --content <content>', 'Custom content for the steering document')\n  .action(async (domain: string, options) => {\n    try {\n      console.log(chalk.blue(`üìã Creating steering document for ${domain}...`));\n      \n      const bridge = await getCLIBridge();\n      const orchestrator = await bridge.initializeOrchestrator();\n      \n      const content = options.content || `Guidelines and standards for ${domain} domain development.`;\n      \n      await bridge.executeWithMonitoring('init_steering', async () => {\n        await orchestrator.createSteeringDocument(domain, content);\n      }, { domain, hasCustomContent: !!options.content });\n      \n      console.log(chalk.green(`‚úÖ Steering document created for '${domain}'`));\n      console.log(chalk.gray(`   üìÅ Location: docs/maestro/steering/${domain}.md`));\n      \n    } catch (error) {\n      handleError(error as Error, 'init-steering');\n    }\n  });\n\nmaestroCommand.command('clean')\n  .description('Show cleanup status and implementation details')\n  .action(() => {\n    console.log(chalk.green(`‚úÖ Maestro Cleanup Complete`));\n    console.log(chalk.cyan(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`));\n    console.log(`\\nüßπ Cleanup Summary:`);\n    console.log(`   ‚Ä¢ ‚úÖ Removed deprecated files: kiro-enhanced-types.ts, maestro-types-optimized.ts`);\n    console.log(`   ‚Ä¢ ‚úÖ Removed legacy sync engines: living-documentation-sync.ts, pattern-learning-engine.ts`);\n    console.log(`   ‚Ä¢ ‚úÖ Removed backward compatibility adapter: maestro-command-adapter.js`);\n    console.log(`   ‚Ä¢ ‚úÖ Integrated with agentic-flow-hooks system`);\n    console.log(`   ‚Ä¢ ‚úÖ Updated maestro-orchestrator.ts with clean architecture`);\n    \n    console.log(chalk.cyan(`\\nüèóÔ∏è  Current Architecture:`));\n    console.log(`   üìÅ src/maestro/`);\n    console.log(`      ‚îú‚îÄ‚îÄ maestro-orchestrator.ts    # Main implementation (809 lines)`);\n    console.log(`      ‚îî‚îÄ‚îÄ maestro-types.ts          # Core type definitions`);\n    console.log(`   üìÅ src/services/agentic-flow-hooks/  # Integrated hooks system`);\n    console.log(`   üìÅ src/cli/commands/maestro.ts    # Clean CLI commands`);\n    \n    console.log(chalk.cyan(`\\nüîå Integration Points:`));\n    console.log(`   ‚Ä¢ Hive Mind: src/hive-mind/core/HiveMind.ts`);\n    console.log(`   ‚Ä¢ Consensus: src/hive-mind/integration/ConsensusEngine.ts`);\n    console.log(`   ‚Ä¢ Hooks: src/services/agentic-flow-hooks/`);\n    console.log(`   ‚Ä¢ Event Bus: Integrated with existing core systems`);\n    \n    console.log(chalk.cyan(`\\nüìã Ready for Production:`));\n    console.log(`   ‚Ä¢ Specs-driven development workflow`);\n    console.log(`   ‚Ä¢ Collective intelligence design generation`);\n    console.log(`   ‚Ä¢ Consensus validation for critical decisions`);\n    console.log(`   ‚Ä¢ Living documentation with bidirectional sync`);\n    console.log(`   ‚Ä¢ Agent hooks for automated quality assurance`);\n  });\n\nmaestroCommand.command('help')\n  .description('Show detailed help')\n  .action(() => {\n    console.log(chalk.cyan(`üìö Maestro - Specifications-Driven Development`));\n    console.log(chalk.cyan(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`));\n    console.log(`\\nMaestro enables specifications-driven development with collective intelligence:\\n`);\n    console.log(chalk.yellow(`üîÑ Typical Workflow:`));\n    console.log(`   1. maestro create-spec <feature-name> -r \"description\"`);\n    console.log(`   2. maestro generate-design <feature-name>`);\n    console.log(`   3. maestro approve-phase <feature-name>`);\n    console.log(`   4. maestro generate-tasks <feature-name>`);\n    console.log(`   5. maestro implement-task <feature-name> <task-number>`);\n    console.log(`   6. maestro status <feature-name>`);\n    console.log(chalk.yellow(`\\nüß† Hive Mind Features:`));\n    console.log(`   ‚Ä¢ Collective intelligence for design generation`);\n    console.log(`   ‚Ä¢ Consensus validation for critical decisions`);\n    console.log(`   ‚Ä¢ Advanced agent coordination and task distribution`);\n    console.log(chalk.yellow(`\\nüìÅ File Structure:`));\n    console.log(`   ‚Ä¢ requirements.md - Feature requirements and user stories`);\n    console.log(`   ‚Ä¢ design.md - Technical design and architecture`);\n    console.log(`   ‚Ä¢ tasks.md - Implementation task breakdown`);\n    console.log(chalk.yellow(`\\nüîß Development Status:`));\n    console.log(`   ‚Ä¢ Core implementation: COMPLETE`);\n    console.log(`   ‚Ä¢ Cleanup & refactoring: COMPLETE`);\n    console.log(`   ‚Ä¢ TypeScript compilation: PENDING (infrastructure fixes needed)`);\n    console.log(`   ‚Ä¢ Use 'maestro clean' for detailed cleanup status`);\n  });"],"names":["Command","chalk","MaestroCLIBridge","maestroCommand","description","action","outputHelp","cliBridge","getCLIBridge","enablePerformanceMonitoring","initializationTimeout","cacheEnabled","logLevel","handleError","error","command","console","red","message","includes","log","yellow","process","exit","argument","option","featureName","options","blue","bridge","orchestrator","initializeOrchestrator","executeWithMonitoring","createSpec","request","hasRequest","green","gray","generateDesign","useHiveMind","noHiveMind","generateTasks","taskIdStr","taskId","parseInt","isNaN","Error","implementTask","skipConsensus","reviewTasks","approvePhase","state","getWorkflowState","json","JSON","stringify","cyan","repeat","currentPhase","status","currentTaskIndex","lastActivity","toLocaleString","detailed","history","length","forEach","entry","index","phase","timestamp","perfSummary","getPerformanceSummary","totalOperations","successRate","toFixed","averageDuration","domain","content","createSteeringDocument","hasCustomContent"],"mappings":"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"}