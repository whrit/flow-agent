{"version":3,"sources":["../../../../src/cli/commands/verification.ts"],"sourcesContent":["/**\n * Verification Commands for Claude Flow CLI\n * \n * Provides CLI commands for verification system management and execution.\n * Integrates with the existing claude-flow command structure.\n */\n\nimport { Logger } from '../../core/logger.js';\nimport { \n  verificationHookManager,\n  VerificationCLICommands,\n  createVerificationCommand,\n  executeVerificationFromCLI\n} from '../../verification/index.js';\n\nconst logger = new Logger({\n  level: 'info',\n  format: 'text',\n  destination: 'console'\n}, { prefix: 'VerificationCLI' });\n\n/**\n * Main verification command that provides subcommands\n */\nexport async function verificationCommand(args: any): Promise<any> {\n  const { subcommand = 'status', ...subArgs } = args;\n  \n  try {\n    logger.debug(`Executing verification subcommand: ${subcommand}`);\n    \n    switch (subcommand) {\n      case 'status':\n        return await executeStatusCommand(subArgs);\n        \n      case 'check':\n        return await executeCheckCommand(subArgs);\n        \n      case 'config':\n        return await executeConfigCommand(subArgs);\n        \n      case 'validate':\n        return await executeValidateCommand(subArgs);\n        \n      case 'cleanup':\n        return await executeCleanupCommand(subArgs);\n        \n      case 'pre-task':\n        return await executePreTaskCommand(subArgs);\n        \n      case 'post-task':\n        return await executePostTaskCommand(subArgs);\n        \n      case 'integration':\n        return await executeIntegrationCommand(subArgs);\n        \n      case 'truth':\n        return await executeTruthCommand(subArgs);\n        \n      case 'rollback':\n        return await executeRollbackCommand(subArgs);\n        \n      case 'help':\n        return showVerificationHelp();\n        \n      default:\n        throw new Error(`Unknown verification subcommand: ${subcommand}`);\n    }\n  } catch (error) {\n    logger.error(`Verification command failed:`, error);\n    throw error;\n  }\n}\n\n/**\n * Execute status command\n */\nasync function executeStatusCommand(args: any): Promise<any> {\n  const command = VerificationCLICommands.status();\n  return await command.execute(args);\n}\n\n/**\n * Execute check command\n */\nasync function executeCheckCommand(args: any): Promise<any> {\n  const command = VerificationCLICommands.check();\n  return await command.execute(args);\n}\n\n/**\n * Execute config command\n */\nasync function executeConfigCommand(args: any): Promise<any> {\n  const command = VerificationCLICommands.config();\n  return await command.execute(args);\n}\n\n/**\n * Execute validate command\n */\nasync function executeValidateCommand(args: any): Promise<any> {\n  const command = VerificationCLICommands.validate();\n  return await command.execute(args);\n}\n\n/**\n * Execute cleanup command\n */\nasync function executeCleanupCommand(args: any): Promise<any> {\n  const command = VerificationCLICommands.cleanup();\n  return await command.execute(args);\n}\n\n/**\n * Execute pre-task verification\n */\nasync function executePreTaskCommand(args: any): Promise<any> {\n  return await executeVerificationFromCLI('pre-task', args);\n}\n\n/**\n * Execute post-task verification\n */\nasync function executePostTaskCommand(args: any): Promise<any> {\n  return await executeVerificationFromCLI('post-task', args);\n}\n\n/**\n * Execute integration tests\n */\nasync function executeIntegrationCommand(args: any): Promise<any> {\n  return await executeVerificationFromCLI('integration', args);\n}\n\n/**\n * Execute truth telemetry\n */\nasync function executeTruthCommand(args: any): Promise<any> {\n  return await executeVerificationFromCLI('truth', args);\n}\n\n/**\n * Execute rollback\n */\nasync function executeRollbackCommand(args: any): Promise<any> {\n  return await executeVerificationFromCLI('rollback', args);\n}\n\n/**\n * Show verification help\n */\nfunction showVerificationHelp(): any {\n  const help = `\nüîç Claude Flow Verification System\n\nUSAGE:\n  npx claude-flow verification <subcommand> [options]\n\nSUBCOMMANDS:\n  status      Show verification system status and metrics\n  check       Run verification checks for a specific task\n  config      View or update verification configuration\n  validate    Run post-task validation for a completed task\n  cleanup     Cleanup old verification contexts and snapshots\n  pre-task    Run pre-task verification hooks\n  post-task   Run post-task verification hooks\n  integration Run integration test hooks\n  truth       Run truth telemetry hooks\n  rollback    Execute rollback procedures\n  help        Show this help message\n\nEXAMPLES:\n  npx claude-flow verification status\n  npx claude-flow verification check --taskId task-123\n  npx claude-flow verification config --action set --key preTask.enabled --value true\n  npx claude-flow verification validate --taskId task-123\n  npx claude-flow verification cleanup --force --maxAge 86400000\n  npx claude-flow verification pre-task --taskId task-123 --sessionId session-456\n  npx claude-flow verification post-task --taskId task-123\n  npx claude-flow verification integration --parallel true\n  npx claude-flow verification truth --metric accuracy --threshold 0.8\n  npx claude-flow verification rollback --taskId task-123 --strategy automatic\n\nGLOBAL OPTIONS:\n  --json      Output results in JSON format\n  --verbose   Enable verbose logging\n  --help      Show help for specific subcommand\n\nFor more information about a specific subcommand:\n  npx claude-flow verification <subcommand> --help\n`;\n\n  console.log(help);\n  return { help: true };\n}\n\n/**\n * Hook command for direct hook execution (for backward compatibility)\n */\nexport async function hookCommand(args: any): Promise<any> {\n  const { type, ...hookArgs } = args;\n  \n  try {\n    logger.info(`Executing hook command: ${type}`);\n    \n    switch (type) {\n      case 'pre-task':\n      case 'pre_task':\n        return await executeVerificationFromCLI('pre-task', hookArgs);\n        \n      case 'post-task':\n      case 'post_task':\n        return await executeVerificationFromCLI('post-task', hookArgs);\n        \n      case 'validation':\n        const validateCommand = VerificationCLICommands.validate();\n        return await validateCommand.execute(hookArgs);\n        \n      case 'integration':\n      case 'integration-test':\n        return await executeVerificationFromCLI('integration', hookArgs);\n        \n      case 'truth':\n      case 'truth-telemetry':\n        return await executeVerificationFromCLI('truth', hookArgs);\n        \n      case 'rollback':\n        return await executeVerificationFromCLI('rollback', hookArgs);\n        \n      default:\n        throw new Error(`Unknown hook type: ${type}`);\n    }\n  } catch (error) {\n    logger.error(`Hook command failed:`, error);\n    throw error;\n  }\n}\n\n/**\n * Command definitions for CLI integration\n */\nexport const VERIFICATION_COMMANDS = {\n  verification: {\n    name: 'verification',\n    description: 'Verification system management and execution',\n    handler: verificationCommand,\n    subcommands: {\n      status: {\n        name: 'status',\n        description: 'Show verification system status',\n        options: {\n          json: { type: 'boolean', description: 'Output in JSON format' }\n        }\n      },\n      check: {\n        name: 'check',\n        description: 'Run verification checks',\n        options: {\n          taskId: { type: 'string', required: true, description: 'Task ID to check' },\n          type: { type: 'string', description: 'Type of checks to run' },\n          json: { type: 'boolean', description: 'Output in JSON format' }\n        }\n      },\n      config: {\n        name: 'config',\n        description: 'Manage verification configuration',\n        options: {\n          action: { type: 'string', description: 'Action to perform (show, set)' },\n          key: { type: 'string', description: 'Configuration key' },\n          value: { type: 'string', description: 'Configuration value' },\n          json: { type: 'boolean', description: 'Output in JSON format' }\n        }\n      },\n      validate: {\n        name: 'validate',\n        description: 'Run post-task validation',\n        options: {\n          taskId: { type: 'string', required: true, description: 'Task ID to validate' },\n          force: { type: 'boolean', description: 'Force validation even if not complete' },\n          json: { type: 'boolean', description: 'Output in JSON format' }\n        }\n      },\n      cleanup: {\n        name: 'cleanup',\n        description: 'Cleanup old verification data',\n        options: {\n          maxAge: { type: 'number', description: 'Maximum age in milliseconds' },\n          force: { type: 'boolean', description: 'Force cleanup without confirmation' },\n          json: { type: 'boolean', description: 'Output in JSON format' }\n        }\n      }\n    }\n  },\n  \n  hook: {\n    name: 'hook',\n    description: 'Execute verification hooks directly',\n    handler: hookCommand,\n    options: {\n      type: { type: 'string', required: true, description: 'Hook type to execute' },\n      taskId: { type: 'string', description: 'Task ID for context' },\n      sessionId: { type: 'string', description: 'Session ID for context' },\n      json: { type: 'boolean', description: 'Output in JSON format' }\n    }\n  }\n};\n\n/**\n * Integration function for registering commands with CLI framework\n */\nexport function registerVerificationCommands(commandRegistry: any): void {\n  try {\n    // Register main verification command\n    commandRegistry.register({\n      name: 'verification',\n      description: 'Verification system management',\n      handler: verificationCommand,\n      examples: [\n        'npx claude-flow verification status',\n        'npx claude-flow verification check --taskId task-123',\n        'npx claude-flow verification validate --taskId task-123'\n      ]\n    });\n\n    // Register hook command for backward compatibility\n    commandRegistry.register({\n      name: 'hook',\n      description: 'Execute verification hooks',\n      handler: hookCommand,\n      examples: [\n        'npx claude-flow hook --type pre-task --taskId task-123',\n        'npx claude-flow hook --type post-task --taskId task-123'\n      ]\n    });\n\n    logger.info('Verification commands registered successfully');\n  } catch (error) {\n    logger.error('Failed to register verification commands:', error);\n    throw error;\n  }\n}\n\n/**\n * Default export for CLI integration\n */\nexport default {\n  commands: VERIFICATION_COMMANDS,\n  register: registerVerificationCommands,\n  handlers: {\n    verification: verificationCommand,\n    hook: hookCommand\n  }\n};"],"names":["Logger","VerificationCLICommands","executeVerificationFromCLI","logger","level","format","destination","prefix","verificationCommand","args","subcommand","subArgs","debug","executeStatusCommand","executeCheckCommand","executeConfigCommand","executeValidateCommand","executeCleanupCommand","executePreTaskCommand","executePostTaskCommand","executeIntegrationCommand","executeTruthCommand","executeRollbackCommand","showVerificationHelp","Error","error","command","status","execute","check","config","validate","cleanup","help","console","log","hookCommand","type","hookArgs","info","validateCommand","VERIFICATION_COMMANDS","verification","name","description","handler","subcommands","options","json","taskId","required","action","key","value","force","maxAge","hook","sessionId","registerVerificationCommands","commandRegistry","register","examples","commands","handlers"],"mappings":"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"}