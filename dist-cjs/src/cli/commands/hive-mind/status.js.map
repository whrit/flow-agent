{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/status.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Status Command\n *\n * Displays comprehensive status of the Hive Mind swarm\n * including agents, tasks, memory, and performance metrics.\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport { HiveMind } from '../../../hive-mind/core/HiveMind.js';\nimport { formatSuccess, formatError, formatInfo, formatWarning } from '../../formatter.js';\nimport { DatabaseManager } from '../../../hive-mind/core/DatabaseManager.js';\n\nexport const statusCommand = new Command('status')\n  .description('Display Hive Mind swarm status and metrics')\n  .option('-s, --swarm-id <id>', 'Specific swarm ID to check')\n  .option('-d, --detailed', 'Show detailed agent information', false)\n  .option('-m, --memory', 'Show memory usage statistics', false)\n  .option('-t, --tasks', 'Show task queue details', false)\n  .option('-p, --performance', 'Show performance metrics', false)\n  .option('-w, --watch', 'Watch status in real-time', false)\n  .option('-j, --json', 'Output as JSON', false)\n  .action(async (options) => {\n    try {\n      // Get swarm ID\n      const swarmId = options.swarmId || (await getActiveSwarmId());\n      if (!swarmId) {\n        throw new Error('No active swarm found. Initialize a Hive Mind first.');\n      }\n\n      // Load Hive Mind\n      const hiveMind = await HiveMind.load(swarmId);\n      const status = await hiveMind.getFullStatus();\n\n      if (options.json) {\n        console.log(JSON.stringify(status, null, 2));\n        return;\n      }\n\n      // Display swarm header\n      console.log('\\n' + chalk.bold.yellow('🐝 Hive Mind Status'));\n      console.log(chalk.gray('━'.repeat(60)));\n\n      // Basic info\n      console.log(formatInfo(`Swarm ID: ${status.swarmId}`));\n      console.log(formatInfo(`Name: ${status.name}`));\n      console.log(formatInfo(`Topology: ${status.topology}`));\n      console.log(formatInfo(`Queen Mode: ${status.queenMode}`));\n      console.log(formatInfo(`Status: ${getStatusEmoji(status.health)} ${status.health}`));\n      console.log(formatInfo(`Uptime: ${formatUptime(status.uptime)}`));\n\n      // Agent summary\n      console.log('\\n' + chalk.bold('👥 Agent Summary'));\n      const agentTable = new Table({\n        head: ['Type', 'Total', 'Active', 'Idle', 'Busy'],\n        style: { head: ['cyan'] },\n      });\n\n      Object.entries(status.agentsByType).forEach(([type, count]) => {\n        const active = status.agents.filter((a) => a.type === type && a.status === 'active').length;\n        const idle = status.agents.filter((a) => a.type === type && a.status === 'idle').length;\n        const busy = status.agents.filter((a) => a.type === type && a.status === 'busy').length;\n\n        agentTable.push([type, count, active, idle, busy]);\n      });\n\n      console.log(agentTable.toString());\n\n      // Detailed agent info\n      if (options.detailed) {\n        console.log('\\n' + chalk.bold('🤖 Agent Details'));\n        const detailTable = new Table({\n          head: ['Name', 'Type', 'Status', 'Task', 'Messages', 'Uptime'],\n          style: { head: ['cyan'] },\n        });\n\n        status.agents.forEach((agent) => {\n          detailTable.push([\n            agent.name,\n            agent.type,\n            getAgentStatusBadge(agent.status),\n            agent.currentTask || '-',\n            agent.messageCount,\n            formatUptime(Date.now() - agent.createdAt),\n          ]);\n        });\n\n        console.log(detailTable.toString());\n      }\n\n      // Task queue\n      if (options.tasks || status.tasks.length > 0) {\n        console.log('\\n' + chalk.bold('📋 Task Queue'));\n        const taskTable = new Table({\n          head: ['ID', 'Description', 'Status', 'Assigned To', 'Progress'],\n          style: { head: ['cyan'] },\n        });\n\n        status.tasks.forEach((task) => {\n          taskTable.push([\n            task.id.substring(0, 8),\n            task.description.substring(0, 40) + (task.description.length > 40 ? '...' : ''),\n            getTaskStatusBadge(task.status),\n            task.assignedAgent || '-',\n            `${task.progress}%`,\n          ]);\n        });\n\n        console.log(taskTable.toString());\n        console.log(formatInfo(`Total Tasks: ${status.taskStats.total}`));\n        console.log(\n          formatInfo(\n            `Completed: ${status.taskStats.completed} | In Progress: ${status.taskStats.inProgress} | Pending: ${status.taskStats.pending}`,\n          ),\n        );\n      }\n\n      // Memory statistics\n      if (options.memory) {\n        console.log('\\n' + chalk.bold('💾 Memory Statistics'));\n        const memTable = new Table({\n          head: ['Namespace', 'Entries', 'Size', 'Avg TTL'],\n          style: { head: ['cyan'] },\n        });\n\n        Object.entries(status.memoryStats.byNamespace).forEach(([ns, stats]) => {\n          memTable.push([ns, stats.entries, formatBytes(stats.size), `${stats.avgTTL}s`]);\n        });\n\n        console.log(memTable.toString());\n        console.log(formatInfo(`Total Memory Usage: ${formatBytes(status.memoryStats.totalSize)}`));\n        console.log(formatInfo(`Total Entries: ${status.memoryStats.totalEntries}`));\n      }\n\n      // Performance metrics\n      if (options.performance) {\n        console.log('\\n' + chalk.bold('📊 Performance Metrics'));\n        console.log(formatInfo(`Avg Task Completion: ${status.performance.avgTaskCompletion}ms`));\n        console.log(formatInfo(`Message Throughput: ${status.performance.messageThroughput}/min`));\n        console.log(\n          formatInfo(`Consensus Success Rate: ${status.performance.consensusSuccessRate}%`),\n        );\n        console.log(formatInfo(`Memory Hit Rate: ${status.performance.memoryHitRate}%`));\n        console.log(formatInfo(`Agent Utilization: ${status.performance.agentUtilization}%`));\n      }\n\n      // Communications\n      console.log('\\n' + chalk.bold('📡 Recent Communications'));\n      console.log(formatInfo(`Total Messages: ${status.communicationStats.totalMessages}`));\n      console.log(formatInfo(`Avg Latency: ${status.communicationStats.avgLatency}ms`));\n      console.log(formatInfo(`Active Channels: ${status.communicationStats.activeChannels}`));\n\n      // Health warnings\n      if (status.warnings.length > 0) {\n        console.log('\\n' + chalk.bold.yellow('⚠️  Warnings'));\n        status.warnings.forEach((warning) => {\n          console.log(formatWarning(warning));\n        });\n      }\n\n      // Watch mode\n      if (options.watch) {\n        console.log('\\n' + chalk.gray('Refreshing every 2 seconds... (Ctrl+C to exit)'));\n        setInterval(async () => {\n          console.clear();\n          await statusCommand.parseAsync([...process.argv.slice(0, 2), ...process.argv.slice(3)]);\n        }, 2000);\n      }\n    } catch (error) {\n      console.error(formatError('Failed to get swarm status'));\n      console.error(formatError((error as Error).message));\n      process.exit(1);\n    }\n  });\n\nasync function getActiveSwarmId(): Promise<string | null> {\n  const db = await DatabaseManager.getInstance();\n  return db.getActiveSwarmId();\n}\n\nfunction getStatusEmoji(health: string): string {\n  const emojis: Record<string, string> = {\n    healthy: '🟢',\n    degraded: '🟡',\n    critical: '🔴',\n    unknown: '⚪',\n  };\n  return emojis[health] || '⚪';\n}\n\nfunction getAgentStatusBadge(status: string): string {\n  const badges: Record<string, string> = {\n    active: chalk.green('● Active'),\n    idle: chalk.yellow('● Idle'),\n    busy: chalk.blue('● Busy'),\n    error: chalk.red('● Error'),\n  };\n  return badges[status] || chalk.gray('● Unknown');\n}\n\nfunction getTaskStatusBadge(status: string): string {\n  const badges: Record<string, string> = {\n    pending: chalk.gray('⏳ Pending'),\n    assigned: chalk.yellow('🔄 Assigned'),\n    in_progress: chalk.blue('▶️  In Progress'),\n    completed: chalk.green('✅ Completed'),\n    failed: chalk.red('❌ Failed'),\n  };\n  return badges[status] || chalk.gray('❓ Unknown');\n}\n\nfunction formatUptime(ms: number): string {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days}d ${hours % 24}h`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\nfunction formatBytes(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size > 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n}\n"],"names":["Command","chalk","Table","HiveMind","formatError","formatInfo","formatWarning","DatabaseManager","statusCommand","description","option","action","options","swarmId","getActiveSwarmId","Error","hiveMind","load","status","getFullStatus","json","console","log","JSON","stringify","bold","yellow","gray","repeat","name","topology","queenMode","getStatusEmoji","health","formatUptime","uptime","agentTable","head","style","Object","entries","agentsByType","forEach","type","count","active","agents","filter","a","length","idle","busy","push","toString","detailed","detailTable","agent","getAgentStatusBadge","currentTask","messageCount","Date","now","createdAt","tasks","taskTable","task","id","substring","getTaskStatusBadge","assignedAgent","progress","taskStats","total","completed","inProgress","pending","memory","memTable","memoryStats","byNamespace","ns","stats","formatBytes","size","avgTTL","totalSize","totalEntries","performance","avgTaskCompletion","messageThroughput","consensusSuccessRate","memoryHitRate","agentUtilization","communicationStats","totalMessages","avgLatency","activeChannels","warnings","warning","watch","setInterval","clear","parseAsync","process","argv","slice","error","message","exit","db","getInstance","emojis","healthy","degraded","critical","unknown","badges","green","blue","red","assigned","in_progress","failed","ms","seconds","Math","floor","minutes","hours","days","bytes","units","unitIndex","toFixed"],"mappings":"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"}