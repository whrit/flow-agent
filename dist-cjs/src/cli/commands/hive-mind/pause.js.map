{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/pause.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Pause Command\n *\n * Pause active swarm sessions\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { HiveMindSessionManager } from '../../simple-commands/hive-mind/session-manager.js';\nimport inquirer from 'inquirer';\n\nexport const pauseCommand = new Command('pause')\n  .description('Pause active hive mind sessions')\n  .option('-s, --session <id>', 'Pause specific session by ID')\n  .action(async (options) => {\n    const sessionManager = new HiveMindSessionManager();\n\n    try {\n      if (options.session) {\n        // Pause specific session\n        const sessionId = options.session;\n        const session = await sessionManager.getSession(sessionId);\n\n        if (!session) {\n          console.log(chalk.red(`Session ${sessionId} not found`));\n          return;\n        }\n\n        if ((session as any).status === 'paused') {\n          console.log(chalk.yellow(`Session ${sessionId} is already paused`));\n          return;\n        }\n\n        if ((session as any).status !== 'active') {\n          console.log(\n            chalk.yellow(`Session ${sessionId} is not active (status: ${(session as any).status})`),\n          );\n          return;\n        }\n\n        console.log(chalk.cyan(`Pausing session ${sessionId}...`));\n        const result = await sessionManager.pauseSession(sessionId);\n\n        if (result) {\n          console.log(chalk.green(`✓ Session ${sessionId} paused successfully`));\n          console.log(chalk.gray(`Use 'claude-flow hive-mind resume -s ${sessionId}' to resume`));\n        } else {\n          console.log(chalk.red(`Failed to pause session ${sessionId}`));\n        }\n      } else {\n        // Interactive selection\n        const sessions = await sessionManager.getActiveSessions();\n        const activeSessions = sessions.filter((s: any) => s.status === 'active');\n\n        if (activeSessions.length === 0) {\n          console.log(chalk.yellow('No active sessions found to pause'));\n          return;\n        }\n\n        const { sessionId } = await inquirer.prompt([\n          {\n            type: 'list',\n            name: 'sessionId',\n            message: 'Select session to pause:',\n            choices: activeSessions.map((s: any) => ({\n              name: `${s.swarm_name} (${s.id}) - ${s.completion_percentage}% complete`,\n              value: s.id,\n            })),\n          },\n        ]);\n\n        console.log(chalk.cyan(`Pausing session ${sessionId}...`));\n        const result = await sessionManager.pauseSession(sessionId);\n\n        if (result) {\n          console.log(chalk.green(`✓ Session paused successfully`));\n          console.log(chalk.gray(`Use 'claude-flow hive-mind resume -s ${sessionId}' to resume`));\n        } else {\n          console.log(chalk.red(`Failed to pause session`));\n        }\n      }\n    } catch (error) {\n      console.error(chalk.red('Error pausing session:'), (error as Error).message);\n      process.exit(1);\n    } finally {\n      sessionManager.close();\n    }\n  });\n"],"names":["Command","chalk","HiveMindSessionManager","inquirer","pauseCommand","description","option","action","options","sessionManager","session","sessionId","getSession","console","log","red","status","yellow","cyan","result","pauseSession","green","gray","sessions","getActiveSessions","activeSessions","filter","s","length","prompt","type","name","message","choices","map","swarm_name","id","completion_percentage","value","error","process","exit","close"],"mappings":"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"}