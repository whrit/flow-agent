{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/spawn.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Agent Spawn Command\n *\n * Spawns specialized agents into the Hive Mind swarm\n * with automatic capability assignment and coordination.\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport inquirer from 'inquirer';\nimport { HiveMind } from '../../../hive-mind/core/HiveMind.js';\nimport { AgentType, AgentCapability } from '../../../hive-mind/types.js';\nimport { formatSuccess, formatError, formatInfo, formatWarning } from '../../formatter.js';\n\nconst AGENT_TYPES: AgentType[] = [\n  'coordinator',\n  'researcher',\n  'coder',\n  'analyst',\n  'architect',\n  'tester',\n  'reviewer',\n  'optimizer',\n  'documenter',\n  'monitor',\n  'specialist',\n  'requirements_analyst',\n  'design_architect',\n  'system-architect',\n  'task_planner',\n  'task-planner',\n  'implementation_coder',\n  'developer',\n  'quality_reviewer',\n  'steering_documenter',\n];\n\nconst CAPABILITY_MAP: Record<AgentType, AgentCapability[]> = {\n  coordinator: ['task_management', 'resource_allocation', 'consensus_building'],\n  researcher: ['information_gathering', 'pattern_recognition', 'knowledge_synthesis'],\n  coder: ['code_generation', 'refactoring', 'debugging'],\n  analyst: ['data_analysis', 'performance_metrics', 'bottleneck_detection'],\n  architect: ['system_design', 'architecture_patterns', 'integration_planning'],\n  tester: ['test_generation', 'quality_assurance', 'edge_case_detection'],\n  reviewer: ['code_review', 'standards_enforcement', 'best_practices'],\n  optimizer: ['performance_optimization', 'resource_optimization', 'algorithm_improvement'],\n  documenter: ['documentation_generation', 'api_docs', 'user_guides'],\n  monitor: ['system_monitoring', 'health_checks', 'alerting'],\n  specialist: ['domain_expertise', 'custom_capabilities', 'problem_solving'],\n  requirements_analyst: ['requirements_analysis', 'user_story_creation', 'acceptance_criteria'],\n  design_architect: ['system_design', 'architecture', 'specs_driven_design'],\n  'system-architect': ['system_design', 'architecture_patterns', 'integration_planning'],\n  task_planner: ['task_management', 'workflow_orchestration'],\n  'task-planner': ['task_management', 'workflow_orchestration'],\n  implementation_coder: ['code_generation', 'implementation', 'debugging'],\n  developer: ['code_generation', 'implementation', 'debugging'],\n  quality_reviewer: ['code_review', 'quality_assurance', 'testing'],\n  steering_documenter: ['documentation_generation', 'governance']\n};\n\nexport const spawnCommand = new Command('spawn')\n  .description('Spawn specialized agents into the Hive Mind')\n  .argument('[type]', 'Agent type to spawn')\n  .option('-n, --name <string>', 'Custom agent name')\n  .option('-c, --capabilities <items>', 'Additional capabilities (comma-separated)')\n  .option('-s, --swarm-id <id>', 'Target swarm ID')\n  .option('-i, --interactive', 'Interactive spawn mode', false)\n  .option('-b, --batch <number>', 'Spawn multiple agents of same type', '1')\n  .option('--auto-assign', 'Automatically assign to available tasks', false)\n  .action(async (type, options) => {\n    const spinner = ora('Spawning agent...').start();\n\n    try {\n      // Get or prompt for swarm ID\n      const swarmId = options.swarmId || (await getActiveSwarmId());\n      if (!swarmId) {\n        throw new Error('No active swarm found. Initialize a Hive Mind first.');\n      }\n\n      // Interactive mode\n      if (options.interactive || !type) {\n        const answers = await inquirer.prompt([\n          {\n            type: 'list',\n            name: 'type',\n            message: 'Select agent type:',\n            choices: AGENT_TYPES,\n            when: !type,\n          },\n          {\n            type: 'checkbox',\n            name: 'additionalCapabilities',\n            message: 'Select additional capabilities:',\n            choices: getAllCapabilities(),\n            when: (answers) => {\n              const agentType = type || answers.type;\n              return agentType === 'specialist';\n            },\n          },\n          {\n            type: 'input',\n            name: 'customName',\n            message: 'Enter custom agent name (optional):',\n            when: !options.name,\n          },\n        ]);\n\n        type = type || answers.type;\n        options.name = options.name || answers.customName;\n        if (answers.additionalCapabilities) {\n          options.capabilities = answers.additionalCapabilities.join(',');\n        }\n      }\n\n      // Validate agent type\n      if (!AGENT_TYPES.includes(type as AgentType)) {\n        throw new Error(`Invalid agent type: ${type}`);\n      }\n\n      // Load Hive Mind\n      const hiveMind = await HiveMind.load(swarmId);\n\n      // Determine capabilities\n      const baseCapabilities = CAPABILITY_MAP[type as AgentType] || [];\n      const additionalCapabilities = options.capabilities\n        ? options.capabilities.split(',').map((c: string) => c.trim())\n        : [];\n      const capabilities = [...baseCapabilities, ...additionalCapabilities];\n\n      // Spawn agents\n      const batchSize = parseInt(options.batch, 10);\n      const spawnedAgents = [];\n\n      for (let i = 0; i < batchSize; i++) {\n        const agentName = options.name || `${type}-${Date.now()}-${i}`;\n        const agent = await hiveMind.spawnAgent({\n          type: type as AgentType,\n          name: agentName,\n          capabilities,\n          autoAssign: options.autoAssign,\n        });\n\n        spawnedAgents.push(agent);\n\n        if (batchSize > 1) {\n          spinner.text = `Spawning agents... (${i + 1}/${batchSize})`;\n        }\n      }\n\n      spinner.succeed(formatSuccess(`Successfully spawned ${batchSize} ${type} agent(s)!`));\n\n      // Display spawned agents\n      console.log('\\n' + chalk.bold('ðŸ¤– Spawned Agents:'));\n      spawnedAgents.forEach((agent) => {\n        console.log(formatInfo(`${agent.name} (${agent.id})`));\n        console.log(chalk.gray(`  Capabilities: ${agent.capabilities.join(', ')}`));\n        if (agent.currentTask) {\n          console.log(chalk.yellow(`  Assigned to: ${agent.currentTask}`));\n        }\n      });\n\n      // Show swarm stats\n      const stats = await hiveMind.getStats();\n      console.log('\\n' + chalk.bold('ðŸ“Š Swarm Statistics:'));\n      console.log(formatInfo(`Total Agents: ${stats.totalAgents}`));\n      console.log(formatInfo(`Active Agents: ${stats.activeAgents}`));\n      console.log(formatInfo(`Available Capacity: ${stats.availableCapacity}%`));\n\n      if (options.autoAssign && stats.pendingTasks > 0) {\n        console.log(formatWarning(`Auto-assigned to ${stats.pendingTasks} pending task(s)`));\n      }\n    } catch (error) {\n      spinner.fail(formatError('Failed to spawn agent'));\n      console.error(formatError((error as Error).message));\n      process.exit(1);\n    }\n  });\n\nasync function getActiveSwarmId(): Promise<string | null> {\n  const { DatabaseManager } = await import('../../../hive-mind/core/DatabaseManager.js');\n  const db = await DatabaseManager.getInstance();\n  return db.getActiveSwarmId();\n}\n\nfunction getAllCapabilities(): string[] {\n  const allCapabilities = new Set<string>();\n  Object.values(CAPABILITY_MAP).forEach((caps) => {\n    caps.forEach((cap) => allCapabilities.add(cap));\n  });\n  return Array.from(allCapabilities);\n}\n"],"names":["Command","chalk","ora","inquirer","HiveMind","formatSuccess","formatError","formatInfo","formatWarning","AGENT_TYPES","CAPABILITY_MAP","coordinator","researcher","coder","analyst","architect","tester","reviewer","optimizer","documenter","monitor","specialist","requirements_analyst","design_architect","task_planner","implementation_coder","developer","quality_reviewer","steering_documenter","spawnCommand","description","argument","option","action","type","options","spinner","start","swarmId","getActiveSwarmId","Error","interactive","answers","prompt","name","message","choices","when","getAllCapabilities","agentType","customName","additionalCapabilities","capabilities","join","includes","hiveMind","load","baseCapabilities","split","map","c","trim","batchSize","parseInt","batch","spawnedAgents","i","agentName","Date","now","agent","spawnAgent","autoAssign","push","text","succeed","console","log","bold","forEach","id","gray","currentTask","yellow","stats","getStats","totalAgents","activeAgents","availableCapacity","pendingTasks","error","fail","process","exit","DatabaseManager","db","getInstance","allCapabilities","Set","Object","values","caps","cap","add","Array","from"],"mappings":"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"}