{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/task.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Task Command\n *\n * Submit tasks to the Hive Mind for collective processing\n * with automatic agent assignment and consensus coordination.\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport inquirer from 'inquirer';\nimport { HiveMind } from '../../../hive-mind/core/HiveMind.js';\nimport { TaskPriority, TaskStrategy } from '../../../hive-mind/types.js';\nimport { formatSuccess, formatError, formatInfo, formatWarning } from '../../formatter.js';\nimport { DatabaseManager } from '../../../hive-mind/core/DatabaseManager.js';\n\nexport const taskCommand = new Command('task')\n  .description('Submit and manage tasks in the Hive Mind')\n  .argument('[description]', 'Task description')\n  .option('-s, --swarm-id <id>', 'Target swarm ID')\n  .option('-p, --priority <level>', 'Task priority (low, medium, high, critical)', 'medium')\n  .option(\n    '-t, --strategy <type>',\n    'Execution strategy (parallel, sequential, adaptive, consensus)',\n    'adaptive',\n  )\n  .option('-d, --dependencies <ids>', 'Comma-separated list of dependent task IDs')\n  .option('-a, --assign-to <agent>', 'Assign to specific agent')\n  .option('-r, --require-consensus', 'Require consensus for this task', false)\n  .option('-m, --max-agents <number>', 'Maximum agents to assign', '3')\n  .option('-i, --interactive', 'Interactive task creation', false)\n  .option('-w, --watch', 'Watch task progress', false)\n  .option('-l, --list', 'List all tasks', false)\n  .option('--cancel <id>', 'Cancel a specific task')\n  .option('--retry <id>', 'Retry a failed task')\n  .action(async (description, options) => {\n    try {\n      // Get swarm ID\n      const swarmId = options.swarmId || (await getActiveSwarmId());\n      if (!swarmId) {\n        throw new Error('No active swarm found. Initialize a Hive Mind first.');\n      }\n\n      // Load Hive Mind\n      const hiveMind = await HiveMind.load(swarmId);\n\n      // Handle special operations\n      if (options.list) {\n        await listTasks(hiveMind);\n        return;\n      }\n\n      if (options.cancel) {\n        await cancelTask(hiveMind, options.cancel);\n        return;\n      }\n\n      if (options.retry) {\n        await retryTask(hiveMind, options.retry);\n        return;\n      }\n\n      // Interactive mode\n      if (options.interactive || !description) {\n        const answers = await inquirer.prompt([\n          {\n            type: 'input',\n            name: 'description',\n            message: 'Enter task description:',\n            when: !description,\n            validate: (input) => input.length > 0 || 'Task description is required',\n          },\n          {\n            type: 'list',\n            name: 'priority',\n            message: 'Select task priority:',\n            choices: ['low', 'medium', 'high', 'critical'],\n            default: options.priority,\n          },\n          {\n            type: 'list',\n            name: 'strategy',\n            message: 'Select execution strategy:',\n            choices: [\n              { name: 'Adaptive (AI-optimized)', value: 'adaptive' },\n              { name: 'Parallel (Fast, multiple agents)', value: 'parallel' },\n              { name: 'Sequential (Step-by-step)', value: 'sequential' },\n              { name: 'Consensus (Requires agreement)', value: 'consensus' },\n            ],\n            default: options.strategy,\n          },\n          {\n            type: 'confirm',\n            name: 'requireConsensus',\n            message: 'Require consensus for critical decisions?',\n            default: options.requireConsensus,\n            when: (answers) => answers.strategy !== 'consensus',\n          },\n          {\n            type: 'number',\n            name: 'maxAgents',\n            message: 'Maximum agents to assign:',\n            default: parseInt(options.maxAgents, 10),\n            validate: (input) => (input > 0 && input <= 10) || 'Must be between 1 and 10',\n          },\n          {\n            type: 'checkbox',\n            name: 'capabilities',\n            message: 'Required agent capabilities:',\n            choices: [\n              'code_generation',\n              'research',\n              'analysis',\n              'testing',\n              'optimization',\n              'documentation',\n              'architecture',\n              'review',\n            ],\n          },\n        ]);\n\n        description = description || answers.description;\n        options.priority = answers.priority || options.priority;\n        options.strategy = answers.strategy || options.strategy;\n        options.requireConsensus = answers.requireConsensus || options.requireConsensus;\n        options.maxAgents = answers.maxAgents || options.maxAgents;\n        options.requiredCapabilities = answers.capabilities;\n      }\n\n      const spinner = ora('Submitting task to Hive Mind...').start();\n\n      // Parse dependencies\n      const dependencies = options.dependencies\n        ? options.dependencies.split(',').map((id: string) => id.trim())\n        : [];\n\n      // Submit task\n      const task = await hiveMind.submitTask({\n        description,\n        priority: options.priority as TaskPriority,\n        strategy: options.strategy as TaskStrategy,\n        dependencies,\n        assignTo: options.assignTo,\n        requireConsensus: options.requireConsensus,\n        maxAgents: parseInt(options.maxAgents, 10),\n        requiredCapabilities: options.requiredCapabilities || [],\n        metadata: {\n          submittedBy: 'cli',\n          submittedAt: new Date(),\n        },\n      });\n\n      spinner.succeed(formatSuccess('Task submitted successfully!'));\n\n      // Display task details\n      console.log('\\n' + chalk.bold('📋 Task Details:'));\n      console.log(formatInfo(`Task ID: ${task.id}`));\n      console.log(formatInfo(`Description: ${task.description}`));\n      console.log(formatInfo(`Priority: ${getPriorityBadge(task.priority)} ${task.priority}`));\n      console.log(formatInfo(`Strategy: ${task.strategy}`));\n      console.log(formatInfo(`Status: ${task.status}`));\n\n      if (task.assignedAgents.length > 0) {\n        console.log(formatInfo(`Assigned to: ${task.assignedAgents.join(', ')}`));\n      }\n\n      // Watch mode\n      if (options.watch) {\n        console.log('\\n' + chalk.bold('👀 Watching task progress...'));\n        await watchTaskProgress(hiveMind, task.id);\n      } else {\n        console.log(\n          '\\n' + chalk.gray(`Track progress: ruv-swarm hive-mind task --watch ${task.id}`),\n        );\n      }\n    } catch (error) {\n      console.error(formatError('Failed to submit task'));\n      console.error(formatError((error as Error).message));\n      process.exit(1);\n    }\n  });\n\nasync function getActiveSwarmId(): Promise<string | null> {\n  const db = await DatabaseManager.getInstance();\n  return db.getActiveSwarmId();\n}\n\nasync function listTasks(hiveMind: HiveMind) {\n  const tasks = await hiveMind.getTasks();\n\n  if (tasks.length === 0) {\n    console.log(formatInfo('No tasks found.'));\n    return;\n  }\n\n  console.log('\\n' + chalk.bold('📋 Task List:'));\n  const Table = require('cli-table3');\n  const table = new Table({\n    head: ['ID', 'Description', 'Priority', 'Status', 'Progress', 'Agents'],\n    style: { head: ['cyan'] },\n  });\n\n  tasks.forEach((task) => {\n    table.push([\n      task.id.substring(0, 8),\n      task.description.substring(0, 40) + (task.description.length > 40 ? '...' : ''),\n      getPriorityBadge(task.priority),\n      getTaskStatusBadge(task.status),\n      `${task.progress}%`,\n      task.assignedAgents.length,\n    ]);\n  });\n\n  console.log(table.toString());\n}\n\nasync function cancelTask(hiveMind: HiveMind, taskId: string) {\n  const spinner = ora('Cancelling task...').start();\n\n  try {\n    await hiveMind.cancelTask(taskId);\n    spinner.succeed(formatSuccess('Task cancelled successfully!'));\n  } catch (error) {\n    spinner.fail(formatError('Failed to cancel task'));\n    throw error;\n  }\n}\n\nasync function retryTask(hiveMind: HiveMind, taskId: string) {\n  const spinner = ora('Retrying task...').start();\n\n  try {\n    const newTask = await hiveMind.retryTask(taskId);\n    spinner.succeed(formatSuccess('Task retry submitted!'));\n    console.log(formatInfo(`New Task ID: ${newTask.id}`));\n  } catch (error) {\n    spinner.fail(formatError('Failed to retry task'));\n    throw error;\n  }\n}\n\nasync function watchTaskProgress(hiveMind: HiveMind, taskId: string) {\n  let lastProgress = -1;\n  let completed = false;\n\n  const progressBar = require('cli-progress');\n  const bar = new progressBar.SingleBar({\n    format: 'Progress |' + chalk.cyan('{bar}') + '| {percentage}% | {status}',\n    barCompleteChar: '\\u2588',\n    barIncompleteChar: '\\u2591',\n    hideCursor: true,\n  });\n\n  bar.start(100, 0, { status: 'Initializing...' });\n\n  const interval = setInterval(async () => {\n    try {\n      const task = await hiveMind.getTask(taskId);\n\n      if (task.progress !== lastProgress) {\n        lastProgress = task.progress;\n        bar.update(task.progress, { status: task.status });\n      }\n\n      if (task.status === 'completed' || task.status === 'failed') {\n        completed = true;\n        bar.stop();\n        clearInterval(interval);\n\n        console.log('\\n' + chalk.bold('📊 Task Result:'));\n        console.log(formatInfo(`Status: ${task.status}`));\n        console.log(formatInfo(`Duration: ${formatDuration(task.completedAt - task.createdAt)}`));\n\n        if (task.result) {\n          console.log(formatInfo('Result:'));\n          console.log(chalk.gray(JSON.stringify(task.result, null, 2)));\n        }\n\n        if (task.error) {\n          console.log(formatError(`Error: ${task.error}`));\n        }\n      }\n    } catch (error) {\n      clearInterval(interval);\n      bar.stop();\n      console.error(formatError('Error watching task: ' + (error as Error).message));\n    }\n  }, 1000);\n\n  // Handle Ctrl+C\n  process.on('SIGINT', () => {\n    if (!completed) {\n      clearInterval(interval);\n      bar.stop();\n      console.log('\\n' + formatWarning('Task watch cancelled. Task continues in background.'));\n      process.exit(0);\n    }\n  });\n}\n\nfunction getPriorityBadge(priority: string): string {\n  const badges: Record<string, string> = {\n    low: '🟢',\n    medium: '🟡',\n    high: '🟠',\n    critical: '🔴',\n  };\n  return badges[priority] || '⚪';\n}\n\nfunction getTaskStatusBadge(status: string): string {\n  const badges: Record<string, string> = {\n    pending: chalk.gray('⏳'),\n    assigned: chalk.yellow('🔄'),\n    in_progress: chalk.blue('▶️'),\n    completed: chalk.green('✅'),\n    failed: chalk.red('❌'),\n  };\n  return badges[status] || chalk.gray('❓');\n}\n\nfunction formatDuration(ms: number): string {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n"],"names":["Command","chalk","ora","inquirer","HiveMind","formatSuccess","formatError","formatInfo","formatWarning","DatabaseManager","taskCommand","description","argument","option","action","options","swarmId","getActiveSwarmId","Error","hiveMind","load","list","listTasks","cancel","cancelTask","retry","retryTask","interactive","answers","prompt","type","name","message","when","validate","input","length","choices","default","priority","value","strategy","requireConsensus","parseInt","maxAgents","requiredCapabilities","capabilities","spinner","start","dependencies","split","map","id","trim","task","submitTask","assignTo","metadata","submittedBy","submittedAt","Date","succeed","console","log","bold","getPriorityBadge","status","assignedAgents","join","watch","watchTaskProgress","gray","error","process","exit","db","getInstance","tasks","getTasks","Table","require","table","head","style","forEach","push","substring","getTaskStatusBadge","progress","toString","taskId","fail","newTask","lastProgress","completed","progressBar","bar","SingleBar","format","cyan","barCompleteChar","barIncompleteChar","hideCursor","interval","setInterval","getTask","update","stop","clearInterval","formatDuration","completedAt","createdAt","result","JSON","stringify","on","badges","low","medium","high","critical","pending","assigned","yellow","in_progress","blue","green","failed","red","ms","seconds","Math","floor","minutes","hours"],"mappings":"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"}