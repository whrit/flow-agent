{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/init.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Initialization Command\n *\n * Initializes a new Hive Mind swarm with Queen coordination\n * and collective intelligence capabilities.\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { HiveMind } from '../../../hive-mind/core/HiveMind.js';\nimport { HiveMindConfig, SwarmTopology } from '../../../hive-mind/types.js';\nimport { DatabaseManager } from '../../../hive-mind/core/DatabaseManager.js';\nimport { formatSuccess, formatError, formatInfo } from '../../formatter.js';\n\nexport const initCommand = new Command('init')\n  .description('Initialize a new Hive Mind swarm')\n  .option(\n    '-t, --topology <type>',\n    'Swarm topology (mesh, hierarchical, ring, star)',\n    'hierarchical',\n  )\n  .option('-m, --max-agents <number>', 'Maximum agents in swarm', '8')\n  .option('-n, --name <string>', 'Swarm name', 'hive-mind-' + Date.now())\n  .option(\n    '-q, --queen-mode <mode>',\n    'Queen coordination mode (centralized, distributed)',\n    'centralized',\n  )\n  .option('--memory-ttl <seconds>', 'Default memory TTL in seconds', '86400')\n  .option('--consensus-threshold <percent>', 'Consensus threshold percentage', '0.66')\n  .option('--auto-spawn', 'Automatically spawn initial agents', false)\n  .action(async (options) => {\n    const spinner = ora('Initializing Hive Mind...').start();\n\n    try {\n      // Initialize database\n      const db = await DatabaseManager.getInstance();\n      await db.initialize();\n\n      // Create Hive Mind configuration\n      const config: HiveMindConfig = {\n        name: options.name,\n        topology: options.topology as SwarmTopology,\n        maxAgents: parseInt(options.maxAgents, 10),\n        queenMode: options.queenMode,\n        memoryTTL: parseInt(options.memoryTtl, 10),\n        consensusThreshold: parseFloat(options.consensusThreshold),\n        autoSpawn: options.autoSpawn,\n        createdAt: new Date(),\n      };\n\n      // Initialize Hive Mind\n      const hiveMind = new HiveMind(config);\n      const swarmId = await hiveMind.initialize();\n\n      spinner.succeed(formatSuccess('Hive Mind initialized successfully!'));\n\n      console.log('\\n' + chalk.bold('üêù Hive Mind Details:'));\n      console.log(formatInfo(`Swarm ID: ${swarmId}`));\n      console.log(formatInfo(`Name: ${config.name}`));\n      console.log(formatInfo(`Topology: ${config.topology}`));\n      console.log(formatInfo(`Queen Mode: ${config.queenMode}`));\n      console.log(formatInfo(`Max Agents: ${config.maxAgents}`));\n      console.log(formatInfo(`Consensus Threshold: ${config.consensusThreshold * 100}%`));\n\n      if (options.autoSpawn) {\n        console.log('\\n' + chalk.bold('üöÄ Auto-spawning initial agents...'));\n        await hiveMind.autoSpawnAgents();\n        console.log(formatSuccess('Initial agents spawned successfully!'));\n      }\n\n      console.log('\\n' + chalk.bold('üìù Next Steps:'));\n      console.log(formatInfo('1. Spawn agents: ruv-swarm hive-mind spawn <type>'));\n      console.log(formatInfo('2. Submit task: ruv-swarm hive-mind task \"Your task\"'));\n      console.log(formatInfo('3. Check status: ruv-swarm hive-mind status'));\n      console.log(formatInfo('4. Interactive: ruv-swarm hive-mind wizard'));\n    } catch (error) {\n      spinner.fail(formatError('Failed to initialize Hive Mind'));\n      console.error(formatError((error as Error).message));\n      process.exit(1);\n    }\n  });\n"],"names":["Command","chalk","ora","HiveMind","DatabaseManager","formatSuccess","formatError","formatInfo","initCommand","description","option","Date","now","action","options","spinner","start","db","getInstance","initialize","config","name","topology","maxAgents","parseInt","queenMode","memoryTTL","memoryTtl","consensusThreshold","parseFloat","autoSpawn","createdAt","hiveMind","swarmId","succeed","console","log","bold","autoSpawnAgents","error","fail","message","process","exit"],"mappings":";AAQA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,OAAOC,WAAW,QAAQ;AAC1B,OAAOC,SAAS,MAAM;AACtB,SAASC,QAAQ,QAAQ,sCAAsC;AAE/D,SAASC,eAAe,QAAQ,6CAA6C;AAC7E,SAASC,aAAa,EAAEC,WAAW,EAAEC,UAAU,QAAQ,qBAAqB;AAE5E,OAAO,MAAMC,cAAc,IAAIR,QAAQ,QACpCS,WAAW,CAAC,oCACZC,MAAM,CACL,yBACA,mDACA,gBAEDA,MAAM,CAAC,6BAA6B,2BAA2B,KAC/DA,MAAM,CAAC,uBAAuB,cAAc,eAAeC,KAAKC,GAAG,IACnEF,MAAM,CACL,2BACA,sDACA,eAEDA,MAAM,CAAC,0BAA0B,iCAAiC,SAClEA,MAAM,CAAC,mCAAmC,kCAAkC,QAC5EA,MAAM,CAAC,gBAAgB,sCAAsC,OAC7DG,MAAM,CAAC,OAAOC;IACb,MAAMC,UAAUb,IAAI,6BAA6Bc,KAAK;IAEtD,IAAI;QAEF,MAAMC,KAAK,MAAMb,gBAAgBc,WAAW;QAC5C,MAAMD,GAAGE,UAAU;QAGnB,MAAMC,SAAyB;YAC7BC,MAAMP,QAAQO,IAAI;YAClBC,UAAUR,QAAQQ,QAAQ;YAC1BC,WAAWC,SAASV,QAAQS,SAAS,EAAE;YACvCE,WAAWX,QAAQW,SAAS;YAC5BC,WAAWF,SAASV,QAAQa,SAAS,EAAE;YACvCC,oBAAoBC,WAAWf,QAAQc,kBAAkB;YACzDE,WAAWhB,QAAQgB,SAAS;YAC5BC,WAAW,IAAIpB;QACjB;QAGA,MAAMqB,WAAW,IAAI7B,SAASiB;QAC9B,MAAMa,UAAU,MAAMD,SAASb,UAAU;QAEzCJ,QAAQmB,OAAO,CAAC7B,cAAc;QAE9B8B,QAAQC,GAAG,CAAC,OAAOnC,MAAMoC,IAAI,CAAC;QAC9BF,QAAQC,GAAG,CAAC7B,WAAW,CAAC,UAAU,EAAE0B,SAAS;QAC7CE,QAAQC,GAAG,CAAC7B,WAAW,CAAC,MAAM,EAAEa,OAAOC,IAAI,EAAE;QAC7Cc,QAAQC,GAAG,CAAC7B,WAAW,CAAC,UAAU,EAAEa,OAAOE,QAAQ,EAAE;QACrDa,QAAQC,GAAG,CAAC7B,WAAW,CAAC,YAAY,EAAEa,OAAOK,SAAS,EAAE;QACxDU,QAAQC,GAAG,CAAC7B,WAAW,CAAC,YAAY,EAAEa,OAAOG,SAAS,EAAE;QACxDY,QAAQC,GAAG,CAAC7B,WAAW,CAAC,qBAAqB,EAAEa,OAAOQ,kBAAkB,GAAG,IAAI,CAAC,CAAC;QAEjF,IAAId,QAAQgB,SAAS,EAAE;YACrBK,QAAQC,GAAG,CAAC,OAAOnC,MAAMoC,IAAI,CAAC;YAC9B,MAAML,SAASM,eAAe;YAC9BH,QAAQC,GAAG,CAAC/B,cAAc;QAC5B;QAEA8B,QAAQC,GAAG,CAAC,OAAOnC,MAAMoC,IAAI,CAAC;QAC9BF,QAAQC,GAAG,CAAC7B,WAAW;QACvB4B,QAAQC,GAAG,CAAC7B,WAAW;QACvB4B,QAAQC,GAAG,CAAC7B,WAAW;QACvB4B,QAAQC,GAAG,CAAC7B,WAAW;IACzB,EAAE,OAAOgC,OAAO;QACdxB,QAAQyB,IAAI,CAAClC,YAAY;QACzB6B,QAAQI,KAAK,CAACjC,YAAY,AAACiC,MAAgBE,OAAO;QAClDC,QAAQC,IAAI,CAAC;IACf;AACF,GAAG"}