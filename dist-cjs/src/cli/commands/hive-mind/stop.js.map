{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/stop.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Stop Command\n *\n * Stop active swarm sessions and terminate child processes\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { HiveMindSessionManager } from '../../simple-commands/hive-mind/session-manager.js';\nimport inquirer from 'inquirer';\n\nexport const stopCommand = new Command('stop')\n  .description('Stop active hive mind sessions')\n  .option('-s, --session <id>', 'Stop specific session by ID')\n  .option('-a, --all', 'Stop all active sessions')\n  .option('-f, --force', 'Force stop without confirmation')\n  .action(async (options) => {\n    const sessionManager = new HiveMindSessionManager();\n\n    try {\n      if (options.all) {\n        // Stop all active sessions\n        const sessions = await sessionManager.getActiveSessionsWithProcessInfo();\n\n        if (sessions.length === 0) {\n          console.log(chalk.yellow('No active sessions found'));\n          return;\n        }\n\n        if (!options.force) {\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Stop all ${sessions.length} active session(s)?`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            console.log(chalk.gray('Operation cancelled'));\n            return;\n          }\n        }\n\n        for (const session of sessions) {\n          console.log(chalk.cyan(`Stopping session ${session.id}...`));\n          await sessionManager.stopSession(session.id);\n          console.log(chalk.green(`✓ Session ${session.id} stopped`));\n        }\n\n        console.log(chalk.green(`\\n✅ All sessions stopped successfully`));\n      } else if (options.session) {\n        // Stop specific session\n        const sessionId = options.session;\n        const session = await sessionManager.getSession(sessionId);\n\n        if (!session) {\n          console.log(chalk.red(`Session ${sessionId} not found`));\n          return;\n        }\n\n        if ((session as any).status === 'stopped') {\n          console.log(chalk.yellow(`Session ${sessionId} is already stopped`));\n          return;\n        }\n\n        if (!options.force) {\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Stop session ${sessionId} (${(session as any).swarm_name || 'Unknown'})?`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            console.log(chalk.gray('Operation cancelled'));\n            return;\n          }\n        }\n\n        console.log(chalk.cyan(`Stopping session ${sessionId}...`));\n        await sessionManager.stopSession(sessionId);\n        console.log(chalk.green(`✓ Session ${sessionId} stopped successfully`));\n      } else {\n        // Interactive selection\n        const sessions = await sessionManager.getActiveSessionsWithProcessInfo();\n\n        if (sessions.length === 0) {\n          console.log(chalk.yellow('No active sessions found'));\n          return;\n        }\n\n        const { sessionId } = await inquirer.prompt([\n          {\n            type: 'list',\n            name: 'sessionId',\n            message: 'Select session to stop:',\n            choices: sessions.map((s: any) => ({\n              name: `${s.swarm_name} (${s.id}) - ${s.total_processes} process(es)`,\n              value: s.id,\n            })),\n          },\n        ]);\n\n        const { confirm } = await inquirer.prompt([\n          {\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Stop this session?',\n            default: false,\n          },\n        ]);\n\n        if (!confirm) {\n          console.log(chalk.gray('Operation cancelled'));\n          return;\n        }\n\n        console.log(chalk.cyan(`Stopping session ${sessionId}...`));\n        await sessionManager.stopSession(sessionId);\n        console.log(chalk.green(`✓ Session stopped successfully`));\n      }\n\n      // Clean up orphaned processes\n      const cleanedCount = sessionManager.cleanupOrphanedProcesses();\n      if (cleanedCount > 0) {\n        console.log(chalk.blue(`\\nCleaned up ${cleanedCount} orphaned session(s)`));\n      }\n    } catch (error) {\n      console.error(chalk.red('Error stopping session:'), (error as Error).message);\n      process.exit(1);\n    } finally {\n      sessionManager.close();\n    }\n  });\n"],"names":["Command","chalk","HiveMindSessionManager","inquirer","stopCommand","description","option","action","options","sessionManager","all","sessions","getActiveSessionsWithProcessInfo","length","console","log","yellow","force","confirm","prompt","type","name","message","default","gray","session","cyan","id","stopSession","green","sessionId","getSession","red","status","swarm_name","choices","map","s","total_processes","value","cleanedCount","cleanupOrphanedProcesses","blue","error","process","exit","close"],"mappings":"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"}