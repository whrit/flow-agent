{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/ps.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind PS (Process Status) Command\n *\n * Show active sessions and their processes\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { HiveMindSessionManager } from '../../simple-commands/hive-mind/session-manager.js';\nimport Table from 'cli-table3';\n\nexport const psCommand = new Command('ps')\n  .description('Show active hive mind sessions and processes')\n  .option('-a, --all', 'Show all sessions including stopped ones')\n  .option('-v, --verbose', 'Show detailed process information')\n  .action(async (options) => {\n    const sessionManager = new HiveMindSessionManager();\n\n    try {\n      const sessions = options.all\n        ? sessionManager.getActiveSessionsWithProcessInfo()\n        : sessionManager\n            .getActiveSessionsWithProcessInfo()\n            .filter((s: any) => s.status === 'active' || s.status === 'paused');\n\n      if (sessions.length === 0) {\n        console.log(chalk.yellow('No sessions found'));\n        return;\n      }\n\n      // Clean up orphaned processes first\n      const cleanedCount = sessionManager.cleanupOrphanedProcesses();\n      if (cleanedCount > 0) {\n        console.log(chalk.blue(`Cleaned up ${cleanedCount} orphaned session(s)\\n`));\n      }\n\n      // Create table\n      const table = new Table({\n        head: [\n          chalk.cyan('Session ID'),\n          chalk.cyan('Swarm'),\n          chalk.cyan('Status'),\n          chalk.cyan('Parent PID'),\n          chalk.cyan('Child PIDs'),\n          chalk.cyan('Progress'),\n          chalk.cyan('Duration'),\n        ],\n        style: {\n          head: [],\n          border: ['gray'],\n        },\n      });\n\n      for (const session of sessions) {\n        const duration = new Date().getTime() - new Date(session.created_at).getTime();\n        const durationStr = formatDuration(duration);\n\n        const statusColor =\n          session.status === 'active'\n            ? chalk.green\n            : session.status === 'paused'\n              ? chalk.yellow\n              : session.status === 'stopped'\n                ? chalk.red\n                : chalk.gray;\n\n        table.push([\n          session.id.substring(0, 20) + '...',\n          session.swarm_name,\n          statusColor(session.status),\n          session.parent_pid || '-',\n          session.child_pids.length > 0 ? session.child_pids.join(', ') : '-',\n          `${session.completion_percentage}%`,\n          durationStr,\n        ]);\n      }\n\n      console.log(table.toString());\n\n      if (options.verbose) {\n        console.log('\\n' + chalk.bold('Detailed Session Information:'));\n\n        for (const session of sessions) {\n          console.log('\\n' + chalk.cyan(`Session: ${session.id}`));\n          console.log(chalk.gray(`  Objective: ${session.objective || 'N/A'}`));\n          console.log(chalk.gray(`  Created: ${new Date(session.created_at).toLocaleString()}`));\n          console.log(chalk.gray(`  Updated: ${new Date(session.updated_at).toLocaleString()}`));\n\n          if (session.paused_at) {\n            console.log(chalk.gray(`  Paused: ${new Date(session.paused_at).toLocaleString()}`));\n          }\n\n          console.log(chalk.gray(`  Agents: ${session.agent_count || 0}`));\n          console.log(\n            chalk.gray(\n              `  Tasks: ${session.task_count || 0} (${session.completed_tasks || 0} completed)`,\n            ),\n          );\n\n          if (session.child_pids.length > 0) {\n            console.log(chalk.gray(`  Active Processes:`));\n            for (const pid of session.child_pids) {\n              console.log(chalk.gray(`    - PID ${pid}`));\n            }\n          }\n        }\n      }\n\n      // Summary\n      const activeSessions = sessions.filter((s: any) => s.status === 'active').length;\n      const pausedSessions = sessions.filter((s: any) => s.status === 'paused').length;\n      const totalProcesses = sessions.reduce((sum: any, s: any) => sum + s.total_processes, 0);\n\n      console.log('\\n' + chalk.bold('Summary:'));\n      console.log(chalk.gray(`  Active sessions: ${activeSessions}`));\n      console.log(chalk.gray(`  Paused sessions: ${pausedSessions}`));\n      console.log(chalk.gray(`  Total processes: ${totalProcesses}`));\n    } catch (error) {\n      console.error(chalk.red('Error listing sessions:'), (error as Error).message);\n      process.exit(1);\n    } finally {\n      sessionManager.close();\n    }\n  });\n\nfunction formatDuration(ms: number) {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n"],"names":["Command","chalk","HiveMindSessionManager","Table","psCommand","description","option","action","options","sessionManager","sessions","all","getActiveSessionsWithProcessInfo","filter","s","status","length","console","log","yellow","cleanedCount","cleanupOrphanedProcesses","blue","table","head","cyan","style","border","session","duration","Date","getTime","created_at","durationStr","formatDuration","statusColor","green","red","gray","push","id","substring","swarm_name","parent_pid","child_pids","join","completion_percentage","toString","verbose","bold","objective","toLocaleString","updated_at","paused_at","agent_count","task_count","completed_tasks","pid","activeSessions","pausedSessions","totalProcesses","reduce","sum","total_processes","error","message","process","exit","close","ms","seconds","Math","floor","minutes","hours"],"mappings":"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"}