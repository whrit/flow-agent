{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/optimize-memory.ts"],"sourcesContent":["/**\n * Memory Optimization Command\n *\n * Provides comprehensive memory optimization tools for the Hive Mind system.\n */\n\nimport { Command } from '../commander-fix.js';\nimport { CollectiveMemory, MemoryOptimizer } from '../../simple-commands/hive-mind/memory.js';\nimport { MemoryMonitor } from '../../../hive-mind/core/MemoryMonitor.js';\nimport { Memory } from '../../../hive-mind/core/Memory.js';\nimport { DatabaseManager } from '../../../hive-mind/core/DatabaseManager.js';\nimport chalk from 'chalk';\n\nexport function createOptimizeMemoryCommand(): Command {\n  const command = new Command('optimize-memory')\n    .description('Optimize memory usage and performance for Hive Mind')\n    .option('-a, --analyze', 'Analyze current memory performance')\n    .option('-o, --optimize', 'Run comprehensive memory optimization')\n    .option('-m, --monitor', 'Start memory monitoring dashboard')\n    .option('-r, --report', 'Generate detailed memory report')\n    .option('-c, --cleanup', 'Perform memory cleanup operations')\n    .option('--cache-size <size>', 'Set cache size (entries)', '10000')\n    .option('--cache-memory <mb>', 'Set cache memory limit (MB)', '100')\n    .option('--compression-threshold <bytes>', 'Set compression threshold', '10000')\n    .action(async (options) => {\n      try {\n        console.log(chalk.blue.bold('\\nüß† Hive Mind Memory Optimization System\\n'));\n\n        if (options.analyze) {\n          await analyzeMemoryPerformance();\n        }\n\n        if (options.optimize) {\n          await runMemoryOptimization(options);\n        }\n\n        if (options.monitor) {\n          await startMemoryMonitoring();\n        }\n\n        if (options.report) {\n          await generateMemoryReport();\n        }\n\n        if (options.cleanup) {\n          await performMemoryCleanup();\n        }\n\n        if (\n          !options.analyze &&\n          !options.optimize &&\n          !options.monitor &&\n          !options.report &&\n          !options.cleanup\n        ) {\n          await showMemoryOverview();\n        }\n      } catch (error) {\n        console.error(chalk.red('‚ùå Memory optimization failed:'), (error as Error).message);\n        process.exit(1);\n      }\n    });\n\n  return command;\n}\n\n/**\n * Analyze current memory performance\n */\nasync function analyzeMemoryPerformance(): Promise<void> {\n  console.log(chalk.yellow('üîç Analyzing memory performance...\\n'));\n\n  try {\n    // Initialize memory systems\n    const memory = new Memory('hive-mind-optimizer', {\n      cacheSize: 10000,\n      cacheMemoryMB: 100,\n      enablePooling: true,\n      compressionThreshold: 10000,\n    });\n\n    await memory.initialize();\n\n    // Get comprehensive analytics\n    const analytics = memory.getAdvancedAnalytics();\n    const healthCheck = await memory.healthCheck();\n\n    // Display results\n    console.log(chalk.green.bold('üìä Memory Performance Analysis\\n'));\n\n    // Cache Performance\n    console.log(chalk.cyan('üóÑÔ∏è Cache Performance:'));\n    console.log(`   Hit Rate: ${chalk.bold(analytics.cache.hitRate?.toFixed(1) || '0')}%`);\n    console.log(\n      `   Memory Usage: ${chalk.bold(analytics.cache.memoryUsage?.toFixed(1) || '0')} MB`,\n    );\n    console.log(\n      `   Utilization: ${chalk.bold(analytics.cache.utilizationPercent?.toFixed(1) || '0')}%`,\n    );\n    console.log(`   Evictions: ${chalk.bold(analytics.cache.evictions || 0)}\\n`);\n\n    // Performance Metrics\n    console.log(chalk.cyan('‚ö° Performance Metrics:'));\n    for (const [operation, stats] of Object.entries(analytics.performance)) {\n      if (typeof stats === 'object' && stats.avg) {\n        console.log(\n          `   ${operation}: ${chalk.bold(stats.avg.toFixed(2))}ms avg (${stats.count} samples)`,\n        );\n      }\n    }\n    console.log('');\n\n    // Object Pools\n    if (analytics.pools) {\n      console.log(chalk.cyan('üîÑ Object Pools:'));\n      for (const [name, stats] of Object.entries(analytics.pools)) {\n        if (typeof stats === 'object' && stats.reuseRate !== undefined) {\n          console.log(`   ${name}: ${chalk.bold(stats.reuseRate.toFixed(1))}% reuse rate`);\n        }\n      }\n      console.log('');\n    }\n\n    // Health Status\n    console.log(chalk.cyan('üè• Health Status:'));\n    const statusColor =\n      healthCheck.status === 'healthy'\n        ? 'green'\n        : healthCheck.status === 'warning'\n          ? 'yellow'\n          : 'red';\n    console.log(`   Overall: ${chalk[statusColor].bold(healthCheck.status.toUpperCase())}`);\n    console.log(`   Score: ${chalk.bold(healthCheck.score)}/100`);\n\n    if (healthCheck.issues.length > 0) {\n      console.log(`   Issues: ${chalk.red(healthCheck.issues.length)}`);\n      healthCheck.issues.forEach((issue) => {\n        console.log(`     ‚Ä¢ ${chalk.red(issue)}`);\n      });\n    }\n\n    if (healthCheck.recommendations.length > 0) {\n      console.log(`   Recommendations:`);\n      healthCheck.recommendations.forEach((rec) => {\n        console.log(`     ‚Ä¢ ${chalk.blue(rec)}`);\n      });\n    }\n\n    await memory.shutdown();\n  } catch (error) {\n    console.error(chalk.red('‚ùå Analysis failed:'), (error as Error).message);\n  }\n}\n\n/**\n * Run comprehensive memory optimization\n */\nasync function runMemoryOptimization(options: any): Promise<void> {\n  console.log(chalk.yellow('‚ö° Running memory optimization...\\n'));\n\n  try {\n    // Initialize optimized memory system\n    const memory = new Memory('hive-mind-optimizer', {\n      cacheSize: parseInt(options.cacheSize),\n      cacheMemoryMB: parseInt(options.cacheMemory),\n      enablePooling: true,\n      compressionThreshold: parseInt(options.compressionThreshold),\n      batchSize: 100,\n    });\n\n    await memory.initialize();\n\n    // Get baseline metrics\n    const baselineAnalytics = memory.getAdvancedAnalytics();\n    const baselineHealth = await memory.healthCheck();\n\n    console.log(chalk.cyan('üìã Baseline Metrics:'));\n    console.log(`   Cache Hit Rate: ${baselineAnalytics.cache.hitRate?.toFixed(1) || '0'}%`);\n    console.log(`   Health Score: ${baselineHealth.score}/100\\n`);\n\n    // Run optimization steps\n    console.log(chalk.yellow('üîß Optimization Steps:\\n'));\n\n    // Step 1: Cache optimization\n    console.log(chalk.blue('1. Optimizing cache configuration...'));\n    // Cache is already optimized in constructor\n    console.log(chalk.green('   ‚úì Cache configuration optimized\\n'));\n\n    // Step 2: Database optimization\n    console.log(chalk.blue('2. Optimizing database performance...'));\n    const db = await DatabaseManager.getInstance();\n    const dbAnalytics = db.getDatabaseAnalytics();\n\n    if (dbAnalytics.fragmentation > 20) {\n      console.log(chalk.yellow('   ‚ö†Ô∏è High database fragmentation detected'));\n      console.log(chalk.blue('   Running database optimization...'));\n      // Database optimization would happen here\n    }\n    console.log(chalk.green('   ‚úì Database optimization completed\\n'));\n\n    // Step 3: Memory cleanup\n    console.log(chalk.blue('3. Performing memory cleanup...'));\n    await memory.compress();\n    console.log(chalk.green('   ‚úì Memory compression completed\\n'));\n\n    // Step 4: Pattern analysis\n    console.log(chalk.blue('4. Analyzing access patterns...'));\n    const patterns = await memory.learnPatterns();\n    console.log(chalk.green(`   ‚úì Learned ${patterns.length} access patterns\\n`));\n\n    // Get final metrics\n    const finalAnalytics = memory.getAdvancedAnalytics();\n    const finalHealth = await memory.healthCheck();\n\n    // Show improvement\n    console.log(chalk.green.bold('üìà Optimization Results:\\n'));\n\n    const hitRateImprovement =\n      (finalAnalytics.cache.hitRate || 0) - (baselineAnalytics.cache.hitRate || 0);\n    const healthImprovement = finalHealth.score - baselineHealth.score;\n\n    console.log(chalk.cyan('Performance Improvements:'));\n    console.log(\n      `   Cache Hit Rate: ${hitRateImprovement >= 0 ? '+' : ''}${hitRateImprovement.toFixed(1)}%`,\n    );\n    console.log(\n      `   Health Score: ${healthImprovement >= 0 ? '+' : ''}${healthImprovement.toFixed(1)} points`,\n    );\n\n    if (hitRateImprovement > 0 || healthImprovement > 0) {\n      console.log(chalk.green('\\n‚úÖ Memory optimization completed successfully!'));\n    } else {\n      console.log(chalk.yellow('\\n‚ö†Ô∏è System was already well-optimized'));\n    }\n\n    await memory.shutdown();\n  } catch (error) {\n    console.error(chalk.red('‚ùå Optimization failed:'), (error as Error).message);\n  }\n}\n\n/**\n * Start interactive memory monitoring dashboard\n */\nasync function startMemoryMonitoring(): Promise<void> {\n  console.log(chalk.yellow('üìä Starting memory monitoring dashboard...\\n'));\n\n  try {\n    // Initialize systems\n    const memory = new Memory('hive-mind-monitor');\n    const db = await DatabaseManager.getInstance();\n    await memory.initialize();\n\n    const monitor = new MemoryMonitor(memory, db);\n\n    // Set up event listeners\n    monitor.on('alert', (alert) => {\n      const color =\n        alert.level === 'critical' ? 'red' : alert.level === 'warning' ? 'yellow' : 'blue';\n      console.log(chalk[color](`üö® ${alert.level.toUpperCase()}: ${alert.message}`));\n    });\n\n    monitor.on('metrics:collected', (data) => {\n      // Clear screen and show current metrics\n      console.clear();\n      console.log(chalk.blue.bold('üß† Hive Mind Memory Monitor\\n'));\n\n      const { metrics } = data;\n      console.log(chalk.cyan('üìä Real-time Metrics:'));\n      console.log(`   Cache Hit Rate: ${chalk.bold(metrics.cacheHitRate.toFixed(1))}%`);\n      console.log(`   Avg Query Time: ${chalk.bold(metrics.avgQueryTime.toFixed(1))}ms`);\n      console.log(`   Memory Utilization: ${chalk.bold(metrics.memoryUtilization.toFixed(1))}%`);\n      console.log(`   Pool Efficiency: ${chalk.bold(metrics.poolEfficiency.toFixed(1))}%`);\n      console.log(`   DB Fragmentation: ${chalk.bold(metrics.dbFragmentation.toFixed(1))}%`);\n      console.log(`   Last Updated: ${chalk.gray(new Date().toLocaleTimeString())}\\n`);\n\n      console.log(chalk.gray('Press Ctrl+C to stop monitoring...'));\n    });\n\n    monitor.on('health:analyzed', (report) => {\n      if (report.overall.status !== 'good' && report.overall.status !== 'excellent') {\n        console.log(chalk.yellow(`\\n‚ö†Ô∏è Health Status: ${report.overall.status}`));\n        console.log(`   ${report.overall.summary}`);\n      }\n    });\n\n    // Start monitoring\n    await monitor.start();\n\n    // Handle shutdown\n    process.on('SIGINT', async () => {\n      console.log(chalk.yellow('\\n\\nüõë Shutting down monitor...'));\n      monitor.stop();\n      await memory.shutdown();\n      process.exit(0);\n    });\n\n    console.log(chalk.green('‚úÖ Memory monitoring started!'));\n    console.log(chalk.gray('Real-time metrics will appear below...\\n'));\n  } catch (error) {\n    console.error(chalk.red('‚ùå Monitoring startup failed:'), (error as Error).message);\n  }\n}\n\n/**\n * Generate detailed memory report\n */\nasync function generateMemoryReport(): Promise<void> {\n  console.log(chalk.yellow('üìÑ Generating detailed memory report...\\n'));\n\n  try {\n    // Initialize systems\n    const memory = new Memory('hive-mind-reporter');\n    const db = await DatabaseManager.getInstance();\n    await memory.initialize();\n\n    const monitor = new MemoryMonitor(memory, db);\n\n    // Generate comprehensive report\n    const report = await monitor.generateDetailedReport();\n    const analytics = memory.getAdvancedAnalytics();\n\n    console.log(chalk.green.bold('üìä Comprehensive Memory Report\\n'));\n\n    // Executive Summary\n    console.log(chalk.cyan.bold('üéØ Executive Summary:'));\n    console.log(`   Overall Status: ${getStatusBadge(report.overall.status)}`);\n    console.log(`   Health Score: ${chalk.bold(report.overall.score)}/100`);\n    console.log(`   ${report.overall.summary}\\n`);\n\n    // Key Metrics\n    console.log(chalk.cyan.bold('üìà Key Performance Metrics:'));\n    console.log(`   Cache Hit Rate: ${formatMetric(report.metrics.cacheHitRate, '%', 70)}`);\n    console.log(\n      `   Average Query Time: ${formatMetric(report.metrics.avgQueryTime, 'ms', 50, true)}`,\n    );\n    console.log(\n      `   Memory Utilization: ${formatMetric(report.metrics.memoryUtilization, '%', 80)}`,\n    );\n    console.log(`   Pool Efficiency: ${formatMetric(report.metrics.poolEfficiency, '%', 50)}`);\n    console.log(\n      `   Compression Ratio: ${formatMetric(report.metrics.compressionRatio * 100, '%', 60)}\\n`,\n    );\n\n    // Trends Analysis\n    console.log(chalk.cyan.bold('üìä Performance Trends:'));\n    console.log(`   Performance: ${getTrendIndicator(report.trends.performance)}`);\n    console.log(`   Memory Usage: ${getTrendIndicator(report.trends.memoryUsage)}`);\n    console.log(`   Cache Efficiency: ${getTrendIndicator(report.trends.cacheEfficiency)}\\n`);\n\n    // Active Alerts\n    if (report.alerts.length > 0) {\n      console.log(chalk.cyan.bold('üö® Active Alerts:'));\n      report.alerts.forEach((alert) => {\n        const color =\n          alert.level === 'critical' ? 'red' : alert.level === 'warning' ? 'yellow' : 'blue';\n        console.log(`   ${chalk[color]('‚óè')} ${alert.message}`);\n      });\n      console.log('');\n    }\n\n    // Optimization Suggestions\n    if (report.suggestions.length > 0) {\n      console.log(chalk.cyan.bold('üí° Optimization Suggestions:'));\n      report.suggestions.forEach((suggestion, index) => {\n        const priorityColor =\n          suggestion.priority === 'critical'\n            ? 'red'\n            : suggestion.priority === 'high'\n              ? 'yellow'\n              : suggestion.priority === 'medium'\n                ? 'blue'\n                : 'gray';\n        console.log(`   ${index + 1}. ${chalk[priorityColor].bold(suggestion.title)}`);\n        console.log(`      ${suggestion.description}`);\n        console.log(`      Impact: ${chalk.green(suggestion.estimatedImpact)}`);\n        console.log(`      Effort: ${chalk.blue(suggestion.effort)}\\n`);\n      });\n    }\n\n    // Resource Utilization\n    console.log(chalk.cyan.bold('üíæ Resource Utilization:'));\n    console.log(`   Cache Memory: ${(analytics.cache.memoryUsage / 1024 / 1024).toFixed(1)} MB`);\n    console.log(`   Cache Entries: ${analytics.cache.size || 0}`);\n    console.log(`   Access Patterns: ${analytics.accessPatterns.total || 0} tracked\\n`);\n\n    // Recommendations\n    console.log(chalk.cyan.bold('üéØ Immediate Actions Recommended:'));\n    if (report.overall.score < 70) {\n      console.log(`   ‚Ä¢ ${chalk.red('Run memory optimization immediately')}`);\n    }\n    if (report.metrics.cacheHitRate < 50) {\n      console.log(`   ‚Ä¢ ${chalk.yellow('Increase cache size')}`);\n    }\n    if (report.metrics.avgQueryTime > 100) {\n      console.log(`   ‚Ä¢ ${chalk.yellow('Optimize database queries')}`);\n    }\n    if (report.alerts.filter((a) => a.level === 'critical').length > 0) {\n      console.log(`   ‚Ä¢ ${chalk.red('Address critical alerts immediately')}`);\n    }\n\n    console.log(chalk.green('\\n‚úÖ Report generation completed!'));\n\n    await memory.shutdown();\n  } catch (error) {\n    console.error(chalk.red('‚ùå Report generation failed:'), (error as Error).message);\n  }\n}\n\n/**\n * Perform memory cleanup operations\n */\nasync function performMemoryCleanup(): Promise<void> {\n  console.log(chalk.yellow('üßπ Performing memory cleanup...\\n'));\n\n  try {\n    const memory = new Memory('hive-mind-cleaner');\n    await memory.initialize();\n\n    console.log(chalk.blue('1. Cleaning expired entries...'));\n    // Cleanup would happen automatically through memory management\n\n    console.log(chalk.blue('2. Compressing old data...'));\n    await memory.compress();\n\n    console.log(chalk.blue('3. Optimizing cache...'));\n    // Cache optimization happens automatically\n\n    console.log(chalk.blue('4. Analyzing patterns...'));\n    const patterns = await memory.learnPatterns();\n\n    console.log(chalk.green(`‚úÖ Cleanup completed!`));\n    console.log(`   ‚Ä¢ Learned ${patterns.length} patterns`);\n    console.log(`   ‚Ä¢ Cache optimized`);\n    console.log(`   ‚Ä¢ Memory compressed\\n`);\n\n    await memory.shutdown();\n  } catch (error) {\n    console.error(chalk.red('‚ùå Cleanup failed:'), (error as Error).message);\n  }\n}\n\n/**\n * Show memory system overview\n */\nasync function showMemoryOverview(): Promise<void> {\n  console.log(chalk.cyan('Welcome to the Hive Mind Memory Optimization System!\\n'));\n\n  console.log('Available commands:');\n  console.log(`  ${chalk.green('--analyze')}     Analyze current memory performance`);\n  console.log(`  ${chalk.green('--optimize')}    Run comprehensive optimization`);\n  console.log(`  ${chalk.green('--monitor')}     Start real-time monitoring dashboard`);\n  console.log(`  ${chalk.green('--report')}      Generate detailed performance report`);\n  console.log(`  ${chalk.green('--cleanup')}     Perform memory cleanup operations\\n`);\n\n  console.log('Configuration options:');\n  console.log(`  ${chalk.blue('--cache-size')}         Set cache size (default: 10000)`);\n  console.log(\n    `  ${chalk.blue('--cache-memory')}       Set cache memory limit in MB (default: 100)`,\n  );\n  console.log(\n    `  ${chalk.blue('--compression-threshold')} Set compression threshold in bytes (default: 10000)\\n`,\n  );\n\n  console.log(chalk.yellow('üí° Quick start: Run with --analyze to see current performance'));\n}\n\n/**\n * Helper functions\n */\n\nfunction getStatusBadge(status: string): string {\n  const colors: Record<string, string> = {\n    excellent: 'green',\n    good: 'cyan',\n    fair: 'yellow',\n    poor: 'red',\n    critical: 'red',\n  };\n  const color = colors[status] || 'gray';\n  return (chalk as any)[color].bold(status.toUpperCase());\n}\n\nfunction formatMetric(value: number, unit: string, threshold: number, inverse = false): string {\n  const good = inverse ? value <= threshold : value >= threshold;\n  const color = good ? 'green' : value >= threshold * 0.8 ? 'yellow' : 'red';\n  return chalk[color].bold(`${value.toFixed(1)}${unit}`);\n}\n\nfunction getTrendIndicator(trend: string): string {\n  const indicators: Record<string, string> = {\n    improving: chalk.green('üìà Improving'),\n    stable: chalk.blue('‚û°Ô∏è Stable'),\n    degrading: chalk.red('üìâ Degrading'),\n    increasing: chalk.red('üìà Increasing'),\n    decreasing: chalk.green('üìâ Decreasing'),\n  };\n  return indicators[trend] || chalk.gray('‚ùì Unknown');\n}\n"],"names":["Command","MemoryMonitor","Memory","DatabaseManager","chalk","createOptimizeMemoryCommand","command","description","option","action","options","console","log","blue","bold","analyze","analyzeMemoryPerformance","optimize","runMemoryOptimization","monitor","startMemoryMonitoring","report","generateMemoryReport","cleanup","performMemoryCleanup","showMemoryOverview","error","red","message","process","exit","yellow","memory","cacheSize","cacheMemoryMB","enablePooling","compressionThreshold","initialize","analytics","getAdvancedAnalytics","healthCheck","green","cyan","cache","hitRate","toFixed","memoryUsage","utilizationPercent","evictions","operation","stats","Object","entries","performance","avg","count","pools","name","reuseRate","undefined","statusColor","status","toUpperCase","score","issues","length","forEach","issue","recommendations","rec","shutdown","parseInt","cacheMemory","batchSize","baselineAnalytics","baselineHealth","db","getInstance","dbAnalytics","getDatabaseAnalytics","fragmentation","compress","patterns","learnPatterns","finalAnalytics","finalHealth","hitRateImprovement","healthImprovement","on","alert","color","level","data","clear","metrics","cacheHitRate","avgQueryTime","memoryUtilization","poolEfficiency","dbFragmentation","gray","Date","toLocaleTimeString","overall","summary","start","stop","generateDetailedReport","getStatusBadge","formatMetric","compressionRatio","getTrendIndicator","trends","cacheEfficiency","alerts","suggestions","suggestion","index","priorityColor","priority","title","estimatedImpact","effort","size","accessPatterns","total","filter","a","colors","excellent","good","fair","poor","critical","value","unit","threshold","inverse","trend","indicators","improving","stable","degrading","increasing","decreasing"],"mappings":"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"}