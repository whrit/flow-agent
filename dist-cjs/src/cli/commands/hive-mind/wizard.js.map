{"version":3,"sources":["../../../../../src/cli/commands/hive-mind/wizard.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Hive Mind Interactive Wizard\n *\n * Interactive setup and management wizard for Hive Mind swarms\n * with guided workflows and visual feedback.\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport figlet from 'figlet';\nimport gradient from 'gradient-string';\nimport { HiveMind } from '../../../hive-mind/core/HiveMind.js';\nimport { DatabaseManager } from '../../../hive-mind/core/DatabaseManager.js';\nimport { formatSuccess, formatError, formatInfo, formatWarning } from '../../formatter.js';\n\ntype WizardAction =\n  | 'create_swarm'\n  | 'manage_agents'\n  | 'submit_task'\n  | 'view_status'\n  | 'configure_memory'\n  | 'run_simulation'\n  | 'export_data'\n  | 'switch_swarm'\n  | 'exit';\n\nexport const wizardCommand = new Command('wizard')\n  .description('Interactive Hive Mind setup and management wizard')\n  .option('--skip-intro', 'Skip the intro animation', false)\n  .action(async (options) => {\n    try {\n      // Show intro\n      if (!options.skipIntro) {\n        await showIntro();\n      }\n\n      // Main wizard loop\n      let exit = false;\n      while (!exit) {\n        const action = await selectAction();\n\n        switch (action) {\n          case 'create_swarm':\n            await createSwarmWizard();\n            break;\n          case 'manage_agents':\n            await manageAgentsWizard();\n            break;\n          case 'submit_task':\n            await submitTaskWizard();\n            break;\n          case 'view_status':\n            await viewStatusWizard();\n            break;\n          case 'configure_memory':\n            await configureMemoryWizard();\n            break;\n          case 'run_simulation':\n            await runSimulationWizard();\n            break;\n          case 'export_data':\n            await exportDataWizard();\n            break;\n          case 'switch_swarm':\n            await switchSwarmWizard();\n            break;\n          case 'exit':\n            exit = true;\n            break;\n        }\n\n        if (!exit) {\n          await inquirer\n            .prompt([\n              {\n                type: 'confirm',\n                name: 'continue',\n                message: 'Continue with another action?',\n                default: true,\n              },\n            ])\n            .then((answers) => {\n              exit = !answers.continue;\n            });\n        }\n      }\n\n      console.log('\\n' + chalk.bold.yellow('👋 Thank you for using Hive Mind!'));\n    } catch (error) {\n      console.error(formatError('Wizard error: ' + (error as Error).message));\n      process.exit(1);\n    }\n  });\n\nasync function showIntro() {\n  console.clear();\n  const title = figlet.textSync('Hive Mind', {\n    font: 'Big',\n    horizontalLayout: 'default',\n    verticalLayout: 'default',\n  });\n\n  console.log(gradient.rainbow(title));\n  console.log(chalk.bold.yellow('\\n🐝 Welcome to the Hive Mind Interactive Wizard! 🐝\\n'));\n  console.log(chalk.gray('Collective intelligence for autonomous task orchestration\\n'));\n\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nasync function selectAction(): Promise<WizardAction> {\n  const db = await DatabaseManager.getInstance();\n  const activeSwarm = await db.getActiveSwarmId();\n\n  console.log('\\n' + chalk.bold('🎯 What would you like to do?'));\n  if (activeSwarm) {\n    console.log(chalk.gray(`Active swarm: ${activeSwarm}`));\n  }\n\n  const { action } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'action',\n      message: 'Select an action:',\n      choices: [\n        { name: '🆕 Create New Swarm', value: 'create_swarm' },\n        { name: '🤖 Manage Agents', value: 'manage_agents', disabled: !activeSwarm },\n        { name: '📋 Submit Task', value: 'submit_task', disabled: !activeSwarm },\n        { name: '📊 View Status', value: 'view_status', disabled: !activeSwarm },\n        { name: '💾 Configure Memory', value: 'configure_memory', disabled: !activeSwarm },\n        { name: '🎮 Run Simulation', value: 'run_simulation', disabled: !activeSwarm },\n        { name: '📤 Export Data', value: 'export_data', disabled: !activeSwarm },\n        { name: '🔄 Switch Swarm', value: 'switch_swarm' },\n        new inquirer.Separator(),\n        { name: '🚪 Exit', value: 'exit' },\n      ],\n    },\n  ]);\n\n  return action;\n}\n\nasync function createSwarmWizard() {\n  console.log('\\n' + chalk.bold('🆕 Create New Hive Mind Swarm'));\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Swarm name:',\n      default: `hive-mind-${Date.now()}`,\n      validate: (input) => input.length > 0 || 'Name is required',\n    },\n    {\n      type: 'list',\n      name: 'topology',\n      message: 'Select swarm topology:',\n      choices: [\n        { name: '🏛️ Hierarchical - Queen-led with clear command structure', value: 'hierarchical' },\n        { name: '🕸️ Mesh - Fully connected peer-to-peer network', value: 'mesh' },\n        { name: '🔄 Ring - Circular communication pattern', value: 'ring' },\n        { name: '⭐ Star - Central hub with radiating connections', value: 'star' },\n      ],\n    },\n    {\n      type: 'list',\n      name: 'queenMode',\n      message: 'Queen coordination mode:',\n      choices: [\n        { name: '👑 Centralized - Single Queen controls all decisions', value: 'centralized' },\n        { name: '🤝 Distributed - Multiple Queens share leadership', value: 'distributed' },\n      ],\n    },\n    {\n      type: 'number',\n      name: 'maxAgents',\n      message: 'Maximum number of agents:',\n      default: 8,\n      validate: (input) => (input > 0 && input <= 100) || 'Must be between 1 and 100',\n    },\n    {\n      type: 'number',\n      name: 'consensusThreshold',\n      message: 'Consensus threshold (0.5 - 1.0):',\n      default: 0.66,\n      validate: (input) => (input >= 0.5 && input <= 1.0) || 'Must be between 0.5 and 1.0',\n    },\n    {\n      type: 'confirm',\n      name: 'autoSpawn',\n      message: 'Auto-spawn initial agents?',\n      default: true,\n    },\n  ]);\n\n  // Advanced options\n  const { showAdvanced } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'showAdvanced',\n      message: 'Configure advanced options?',\n      default: false,\n    },\n  ]);\n\n  if (showAdvanced) {\n    const advanced = await inquirer.prompt([\n      {\n        type: 'number',\n        name: 'memoryTTL',\n        message: 'Default memory TTL (seconds):',\n        default: 86400,\n      },\n      {\n        type: 'checkbox',\n        name: 'enabledFeatures',\n        message: 'Enable features:',\n        choices: [\n          { name: 'Neural Learning', value: 'neural', checked: true },\n          { name: 'Performance Monitoring', value: 'monitoring', checked: true },\n          { name: 'Auto-scaling', value: 'autoscale', checked: false },\n          { name: 'Fault Tolerance', value: 'faultTolerance', checked: true },\n          { name: 'Predictive Task Assignment', value: 'predictive', checked: false },\n        ],\n      },\n    ]);\n\n    Object.assign(answers, advanced);\n  }\n\n  // Create swarm\n  const spinner = require('ora')('Creating Hive Mind swarm...').start();\n\n  try {\n    const hiveMind = new HiveMind({\n      name: answers.name,\n      topology: answers.topology,\n      maxAgents: answers.maxAgents,\n      queenMode: answers.queenMode,\n      memoryTTL: answers.memoryTTL || 86400,\n      consensusThreshold: answers.consensusThreshold,\n      autoSpawn: answers.autoSpawn,\n      enabledFeatures: answers.enabledFeatures || ['neural', 'monitoring', 'faultTolerance'],\n      createdAt: new Date(),\n    });\n\n    const swarmId = await hiveMind.initialize();\n\n    spinner.succeed(formatSuccess('Hive Mind created successfully!'));\n    console.log(formatInfo(`Swarm ID: ${swarmId}`));\n\n    if (answers.autoSpawn) {\n      const agents = await hiveMind.autoSpawnAgents();\n      console.log(formatSuccess(`Spawned ${agents.length} initial agents`));\n    }\n  } catch (error) {\n    spinner.fail(formatError('Failed to create swarm'));\n    throw error;\n  }\n}\n\nasync function manageAgentsWizard() {\n  console.log('\\n' + chalk.bold('🤖 Manage Agents'));\n\n  const { action } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'action',\n      message: 'What would you like to do?',\n      choices: [\n        { name: '➕ Spawn New Agent', value: 'spawn' },\n        { name: '📊 View Agent List', value: 'list' },\n        { name: '🔧 Modify Agent', value: 'modify' },\n        { name: '🗑️ Remove Agent', value: 'remove' },\n        { name: '🔄 Rebalance Agents', value: 'rebalance' },\n      ],\n    },\n  ]);\n\n  const db = await DatabaseManager.getInstance();\n  const swarmId = await db.getActiveSwarmId();\n  const hiveMind = await HiveMind.load(swarmId!);\n\n  switch (action) {\n    case 'spawn':\n      await spawnAgentInteractive(hiveMind);\n      break;\n    case 'list':\n      await listAgentsInteractive(hiveMind);\n      break;\n    case 'modify':\n      await modifyAgentInteractive(hiveMind);\n      break;\n    case 'remove':\n      await removeAgentInteractive(hiveMind);\n      break;\n    case 'rebalance':\n      await rebalanceAgentsInteractive(hiveMind);\n      break;\n  }\n}\n\nasync function spawnAgentInteractive(hiveMind: HiveMind) {\n  const agentTypes = [\n    { name: '🎯 Coordinator - Task management and delegation', value: 'coordinator' },\n    { name: '🔬 Researcher - Information gathering and analysis', value: 'researcher' },\n    { name: '💻 Coder - Code generation and implementation', value: 'coder' },\n    { name: '📊 Analyst - Data analysis and insights', value: 'analyst' },\n    { name: '🏗️ Architect - System design and planning', value: 'architect' },\n    { name: '🧪 Tester - Quality assurance and testing', value: 'tester' },\n    { name: '👁️ Reviewer - Code and design review', value: 'reviewer' },\n    { name: '⚡ Optimizer - Performance optimization', value: 'optimizer' },\n    { name: '📝 Documenter - Documentation generation', value: 'documenter' },\n    { name: '📡 Monitor - System monitoring and alerts', value: 'monitor' },\n    { name: '🎨 Specialist - Custom specialized agent', value: 'specialist' },\n  ];\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'type',\n      message: 'Select agent type:',\n      choices: agentTypes,\n    },\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Agent name (optional):',\n      default: (answers: any) => `${answers.type}-${Date.now()}`,\n    },\n    {\n      type: 'number',\n      name: 'count',\n      message: 'How many agents to spawn?',\n      default: 1,\n      validate: (input) => (input > 0 && input <= 10) || 'Must be between 1 and 10',\n    },\n  ]);\n\n  const spinner = require('ora')(`Spawning ${answers.count} ${answers.type} agent(s)...`).start();\n\n  try {\n    const agents = [];\n    for (let i = 0; i < answers.count; i++) {\n      const agent = await hiveMind.spawnAgent({\n        type: answers.type,\n        name: answers.count > 1 ? `${answers.name}-${i}` : answers.name,\n      });\n      agents.push(agent);\n    }\n\n    spinner.succeed(formatSuccess(`Spawned ${agents.length} agent(s) successfully!`));\n  } catch (error) {\n    spinner.fail(formatError('Failed to spawn agents'));\n    throw error;\n  }\n}\n\nasync function submitTaskWizard() {\n  console.log('\\n' + chalk.bold('📋 Submit Task to Hive Mind'));\n\n  const db = await DatabaseManager.getInstance();\n  const swarmId = await db.getActiveSwarmId();\n  const hiveMind = await HiveMind.load(swarmId!);\n\n  const templates = [\n    { name: '🔍 Research Task', value: 'research' },\n    { name: '💻 Development Task', value: 'development' },\n    { name: '📊 Analysis Task', value: 'analysis' },\n    { name: '🧪 Testing Task', value: 'testing' },\n    { name: '📝 Documentation Task', value: 'documentation' },\n    { name: '✏️ Custom Task', value: 'custom' },\n  ];\n\n  const { template } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'template',\n      message: 'Select task template:',\n      choices: templates,\n    },\n  ]);\n\n  let taskDescription = '';\n  let taskConfig: any = {};\n\n  if (template === 'custom') {\n    const answers = await inquirer.prompt([\n      {\n        type: 'editor',\n        name: 'description',\n        message: 'Enter task description:',\n      },\n    ]);\n    taskDescription = answers.description;\n  } else {\n    // Use predefined templates\n    const templates = {\n      research: {\n        prompt: 'What would you like to research?',\n        prefix: 'Research and analyze: ',\n      },\n      development: {\n        prompt: 'What would you like to develop?',\n        prefix: 'Develop and implement: ',\n      },\n      analysis: {\n        prompt: 'What would you like to analyze?',\n        prefix: 'Analyze and provide insights on: ',\n      },\n      testing: {\n        prompt: 'What would you like to test?',\n        prefix: 'Test and validate: ',\n      },\n      documentation: {\n        prompt: 'What would you like to document?',\n        prefix: 'Create documentation for: ',\n      },\n    };\n\n    const tmpl = templates[template as keyof typeof templates];\n    const { detail } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'detail',\n        message: tmpl.prompt,\n      },\n    ]);\n\n    taskDescription = tmpl.prefix + detail;\n  }\n\n  // Task configuration\n  const config = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'priority',\n      message: 'Task priority:',\n      choices: [\n        { name: '🟢 Low', value: 'low' },\n        { name: '🟡 Medium', value: 'medium' },\n        { name: '🟠 High', value: 'high' },\n        { name: '🔴 Critical', value: 'critical' },\n      ],\n      default: 'medium',\n    },\n    {\n      type: 'list',\n      name: 'strategy',\n      message: 'Execution strategy:',\n      choices: [\n        { name: '🤖 Adaptive (AI-optimized)', value: 'adaptive' },\n        { name: '⚡ Parallel (Multiple agents)', value: 'parallel' },\n        { name: '📍 Sequential (Step-by-step)', value: 'sequential' },\n        { name: '🤝 Consensus (Requires agreement)', value: 'consensus' },\n      ],\n      default: 'adaptive',\n    },\n    {\n      type: 'confirm',\n      name: 'monitor',\n      message: 'Monitor task progress?',\n      default: true,\n    },\n  ]);\n\n  const spinner = require('ora')('Submitting task...').start();\n\n  try {\n    const task = await hiveMind.submitTask({\n      description: taskDescription,\n      priority: config.priority,\n      strategy: config.strategy,\n    });\n\n    spinner.succeed(formatSuccess('Task submitted successfully!'));\n    console.log(formatInfo(`Task ID: ${task.id}`));\n\n    if (config.monitor) {\n      console.log('\\n' + chalk.bold('Monitoring task progress...'));\n      // TODO: Implement real-time monitoring\n    }\n  } catch (error) {\n    spinner.fail(formatError('Failed to submit task'));\n    throw error;\n  }\n}\n\nasync function viewStatusWizard() {\n  const { view } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'view',\n      message: 'What would you like to view?',\n      choices: [\n        { name: '📊 Overall Status', value: 'overall' },\n        { name: '🤖 Agent Details', value: 'agents' },\n        { name: '📋 Task Queue', value: 'tasks' },\n        { name: '💾 Memory Usage', value: 'memory' },\n        { name: '📈 Performance Metrics', value: 'performance' },\n        { name: '📡 Communications', value: 'communications' },\n      ],\n    },\n  ]);\n\n  // Execute the status command with appropriate flags\n  const statusCmd = require('./status').statusCommand;\n  const args = ['status'];\n\n  switch (view) {\n    case 'agents':\n      args.push('--detailed');\n      break;\n    case 'tasks':\n      args.push('--tasks');\n      break;\n    case 'memory':\n      args.push('--memory');\n      break;\n    case 'performance':\n      args.push('--performance');\n      break;\n  }\n\n  await statusCmd.parseAsync(args);\n}\n\n// Helper functions for other wizard actions\nasync function listAgentsInteractive(hiveMind: HiveMind) {\n  const agents = await hiveMind.getAgents();\n\n  console.log('\\n' + chalk.bold('🤖 Agent List:'));\n  agents.forEach((agent) => {\n    const statusEmoji = agent.status === 'busy' ? '🔴' : '🟢';\n    console.log(`${statusEmoji} ${agent.name} (${agent.type}) - ${agent.status}`);\n  });\n}\n\nasync function modifyAgentInteractive(hiveMind: HiveMind) {\n  // Implementation for modifying agents\n  console.log(formatInfo('Agent modification coming soon...'));\n}\n\nasync function removeAgentInteractive(hiveMind: HiveMind) {\n  // Implementation for removing agents\n  console.log(formatInfo('Agent removal coming soon...'));\n}\n\nasync function rebalanceAgentsInteractive(hiveMind: HiveMind) {\n  const spinner = require('ora')('Rebalancing agents...').start();\n\n  try {\n    await hiveMind.rebalanceAgents();\n    spinner.succeed(formatSuccess('Agents rebalanced successfully!'));\n  } catch (error) {\n    spinner.fail(formatError('Failed to rebalance agents'));\n    throw error;\n  }\n}\n\nasync function configureMemoryWizard() {\n  console.log(formatInfo('Memory configuration coming soon...'));\n}\n\nasync function runSimulationWizard() {\n  console.log(formatInfo('Simulation mode coming soon...'));\n}\n\nasync function exportDataWizard() {\n  console.log(formatInfo('Data export coming soon...'));\n}\n\nasync function switchSwarmWizard() {\n  const db = await DatabaseManager.getInstance();\n  const swarms = await db.getAllSwarms();\n\n  if (swarms.length === 0) {\n    console.log(formatWarning('No swarms found. Create one first!'));\n    return;\n  }\n\n  const { swarmId } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'swarmId',\n      message: 'Select swarm:',\n      choices: swarms.map((s) => ({\n        name: `${s.name} (${s.topology}) - ${s.agentCount} agents`,\n        value: s.id,\n      })),\n    },\n  ]);\n\n  await db.setActiveSwarm(swarmId);\n  console.log(formatSuccess('Switched to swarm: ' + swarmId));\n}\n"],"names":["Command","chalk","inquirer","figlet","gradient","HiveMind","DatabaseManager","formatSuccess","formatError","formatInfo","formatWarning","wizardCommand","description","option","action","options","skipIntro","showIntro","exit","selectAction","createSwarmWizard","manageAgentsWizard","submitTaskWizard","viewStatusWizard","configureMemoryWizard","runSimulationWizard","exportDataWizard","switchSwarmWizard","prompt","type","name","message","default","then","answers","continue","console","log","bold","yellow","error","process","clear","title","textSync","font","horizontalLayout","verticalLayout","rainbow","gray","Promise","resolve","setTimeout","db","getInstance","activeSwarm","getActiveSwarmId","choices","value","disabled","Separator","Date","now","validate","input","length","showAdvanced","advanced","checked","Object","assign","spinner","require","start","hiveMind","topology","maxAgents","queenMode","memoryTTL","consensusThreshold","autoSpawn","enabledFeatures","createdAt","swarmId","initialize","succeed","agents","autoSpawnAgents","fail","load","spawnAgentInteractive","listAgentsInteractive","modifyAgentInteractive","removeAgentInteractive","rebalanceAgentsInteractive","agentTypes","count","i","agent","spawnAgent","push","templates","template","taskDescription","taskConfig","research","prefix","development","analysis","testing","documentation","tmpl","detail","config","task","submitTask","priority","strategy","id","monitor","view","statusCmd","statusCommand","args","parseAsync","getAgents","forEach","statusEmoji","status","rebalanceAgents","swarms","getAllSwarms","map","s","agentCount","setActiveSwarm"],"mappings":"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"}