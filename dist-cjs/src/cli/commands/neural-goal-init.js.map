{"version":3,"sources":["../../../../src/cli/commands/neural-goal-init.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Neural and Goal module initialization commands\n * Handles both 'neural init' and 'goal init' commands\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport async function registerNeuralGoalCommands(program) {\n  // Neural init command\n  program\n    .command('neural')\n    .description('Neural module commands')\n    .command('init')\n    .description('Initialize SAFLA neural module')\n    .option('--force', 'Overwrite existing module')\n    .option('--target <dir>', 'Target directory', '.claude/agents/neural')\n    .action(async (options) => {\n      await initNeuralModule(options);\n    });\n\n  // Goal init command  \n  program\n    .command('goal')\n    .description('Goal module commands')\n    .command('init')\n    .description('Initialize GOAP goal module')\n    .option('--force', 'Overwrite existing module')\n    .option('--target <dir>', 'Target directory', '.claude/agents/goal')\n    .action(async (options) => {\n      await initGoalModule(options);\n    });\n}\n\nasync function initNeuralModule(options) {\n  const targetDir = path.resolve(process.cwd(), options.target || '.claude/agents/neural');\n  \n  console.log(chalk.cyan('üß† Initializing Claude Flow Neural Module...'));\n  \n  try {\n    // Check if exists\n    if (await exists(targetDir) && !options.force) {\n      console.log(chalk.yellow('‚ö†Ô∏è  Neural module already exists. Use --force to overwrite.'));\n      return;\n    }\n    \n    // Create directory\n    await fs.mkdir(targetDir, { recursive: true });\n    \n    // Create SAFLA neural agent\n    const saflaContent = `---\nname: safla-neural\ndescription: \"Self-Aware Feedback Loop Algorithm (SAFLA) neural specialist\"\ncolor: cyan\n---\n\nYou are a SAFLA Neural Specialist with:\n- 4-tier memory (Vector, Episodic, Semantic, Working)\n- 172,000+ ops/sec processing\n- 60% memory compression\n- Cross-session learning\n\n## MCP Integration\n\\`\\`\\`javascript\nmcp__claude-flow__neural_train {\n  pattern_type: \"coordination\",\n  training_data: safla_config\n}\n\\`\\`\\`\n`;\n    \n    await fs.writeFile(path.join(targetDir, 'safla-neural.md'), saflaContent);\n    console.log(chalk.gray('  ‚úì Created safla-neural.md'));\n    \n    // Create config\n    const config = {\n      version: '1.0.0',\n      neural: {\n        enabled: true,\n        defaultModel: 'safla',\n        wasmOptimization: true,\n        memoryCompression: 0.6\n      }\n    };\n    \n    await fs.writeFile(\n      path.join(targetDir, 'config.json'),\n      JSON.stringify(config, null, 2)\n    );\n    console.log(chalk.gray('  ‚úì Created config.json'));\n    \n    console.log(chalk.green('‚úÖ Neural module initialized successfully!'));\n    console.log(chalk.cyan('\\nüìö Usage:'));\n    console.log(chalk.gray('  @agent-safla-neural \"Create self-improving system\"'));\n    \n  } catch (error) {\n    console.error(chalk.red('‚ùå Failed:'), error.message);\n    process.exit(1);\n  }\n}\n\nasync function initGoalModule(options) {\n  const targetDir = path.resolve(process.cwd(), options.target || '.claude/agents/goal');\n  \n  console.log(chalk.magenta('üéØ Initializing Claude Flow Goal Module...'));\n  \n  try {\n    // Check if exists\n    if (await exists(targetDir) && !options.force) {\n      console.log(chalk.yellow('‚ö†Ô∏è  Goal module already exists. Use --force to overwrite.'));\n      return;\n    }\n    \n    // Create directory\n    await fs.mkdir(targetDir, { recursive: true });\n    \n    // Create goal-planner agent\n    const plannerContent = `---\nname: goal-planner\ndescription: \"Goal-Oriented Action Planning (GOAP) specialist\"\ncolor: purple\n---\n\nYou are a GOAP specialist with:\n- A* search algorithms\n- OODA loop execution\n- Adaptive replanning\n- Mixed LLM + code execution\n\n## MCP Integration\n\\`\\`\\`javascript\nmcp__claude-flow__task_orchestrate {\n  task: \"achieve_goal\",\n  strategy: \"adaptive\"\n}\n\\`\\`\\`\n`;\n    \n    await fs.writeFile(path.join(targetDir, 'goal-planner.md'), plannerContent);\n    console.log(chalk.gray('  ‚úì Created goal-planner.md'));\n    \n    // Create config\n    const config = {\n      version: '1.0.0',\n      goal: {\n        enabled: true,\n        algorithm: 'astar',\n        maxPlanDepth: 100,\n        replanning: {\n          enabled: true,\n          threshold: 0.3\n        }\n      }\n    };\n    \n    await fs.writeFile(\n      path.join(targetDir, 'config.json'),\n      JSON.stringify(config, null, 2)\n    );\n    console.log(chalk.gray('  ‚úì Created config.json'));\n    \n    console.log(chalk.green('‚úÖ Goal module initialized successfully!'));\n    console.log(chalk.magenta('\\nüìö Usage:'));\n    console.log(chalk.gray('  @agent-goal-planner \"Create deployment plan\"'));\n    \n  } catch (error) {\n    console.error(chalk.red('‚ùå Failed:'), error.message);\n    process.exit(1);\n  }\n}\n\nasync function exists(path) {\n  try {\n    await fs.access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport default { registerNeuralGoalCommands };"],"names":["promises","fs","path","chalk","fileURLToPath","__filename","url","__dirname","dirname","registerNeuralGoalCommands","program","command","description","option","action","options","initNeuralModule","initGoalModule","targetDir","resolve","process","cwd","target","console","log","cyan","exists","force","yellow","mkdir","recursive","saflaContent","writeFile","join","gray","config","version","neural","enabled","defaultModel","wasmOptimization","memoryCompression","JSON","stringify","green","error","red","message","exit","magenta","plannerContent","goal","algorithm","maxPlanDepth","replanning","threshold","access"],"mappings":"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"}