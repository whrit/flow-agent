{"version":3,"sources":["../../../../src/cli/commands/hook.ts"],"sourcesContent":["import { spawn } from 'child_process';\nimport { Logger } from '../../core/logger.js';\nimport type {\n  PreTaskOptions,\n  PostTaskOptions,\n  PreEditOptions,\n  PostEditOptions,\n  PreCommandOptions,\n  PostCommandOptions,\n  SessionStartOptions,\n  SessionEndOptions,\n  SessionRestoreOptions,\n  PreSearchOptions,\n  NotificationOptions,\n  HookCommandOptions,\n  PerformanceOptions,\n  MemorySyncOptions,\n  TelemetryOptions,\n} from './hook-types.js';\n\nconst logger = new Logger(\n  {\n    level: 'info',\n    format: 'text',\n    destination: 'console',\n  },\n  { prefix: 'Hook' },\n);\n\n// Helper function to build command arguments\nfunction buildArgs(hookType: string, options: Record<string, any>): string[] {\n  const args = [hookType];\n\n  Object.entries(options).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      const flagName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n      if (typeof value === 'boolean') {\n        if (value) {\n          args.push(`--${flagName}`);\n        } else {\n          args.push(`--no-${flagName}`);\n        }\n      } else {\n        args.push(`--${flagName}`, String(value));\n      }\n    }\n  });\n\n  return args;\n}\n\n// Hook subcommand handlers\nconst hookHandlers: Record<string, (args: string[]) => Promise<void>> = {\n  'pre-task': async (args: string[]) => {\n    const options = parseArgs<PreTaskOptions>(args);\n    await executeHook('pre-task', options);\n  },\n\n  'post-task': async (args: string[]) => {\n    const options = parseArgs<PostTaskOptions>(args);\n    if (!options.taskId) {\n      throw new Error('--task-id is required for post-task hook');\n    }\n    await executeHook('post-task', options);\n  },\n\n  'pre-edit': async (args: string[]) => {\n    const options = parseArgs<PreEditOptions>(args);\n    if (!options.file) {\n      throw new Error('--file is required for pre-edit hook');\n    }\n    await executeHook('pre-edit', options);\n  },\n\n  'post-edit': async (args: string[]) => {\n    const options = parseArgs<PostEditOptions>(args);\n    if (!options.file) {\n      throw new Error('--file is required for post-edit hook');\n    }\n    await executeHook('post-edit', options);\n  },\n\n  'pre-command': async (args: string[]) => {\n    const options = parseArgs<PreCommandOptions>(args);\n    if (!options.command) {\n      throw new Error('--command is required for pre-command hook');\n    }\n    await executeHook('pre-command', options);\n  },\n\n  'post-command': async (args: string[]) => {\n    const options = parseArgs<PostCommandOptions>(args);\n    if (!options.command) {\n      throw new Error('--command is required for post-command hook');\n    }\n    await executeHook('post-command', options);\n  },\n\n  'session-start': async (args: string[]) => {\n    const options = parseArgs<SessionStartOptions>(args);\n    await executeHook('session-start', options);\n  },\n\n  'session-end': async (args: string[]) => {\n    const options = parseArgs<SessionEndOptions>(args);\n    await executeHook('session-end', options);\n  },\n\n  'session-restore': async (args: string[]) => {\n    const options = parseArgs<SessionRestoreOptions>(args);\n    if (!options.sessionId) {\n      throw new Error('--session-id is required for session-restore hook');\n    }\n    await executeHook('session-restore', options);\n  },\n\n  'pre-search': async (args: string[]) => {\n    const options = parseArgs<PreSearchOptions>(args);\n    if (!options.query) {\n      throw new Error('--query is required for pre-search hook');\n    }\n    await executeHook('pre-search', options);\n  },\n\n  notification: async (args: string[]) => {\n    const options = parseArgs<NotificationOptions>(args);\n    if (!options.message) {\n      throw new Error('--message is required for notification hook');\n    }\n    await executeHook('notification', options);\n  },\n\n  performance: async (args: string[]) => {\n    const options = parseArgs<PerformanceOptions>(args);\n    await executeHook('performance', options);\n  },\n\n  'memory-sync': async (args: string[]) => {\n    const options = parseArgs<MemorySyncOptions>(args);\n    await executeHook('memory-sync', options);\n  },\n\n  telemetry: async (args: string[]) => {\n    const options = parseArgs<TelemetryOptions>(args);\n    if (!options.event) {\n      throw new Error('--event is required for telemetry hook');\n    }\n    await executeHook('telemetry', options);\n  },\n};\n\n// Parse command line arguments\nfunction parseArgs<T extends Record<string, any>>(args: string[]): T {\n  const options: Record<string, any> = {};\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n\n    if (arg.startsWith('--')) {\n      const key = arg.slice(2).replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n      const nextArg = args[i + 1];\n\n      if (!nextArg || nextArg.startsWith('--')) {\n        // Boolean flag\n        options[key] = !arg.startsWith('--no-');\n      } else {\n        // Value flag\n        options[key] = nextArg;\n        i++; // Skip next arg\n      }\n    }\n  }\n\n  return options as T;\n}\n\n// Execute hook with ruv-swarm\nasync function executeHook(hookType: string, options: Record<string, any>): Promise<void> {\n  const args = buildArgs(hookType, options);\n\n  logger.debug(`Executing hook: ruv-swarm hook ${args.join(' ')}`);\n\n  const child = spawn('npx', ['ruv-swarm', 'hook', ...args], {\n    stdio: 'inherit',\n    shell: true,\n  });\n\n  await new Promise<void>((resolve, reject) => {\n    child.on('exit', (code) => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject(new Error(`Hook ${hookType} failed with exit code ${code}`));\n      }\n    });\n\n    child.on('error', (error) => {\n      logger.error(`Failed to execute hook ${hookType}:`, error);\n      reject(error);\n    });\n  });\n}\n\n// Main hook command handler\nexport const hookCommand = {\n  name: 'hook',\n  description: 'Execute ruv-swarm hooks for agent coordination',\n  action: async ({ args }: HookCommandOptions): Promise<void> => {\n    try {\n      if (args.length === 0) {\n        showHookHelp();\n        return;\n      }\n\n      const subcommand = args[0];\n      const handler = hookHandlers[subcommand];\n\n      if (!handler) {\n        logger.error(`Unknown hook subcommand: ${subcommand}`);\n        showHookHelp();\n        throw new Error(`Unknown hook subcommand: ${subcommand}`);\n      }\n\n      await handler(args.slice(1));\n    } catch (error) {\n      logger.error('Hook command error:', error);\n      throw error;\n    }\n  },\n};\n\n// Show help for hook commands\nfunction showHookHelp(): void {\n  console.log(`\nClaude Flow Hook Commands\n========================\n\nAvailable hooks:\n\n  pre-task      - Run before starting a task\n    --description <desc>      Task description\n    --auto-spawn-agents       Auto-spawn agents (default: true)\n    --complexity <level>      Task complexity: low|medium|high\n    --estimated-minutes <n>   Estimated duration\n    --requires-research       Task requires research\n    --requires-testing        Task requires testing\n\n  post-task     - Run after completing a task\n    --task-id <id>           Task ID (required)\n    --analyze-performance    Analyze performance metrics\n    --generate-report        Generate completion report\n\n  pre-edit      - Run before editing a file\n    --file <path>            File path (required)\n    --operation <op>         Operation type: read|write|edit|delete\n    --validate               Validate file before edit\n\n  post-edit     - Run after editing a file\n    --file <path>            File path (required)\n    --memory-key <key>       Store in memory with key\n    --format                 Auto-format code\n    --analyze                Analyze changes\n\n  pre-command   - Run before executing a command\n    --command <cmd>          Command to execute (required)\n    --validate               Validate command safety\n    --sandbox                Run in sandbox mode\n\n  post-command  - Run after executing a command\n    --command <cmd>          Command executed (required)\n    --exit-code <code>       Command exit code\n    --duration <ms>          Execution duration\n\n  session-start - Run at session start\n    --session-id <id>        Session identifier\n    --load-previous          Load previous session data\n    --auto-restore           Auto-restore context\n\n  session-end   - Run at session end\n    --session-id <id>        Session identifier\n    --export-metrics         Export performance metrics\n    --generate-summary       Generate session summary\n    --save-to <path>         Save session data to path\n\n  session-restore - Restore a previous session\n    --session-id <id>        Session ID to restore (required)\n    --load-memory            Load memory state\n    --load-agents            Load agent configuration\n    --load-tasks             Load task list\n\n  pre-search    - Run before searching\n    --query <text>           Search query (required)\n    --cache-results          Cache search results\n    --max-results <n>        Maximum results to return\n\n  notification  - Send a notification\n    --message <text>         Notification message (required)\n    --level <level>          Message level: info|warning|error\n    --telemetry              Include in telemetry\n    --persist                Persist notification\n\n  performance   - Track performance metrics\n    --operation <name>       Operation name\n    --duration <ms>          Operation duration\n    --metrics <json>         Performance metrics as JSON\n\n  memory-sync   - Synchronize memory state\n    --namespace <name>       Memory namespace\n    --direction <dir>        Sync direction: push|pull|sync\n    --target <location>      Target location for sync\n\n  telemetry     - Send telemetry data\n    --event <name>           Event name (required)\n    --data <json>            Event data as JSON\n    --tags <list>            Comma-separated tags\n\nCommon options:\n  --verbose                  Show detailed output\n  --metadata <json>          Additional metadata as JSON\n\nExamples:\n  claude hook pre-task --description \"Build REST API\" --complexity high\n  claude hook post-edit --file src/index.js --memory-key \"api/implementation\"\n  claude hook session-end --export-metrics --generate-summary\n  claude hook performance --operation \"api-build\" --duration 1234\n  claude hook memory-sync --namespace \"project\" --direction push\n  claude hook telemetry --event \"task-completed\" --data '{\"taskId\":\"123\"}'\n`);\n}\n\n// Export hook subcommands for better CLI integration\nexport const hookSubcommands = [\n  'pre-task',\n  'post-task',\n  'pre-edit',\n  'post-edit',\n  'pre-command',\n  'post-command',\n  'session-start',\n  'session-end',\n  'session-restore',\n  'pre-search',\n  'notification',\n  'performance',\n  'memory-sync',\n  'telemetry',\n];\n"],"names":["spawn","Logger","logger","level","format","destination","prefix","buildArgs","hookType","options","args","Object","entries","forEach","key","value","undefined","flagName","replace","toLowerCase","push","String","hookHandlers","parseArgs","executeHook","taskId","Error","file","command","sessionId","query","notification","message","performance","telemetry","event","i","length","arg","startsWith","slice","_","letter","toUpperCase","nextArg","debug","join","child","stdio","shell","Promise","resolve","reject","on","code","error","hookCommand","name","description","action","showHookHelp","subcommand","handler","console","log","hookSubcommands"],"mappings":"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"}