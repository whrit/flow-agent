{"version":3,"sources":["../../../../src/cli/commands/session.ts"],"sourcesContent":["/**\n * Session management commands for Claude-Flow\n */\n\nimport { Command } from '../commander-fix.js';\nimport { promises as fs, existsSync } from 'node:fs';\nimport * as path from 'node:path';\nimport Table from 'cli-table3';\nimport inquirer from 'inquirer';\nimport { formatDuration, formatStatusIndicator } from '../formatter.js';\nimport { generateId } from '../../utils/helpers.js';\nimport chalk from 'chalk';\n\nexport const sessionCommand = new Command()\n  .name('session')\n  .description('Manage Claude-Flow sessions')\n  .action(() => {\n    sessionCommand.help();\n  });\n\n// List command\nsessionCommand\n  .command('list')\n  .description('List all saved sessions')\n  .option('-a, --active', 'Show only active sessions')\n  .option('--format <format>', 'Output format (table, json)', 'table')\n  .action(async (options: any) => {\n    await listSessions(options);\n  });\n\n// Save command\nsessionCommand\n  .command('save')\n  .description('Save current session state')\n  .arguments('[name]')\n  .option('-d, --description <desc>', 'Session description')\n  .option('-t, --tags <tags>', 'Comma-separated tags')\n  .option('--auto', 'Auto-generate session name')\n  .action(async (name: string | undefined, options: any) => {\n    await saveSession(name, options);\n  });\n\n// Restore command\nsessionCommand\n  .command('restore')\n  .description('Restore a saved session')\n  .arguments('<session-id>')\n  .option('-f, --force', 'Force restore without confirmation')\n  .option('--merge', 'Merge with current session instead of replacing')\n  .action(async (sessionId: string, options: any) => {\n    await restoreSession(sessionId, options);\n  });\n\n// Delete command\nsessionCommand\n  .command('delete')\n  .description('Delete a saved session')\n  .arguments('<session-id>')\n  .option('-f, --force', 'Skip confirmation prompt')\n  .action(async (sessionId: string, options: any) => {\n    await deleteSession(sessionId, options);\n  });\n\n// Export command\nsessionCommand\n  .command('export')\n  .description('Export session to file')\n  .arguments('<session-id> <output-file>')\n  .option('--format <format>', 'Export format (json, yaml)', 'json')\n  .option('--include-memory', 'Include agent memory in export')\n  .action(async (sessionId: string, outputFile: string, options: any) => {\n    await exportSession(sessionId, outputFile, options);\n  });\n\n// Import command\nsessionCommand\n  .command('import')\n  .description('Import session from file')\n  .arguments('<input-file>')\n  .option('-n, --name <name>', 'Custom session name')\n  .option('--overwrite', 'Overwrite existing session with same ID')\n  .action(async (inputFile: string, options: any) => {\n    await importSession(inputFile, options);\n  });\n\n// Info command\nsessionCommand\n  .command('info')\n  .description('Show detailed session information')\n  .arguments('<session-id>')\n  .action(async (sessionId: string, options: any) => {\n    await showSessionInfo(sessionId);\n  });\n\n// Clean command\nsessionCommand\n  .command('clean')\n  .description('Clean up old or orphaned sessions')\n  .option('--older-than <days>', 'Delete sessions older than N days', '30')\n  .option('--dry-run', 'Show what would be deleted without deleting')\n  .option('--orphaned', 'Only clean orphaned sessions')\n  .action(async (options: any) => {\n    await cleanSessions(options);\n  });\n\ninterface SessionData {\n  id: string;\n  name: string;\n  description?: string;\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n  state: {\n    agents: any[];\n    tasks: any[];\n    memory: any[];\n    configuration: any;\n  };\n  metadata: {\n    version: string;\n    platform: string;\n    checksum: string;\n  };\n}\n\nconst SESSION_DIR = '.claude-flow/sessions';\n\nasync function ensureSessionDir(): Promise<void> {\n  try {\n    await fs.mkdir(SESSION_DIR, { recursive: true });\n  } catch (error) {\n    if ((error as any).code !== 'EEXIST') {\n      throw error;\n    }\n  }\n}\n\nasync function listSessions(options: any): Promise<void> {\n  try {\n    await ensureSessionDir();\n    const sessions = await loadAllSessions();\n\n    let filteredSessions = sessions;\n    if (options.active) {\n      // In production, this would check if the session is currently active\n      filteredSessions = sessions.filter((s) => (s.metadata as any).active);\n    }\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(filteredSessions, null, 2));\n      return;\n    }\n\n    if (filteredSessions.length === 0) {\n      console.log(chalk.gray('No sessions found'));\n      return;\n    }\n\n    console.log(chalk.cyan.bold(`Sessions (${filteredSessions.length})`));\n    console.log('─'.repeat(60));\n\n    const rows = [];\n    for (const session of filteredSessions) {\n      rows.push([\n        chalk.gray(session.id.substring(0, 8) + '...'),\n        chalk.white(session.name),\n        session.description\n          ? session.description.substring(0, 30) + (session.description.length > 30 ? '...' : '')\n          : '-',\n        session.state.agents.length.toString(),\n        session.state.tasks.length.toString(),\n        session.createdAt.toLocaleDateString(),\n      ]);\n    }\n\n    const table = new Table({\n      head: ['ID', 'Name', 'Description', 'Agents', 'Tasks', 'Created'],\n    });\n    for (const row of rows) {\n      table.push(row);\n    }\n    console.log(table.toString());\n  } catch (error) {\n    console.error(chalk.red('Failed to list sessions:'), (error as Error).message);\n  }\n}\n\nasync function saveSession(name: string | undefined, options: any): Promise<void> {\n  try {\n    // Get current session state (mock for now)\n    const currentState = await getCurrentSessionState();\n\n    if (!name) {\n      if (options.auto) {\n        name = `session-${new Date().toISOString().split('T')[0]}-${Date.now().toString().slice(-4)}`;\n      } else {\n        const response = await inquirer.prompt({\n          type: 'input',\n          name: 'sessionName',\n          message: 'Enter session name:',\n          default: `session-${new Date().toISOString().split('T')[0]}`,\n        });\n        name = response.sessionName;\n      }\n    }\n\n    const session: SessionData = {\n      id: generateId('session'),\n      name: name!,\n      description: options.description,\n      tags: options.tags ? options.tags.split(',').map((t: string) => t.trim()) : [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      state: currentState,\n      metadata: {\n        version: '1.0.0',\n        platform: process.platform,\n        checksum: await calculateChecksum(currentState),\n      },\n    };\n\n    await ensureSessionDir();\n    const filePath = `${SESSION_DIR}/${session.id}.json`;\n    await fs.writeFile(filePath, JSON.stringify(session, null, 2));\n\n    console.log(chalk.green('✓ Session saved successfully'));\n    console.log(`${chalk.white('ID:')} ${session.id}`);\n    console.log(`${chalk.white('Name:')} ${session.name}`);\n    console.log(`${chalk.white('File:')} ${filePath}`);\n\n    if (session.description) {\n      console.log(`${chalk.white('Description:')} ${session.description}`);\n    }\n\n    console.log(`${chalk.white('Agents:')} ${session.state.agents.length}`);\n    console.log(`${chalk.white('Tasks:')} ${session.state.tasks.length}`);\n  } catch (error) {\n    console.error(chalk.red('Failed to save session:'), (error as Error).message);\n  }\n}\n\nasync function restoreSession(sessionId: string, options: any): Promise<void> {\n  try {\n    const session = await loadSession(sessionId);\n\n    if (!session) {\n      console.error(chalk.red(`Session '${sessionId}' not found`));\n      return;\n    }\n\n    // Show session info\n    console.log(chalk.cyan.bold('Session to restore:'));\n    console.log(`${chalk.white('Name:')} ${session.name}`);\n    console.log(`${chalk.white('Description:')} ${session.description || 'None'}`);\n    console.log(`${chalk.white('Agents:')} ${session.state.agents.length}`);\n    console.log(`${chalk.white('Tasks:')} ${session.state.tasks.length}`);\n    console.log(`${chalk.white('Created:')} ${session.createdAt.toLocaleString()}`);\n\n    // Confirmation\n    if (!options.force) {\n      const action = options.merge ? 'merge with current session' : 'replace current session';\n      const response = await inquirer.prompt({\n        type: 'confirm',\n        name: 'confirmed',\n        message: `Are you sure you want to ${action}?`,\n        default: false,\n      });\n      const confirmed = response.confirmed;\n\n      if (!confirmed) {\n        console.log(chalk.gray('Restore cancelled'));\n        return;\n      }\n    }\n\n    // Validate session integrity\n    const expectedChecksum = await calculateChecksum(session.state);\n    if (session.metadata.checksum !== expectedChecksum) {\n      console.log(chalk.yellow('⚠ Warning: Session checksum mismatch. Data may be corrupted.'));\n\n      if (!options.force) {\n        const response = await inquirer.prompt({\n          type: 'confirm',\n          name: 'proceed',\n          message: 'Continue anyway?',\n          default: false,\n        });\n        const proceed = response.proceed;\n\n        if (!proceed) {\n          console.log(chalk.gray('Restore cancelled'));\n          return;\n        }\n      }\n    }\n\n    // Restore session (mock for now)\n    console.log(chalk.yellow('Restoring session...'));\n\n    if (options.merge) {\n      console.log(chalk.blue('• Merging agents...'));\n      console.log(chalk.blue('• Merging tasks...'));\n      console.log(chalk.blue('• Merging memory...'));\n    } else {\n      console.log(chalk.blue('• Stopping current agents...'));\n      console.log(chalk.blue('• Clearing current tasks...'));\n      console.log(chalk.blue('• Restoring agents...'));\n      console.log(chalk.blue('• Restoring tasks...'));\n      console.log(chalk.blue('• Restoring memory...'));\n    }\n\n    // Update session metadata\n    session.updatedAt = new Date();\n    const filePath = `${SESSION_DIR}/${session.id}.json`;\n    await fs.writeFile(filePath, JSON.stringify(session, null, 2));\n\n    console.log(chalk.green('✓ Session restored successfully'));\n    console.log(\n      chalk.yellow(\n        'Note: This is a mock implementation. In production, this would connect to the orchestrator.',\n      ),\n    );\n  } catch (error) {\n    console.error(chalk.red('Failed to restore session:'), (error as Error).message);\n  }\n}\n\nasync function deleteSession(sessionId: string, options: any): Promise<void> {\n  try {\n    const session = await loadSession(sessionId);\n\n    if (!session) {\n      console.error(chalk.red(`Session '${sessionId}' not found`));\n      return;\n    }\n\n    // Confirmation\n    if (!options.force) {\n      console.log(`${chalk.white('Session:')} ${session.name}`);\n      console.log(`${chalk.white('Created:')} ${session.createdAt.toLocaleString()}`);\n\n      const response = await inquirer.prompt({\n        type: 'confirm',\n        name: 'confirmed',\n        message: 'Are you sure you want to delete this session?',\n        default: false,\n      });\n      const confirmed = response.confirmed;\n\n      if (!confirmed) {\n        console.log(chalk.gray('Delete cancelled'));\n        return;\n      }\n    }\n\n    const filePath = `${SESSION_DIR}/${session.id}.json`;\n    await fs.unlink(filePath);\n\n    console.log(chalk.green('✓ Session deleted successfully'));\n  } catch (error) {\n    console.error(chalk.red('Failed to delete session:'), (error as Error).message);\n  }\n}\n\nasync function exportSession(sessionId: string, outputFile: string, options: any): Promise<void> {\n  try {\n    const session = await loadSession(sessionId);\n\n    if (!session) {\n      console.error(chalk.red(`Session '${sessionId}' not found`));\n      return;\n    }\n\n    let exportData = session;\n\n    if (!options.includeMemory) {\n      exportData = {\n        ...session,\n        state: {\n          ...session.state,\n          memory: [], // Exclude memory data\n        },\n      };\n    }\n\n    let content: string;\n    if (options.format === 'yaml') {\n      // In production, you'd use a YAML library\n      console.log(chalk.yellow('YAML export not implemented yet, using JSON'));\n      content = JSON.stringify(exportData, null, 2);\n    } else {\n      content = JSON.stringify(exportData, null, 2);\n    }\n\n    await fs.writeFile(outputFile, content);\n\n    console.log(chalk.green('✓ Session exported successfully'));\n    console.log(`${chalk.white('File:')} ${outputFile}`);\n    console.log(`${chalk.white('Format:')} ${options.format}`);\n    console.log(`${chalk.white('Size:')} ${Buffer.from(content).length} bytes`);\n  } catch (error) {\n    console.error(chalk.red('Failed to export session:'), (error as Error).message);\n  }\n}\n\nasync function importSession(inputFile: string, options: any): Promise<void> {\n  try {\n    const content = await fs.readFile(inputFile, 'utf-8');\n    const sessionData = JSON.parse(content) as SessionData;\n\n    // Validate session data structure\n    if (!sessionData.id || !sessionData.name || !sessionData.state) {\n      throw new Error('Invalid session file format');\n    }\n\n    // Generate new ID if not overwriting\n    if (!options.overwrite) {\n      sessionData.id = generateId('session');\n    }\n\n    // Update name if specified\n    if (options.name) {\n      sessionData.name = options.name;\n    }\n\n    // Check if session already exists\n    const existingSession = await loadSession(sessionData.id);\n    if (existingSession && !options.overwrite) {\n      console.error(chalk.red('Session with this ID already exists'));\n      console.log(chalk.gray('Use --overwrite to replace it'));\n      return;\n    }\n\n    // Update timestamps\n    if (options.overwrite && existingSession) {\n      sessionData.updatedAt = new Date();\n    } else {\n      sessionData.createdAt = new Date();\n      sessionData.updatedAt = new Date();\n    }\n\n    await ensureSessionDir();\n    const filePath = `${SESSION_DIR}/${sessionData.id}.json`;\n    await fs.writeFile(filePath, JSON.stringify(sessionData, null, 2));\n\n    console.log(chalk.green('✓ Session imported successfully'));\n    console.log(`${chalk.white('ID:')} ${sessionData.id}`);\n    console.log(`${chalk.white('Name:')} ${sessionData.name}`);\n    console.log(`${chalk.white('Action:')} ${options.overwrite ? 'Overwritten' : 'Created'}`);\n  } catch (error) {\n    console.error(chalk.red('Failed to import session:'), (error as Error).message);\n  }\n}\n\nasync function showSessionInfo(sessionId: string): Promise<void> {\n  try {\n    const session = await loadSession(sessionId);\n\n    if (!session) {\n      console.error(chalk.red(`Session '${sessionId}' not found`));\n      return;\n    }\n\n    console.log(chalk.cyan.bold('Session Information'));\n    console.log('─'.repeat(40));\n    console.log(`${chalk.white('ID:')} ${session.id}`);\n    console.log(`${chalk.white('Name:')} ${session.name}`);\n    console.log(`${chalk.white('Description:')} ${session.description || 'None'}`);\n    console.log(`${chalk.white('Tags:')} ${session.tags.join(', ') || 'None'}`);\n    console.log(`${chalk.white('Created:')} ${session.createdAt.toLocaleString()}`);\n    console.log(`${chalk.white('Updated:')} ${session.updatedAt.toLocaleString()}`);\n    console.log();\n\n    console.log(chalk.cyan.bold('State Summary'));\n    console.log('─'.repeat(40));\n    console.log(`${chalk.white('Agents:')} ${session.state.agents.length}`);\n    console.log(`${chalk.white('Tasks:')} ${session.state.tasks.length}`);\n    console.log(`${chalk.white('Memory Entries:')} ${session.state.memory.length}`);\n    console.log();\n\n    console.log(chalk.cyan.bold('Metadata'));\n    console.log('─'.repeat(40));\n    console.log(`${chalk.white('Version:')} ${session.metadata.version}`);\n    console.log(`${chalk.white('Platform:')} ${session.metadata.platform}`);\n    console.log(`${chalk.white('Checksum:')} ${session.metadata.checksum}`);\n\n    // Verify integrity\n    const currentChecksum = await calculateChecksum(session.state);\n    const integrity = currentChecksum === session.metadata.checksum;\n    const integrityIcon = formatStatusIndicator(integrity ? 'success' : 'error');\n    console.log(\n      `${chalk.white('Integrity:')} ${integrityIcon} ${integrity ? 'Valid' : 'Corrupted'}`,\n    );\n\n    // File info\n    const filePath = `${SESSION_DIR}/${session.id}.json`;\n    try {\n      const fileInfo = await fs.stat(filePath);\n      console.log();\n      console.log(chalk.cyan.bold('File Information'));\n      console.log('─'.repeat(40));\n      console.log(`${chalk.white('Path:')} ${filePath}`);\n      console.log(`${chalk.white('Size:')} ${fileInfo.size} bytes`);\n      console.log(`${chalk.white('Modified:')} ${fileInfo.mtime?.toLocaleString() || 'Unknown'}`);\n    } catch {\n      console.log(chalk.red('Warning: Session file not found'));\n    }\n  } catch (error) {\n    console.error(chalk.red('Failed to show session info:'), (error as Error).message);\n  }\n}\n\nasync function cleanSessions(options: any): Promise<void> {\n  try {\n    await ensureSessionDir();\n    const sessions = await loadAllSessions();\n\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - parseInt(options.olderThan));\n\n    let toDelete = sessions.filter((session) => session.createdAt < cutoffDate);\n\n    if (options.orphaned) {\n      // In production, check if sessions have valid references\n      toDelete = toDelete.filter((session) => (session.metadata as any).orphaned);\n    }\n\n    if (toDelete.length === 0) {\n      console.log(chalk.gray('No sessions to clean'));\n      return;\n    }\n\n    console.log(chalk.cyan.bold(`Sessions to clean (${toDelete.length})`));\n    console.log('─'.repeat(50));\n\n    for (const session of toDelete) {\n      const age = Math.floor((Date.now() - session.createdAt.getTime()) / (1000 * 60 * 60 * 24));\n      console.log(\n        `• ${session.name} (${chalk.gray(session.id.substring(0, 8) + '...')}) - ${age} days old`,\n      );\n    }\n\n    if (options.dryRun) {\n      console.log('\\n' + chalk.yellow('Dry run mode - no files were deleted'));\n      return;\n    }\n\n    console.log();\n    const response = await inquirer.prompt({\n      type: 'confirm',\n      name: 'confirmed',\n      message: `Delete ${toDelete.length} sessions?`,\n      default: false,\n    });\n    const confirmed = response.confirmed;\n\n    if (!confirmed) {\n      console.log(chalk.gray('Clean cancelled'));\n      return;\n    }\n\n    let deleted = 0;\n    for (const session of toDelete) {\n      try {\n        const filePath = `${SESSION_DIR}/${session.id}.json`;\n        await fs.unlink(filePath);\n        deleted++;\n      } catch (error) {\n        console.error(chalk.red(`Failed to delete ${session.name}:`), (error as Error).message);\n      }\n    }\n\n    console.log(chalk.green(`✓ Cleaned ${deleted} sessions`));\n  } catch (error) {\n    console.error(chalk.red('Failed to clean sessions:'), (error as Error).message);\n  }\n}\n\nasync function loadAllSessions(): Promise<SessionData[]> {\n  const sessions: SessionData[] = [];\n\n  try {\n    const entries = await fs.readdir(SESSION_DIR, { withFileTypes: true });\n    for (const entry of entries) {\n      if (entry.isFile() && entry.name.endsWith('.json')) {\n        try {\n          const content = await fs.readFile(`${SESSION_DIR}/${entry.name}`, 'utf-8');\n          const session = JSON.parse(content) as SessionData;\n\n          // Convert date strings back to Date objects\n          session.createdAt = new Date(session.createdAt);\n          session.updatedAt = new Date(session.updatedAt);\n\n          sessions.push(session);\n        } catch (error) {\n          console.warn(\n            chalk.yellow(`Warning: Failed to load session file ${entry.name}:`),\n            (error as Error).message,\n          );\n        }\n      }\n    }\n  } catch (error) {\n    if ((error as any).code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  return sessions.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n}\n\nasync function loadSession(sessionId: string): Promise<SessionData | null> {\n  const sessions = await loadAllSessions();\n  return sessions.find((s) => s.id === sessionId || s.id.startsWith(sessionId)) || null;\n}\n\nasync function getCurrentSessionState(): Promise<any> {\n  // Mock current session state - in production, this would connect to the orchestrator\n  return {\n    agents: [\n      { id: 'agent-001', type: 'coordinator', status: 'active' },\n      { id: 'agent-002', type: 'researcher', status: 'active' },\n    ],\n    tasks: [\n      { id: 'task-001', type: 'research', status: 'running' },\n      { id: 'task-002', type: 'analysis', status: 'pending' },\n    ],\n    memory: [\n      { id: 'memory-001', type: 'conversation', agentId: 'agent-001' },\n      { id: 'memory-002', type: 'result', agentId: 'agent-002' },\n    ],\n    configuration: {\n      orchestrator: { maxAgents: 10 },\n      memory: { backend: 'hybrid' },\n    },\n  };\n}\n\nasync function calculateChecksum(data: any): Promise<string> {\n  const content = JSON.stringify(data, null, 0);\n  const encoder = new TextEncoder();\n  const dataBuffer = encoder.encode(content);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('')\n    .substring(0, 16);\n}\n"],"names":["Command","promises","fs","Table","inquirer","formatStatusIndicator","generateId","chalk","sessionCommand","name","description","action","help","command","option","options","listSessions","arguments","saveSession","sessionId","restoreSession","deleteSession","outputFile","exportSession","inputFile","importSession","showSessionInfo","cleanSessions","SESSION_DIR","ensureSessionDir","mkdir","recursive","error","code","sessions","loadAllSessions","filteredSessions","active","filter","s","metadata","format","console","log","JSON","stringify","length","gray","cyan","bold","repeat","rows","session","push","id","substring","white","state","agents","toString","tasks","createdAt","toLocaleDateString","table","head","row","red","message","currentState","getCurrentSessionState","auto","Date","toISOString","split","now","slice","response","prompt","type","default","sessionName","tags","map","t","trim","updatedAt","version","platform","process","checksum","calculateChecksum","filePath","writeFile","green","loadSession","toLocaleString","force","merge","confirmed","expectedChecksum","yellow","proceed","blue","unlink","exportData","includeMemory","memory","content","Buffer","from","readFile","sessionData","parse","Error","overwrite","existingSession","join","currentChecksum","integrity","integrityIcon","fileInfo","stat","size","mtime","cutoffDate","setDate","getDate","parseInt","olderThan","toDelete","orphaned","age","Math","floor","getTime","dryRun","deleted","entries","readdir","withFileTypes","entry","isFile","endsWith","warn","sort","a","b","find","startsWith","status","agentId","configuration","orchestrator","maxAgents","backend","data","encoder","TextEncoder","dataBuffer","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","Uint8Array","padStart"],"mappings":"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"}