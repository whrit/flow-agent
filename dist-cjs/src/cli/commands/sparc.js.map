{"version":3,"sources":["../../../../src/cli/commands/sparc.ts"],"sourcesContent":["import { success, error, warning, info } from '../cli-core.js';\nimport type { CommandContext } from '../cli-core.js';\nimport chalk from 'chalk';\nconst { blue, yellow, green, magenta, cyan } = chalk;\n\ninterface SparcMode {\n  slug: string;\n  name: string;\n  roleDefinition: string;\n  customInstructions: string;\n  groups: string[];\n  source: string;\n}\n\ninterface SparcConfig {\n  customModes: SparcMode[];\n}\n\nlet sparcConfig: SparcConfig | null = null;\n\nasync function loadSparcConfig(): Promise<SparcConfig> {\n  if (sparcConfig) {\n    return sparcConfig;\n  }\n\n  try {\n    const configPath = '.roomodes';\n    const { readFile } = await import('fs/promises');\n    const content = await readFile(configPath, 'utf-8');\n    sparcConfig = JSON.parse(content);\n    return sparcConfig!;\n  } catch (error) {\n    throw new Error(\n      `Failed to load SPARC configuration: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\nexport async function sparcAction(ctx: CommandContext): Promise<void> {\n  const subcommand = ctx.args[0];\n\n  switch (subcommand) {\n    case 'modes':\n      await listSparcModes(ctx);\n      break;\n    case 'info':\n      await showModeInfo(ctx);\n      break;\n    case 'run':\n      await runSparcMode(ctx);\n      break;\n    case 'tdd':\n      await runTddFlow(ctx);\n      break;\n    case 'workflow':\n      await runSparcWorkflow(ctx);\n      break;\n    default:\n      await showSparcHelp();\n      break;\n  }\n}\n\nasync function listSparcModes(ctx: CommandContext): Promise<void> {\n  try {\n    const config = await loadSparcConfig();\n    const verbose = ctx.flags.verbose as boolean;\n\n    success('Available SPARC Modes:');\n    console.log();\n\n    for (const mode of config.customModes) {\n      console.log(`${cyan('‚Ä¢')} ${green(mode.name)} ${blue(`(${mode.slug})`)}`);\n      if (verbose) {\n        console.log(`  ${mode.roleDefinition}`);\n        console.log(`  Tools: ${mode.groups.join(', ')}`);\n        console.log();\n      }\n    }\n\n    if (!verbose) {\n      console.log();\n      info('Use --verbose for detailed descriptions');\n    }\n  } catch (err) {\n    error(`Failed to list SPARC modes: ${(err as Error).message}`);\n  }\n}\n\nasync function showModeInfo(ctx: CommandContext): Promise<void> {\n  const modeSlug = ctx.args[1];\n  if (!modeSlug) {\n    error('Usage: sparc info <mode-slug>');\n    return;\n  }\n\n  try {\n    const config = await loadSparcConfig();\n    const mode = config.customModes.find((m) => m.slug === modeSlug);\n\n    if (!mode) {\n      error(`Mode not found: ${modeSlug}`);\n      console.log('Available modes:');\n      for (const m of config.customModes) {\n        console.log(`  ${m.slug} - ${m.name}`);\n      }\n      return;\n    }\n\n    success(`SPARC Mode: ${mode.name}`);\n    console.log();\n    console.log(blue('Role Definition:'));\n    console.log(mode.roleDefinition);\n    console.log();\n    console.log(blue('Custom Instructions:'));\n    console.log(mode.customInstructions);\n    console.log();\n    console.log(blue('Tool Groups:'));\n    console.log(mode.groups.join(', '));\n    console.log();\n    console.log(blue('Source:'));\n    console.log(mode.source);\n  } catch (err) {\n    error(`Failed to show mode info: ${(err as Error).message}`);\n  }\n}\n\nasync function runSparcMode(ctx: CommandContext): Promise<void> {\n  const modeSlug = ctx.args[1];\n  const taskDescription = ctx.args.slice(2).join(' ');\n\n  if (!modeSlug || !taskDescription) {\n    error('Usage: sparc run <mode-slug> <task-description>');\n    return;\n  }\n\n  try {\n    const config = await loadSparcConfig();\n    const mode = config.customModes.find((m) => m.slug === modeSlug);\n\n    if (!mode) {\n      error(`Mode not found: ${modeSlug}`);\n      return;\n    }\n\n    // Build the enhanced task prompt using SPARC methodology\n    const enhancedTask = buildSparcPrompt(mode, taskDescription, ctx.flags);\n    const instanceId = `sparc-${modeSlug}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Build tools based on mode groups\n    const tools = buildToolsFromGroups(mode.groups);\n\n    if (ctx.flags.dryRun || ctx.flags['dry-run']) {\n      warning('DRY RUN - SPARC Mode Configuration:');\n      console.log(`Mode: ${mode.name} (${mode.slug})`);\n      console.log(`Instance ID: ${instanceId}`);\n      console.log(`Tools: ${tools}`);\n      console.log(`Task: ${taskDescription}`);\n      console.log();\n      console.log('Enhanced prompt preview:');\n      console.log(enhancedTask.substring(0, 300) + '...');\n      return;\n    }\n\n    success(`Starting SPARC mode: ${mode.name}`);\n    console.log(`üìù Instance ID: ${instanceId}`);\n    console.log(`üéØ Mode: ${mode.slug}`);\n    console.log(`üîß Tools: ${tools}`);\n    console.log(`üìã Task: ${taskDescription}`);\n    console.log();\n\n    // Execute Claude with SPARC configuration\n    await executeClaudeWithSparc(enhancedTask, tools, instanceId, ctx.flags);\n  } catch (err) {\n    error(`Failed to run SPARC mode: ${(err as Error).message}`);\n  }\n}\n\nasync function runTddFlow(ctx: CommandContext): Promise<void> {\n  const taskDescription = ctx.args.slice(1).join(' ');\n\n  if (!taskDescription) {\n    error('Usage: sparc tdd <task-description>');\n    return;\n  }\n\n  try {\n    const config = await loadSparcConfig();\n\n    // Build TDD workflow using SPARC methodology\n    const workflow = [\n      {\n        mode: 'spec-pseudocode',\n        phase: 'Specification',\n        description: `Create detailed spec and pseudocode for: ${taskDescription}`,\n      },\n      { mode: 'tdd', phase: 'Red', description: `Write failing tests for: ${taskDescription}` },\n      {\n        mode: 'code',\n        phase: 'Green',\n        description: `Implement minimal code to pass tests for: ${taskDescription}`,\n      },\n      {\n        mode: 'refinement-optimization-mode',\n        phase: 'Refactor',\n        description: `Refactor and optimize implementation for: ${taskDescription}`,\n      },\n      {\n        mode: 'integration',\n        phase: 'Integration',\n        description: `Integrate and verify complete solution for: ${taskDescription}`,\n      },\n    ];\n\n    if (ctx.flags.dryRun || ctx.flags['dry-run']) {\n      warning('DRY RUN - TDD Workflow:');\n      for (const step of workflow) {\n        console.log(`${cyan(step.phase)}: ${step.mode} - ${step.description}`);\n      }\n      return;\n    }\n\n    success('Starting SPARC TDD Workflow');\n    console.log('Following Test-Driven Development with SPARC methodology');\n    console.log();\n\n    for (let i = 0; i < workflow.length; i++) {\n      const step = workflow[i];\n      const mode = config.customModes.find((m) => m.slug === step.mode);\n\n      if (!mode) {\n        warning(`Mode not found: ${step.mode}, skipping step`);\n        continue;\n      }\n\n      info(`Phase ${i + 1}/5: ${step.phase} (${mode.name})`);\n      console.log(`üìã ${step.description}`);\n      console.log();\n\n      const enhancedTask = buildSparcPrompt(mode, step.description, {\n        ...ctx.flags,\n        tddPhase: step.phase,\n        workflowStep: i + 1,\n        totalSteps: workflow.length,\n      });\n\n      const tools = buildToolsFromGroups(mode.groups);\n      const instanceId = `sparc-tdd-${step.phase.toLowerCase()}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n\n      await executeClaudeWithSparc(enhancedTask, tools, instanceId, ctx.flags);\n\n      // Store phase completion in memory for next step\n      if (ctx.flags.sequential !== false) {\n        console.log('Phase completed. Press Enter to continue to next phase, or Ctrl+C to stop...');\n        await new Promise<void>(async (resolve) => {\n          const readline = await import('readline');\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          rl.question('', () => {\n            rl.close();\n            resolve();\n          });\n        });\n      }\n    }\n\n    success('SPARC TDD Workflow completed!');\n  } catch (err) {\n    error(`Failed to run TDD flow: ${(err as Error).message}`);\n  }\n}\n\nasync function runSparcWorkflow(ctx: CommandContext): Promise<void> {\n  const workflowFile = ctx.args[1];\n\n  if (!workflowFile) {\n    error('Usage: sparc workflow <workflow-file.json>');\n    return;\n  }\n\n  try {\n    const { readFile } = await import('fs/promises');\n    const workflowContent = await readFile(workflowFile, 'utf-8');\n    const workflow = JSON.parse(workflowContent);\n\n    if (!workflow.steps || !Array.isArray(workflow.steps)) {\n      error(\"Invalid workflow file: missing 'steps' array\");\n      return;\n    }\n\n    const config = await loadSparcConfig();\n\n    success(`Loading SPARC workflow: ${workflow.name || 'Unnamed'}`);\n    console.log(`üìã Steps: ${workflow.steps.length}`);\n    console.log(`üìù Description: ${workflow.description || 'No description'}`);\n    console.log();\n\n    if (ctx.flags.dryRun || ctx.flags['dry-run']) {\n      warning('DRY RUN - Workflow Steps:');\n      for (let i = 0; i < workflow.steps.length; i++) {\n        const step = workflow.steps[i];\n        console.log(`${i + 1}. ${cyan(step.mode)} - ${step.description || step.task}`);\n      }\n      return;\n    }\n\n    for (let i = 0; i < workflow.steps.length; i++) {\n      const step = workflow.steps[i];\n      const mode = config.customModes.find((m) => m.slug === step.mode);\n\n      if (!mode) {\n        warning(`Mode not found: ${step.mode}, skipping step ${i + 1}`);\n        continue;\n      }\n\n      info(`Step ${i + 1}/${workflow.steps.length}: ${mode.name}`);\n      console.log(`üìã ${step.description || step.task}`);\n      console.log();\n\n      const enhancedTask = buildSparcPrompt(mode, step.description || step.task, {\n        ...ctx.flags,\n        workflowStep: i + 1,\n        totalSteps: workflow.steps.length,\n        workflowName: workflow.name,\n      });\n\n      const tools = buildToolsFromGroups(mode.groups);\n      const instanceId = `sparc-workflow-${i + 1}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n\n      await executeClaudeWithSparc(enhancedTask, tools, instanceId, ctx.flags);\n\n      if (workflow.sequential !== false && i < workflow.steps.length - 1) {\n        console.log('Step completed. Press Enter to continue, or Ctrl+C to stop...');\n        await new Promise<void>((resolve) => {\n          const readline = require('readline');\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          rl.question('', () => {\n            rl.close();\n            resolve();\n          });\n        });\n      }\n    }\n\n    success('SPARC workflow completed!');\n  } catch (err) {\n    error(`Failed to run workflow: ${(err as Error).message}`);\n  }\n}\n\nfunction buildSparcPrompt(mode: SparcMode, taskDescription: string, flags: any): string {\n  const memoryNamespace = flags.namespace || mode.slug || 'default';\n\n  return `# SPARC Development Mode: ${mode.name}\n\n## Your Role\n${mode.roleDefinition}\n\n## Your Task\n${taskDescription}\n\n## Mode-Specific Instructions\n${mode.customInstructions}\n\n## SPARC Development Environment\n\nYou are working within the SPARC (Specification, Pseudocode, Architecture, Refinement, Completion) methodology using claude-flow orchestration features.\n\n### Available Development Tools\n- **Memory Persistence**: Use \\`npx claude-flow memory store <key> \"<value>\"\\` to save progress and findings\n- **Memory Retrieval**: Use \\`npx claude-flow memory query <search>\\` to access previous work\n- **Namespace**: Your work is stored in the \"${memoryNamespace}\" namespace\n\n### SPARC Methodology Integration\n${\n  flags.tddPhase\n    ? `\n**Current TDD Phase**: ${flags.tddPhase}\n- Follow the Red-Green-Refactor cycle\n- Store test results and refactoring notes in memory\n`\n    : ''\n}\n\n${\n  flags.workflowStep\n    ? `\n**Workflow Progress**: Step ${flags.workflowStep} of ${flags.totalSteps}\n- Review previous steps: \\`npx claude-flow memory query previous_steps\\`\n- Store this step's output: \\`npx claude-flow memory store step_${flags.workflowStep}_output \"<results>\"\\`\n`\n    : ''\n}\n\n### Best Practices\n1. **Modular Development**: Keep all files under 500 lines\n2. **Environment Safety**: Never hardcode secrets or environment values\n3. **Memory Usage**: Store key findings and decisions in memory for future reference\n4. **Tool Integration**: Use \\`new_task\\` for subtasks and \\`attempt_completion\\` when finished\n\n### Memory Commands Examples\n\\`\\`\\`bash\n# Store your progress\nnpx claude-flow memory store ${memoryNamespace}_progress \"Current status and findings\"\n\n# Check for previous work\nnpx claude-flow memory query ${memoryNamespace}\n\n# Store phase-specific results\nnpx claude-flow memory store ${memoryNamespace}_${flags.tddPhase || 'results'} \"Phase output and decisions\"\n\\`\\`\\`\n\n### Integration with Other SPARC Modes\nWhen working with other SPARC modes, use memory to:\n- Share findings with spec-pseudocode mode\n- Pass requirements to architect mode  \n- Coordinate with code and tdd modes\n- Communicate results to integration mode\n\nNow proceed with your task following the SPARC methodology and your specific role instructions.`;\n}\n\nfunction buildToolsFromGroups(groups: string[]): string {\n  const toolMappings: Record<string, string[]> = {\n    read: ['View', 'LS', 'GlobTool', 'GrepTool'],\n    edit: ['Edit', 'Replace', 'MultiEdit', 'Write'],\n    browser: ['WebFetch'],\n    mcp: ['mcp_tools'],\n    command: ['Bash', 'Terminal'],\n  };\n\n  const tools = new Set<string>();\n\n  // Always include basic tools\n  tools.add('View');\n  tools.add('Edit');\n  tools.add('Bash');\n\n  for (const group of groups) {\n    if (Array.isArray(group)) {\n      // Handle nested group definitions\n      const groupName = group[0];\n      if (toolMappings[groupName]) {\n        toolMappings[groupName].forEach((tool) => tools.add(tool));\n      }\n    } else if (toolMappings[group]) {\n      toolMappings[group].forEach((tool) => tools.add(tool));\n    }\n  }\n\n  return Array.from(tools).join(',');\n}\n\nasync function executeClaudeWithSparc(\n  enhancedTask: string,\n  tools: string,\n  instanceId: string,\n  flags: any,\n): Promise<void> {\n  const claudeArgs = [enhancedTask];\n  claudeArgs.push('--allowedTools', tools);\n\n  if (flags.noPermissions || flags['no-permissions']) {\n    claudeArgs.push('--dangerously-skip-permissions');\n  }\n\n  if (flags.config) {\n    claudeArgs.push('--mcp-config', flags.config);\n  }\n\n  if (flags.verbose) {\n    claudeArgs.push('--verbose');\n  }\n\n  try {\n    const { spawn } = await import('child_process');\n    const child = spawn('claude', claudeArgs, {\n      env: {\n        ...process.env,\n        CLAUDE_INSTANCE_ID: instanceId,\n        CLAUDE_SPARC_MODE: 'true',\n        CLAUDE_FLOW_MEMORY_ENABLED: 'true',\n        CLAUDE_FLOW_MEMORY_NAMESPACE: flags.namespace || 'sparc',\n      },\n      stdio: 'inherit',\n    });\n\n    const status = await new Promise<{ success: boolean; code: number | null }>((resolve) => {\n      child.on('close', (code) => {\n        resolve({ success: code === 0, code });\n      });\n    });\n\n    if ((status as any).success) {\n      success(`SPARC instance ${instanceId} completed successfully`);\n    } else {\n      error(`SPARC instance ${instanceId} exited with code ${(status as any).code}`);\n    }\n  } catch (err) {\n    error(`Failed to execute Claude: ${(err as Error).message}`);\n  }\n}\n\nasync function showSparcHelp(): Promise<void> {\n  console.log(\n    `${cyan('SPARC')} - ${green('Specification, Pseudocode, Architecture, Refinement, Completion')}`,\n  );\n  console.log();\n  console.log('SPARC development methodology with TDD and multi-agent coordination.');\n  console.log();\n  console.log(blue('Commands:'));\n  console.log('  modes                    List all available SPARC modes');\n  console.log('  info <mode>              Show detailed information about a mode');\n  console.log('  run <mode> <task>        Execute a task using a specific SPARC mode');\n  console.log('  tdd <task>               Run full TDD workflow using SPARC methodology');\n  console.log('  workflow <file>          Execute a custom SPARC workflow from JSON file');\n  console.log();\n  console.log(blue('Common Modes:'));\n  console.log('  spec-pseudocode          Create specifications and pseudocode');\n  console.log('  architect                Design system architecture');\n  console.log('  code                     Implement code solutions');\n  console.log('  tdd                      Test-driven development');\n  console.log('  debug                    Debug and troubleshoot issues');\n  console.log('  security-review          Security analysis and review');\n  console.log('  docs-writer              Documentation creation');\n  console.log('  integration              System integration and testing');\n  console.log();\n  console.log(blue('Options:'));\n  console.log('  --namespace <ns>         Memory namespace for this session');\n  console.log('  --no-permissions         Skip permission prompts');\n  console.log('  --config <file>          MCP configuration file');\n  console.log('  --verbose               Enable verbose output');\n  console.log('  --dry-run               Preview what would be executed');\n  console.log('  --sequential            Wait between workflow steps (default: true)');\n  console.log();\n  console.log(blue('Examples:'));\n  console.log(\n    `  ${yellow('claude-flow sparc modes')}                              # List all modes`,\n  );\n  console.log(\n    `  ${yellow('claude-flow sparc run code')} \"implement user auth\"      # Run specific mode`,\n  );\n  console.log(\n    `  ${yellow('claude-flow sparc tdd')} \"payment processing system\"    # Full TDD workflow`,\n  );\n  console.log(\n    `  ${yellow('claude-flow sparc workflow')} project-workflow.json     # Custom workflow`,\n  );\n  console.log();\n  console.log(blue('TDD Workflow:'));\n  console.log('  1. Specification - Define requirements and create pseudocode');\n  console.log('  2. Red Phase - Write failing tests');\n  console.log('  3. Green Phase - Implement minimal code to pass tests');\n  console.log('  4. Refactor Phase - Optimize and clean up code');\n  console.log('  5. Integration - Verify complete solution');\n  console.log();\n  console.log('For more information: https://github.com/ruvnet/claude-code-flow/docs/sparc.md');\n}\n"],"names":["success","error","warning","info","chalk","blue","yellow","green","magenta","cyan","sparcConfig","loadSparcConfig","configPath","readFile","content","JSON","parse","Error","message","String","sparcAction","ctx","subcommand","args","listSparcModes","showModeInfo","runSparcMode","runTddFlow","runSparcWorkflow","showSparcHelp","config","verbose","flags","console","log","mode","customModes","name","slug","roleDefinition","groups","join","err","modeSlug","find","m","customInstructions","source","taskDescription","slice","enhancedTask","buildSparcPrompt","instanceId","Date","now","Math","random","toString","substr","tools","buildToolsFromGroups","dryRun","substring","executeClaudeWithSparc","workflow","phase","description","step","i","length","tddPhase","workflowStep","totalSteps","toLowerCase","sequential","Promise","resolve","readline","rl","createInterface","input","process","stdin","output","stdout","question","close","workflowFile","workflowContent","steps","Array","isArray","task","workflowName","require","memoryNamespace","namespace","toolMappings","read","edit","browser","mcp","command","Set","add","group","groupName","forEach","tool","from","claudeArgs","push","noPermissions","spawn","child","env","CLAUDE_INSTANCE_ID","CLAUDE_SPARC_MODE","CLAUDE_FLOW_MEMORY_ENABLED","CLAUDE_FLOW_MEMORY_NAMESPACE","stdio","status","on","code"],"mappings":"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"}