{"version":3,"sources":["../../../../src/cli/commands/ruv-swarm.ts"],"sourcesContent":["/**\n * ruv-swarm CLI commands for Claude Code integration\n *\n * This module provides CLI commands that interact with the ruv-swarm\n * package to enable advanced swarm coordination and neural capabilities.\n */\n\nimport { success, error, warning, info } from '../cli-core.js';\nimport type { CommandContext } from '../cli-core.js';\nimport { getRuvSwarmConfigManager } from '../../config/ruv-swarm-config.js';\nimport { execAsync } from '../../utils/helpers.js';\nimport { Logger } from '../../core/logger.js';\nimport { isRuvSwarmAvailable, initializeRuvSwarmIntegration } from '../../mcp/ruv-swarm-tools.js';\n\n// Create logger for CLI commands\nconst logger = new Logger({ level: 'info', format: 'text', destination: 'console' });\n\n/**\n * Main ruv-swarm command handler\n */\nexport async function ruvSwarmAction(ctx: CommandContext) {\n  if (ctx.flags.help || ctx.flags.h || ctx.args.length === 0) {\n    showRuvSwarmHelp();\n    return;\n  }\n\n  const subcommand = ctx.args[0];\n  const subArgs = ctx.args.slice(1);\n  const subCtx: CommandContext = {\n    ...ctx,\n    args: subArgs,\n  };\n\n  try {\n    // Check if ruv-swarm is available first\n    const available = await isRuvSwarmAvailable(logger);\n    if (!available) {\n      error('ruv-swarm is not available');\n      console.log('Install it with: npm install -g ruv-swarm');\n      console.log('Or locally: npm install ruv-swarm');\n      return;\n    }\n\n    switch (subcommand) {\n      case 'init':\n        await handleInit(subCtx);\n        break;\n      case 'status':\n        await handleStatus(subCtx);\n        break;\n      case 'spawn':\n        await handleSpawn(subCtx);\n        break;\n      case 'list':\n        await handleList(subCtx);\n        break;\n      case 'orchestrate':\n        await handleOrchestrate(subCtx);\n        break;\n      case 'monitor':\n        await handleMonitor(subCtx);\n        break;\n      case 'neural':\n        await handleNeural(subCtx);\n        break;\n      case 'benchmark':\n        await handleBenchmark(subCtx);\n        break;\n      case 'config':\n        await handleConfig(subCtx);\n        break;\n      case 'memory':\n        await handleMemory(subCtx);\n        break;\n      default:\n        error(`Unknown ruv-swarm subcommand: ${subcommand}`);\n        showRuvSwarmHelp();\n        break;\n    }\n  } catch (err) {\n    error(`ruv-swarm command failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Show ruv-swarm help\n */\nfunction showRuvSwarmHelp() {\n  console.log(\n    'ruv-swarm - Advanced AI swarm coordination with neural capabilities\\\n',\n  );\n\n  console.log('Usage:');\n  console.log(\n    '  claude-flow ruv-swarm <command> [options]\\\n',\n  );\n\n  console.log('Commands:');\n  console.log('  init                       Initialize a new ruv-swarm');\n  console.log('  status [--verbose]         Get swarm status');\n  console.log('  spawn <type> [--name]      Spawn a new agent');\n  console.log('  list [--filter]           List all agents');\n  console.log('  orchestrate <task>         Orchestrate a task across the swarm');\n  console.log('  monitor [--duration]       Monitor swarm activity');\n  console.log('  neural <subcommand>        Neural capabilities management');\n  console.log('  benchmark [--type]         Run performance benchmarks');\n  console.log('  config <subcommand>        Configuration management');\n  console.log(\n    '  memory [--detail]          Memory usage and management\\\n',\n  );\n\n  console.log('Examples:');\n  console.log('  claude-flow ruv-swarm init --topology mesh --max-agents 8');\n  console.log('  claude-flow ruv-swarm spawn researcher --name \\\"AI Researcher\\\"');\n  console.log('  claude-flow ruv-swarm orchestrate \\\"Build a REST API\\\"');\n  console.log('  claude-flow ruv-swarm neural train --iterations 20');\n  console.log('  claude-flow ruv-swarm benchmark --type swarm');\n}\n\n/**\n * Handle swarm initialization\n */\nasync function handleInit(ctx: CommandContext) {\n  const topology = (ctx.flags.topology as string) || 'mesh';\n  const maxAgents = (ctx.flags.maxAgents as number) || (ctx.flags['max-agents'] as number) || 5;\n  const strategy = (ctx.flags.strategy as string) || 'balanced';\n\n  if (!['mesh', 'hierarchical', 'ring', 'star'].includes(topology)) {\n    error('Invalid topology. Use: mesh, hierarchical, ring, or star');\n    return;\n  }\n\n  if (maxAgents < 1 || maxAgents > 100) {\n    error('Max agents must be between 1 and 100');\n    return;\n  }\n\n  info(`Initializing ruv-swarm with ${topology} topology...`);\n\n  try {\n    const command = `npx ruv-swarm swarm init --topology ${topology} --max-agents ${maxAgents} --strategy ${strategy}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      success('Swarm initialized successfully!');\n      console.log(result.stdout);\n    }\n\n    // Initialize integration\n    const integration = await initializeRuvSwarmIntegration(process.cwd(), logger);\n    if (integration.success) {\n      info('Claude Code integration enabled');\n    } else {\n      warning(`Integration warning: ${integration.error}`);\n    }\n  } catch (err) {\n    error(`Failed to initialize swarm: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle swarm status\n */\nasync function handleStatus(ctx: CommandContext) {\n  const verbose = (ctx.flags.verbose as boolean) || (ctx.flags.v as boolean) || false;\n\n  try {\n    const command = `npx ruv-swarm swarm status${verbose ? ' --verbose' : ''}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      // Try to parse as JSON for better formatting\n      try {\n        const statusData = JSON.parse(result.stdout);\n\n        if (statusData.success && statusData.data) {\n          console.log(\n            'üêù Swarm Status:\\\n',\n          );\n\n          const data = statusData.data;\n          if (data.swarmId) {\n            console.log(`  Swarm ID: ${data.swarmId}`);\n          }\n          if (data.topology) {\n            console.log(`  Topology: ${data.topology}`);\n          }\n          if (data.agents !== undefined) {\n            console.log(`  Active Agents: ${data.agents.active || 0}/${data.agents.total || 0}`);\n          }\n          if (data.tasks !== undefined) {\n            console.log(\n              `  Tasks: ${data.tasks.completed || 0} completed, ${data.tasks.running || 0} running`,\n            );\n          }\n          if (data.memory) {\n            console.log(`  Memory Usage: ${data.memory.used || 'N/A'}`);\n          }\n\n          if (verbose && data.details) {\n            console.log(\n              '\\\nüìã Detailed Status:',\n            );\n            console.log(JSON.stringify(data.details, null, 2));\n          }\n        } else {\n          console.log(result.stdout);\n        }\n      } catch {\n        // Not JSON, display as-is\n        console.log(result.stdout);\n      }\n    }\n\n    if (result.stderr) {\n      warning(result.stderr);\n    }\n  } catch (err) {\n    error(`Failed to get swarm status: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle agent spawning\n */\nasync function handleSpawn(ctx: CommandContext) {\n  if (ctx.args.length === 0) {\n    error('Agent type is required');\n    console.log('Usage: claude-flow ruv-swarm spawn <type> [--name <name>]');\n    console.log('Types: researcher, coder, analyst, optimizer, coordinator');\n    return;\n  }\n\n  const type = ctx.args[0];\n  const name = ctx.flags.name as string;\n  const capabilities = ctx.flags.capabilities as string;\n\n  if (!['researcher', 'coder', 'analyst', 'optimizer', 'coordinator'].includes(type)) {\n    error('Invalid agent type');\n    console.log('Valid types: researcher, coder, analyst, optimizer, coordinator');\n    return;\n  }\n\n  info(`Spawning ${type} agent...`);\n\n  try {\n    let command = `npx ruv-swarm agent spawn --type ${type}`;\n\n    if (name) {\n      command += ` --name \\\"${name}\\\"`;\n    }\n\n    if (capabilities) {\n      command += ` --capabilities \\\"${capabilities}\\\"`;\n    }\n\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      try {\n        const spawnData = JSON.parse(result.stdout);\n        if (spawnData.success) {\n          success(`Agent spawned successfully!`);\n          console.log(`  Agent ID: ${spawnData.data.agentId}`);\n          if (spawnData.data.agentName) {\n            console.log(`  Name: ${spawnData.data.agentName}`);\n          }\n          console.log(`  Type: ${type}`);\n        } else {\n          error(`Failed to spawn agent: ${spawnData.error}`);\n        }\n      } catch {\n        console.log(result.stdout);\n      }\n    }\n  } catch (err) {\n    error(`Failed to spawn agent: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle agent listing\n */\nasync function handleList(ctx: CommandContext) {\n  const filter = (ctx.flags.filter as string) || 'all';\n\n  try {\n    const command = `npx ruv-swarm agent list --filter ${filter}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      try {\n        const listData = JSON.parse(result.stdout);\n        if (listData.success && listData.data.agents) {\n          console.log(`ü§ñ Agents (${listData.data.count}):`);\n\n          if (listData.data.count === 0) {\n            console.log('  No agents found');\n            return;\n          }\n\n          listData.data.agents.forEach((agent: any, index: number) => {\n            console.log(`\\\n  ${index + 1}. ${agent.id || agent.agentId}`);\n            console.log(`     Type: ${agent.type}`);\n            console.log(`     Status: ${agent.status}`);\n            if (agent.name && agent.name !== agent.id) {\n              console.log(`     Name: ${agent.name}`);\n            }\n            if (agent.capabilities && agent.capabilities.length > 0) {\n              console.log(`     Capabilities: ${agent.capabilities.join(', ')}`);\n            }\n          });\n        } else {\n          console.log(result.stdout);\n        }\n      } catch {\n        console.log(result.stdout);\n      }\n    }\n  } catch (err) {\n    error(`Failed to list agents: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle task orchestration\n */\nasync function handleOrchestrate(ctx: CommandContext) {\n  if (ctx.args.length === 0) {\n    error('Task description is required');\n    console.log('Usage: claude-flow ruv-swarm orchestrate \\\"<task description>\\\" [options]');\n    return;\n  }\n\n  const task = ctx.args.join(' ');\n  const strategy = (ctx.flags.strategy as string) || 'adaptive';\n  const priority = (ctx.flags.priority as string) || 'medium';\n  const maxAgents = (ctx.flags.maxAgents as number) || (ctx.flags['max-agents'] as number);\n\n  info(`Orchestrating task: ${task}`);\n\n  try {\n    let command = `npx ruv-swarm task orchestrate --task \\\"${task}\\\" --strategy ${strategy} --priority ${priority}`;\n\n    if (maxAgents) {\n      command += ` --max-agents ${maxAgents}`;\n    }\n\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      try {\n        const taskData = JSON.parse(result.stdout);\n        if (taskData.success) {\n          success('Task orchestration started!');\n          console.log(`  Task ID: ${taskData.data.taskId}`);\n          console.log(`  Strategy: ${strategy}`);\n          console.log(`  Priority: ${priority}`);\n\n          if (taskData.data.assignedAgents) {\n            console.log(`  Assigned Agents: ${taskData.data.assignedAgents}`);\n          }\n        } else {\n          error(`Failed to orchestrate task: ${taskData.error}`);\n        }\n      } catch {\n        console.log(result.stdout);\n      }\n    }\n  } catch (err) {\n    error(`Failed to orchestrate task: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle swarm monitoring\n */\nasync function handleMonitor(ctx: CommandContext) {\n  const duration = (ctx.flags.duration as number) || 30;\n  const interval = (ctx.flags.interval as number) || 5;\n\n  info(`Monitoring swarm for ${duration} seconds...`);\n\n  try {\n    const command = `npx ruv-swarm swarm monitor --duration ${duration} --interval ${interval}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      console.log(result.stdout);\n    }\n  } catch (err) {\n    error(`Failed to monitor swarm: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle neural capabilities\n */\nasync function handleNeural(ctx: CommandContext) {\n  if (ctx.args.length === 0) {\n    console.log('Neural subcommands:');\n    console.log('  status     - Get neural agent status');\n    console.log('  train      - Train neural agents');\n    console.log('  patterns   - View cognitive patterns');\n    return;\n  }\n\n  const subcommand = ctx.args[0];\n\n  try {\n    switch (subcommand) {\n      case 'status': {\n        const agentId = (ctx.flags.agentId as string) || (ctx.flags['agent-id'] as string);\n        let command = 'npx ruv-swarm neural status';\n\n        if (agentId) {\n          command += ` --agent-id ${agentId}`;\n        }\n\n        const result = await execAsync(command);\n        if (result.stdout) {\n          console.log(result.stdout);\n        }\n        break;\n      }\n\n      case 'train': {\n        const agentId = (ctx.flags.agentId as string) || (ctx.flags['agent-id'] as string);\n        const iterations = (ctx.flags.iterations as number) || 10;\n\n        let command = `npx ruv-swarm neural train --iterations ${iterations}`;\n\n        if (agentId) {\n          command += ` --agent-id ${agentId}`;\n        }\n\n        info(`Training neural agents for ${iterations} iterations...`);\n\n        const result = await execAsync(command);\n        if (result.stdout) {\n          console.log(result.stdout);\n        }\n        break;\n      }\n\n      case 'patterns': {\n        const pattern = (ctx.flags.pattern as string) || 'all';\n        const command = `npx ruv-swarm neural patterns --pattern ${pattern}`;\n\n        const result = await execAsync(command);\n        if (result.stdout) {\n          console.log(result.stdout);\n        }\n        break;\n      }\n\n      default:\n        error(`Unknown neural subcommand: ${subcommand}`);\n        break;\n    }\n  } catch (err) {\n    error(`Neural command failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle benchmarking\n */\nasync function handleBenchmark(ctx: CommandContext) {\n  const type = (ctx.flags.type as string) || 'all';\n  const iterations = (ctx.flags.iterations as number) || 10;\n\n  info(`Running ${type} benchmark with ${iterations} iterations...`);\n\n  try {\n    const command = `npx ruv-swarm benchmark run --type ${type} --iterations ${iterations}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      console.log(result.stdout);\n    }\n  } catch (err) {\n    error(`Benchmark failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle configuration management\n */\nasync function handleConfig(ctx: CommandContext) {\n  if (ctx.args.length === 0) {\n    console.log('Config subcommands:');\n    console.log('  show       - Show current configuration');\n    console.log('  set        - Set configuration value');\n    console.log('  reset      - Reset to defaults');\n    console.log('  validate   - Validate configuration');\n    return;\n  }\n\n  const subcommand = ctx.args[0];\n  const configManager = getRuvSwarmConfigManager(logger);\n\n  try {\n    switch (subcommand) {\n      case 'show': {\n        const config = configManager.getConfig();\n        console.log(\n          'üîß ruv-swarm Configuration:\\\n',\n        );\n        console.log(JSON.stringify(config, null, 2));\n        break;\n      }\n\n      case 'set': {\n        if (ctx.args.length < 3) {\n          error('Usage: config set <section>.<key> <value>');\n          console.log('Example: config set swarm.maxAgents 10');\n          return;\n        }\n\n        const path = ctx.args[1];\n        const value = ctx.args[2];\n        const [section, key] = path.split('.');\n\n        if (!section || !key) {\n          error('Invalid path format. Use: section.key');\n          return;\n        }\n\n        // Parse value\n        let parsedValue: any = value;\n        if (value === 'true') parsedValue = true;\n        else if (value === 'false') parsedValue = false;\n        else if (!isNaN(Number(value))) parsedValue = Number(value);\n\n        const updates = { [section]: { [key]: parsedValue } };\n        configManager.updateConfig(updates);\n\n        success(`Configuration updated: ${path} = ${value}`);\n        break;\n      }\n\n      case 'reset': {\n        configManager.resetConfig();\n        success('Configuration reset to defaults');\n        break;\n      }\n\n      case 'validate': {\n        const validation = configManager.validateConfig();\n        if (validation.valid) {\n          success('Configuration is valid');\n        } else {\n          error('Configuration validation failed:');\n          validation.errors.forEach((err) => console.log(`  - ${err}`));\n        }\n        break;\n      }\n\n      default:\n        error(`Unknown config subcommand: ${subcommand}`);\n        break;\n    }\n  } catch (err) {\n    error(`Config command failed: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Handle memory management\n */\nasync function handleMemory(ctx: CommandContext) {\n  const detail = (ctx.flags.detail as string) || 'summary';\n\n  try {\n    const command = `npx ruv-swarm memory usage --detail ${detail}`;\n    const result = await execAsync(command);\n\n    if (result.stdout) {\n      try {\n        const memoryData = JSON.parse(result.stdout);\n        if (memoryData.success) {\n          console.log(\n            'üíæ Memory Usage:\\\n',\n          );\n\n          const data = memoryData.data;\n          if (data.total !== undefined) {\n            console.log(`  Total Memory: ${formatBytes(data.total)}`);\n          }\n          if (data.used !== undefined) {\n            console.log(`  Used Memory: ${formatBytes(data.used)}`);\n          }\n          if (data.available !== undefined) {\n            console.log(`  Available: ${formatBytes(data.available)}`);\n          }\n          if (data.swarmUsage !== undefined) {\n            console.log(`  Swarm Usage: ${formatBytes(data.swarmUsage)}`);\n          }\n\n          if (detail === 'detailed' && data.breakdown) {\n            console.log(\n              '\\\nüìä Memory Breakdown:',\n            );\n            console.log(JSON.stringify(data.breakdown, null, 2));\n          }\n        } else {\n          console.log(result.stdout);\n        }\n      } catch {\n        console.log(result.stdout);\n      }\n    }\n  } catch (err) {\n    error(`Failed to get memory usage: ${(err as Error).message}`);\n  }\n}\n\n/**\n * Format bytes to human readable string\n */\nfunction formatBytes(bytes: number): string {\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes === 0) return '0 B';\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + ' ' + sizes[i];\n}\n\nexport default {\n  ruvSwarmAction,\n};\n"],"names":["success","error","warning","info","getRuvSwarmConfigManager","execAsync","Logger","isRuvSwarmAvailable","initializeRuvSwarmIntegration","logger","level","format","destination","ruvSwarmAction","ctx","flags","help","h","args","length","showRuvSwarmHelp","subcommand","subArgs","slice","subCtx","available","console","log","handleInit","handleStatus","handleSpawn","handleList","handleOrchestrate","handleMonitor","handleNeural","handleBenchmark","handleConfig","handleMemory","err","message","topology","maxAgents","strategy","includes","command","result","stdout","integration","process","cwd","verbose","v","statusData","JSON","parse","data","swarmId","agents","undefined","active","total","tasks","completed","running","memory","used","details","stringify","stderr","type","name","capabilities","spawnData","agentId","agentName","filter","listData","count","forEach","agent","index","id","status","join","task","priority","taskData","taskId","assignedAgents","duration","interval","iterations","pattern","configManager","config","getConfig","path","value","section","key","split","parsedValue","isNaN","Number","updates","updateConfig","resetConfig","validation","validateConfig","valid","errors","detail","memoryData","formatBytes","swarmUsage","breakdown","bytes","sizes","i","Math","floor","round","pow"],"mappings":"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"}