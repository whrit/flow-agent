{"version":3,"sources":["../../../../src/cli/commands/goal-init.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport chalk from 'chalk';\nimport { logger } from '../../monitoring/logger.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface InitOptions {\n  force?: boolean;\n  targetDir?: string;\n}\n\nexport class GoalInitCommand {\n  private readonly sourcePath = path.resolve(__dirname, '../../../.claude/agents/goal');\n  \n  async execute(options: InitOptions = {}): Promise<void> {\n    const targetDir = options.targetDir || '.claude/agents/goal';\n    const absoluteTarget = path.resolve(process.cwd(), targetDir);\n    \n    logger.info(chalk.magenta('üéØ Initializing Claude Flow Goal Module...'));\n    \n    try {\n      // Check if target exists\n      const exists = await this.checkExists(absoluteTarget);\n      \n      if (exists && !options.force) {\n        logger.warn(chalk.yellow('‚ö†Ô∏è  Goal module already exists. Use --force to overwrite.'));\n        const prompt = await this.confirmOverwrite();\n        if (!prompt) {\n          logger.info(chalk.gray('Installation cancelled.'));\n          return;\n        }\n      }\n      \n      // Create target directory\n      await fs.mkdir(absoluteTarget, { recursive: true });\n      \n      // Copy goal agent files\n      await this.copyGoalFiles(absoluteTarget);\n      \n      // Initialize configuration\n      await this.initializeConfig(absoluteTarget);\n      \n      // Verify installation\n      const verified = await this.verifyInstallation(absoluteTarget);\n      \n      if (verified) {\n        logger.success(chalk.green('‚úÖ Goal module initialized successfully!'));\n        this.printUsage();\n      } else {\n        throw new Error('Installation verification failed');\n      }\n      \n    } catch (error) {\n      logger.error(chalk.red('‚ùå Failed to initialize goal module:'), error);\n      throw error;\n    }\n  }\n  \n  private async checkExists(targetPath: string): Promise<boolean> {\n    try {\n      await fs.access(targetPath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  \n  private async confirmOverwrite(): Promise<boolean> {\n    // In a real implementation, this would use inquirer or similar\n    // For now, we'll return false to be safe\n    console.log(chalk.yellow('Would you like to overwrite? (y/N)'));\n    return false;\n  }\n  \n  private async copyGoalFiles(targetDir: string): Promise<void> {\n    // Copy goal-planner agent\n    const plannerSource = path.join(this.sourcePath, 'goal-planner.md');\n    const plannerTarget = path.join(targetDir, 'goal-planner.md');\n    \n    // Check if source exists in package\n    try {\n      // First try to copy from local installation\n      await fs.copyFile(plannerSource, plannerTarget);\n      logger.info(chalk.gray('  ‚Ä¢ Copied goal-planner.md'));\n    } catch (error) {\n      // If not found locally, create from embedded template\n      await this.createPlannerTemplate(plannerTarget);\n      logger.info(chalk.gray('  ‚Ä¢ Created goal-planner.md from template'));\n    }\n    \n    // Create additional goal agents if needed\n    await this.createGoalAgents(targetDir);\n  }\n  \n  private async createPlannerTemplate(targetPath: string): Promise<void> {\n    const template = `---\nname: goal-planner\ndescription: \"Goal-Oriented Action Planning (GOAP) specialist\"\ncolor: purple\n---\n\n# Goal-Oriented Action Planning Agent\n\nUses gaming AI techniques to create intelligent plans for achieving complex objectives.\n\n## Core Capabilities\n- Dynamic planning with A* search algorithms\n- Precondition analysis and effect prediction\n- Adaptive replanning based on execution results\n- Mixed execution (LLM + deterministic code)\n- Tool group management\n\n## Planning Methodology\n1. **State Assessment**: Analyze current vs goal state\n2. **Action Analysis**: Inventory available actions\n3. **Plan Generation**: A* pathfinding for optimal sequences\n4. **Execution Monitoring**: OODA loop (Observe-Orient-Decide-Act)\n5. **Dynamic Replanning**: Adapt to changing conditions\n\n## Usage\n\\`\\`\\`bash\n# Initialize goal planning\nnpx claude-flow goal plan --objective \"deploy application\"\n\n# Execute plan\nnpx claude-flow goal execute --plan deployment-plan\n\\`\\`\\`\n`;\n    await fs.writeFile(targetPath, template);\n  }\n  \n  private async createGoalAgents(targetDir: string): Promise<void> {\n    // Create additional goal-oriented agents\n    const agents = [\n      {\n        name: 'goal-executor.md',\n        content: this.getExecutorTemplate()\n      },\n      {\n        name: 'goal-monitor.md',\n        content: this.getMonitorTemplate()\n      },\n      {\n        name: 'goal-optimizer.md',\n        content: this.getOptimizerTemplate()\n      }\n    ];\n    \n    for (const agent of agents) {\n      const targetPath = path.join(targetDir, agent.name);\n      await fs.writeFile(targetPath, agent.content);\n      logger.info(chalk.gray(`  ‚Ä¢ Created ${agent.name}`));\n    }\n  }\n  \n  private getExecutorTemplate(): string {\n    return `---\nname: goal-executor\ndescription: \"Executes goal-oriented action plans\"\ncolor: green\n---\n\n# Goal Executor Agent\n\nResponsible for executing action plans generated by the goal-planner.\n\n## Features\n- Sequential and parallel action execution\n- Precondition verification\n- Effect validation\n- Rollback on failure\n`;\n  }\n  \n  private getMonitorTemplate(): string {\n    return `---\nname: goal-monitor\ndescription: \"Monitors goal progress and triggers replanning\"\ncolor: yellow\n---\n\n# Goal Monitor Agent\n\nTracks plan execution and identifies when replanning is needed.\n\n## Features\n- Real-time progress tracking\n- Deviation detection\n- Performance metrics\n- Replanning triggers\n`;\n  }\n  \n  private getOptimizerTemplate(): string {\n    return `---\nname: goal-optimizer\ndescription: \"Optimizes action plans for efficiency\"\ncolor: blue\n---\n\n# Goal Optimizer Agent\n\nOptimizes action sequences for cost, time, and resource efficiency.\n\n## Features\n- Cost minimization\n- Parallel execution identification\n- Resource allocation\n- Plan compression\n`;\n  }\n  \n  private async initializeConfig(targetDir: string): Promise<void> {\n    const config = {\n      version: '1.0.0',\n      goal: {\n        enabled: true,\n        algorithm: 'astar',\n        maxPlanDepth: 100,\n        replanning: {\n          enabled: true,\n          threshold: 0.3,\n          maxRetries: 3\n        },\n        execution: {\n          mode: 'mixed',  // mixed, llm, code\n          parallel: true,\n          monitoring: true\n        }\n      },\n      agents: [\n        'goal-planner',\n        'goal-executor',\n        'goal-monitor',\n        'goal-optimizer'\n      ]\n    };\n    \n    const configPath = path.join(targetDir, 'config.json');\n    await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n    logger.info(chalk.gray('  ‚Ä¢ Created goal config.json'));\n  }\n  \n  private async verifyInstallation(targetDir: string): Promise<boolean> {\n    const requiredFiles = [\n      'goal-planner.md',\n      'goal-executor.md',\n      'goal-monitor.md',\n      'goal-optimizer.md',\n      'config.json'\n    ];\n    \n    for (const file of requiredFiles) {\n      const filePath = path.join(targetDir, file);\n      const exists = await this.checkExists(filePath);\n      if (!exists) {\n        logger.error(chalk.red(`  ‚úó Missing required file: ${file}`));\n        return false;\n      }\n      logger.info(chalk.gray(`  ‚úì Verified ${file}`));\n    }\n    \n    return true;\n  }\n  \n  private printUsage(): void {\n    console.log('\\n' + chalk.magenta('üìö Usage:'));\n    console.log(chalk.gray('  npx claude-flow goal plan --objective \"your goal\"'));\n    console.log(chalk.gray('  npx claude-flow goal execute --plan plan-id'));\n    console.log(chalk.gray('  @agent-goal-planner \"Create deployment plan\"'));\n    console.log('\\n' + chalk.magenta('üîó Documentation:'));\n    console.log(chalk.gray('  https://github.com/ruvnet/claude-flow'));\n  }\n}\n\n// CLI execution\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const command = new GoalInitCommand();\n  const options: InitOptions = {};\n  \n  if (process.argv.includes('--force')) {\n    options.force = true;\n  }\n  \n  const targetIndex = process.argv.indexOf('--target');\n  if (targetIndex !== -1 && process.argv[targetIndex + 1]) {\n    options.targetDir = process.argv[targetIndex + 1];\n  }\n  \n  command.execute(options).catch(process.exit);\n}\n\nexport default GoalInitCommand;"],"names":["promises","fs","path","fileURLToPath","chalk","logger","__filename","url","__dirname","dirname","GoalInitCommand","sourcePath","resolve","execute","options","targetDir","absoluteTarget","process","cwd","info","magenta","exists","checkExists","force","warn","yellow","prompt","confirmOverwrite","gray","mkdir","recursive","copyGoalFiles","initializeConfig","verified","verifyInstallation","success","green","printUsage","Error","error","red","targetPath","access","console","log","plannerSource","join","plannerTarget","copyFile","createPlannerTemplate","createGoalAgents","template","writeFile","agents","name","content","getExecutorTemplate","getMonitorTemplate","getOptimizerTemplate","agent","config","version","goal","enabled","algorithm","maxPlanDepth","replanning","threshold","maxRetries","execution","mode","parallel","monitoring","configPath","JSON","stringify","requiredFiles","file","filePath","argv","command","includes","targetIndex","indexOf","catch","exit"],"mappings":"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"}