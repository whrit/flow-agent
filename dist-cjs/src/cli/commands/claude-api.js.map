{"version":3,"sources":["../../../../src/cli/commands/claude-api.ts"],"sourcesContent":["/**\n * Claude API management commands\n */\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { Command } from '../commander-fix.js';\nimport { ConfigManager } from '../../config/config-manager.js';\nimport { ClaudeAPIClient, ClaudeModel } from '../../api/claude-client.js';\nimport { Logger } from '../../core/logger.js';\nimport { getErrorMessage } from '../../utils/error-handler.js';\n\nexport const claudeApiCommand = new Command()\n  .name('claude-api')\n  .description('Manage Claude API configuration and test connectivity')\n  .action(() => {\n    claudeApiCommand.help();\n  });\n\n// Configure command\nclaudeApiCommand\n  .command('configure')\n  .description('Configure Claude API settings')\n  .option('--api-key <key>', 'Claude API key')\n  .option('--model <model>', 'Claude model to use')\n  .option('--temperature <temp>', 'Temperature (0.0-1.0)', parseFloat)\n  .option('--max-tokens <tokens>', 'Maximum tokens', parseInt)\n  .option('--interactive', 'Interactive configuration')\n  .action(async (options: any) => {\n    try {\n      const configManager = ConfigManager.getInstance();\n      let config = configManager.getClaudeConfig();\n\n      if (options.interactive) {\n        console.log(chalk.blue('ü§ñ Claude API Configuration'));\n        console.log('Configure your Claude API settings.\\n');\n\n        const answers = await inquirer.prompt([\n          {\n            type: 'input',\n            name: 'apiKey',\n            message: 'Enter your Claude API key:',\n            default: config.apiKey || process.env.ANTHROPIC_API_KEY,\n            validate: (input) => (input ? true : 'API key is required'),\n          },\n          {\n            type: 'list',\n            name: 'model',\n            message: 'Select Claude model:',\n            choices: [\n              { name: 'Claude 3 Opus (Most capable)', value: 'claude-3-opus-20240229' },\n              { name: 'Claude 3 Sonnet (Balanced)', value: 'claude-3-sonnet-20240229' },\n              { name: 'Claude 3 Haiku (Fastest)', value: 'claude-3-haiku-20240307' },\n              { name: 'Claude 2.1', value: 'claude-2.1' },\n              { name: 'Claude 2.0', value: 'claude-2.0' },\n              { name: 'Claude Instant 1.2', value: 'claude-instant-1.2' },\n            ],\n            default: config.model || 'claude-3-sonnet-20240229',\n          },\n          {\n            type: 'input',\n            name: 'temperature',\n            message: 'Temperature (0.0-1.0):',\n            default: config.temperature?.toString() || '0.7',\n            validate: (input) => {\n              const num = parseFloat(input);\n              return num >= 0 && num <= 1 ? true : 'Temperature must be between 0.0 and 1.0';\n            },\n            filter: (input) => parseFloat(input),\n          },\n          {\n            type: 'input',\n            name: 'maxTokens',\n            message: 'Maximum tokens:',\n            default: config.maxTokens?.toString() || '4096',\n            validate: (input) => {\n              const num = parseInt(input);\n              return num > 0 && num <= 100000 ? true : 'Max tokens must be between 1 and 100000';\n            },\n            filter: (input) => parseInt(input),\n          },\n        ]);\n\n        config = { ...config, ...answers };\n      } else {\n        // Non-interactive mode\n        if (options.apiKey) config.apiKey = options.apiKey;\n        if (options.model) config.model = options.model;\n        if (options.temperature !== undefined) config.temperature = options.temperature;\n        if (options.maxTokens !== undefined) config.maxTokens = options.maxTokens;\n      }\n\n      // Update configuration\n      configManager.setClaudeConfig(config);\n      await configManager.save();\n\n      console.log(chalk.green('‚úÖ Claude API configuration saved'));\n      console.log(chalk.gray(`Model: ${config.model}`));\n      console.log(chalk.gray(`Temperature: ${config.temperature}`));\n      console.log(chalk.gray(`Max tokens: ${config.maxTokens}`));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to configure Claude API:'), getErrorMessage(error));\n      process.exit(1);\n    }\n  });\n\n// Test command\nclaudeApiCommand\n  .command('test')\n  .description('Test Claude API connectivity')\n  .option('--model <model>', 'Model to test')\n  .option('--temperature <temp>', 'Temperature for test', parseFloat)\n  .option(\n    '--prompt <prompt>',\n    'Test prompt',\n    'Hello, Claude! Please respond with a brief greeting.',\n  )\n  .action(async (options: any) => {\n    try {\n      const configManager = ConfigManager.getInstance();\n\n      if (!configManager.isClaudeAPIConfigured()) {\n        console.error(chalk.red('‚ùå Claude API not configured. Run \"claude-api configure\" first.'));\n        process.exit(1);\n      }\n\n      console.log(chalk.blue('üß™ Testing Claude API connectivity...'));\n\n      const logger = new Logger({ level: 'info', format: 'text', destination: 'console' });\n      const client = new ClaudeAPIClient(logger, configManager);\n\n      const testOptions: any = {};\n      if (options.model) testOptions.model = options.model;\n      if (options.temperature !== undefined) testOptions.temperature = options.temperature;\n\n      const start = Date.now();\n      const response = await client.complete(options.prompt, testOptions);\n      const duration = Date.now() - start;\n\n      console.log(chalk.green('‚úÖ Claude API test successful!'));\n      console.log(chalk.gray(`Duration: ${duration}ms`));\n      console.log(chalk.cyan('\\nResponse:'));\n      console.log(response);\n    } catch (error) {\n      console.error(chalk.red('‚ùå Claude API test failed:'), getErrorMessage(error));\n      process.exit(1);\n    }\n  });\n\n// Status command\nclaudeApiCommand\n  .command('status')\n  .description('Show Claude API configuration status')\n  .action(async () => {\n    try {\n      const configManager = ConfigManager.getInstance();\n      const config = configManager.getClaudeConfig();\n      const isConfigured = configManager.isClaudeAPIConfigured();\n\n      console.log(chalk.blue('ü§ñ Claude API Status\\n'));\n\n      if (isConfigured) {\n        console.log(chalk.green('‚úÖ Configured'));\n        console.log(chalk.gray(`Model: ${config.model || 'claude-3-sonnet-20240229'}`));\n        console.log(chalk.gray(`Temperature: ${config.temperature ?? 0.7}`));\n        console.log(chalk.gray(`Max tokens: ${config.maxTokens || 4096}`));\n        console.log(chalk.gray(`API key: ${config.apiKey ? '***masked***' : 'Not set'}`));\n\n        if (process.env.ANTHROPIC_API_KEY && !config.apiKey) {\n          console.log(\n            chalk.yellow('‚ö†Ô∏è  Using API key from ANTHROPIC_API_KEY environment variable'),\n          );\n        }\n      } else {\n        console.log(chalk.red('‚ùå Not configured'));\n        console.log(chalk.gray('Run \"claude-api configure\" to set up Claude API.'));\n      }\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to get status:'), getErrorMessage(error));\n      process.exit(1);\n    }\n  });\n\n// Models command\nclaudeApiCommand\n  .command('models')\n  .description('List available Claude models')\n  .action(() => {\n    console.log(chalk.blue('üìã Available Claude Models\\n'));\n\n    const models = [\n      {\n        id: 'claude-3-opus-20240229',\n        name: 'Claude 3 Opus',\n        description: 'Most capable model, best for complex tasks',\n        contextWindow: '200K tokens',\n      },\n      {\n        id: 'claude-3-sonnet-20240229',\n        name: 'Claude 3 Sonnet',\n        description: 'Balanced performance and speed',\n        contextWindow: '200K tokens',\n      },\n      {\n        id: 'claude-3-haiku-20240307',\n        name: 'Claude 3 Haiku',\n        description: 'Fastest model, best for simple tasks',\n        contextWindow: '200K tokens',\n      },\n      {\n        id: 'claude-2.1',\n        name: 'Claude 2.1',\n        description: 'Previous generation, enhanced capabilities',\n        contextWindow: '200K tokens',\n      },\n      {\n        id: 'claude-2.0',\n        name: 'Claude 2.0',\n        description: 'Previous generation model',\n        contextWindow: '100K tokens',\n      },\n      {\n        id: 'claude-instant-1.2',\n        name: 'Claude Instant 1.2',\n        description: 'Fast, cost-effective model',\n        contextWindow: '100K tokens',\n      },\n    ];\n\n    models.forEach((model) => {\n      console.log(chalk.cyan(`${model.name} (${model.id})`));\n      console.log(chalk.gray(`  ${model.description}`));\n      console.log(chalk.gray(`  Context: ${model.contextWindow}\\n`));\n    });\n  });\n\n// Update command\nclaudeApiCommand\n  .command('update')\n  .description('Update specific Claude API settings')\n  .option('--model <model>', 'Update model')\n  .option('--temperature <temp>', 'Update temperature', parseFloat)\n  .option('--max-tokens <tokens>', 'Update max tokens', parseInt)\n  .action(async (options: any) => {\n    try {\n      const configManager = ConfigManager.getInstance();\n\n      if (!configManager.isClaudeAPIConfigured()) {\n        console.error(chalk.red('‚ùå Claude API not configured. Run \"claude-api configure\" first.'));\n        process.exit(1);\n      }\n\n      const updates: any = {};\n      if (options.model) updates.model = options.model;\n      if (options.temperature !== undefined) updates.temperature = options.temperature;\n      if (options.maxTokens !== undefined) updates.maxTokens = options.maxTokens;\n\n      if (Object.keys(updates).length === 0) {\n        console.log(\n          chalk.yellow('‚ö†Ô∏è  No updates specified. Use --model, --temperature, or --max-tokens.'),\n        );\n        return;\n      }\n\n      configManager.setClaudeConfig(updates);\n      await configManager.save();\n\n      console.log(chalk.green('‚úÖ Claude API configuration updated'));\n      Object.entries(updates).forEach(([key, value]) => {\n        console.log(chalk.gray(`${key}: ${value}`));\n      });\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to update configuration:'), getErrorMessage(error));\n      process.exit(1);\n    }\n  });\n"],"names":["chalk","inquirer","Command","ConfigManager","ClaudeAPIClient","Logger","getErrorMessage","claudeApiCommand","name","description","action","help","command","option","parseFloat","parseInt","options","configManager","getInstance","config","getClaudeConfig","interactive","console","log","blue","answers","prompt","type","message","default","apiKey","process","env","ANTHROPIC_API_KEY","validate","input","choices","value","model","temperature","toString","num","filter","maxTokens","undefined","setClaudeConfig","save","green","gray","error","red","exit","isClaudeAPIConfigured","logger","level","format","destination","client","testOptions","start","Date","now","response","complete","duration","cyan","isConfigured","yellow","models","id","contextWindow","forEach","updates","Object","keys","length","entries","key"],"mappings":"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"}