{"version":3,"sources":["../../../../../src/cli/commands/start/start-command.ts"],"sourcesContent":["import { promises as fs } from 'node:fs';\n/**\n * Unified start command implementation with robust service management\n */\n\nimport { Command } from '@cliffy/command';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { ProcessManager } from './process-manager.js';\nimport { ProcessUI } from './process-ui.js';\nimport { SystemMonitor } from './system-monitor.js';\nimport type { StartOptions } from './types.js';\nimport { eventBus } from '../../../core/event-bus.js';\nimport { logger } from '../../../core/logger.js';\nimport { formatDuration } from '../../formatter.js';\n\nexport const startCommand = new Command()\n  .description('Start the Claude-Flow orchestration system')\n  .option('-d, --daemon', 'Run as daemon in background')\n  .option('-p, --port <port:number>', 'MCP server port', { default: 3000 })\n  .option('--mcp-transport <transport:string>', 'MCP transport type (stdio, http)', {\n    default: 'stdio',\n  })\n  .option('-u, --ui', 'Launch interactive process management UI')\n  .option('-v, --verbose', 'Enable verbose logging')\n  .option('--auto-start', 'Automatically start all processes')\n  .option('--config <path:string>', 'Configuration file path')\n  .option('--force', 'Force start even if already running')\n  .option('--health-check', 'Perform health checks before starting')\n  .option('--timeout <seconds:number>', 'Startup timeout in seconds', { default: 60 })\n  .action(async (options: StartOptions) => {\n    console.log(chalk.cyan('ðŸ§  Claude-Flow Orchestration System'));\n    console.log(chalk.gray('â”€'.repeat(60)));\n\n    try {\n      // Check if already running\n      if (!options.force && (await isSystemRunning())) {\n        console.log(chalk.yellow('âš  Claude-Flow is already running'));\n        const { shouldContinue } = await inquirer.prompt([\n          {\n            type: 'confirm',\n            name: 'shouldContinue',\n            message: 'Stop existing instance and restart?',\n            default: false,\n          },\n        ]);\n\n        if (!shouldContinue) {\n          console.log(chalk.gray('Use --force to override or \"claude-flow stop\" first'));\n          return;\n        }\n\n        await stopExistingInstance();\n      }\n\n      // Perform pre-flight checks\n      if (options.healthCheck) {\n        console.log(chalk.blue('Running pre-flight health checks...'));\n        await performHealthChecks();\n      }\n\n      // Initialize process manager with timeout\n      const processManager = new ProcessManager();\n      console.log(chalk.blue('Initializing system components...'));\n      const initPromise = processManager.initialize(options.config);\n      const timeoutPromise = new Promise((_, reject) =>\n        setTimeout(\n          () => reject(new Error('Initialization timeout')),\n          (options.timeout || 30) * 1000,\n        ),\n      );\n\n      await Promise.race([initPromise, timeoutPromise]);\n\n      // Initialize system monitor with enhanced monitoring\n      const systemMonitor = new SystemMonitor(processManager);\n      systemMonitor.start();\n\n      // Setup system event handlers\n      setupSystemEventHandlers(processManager, systemMonitor, options);\n\n      // Override MCP settings from CLI options\n      if (options.port) {\n        const mcpProcess = processManager.getProcess('mcp-server');\n        if (mcpProcess) {\n          mcpProcess.config = { ...mcpProcess.config, port: options.port };\n        }\n      }\n\n      // Configure transport settings\n      if (options.mcpTransport) {\n        const mcpProcess = processManager.getProcess('mcp-server');\n        if (mcpProcess) {\n          mcpProcess.config = { ...mcpProcess.config, transport: options.mcpTransport };\n        }\n      }\n\n      // Setup event listeners for logging\n      if (options.verbose) {\n        setupVerboseLogging(systemMonitor);\n      }\n\n      // Launch UI mode\n      if (options.ui) {\n        // Check if web server is available\n        try {\n          const { ClaudeCodeWebServer } = await import('../../simple-commands/web-server.js');\n\n          // Start the web server\n          console.log(chalk.blue('Starting Web UI server...'));\n          const webServer = new ClaudeCodeWebServer(options.port);\n          await webServer.start();\n\n          // Open browser if possible\n          const openCommand =\n            process.platform === 'darwin'\n              ? 'open'\n              : process.platform === 'win32'\n                ? 'start'\n                : 'xdg-open';\n\n          try {\n            const { exec } = await import('child_process');\n            exec(`${openCommand} http://localhost:${options.port}/console`);\n          } catch {\n            // Browser opening failed, that's okay\n          }\n\n          // Keep process running\n          console.log(\n            chalk.green('âœ¨ Web UI is running at:'),\n            chalk.cyan(`http://localhost:${options.port}/console`),\n          );\n          console.log(chalk.gray('Press Ctrl+C to stop'));\n\n          // Handle shutdown\n          const shutdownWebUI = async () => {\n            console.log('\\n' + chalk.yellow('Shutting down Web UI...'));\n            await webServer.stop();\n            systemMonitor.stop();\n            await processManager.stopAll();\n            console.log(chalk.green('âœ“ Shutdown complete'));\n            process.exit(0);\n          };\n\n          Deno.addSignalListener('SIGINT', shutdownWebUI);\n          Deno.addSignalListener('SIGTERM', shutdownWebUI);\n\n          // Keep process alive\n          await new Promise<void>(() => {});\n        } catch (webError) {\n          // Fall back to TUI if web server is not available\n          console.log(chalk.yellow('Web UI not available, falling back to Terminal UI'));\n          const ui = new ProcessUI(processManager);\n          await ui.start();\n\n          // Cleanup on exit\n          systemMonitor.stop();\n          await processManager.stopAll();\n          console.log(chalk.green.bold('âœ“'), 'Shutdown complete');\n          process.exit(0);\n        }\n      }\n      // Daemon mode\n      else if (options.daemon) {\n        console.log(chalk.yellow('Starting in daemon mode...'));\n\n        // Auto-start all processes\n        if (options.autoStart) {\n          console.log(chalk.blue('Starting all system processes...'));\n          await startWithProgress(processManager, 'all');\n        } else {\n          // Start only core processes\n          console.log(chalk.blue('Starting core processes...'));\n          await startWithProgress(processManager, 'core');\n        }\n\n        // Create PID file with metadata\n        const pid = Deno.pid;\n        const pidData = {\n          pid,\n          startTime: Date.now(),\n          config: options.config || 'default',\n          processes: processManager.getAllProcesses().map((p) => ({ id: p.id, status: p.status })),\n        };\n        await fs.writeFile('.claude-flow.pid', JSON.stringify(pidData, null, 2));\n        console.log(chalk.gray(`Process ID: ${pid}`));\n\n        // Wait for services to be fully ready\n        await waitForSystemReady(processManager);\n\n        console.log(chalk.green.bold('âœ“'), 'Daemon started successfully');\n        console.log(chalk.gray('Use \"claude-flow status\" to check system status'));\n        console.log(chalk.gray('Use \"claude-flow monitor\" for real-time monitoring'));\n\n        // Keep process running\n        await new Promise<void>(() => {});\n      }\n      // Interactive mode (default)\n      else {\n        console.log(chalk.cyan('Starting in interactive mode...'));\n        console.log();\n\n        // Show available options\n        console.log(chalk.white.bold('Quick Actions:'));\n        console.log('  [1] Start all processes');\n        console.log('  [2] Start core processes only');\n        console.log('  [3] Launch process management UI');\n        console.log('  [4] Show system status');\n        console.log('  [q] Quit');\n        console.log();\n        console.log(chalk.gray('Press a key to select an option...'));\n\n        // Handle user input\n        const decoder = new TextDecoder();\n        while (true) {\n          const buf = new Uint8Array(1);\n          await Deno.stdin.read(buf);\n          const key = decoder.decode(buf);\n\n          switch (key) {\n            case '1':\n              console.log(chalk.cyan('\\nStarting all processes...'));\n              await startWithProgress(processManager, 'all');\n              console.log(chalk.green.bold('âœ“'), 'All processes started');\n              break;\n\n            case '2':\n              console.log(chalk.cyan('\\nStarting core processes...'));\n              await startWithProgress(processManager, 'core');\n              console.log(chalk.green.bold('âœ“'), 'Core processes started');\n              break;\n\n            case '3':\n              const ui = new ProcessUI(processManager);\n              await ui.start();\n              break;\n\n            case '4':\n              console.clear();\n              systemMonitor.printSystemHealth();\n              console.log();\n              systemMonitor.printEventLog(10);\n              console.log();\n              console.log(chalk.gray('Press any key to continue...'));\n              await Deno.stdin.read(new Uint8Array(1));\n              break;\n\n            case 'q':\n            case 'Q':\n              console.log(chalk.yellow('\\nShutting down...'));\n              await processManager.stopAll();\n              systemMonitor.stop();\n              console.log(chalk.green.bold('âœ“'), 'Shutdown complete');\n              process.exit(0);\n              break;\n          }\n\n          // Redraw menu\n          console.clear();\n          console.log(chalk.cyan('ðŸ§  Claude-Flow Interactive Mode'));\n          console.log(chalk.gray('â”€'.repeat(60)));\n\n          // Show current status\n          const stats = processManager.getSystemStats();\n          console.log(\n            chalk.white('System Status:'),\n            chalk.green(`${stats.runningProcesses}/${stats.totalProcesses} processes running`),\n          );\n          console.log();\n\n          console.log(chalk.white.bold('Quick Actions:'));\n          console.log('  [1] Start all processes');\n          console.log('  [2] Start core processes only');\n          console.log('  [3] Launch process management UI');\n          console.log('  [4] Show system status');\n          console.log('  [q] Quit');\n          console.log();\n          console.log(chalk.gray('Press a key to select an option...'));\n        }\n      }\n    } catch (error) {\n      console.error(chalk.red.bold('Failed to start:'), (error as Error).message);\n      if (options.verbose) {\n        console.error((error as Error).stack);\n      }\n\n      // Cleanup on failure\n      console.log(chalk.yellow('Performing cleanup...'));\n      try {\n        await cleanupOnFailure();\n      } catch (cleanupError) {\n        console.error(chalk.red('Cleanup failed:'), (cleanupError as Error).message);\n      }\n\n      process.exit(1);\n    }\n  });\n\n// Enhanced helper functions\n\nasync function isSystemRunning(): Promise<boolean> {\n  try {\n    const pidData = await fs.readFile('.claude-flow.pid', 'utf-8');\n    const data = JSON.parse(pidData);\n\n    // Check if process is still running\n    try {\n      Deno.kill(data.pid, 'SIGTERM');\n      return false; // Process was killed, so it was running\n    } catch {\n      return false; // Process not found\n    }\n  } catch {\n    return false; // No PID file\n  }\n}\n\nasync function stopExistingInstance(): Promise<void> {\n  try {\n    const pidData = await fs.readFile('.claude-flow.pid', 'utf-8');\n    const data = JSON.parse(pidData);\n\n    console.log(chalk.yellow('Stopping existing instance...'));\n    Deno.kill(data.pid, 'SIGTERM');\n\n    // Wait for graceful shutdown\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    // Force kill if still running\n    try {\n      Deno.kill(data.pid, 'SIGKILL');\n    } catch {\n      // Process already stopped\n    }\n\n    await Deno.remove('.claude-flow.pid').catch(() => {});\n    console.log(chalk.green('âœ“ Existing instance stopped'));\n  } catch (error) {\n    console.warn(\n      chalk.yellow('Warning: Could not stop existing instance'),\n      (error as Error).message,\n    );\n  }\n}\n\nasync function performHealthChecks(): Promise<void> {\n  const checks = [\n    { name: 'Disk Space', check: checkDiskSpace },\n    { name: 'Memory Available', check: checkMemoryAvailable },\n    { name: 'Network Connectivity', check: checkNetworkConnectivity },\n    { name: 'Required Dependencies', check: checkDependencies },\n  ];\n\n  for (const { name, check } of checks) {\n    try {\n      console.log(chalk.gray(`  Checking ${name}...`));\n      await check();\n      console.log(chalk.green(`  âœ“ ${name} OK`));\n    } catch (error) {\n      console.log(chalk.red(`  âœ— ${name} Failed: ${(error as Error).message}`));\n      throw error;\n    }\n  }\n}\n\nasync function checkDiskSpace(): Promise<void> {\n  // Basic disk space check - would need platform-specific implementation\n  const stats = await fs.stat('.');\n  if (!stats.isDirectory) {\n    throw new Error('Current directory is not accessible');\n  }\n}\n\nasync function checkMemoryAvailable(): Promise<void> {\n  // Memory check - would integrate with system memory monitoring\n  const memoryInfo = Deno.memoryUsage();\n  if (memoryInfo.heapUsed > 500 * 1024 * 1024) {\n    // 500MB threshold\n    throw new Error('High memory usage detected');\n  }\n}\n\nasync function checkNetworkConnectivity(): Promise<void> {\n  // Basic network check\n  try {\n    const response = await fetch('https://httpbin.org/status/200', {\n      method: 'GET',\n      signal: AbortSignal.timeout(5000),\n    });\n    if (!response.ok) {\n      throw new Error(`Network check failed: ${response.status}`);\n    }\n  } catch {\n    console.log(chalk.yellow('  âš  Network connectivity check skipped (offline mode?)'));\n  }\n}\n\nasync function checkDependencies(): Promise<void> {\n  // Check for required directories and files\n  const requiredDirs = ['.claude-flow', 'memory', 'logs'];\n  for (const dir of requiredDirs) {\n    try {\n      await Deno.mkdir(dir, { recursive: true });\n    } catch (error) {\n      throw new Error(`Cannot create required directory: ${dir}`);\n    }\n  }\n}\n\nfunction setupSystemEventHandlers(\n  processManager: ProcessManager,\n  systemMonitor: SystemMonitor,\n  options: StartOptions,\n): void {\n  // Handle graceful shutdown signals\n  const shutdownHandler = async () => {\n    console.log('\\n' + chalk.yellow('Received shutdown signal, shutting down gracefully...'));\n    systemMonitor.stop();\n    await processManager.stopAll();\n    await cleanupOnShutdown();\n    console.log(chalk.green('âœ“ Shutdown complete'));\n    process.exit(0);\n  };\n\n  Deno.addSignalListener('SIGINT', shutdownHandler);\n  Deno.addSignalListener('SIGTERM', shutdownHandler);\n\n  // Setup verbose logging if requested\n  if (options.verbose) {\n    setupVerboseLogging(systemMonitor);\n  }\n\n  // Monitor for critical errors\n  processManager.on('processError', (event: any) => {\n    console.error(chalk.red(`Process error in ${event.processId}:`), event.error);\n    if (event.processId === 'orchestrator') {\n      console.error(chalk.red.bold('Critical process failed, initiating recovery...'));\n      // Could implement auto-recovery logic here\n    }\n  });\n}\n\nasync function startWithProgress(\n  processManager: ProcessManager,\n  mode: 'all' | 'core',\n): Promise<void> {\n  const processes =\n    mode === 'all'\n      ? [\n          'event-bus',\n          'memory-manager',\n          'terminal-pool',\n          'coordinator',\n          'mcp-server',\n          'orchestrator',\n        ]\n      : ['event-bus', 'memory-manager', 'mcp-server'];\n\n  for (let i = 0; i < processes.length; i++) {\n    const processId = processes[i];\n    const progress = `[${i + 1}/${processes.length}]`;\n\n    console.log(chalk.gray(`${progress} Starting ${processId}...`));\n    try {\n      await processManager.startProcess(processId);\n      console.log(chalk.green(`${progress} âœ“ ${processId} started`));\n    } catch (error) {\n      console.log(chalk.red(`${progress} âœ— ${processId} failed: ${(error as Error).message}`));\n      if (processId === 'orchestrator' || processId === 'mcp-server') {\n        throw error; // Critical processes\n      }\n    }\n\n    // Brief delay between starts\n    if (i < processes.length - 1) {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n    }\n  }\n}\n\nasync function waitForSystemReady(processManager: ProcessManager): Promise<void> {\n  console.log(chalk.blue('Waiting for system to be ready...'));\n\n  const maxWait = 30000; // 30 seconds\n  const checkInterval = 1000; // 1 second\n  let waited = 0;\n\n  while (waited < maxWait) {\n    const stats = processManager.getSystemStats();\n    if (stats.errorProcesses === 0 && stats.runningProcesses >= 3) {\n      console.log(chalk.green('âœ“ System ready'));\n      return;\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, checkInterval));\n    waited += checkInterval;\n  }\n\n  console.log(\n    chalk.yellow('âš  System startup completed but some processes may not be fully ready'),\n  );\n}\n\nasync function cleanupOnFailure(): Promise<void> {\n  try {\n    await Deno.remove('.claude-flow.pid').catch(() => {});\n    console.log(chalk.gray('Cleaned up PID file'));\n  } catch {\n    // Ignore cleanup errors\n  }\n}\n\nasync function cleanupOnShutdown(): Promise<void> {\n  try {\n    await Deno.remove('.claude-flow.pid').catch(() => {});\n    console.log(chalk.gray('Cleaned up PID file'));\n  } catch {\n    // Ignore cleanup errors\n  }\n}\n\nfunction setupVerboseLogging(monitor: SystemMonitor): void {\n  // Enhanced verbose logging\n  console.log(chalk.gray('Verbose logging enabled'));\n\n  // Periodically print system health\n  setInterval(() => {\n    console.log();\n    console.log(chalk.cyan('--- System Health Report ---'));\n    monitor.printSystemHealth();\n    console.log(chalk.cyan('--- End Report ---'));\n  }, 30000);\n\n  // Log critical events\n  eventBus.on('process:started', (data: any) => {\n    console.log(chalk.green(`[VERBOSE] Process started: ${data.processId}`));\n  });\n\n  eventBus.on('process:stopped', (data: any) => {\n    console.log(chalk.yellow(`[VERBOSE] Process stopped: ${data.processId}`));\n  });\n\n  eventBus.on('process:error', (data: any) => {\n    console.log(chalk.red(`[VERBOSE] Process error: ${data.processId} - ${data.error}`));\n  });\n}\n"],"names":["promises","fs","Command","chalk","inquirer","ProcessManager","ProcessUI","SystemMonitor","eventBus","startCommand","description","option","default","action","options","console","log","cyan","gray","repeat","force","isSystemRunning","yellow","shouldContinue","prompt","type","name","message","stopExistingInstance","healthCheck","blue","performHealthChecks","processManager","initPromise","initialize","config","timeoutPromise","Promise","_","reject","setTimeout","Error","timeout","race","systemMonitor","start","setupSystemEventHandlers","port","mcpProcess","getProcess","mcpTransport","transport","verbose","setupVerboseLogging","ui","ClaudeCodeWebServer","webServer","openCommand","process","platform","exec","green","shutdownWebUI","stop","stopAll","exit","Deno","addSignalListener","webError","bold","daemon","autoStart","startWithProgress","pid","pidData","startTime","Date","now","processes","getAllProcesses","map","p","id","status","writeFile","JSON","stringify","waitForSystemReady","white","decoder","TextDecoder","buf","Uint8Array","stdin","read","key","decode","clear","printSystemHealth","printEventLog","stats","getSystemStats","runningProcesses","totalProcesses","error","red","stack","cleanupOnFailure","cleanupError","readFile","data","parse","kill","resolve","remove","catch","warn","checks","check","checkDiskSpace","checkMemoryAvailable","checkNetworkConnectivity","checkDependencies","stat","isDirectory","memoryInfo","memoryUsage","heapUsed","response","fetch","method","signal","AbortSignal","ok","requiredDirs","dir","mkdir","recursive","shutdownHandler","cleanupOnShutdown","on","event","processId","mode","i","length","progress","startProcess","maxWait","checkInterval","waited","errorProcesses","monitor","setInterval"],"mappings":"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"}