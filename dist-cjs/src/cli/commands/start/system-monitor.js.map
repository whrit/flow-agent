{"version":3,"sources":["../../../../../src/cli/commands/start/system-monitor.ts"],"sourcesContent":["/**\n * System Monitor - Real-time monitoring of system processes\n */\n\nimport chalk from 'chalk';\nimport type { ProcessManager } from './process-manager.js';\nimport { SystemEvents } from '../../../utils/types.js';\nimport { eventBus } from '../../../core/event-bus.js';\n\nexport class SystemMonitor {\n  private processManager: ProcessManager;\n  private events: any[] = [];\n  private maxEvents = 100;\n  private metricsInterval?: NodeJS.Timeout;\n\n  constructor(processManager: ProcessManager) {\n    this.processManager = processManager;\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // System events\n    eventBus.on(SystemEvents.AGENT_SPAWNED, (data: any) => {\n      this.addEvent({\n        type: 'agent_spawned',\n        timestamp: Date.now(),\n        data,\n        level: 'info',\n      });\n    });\n\n    eventBus.on(SystemEvents.AGENT_TERMINATED, (data: any) => {\n      this.addEvent({\n        type: 'agent_terminated',\n        timestamp: Date.now(),\n        data,\n        level: 'warning',\n      });\n    });\n\n    eventBus.on(SystemEvents.TASK_ASSIGNED, (data: any) => {\n      this.addEvent({\n        type: 'task_assigned',\n        timestamp: Date.now(),\n        data,\n        level: 'info',\n      });\n    });\n\n    eventBus.on(SystemEvents.TASK_COMPLETED, (data: any) => {\n      this.addEvent({\n        type: 'task_completed',\n        timestamp: Date.now(),\n        data,\n        level: 'success',\n      });\n    });\n\n    eventBus.on(SystemEvents.TASK_FAILED, (data: any) => {\n      this.addEvent({\n        type: 'task_failed',\n        timestamp: Date.now(),\n        data,\n        level: 'error',\n      });\n    });\n\n    eventBus.on(SystemEvents.SYSTEM_ERROR, (data: any) => {\n      this.addEvent({\n        type: 'system_error',\n        timestamp: Date.now(),\n        data,\n        level: 'error',\n      });\n    });\n\n    // Process manager events\n    this.processManager.on('processStarted', ({ processId, process }) => {\n      this.addEvent({\n        type: 'process_started',\n        timestamp: Date.now(),\n        data: { processId, processName: process.name },\n        level: 'success',\n      });\n    });\n\n    this.processManager.on('processStopped', ({ processId }) => {\n      this.addEvent({\n        type: 'process_stopped',\n        timestamp: Date.now(),\n        data: { processId },\n        level: 'warning',\n      });\n    });\n\n    this.processManager.on('processError', ({ processId, error }) => {\n      this.addEvent({\n        type: 'process_error',\n        timestamp: Date.now(),\n        data: { processId, error: error instanceof Error ? error.message : String(error) },\n        level: 'error',\n      });\n    });\n  }\n\n  private addEvent(event: any): void {\n    this.events.unshift(event);\n    if (this.events.length > this.maxEvents) {\n      this.events.pop();\n    }\n  }\n\n  start(): void {\n    // Start collecting metrics\n    this.metricsInterval = setInterval(() => {\n      this.collectMetrics();\n    }, 5000);\n  }\n\n  stop(): void {\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval);\n    }\n  }\n\n  private collectMetrics(): void {\n    // Collect system metrics\n    const processes = this.processManager.getAllProcesses();\n\n    for (const process of processes) {\n      if (process.status === 'running') {\n        // Simulate metrics collection (would integrate with actual monitoring)\n        process.metrics = {\n          ...process.metrics,\n          cpu: Math.random() * 50,\n          memory: Math.random() * 200,\n          uptime: process.startTime ? Date.now() - process.startTime : 0,\n        };\n      }\n    }\n  }\n\n  getRecentEvents(count: number = 10): any[] {\n    return this.events.slice(0, count);\n  }\n\n  printEventLog(count: number = 20): void {\n    console.log(chalk.cyan.bold('📊 Recent System Events'));\n    console.log(chalk.gray('─'.repeat(80)));\n\n    const events = this.getRecentEvents(count);\n\n    for (const event of events) {\n      const timestamp = new Date(event.timestamp).toLocaleTimeString();\n      const icon = this.getEventIcon(event.type);\n      const color = this.getEventColor(event.level);\n\n      console.log(chalk.gray(timestamp), icon, color(this.formatEventMessage(event)));\n    }\n  }\n\n  private getEventIcon(type: string): string {\n    const icons: Record<string, string> = {\n      agent_spawned: '🤖',\n      agent_terminated: '🔚',\n      task_assigned: '📌',\n      task_completed: '✅',\n      task_failed: '❌',\n      system_error: '⚠️',\n      process_started: '▶️',\n      process_stopped: '⏹️',\n      process_error: '🚨',\n    };\n\n    return icons[type] || '•';\n  }\n\n  private getEventColor(level: string): (text: string) => string {\n    switch (level) {\n      case 'success':\n        return chalk.green;\n      case 'info':\n        return chalk.blue;\n      case 'warning':\n        return chalk.yellow;\n      case 'error':\n        return chalk.red;\n      default:\n        return chalk.white;\n    }\n  }\n\n  private formatEventMessage(event: any): string {\n    switch (event.type) {\n      case 'agent_spawned':\n        return `Agent spawned: ${event.data.agentId} (${event.data.profile?.type || 'unknown'})`;\n      case 'agent_terminated':\n        return `Agent terminated: ${event.data.agentId} - ${event.data.reason}`;\n      case 'task_assigned':\n        return `Task ${event.data.taskId} assigned to ${event.data.agentId}`;\n      case 'task_completed':\n        return `Task completed: ${event.data.taskId}`;\n      case 'task_failed':\n        return `Task failed: ${event.data.taskId} - ${event.data.error?.message}`;\n      case 'system_error':\n        return `System error in ${event.data.component}: ${event.data.error?.message}`;\n      case 'process_started':\n        return `Process started: ${event.data.processName}`;\n      case 'process_stopped':\n        return `Process stopped: ${event.data.processId}`;\n      case 'process_error':\n        return `Process error: ${event.data.processId} - ${event.data.error}`;\n      default:\n        return JSON.stringify(event.data);\n    }\n  }\n\n  printSystemHealth(): void {\n    const stats = this.processManager.getSystemStats();\n    const processes = this.processManager.getAllProcesses();\n\n    console.log(chalk.cyan.bold('🏥 System Health'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    // Overall status\n    const healthStatus =\n      stats.errorProcesses === 0\n        ? chalk.green('● Healthy')\n        : chalk.red(`● Unhealthy (${stats.errorProcesses} errors)`);\n\n    console.log('Status:', healthStatus);\n    console.log('Uptime:', this.formatUptime(stats.systemUptime));\n    console.log();\n\n    // Process status\n    console.log(chalk.white.bold('Process Status:'));\n    for (const process of processes) {\n      const status = this.getProcessStatusIcon(process.status);\n      const metrics = process.metrics;\n\n      let line = `  ${status} ${process.name.padEnd(20)}`;\n\n      if (metrics && process.status === 'running') {\n        line += chalk.gray(` CPU: ${metrics.cpu?.toFixed(1)}% `);\n        line += chalk.gray(` MEM: ${metrics.memory?.toFixed(0)}MB`);\n      }\n\n      console.log(line);\n    }\n\n    console.log();\n\n    // System metrics\n    console.log(chalk.white.bold('System Metrics:'));\n    console.log(`  Active Processes: ${stats.runningProcesses}/${stats.totalProcesses}`);\n    console.log(`  Recent Events: ${this.events.length}`);\n\n    // Recent errors\n    const recentErrors = this.events.filter((e) => e.level === 'error').slice(0, 3);\n\n    if (recentErrors.length > 0) {\n      console.log();\n      console.log(chalk.red.bold('Recent Errors:'));\n      for (const error of recentErrors) {\n        const time = new Date(error.timestamp).toLocaleTimeString();\n        console.log(chalk.red(`  ${time} - ${this.formatEventMessage(error)}`));\n      }\n    }\n  }\n\n  private getProcessStatusIcon(status: string): string {\n    switch (status) {\n      case 'running':\n        return chalk.green('●');\n      case 'stopped':\n        return chalk.gray('○');\n      case 'starting':\n        return chalk.yellow('◐');\n      case 'stopping':\n        return chalk.yellow('◑');\n      case 'error':\n        return chalk.red('✗');\n      default:\n        return chalk.gray('?');\n    }\n  }\n\n  private formatUptime(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days}d ${hours % 24}h ${minutes % 60}m`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n}\n"],"names":["chalk","SystemEvents","eventBus","SystemMonitor","processManager","events","maxEvents","metricsInterval","setupEventListeners","on","AGENT_SPAWNED","data","addEvent","type","timestamp","Date","now","level","AGENT_TERMINATED","TASK_ASSIGNED","TASK_COMPLETED","TASK_FAILED","SYSTEM_ERROR","processId","process","processName","name","error","Error","message","String","event","unshift","length","pop","start","setInterval","collectMetrics","stop","clearInterval","processes","getAllProcesses","status","metrics","cpu","Math","random","memory","uptime","startTime","getRecentEvents","count","slice","printEventLog","console","log","cyan","bold","gray","repeat","toLocaleTimeString","icon","getEventIcon","color","getEventColor","formatEventMessage","icons","agent_spawned","agent_terminated","task_assigned","task_completed","task_failed","system_error","process_started","process_stopped","process_error","green","blue","yellow","red","white","agentId","profile","reason","taskId","component","JSON","stringify","printSystemHealth","stats","getSystemStats","healthStatus","errorProcesses","formatUptime","systemUptime","getProcessStatusIcon","line","padEnd","toFixed","runningProcesses","totalProcesses","recentErrors","filter","e","time","ms","seconds","floor","minutes","hours","days"],"mappings":"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"}