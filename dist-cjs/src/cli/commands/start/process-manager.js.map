{"version":3,"sources":["../../../../../src/cli/commands/start/process-manager.ts"],"sourcesContent":["/**\n * Process Manager - Handles lifecycle of system processes\n */\n\nimport { EventEmitter } from './event-emitter.js';\nimport chalk from 'chalk';\nimport { ProcessInfo, ProcessType, ProcessStatus, ProcessMetrics, SystemStats } from './types.js';\nimport { Orchestrator } from '../../../core/orchestrator.js';\nimport { TerminalManager } from '../../../terminal/manager.js';\nimport { MemoryManager } from '../../../memory/manager.js';\nimport { CoordinationManager } from '../../../coordination/manager.js';\nimport { MCPServer } from '../../../mcp/server.js';\nimport { eventBus } from '../../../core/event-bus.js';\nimport { logger } from '../../../core/logger.js';\nimport { configManager } from '../../../core/config.js';\n\nexport class ProcessManager extends EventEmitter {\n  private processes: Map<string, ProcessInfo> = new Map();\n  private orchestrator: Orchestrator | undefined;\n  private terminalManager: TerminalManager | undefined;\n  private memoryManager: MemoryManager | undefined;\n  private coordinationManager: CoordinationManager | undefined;\n  private mcpServer: MCPServer | undefined;\n  private config: any;\n\n  constructor() {\n    super();\n    this.initializeProcesses();\n  }\n\n  private initializeProcesses(): void {\n    // Define all manageable processes\n    const processDefinitions: ProcessInfo[] = [\n      {\n        id: 'event-bus',\n        name: 'Event Bus',\n        type: ProcessType.EVENT_BUS,\n        status: ProcessStatus.STOPPED,\n      },\n      {\n        id: 'orchestrator',\n        name: 'Orchestrator Engine',\n        type: ProcessType.ORCHESTRATOR,\n        status: ProcessStatus.STOPPED,\n      },\n      {\n        id: 'memory-manager',\n        name: 'Memory Manager',\n        type: ProcessType.MEMORY_MANAGER,\n        status: ProcessStatus.STOPPED,\n      },\n      {\n        id: 'terminal-pool',\n        name: 'Terminal Pool',\n        type: ProcessType.TERMINAL_POOL,\n        status: ProcessStatus.STOPPED,\n      },\n      {\n        id: 'mcp-server',\n        name: 'MCP Server',\n        type: ProcessType.MCP_SERVER,\n        status: ProcessStatus.STOPPED,\n      },\n      {\n        id: 'coordinator',\n        name: 'Coordination Manager',\n        type: ProcessType.COORDINATOR,\n        status: ProcessStatus.STOPPED,\n      },\n    ];\n\n    for (const process of processDefinitions) {\n      this.processes.set(process.id, process);\n    }\n  }\n\n  async initialize(configPath?: string): Promise<void> {\n    try {\n      this.config = await configManager.load(configPath);\n      this.emit('initialized', { config: this.config });\n    } catch (error) {\n      this.emit('error', { component: 'ProcessManager', error });\n      throw error;\n    }\n  }\n\n  async startProcess(processId: string): Promise<void> {\n    const process = this.processes.get(processId);\n    if (!process) {\n      throw new Error(`Unknown process: ${processId}`);\n    }\n\n    if (process.status === ProcessStatus.RUNNING) {\n      throw new Error(`Process ${processId} is already running`);\n    }\n\n    this.updateProcessStatus(processId, ProcessStatus.STARTING);\n\n    try {\n      switch (process.type) {\n        case ProcessType.EVENT_BUS:\n          // Event bus is already initialized globally\n          process.pid = Deno.pid;\n          break;\n\n        case ProcessType.MEMORY_MANAGER:\n          this.memoryManager = new MemoryManager(this.config.memory, eventBus, logger);\n          await this.memoryManager.initialize();\n          break;\n\n        case ProcessType.TERMINAL_POOL:\n          this.terminalManager = new TerminalManager(this.config.terminal, eventBus, logger);\n          await this.terminalManager.initialize();\n          break;\n\n        case ProcessType.COORDINATOR:\n          this.coordinationManager = new CoordinationManager(\n            this.config.coordination,\n            eventBus,\n            logger,\n          );\n          await this.coordinationManager.initialize();\n          break;\n\n        case ProcessType.MCP_SERVER:\n          this.mcpServer = new MCPServer(this.config.mcp, eventBus, logger);\n          await this.mcpServer.start();\n          break;\n\n        case ProcessType.ORCHESTRATOR:\n          if (\n            !this.terminalManager ||\n            !this.memoryManager ||\n            !this.coordinationManager ||\n            !this.mcpServer\n          ) {\n            throw new Error('Required components not initialized');\n          }\n\n          this.orchestrator = new Orchestrator(\n            this.config,\n            this.terminalManager,\n            this.memoryManager,\n            this.coordinationManager,\n            this.mcpServer,\n            eventBus,\n            logger,\n          );\n          await this.orchestrator.initialize();\n          break;\n      }\n\n      process.startTime = Date.now();\n      this.updateProcessStatus(processId, ProcessStatus.RUNNING);\n      this.emit('processStarted', { processId, process });\n    } catch (error) {\n      this.updateProcessStatus(processId, ProcessStatus.ERROR);\n      process.metrics = {\n        ...process.metrics,\n        lastError: (error as Error).message,\n      };\n      this.emit('processError', { processId, error });\n      throw error;\n    }\n  }\n\n  async stopProcess(processId: string): Promise<void> {\n    const process = this.processes.get(processId);\n    if (!process || process.status !== ProcessStatus.RUNNING) {\n      throw new Error(`Process ${processId} is not running`);\n    }\n\n    this.updateProcessStatus(processId, ProcessStatus.STOPPING);\n\n    try {\n      switch (process.type) {\n        case ProcessType.ORCHESTRATOR:\n          if (this.orchestrator) {\n            await this.orchestrator.shutdown();\n            this.orchestrator = undefined;\n          }\n          break;\n\n        case ProcessType.MCP_SERVER:\n          if (this.mcpServer) {\n            await this.mcpServer.stop();\n            this.mcpServer = undefined;\n          }\n          break;\n\n        case ProcessType.MEMORY_MANAGER:\n          if (this.memoryManager) {\n            await this.memoryManager.shutdown();\n            this.memoryManager = undefined;\n          }\n          break;\n\n        case ProcessType.TERMINAL_POOL:\n          if (this.terminalManager) {\n            await this.terminalManager.shutdown();\n            this.terminalManager = undefined;\n          }\n          break;\n\n        case ProcessType.COORDINATOR:\n          if (this.coordinationManager) {\n            await this.coordinationManager.shutdown();\n            this.coordinationManager = undefined;\n          }\n          break;\n      }\n\n      this.updateProcessStatus(processId, ProcessStatus.STOPPED);\n      this.emit('processStopped', { processId });\n    } catch (error) {\n      this.updateProcessStatus(processId, ProcessStatus.ERROR);\n      this.emit('processError', { processId, error });\n      throw error;\n    }\n  }\n\n  async restartProcess(processId: string): Promise<void> {\n    await this.stopProcess(processId);\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Brief delay\n    await this.startProcess(processId);\n  }\n\n  async startAll(): Promise<void> {\n    // Start in dependency order\n    const startOrder = [\n      'event-bus',\n      'memory-manager',\n      'terminal-pool',\n      'coordinator',\n      'mcp-server',\n      'orchestrator',\n    ];\n\n    for (const processId of startOrder) {\n      try {\n        await this.startProcess(processId);\n      } catch (error) {\n        console.error(chalk.red(`Failed to start ${processId}:`), (error as Error).message);\n        // Continue with other processes\n      }\n    }\n  }\n\n  async stopAll(): Promise<void> {\n    // Stop in reverse dependency order\n    const stopOrder = [\n      'orchestrator',\n      'mcp-server',\n      'coordinator',\n      'terminal-pool',\n      'memory-manager',\n      'event-bus',\n    ];\n\n    for (const processId of stopOrder) {\n      const process = this.processes.get(processId);\n      if (process && process.status === ProcessStatus.RUNNING) {\n        try {\n          await this.stopProcess(processId);\n        } catch (error) {\n          console.error(chalk.red(`Failed to stop ${processId}:`), (error as Error).message);\n        }\n      }\n    }\n  }\n\n  getProcess(processId: string): ProcessInfo | undefined {\n    return this.processes.get(processId);\n  }\n\n  getAllProcesses(): ProcessInfo[] {\n    return Array.from(this.processes.values());\n  }\n\n  getSystemStats(): SystemStats {\n    const processes = this.getAllProcesses();\n    const runningProcesses = processes.filter((p) => p.status === ProcessStatus.RUNNING);\n    const stoppedProcesses = processes.filter((p) => p.status === ProcessStatus.STOPPED);\n    const errorProcesses = processes.filter((p) => p.status === ProcessStatus.ERROR);\n\n    return {\n      totalProcesses: processes.length,\n      runningProcesses: runningProcesses.length,\n      stoppedProcesses: stoppedProcesses.length,\n      errorProcesses: errorProcesses.length,\n      systemUptime: this.getSystemUptime(),\n      totalMemory: this.getTotalMemoryUsage(),\n      totalCpu: this.getTotalCpuUsage(),\n    };\n  }\n\n  private updateProcessStatus(processId: string, status: ProcessStatus): void {\n    const process = this.processes.get(processId);\n    if (process) {\n      process.status = status;\n      this.emit('statusChanged', { processId, status });\n    }\n  }\n\n  private getSystemUptime(): number {\n    const orchestrator = this.processes.get('orchestrator');\n    if (orchestrator && orchestrator.startTime) {\n      return Date.now() - orchestrator.startTime;\n    }\n    return 0;\n  }\n\n  private getTotalMemoryUsage(): number {\n    // Placeholder - would integrate with actual memory monitoring\n    return 0;\n  }\n\n  private getTotalCpuUsage(): number {\n    // Placeholder - would integrate with actual CPU monitoring\n    return 0;\n  }\n\n  async getProcessLogs(processId: string, lines: number = 50): Promise<string[]> {\n    // Placeholder - would integrate with actual logging system\n    return [\n      `[${new Date().toISOString()}] Process ${processId} started`,\n      `[${new Date().toISOString()}] Process ${processId} is running normally`,\n    ];\n  }\n}\n"],"names":["EventEmitter","chalk","ProcessType","ProcessStatus","Orchestrator","TerminalManager","MemoryManager","CoordinationManager","MCPServer","eventBus","logger","configManager","ProcessManager","processes","Map","orchestrator","terminalManager","memoryManager","coordinationManager","mcpServer","config","initializeProcesses","processDefinitions","id","name","type","EVENT_BUS","status","STOPPED","ORCHESTRATOR","MEMORY_MANAGER","TERMINAL_POOL","MCP_SERVER","COORDINATOR","process","set","initialize","configPath","load","emit","error","component","startProcess","processId","get","Error","RUNNING","updateProcessStatus","STARTING","pid","Deno","memory","terminal","coordination","mcp","start","startTime","Date","now","ERROR","metrics","lastError","message","stopProcess","STOPPING","shutdown","undefined","stop","restartProcess","Promise","resolve","setTimeout","startAll","startOrder","console","red","stopAll","stopOrder","getProcess","getAllProcesses","Array","from","values","getSystemStats","runningProcesses","filter","p","stoppedProcesses","errorProcesses","totalProcesses","length","systemUptime","getSystemUptime","totalMemory","getTotalMemoryUsage","totalCpu","getTotalCpuUsage","getProcessLogs","lines","toISOString"],"mappings":"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"}