{"version":3,"sources":["../../../../../src/cli/commands/start/process-ui-simple.ts"],"sourcesContent":["/**\n * Simplified Process UI without keypress dependency\n * Uses basic stdin reading for compatibility\n */\n\nimport chalk from 'chalk';\nimport type { ProcessManager } from './process-manager.js';\nimport { ProcessInfo, ProcessStatus, SystemStats } from './types.js';\n\nexport class ProcessUI {\n  private processManager: ProcessManager;\n  private running = false;\n  private selectedIndex = 0;\n\n  constructor(processManager: ProcessManager) {\n    this.processManager = processManager;\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    this.processManager.on(\n      'statusChanged',\n      ({ processId, status }: { processId: string; status: ProcessStatus }) => {\n        if (this.running) {\n          this.render();\n        }\n      },\n    );\n\n    this.processManager.on(\n      'processError',\n      ({ processId, error }: { processId: string; error: Error }) => {\n        if (this.running) {\n          console.log(\n            chalk.red(\n              `\\nProcess ${processId} error: ${error instanceof Error ? error.message : String(error)}`,\n            ),\n          );\n        }\n      },\n    );\n  }\n\n  async start(): Promise<void> {\n    this.running = true;\n\n    // Clear screen\n    console.clear();\n\n    // Initial render\n    this.render();\n\n    // Simple input loop\n    const decoder = new TextDecoder();\n    const encoder = new TextEncoder();\n\n    while (this.running) {\n      // Show prompt\n      await Deno.stdout.write(encoder.encode('\\nCommand: '));\n\n      // Read single character\n      const buf = new Uint8Array(1024);\n      const n = await Deno.stdin.read(buf);\n      if (n === null) break;\n\n      const input = decoder.decode(buf.subarray(0, n)).trim();\n\n      if (input.length > 0) {\n        await this.handleCommand(input);\n      }\n    }\n  }\n\n  async stop(): Promise<void> {\n    this.running = false;\n    console.clear();\n  }\n\n  private async handleCommand(input: string): Promise<void> {\n    const processes = this.processManager.getAllProcesses();\n\n    switch (input.toLowerCase()) {\n      case 'q':\n      case 'quit':\n      case 'exit':\n        await this.handleExit();\n        break;\n\n      case 'a':\n      case 'all':\n        await this.startAll();\n        break;\n\n      case 'z':\n      case 'stop-all':\n        await this.stopAll();\n        break;\n\n      case 'r':\n      case 'refresh':\n        this.render();\n        break;\n\n      case 'h':\n      case 'help':\n      case '?':\n        this.showHelp();\n        break;\n\n      default:\n        // Check if it's a number (process selection)\n        const num = parseInt(input);\n        if (!isNaN(num) && num >= 1 && num <= processes.length) {\n          this.selectedIndex = num - 1;\n          await this.showProcessMenu(processes[this.selectedIndex]);\n        } else {\n          console.log(chalk.yellow('Invalid command. Type \"h\" for help.'));\n        }\n        break;\n    }\n  }\n\n  private render(): void {\n    console.clear();\n    const processes = this.processManager.getAllProcesses();\n    const stats = this.processManager.getSystemStats();\n\n    // Header\n    console.log(chalk.cyan.bold('🧠 Claude-Flow Process Manager'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    // System stats\n    console.log(\n      chalk.white('System Status:'),\n      chalk.green(`${stats.runningProcesses}/${stats.totalProcesses} running`),\n    );\n\n    if (stats.errorProcesses > 0) {\n      console.log(chalk.red(`⚠️  ${stats.errorProcesses} processes with errors`));\n    }\n\n    console.log();\n\n    // Process list\n    console.log(chalk.white.bold('Processes:'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    processes.forEach((process, index) => {\n      const num = `[${index + 1}]`.padEnd(4);\n      const status = this.getStatusDisplay(process.status);\n      const name = process.name.padEnd(25);\n\n      console.log(`${chalk.gray(num)} ${status} ${chalk.white(name)}`);\n\n      if (process.metrics?.lastError) {\n        console.log(chalk.red(`       Error: ${process.metrics.lastError}`));\n      }\n    });\n\n    // Footer\n    console.log(chalk.gray('─'.repeat(60)));\n    console.log(chalk.gray('Commands: [1-9] Select process [a] Start All [z] Stop All'));\n    console.log(chalk.gray('[r] Refresh [h] Help [q] Quit'));\n  }\n\n  private async showProcessMenu(process: ProcessInfo): Promise<void> {\n    console.log();\n    console.log(chalk.cyan.bold(`Selected: ${process.name}`));\n    console.log(chalk.gray('─'.repeat(40)));\n\n    if (process.status === ProcessStatus.STOPPED) {\n      console.log('[s] Start');\n    } else if (process.status === ProcessStatus.RUNNING) {\n      console.log('[x] Stop');\n      console.log('[r] Restart');\n    }\n\n    console.log('[d] Details');\n    console.log('[c] Cancel');\n\n    const decoder = new TextDecoder();\n    const encoder = new TextEncoder();\n\n    await Deno.stdout.write(encoder.encode('\\nAction: '));\n\n    const buf = new Uint8Array(1024);\n    const n = await Deno.stdin.read(buf);\n    if (n === null) return;\n\n    const action = decoder.decode(buf.subarray(0, n)).trim().toLowerCase();\n\n    switch (action) {\n      case 's':\n        if (process.status === ProcessStatus.STOPPED) {\n          await this.startProcess(process.id);\n        }\n        break;\n      case 'x':\n        if (process.status === ProcessStatus.RUNNING) {\n          await this.stopProcess(process.id);\n        }\n        break;\n      case 'r':\n        if (process.status === ProcessStatus.RUNNING) {\n          await this.restartProcess(process.id);\n        }\n        break;\n      case 'd':\n        this.showProcessDetails(process);\n        await this.waitForKey();\n        break;\n    }\n\n    this.render();\n  }\n\n  private showProcessDetails(process: ProcessInfo): void {\n    console.log();\n    console.log(chalk.cyan.bold(`📋 Process Details: ${process.name}`));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    console.log(chalk.white('ID:'), process.id);\n    console.log(chalk.white('Type:'), process.type);\n    console.log(chalk.white('Status:'), this.getStatusDisplay(process.status), process.status);\n\n    if (process.pid) {\n      console.log(chalk.white('PID:'), process.pid);\n    }\n\n    if (process.startTime) {\n      const uptime = Date.now() - process.startTime;\n      console.log(chalk.white('Uptime:'), this.formatUptime(uptime));\n    }\n\n    if (process.metrics) {\n      console.log();\n      console.log(chalk.white.bold('Metrics:'));\n      if (process.metrics.cpu !== undefined) {\n        console.log(chalk.white('CPU:'), `${process.metrics.cpu.toFixed(1)}%`);\n      }\n      if (process.metrics.memory !== undefined) {\n        console.log(chalk.white('Memory:'), `${process.metrics.memory.toFixed(0)} MB`);\n      }\n      if (process.metrics.restarts !== undefined) {\n        console.log(chalk.white('Restarts:'), process.metrics.restarts);\n      }\n      if (process.metrics.lastError) {\n        console.log(chalk.red('Last Error:'), process.metrics.lastError);\n      }\n    }\n\n    console.log();\n    console.log(chalk.gray('Press any key to continue...'));\n  }\n\n  private async waitForKey(): Promise<void> {\n    const buf = new Uint8Array(1);\n    await Deno.stdin.read(buf);\n  }\n\n  private getStatusDisplay(status: ProcessStatus): string {\n    switch (status) {\n      case ProcessStatus.RUNNING:\n        return chalk.green('●');\n      case ProcessStatus.STOPPED:\n        return chalk.gray('○');\n      case ProcessStatus.STARTING:\n        return chalk.yellow('◐');\n      case ProcessStatus.STOPPING:\n        return chalk.yellow('◑');\n      case ProcessStatus.ERROR:\n        return chalk.red('✗');\n      case ProcessStatus.CRASHED:\n        return chalk.red('☠');\n      default:\n        return chalk.gray('?');\n    }\n  }\n\n  private formatUptime(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days}d ${hours % 24}h`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  private showHelp(): void {\n    console.log();\n    console.log(chalk.cyan.bold('🧠 Claude-Flow Process Manager - Help'));\n    console.log(chalk.gray('─'.repeat(60)));\n    console.log();\n    console.log(chalk.white.bold('Commands:'));\n    console.log('  1-9     - Select process by number');\n    console.log('  a       - Start all processes');\n    console.log('  z       - Stop all processes');\n    console.log('  r       - Refresh display');\n    console.log('  h/?     - Show this help');\n    console.log('  q       - Quit');\n    console.log();\n    console.log(chalk.white.bold('Process Actions:'));\n    console.log('  s       - Start selected process');\n    console.log('  x       - Stop selected process');\n    console.log('  r       - Restart selected process');\n    console.log('  d       - Show process details');\n    console.log();\n    console.log(chalk.gray('Press any key to continue...'));\n  }\n\n  private async startProcess(processId: string): Promise<void> {\n    try {\n      console.log(chalk.yellow(`Starting ${processId}...`));\n      await this.processManager.startProcess(processId);\n      console.log(chalk.green(`✓ Started ${processId}`));\n    } catch (error) {\n      console.log(chalk.red(`✗ Failed to start ${processId}: ${(error as Error).message}`));\n    }\n    await this.waitForKey();\n  }\n\n  private async stopProcess(processId: string): Promise<void> {\n    try {\n      console.log(chalk.yellow(`Stopping ${processId}...`));\n      await this.processManager.stopProcess(processId);\n      console.log(chalk.green(`✓ Stopped ${processId}`));\n    } catch (error) {\n      console.log(chalk.red(`✗ Failed to stop ${processId}: ${(error as Error).message}`));\n    }\n    await this.waitForKey();\n  }\n\n  private async restartProcess(processId: string): Promise<void> {\n    try {\n      console.log(chalk.yellow(`Restarting ${processId}...`));\n      await this.processManager.restartProcess(processId);\n      console.log(chalk.green(`✓ Restarted ${processId}`));\n    } catch (error) {\n      console.log(chalk.red(`✗ Failed to restart ${processId}: ${(error as Error).message}`));\n    }\n    await this.waitForKey();\n  }\n\n  private async startAll(): Promise<void> {\n    try {\n      console.log(chalk.yellow('Starting all processes...'));\n      await this.processManager.startAll();\n      console.log(chalk.green('✓ All processes started'));\n    } catch (error) {\n      console.log(chalk.red(`✗ Failed to start all: ${(error as Error).message}`));\n    }\n    await this.waitForKey();\n    this.render();\n  }\n\n  private async stopAll(): Promise<void> {\n    try {\n      console.log(chalk.yellow('Stopping all processes...'));\n      await this.processManager.stopAll();\n      console.log(chalk.green('✓ All processes stopped'));\n    } catch (error) {\n      console.log(chalk.red(`✗ Failed to stop all: ${(error as Error).message}`));\n    }\n    await this.waitForKey();\n    this.render();\n  }\n\n  private async handleExit(): Promise<void> {\n    const processes = this.processManager.getAllProcesses();\n    const hasRunning = processes.some((p) => p.status === ProcessStatus.RUNNING);\n\n    if (hasRunning) {\n      console.log();\n      console.log(chalk.yellow('⚠️  Some processes are still running.'));\n      console.log('Stop all processes before exiting? [y/N]: ');\n\n      const decoder = new TextDecoder();\n      const buf = new Uint8Array(1024);\n      const n = await Deno.stdin.read(buf);\n\n      if (n && decoder.decode(buf.subarray(0, n)).trim().toLowerCase() === 'y') {\n        await this.stopAll();\n      }\n    }\n\n    await this.stop();\n  }\n}\n"],"names":["chalk","ProcessStatus","ProcessUI","processManager","running","selectedIndex","setupEventListeners","on","processId","status","render","error","console","log","red","Error","message","String","start","clear","decoder","TextDecoder","encoder","TextEncoder","Deno","stdout","write","encode","buf","Uint8Array","n","stdin","read","input","decode","subarray","trim","length","handleCommand","stop","processes","getAllProcesses","toLowerCase","handleExit","startAll","stopAll","showHelp","num","parseInt","isNaN","showProcessMenu","yellow","stats","getSystemStats","cyan","bold","gray","repeat","white","green","runningProcesses","totalProcesses","errorProcesses","forEach","process","index","padEnd","getStatusDisplay","name","metrics","lastError","STOPPED","RUNNING","action","startProcess","id","stopProcess","restartProcess","showProcessDetails","waitForKey","type","pid","startTime","uptime","Date","now","formatUptime","cpu","undefined","toFixed","memory","restarts","STARTING","STOPPING","ERROR","CRASHED","ms","seconds","Math","floor","minutes","hours","days","hasRunning","some","p"],"mappings":"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"}