{"version":3,"sources":["../../../../src/cli/commands/migrate.ts"],"sourcesContent":["/**\n * Migration CLI Command Integration\n */\n\nimport { Command } from '../commander-fix.js';\nimport { MigrationRunner } from '../../migration/migration-runner.js';\nimport { MigrationAnalyzer } from '../../migration/migration-analyzer.js';\nimport { RollbackManager } from '../../migration/rollback-manager.js';\nimport type { MigrationStrategy } from '../../migration/types.js';\nimport { logger } from '../../migration/logger.js';\nimport * as path from 'path';\nimport chalk from 'chalk';\n\nexport function createMigrateCommand(): Command {\n  const command = new Command('migrate');\n\n  command\n    .description('Migrate existing claude-flow projects to optimized prompts')\n    .option('-p, --path <path>', 'Project path', '.')\n    .option('-s, --strategy <type>', 'Migration strategy: full, selective, merge', 'selective')\n    .option('-b, --backup <dir>', 'Backup directory', '.claude-backup')\n    .option('-f, --force', 'Force migration without prompts')\n    .option('--dry-run', 'Simulate migration without making changes')\n    .option('--preserve-custom', 'Preserve custom commands and configurations')\n    .option('--skip-validation', 'Skip post-migration validation')\n    .option('--analyze-only', 'Only analyze project without migrating')\n    .option('--verbose', 'Show detailed output')\n    .action(async (options) => {\n      try {\n        const projectPath = path.resolve(options.path);\n\n        if (options.analyzeOnly) {\n          await analyzeProject(projectPath, options);\n        } else {\n          await runMigration(projectPath, options);\n        }\n      } catch (error) {\n        logger.error('Migration command failed:', error);\n        process.exit(1);\n      }\n    });\n\n  // Sub-commands\n  command\n    .command('analyze [path]')\n    .description('Analyze project for migration readiness')\n    .option('-d, --detailed', 'Show detailed analysis')\n    .option('-o, --output <file>', 'Output analysis to file')\n    .action(async (projectPath = '.', options) => {\n      await analyzeProject(path.resolve(projectPath), options);\n    });\n\n  command\n    .command('rollback [path]')\n    .description('Rollback to previous configuration')\n    .option('-b, --backup <dir>', 'Backup directory', '.claude-backup')\n    .option('-t, --timestamp <time>', 'Restore from specific timestamp')\n    .option('-f, --force', 'Force rollback without prompts')\n    .option('--list', 'List available backups')\n    .action(async (projectPath = '.', options) => {\n      const { RollbackManager } = await import('../../migration/rollback-manager.js');\n      const rollbackManager = new RollbackManager(path.resolve(projectPath), options.backup);\n\n      if (options.list) {\n        const backups = await rollbackManager.listBackups();\n        rollbackManager.printBackupSummary(backups);\n        return;\n      }\n\n      await rollbackManager.rollback(options.timestamp, !options.force);\n    });\n\n  command\n    .command('validate [path]')\n    .description('Validate migration was successful')\n    .option('-v, --verbose', 'Show detailed validation results')\n    .action(async (projectPath = '.', options) => {\n      const { MigrationRunner } = await import('../../migration/migration-runner.js');\n      const runner = new MigrationRunner({\n        projectPath: path.resolve(projectPath),\n        strategy: 'full',\n      });\n\n      const isValid = await runner.validate(options.verbose);\n      process.exit(isValid ? 0 : 1);\n    });\n\n  command\n    .command('status [path]')\n    .description('Show migration status and available backups')\n    .action(async (projectPath = '.') => {\n      await showMigrationStatus(path.resolve(projectPath));\n    });\n\n  return command;\n}\n\nasync function analyzeProject(projectPath: string, options: any): Promise<void> {\n  logger.info(`Analyzing project at ${projectPath}...`);\n\n  const { MigrationAnalyzer } = await import('../../migration/migration-analyzer.js');\n  const analyzer = new MigrationAnalyzer();\n  const analysis = await analyzer.analyze(projectPath);\n\n  if (options.output) {\n    await analyzer.saveAnalysis(analysis, options.output);\n    logger.success(`Analysis saved to ${options.output}`);\n  }\n\n  analyzer.printAnalysis(analysis, options.detailed || options.verbose);\n}\n\nasync function runMigration(projectPath: string, options: any): Promise<void> {\n  const { MigrationRunner } = await import('../../migration/migration-runner.js');\n  const runner = new MigrationRunner({\n    projectPath,\n    strategy: options.strategy as MigrationStrategy,\n    backupDir: options.backup,\n    force: options.force,\n    dryRun: options.dryRun,\n    preserveCustom: options.preserveCustom,\n    skipValidation: options.skipValidation,\n  });\n\n  const result = await runner.run();\n\n  if (!result.success) {\n    process.exit(1);\n  }\n}\n\nasync function showMigrationStatus(projectPath: string): Promise<void> {\n  console.log(chalk.bold('\\nðŸ“Š Migration Status'));\n  console.log(chalk.gray('â”€'.repeat(50)));\n\n  // Project analysis\n  const { MigrationAnalyzer } = await import('../../migration/migration-analyzer.js');\n  const analyzer = new MigrationAnalyzer();\n  const analysis = await analyzer.analyze(projectPath);\n\n  console.log(`\\n${chalk.bold('Project:')} ${projectPath}`);\n  console.log(\n    `${chalk.bold('Status:')} ${analysis.hasOptimizedPrompts ? chalk.green('Migrated') : chalk.yellow('Not Migrated')}`,\n  );\n  console.log(`${chalk.bold('Custom Commands:')} ${analysis.customCommands.length}`);\n  console.log(`${chalk.bold('Conflicts:')} ${analysis.conflictingFiles.length}`);\n\n  // Backup status\n  const { RollbackManager } = await import('../../migration/rollback-manager.js');\n  const rollbackManager = new RollbackManager(projectPath);\n  const backups = await rollbackManager.listBackups();\n\n  console.log(`\\n${chalk.bold('Backups Available:')} ${backups.length}`);\n\n  if (backups.length > 0) {\n    const latestBackup = backups[0];\n    console.log(`${chalk.bold('Latest Backup:')} ${latestBackup.timestamp.toLocaleString()}`);\n  }\n\n  // Recommendations\n  if (!analysis.hasOptimizedPrompts) {\n    console.log(chalk.bold('\\nðŸ’¡ Recommendations:'));\n    console.log('  â€¢ Run migration analysis: claude-flow migrate analyze');\n    console.log('  â€¢ Start with dry run: claude-flow migrate --dry-run');\n    console.log('  â€¢ Use selective strategy: claude-flow migrate --strategy selective');\n  }\n\n  console.log(chalk.gray('\\n' + 'â”€'.repeat(50)));\n}\n"],"names":["Command","logger","path","chalk","createMigrateCommand","command","description","option","action","options","projectPath","resolve","analyzeOnly","analyzeProject","runMigration","error","process","exit","RollbackManager","rollbackManager","backup","list","backups","listBackups","printBackupSummary","rollback","timestamp","force","MigrationRunner","runner","strategy","isValid","validate","verbose","showMigrationStatus","info","MigrationAnalyzer","analyzer","analysis","analyze","output","saveAnalysis","success","printAnalysis","detailed","backupDir","dryRun","preserveCustom","skipValidation","result","run","console","log","bold","gray","repeat","hasOptimizedPrompts","green","yellow","customCommands","length","conflictingFiles","latestBackup","toLocaleString"],"mappings":"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"}