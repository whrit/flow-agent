{"version":3,"sources":["../../../../src/cli/commands/task.ts"],"sourcesContent":["import { getErrorMessage } from '../../utils/error-handler.js';\n/**\n * Task management commands\n */\n\nimport { Command } from '../commander-fix.js';\nimport { promises as fs } from 'node:fs';\nimport chalk from 'chalk';\nimport { generateId } from '../../utils/helpers.js';\nimport type { Task } from '../../utils/types.js';\nexport const taskCommand = new Command()\n  .name('task')\n  .description('Manage tasks')\n  .action(() => {\n    taskCommand.outputHelp();\n  })\n  .command('create')\n  .description('Create a new task')\n  .argument('<type>', 'Task type')\n  .argument('<description>', 'Task description')\n  .option('-p, --priority <priority>', 'Task priority', '0')\n  .option('-d, --dependencies <deps>', 'Comma-separated list of dependency task IDs')\n  .option('-i, --input <input>', 'Task input as JSON')\n  .option('-a, --assign <agent>', 'Assign to specific agent')\n  .action(async (type: string, description: string, options: any) => {\n    const task: Task = {\n      id: generateId('task'),\n      type,\n      description,\n      priority: parseInt(options.priority, 10),\n      dependencies: options.dependencies ? options.dependencies.split(',') : [],\n      assignedAgent: options.assign,\n      status: 'pending',\n      input: options.input ? JSON.parse(options.input) : {},\n      createdAt: new Date(),\n    };\n\n    console.log(chalk.green('Task created:'));\n    console.log(JSON.stringify(task, null, 2));\n    console.log(chalk.yellow('\\nTo submit this task, ensure Claude-Flow is running'));\n  })\n  .command('list')\n  .description('List all tasks')\n  .option('-s, --status <status:string>', 'Filter by status')\n  .option('-a, --agent <agent:string>', 'Filter by assigned agent')\n  .action(async (options: any) => {\n    console.log(chalk.yellow('Task listing requires a running Claude-Flow instance'));\n  })\n  .command('status')\n  .description('Get task status')\n  .argument('<task-id>', 'Task ID')\n  .action(async (taskId: string, options: any) => {\n    console.log(chalk.yellow(`Task status requires a running Claude-Flow instance`));\n  })\n  .command('cancel')\n  .description('Cancel a task')\n  .argument('<task-id>', 'Task ID')\n  .option('-r, --reason <reason>', 'Cancellation reason')\n  .action(async (taskId: string, options: any) => {\n    console.log(chalk.yellow(`Cancelling task ${taskId} requires a running Claude-Flow instance`));\n  })\n  .command('workflow')\n  .description('Execute a workflow from file')\n  .argument('<workflow-file>', 'Workflow file path')\n  .action(async (workflowFile: string, options: any) => {\n    try {\n      const content = await fs.readFile(workflowFile, 'utf-8');\n      const workflow = JSON.parse(content);\n\n      console.log(chalk.green('Workflow loaded:'));\n      console.log(`- Name: ${workflow.name || 'Unnamed'}`);\n      console.log(`- Tasks: ${workflow.tasks?.length || 0}`);\n      console.log(chalk.yellow('\\nTo execute this workflow, ensure Claude-Flow is running'));\n    } catch (error) {\n      console.error(chalk.red('Failed to load workflow:'), getErrorMessage(error));\n    }\n  });\n"],"names":["getErrorMessage","Command","promises","fs","chalk","generateId","taskCommand","name","description","action","outputHelp","command","argument","option","type","options","task","id","priority","parseInt","dependencies","split","assignedAgent","assign","status","input","JSON","parse","createdAt","Date","console","log","green","stringify","yellow","taskId","workflowFile","content","readFile","workflow","tasks","length","error","red"],"mappings":"AAAA,SAASA,eAAe,QAAQ,+BAA+B;AAK/D,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,YAAYC,EAAE,QAAQ,UAAU;AACzC,OAAOC,WAAW,QAAQ;AAC1B,SAASC,UAAU,QAAQ,yBAAyB;AAEpD,OAAO,MAAMC,cAAc,IAAIL,UAC5BM,IAAI,CAAC,QACLC,WAAW,CAAC,gBACZC,MAAM,CAAC;IACNH,YAAYI,UAAU;AACxB,GACCC,OAAO,CAAC,UACRH,WAAW,CAAC,qBACZI,QAAQ,CAAC,UAAU,aACnBA,QAAQ,CAAC,iBAAiB,oBAC1BC,MAAM,CAAC,6BAA6B,iBAAiB,KACrDA,MAAM,CAAC,6BAA6B,+CACpCA,MAAM,CAAC,uBAAuB,sBAC9BA,MAAM,CAAC,wBAAwB,4BAC/BJ,MAAM,CAAC,OAAOK,MAAcN,aAAqBO;IAChD,MAAMC,OAAa;QACjBC,IAAIZ,WAAW;QACfS;QACAN;QACAU,UAAUC,SAASJ,QAAQG,QAAQ,EAAE;QACrCE,cAAcL,QAAQK,YAAY,GAAGL,QAAQK,YAAY,CAACC,KAAK,CAAC,OAAO,EAAE;QACzEC,eAAeP,QAAQQ,MAAM;QAC7BC,QAAQ;QACRC,OAAOV,QAAQU,KAAK,GAAGC,KAAKC,KAAK,CAACZ,QAAQU,KAAK,IAAI,CAAC;QACpDG,WAAW,IAAIC;IACjB;IAEAC,QAAQC,GAAG,CAAC3B,MAAM4B,KAAK,CAAC;IACxBF,QAAQC,GAAG,CAACL,KAAKO,SAAS,CAACjB,MAAM,MAAM;IACvCc,QAAQC,GAAG,CAAC3B,MAAM8B,MAAM,CAAC;AAC3B,GACCvB,OAAO,CAAC,QACRH,WAAW,CAAC,kBACZK,MAAM,CAAC,gCAAgC,oBACvCA,MAAM,CAAC,8BAA8B,4BACrCJ,MAAM,CAAC,OAAOM;IACbe,QAAQC,GAAG,CAAC3B,MAAM8B,MAAM,CAAC;AAC3B,GACCvB,OAAO,CAAC,UACRH,WAAW,CAAC,mBACZI,QAAQ,CAAC,aAAa,WACtBH,MAAM,CAAC,OAAO0B,QAAgBpB;IAC7Be,QAAQC,GAAG,CAAC3B,MAAM8B,MAAM,CAAC,CAAC,mDAAmD,CAAC;AAChF,GACCvB,OAAO,CAAC,UACRH,WAAW,CAAC,iBACZI,QAAQ,CAAC,aAAa,WACtBC,MAAM,CAAC,yBAAyB,uBAChCJ,MAAM,CAAC,OAAO0B,QAAgBpB;IAC7Be,QAAQC,GAAG,CAAC3B,MAAM8B,MAAM,CAAC,CAAC,gBAAgB,EAAEC,OAAO,wCAAwC,CAAC;AAC9F,GACCxB,OAAO,CAAC,YACRH,WAAW,CAAC,gCACZI,QAAQ,CAAC,mBAAmB,sBAC5BH,MAAM,CAAC,OAAO2B,cAAsBrB;IACnC,IAAI;QACF,MAAMsB,UAAU,MAAMlC,GAAGmC,QAAQ,CAACF,cAAc;QAChD,MAAMG,WAAWb,KAAKC,KAAK,CAACU;QAE5BP,QAAQC,GAAG,CAAC3B,MAAM4B,KAAK,CAAC;QACxBF,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEQ,SAAShC,IAAI,IAAI,WAAW;QACnDuB,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEQ,SAASC,KAAK,EAAEC,UAAU,GAAG;QACrDX,QAAQC,GAAG,CAAC3B,MAAM8B,MAAM,CAAC;IAC3B,EAAE,OAAOQ,OAAO;QACdZ,QAAQY,KAAK,CAACtC,MAAMuC,GAAG,CAAC,6BAA6B3C,gBAAgB0C;IACvE;AACF,GAAG"}