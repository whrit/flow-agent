{"version":3,"sources":["../../../../src/cli/commands/neural-init.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport chalk from 'chalk';\nimport { logger } from '../../monitoring/logger.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface InitOptions {\n  force?: boolean;\n  targetDir?: string;\n}\n\nexport class NeuralInitCommand {\n  private readonly sourcePath = path.resolve(__dirname, '../../../.claude/agents/neural');\n  \n  async execute(options: InitOptions = {}): Promise<void> {\n    const targetDir = options.targetDir || '.claude/agents/neural';\n    const absoluteTarget = path.resolve(process.cwd(), targetDir);\n    \n    logger.info(chalk.cyan('üß† Initializing Claude Flow Neural Module...'));\n    \n    try {\n      // Check if target exists\n      const exists = await this.checkExists(absoluteTarget);\n      \n      if (exists && !options.force) {\n        logger.warn(chalk.yellow('‚ö†Ô∏è  Neural module already exists. Use --force to overwrite.'));\n        const prompt = await this.confirmOverwrite();\n        if (!prompt) {\n          logger.info(chalk.gray('Installation cancelled.'));\n          return;\n        }\n      }\n      \n      // Create target directory\n      await fs.mkdir(absoluteTarget, { recursive: true });\n      \n      // Copy neural agent files\n      await this.copyNeuralFiles(absoluteTarget);\n      \n      // Initialize configuration\n      await this.initializeConfig(absoluteTarget);\n      \n      // Verify installation\n      const verified = await this.verifyInstallation(absoluteTarget);\n      \n      if (verified) {\n        logger.success(chalk.green('‚úÖ Neural module initialized successfully!'));\n        this.printUsage();\n      } else {\n        throw new Error('Installation verification failed');\n      }\n      \n    } catch (error) {\n      logger.error(chalk.red('‚ùå Failed to initialize neural module:'), error);\n      throw error;\n    }\n  }\n  \n  private async checkExists(targetPath: string): Promise<boolean> {\n    try {\n      await fs.access(targetPath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  \n  private async confirmOverwrite(): Promise<boolean> {\n    // In a real implementation, this would use inquirer or similar\n    // For now, we'll return false to be safe\n    console.log(chalk.yellow('Would you like to overwrite? (y/N)'));\n    return false;\n  }\n  \n  private async copyNeuralFiles(targetDir: string): Promise<void> {\n    // Copy SAFLA neural agent\n    const saflaSource = path.join(this.sourcePath, 'safla-neural.md');\n    const saflaTarget = path.join(targetDir, 'safla-neural.md');\n    \n    // Check if source exists in package\n    try {\n      // First try to copy from local installation\n      await fs.copyFile(saflaSource, saflaTarget);\n      logger.info(chalk.gray('  ‚Ä¢ Copied safla-neural.md'));\n    } catch (error) {\n      // If not found locally, create from embedded template\n      await this.createSaflaTemplate(saflaTarget);\n      logger.info(chalk.gray('  ‚Ä¢ Created safla-neural.md from template'));\n    }\n    \n    // Create additional neural agents if needed\n    await this.createNeuralAgents(targetDir);\n  }\n  \n  private async createSaflaTemplate(targetPath: string): Promise<void> {\n    const template = `---\nname: safla-neural\ndescription: \"Self-Aware Feedback Loop Algorithm (SAFLA) neural specialist\"\ncolor: cyan\n---\n\n# SAFLA Neural Agent\n\nIntegrated with Claude Flow neural system for persistent memory and self-learning capabilities.\n\n## Core Features\n- 4-tier memory architecture (Vector, Episodic, Semantic, Working)\n- Feedback loop engineering for continuous improvement\n- 172,000+ operations per second\n- 60% memory compression\n- WASM SIMD optimization\n\n## Usage\n\\`\\`\\`bash\n# Initialize SAFLA neural training\nnpx claude-flow neural train --type safla\n\n# Run inference\nnpx claude-flow neural predict --model safla\n\\`\\`\\`\n`;\n    await fs.writeFile(targetPath, template);\n  }\n  \n  private async createNeuralAgents(targetDir: string): Promise<void> {\n    // Create additional neural agent templates\n    const agents = [\n      {\n        name: 'neural-trainer.md',\n        content: this.getTrainerTemplate()\n      },\n      {\n        name: 'neural-predictor.md',\n        content: this.getPredictorTemplate()\n      }\n    ];\n    \n    for (const agent of agents) {\n      const targetPath = path.join(targetDir, agent.name);\n      await fs.writeFile(targetPath, agent.content);\n      logger.info(chalk.gray(`  ‚Ä¢ Created ${agent.name}`));\n    }\n  }\n  \n  private getTrainerTemplate(): string {\n    return `---\nname: neural-trainer\ndescription: \"Neural network training specialist\"\ncolor: purple\n---\n\n# Neural Trainer Agent\n\nManages distributed neural network training with Claude Flow.\n`;\n  }\n  \n  private getPredictorTemplate(): string {\n    return `---\nname: neural-predictor  \ndescription: \"Neural inference and prediction specialist\"\ncolor: blue\n---\n\n# Neural Predictor Agent\n\nHandles neural network inference and predictions.\n`;\n  }\n  \n  private async initializeConfig(targetDir: string): Promise<void> {\n    const config = {\n      version: '1.0.0',\n      neural: {\n        enabled: true,\n        defaultModel: 'safla',\n        wasmOptimization: true,\n        memoryCompression: 0.6,\n        operationsPerSecond: 172000\n      },\n      agents: [\n        'safla-neural',\n        'neural-trainer',\n        'neural-predictor'\n      ]\n    };\n    \n    const configPath = path.join(targetDir, 'config.json');\n    await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n    logger.info(chalk.gray('  ‚Ä¢ Created neural config.json'));\n  }\n  \n  private async verifyInstallation(targetDir: string): Promise<boolean> {\n    const requiredFiles = [\n      'safla-neural.md',\n      'neural-trainer.md',\n      'neural-predictor.md',\n      'config.json'\n    ];\n    \n    for (const file of requiredFiles) {\n      const filePath = path.join(targetDir, file);\n      const exists = await this.checkExists(filePath);\n      if (!exists) {\n        logger.error(chalk.red(`  ‚úó Missing required file: ${file}`));\n        return false;\n      }\n      logger.info(chalk.gray(`  ‚úì Verified ${file}`));\n    }\n    \n    return true;\n  }\n  \n  private printUsage(): void {\n    console.log('\\n' + chalk.cyan('üìö Usage:'));\n    console.log(chalk.gray('  npx claude-flow neural train --type safla'));\n    console.log(chalk.gray('  npx claude-flow neural predict --model safla'));\n    console.log(chalk.gray('  @agent-safla-neural \"Create self-improving system\"'));\n    console.log('\\n' + chalk.cyan('üîó Documentation:'));\n    console.log(chalk.gray('  https://github.com/ruvnet/SAFLA'));\n  }\n}\n\n// CLI execution\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const command = new NeuralInitCommand();\n  const options: InitOptions = {};\n  \n  if (process.argv.includes('--force')) {\n    options.force = true;\n  }\n  \n  const targetIndex = process.argv.indexOf('--target');\n  if (targetIndex !== -1 && process.argv[targetIndex + 1]) {\n    options.targetDir = process.argv[targetIndex + 1];\n  }\n  \n  command.execute(options).catch(process.exit);\n}\n\nexport default NeuralInitCommand;"],"names":["promises","fs","path","fileURLToPath","chalk","logger","__filename","url","__dirname","dirname","NeuralInitCommand","sourcePath","resolve","execute","options","targetDir","absoluteTarget","process","cwd","info","cyan","exists","checkExists","force","warn","yellow","prompt","confirmOverwrite","gray","mkdir","recursive","copyNeuralFiles","initializeConfig","verified","verifyInstallation","success","green","printUsage","Error","error","red","targetPath","access","console","log","saflaSource","join","saflaTarget","copyFile","createSaflaTemplate","createNeuralAgents","template","writeFile","agents","name","content","getTrainerTemplate","getPredictorTemplate","agent","config","version","neural","enabled","defaultModel","wasmOptimization","memoryCompression","operationsPerSecond","configPath","JSON","stringify","requiredFiles","file","filePath","argv","command","includes","targetIndex","indexOf","catch","exit"],"mappings":";AACA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AACpC,OAAOC,UAAU,OAAO;AACxB,SAASC,aAAa,QAAQ,MAAM;AACpC,OAAOC,WAAW,QAAQ;AAC1B,SAASC,MAAM,QAAQ,6BAA6B;AAEpD,MAAMC,aAAaH,cAAc,YAAYI,GAAG;AAChD,MAAMC,YAAYN,KAAKO,OAAO,CAACH;AAO/B,OAAO,MAAMI;IACMC,aAAaT,KAAKU,OAAO,CAACJ,WAAW,kCAAkC;IAExF,MAAMK,QAAQC,UAAuB,CAAC,CAAC,EAAiB;QACtD,MAAMC,YAAYD,QAAQC,SAAS,IAAI;QACvC,MAAMC,iBAAiBd,KAAKU,OAAO,CAACK,QAAQC,GAAG,IAAIH;QAEnDV,OAAOc,IAAI,CAACf,MAAMgB,IAAI,CAAC;QAEvB,IAAI;YAEF,MAAMC,SAAS,MAAM,IAAI,CAACC,WAAW,CAACN;YAEtC,IAAIK,UAAU,CAACP,QAAQS,KAAK,EAAE;gBAC5BlB,OAAOmB,IAAI,CAACpB,MAAMqB,MAAM,CAAC;gBACzB,MAAMC,SAAS,MAAM,IAAI,CAACC,gBAAgB;gBAC1C,IAAI,CAACD,QAAQ;oBACXrB,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC;oBACvB;gBACF;YACF;YAGA,MAAM3B,GAAG4B,KAAK,CAACb,gBAAgB;gBAAEc,WAAW;YAAK;YAGjD,MAAM,IAAI,CAACC,eAAe,CAACf;YAG3B,MAAM,IAAI,CAACgB,gBAAgB,CAAChB;YAG5B,MAAMiB,WAAW,MAAM,IAAI,CAACC,kBAAkB,CAAClB;YAE/C,IAAIiB,UAAU;gBACZ5B,OAAO8B,OAAO,CAAC/B,MAAMgC,KAAK,CAAC;gBAC3B,IAAI,CAACC,UAAU;YACjB,OAAO;gBACL,MAAM,IAAIC,MAAM;YAClB;QAEF,EAAE,OAAOC,OAAO;YACdlC,OAAOkC,KAAK,CAACnC,MAAMoC,GAAG,CAAC,0CAA0CD;YACjE,MAAMA;QACR;IACF;IAEA,MAAcjB,YAAYmB,UAAkB,EAAoB;QAC9D,IAAI;YACF,MAAMxC,GAAGyC,MAAM,CAACD;YAChB,OAAO;QACT,EAAE,OAAM;YACN,OAAO;QACT;IACF;IAEA,MAAcd,mBAAqC;QAGjDgB,QAAQC,GAAG,CAACxC,MAAMqB,MAAM,CAAC;QACzB,OAAO;IACT;IAEA,MAAcM,gBAAgBhB,SAAiB,EAAiB;QAE9D,MAAM8B,cAAc3C,KAAK4C,IAAI,CAAC,IAAI,CAACnC,UAAU,EAAE;QAC/C,MAAMoC,cAAc7C,KAAK4C,IAAI,CAAC/B,WAAW;QAGzC,IAAI;YAEF,MAAMd,GAAG+C,QAAQ,CAACH,aAAaE;YAC/B1C,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC;QACzB,EAAE,OAAOW,OAAO;YAEd,MAAM,IAAI,CAACU,mBAAmB,CAACF;YAC/B1C,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC;QACzB;QAGA,MAAM,IAAI,CAACsB,kBAAkB,CAACnC;IAChC;IAEA,MAAckC,oBAAoBR,UAAkB,EAAiB;QACnE,MAAMU,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBtB,CAAC;QACG,MAAMlD,GAAGmD,SAAS,CAACX,YAAYU;IACjC;IAEA,MAAcD,mBAAmBnC,SAAiB,EAAiB;QAEjE,MAAMsC,SAAS;YACb;gBACEC,MAAM;gBACNC,SAAS,IAAI,CAACC,kBAAkB;YAClC;YACA;gBACEF,MAAM;gBACNC,SAAS,IAAI,CAACE,oBAAoB;YACpC;SACD;QAED,KAAK,MAAMC,SAASL,OAAQ;YAC1B,MAAMZ,aAAavC,KAAK4C,IAAI,CAAC/B,WAAW2C,MAAMJ,IAAI;YAClD,MAAMrD,GAAGmD,SAAS,CAACX,YAAYiB,MAAMH,OAAO;YAC5ClD,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC,CAAC,YAAY,EAAE8B,MAAMJ,IAAI,EAAE;QACpD;IACF;IAEQE,qBAA6B;QACnC,OAAO,CAAC;;;;;;;;;AASZ,CAAC;IACC;IAEQC,uBAA+B;QACrC,OAAO,CAAC;;;;;;;;;AASZ,CAAC;IACC;IAEA,MAAczB,iBAAiBjB,SAAiB,EAAiB;QAC/D,MAAM4C,SAAS;YACbC,SAAS;YACTC,QAAQ;gBACNC,SAAS;gBACTC,cAAc;gBACdC,kBAAkB;gBAClBC,mBAAmB;gBACnBC,qBAAqB;YACvB;YACAb,QAAQ;gBACN;gBACA;gBACA;aACD;QACH;QAEA,MAAMc,aAAajE,KAAK4C,IAAI,CAAC/B,WAAW;QACxC,MAAMd,GAAGmD,SAAS,CAACe,YAAYC,KAAKC,SAAS,CAACV,QAAQ,MAAM;QAC5DtD,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC;IACzB;IAEA,MAAcM,mBAAmBnB,SAAiB,EAAoB;QACpE,MAAMuD,gBAAgB;YACpB;YACA;YACA;YACA;SACD;QAED,KAAK,MAAMC,QAAQD,cAAe;YAChC,MAAME,WAAWtE,KAAK4C,IAAI,CAAC/B,WAAWwD;YACtC,MAAMlD,SAAS,MAAM,IAAI,CAACC,WAAW,CAACkD;YACtC,IAAI,CAACnD,QAAQ;gBACXhB,OAAOkC,KAAK,CAACnC,MAAMoC,GAAG,CAAC,CAAC,2BAA2B,EAAE+B,MAAM;gBAC3D,OAAO;YACT;YACAlE,OAAOc,IAAI,CAACf,MAAMwB,IAAI,CAAC,CAAC,aAAa,EAAE2C,MAAM;QAC/C;QAEA,OAAO;IACT;IAEQlC,aAAmB;QACzBM,QAAQC,GAAG,CAAC,OAAOxC,MAAMgB,IAAI,CAAC;QAC9BuB,QAAQC,GAAG,CAACxC,MAAMwB,IAAI,CAAC;QACvBe,QAAQC,GAAG,CAACxC,MAAMwB,IAAI,CAAC;QACvBe,QAAQC,GAAG,CAACxC,MAAMwB,IAAI,CAAC;QACvBe,QAAQC,GAAG,CAAC,OAAOxC,MAAMgB,IAAI,CAAC;QAC9BuB,QAAQC,GAAG,CAACxC,MAAMwB,IAAI,CAAC;IACzB;AACF;AAGA,IAAI,YAAYrB,GAAG,KAAK,CAAC,OAAO,EAAEU,QAAQwD,IAAI,CAAC,EAAE,EAAE,EAAE;IACnD,MAAMC,UAAU,IAAIhE;IACpB,MAAMI,UAAuB,CAAC;IAE9B,IAAIG,QAAQwD,IAAI,CAACE,QAAQ,CAAC,YAAY;QACpC7D,QAAQS,KAAK,GAAG;IAClB;IAEA,MAAMqD,cAAc3D,QAAQwD,IAAI,CAACI,OAAO,CAAC;IACzC,IAAID,gBAAgB,CAAC,KAAK3D,QAAQwD,IAAI,CAACG,cAAc,EAAE,EAAE;QACvD9D,QAAQC,SAAS,GAAGE,QAAQwD,IAAI,CAACG,cAAc,EAAE;IACnD;IAEAF,QAAQ7D,OAAO,CAACC,SAASgE,KAAK,CAAC7D,QAAQ8D,IAAI;AAC7C;AAEA,eAAerE,kBAAkB"}