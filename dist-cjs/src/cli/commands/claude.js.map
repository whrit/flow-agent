{"version":3,"sources":["../../../../src/cli/commands/claude.ts"],"sourcesContent":["/**\n * Claude instance management commands\n */\nimport { promises as fs } from 'node:fs';\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { spawn } from 'node:child_process';\nimport { generateId } from '../../utils/helpers.js';\n\nexport const claudeCommand = new Command()\n  .name('claude')\n  .description('Manage Claude instances')\n  .action(() => {\n    claudeCommand.help();\n  });\n\n// Spawn command\nclaudeCommand\n  .command('spawn')\n  .description('Spawn a new Claude instance with specific configuration')\n  .arguments('<task>')\n  .option(\n    '-t, --tools <tools>',\n    'Allowed tools (comma-separated)',\n    'View,Edit,Replace,GlobTool,GrepTool,LS,Bash',\n  )\n  .option('--no-permissions', 'Use --dangerously-skip-permissions flag')\n  .option('-c, --config <config>', 'MCP config file path')\n  .option(\n    '-m, --mode <mode>',\n    'Development mode (full, backend-only, frontend-only, api-only)',\n    'full',\n  )\n  .option('--parallel', 'Enable parallel execution with BatchTool')\n  .option('--research', 'Enable web research with WebFetchTool')\n  .option('--coverage <coverage>', 'Test coverage target', '80')\n  .option('--commit <frequency>', 'Commit frequency (phase, feature, manual)', 'phase')\n  .option('-v, --verbose', 'Enable verbose output')\n  .option('--dry-run', 'Show what would be executed without running')\n  .action(async (task: string, options: any) => {\n    try {\n      const instanceId = generateId('claude');\n\n      // Build allowed tools list\n      let tools = options.tools;\n      if (options.parallel && !tools.includes('BatchTool')) {\n        tools += ',BatchTool,dispatch_agent';\n      }\n      if (options.research && !tools.includes('WebFetchTool')) {\n        tools += ',WebFetchTool';\n      }\n\n      // Build Claude command\n      const claudeArgs = [task];\n      claudeArgs.push('--allowedTools', tools);\n\n      if (options.noPermissions) {\n        claudeArgs.push('--dangerously-skip-permissions');\n      }\n\n      if (options.config) {\n        claudeArgs.push('--mcp-config', options.config);\n      }\n\n      if (options.verbose) {\n        claudeArgs.push('--verbose');\n      }\n\n      if (options.dryRun) {\n        console.log(chalk.yellow('DRY RUN - Would execute:'));\n        console.log(chalk.gray(`claude ${claudeArgs.join(' ')}`));\n        console.log('\\nConfiguration:');\n        console.log(`  Instance ID: ${instanceId}`);\n        console.log(`  Task: ${task}`);\n        console.log(`  Tools: ${tools}`);\n        console.log(`  Mode: ${options.mode}`);\n        console.log(`  Coverage: ${parseInt(options.coverage)}%`);\n        console.log(`  Commit: ${options.commit}`);\n        return;\n      }\n\n      console.log(chalk.green(`Spawning Claude instance: ${instanceId}`));\n      console.log(chalk.gray(`Task: ${task}`));\n      console.log(chalk.gray(`Tools: ${tools}`));\n\n      // Spawn Claude process\n      const claude = spawn('claude', claudeArgs, {\n        stdio: 'inherit',\n        env: {\n          ...process.env,\n          CLAUDE_INSTANCE_ID: instanceId,\n          CLAUDE_FLOW_MODE: options.mode,\n          CLAUDE_FLOW_COVERAGE: parseInt(options.coverage).toString(),\n          CLAUDE_FLOW_COMMIT: options.commit,\n        },\n      });\n\n      claude.on('error', (err) => {\n        console.error(chalk.red('Failed to spawn Claude:'), err.message);\n      });\n\n      claude.on('exit', (code) => {\n        if (code === 0) {\n          console.log(chalk.green(`Claude instance ${instanceId} completed successfully`));\n        } else {\n          console.log(chalk.red(`Claude instance ${instanceId} exited with code ${code}`));\n        }\n      });\n    } catch (error) {\n      console.error(chalk.red('Failed to spawn Claude:'), (error as Error).message);\n    }\n  });\n\n// Batch command\nclaudeCommand\n  .command('batch')\n  .description('Spawn multiple Claude instances from workflow')\n  .arguments('<workflow-file>')\n  .option('--dry-run', 'Show what would be executed without running')\n  .action(async (workflowFile: string, options: any) => {\n    try {\n      const content = await fs.readFile(workflowFile, 'utf-8');\n      const workflow = JSON.parse(content);\n\n      console.log(chalk.green('Loading workflow:'), workflow.name || 'Unnamed');\n      console.log(chalk.gray(`Tasks: ${workflow.tasks?.length || 0}`));\n\n      if (!workflow.tasks || workflow.tasks.length === 0) {\n        console.log(chalk.yellow('No tasks found in workflow'));\n        return;\n      }\n\n      for (const task of workflow.tasks) {\n        const claudeArgs = [task.description || task.name];\n\n        // Add tools\n        if (task.tools) {\n          claudeArgs.push(\n            '--allowedTools',\n            Array.isArray(task.tools) ? task.tools.join(',') : task.tools,\n          );\n        }\n\n        // Add flags\n        if (task.skipPermissions) {\n          claudeArgs.push('--dangerously-skip-permissions');\n        }\n\n        if (task.config) {\n          claudeArgs.push('--mcp-config', task.config);\n        }\n\n        if (options.dryRun) {\n          console.log(chalk.yellow(`\\nDRY RUN - Task: ${task.name || task.id}`));\n          console.log(chalk.gray(`claude ${claudeArgs.join(' ')}`));\n        } else {\n          console.log(chalk.blue(`\\nSpawning Claude for task: ${task.name || task.id}`));\n\n          const claude = spawn('claude', claudeArgs, {\n            stdio: 'inherit',\n            env: {\n              ...process.env,\n              CLAUDE_TASK_ID: task.id || generateId('task'),\n              CLAUDE_TASK_TYPE: task.type || 'general',\n            },\n          });\n\n          // Wait for completion if sequential\n          if (!workflow.parallel) {\n            await new Promise((resolve) => {\n              claude.on('exit', resolve);\n            });\n          }\n        }\n      }\n\n      if (!options.dryRun && workflow.parallel) {\n        console.log(chalk.green('\\nAll Claude instances spawned in parallel mode'));\n      }\n    } catch (error) {\n      console.error(chalk.red('Failed to process workflow:'), (error as Error).message);\n    }\n  });\n"],"names":["promises","fs","Command","chalk","spawn","generateId","claudeCommand","name","description","action","help","command","arguments","option","task","options","instanceId","tools","parallel","includes","research","claudeArgs","push","noPermissions","config","verbose","dryRun","console","log","yellow","gray","join","mode","parseInt","coverage","commit","green","claude","stdio","env","process","CLAUDE_INSTANCE_ID","CLAUDE_FLOW_MODE","CLAUDE_FLOW_COVERAGE","toString","CLAUDE_FLOW_COMMIT","on","err","error","red","message","code","workflowFile","content","readFile","workflow","JSON","parse","tasks","length","Array","isArray","skipPermissions","id","blue","CLAUDE_TASK_ID","CLAUDE_TASK_TYPE","type","Promise","resolve"],"mappings":"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"}