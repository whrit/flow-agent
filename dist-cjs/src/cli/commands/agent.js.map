{"version":3,"sources":["../../../../src/cli/commands/agent.ts"],"sourcesContent":["/**\n * Comprehensive Agent management commands with advanced features\n */\n\n// Converted from @cliffy to commander.js for Node.js compatibility\nimport { Command } from '../commander-fix.js';\nimport Table from 'cli-table3';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nconst { colors } = { colors: chalk }; // Compatibility shim\nimport type { AgentProfile } from '../../utils/types.js';\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport type { MemoryManager } from '../../memory/manager.js';\nimport { EventBus } from '../../core/event-bus.js';\nimport { Logger } from '../../core/logger.js';\nimport { DistributedMemorySystem } from '../../memory/distributed-memory.js';\nimport { formatDuration, formatBytes, formatPercentage } from '../../utils/formatters.js';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\n\n// Global agent manager instance\nlet agentManager: AgentManager | null = null;\n\n// Initialize agent manager\nasync function initializeAgentManager(): Promise<AgentManager> {\n  if (agentManager) return agentManager;\n\n  const logger = new Logger({ level: 'info', format: 'text', destination: 'console' });\n  const eventBus = EventBus.getInstance();\n  const memorySystem = new DistributedMemorySystem(\n    {}, // Use default config\n    logger,\n    eventBus,\n  );\n\n  await memorySystem.initialize();\n\n  agentManager = new AgentManager(\n    {\n      maxAgents: 100,\n      defaultTimeout: 60000,\n      heartbeatInterval: 15000,\n      healthCheckInterval: 30000,\n      autoRestart: true,\n      resourceLimits: {\n        memory: 1024 * 1024 * 1024, // 1GB\n        cpu: 2.0,\n        disk: 2 * 1024 * 1024 * 1024, // 2GB\n      },\n    },\n    logger,\n    eventBus,\n    memorySystem,\n  );\n\n  await agentManager.initialize();\n  return agentManager;\n}\n\nexport function createAgentCommand(): Command {\n  const agentCommand = new Command('agent')\n    .description('Comprehensive Claude-Flow agent management with advanced features')\n    .action(() => {\n      console.log(chalk.cyan('🤖 Claude-Flow Agent Management System'));\n      console.log('');\n      console.log('Available commands:');\n      console.log('  spawn    - Create and start new agents with advanced configuration');\n      console.log('  list     - Display all agents with status, metrics, and resource usage');\n      console.log('  info     - Get detailed information about a specific agent');\n      console.log('  terminate - Safely terminate agents with cleanup and state preservation');\n      console.log('  pool     - Manage agent pools for scaling and load distribution');\n      console.log('  health   - Monitor agent health and performance metrics');\n      console.log('  logs     - View agent logs and activity history');\n      console.log('');\n      console.log('Use --help with any command for detailed options.');\n    });\n  // List command\n  agentCommand\n    .command('list')\n    .description('Display all agents with comprehensive status and metrics')\n    .option('-t, --type <type>', 'Filter by agent type')\n    .option('-s, --status <status>', 'Filter by agent status')\n    .option('--unhealthy', 'Show only unhealthy agents')\n    .option('--json', 'Output in JSON format')\n    .option('--detailed', 'Show detailed resource usage and metrics')\n    .option('--sort <field>', 'Sort by field (name, type, status, health, workload)', 'name')\n    .action(async (options: any) => {\n      try {\n        const manager = await initializeAgentManager();\n        let agents = manager.getAllAgents();\n\n        // Apply filters\n        if (options.type) {\n          agents = agents.filter((agent) => agent.type === options.type);\n        }\n\n        if (options.status) {\n          agents = agents.filter((agent) => agent.status === options.status);\n        }\n\n        if (options.unhealthy) {\n          agents = agents.filter((agent) => agent.health < 0.7);\n        }\n\n        // Sort agents\n        agents.sort((a, b) => {\n          switch (options.sort) {\n            case 'type':\n              return a.type.localeCompare(b.type);\n            case 'status':\n              return a.status.localeCompare(b.status);\n            case 'health':\n              return b.health - a.health;\n            case 'workload':\n              return b.workload - a.workload;\n            default:\n              return a.name.localeCompare(b.name);\n          }\n        });\n\n        if (options.json) {\n          console.log(JSON.stringify(agents, null, 2));\n          return;\n        }\n\n        if (agents.length === 0) {\n          console.log(chalk.yellow('No agents found matching the criteria'));\n          return;\n        }\n\n        console.log(chalk.cyan(`\\n🤖 Agent Status Report (${agents.length} agents)`));\n        console.log('='.repeat(80));\n\n        if (options.detailed) {\n          displayDetailedAgentList(agents, manager);\n        } else {\n          displayCompactAgentList(agents);\n        }\n\n        // Display system stats\n        const stats = manager.getSystemStats();\n        console.log('\\n' + chalk.cyan('System Overview:'));\n        console.log(\n          `Total Agents: ${stats.totalAgents} | Active: ${stats.activeAgents} | Healthy: ${stats.healthyAgents}`,\n        );\n        console.log(\n          `Average Health: ${formatPercentage(stats.averageHealth)} | Pools: ${stats.pools}`,\n        );\n      } catch (error) {\n        console.error(\n          chalk.red('Error listing agents:'),\n          error instanceof Error ? error.message : String(error),\n        );\n        process.exit(1);\n      }\n    });\n\n  // Spawn command\n  agentCommand\n    .command('spawn [template]')\n    .description('Create and start new agents with advanced configuration options')\n    .option('-n, --name <name>', 'Agent name')\n    .option('-t, --type <type>', 'Agent type')\n    .option('--template <template>', 'Use predefined template')\n    .option('--pool <pool>', 'Add to specific pool')\n    .option('--autonomy <level>', 'Autonomy level (0-1)', '0.7')\n    .option('--max-tasks <max>', 'Maximum concurrent tasks', '5')\n    .option('--max-memory <mb>', 'Memory limit in MB', '512')\n    .option('--timeout <ms>', 'Task timeout in milliseconds', '300000')\n    .option('--interactive', 'Interactive configuration')\n    .option('--start', 'Automatically start the agent after creation')\n    .option('--config <path>', 'Load configuration from JSON file')\n    .action(async (template: string, options: any) => {\n      try {\n        const manager = await initializeAgentManager();\n\n        let agentConfig: any = {};\n\n        // Load from config file if provided\n        if (options.config) {\n          const configPath = path.resolve(options.config);\n          const configData = await fs.readFile(configPath, 'utf-8');\n          agentConfig = JSON.parse(configData);\n        }\n\n        // Interactive mode\n        if (options.interactive) {\n          agentConfig = await interactiveAgentConfiguration(manager);\n        } else {\n          // Use template or command line options\n          const templateName = template || options.template;\n          if (!templateName) {\n            console.error(\n              chalk.red('Error: Template name is required. Use --interactive for guided setup.'),\n            );\n            return;\n          }\n\n          const templates = manager.getAgentTemplates();\n          const selectedTemplate = templates.find((t) =>\n            t.name.toLowerCase().includes(templateName.toLowerCase()),\n          );\n\n          if (!selectedTemplate) {\n            console.error(chalk.red(`Template '${templateName}' not found.`));\n            console.log('Available templates:');\n            templates.forEach((t) => console.log(`  - ${t.name} (${t.type})`));\n            return;\n          }\n\n          agentConfig = {\n            template: selectedTemplate.name,\n            name: options.name,\n            config: {\n              autonomyLevel: parseFloat(options.autonomy),\n              maxConcurrentTasks: parseInt(options.maxTasks),\n              timeoutThreshold: parseInt(options.timeout),\n            },\n            environment: {\n              maxMemoryUsage: parseInt(options.maxMemory) * 1024 * 1024,\n            },\n          };\n        }\n\n        console.log(chalk.cyan('\\n🚀 Creating new agent...'));\n\n        // Create the agent\n        const agentId = await manager.createAgent(agentConfig.template || 'researcher', {\n          name: agentConfig.name,\n          config: agentConfig.config,\n          environment: agentConfig.environment,\n        });\n\n        console.log(chalk.green(`✅ Agent created successfully!`));\n        console.log(`Agent ID: ${chalk.bold(agentId)}`);\n\n        // Add to pool if specified\n        if (options.pool) {\n          const pools = manager.getAllPools();\n          const targetPool = pools.find((p) => p.name === options.pool || p.id === options.pool);\n          if (targetPool) {\n            // Add agent to pool (this would need pool management methods)\n            console.log(chalk.blue(`Added to pool: ${targetPool.name}`));\n          } else {\n            console.log(chalk.yellow(`Warning: Pool '${options.pool}' not found`));\n          }\n        }\n\n        // Start agent if requested\n        if (options.start) {\n          console.log(chalk.cyan('Starting agent...'));\n          await manager.startAgent(agentId);\n          console.log(chalk.green('✅ Agent started and ready!'));\n        } else {\n          console.log(chalk.yellow(`Use 'claude-flow agent start ${agentId}' to start the agent`));\n        }\n\n        // Display agent info\n        const agent = manager.getAgent(agentId);\n        if (agent) {\n          displayAgentSummary(agent);\n        }\n      } catch (error) {\n        console.error(\n          chalk.red('Error creating agent:'),\n          error instanceof Error ? error.message : String(error),\n        );\n        process.exit(1);\n      }\n    });\n\n  // TODO: Convert remaining commands to commander.js syntax\n  // For now, return the basic command structure\n  return agentCommand;\n}\n\n// Legacy export for backward compatibility\nexport const agentCommand = createAgentCommand();\n\n// TODO: Complete conversion of remaining commands (terminate, info, start, restart, pool, health)\n// Temporarily removing broken code to fix build errors\n\n// === HELPER FUNCTIONS ===\n\nasync function interactiveAgentConfiguration(manager: AgentManager): Promise<any> {\n  console.log(chalk.cyan('\\n🛠️  Interactive Agent Configuration'));\n\n  const templates = manager.getAgentTemplates();\n  const templateChoices = templates.map((t) => ({ name: `${t.name} (${t.type})`, value: t.name }));\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'template',\n      message: 'Select agent template:',\n      choices: templateChoices,\n    },\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Agent name:',\n      default: `agent-${Date.now().toString(36)}`,\n    },\n    {\n      type: 'input',\n      name: 'autonomyLevel',\n      message: 'Autonomy level (0-1):',\n      default: '0.7',\n      validate: (value) => {\n        const num = parseFloat(value);\n        return (num >= 0 && num <= 1) || 'Must be between 0 and 1';\n      },\n    },\n    {\n      type: 'input',\n      name: 'maxTasks',\n      message: 'Maximum concurrent tasks:',\n      default: '5',\n      validate: (value) => {\n        const num = parseInt(value);\n        return (num > 0 && num <= 20) || 'Must be between 1 and 20';\n      },\n    },\n    {\n      type: 'input',\n      name: 'maxMemory',\n      message: 'Memory limit (MB):',\n      default: '512',\n      validate: (value) => {\n        const num = parseInt(value);\n        return (num >= 128 && num <= 4096) || 'Must be between 128 and 4096';\n      },\n    },\n  ]);\n\n  return {\n    template: answers.template,\n    name: answers.name,\n    config: {\n      autonomyLevel: parseFloat(answers.autonomyLevel),\n      maxConcurrentTasks: parseInt(answers.maxTasks),\n      timeoutThreshold: 300000,\n    },\n    environment: {\n      maxMemoryUsage: parseInt(answers.maxMemory) * 1024 * 1024,\n    },\n  };\n}\n\nfunction displayCompactAgentList(agents: any[]): void {\n  const table = new Table({\n    head: ['ID', 'Name', 'Type', 'Status', 'Health', 'Workload', 'Last Activity'],\n    colWidths: [10, 20, 15, 12, 10, 10, 20],\n  });\n\n  agents.forEach((agent) => {\n    table.push([\n      agent.id.id.slice(-8),\n      agent.name,\n      agent.type,\n      getStatusDisplay(agent.status),\n      getHealthDisplay(agent.health),\n      agent.workload.toString(),\n      formatRelativeTime(agent.metrics?.lastActivity || agent.lastHeartbeat),\n    ]);\n  });\n\n  console.log(table.toString());\n}\n\nfunction displayDetailedAgentList(agents: any[], manager: AgentManager): void {\n  agents.forEach((agent, index) => {\n    if (index > 0) console.log('\\n' + '-'.repeat(60));\n\n    console.log(`\\n${chalk.bold(agent.name)} (${agent.id.id.slice(-8)})`);\n    console.log(`Type: ${chalk.blue(agent.type)} | Status: ${getStatusDisplay(agent.status)}`);\n    console.log(`Health: ${getHealthDisplay(agent.health)} | Workload: ${agent.workload}`);\n\n    if (agent.metrics) {\n      console.log(\n        `Tasks: ${agent.metrics.tasksCompleted} completed, ${agent.metrics.tasksFailed} failed`,\n      );\n      console.log(`Success Rate: ${formatPercentage(agent.metrics.successRate)}`);\n      console.log(\n        `CPU: ${formatPercentage(agent.metrics.cpuUsage)} | Memory: ${formatBytes(agent.metrics.memoryUsage)}`,\n      );\n    }\n\n    const health = manager.getAgentHealth(agent.id.id);\n    if (health && health.issues.length > 0) {\n      console.log(chalk.red(`Issues: ${health.issues.length} active`));\n    }\n  });\n}\n\nfunction displayAgentSummary(agent: any): void {\n  console.log('\\n' + chalk.dim('Agent Summary:'));\n  console.log(`  Name: ${agent.name}`);\n  console.log(`  Type: ${agent.type}`);\n  console.log(`  Status: ${getStatusDisplay(agent.status)}`);\n  console.log(`  Health: ${getHealthDisplay(agent.health)}`);\n}\n\n// === UTILITY FUNCTIONS ===\n\nfunction getStatusColor(status: string): any {\n  switch (status) {\n    case 'idle':\n      return chalk.green;\n    case 'busy':\n      return chalk.blue;\n    case 'error':\n      return chalk.red;\n    case 'offline':\n      return chalk.gray;\n    case 'initializing':\n      return chalk.yellow;\n    case 'terminating':\n      return chalk.yellow;\n    case 'terminated':\n      return chalk.gray;\n    default:\n      return chalk.white;\n  }\n}\n\nfunction getStatusDisplay(status: string): string {\n  const color = getStatusColor(status);\n  return `${color}${status.toUpperCase()}${chalk.reset}`;\n}\n\nfunction getHealthDisplay(health: number): string {\n  const percentage = Math.round(health * 100);\n  let color = chalk.green;\n\n  if (health < 0.3) color = chalk.red;\n  else if (health < 0.7) color = chalk.yellow;\n\n  return `${color}${percentage}%${chalk.reset}`;\n}\n\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n\n  if (diff < 60000) return 'just now';\n  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n  return `${Math.floor(diff / 86400000)}d ago`;\n}\n"],"names":["Command","Table","chalk","inquirer","colors","AgentManager","EventBus","Logger","DistributedMemorySystem","formatBytes","formatPercentage","path","fs","agentManager","initializeAgentManager","logger","level","format","destination","eventBus","getInstance","memorySystem","initialize","maxAgents","defaultTimeout","heartbeatInterval","healthCheckInterval","autoRestart","resourceLimits","memory","cpu","disk","createAgentCommand","agentCommand","description","action","console","log","cyan","command","option","options","manager","agents","getAllAgents","type","filter","agent","status","unhealthy","health","sort","a","b","localeCompare","workload","name","json","JSON","stringify","length","yellow","repeat","detailed","displayDetailedAgentList","displayCompactAgentList","stats","getSystemStats","totalAgents","activeAgents","healthyAgents","averageHealth","pools","error","red","Error","message","String","process","exit","template","agentConfig","config","configPath","resolve","configData","readFile","parse","interactive","interactiveAgentConfiguration","templateName","templates","getAgentTemplates","selectedTemplate","find","t","toLowerCase","includes","forEach","autonomyLevel","parseFloat","autonomy","maxConcurrentTasks","parseInt","maxTasks","timeoutThreshold","timeout","environment","maxMemoryUsage","maxMemory","agentId","createAgent","green","bold","pool","getAllPools","targetPool","p","id","blue","start","startAgent","getAgent","displayAgentSummary","templateChoices","map","value","answers","prompt","choices","default","Date","now","toString","validate","num","table","head","colWidths","push","slice","getStatusDisplay","getHealthDisplay","formatRelativeTime","metrics","lastActivity","lastHeartbeat","index","tasksCompleted","tasksFailed","successRate","cpuUsage","memoryUsage","getAgentHealth","issues","dim","getStatusColor","gray","white","color","toUpperCase","reset","percentage","Math","round","date","diff","getTime","floor"],"mappings":"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"}