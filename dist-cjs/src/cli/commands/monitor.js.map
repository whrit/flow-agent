{"version":3,"sources":["../../../../src/cli/commands/monitor.ts"],"sourcesContent":["/**\n * Monitor command for Claude-Flow - Live dashboard mode\n */\n\nimport { Command } from '../commander-fix.js';\nimport { promises as fs } from 'node:fs';\nimport { existsSync } from 'fs';\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport { formatProgressBar, formatDuration, formatStatusIndicator } from '../formatter.js';\n\n// Type definitions\ninterface ComponentStatus {\n  status: 'healthy' | 'degraded' | 'error';\n  load: number;\n  uptime?: number;\n  errors?: number;\n  lastError?: string;\n}\n\ninterface AlertData {\n  id: string;\n  type: 'warning' | 'error' | 'info';\n  message: string;\n  component: string;\n  timestamp: number;\n  acknowledged: boolean;\n}\n\nexport const monitorCommand = new Command()\n  .description('Start live monitoring dashboard')\n  .option('-i, --interval <seconds>', 'Update interval in seconds', '2')\n  .option('-c, --compact', 'Compact view mode')\n  .option('--no-graphs', 'Disable ASCII graphs')\n  .option('--focus <component:string>', 'Focus on specific component')\n  .action(async (options: any) => {\n    await startMonitorDashboard(options);\n  });\n\ninterface MonitorData {\n  timestamp: Date;\n  system: {\n    cpu: number;\n    memory: number;\n    agents: number;\n    tasks: number;\n  };\n  components: Record<string, any>;\n  agents: any[];\n  tasks: any[];\n  events: any[];\n}\n\nclass Dashboard {\n  private data: MonitorData[] = [];\n  private maxDataPoints = 60; // 2 minutes at 2-second intervals\n  private running = true;\n  private alerts: AlertData[] = [];\n  private startTime = Date.now();\n  private exportData: MonitorData[] = [];\n\n  constructor(private options: any) {\n    this.options.threshold = this.options.threshold || 80;\n  }\n\n  async start(): Promise<void> {\n    // Hide cursor and clear screen\n    process.stdout.write('\\x1b[?25l');\n    console.clear();\n\n    // Setup signal handlers\n    const cleanup = () => {\n      this.running = false;\n      process.stdout.write('\\x1b[?25h'); // Show cursor\n      console.log('\\n' + chalk.gray('Monitor stopped'));\n      process.exit(0);\n    };\n\n    process.on('SIGINT', cleanup);\n    process.on('SIGTERM', cleanup);\n\n    // Start monitoring loop\n    await this.monitoringLoop();\n  }\n\n  private async monitoringLoop(): Promise<void> {\n    while (this.running) {\n      try {\n        const data = await this.collectData();\n        this.data.push(data);\n\n        // Keep only recent data points\n        if (this.data.length > this.maxDataPoints) {\n          this.data = this.data.slice(-this.maxDataPoints);\n        }\n\n        this.render();\n        await new Promise((resolve) => setTimeout(resolve, this.options.interval * 1000));\n      } catch (error) {\n        this.renderError(error);\n        await new Promise((resolve) => setTimeout(resolve, this.options.interval * 1000));\n      }\n    }\n  }\n\n  private async collectData(): Promise<MonitorData> {\n    // Mock data collection - in production, this would connect to the orchestrator\n    const timestamp = new Date();\n    const cpuUsage = 10 + Math.random() * 20; // 10-30%\n    const memoryUsage = 200 + Math.random() * 100; // 200-300MB\n\n    return {\n      timestamp,\n      system: {\n        cpu: cpuUsage,\n        memory: memoryUsage,\n        agents: 3 + Math.floor(Math.random() * 3),\n        tasks: 5 + Math.floor(Math.random() * 10),\n      },\n      components: {\n        orchestrator: { status: 'healthy', load: Math.random() * 100 },\n        terminal: { status: 'healthy', load: Math.random() * 100 },\n        memory: { status: 'healthy', load: Math.random() * 100 },\n        coordination: { status: 'healthy', load: Math.random() * 100 },\n        mcp: { status: 'healthy', load: Math.random() * 100 },\n      },\n      agents: this.generateMockAgents(),\n      tasks: this.generateMockTasks(),\n      events: this.generateMockEvents(),\n    };\n  }\n\n  private render(): void {\n    console.clear();\n\n    const latest = this.data[this.data.length - 1];\n    if (!latest) return;\n\n    // Header\n    this.renderHeader(latest);\n\n    if (this.options.focus) {\n      this.renderFocusedComponent(latest, this.options.focus);\n    } else {\n      // System overview\n      this.renderSystemOverview(latest);\n\n      // Components status\n      this.renderComponentsStatus(latest);\n\n      if (!this.options.compact) {\n        // Agents and tasks\n        this.renderAgentsAndTasks(latest);\n\n        // Recent events\n        this.renderRecentEvents(latest);\n\n        // Performance graphs\n        if (!this.options.noGraphs) {\n          this.renderPerformanceGraphs();\n        }\n      }\n    }\n\n    // Footer\n    this.renderFooter();\n  }\n\n  private renderHeader(data: MonitorData): void {\n    const time = data.timestamp.toLocaleTimeString();\n    console.log(chalk.cyan.bold('Claude-Flow Live Monitor') + chalk.gray(` - ${time}`));\n    console.log('═'.repeat(80));\n  }\n\n  private renderSystemOverview(data: MonitorData): void {\n    console.log(chalk.white.bold('System Overview'));\n    console.log('─'.repeat(40));\n\n    const cpuBar = formatProgressBar(data.system.cpu, 100, 20, 'CPU');\n    const memoryBar = formatProgressBar(data.system.memory, 1024, 20, 'Memory');\n\n    console.log(`${cpuBar} ${data.system.cpu.toFixed(1)}%`);\n    console.log(`${memoryBar} ${data.system.memory.toFixed(0)}MB`);\n    console.log(`${chalk.white('Agents:')} ${data.system.agents} active`);\n    console.log(`${chalk.white('Tasks:')} ${data.system.tasks} in queue`);\n    console.log();\n  }\n\n  private renderComponentsStatus(data: MonitorData): void {\n    console.log(chalk.white.bold('Components'));\n    console.log('─'.repeat(40));\n\n    const tableData: any[] = [];\n\n    for (const [name, component] of Object.entries(data.components)) {\n      const statusIcon = formatStatusIndicator(component.status);\n      const loadBar = this.createMiniProgressBar(component.load, 100, 10);\n\n      tableData.push({\n        Component: name,\n        Status: `${statusIcon} ${component.status}`,\n        Load: `${loadBar} ${component.load.toFixed(0)}%`,\n      });\n    }\n\n    console.table(tableData);\n    console.log();\n  }\n\n  private renderAgentsAndTasks(data: MonitorData): void {\n    // Agents table\n    console.log(chalk.white.bold('Active Agents'));\n    console.log('─'.repeat(40));\n\n    if (data.agents.length > 0) {\n      const agentTable = new Table({\n        head: ['Agent ID', 'Type', 'Status', 'Tasks'],\n        style: { border: [], head: [] },\n      });\n\n      for (const agent of data.agents.slice(0, 5)) {\n        const statusIcon = formatStatusIndicator(agent.status);\n\n        agentTable.push([\n          chalk.gray(agent.id.substring(0, 8) + '...'),\n          chalk.cyan(agent.type),\n          `${statusIcon} ${agent.status}`,\n          agent.activeTasks.toString(),\n        ]);\n      }\n\n      console.log(agentTable.toString());\n    } else {\n      console.log(chalk.gray('No active agents'));\n    }\n    console.log();\n\n    // Recent tasks\n    console.log(chalk.white.bold('Recent Tasks'));\n    console.log('─'.repeat(40));\n\n    if (data.tasks.length > 0) {\n      const taskTable = new Table({\n        head: ['Task ID', 'Type', 'Status', 'Duration'],\n        style: { border: [], head: [] },\n      });\n\n      for (const task of data.tasks.slice(0, 5)) {\n        const statusIcon = formatStatusIndicator(task.status);\n\n        taskTable.push([\n          chalk.gray(task.id.substring(0, 8) + '...'),\n          chalk.white(task.type),\n          `${statusIcon} ${task.status}`,\n          task.duration ? formatDuration(task.duration) : '-',\n        ]);\n      }\n\n      console.log(taskTable.toString());\n    } else {\n      console.log(chalk.gray('No recent tasks'));\n    }\n    console.log();\n  }\n\n  private renderRecentEvents(data: MonitorData): void {\n    console.log(chalk.white.bold('Recent Events'));\n    console.log('─'.repeat(40));\n\n    if (data.events.length > 0) {\n      for (const event of data.events.slice(0, 3)) {\n        const time = new Date(event.timestamp).toLocaleTimeString();\n        const icon = this.getEventIcon(event.type);\n        console.log(`${chalk.gray(time)} ${icon} ${event.message}`);\n      }\n    } else {\n      console.log(chalk.gray('No recent events'));\n    }\n    console.log();\n  }\n\n  private renderPerformanceGraphs(): void {\n    console.log(chalk.white.bold('Performance (Last 60s)'));\n    console.log('─'.repeat(40));\n\n    if (this.data.length >= 2) {\n      // CPU graph\n      console.log(chalk.cyan('CPU Usage:'));\n      console.log(\n        this.createSparkline(\n          this.data.map((d) => d.system.cpu),\n          30,\n        ),\n      );\n\n      // Memory graph\n      console.log(chalk.cyan('Memory Usage:'));\n      console.log(\n        this.createSparkline(\n          this.data.map((d) => d.system.memory),\n          30,\n        ),\n      );\n    } else {\n      console.log(chalk.gray('Collecting data...'));\n    }\n    console.log();\n  }\n\n  private renderFocusedComponent(data: MonitorData, componentName: string): void {\n    const component = data.components[componentName];\n    if (!component) {\n      console.log(chalk.red(`Component '${componentName}' not found`));\n      return;\n    }\n\n    console.log(chalk.white.bold(`${componentName} Details`));\n    console.log('─'.repeat(40));\n\n    const statusIcon = formatStatusIndicator(component.status);\n    console.log(`${statusIcon} Status: ${component.status}`);\n    console.log(\n      `Load: ${formatProgressBar(component.load, 100, 30)} ${component.load.toFixed(1)}%`,\n    );\n\n    // Add component-specific metrics here\n    console.log();\n  }\n\n  private renderFooter(): void {\n    console.log('─'.repeat(80));\n    console.log(\n      chalk.gray('Press Ctrl+C to exit • Update interval: ') +\n        chalk.yellow(`${this.options.interval}s`),\n    );\n  }\n\n  private renderError(error: any): void {\n    console.clear();\n    console.log(chalk.red.bold('Monitor Error'));\n    console.log('─'.repeat(40));\n\n    if ((error as Error).message.includes('ECONNREFUSED')) {\n      console.log(chalk.red('✗ Cannot connect to Claude-Flow'));\n      console.log(chalk.gray('Make sure Claude-Flow is running with: claude-flow start'));\n    } else {\n      console.log(chalk.red('Error:'), (error as Error).message);\n    }\n\n    console.log('\\n' + chalk.gray('Retrying in ') + chalk.yellow(`${this.options.interval}s...`));\n  }\n\n  private createMiniProgressBar(current: number, max: number, width: number): string {\n    const filled = Math.floor((current / max) * width);\n    const empty = width - filled;\n    return chalk.green('█'.repeat(filled)) + chalk.gray('░'.repeat(empty));\n  }\n\n  private createSparkline(data: number[], width: number): string {\n    if (data.length < 2) return chalk.gray('▁'.repeat(width));\n\n    const max = Math.max(...data);\n    const min = Math.min(...data);\n    const range = max - min || 1;\n\n    const chars = ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█'];\n    const recent = data.slice(-width);\n\n    return recent\n      .map((value) => {\n        const normalized = (value - min) / range;\n        const charIndex = Math.floor(normalized * (chars.length - 1));\n        return chalk.cyan(chars[charIndex]);\n      })\n      .join('');\n  }\n\n  private getEventIcon(type: string): string {\n    const icons = {\n      agent_spawned: chalk.green('↗'),\n      agent_terminated: chalk.red('↙'),\n      task_completed: chalk.green('✓'),\n      task_failed: chalk.red('✗'),\n      task_assigned: chalk.blue('→'),\n      system_warning: chalk.yellow('⚠'),\n      system_error: chalk.red('✗'),\n    };\n    return icons[type as keyof typeof icons] || chalk.blue('•');\n  }\n\n  private generateMockAgents(): any[] {\n    return [\n      {\n        id: 'agent-001',\n        type: 'coordinator',\n        status: 'active',\n        activeTasks: Math.floor(Math.random() * 5) + 1,\n      },\n      {\n        id: 'agent-002',\n        type: 'researcher',\n        status: 'active',\n        activeTasks: Math.floor(Math.random() * 8) + 1,\n      },\n      {\n        id: 'agent-003',\n        type: 'implementer',\n        status: Math.random() > 0.7 ? 'idle' : 'active',\n        activeTasks: Math.floor(Math.random() * 3),\n      },\n    ];\n  }\n\n  private generateMockTasks(): any[] {\n    const types = ['research', 'implementation', 'analysis', 'coordination'];\n    const statuses = ['running', 'pending', 'completed', 'failed'];\n\n    return Array.from({ length: 8 }, (_, i) => ({\n      id: `task-${String(i + 1).padStart(3, '0')}`,\n      type: types[Math.floor(Math.random() * types.length)],\n      status: statuses[Math.floor(Math.random() * statuses.length)],\n      duration: Math.random() > 0.5 ? Math.floor(Math.random() * 120000) : null,\n    }));\n  }\n\n  private generateMockEvents(): any[] {\n    const events = [\n      { type: 'task_completed', message: 'Research task completed successfully' },\n      { type: 'agent_spawned', message: 'New implementer agent spawned' },\n      { type: 'task_assigned', message: 'Task assigned to coordinator agent' },\n      { type: 'system_warning', message: 'High memory usage detected' },\n    ];\n\n    const eventTypes = [\n      {\n        type: 'task_completed',\n        message: 'Research task completed successfully',\n        level: 'info' as const,\n      },\n      { type: 'agent_spawned', message: 'New implementer agent spawned', level: 'info' as const },\n      {\n        type: 'task_assigned',\n        message: 'Task assigned to coordinator agent',\n        level: 'info' as const,\n      },\n      { type: 'system_warning', message: 'High memory usage detected', level: 'warn' as const },\n      {\n        type: 'task_failed',\n        message: 'Analysis task failed due to timeout',\n        level: 'error' as const,\n      },\n      { type: 'system_info', message: 'System health check completed', level: 'info' as const },\n      { type: 'memory_gc', message: 'Garbage collection triggered', level: 'debug' as const },\n      { type: 'network_event', message: 'MCP connection established', level: 'info' as const },\n    ];\n\n    const components = ['orchestrator', 'terminal', 'memory', 'coordination', 'mcp'];\n\n    return Array.from({ length: 6 + Math.floor(Math.random() * 4) }, (_, i) => {\n      const event = eventTypes[Math.floor(Math.random() * eventTypes.length)];\n      return {\n        ...event,\n        timestamp: Date.now() - i * Math.random() * 300000, // Random intervals up to 5 minutes\n        component:\n          Math.random() > 0.3\n            ? components[Math.floor(Math.random() * components.length)]\n            : undefined,\n      };\n    }).sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  private async checkSystemRunning(): Promise<boolean> {\n    try {\n      return await existsSync('.claude-flow.pid');\n    } catch {\n      return false;\n    }\n  }\n\n  private async getRealSystemData(): Promise<MonitorData | null> {\n    // This would connect to the actual orchestrator for real data\n    // For now, return null to use mock data\n    return null;\n  }\n\n  private generateComponentStatus(): Record<string, ComponentStatus> {\n    const components = ['orchestrator', 'terminal', 'memory', 'coordination', 'mcp'];\n    const statuses = ['healthy', 'degraded', 'error'];\n\n    const result: Record<string, ComponentStatus> = {};\n\n    for (const component of components) {\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n      const hasErrors = Math.random() > 0.8;\n\n      result[component] = {\n        status: status as 'error' | 'healthy' | 'degraded',\n        load: Math.random() * 100,\n        uptime: Math.random() * 3600000, // Up to 1 hour\n        errors: hasErrors ? Math.floor(Math.random() * 5) : 0,\n        lastError: hasErrors ? 'Connection timeout' : undefined,\n      };\n    }\n\n    return result;\n  }\n\n  private checkAlerts(data: MonitorData): void {\n    const newAlerts: AlertData[] = [];\n\n    // Check system thresholds\n    if (data.system.cpu > this.options.threshold) {\n      newAlerts.push({\n        id: 'cpu-high',\n        type: 'warning',\n        message: `CPU usage high: ${data.system.cpu.toFixed(1)}%`,\n        component: 'system',\n        timestamp: Date.now(),\n        acknowledged: false,\n      });\n    }\n\n    if (data.system.memory > 800) {\n      newAlerts.push({\n        id: 'memory-high',\n        type: 'warning',\n        message: `Memory usage high: ${data.system.memory.toFixed(0)}MB`,\n        component: 'system',\n        timestamp: Date.now(),\n        acknowledged: false,\n      });\n    }\n\n    // Check component status\n    for (const [name, component] of Object.entries(data.components)) {\n      if (component.status === 'error') {\n        newAlerts.push({\n          id: `component-error-${name}`,\n          type: 'error',\n          message: `Component ${name} is in error state`,\n          component: name,\n          timestamp: Date.now(),\n          acknowledged: false,\n        });\n      }\n\n      if (component.load > this.options.threshold) {\n        newAlerts.push({\n          id: `component-load-${name}`,\n          type: 'warning',\n          message: `Component ${name} load high: ${component.load.toFixed(1)}%`,\n          component: name,\n          timestamp: Date.now(),\n          acknowledged: false,\n        });\n      }\n    }\n\n    // Update alerts list (keep only recent ones)\n    this.alerts = [...this.alerts, ...newAlerts]\n      .filter((alert) => Date.now() - alert.timestamp < 300000) // 5 minutes\n      .slice(-10); // Keep max 10 alerts\n  }\n\n  private async exportMonitoringData(): Promise<void> {\n    try {\n      const exportData = {\n        metadata: {\n          exportTime: new Date().toISOString(),\n          duration: formatDuration(Date.now() - this.startTime),\n          dataPoints: this.exportData.length,\n          interval: this.options.interval,\n        },\n        data: this.exportData,\n        alerts: this.alerts,\n      };\n\n      await fs.writeFile(this.options.export, JSON.stringify(exportData, null, 2));\n      console.log(chalk.green(`✓ Monitoring data exported to ${this.options.export}`));\n    } catch (error) {\n      console.error(chalk.red('Failed to export data:'), (error as Error).message);\n    }\n  }\n}\n\nasync function startMonitorDashboard(options: any): Promise<void> {\n  // Validate options\n  if (options.interval < 1) {\n    console.error(chalk.red('Update interval must be at least 1 second'));\n    return;\n  }\n\n  if (options.threshold < 1 || options.threshold > 100) {\n    console.error(chalk.red('Threshold must be between 1 and 100'));\n    return;\n  }\n\n  if (options.export) {\n    // Check if export path is writable\n    try {\n      await fs.writeFile(options.export, '');\n      await Deno.remove(options.export);\n    } catch {\n      console.error(chalk.red(`Cannot write to export file: ${options.export}`));\n      return;\n    }\n  }\n\n  const dashboard = new Dashboard(options);\n  await dashboard.start();\n}\n"],"names":["Command","promises","fs","existsSync","chalk","Table","formatProgressBar","formatDuration","formatStatusIndicator","monitorCommand","description","option","action","options","startMonitorDashboard","Dashboard","data","maxDataPoints","running","alerts","startTime","Date","now","exportData","threshold","start","process","stdout","write","console","clear","cleanup","log","gray","exit","on","monitoringLoop","collectData","push","length","slice","render","Promise","resolve","setTimeout","interval","error","renderError","timestamp","cpuUsage","Math","random","memoryUsage","system","cpu","memory","agents","floor","tasks","components","orchestrator","status","load","terminal","coordination","mcp","generateMockAgents","generateMockTasks","events","generateMockEvents","latest","renderHeader","focus","renderFocusedComponent","renderSystemOverview","renderComponentsStatus","compact","renderAgentsAndTasks","renderRecentEvents","noGraphs","renderPerformanceGraphs","renderFooter","time","toLocaleTimeString","cyan","bold","repeat","white","cpuBar","memoryBar","toFixed","tableData","name","component","Object","entries","statusIcon","loadBar","createMiniProgressBar","Component","Status","Load","table","agentTable","head","style","border","agent","id","substring","type","activeTasks","toString","taskTable","task","duration","event","icon","getEventIcon","message","createSparkline","map","d","componentName","red","yellow","includes","current","max","width","filled","empty","green","min","range","chars","recent","value","normalized","charIndex","join","icons","agent_spawned","agent_terminated","task_completed","task_failed","task_assigned","blue","system_warning","system_error","types","statuses","Array","from","_","i","String","padStart","eventTypes","level","undefined","sort","a","b","checkSystemRunning","getRealSystemData","generateComponentStatus","result","hasErrors","uptime","errors","lastError","checkAlerts","newAlerts","acknowledged","filter","alert","exportMonitoringData","metadata","exportTime","toISOString","dataPoints","writeFile","export","JSON","stringify","Deno","remove","dashboard"],"mappings":"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"}