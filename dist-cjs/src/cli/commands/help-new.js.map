{"version":3,"sources":["../../../../src/cli/commands/help-new.ts"],"sourcesContent":["/**\n * Standardized help command for Claude-Flow CLI\n * Follows Unix/Linux conventions for help output\n */\n\nimport { Command } from '../commander-fix.js';\nimport { HelpFormatter, CommandInfo } from '../help-formatter.js';\n\nexport const helpCommand = new Command()\n  .name('help')\n  .description('Show help information')\n  .argument('[command]', 'Command to show help for')\n  .option('--all', 'Show all available commands')\n  .action(async (command?: string, options?: any) => {\n    if (command) {\n      showCommandHelp(command);\n    } else {\n      showMainHelp();\n    }\n  });\n\nfunction showMainHelp(): void {\n  const mainHelp: CommandInfo = {\n    name: 'claude-flow',\n    description: 'Advanced AI agent orchestration system',\n    usage: `claude-flow <command> [<args>] [options]\n    claude-flow <command> --help\n    claude-flow --version`,\n    commands: [\n      {\n        name: 'hive-mind',\n        description: 'Manage hive mind swarm intelligence',\n      },\n      {\n        name: 'init',\n        description: 'Initialize Claude Flow configuration',\n      },\n      {\n        name: 'start',\n        description: 'Start orchestration system',\n      },\n      {\n        name: 'swarm',\n        description: 'Execute multi-agent swarm coordination',\n      },\n      {\n        name: 'agent',\n        description: 'Manage individual agents',\n      },\n      {\n        name: 'sparc',\n        description: 'Execute SPARC development modes',\n      },\n      {\n        name: 'memory',\n        description: 'Manage persistent memory operations',\n      },\n      {\n        name: 'github',\n        description: 'Automate GitHub workflows',\n      },\n      {\n        name: 'status',\n        description: 'Show system status and health',\n      },\n      {\n        name: 'config',\n        description: 'Manage configuration settings',\n      },\n      {\n        name: 'session',\n        description: 'Manage sessions and state persistence',\n      },\n      {\n        name: 'help',\n        description: 'Show help information',\n      },\n    ],\n    globalOptions: [\n      {\n        flags: '--config <path>',\n        description: 'Configuration file path',\n        defaultValue: '.claude/config.json',\n      },\n      {\n        flags: '--verbose',\n        description: 'Enable verbose output',\n      },\n      {\n        flags: '--quiet',\n        description: 'Suppress non-error output',\n      },\n      {\n        flags: '--json',\n        description: 'Output in JSON format',\n      },\n      {\n        flags: '--help',\n        description: 'Show help information',\n      },\n      {\n        flags: '--version',\n        description: 'Show version information',\n      },\n    ],\n    examples: [\n      'claude-flow init --sparc',\n      'claude-flow hive-mind wizard',\n      'claude-flow swarm \"Build REST API\"',\n      'claude-flow status --json',\n    ],\n  };\n\n  console.log(HelpFormatter.formatHelp(mainHelp));\n}\n\nfunction showCommandHelp(command: string): void {\n  const commandHelp = getCommandHelp(command);\n  if (commandHelp) {\n    console.log(HelpFormatter.formatHelp(commandHelp));\n  } else {\n    console.error(\n      HelpFormatter.formatError(\n        `Unknown command: ${command}`,\n        'claude-flow help',\n        'claude-flow help [command]',\n      ),\n    );\n  }\n}\n\nfunction getCommandHelp(command: string): CommandInfo | null {\n  const commandHelpMap: Record<string, CommandInfo> = {\n    'hive-mind': {\n      name: 'claude-flow hive-mind',\n      description: 'Manage hive mind swarm intelligence',\n      usage: 'claude-flow hive-mind <subcommand> [options]',\n      commands: [\n        { name: 'init', description: 'Initialize hive mind system' },\n        { name: 'spawn', description: 'Create intelligent swarm with objective' },\n        { name: 'status', description: 'View active swarms and metrics' },\n        { name: 'stop', description: 'Stop a running swarm' },\n        { name: 'ps', description: 'List all running processes' },\n        { name: 'resume', description: 'Resume a paused swarm' },\n        { name: 'wizard', description: 'Interactive setup wizard' },\n      ],\n      options: [\n        {\n          flags: '--queen-type <type>',\n          description: 'Queen coordination type',\n          defaultValue: 'adaptive',\n          validValues: ['strategic', 'tactical', 'adaptive'],\n        },\n        {\n          flags: '--workers <count>',\n          description: 'Number of worker agents',\n          defaultValue: '5',\n        },\n        {\n          flags: '--timeout <seconds>',\n          description: 'Operation timeout',\n          defaultValue: '300',\n        },\n        {\n          flags: '--no-consensus',\n          description: 'Disable consensus requirements',\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow hive-mind spawn \"Build REST API\" --queen-type strategic',\n        'claude-flow hive-mind status --json',\n        'claude-flow hive-mind stop swarm-123',\n      ],\n    },\n    agent: {\n      name: 'claude-flow agent',\n      description: 'Manage individual agents',\n      usage: 'claude-flow agent <action> [options]',\n      commands: [\n        { name: 'spawn', description: 'Create a new agent' },\n        { name: 'list', description: 'List all active agents' },\n        { name: 'info', description: 'Show agent details' },\n        { name: 'terminate', description: 'Stop an agent' },\n      ],\n      options: [\n        {\n          flags: '--type <type>',\n          description: 'Agent type',\n          validValues: ['coordinator', 'researcher', 'coder', 'analyst', 'tester'],\n        },\n        {\n          flags: '--name <name>',\n          description: 'Agent name',\n        },\n        {\n          flags: '--json',\n          description: 'Output in JSON format',\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow agent spawn researcher --name \"Research Bot\"',\n        'claude-flow agent list --json',\n        'claude-flow agent terminate agent-123',\n      ],\n    },\n    init: {\n      name: 'claude-flow init',\n      description: 'Initialize Claude Flow configuration',\n      usage: 'claude-flow init [options]',\n      options: [\n        {\n          flags: '--sparc',\n          description: 'Initialize with SPARC mode support',\n        },\n        {\n          flags: '--force',\n          description: 'Overwrite existing configuration',\n        },\n        {\n          flags: '--template <name>',\n          description: 'Use configuration template',\n          validValues: ['default', 'development', 'production'],\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow init',\n        'claude-flow init --sparc',\n        'claude-flow init --template production',\n      ],\n    },\n  };\n\n  return commandHelpMap[command] || null;\n}\n"],"names":["Command","HelpFormatter","helpCommand","name","description","argument","option","action","command","options","showCommandHelp","showMainHelp","mainHelp","usage","commands","globalOptions","flags","defaultValue","examples","console","log","formatHelp","commandHelp","getCommandHelp","error","formatError","commandHelpMap","validValues","agent","init"],"mappings":"AAKA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,aAAa,QAAqB,uBAAuB;AAElE,OAAO,MAAMC,cAAc,IAAIF,UAC5BG,IAAI,CAAC,QACLC,WAAW,CAAC,yBACZC,QAAQ,CAAC,aAAa,4BACtBC,MAAM,CAAC,SAAS,+BAChBC,MAAM,CAAC,OAAOC,SAAkBC;IAC/B,IAAID,SAAS;QACXE,gBAAgBF;IAClB,OAAO;QACLG;IACF;AACF,GAAG;AAEL,SAASA;IACP,MAAMC,WAAwB;QAC5BT,MAAM;QACNC,aAAa;QACbS,OAAO,CAAC;;yBAEa,CAAC;QACtBC,UAAU;YACR;gBACEX,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;SACD;QACDW,eAAe;YACb;gBACEC,OAAO;gBACPZ,aAAa;gBACba,cAAc;YAChB;YACA;gBACED,OAAO;gBACPZ,aAAa;YACf;YACA;gBACEY,OAAO;gBACPZ,aAAa;YACf;YACA;gBACEY,OAAO;gBACPZ,aAAa;YACf;YACA;gBACEY,OAAO;gBACPZ,aAAa;YACf;YACA;gBACEY,OAAO;gBACPZ,aAAa;YACf;SACD;QACDc,UAAU;YACR;YACA;YACA;YACA;SACD;IACH;IAEAC,QAAQC,GAAG,CAACnB,cAAcoB,UAAU,CAACT;AACvC;AAEA,SAASF,gBAAgBF,OAAe;IACtC,MAAMc,cAAcC,eAAef;IACnC,IAAIc,aAAa;QACfH,QAAQC,GAAG,CAACnB,cAAcoB,UAAU,CAACC;IACvC,OAAO;QACLH,QAAQK,KAAK,CACXvB,cAAcwB,WAAW,CACvB,CAAC,iBAAiB,EAAEjB,SAAS,EAC7B,oBACA;IAGN;AACF;AAEA,SAASe,eAAef,OAAe;IACrC,MAAMkB,iBAA8C;QAClD,aAAa;YACXvB,MAAM;YACNC,aAAa;YACbS,OAAO;YACPC,UAAU;gBACR;oBAAEX,MAAM;oBAAQC,aAAa;gBAA8B;gBAC3D;oBAAED,MAAM;oBAASC,aAAa;gBAA0C;gBACxE;oBAAED,MAAM;oBAAUC,aAAa;gBAAiC;gBAChE;oBAAED,MAAM;oBAAQC,aAAa;gBAAuB;gBACpD;oBAAED,MAAM;oBAAMC,aAAa;gBAA6B;gBACxD;oBAAED,MAAM;oBAAUC,aAAa;gBAAwB;gBACvD;oBAAED,MAAM;oBAAUC,aAAa;gBAA2B;aAC3D;YACDK,SAAS;gBACP;oBACEO,OAAO;oBACPZ,aAAa;oBACba,cAAc;oBACdU,aAAa;wBAAC;wBAAa;wBAAY;qBAAW;gBACpD;gBACA;oBACEX,OAAO;oBACPZ,aAAa;oBACba,cAAc;gBAChB;gBACA;oBACED,OAAO;oBACPZ,aAAa;oBACba,cAAc;gBAChB;gBACA;oBACED,OAAO;oBACPZ,aAAa;gBACf;gBACA;oBACEY,OAAO;oBACPZ,aAAa;gBACf;aACD;YACDc,UAAU;gBACR;gBACA;gBACA;aACD;QACH;QACAU,OAAO;YACLzB,MAAM;YACNC,aAAa;YACbS,OAAO;YACPC,UAAU;gBACR;oBAAEX,MAAM;oBAASC,aAAa;gBAAqB;gBACnD;oBAAED,MAAM;oBAAQC,aAAa;gBAAyB;gBACtD;oBAAED,MAAM;oBAAQC,aAAa;gBAAqB;gBAClD;oBAAED,MAAM;oBAAaC,aAAa;gBAAgB;aACnD;YACDK,SAAS;gBACP;oBACEO,OAAO;oBACPZ,aAAa;oBACbuB,aAAa;wBAAC;wBAAe;wBAAc;wBAAS;wBAAW;qBAAS;gBAC1E;gBACA;oBACEX,OAAO;oBACPZ,aAAa;gBACf;gBACA;oBACEY,OAAO;oBACPZ,aAAa;gBACf;gBACA;oBACEY,OAAO;oBACPZ,aAAa;gBACf;aACD;YACDc,UAAU;gBACR;gBACA;gBACA;aACD;QACH;QACAW,MAAM;YACJ1B,MAAM;YACNC,aAAa;YACbS,OAAO;YACPJ,SAAS;gBACP;oBACEO,OAAO;oBACPZ,aAAa;gBACf;gBACA;oBACEY,OAAO;oBACPZ,aAAa;gBACf;gBACA;oBACEY,OAAO;oBACPZ,aAAa;oBACbuB,aAAa;wBAAC;wBAAW;wBAAe;qBAAa;gBACvD;gBACA;oBACEX,OAAO;oBACPZ,aAAa;gBACf;aACD;YACDc,UAAU;gBACR;gBACA;gBACA;aACD;QACH;IACF;IAEA,OAAOQ,cAAc,CAAClB,QAAQ,IAAI;AACpC"}