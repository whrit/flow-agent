{"version":3,"sources":["../../../../src/cli/commands/enterprise.ts"],"sourcesContent":["import type { Command, CommandContext } from '../cli-core.js';\nimport { success, error, warning, info } from '../cli-core.js';\nimport colors from 'chalk';\nimport { ProjectManager, Project } from '../../enterprise/project-manager.js';\nimport {\n  DeploymentManager,\n  Deployment,\n  DeploymentEnvironment,\n} from '../../enterprise/deployment-manager.js';\nimport { CloudManager, CloudProvider, CloudResource } from '../../enterprise/cloud-manager.js';\nimport { SecurityManager, SecurityScan } from '../../enterprise/security-manager.js';\nimport { AnalyticsManager } from '../../enterprise/analytics-manager.js';\nimport { AuditManager } from '../../enterprise/audit-manager.js';\nimport { Logger } from '../../core/logger.js';\nimport type { ConfigManager } from '../../core/config.js';\n\nconst { bold, blue, green, yellow, red, cyan, magenta } = colors;\n\nlet projectManager: ProjectManager | null = null;\nlet deploymentManager: DeploymentManager | null = null;\nlet cloudManager: CloudManager | null = null;\nlet securityManager: SecurityManager | null = null;\nlet analyticsManager: AnalyticsManager | null = null;\nlet auditManager: AuditManager | null = null;\n\nasync function getProjectManager(): Promise<ProjectManager> {\n  if (!projectManager) {\n    projectManager = new ProjectManager();\n    await projectManager.initialize();\n  }\n  return projectManager;\n}\n\nasync function getDeploymentManager(): Promise<DeploymentManager> {\n  if (!deploymentManager) {\n    deploymentManager = new DeploymentManager();\n    await deploymentManager.initialize();\n  }\n  return deploymentManager;\n}\n\nasync function getCloudManager(): Promise<CloudManager> {\n  if (!cloudManager) {\n    cloudManager = new CloudManager();\n    await cloudManager.initialize();\n  }\n  return cloudManager;\n}\n\nasync function getSecurityManager(): Promise<SecurityManager> {\n  if (!securityManager) {\n    securityManager = new SecurityManager();\n    await securityManager.initialize();\n  }\n  return securityManager;\n}\n\nasync function getAnalyticsManager(): Promise<AnalyticsManager> {\n  if (!analyticsManager) {\n    analyticsManager = new AnalyticsManager();\n    await analyticsManager.initialize();\n  }\n  return analyticsManager;\n}\n\nasync function getAuditManager(): Promise<AuditManager> {\n  if (!auditManager) {\n    auditManager = new AuditManager();\n    await auditManager.initialize();\n  }\n  return auditManager;\n}\n\nexport const enterpriseCommands: Command[] = [\n  // Project Management Commands\n  {\n    name: 'project',\n    description: 'Enterprise project management with lifecycle tracking',\n    options: [\n      {\n        name: 'verbose',\n        short: 'v',\n        description: 'Enable verbose output',\n        type: 'boolean',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getProjectManager();\n\n      switch (subcommand) {\n        case 'create': {\n          const name = ctx.args[1];\n          if (!name) {\n            error('Usage: project create <name> [options]');\n            break;\n          }\n\n          try {\n            const project = await manager.createProject({\n              name,\n              description: (ctx.flags.description as string) || `Project: ${name}`,\n              type: (ctx.flags.type as any) || 'custom',\n              priority: (ctx.flags.priority as any) || 'medium',\n              owner: (ctx.flags.owner as string) || 'system',\n              stakeholders: ctx.flags.stakeholders\n                ? (ctx.flags.stakeholders as string).split(',')\n                : [],\n            });\n\n            success(`Project created: ${project.name}`);\n            console.log(`${blue('ID:')} ${project.id}`);\n            console.log(`${blue('Type:')} ${project.type}`);\n            console.log(`${blue('Priority:')} ${project.priority}`);\n            console.log(`${blue('Owner:')} ${project.owner}`);\n\n            if (ctx.flags.verbose) {\n              console.log(\n                `${blue('Timeline:')} ${project.timeline.plannedStart.toLocaleDateString()} - ${project.timeline.plannedEnd.toLocaleDateString()}`,\n              );\n              console.log(`${blue('Budget:')} ${project.budget.total} ${project.budget.currency}`);\n            }\n          } catch (err) {\n            error(`Failed to create project: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'list': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.status) filters.status = ctx.flags.status;\n            if (ctx.flags.type) filters.type = ctx.flags.type;\n            if (ctx.flags.priority) filters.priority = ctx.flags.priority;\n            if (ctx.flags.owner) filters.owner = ctx.flags.owner;\n\n            const projects = await manager.listProjects(filters);\n\n            if (projects.length === 0) {\n              info('No projects found');\n              break;\n            }\n\n            success(`Found ${projects.length} projects:`);\n            console.log();\n\n            for (const project of projects) {\n              const statusColor =\n                project.status === 'active'\n                  ? green\n                  : project.status === 'completed'\n                    ? blue\n                    : project.status === 'on-hold'\n                      ? yellow\n                      : red;\n\n              console.log(`${bold(project.name)} ${cyan(`(${project.id.substr(0, 8)}...)`)}`);\n              console.log(\n                `  Status: ${statusColor(project.status)} | Type: ${project.type} | Priority: ${project.priority}`,\n              );\n              console.log(\n                `  Owner: ${project.owner} | Updated: ${project.updatedAt.toLocaleDateString()}`,\n              );\n\n              if (ctx.flags.verbose) {\n                const progress = manager['calculateProjectProgress']\n                  ? await (manager as any).calculateProjectProgress(project)\n                  : 0;\n                console.log(\n                  `  Progress: ${progress.toFixed(1)}% | Phases: ${project.phases.length}`,\n                );\n                console.log(\n                  `  Budget: ${project.budget.spent}/${project.budget.total} ${project.budget.currency}`,\n                );\n              }\n              console.log();\n            }\n          } catch (err) {\n            error(`Failed to list projects: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'show': {\n          const projectId = ctx.args[1];\n          if (!projectId) {\n            error('Usage: project show <project-id>');\n            break;\n          }\n\n          try {\n            const project = await manager.getProject(projectId);\n            if (!project) {\n              error(`Project not found: ${projectId}`);\n              break;\n            }\n\n            success(`Project: ${project.name}`);\n            console.log();\n            console.log(`${blue('ID:')} ${project.id}`);\n            console.log(`${blue('Description:')} ${project.description}`);\n            console.log(`${blue('Type:')} ${project.type}`);\n            console.log(`${blue('Status:')} ${project.status}`);\n            console.log(`${blue('Priority:')} ${project.priority}`);\n            console.log(`${blue('Owner:')} ${project.owner}`);\n            console.log(`${blue('Created:')} ${project.createdAt.toLocaleDateString()}`);\n            console.log(`${blue('Updated:')} ${project.updatedAt.toLocaleDateString()}`);\n\n            console.log(`\\n${bold('Timeline:')}`);\n            console.log(\n              `  Planned: ${project.timeline.plannedStart.toLocaleDateString()} - ${project.timeline.plannedEnd.toLocaleDateString()}`,\n            );\n            if (project.timeline.actualStart) {\n              console.log(\n                `  Actual: ${project.timeline.actualStart.toLocaleDateString()} - ${project.timeline.actualEnd?.toLocaleDateString() || 'In Progress'}`,\n              );\n            }\n\n            console.log(`\\n${bold('Budget:')}`);\n            console.log(`  Total: ${project.budget.total} ${project.budget.currency}`);\n            console.log(`  Spent: ${project.budget.spent} ${project.budget.currency}`);\n            console.log(`  Remaining: ${project.budget.remaining} ${project.budget.currency}`);\n\n            if (project.phases.length > 0) {\n              console.log(`\\n${bold('Phases:')}`);\n              for (const phase of project.phases) {\n                const statusColor =\n                  phase.status === 'completed'\n                    ? green\n                    : phase.status === 'in-progress'\n                      ? yellow\n                      : phase.status === 'blocked'\n                        ? red\n                        : blue;\n                console.log(\n                  `  ${statusColor(phase.status.padEnd(12))} ${phase.name} (${phase.completionPercentage}%)`,\n                );\n              }\n            }\n\n            if (project.collaboration.teamMembers.length > 0) {\n              console.log(`\\n${bold('Team Members:')}`);\n              for (const member of project.collaboration.teamMembers) {\n                console.log(\n                  `  ${member.name} (${member.role}) - ${member.availability}% available`,\n                );\n              }\n            }\n          } catch (err) {\n            error(`Failed to show project: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          try {\n            const projectId = ctx.args[1];\n            const metrics = await manager.getProjectMetrics(projectId);\n\n            success('Project Metrics:');\n            console.log();\n            console.log(`${blue('Total Projects:')} ${metrics.totalProjects}`);\n            console.log(`${blue('Active Projects:')} ${metrics.activeProjects}`);\n            console.log(`${blue('Completed Projects:')} ${metrics.completedProjects}`);\n            console.log(\n              `${blue('Average Duration:')} ${metrics.averageProjectDuration.toFixed(1)} days`,\n            );\n            console.log(\n              `${blue('Budget Variance:')} ${(metrics.budgetVariance * 100).toFixed(1)}%`,\n            );\n            console.log(\n              `${blue('Resource Utilization:')} ${(metrics.resourceUtilization * 100).toFixed(1)}%`,\n            );\n            console.log(`${blue('Quality Score:')} ${metrics.qualityScore.toFixed(1)}%`);\n          } catch (err) {\n            error(`Failed to get metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'report': {\n          const projectId = ctx.args[1];\n          const reportType = (ctx.args[2] as any) || 'status';\n\n          if (!projectId) {\n            error('Usage: project report <project-id> [type]');\n            break;\n          }\n\n          try {\n            const report = await manager.generateReport(projectId, reportType);\n\n            success(`Generated ${reportType} report: ${report.title}`);\n            console.log();\n            console.log(`${blue('Summary:')} ${report.summary}`);\n            console.log(`${blue('Generated:')} ${report.generatedAt.toLocaleDateString()}`);\n\n            if (ctx.flags.verbose && Object.keys(report.details).length > 0) {\n              console.log(`\\n${bold('Details:')}`);\n              console.log(JSON.stringify(report.details, null, 2));\n            }\n\n            if (report.recommendations.length > 0) {\n              console.log(`\\n${bold('Recommendations:')}`);\n              for (const rec of report.recommendations) {\n                console.log(`  • ${rec}`);\n              }\n            }\n          } catch (err) {\n            error(`Failed to generate report: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  create <name>     Create a new project');\n          console.log('  list              List all projects');\n          console.log('  show <id>         Show project details');\n          console.log('  metrics [id]      Show project metrics');\n          console.log('  report <id> [type] Generate project report');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(\n            `  ${cyan('claude-flow project create')} \"E-commerce Platform\" --type web-app --priority high`,\n          );\n          console.log(`  ${cyan('claude-flow project list')} --status active --verbose`);\n          console.log(`  ${cyan('claude-flow project report')} proj-123 financial`);\n          break;\n        }\n      }\n    },\n  },\n\n  // Deployment Management Commands\n  {\n    name: 'deploy',\n    description:\n      'Enterprise deployment automation with blue-green, canary, and rollback capabilities',\n    options: [\n      {\n        name: 'environment',\n        short: 'e',\n        description: 'Target environment',\n        type: 'string',\n      },\n      {\n        name: 'strategy',\n        short: 's',\n        description: 'Deployment strategy (blue-green, canary, rolling)',\n        type: 'string',\n      },\n      {\n        name: 'version',\n        short: 'v',\n        description: 'Version to deploy',\n        type: 'string',\n      },\n      {\n        name: 'auto-rollback',\n        description: 'Enable automatic rollback on failure',\n        type: 'boolean',\n      },\n      {\n        name: 'dry-run',\n        short: 'd',\n        description: 'Preview deployment without executing',\n        type: 'boolean',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getDeploymentManager();\n\n      switch (subcommand) {\n        case 'create': {\n          const name = ctx.args[1];\n          if (!name) {\n            error('Usage: deploy create <name> --environment <env> --strategy <strategy>');\n            break;\n          }\n\n          try {\n            const deployment = await manager.createDeployment({\n              name,\n              version: (ctx.flags.version as string) || 'latest',\n              projectId: (ctx.flags.project as string) || 'default',\n              environmentId: (ctx.flags.environment as string) || 'development',\n              strategyId: (ctx.flags.strategy as string) || 'rolling',\n              initiatedBy: 'cli-user',\n              source: {\n                repository: (ctx.flags.repo as string) || 'local',\n                branch: (ctx.flags.branch as string) || 'main',\n                commit: (ctx.flags.commit as string) || 'HEAD',\n              },\n            });\n\n            success(`Deployment created: ${deployment.name}`);\n            console.log(`${blue('ID:')} ${deployment.id}`);\n            console.log(`${blue('Version:')} ${deployment.version}`);\n            console.log(`${blue('Environment:')} ${deployment.environmentId}`);\n            console.log(`${blue('Strategy:')} ${deployment.strategyId}`);\n            console.log(`${blue('Status:')} ${deployment.status}`);\n\n            if (!ctx.flags.dryRun) {\n              info('Starting deployment...');\n              await manager.executeDeployment(deployment.id);\n            } else {\n              warning('Dry run - deployment not executed');\n            }\n          } catch (err) {\n            error(`Failed to create deployment: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'list': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.environment) filters.environmentId = ctx.flags.environment;\n            if (ctx.flags.status) filters.status = ctx.flags.status;\n\n            // Note: This would need to be implemented in DeploymentManager\n            const deployments: Deployment[] = [];\n\n            if (deployments.length === 0) {\n              info('No deployments found');\n              break;\n            }\n\n            success(`Found ${deployments.length} deployments:`);\n            console.log();\n\n            for (const deployment of deployments) {\n              const statusColor =\n                deployment.status === 'success'\n                  ? green\n                  : deployment.status === 'failed'\n                    ? red\n                    : deployment.status === 'running'\n                      ? yellow\n                      : blue;\n\n              console.log(`${bold(deployment.name)} ${cyan(`(${deployment.id.substr(0, 8)}...)`)}`);\n              console.log(\n                `  Status: ${statusColor(deployment.status)} | Version: ${deployment.version}`,\n              );\n              console.log(\n                `  Environment: ${deployment.environmentId} | Strategy: ${deployment.strategyId}`,\n              );\n              console.log(`  Started: ${deployment.metrics.startTime.toLocaleDateString()}`);\n              if (deployment.metrics.endTime) {\n                console.log(`  Duration: ${deployment.metrics.duration}ms`);\n              }\n              console.log();\n            }\n          } catch (err) {\n            error(`Failed to list deployments: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'rollback': {\n          const deploymentId = ctx.args[1];\n          const reason = ctx.args.slice(2).join(' ') || 'Manual rollback requested';\n\n          if (!deploymentId) {\n            error('Usage: deploy rollback <deployment-id> [reason]');\n            break;\n          }\n\n          try {\n            await manager.rollbackDeployment(deploymentId, reason);\n            success(`Rollback initiated for deployment: ${deploymentId}`);\n            console.log(`${blue('Reason:')} ${reason}`);\n          } catch (err) {\n            error(`Failed to rollback deployment: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.environment) filters.environmentId = ctx.flags.environment;\n            if (ctx.flags.timeRange) {\n              const range = (ctx.flags.timeRange as string).split(',');\n              filters.timeRange = {\n                start: new Date(range[0]),\n                end: new Date(range[1]),\n              };\n            }\n\n            const metrics = await manager.getDeploymentMetrics(filters);\n\n            success('Deployment Metrics:');\n            console.log();\n            console.log(`${blue('Total Deployments:')} ${metrics.totalDeployments}`);\n            console.log(`${blue('Successful:')} ${metrics.successfulDeployments}`);\n            console.log(`${blue('Failed:')} ${metrics.failedDeployments}`);\n            console.log(`${blue('Rolled Back:')} ${metrics.rolledBackDeployments}`);\n            console.log(\n              `${blue('Average Duration:')} ${(metrics.averageDeploymentTime / 1000 / 60).toFixed(1)} minutes`,\n            );\n            console.log(\n              `${blue('Deployment Frequency:')} ${metrics.deploymentFrequency.toFixed(2)} per day`,\n            );\n            console.log(\n              `${blue('MTTR:')} ${(metrics.meanTimeToRecovery / 1000 / 60).toFixed(1)} minutes`,\n            );\n            console.log(`${blue('Change Failure Rate:')} ${metrics.changeFailureRate.toFixed(1)}%`);\n\n            if (Object.keys(metrics.environmentMetrics).length > 0) {\n              console.log(`\\n${bold('By Environment:')}`);\n              for (const [env, data] of Object.entries(metrics.environmentMetrics)) {\n                console.log(\n                  `  ${env}: ${data.deployments} deployments, ${data.successRate.toFixed(1)}% success rate`,\n                );\n              }\n            }\n          } catch (err) {\n            error(`Failed to get metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'environments': {\n          const envSubcommand = ctx.args[1];\n\n          switch (envSubcommand) {\n            case 'create': {\n              const name = ctx.args[2];\n              if (!name) {\n                error('Usage: deploy environments create <name> --type <type>');\n                break;\n              }\n\n              try {\n                const environment = await manager.createEnvironment({\n                  name,\n                  type: (ctx.flags.type as any) || 'development',\n                  configuration: {\n                    region: (ctx.flags.region as string) || 'us-east-1',\n                    provider: (ctx.flags.provider as any) || 'aws',\n                    endpoints: ctx.flags.endpoints\n                      ? (ctx.flags.endpoints as string).split(',')\n                      : [],\n                    secrets: {},\n                    environment_variables: {},\n                    resources: { cpu: '1', memory: '1Gi', storage: '10Gi', replicas: 1 },\n                  },\n                });\n\n                success(`Environment created: ${environment.name}`);\n                console.log(`${blue('ID:')} ${environment.id}`);\n                console.log(`${blue('Type:')} ${environment.type}`);\n                console.log(`${blue('Region:')} ${environment.configuration.region}`);\n                console.log(`${blue('Provider:')} ${environment.configuration.provider}`);\n              } catch (err) {\n                error(`Failed to create environment: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'list': {\n              // Would implement environment listing\n              info('Environment listing not yet implemented');\n              break;\n            }\n\n            default: {\n              console.log('Available environment subcommands: create, list');\n              break;\n            }\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  create <name>     Create and execute deployment');\n          console.log('  list              List deployments');\n          console.log('  rollback <id>     Rollback deployment');\n          console.log('  metrics           Show deployment metrics');\n          console.log('  environments      Manage deployment environments');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(\n            `  ${cyan('claude-flow deploy create')} \"v2.1.0\" --environment production --strategy blue-green`,\n          );\n          console.log(`  ${cyan('claude-flow deploy rollback')} deploy-123 \"Critical bug found\"`);\n          console.log(`  ${cyan('claude-flow deploy metrics')} --environment production`);\n          break;\n        }\n      }\n    },\n  },\n\n  // Cloud Management Commands\n  {\n    name: 'cloud',\n    description: 'Multi-cloud infrastructure management with cost optimization',\n    options: [\n      {\n        name: 'provider',\n        short: 'p',\n        description: 'Cloud provider (aws, gcp, azure)',\n        type: 'string',\n      },\n      {\n        name: 'region',\n        short: 'r',\n        description: 'Cloud region',\n        type: 'string',\n      },\n      {\n        name: 'environment',\n        short: 'e',\n        description: 'Environment (development, staging, production)',\n        type: 'string',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getCloudManager();\n\n      switch (subcommand) {\n        case 'providers': {\n          const providerCmd = ctx.args[1];\n\n          switch (providerCmd) {\n            case 'add': {\n              const name = ctx.args[2];\n              const type = ctx.args[3] as any;\n\n              if (!name || !type) {\n                error('Usage: cloud providers add <name> <type>');\n                break;\n              }\n\n              try {\n                const provider = await manager.addProvider({\n                  name,\n                  type,\n                  credentials: {\n                    accessKey: ctx.flags.accessKey as string,\n                    secretKey: ctx.flags.secretKey as string,\n                    projectId: ctx.flags.projectId as string,\n                  },\n                  configuration: {\n                    defaultRegion: (ctx.flags.region as string) || 'us-east-1',\n                    availableRegions: ctx.flags.regions\n                      ? (ctx.flags.regions as string).split(',')\n                      : [],\n                    services: ['compute', 'storage', 'network'],\n                    endpoints: { api: 'https://api.example.com' },\n                    features: ['scaling', 'monitoring', 'backup'],\n                  },\n                });\n\n                success(`Cloud provider added: ${provider.name}`);\n                console.log(`${blue('ID:')} ${provider.id}`);\n                console.log(`${blue('Type:')} ${provider.type}`);\n                console.log(`${blue('Status:')} ${provider.status}`);\n                console.log(`${blue('Default Region:')} ${provider.configuration.defaultRegion}`);\n              } catch (err) {\n                error(`Failed to add provider: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'list': {\n              // Would implement provider listing\n              info('Provider listing not yet implemented');\n              break;\n            }\n\n            default: {\n              console.log('Available provider subcommands: add, list');\n              break;\n            }\n          }\n          break;\n        }\n\n        case 'resources': {\n          const resourceCmd = ctx.args[1];\n\n          switch (resourceCmd) {\n            case 'create': {\n              const name = ctx.args[2];\n              const type = ctx.args[3] as any;\n\n              if (!name || !type) {\n                error('Usage: cloud resources create <name> <type> --provider <provider-id>');\n                break;\n              }\n\n              try {\n                const resource = await manager.createResource({\n                  name,\n                  type,\n                  providerId: (ctx.flags.provider as string) || 'default',\n                  region: (ctx.flags.region as string) || 'us-east-1',\n                  configuration: {\n                    size: (ctx.flags.size as string) || 'small',\n                    tags: ctx.flags.tags ? JSON.parse(ctx.flags.tags as string) : {},\n                  },\n                  metadata: {\n                    environment: (ctx.flags.environment as string) || 'development',\n                    owner: (ctx.flags.owner as string) || 'system',\n                    purpose: (ctx.flags.purpose as string) || 'general',\n                  },\n                });\n\n                success(`Resource created: ${resource.name}`);\n                console.log(`${blue('ID:')} ${resource.id}`);\n                console.log(`${blue('Type:')} ${resource.type}`);\n                console.log(`${blue('Status:')} ${resource.status}`);\n                console.log(`${blue('Provider:')} ${resource.providerId}`);\n                console.log(`${blue('Region:')} ${resource.region}`);\n                console.log(\n                  `${blue('Monthly Cost:')} $${resource.costs.monthlyEstimate.toFixed(2)}`,\n                );\n              } catch (err) {\n                error(`Failed to create resource: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'list': {\n              // Would implement resource listing\n              info('Resource listing not yet implemented');\n              break;\n            }\n\n            case 'scale': {\n              const resourceId = ctx.args[2];\n              if (!resourceId) {\n                error('Usage: cloud resources scale <resource-id> --size <size>');\n                break;\n              }\n\n              try {\n                await manager.scaleResource(resourceId, {\n                  size: ctx.flags.size as string,\n                  replicas: ctx.flags.replicas as number,\n                });\n\n                success(`Resource scaled: ${resourceId}`);\n              } catch (err) {\n                error(`Failed to scale resource: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'delete': {\n              const resourceId = ctx.args[2];\n              if (!resourceId) {\n                error('Usage: cloud resources delete <resource-id>');\n                break;\n              }\n\n              try {\n                await manager.deleteResource(resourceId);\n                success(`Resource deleted: ${resourceId}`);\n              } catch (err) {\n                error(`Failed to delete resource: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            default: {\n              console.log('Available resource subcommands: create, list, scale, delete');\n              break;\n            }\n          }\n          break;\n        }\n\n        case 'optimize': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.provider) filters.providerId = ctx.flags.provider;\n            if (ctx.flags.environment) filters.environment = ctx.flags.environment;\n\n            const optimizations = await manager.optimizeCosts(filters);\n\n            if (optimizations.length === 0) {\n              info('No cost optimization opportunities found');\n              break;\n            }\n\n            success(`Found ${optimizations.length} cost optimization opportunities:`);\n            console.log();\n\n            for (const opt of optimizations) {\n              console.log(`${bold(opt.type.toUpperCase())}: ${opt.description}`);\n              console.log(\n                `  ${green('Potential Savings:')} $${opt.potentialSavings.toFixed(2)}/month`,\n              );\n              console.log(\n                `  ${blue('Effort:')} ${opt.effort} | ${blue('Priority:')} ${opt.priority}`,\n              );\n              console.log(`  ${yellow('Implementation:')} ${opt.implementation}`);\n              console.log();\n            }\n\n            const totalSavings = optimizations.reduce((sum, opt) => sum + opt.potentialSavings, 0);\n            success(`Total potential savings: $${totalSavings.toFixed(2)}/month`);\n          } catch (err) {\n            error(`Failed to analyze cost optimization: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.provider) filters.providerId = ctx.flags.provider;\n            if (ctx.flags.environment) filters.environment = ctx.flags.environment;\n\n            const metrics = await manager.getCloudMetrics(filters);\n\n            success('Cloud Infrastructure Metrics:');\n            console.log();\n\n            console.log(`${bold('Providers:')}`);\n            console.log(\n              `  Total: ${metrics.providers.total} | Active: ${metrics.providers.active}`,\n            );\n            console.log(\n              `  Inactive: ${metrics.providers.inactive} | Errors: ${metrics.providers.errors}`,\n            );\n\n            console.log(`\\n${bold('Resources:')}`);\n            console.log(\n              `  Total: ${metrics.resources.total} | Running: ${metrics.resources.running}`,\n            );\n            console.log(\n              `  Stopped: ${metrics.resources.stopped} | Errors: ${metrics.resources.errors}`,\n            );\n\n            console.log(`\\n${bold('Costs:')}`);\n            console.log(`  Total Spend: $${metrics.costs.totalSpend.toFixed(2)}`);\n            console.log(`  Monthly Spend: $${metrics.costs.monthlySpend.toFixed(2)}`);\n            console.log(`  Projected Annual: $${metrics.costs.projectedSpend.toFixed(2)}`);\n\n            console.log(`\\n${bold('Performance:')}`);\n            console.log(`  Average Uptime: ${metrics.performance.averageUptime.toFixed(1)}%`);\n            console.log(`  Availability: ${metrics.performance.availability.toFixed(1)}%`);\n\n            console.log(`\\n${bold('Security:')}`);\n            console.log(\n              `  Encryption Coverage: ${metrics.security.encryptionCoverage.toFixed(1)}%`,\n            );\n            console.log(`  Backup Coverage: ${metrics.security.backupCoverage.toFixed(1)}%`);\n          } catch (err) {\n            error(`Failed to get metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  providers         Manage cloud providers');\n          console.log('  resources         Manage cloud resources');\n          console.log('  optimize          Analyze cost optimization opportunities');\n          console.log('  metrics           Show cloud infrastructure metrics');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(\n            `  ${cyan('claude-flow cloud providers add')} \"AWS Production\" aws --access-key xxx`,\n          );\n          console.log(\n            `  ${cyan('claude-flow cloud resources create')} \"web-server\" compute --provider aws-prod`,\n          );\n          console.log(`  ${cyan('claude-flow cloud optimize')} --environment production`);\n          break;\n        }\n      }\n    },\n  },\n\n  // Security Management Commands\n  {\n    name: 'security',\n    description: 'Security scanning, compliance checking, and vulnerability management',\n    options: [\n      {\n        name: 'type',\n        short: 't',\n        description: 'Scan type (vulnerability, dependency, secrets, compliance)',\n        type: 'string',\n      },\n      {\n        name: 'severity',\n        short: 's',\n        description: 'Minimum severity level (low, medium, high, critical)',\n        type: 'string',\n      },\n      {\n        name: 'format',\n        short: 'f',\n        description: 'Output format (json, csv, html)',\n        type: 'string',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getSecurityManager();\n\n      switch (subcommand) {\n        case 'scan': {\n          const name = ctx.args[1];\n          const target = ctx.args[2];\n\n          if (!name || !target) {\n            error('Usage: security scan <name> <target-path> --type <scan-type>');\n            break;\n          }\n\n          try {\n            const scan = await manager.createSecurityScan({\n              name,\n              type: (ctx.flags.type as any) || 'vulnerability',\n              target: {\n                type: 'repository',\n                path: target,\n                branch: (ctx.flags.branch as string) || 'main',\n              },\n              projectId: ctx.flags.project as string,\n              configuration: {\n                severity: ctx.flags.severity\n                  ? ((ctx.flags.severity as string).split(',') as any)\n                  : undefined,\n                formats: ctx.flags.format ? (ctx.flags.format as string).split(',') : undefined,\n              },\n            });\n\n            success(`Security scan created: ${scan.name}`);\n            console.log(`${blue('ID:')} ${scan.id}`);\n            console.log(`${blue('Type:')} ${scan.type}`);\n            console.log(`${blue('Target:')} ${scan.target.path}`);\n            console.log(`${blue('Status:')} ${scan.status}`);\n\n            info('Executing scan...');\n            await manager.executeScan(scan.id);\n\n            const updatedScan = await manager['scans'].get(scan.id);\n            if (updatedScan) {\n              success(`Scan completed: ${updatedScan.results.length} findings`);\n              console.log(`${blue('Critical:')} ${updatedScan.metrics.criticalFindings}`);\n              console.log(`${blue('High:')} ${updatedScan.metrics.highFindings}`);\n              console.log(`${blue('Medium:')} ${updatedScan.metrics.mediumFindings}`);\n              console.log(`${blue('Low:')} ${updatedScan.metrics.lowFindings}`);\n              console.log(\n                `${blue('Duration:')} ${(updatedScan.metrics.scanDuration / 1000).toFixed(1)}s`,\n              );\n            }\n          } catch (err) {\n            error(`Failed to execute scan: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'incident': {\n          const incidentCmd = ctx.args[1];\n\n          switch (incidentCmd) {\n            case 'create': {\n              const title = ctx.args[2];\n              if (!title) {\n                error('Usage: security incident create <title> --severity <level>');\n                break;\n              }\n\n              try {\n                const incident = await manager.createSecurityIncident({\n                  title,\n                  description: ctx.args.slice(3).join(' ') || title,\n                  severity: (ctx.flags.severity as any) || 'medium',\n                  type: (ctx.flags.type as any) || 'security-breach',\n                  source: {\n                    type: 'user-report',\n                    details: { reporter: 'cli-user' },\n                  },\n                  affected: {\n                    systems: ctx.flags.systems ? (ctx.flags.systems as string).split(',') : [],\n                  },\n                });\n\n                success(`Security incident created: ${incident.title}`);\n                console.log(`${blue('ID:')} ${incident.id}`);\n                console.log(`${blue('Severity:')} ${incident.severity}`);\n                console.log(`${blue('Type:')} ${incident.type}`);\n                console.log(`${blue('Status:')} ${incident.status}`);\n                console.log(`${blue('Assigned To:')} ${incident.response.assignedTo.join(', ')}`);\n              } catch (err) {\n                error(`Failed to create incident: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'list': {\n              // Would implement incident listing\n              info('Incident listing not yet implemented');\n              break;\n            }\n\n            default: {\n              console.log('Available incident subcommands: create, list');\n              break;\n            }\n          }\n          break;\n        }\n\n        case 'compliance': {\n          const frameworks = ctx.args.slice(1);\n          if (frameworks.length === 0) {\n            error('Usage: security compliance <framework1> [framework2] ...');\n            break;\n          }\n\n          try {\n            const checks = await manager.runComplianceAssessment(frameworks, {\n              projectId: ctx.flags.project as string,\n              environment: ctx.flags.environment as string,\n            });\n\n            success(`Compliance assessment completed: ${checks.length} checks`);\n            console.log();\n\n            const byFramework: Record<string, any> = {};\n            for (const check of checks) {\n              if (!byFramework[check.framework]) {\n                byFramework[check.framework] = { passed: 0, failed: 0, total: 0 };\n              }\n              byFramework[check.framework].total++;\n              if (check.status === 'passed') {\n                byFramework[check.framework].passed++;\n              } else if (check.status === 'failed') {\n                byFramework[check.framework].failed++;\n              }\n            }\n\n            for (const [framework, stats] of Object.entries(byFramework)) {\n              const score = (stats.passed / stats.total) * 100;\n              console.log(`${bold(framework)}:`);\n              console.log(`  Score: ${score.toFixed(1)}% (${stats.passed}/${stats.total})`);\n              console.log(\n                `  ${green('Passed:')} ${stats.passed} | ${red('Failed:')} ${stats.failed}`,\n              );\n              console.log();\n            }\n          } catch (err) {\n            error(`Failed to run compliance assessment: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          try {\n            const filters: any = {};\n            if (ctx.flags.project) filters.projectId = ctx.flags.project;\n            if (ctx.flags.environment) filters.environment = ctx.flags.environment;\n\n            const metrics = await manager.getSecurityMetrics(filters);\n\n            success('Security Metrics:');\n            console.log();\n\n            console.log(`${bold('Scans:')}`);\n            console.log(`  Total: ${metrics.scans.total} | Completed: ${metrics.scans.completed}`);\n            console.log(\n              `  Failed: ${metrics.scans.failed} | In Progress: ${metrics.scans.inProgress}`,\n            );\n\n            console.log(`\\n${bold('Findings:')}`);\n            console.log(`  Total: ${metrics.findings.total} | Open: ${metrics.findings.open}`);\n            console.log(\n              `  Resolved: ${metrics.findings.resolved} | Suppressed: ${metrics.findings.suppressed}`,\n            );\n            console.log(\n              `  Critical: ${metrics.findings.bySeverity.critical || 0} | High: ${metrics.findings.bySeverity.high || 0}`,\n            );\n\n            console.log(`\\n${bold('Compliance:')}`);\n            console.log(`  Overall Score: ${metrics.compliance.overallScore.toFixed(1)}%`);\n            console.log(`  Trending: ${metrics.compliance.trending}`);\n\n            console.log(`\\n${bold('Incidents:')}`);\n            console.log(`  Total: ${metrics.incidents.total} | Open: ${metrics.incidents.open}`);\n            console.log(`  Resolved: ${metrics.incidents.resolved}`);\n            console.log(\n              `  MTTD: ${(metrics.incidents.meanTimeToDetection / 1000 / 60).toFixed(1)} minutes`,\n            );\n            console.log(\n              `  MTTR: ${(metrics.incidents.meanTimeToResolution / 1000 / 60 / 60).toFixed(1)} hours`,\n            );\n          } catch (err) {\n            error(`Failed to get security metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  scan <name> <target>     Execute security scan');\n          console.log('  incident                 Manage security incidents');\n          console.log('  compliance <frameworks>  Run compliance assessment');\n          console.log('  metrics                  Show security metrics');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(\n            `  ${cyan('claude-flow security scan')} \"API Vulnerability Scan\" ./api --type vulnerability`,\n          );\n          console.log(\n            `  ${cyan('claude-flow security incident create')} \"Unauthorized Access\" --severity high`,\n          );\n          console.log(`  ${cyan('claude-flow security compliance')} SOC2 GDPR --project web-app`);\n          break;\n        }\n      }\n    },\n  },\n\n  // Analytics Commands\n  {\n    name: 'analytics',\n    description: 'Performance analytics, usage insights, and predictive optimization',\n    options: [\n      {\n        name: 'timerange',\n        short: 't',\n        description: 'Time range for analysis (1h, 24h, 7d, 30d)',\n        type: 'string',\n      },\n      {\n        name: 'format',\n        short: 'f',\n        description: 'Output format (json, table, chart)',\n        type: 'string',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getAnalyticsManager();\n\n      switch (subcommand) {\n        case 'dashboard': {\n          const dashboardCmd = ctx.args[1];\n\n          switch (dashboardCmd) {\n            case 'create': {\n              const name = ctx.args[2];\n              if (!name) {\n                error('Usage: analytics dashboard create <name> --type <type>');\n                break;\n              }\n\n              try {\n                const dashboard = await manager.createDashboard({\n                  name,\n                  description: ctx.args.slice(3).join(' ') || `Dashboard: ${name}`,\n                  type: (ctx.flags.type as any) || 'operational',\n                  widgets: [], // Would be populated based on template\n                });\n\n                success(`Dashboard created: ${dashboard.name}`);\n                console.log(`${blue('ID:')} ${dashboard.id}`);\n                console.log(`${blue('Type:')} ${dashboard.type}`);\n                console.log(`${blue('Widgets:')} ${dashboard.widgets.length}`);\n              } catch (err) {\n                error(`Failed to create dashboard: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'list': {\n              // Would implement dashboard listing\n              info('Dashboard listing not yet implemented');\n              break;\n            }\n\n            default: {\n              console.log('Available dashboard subcommands: create, list');\n              break;\n            }\n          }\n          break;\n        }\n\n        case 'insights': {\n          try {\n            const scope: any = {};\n            if (ctx.flags.metrics) {\n              scope.metrics = (ctx.flags.metrics as string).split(',');\n            }\n            if (ctx.flags.timerange) {\n              const range = ctx.flags.timerange as string;\n              const now = new Date();\n              let start: Date;\n\n              switch (range) {\n                case '1h':\n                  start = new Date(now.getTime() - 60 * 60 * 1000);\n                  break;\n                case '24h':\n                  start = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n                  break;\n                case '7d':\n                  start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                  break;\n                case '30d':\n                  start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                  break;\n                default:\n                  start = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n              }\n\n              scope.timeRange = { start, end: now };\n            }\n\n            const insights = await manager.generateInsights(scope);\n\n            if (insights.length === 0) {\n              info('No insights generated');\n              break;\n            }\n\n            success(`Generated ${insights.length} insights:`);\n            console.log();\n\n            for (const insight of insights) {\n              const priorityColor =\n                insight.priority === 'critical'\n                  ? red\n                  : insight.priority === 'high'\n                    ? yellow\n                    : insight.priority === 'medium'\n                      ? blue\n                      : green;\n\n              console.log(\n                `${bold(insight.title)} ${priorityColor(`[${insight.priority.toUpperCase()}]`)}`,\n              );\n              console.log(`  ${insight.description}`);\n              console.log(\n                `  Type: ${insight.type} | Category: ${insight.category} | Confidence: ${insight.confidence}%`,\n              );\n\n              if (insight.recommendations.length > 0) {\n                console.log(`  Recommendations:`);\n                for (const rec of insight.recommendations) {\n                  console.log(`    • ${rec.action} (${rec.effort} effort)`);\n                }\n              }\n              console.log();\n            }\n          } catch (err) {\n            error(`Failed to generate insights: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          const metricType = ctx.args[1] || 'performance';\n\n          try {\n            switch (metricType) {\n              case 'performance': {\n                const metrics = await manager.getPerformanceMetrics();\n\n                success('Performance Metrics:');\n                console.log();\n                console.log(`${bold('System:')}`);\n                console.log(`  CPU Usage: ${metrics.system.cpu.usage.toFixed(1)}%`);\n                console.log(`  Memory Usage: ${metrics.system.memory.usage.toFixed(1)}%`);\n                console.log(`  Disk Usage: ${metrics.system.disk.usage.toFixed(1)}%`);\n\n                console.log(`\\n${bold('Application:')}`);\n                console.log(\n                  `  Response Time: ${metrics.application.responseTime.avg.toFixed(1)}ms (avg)`,\n                );\n                console.log(\n                  `  Throughput: ${metrics.application.throughput.requestsPerSecond.toFixed(1)} req/s`,\n                );\n                console.log(`  Error Rate: ${metrics.application.errors.rate.toFixed(2)}%`);\n                console.log(\n                  `  Availability: ${metrics.application.availability.uptime.toFixed(2)}%`,\n                );\n\n                console.log(`\\n${bold('Database:')}`);\n                console.log(`  Active Connections: ${metrics.database.connections.active}`);\n                console.log(\n                  `  Avg Query Time: ${metrics.database.queries.avgExecutionTime.toFixed(1)}ms`,\n                );\n                console.log(`  Slow Queries: ${metrics.database.queries.slowQueries}`);\n                break;\n              }\n\n              case 'usage': {\n                const metrics = await manager.getUsageMetrics();\n\n                success('Usage Metrics:');\n                console.log();\n                console.log(`${bold('Users:')}`);\n                console.log(`  Total: ${metrics.users.total}`);\n                console.log(`  Active: ${metrics.users.active}`);\n                console.log(`  New: ${metrics.users.new}`);\n                console.log(`  Churn: ${metrics.users.churn}`);\n\n                console.log(`\\n${bold('Sessions:')}`);\n                console.log(`  Total: ${metrics.sessions.total}`);\n                console.log(\n                  `  Avg Duration: ${(metrics.sessions.duration.avg / 60).toFixed(1)} minutes`,\n                );\n                console.log(`  Bounce Rate: ${metrics.sessions.bounceRate}%`);\n\n                console.log(`\\n${bold('API:')}`);\n                console.log(`  Calls: ${metrics.api.calls.toLocaleString()}`);\n                console.log(`  Unique Consumers: ${metrics.api.uniqueConsumers}`);\n                console.log(`  Avg Response Time: ${metrics.api.avgResponseTime}ms`);\n                console.log(`  Error Rate: ${metrics.api.errorRate}%`);\n                break;\n              }\n\n              case 'business': {\n                const metrics = await manager.getBusinessMetrics();\n\n                success('Business Metrics:');\n                console.log();\n                console.log(`${bold('Revenue:')}`);\n                console.log(`  Total: $${metrics.revenue.total.toLocaleString()}`);\n                console.log(`  Recurring: $${metrics.revenue.recurring.toLocaleString()}`);\n                console.log(`  Growth: ${metrics.revenue.growth}%`);\n                console.log(`  ARPU: $${metrics.revenue.arpu}`);\n\n                console.log(`\\n${bold('Customers:')}`);\n                console.log(`  Total: ${metrics.customers.total}`);\n                console.log(`  New: ${metrics.customers.new}`);\n                console.log(`  Churned: ${metrics.customers.churned}`);\n                console.log(`  Satisfaction: ${metrics.customers.satisfaction}/5`);\n\n                console.log(`\\n${bold('Conversion:')}`);\n                console.log(`  Leads: ${metrics.conversion.leads}`);\n                console.log(`  Qualified: ${metrics.conversion.qualified}`);\n                console.log(`  Closed: ${metrics.conversion.closed}`);\n                console.log(`  Rate: ${metrics.conversion.rate}%`);\n                break;\n              }\n\n              default: {\n                error(`Unknown metric type: ${metricType}`);\n                console.log('Available types: performance, usage, business');\n                break;\n              }\n            }\n          } catch (err) {\n            error(`Failed to get ${metricType} metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'predict': {\n          const modelCmd = ctx.args[1];\n\n          switch (modelCmd) {\n            case 'train': {\n              const name = ctx.args[2];\n              if (!name) {\n                error(\n                  'Usage: analytics predict train <name> --features <features> --target <target>',\n                );\n                break;\n              }\n\n              try {\n                const features = ctx.flags.features\n                  ? (ctx.flags.features as string).split(',')\n                  : ['cpu-usage', 'memory-usage'];\n                const target = (ctx.flags.target as string) || 'response-time';\n\n                const model = await manager.trainPredictiveModel({\n                  name,\n                  description: `Predictive model: ${name}`,\n                  type: (ctx.flags.type as any) || 'regression',\n                  algorithm: (ctx.flags.algorithm as string) || 'linear-regression',\n                  features,\n                  target,\n                  trainingPeriod: {\n                    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n                    end: new Date(),\n                  },\n                });\n\n                success(`Predictive model trained: ${model.name}`);\n                console.log(`${blue('ID:')} ${model.id}`);\n                console.log(`${blue('Type:')} ${model.type}`);\n                console.log(`${blue('Algorithm:')} ${model.algorithm}`);\n                console.log(`${blue('Accuracy:')} ${model.accuracy.toFixed(1)}%`);\n                console.log(`${blue('Features:')} ${model.features.join(', ')}`);\n              } catch (err) {\n                error(`Failed to train model: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            case 'predict': {\n              const modelId = ctx.args[2];\n              if (!modelId) {\n                error('Usage: analytics predict predict <model-id> --input <json>');\n                break;\n              }\n\n              try {\n                const input = ctx.flags.input\n                  ? JSON.parse(ctx.flags.input as string)\n                  : { 'cpu-usage': 50, 'memory-usage': 60 };\n\n                const prediction = await manager.makePrediction(modelId, input);\n\n                success(`Prediction made:`);\n                console.log(`${blue('Model:')} ${modelId}`);\n                console.log(`${blue('Input:')} ${JSON.stringify(input)}`);\n                console.log(`${blue('Prediction:')} ${JSON.stringify(prediction.prediction)}`);\n                console.log(`${blue('Confidence:')} ${prediction.confidence.toFixed(1)}%`);\n              } catch (err) {\n                error(`Failed to make prediction: ${(err as Error).message}`);\n              }\n              break;\n            }\n\n            default: {\n              console.log('Available predict subcommands: train, predict');\n              break;\n            }\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  dashboard         Manage analytics dashboards');\n          console.log('  insights          Generate automated insights');\n          console.log('  metrics <type>    Show metrics (performance, usage, business)');\n          console.log('  predict           Predictive modeling and forecasting');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(`  ${cyan('claude-flow analytics insights')} --timerange 7d`);\n          console.log(`  ${cyan('claude-flow analytics metrics')} performance`);\n          console.log(\n            `  ${cyan('claude-flow analytics predict train')} \"load-predictor\" --features cpu,memory --target response-time`,\n          );\n          break;\n        }\n      }\n    },\n  },\n\n  // Audit and Compliance Commands\n  {\n    name: 'audit',\n    description: 'Enterprise-grade audit logging and compliance reporting',\n    options: [\n      {\n        name: 'framework',\n        short: 'f',\n        description: 'Compliance framework (SOC2, GDPR, HIPAA, PCI-DSS)',\n        type: 'string',\n      },\n      {\n        name: 'timerange',\n        short: 't',\n        description: 'Time range for audit (1d, 7d, 30d, 90d)',\n        type: 'string',\n      },\n      {\n        name: 'export',\n        short: 'e',\n        description: 'Export format (json, csv, pdf)',\n        type: 'string',\n      },\n    ],\n    action: async (ctx: CommandContext) => {\n      const subcommand = ctx.args[0];\n      const manager = await getAuditManager();\n\n      switch (subcommand) {\n        case 'log': {\n          const eventType = ctx.args[1];\n          const action = ctx.args[2];\n\n          if (!eventType || !action) {\n            error('Usage: audit log <event-type> <action> --resource <resource>');\n            break;\n          }\n\n          try {\n            const entry = await manager.logAuditEvent({\n              eventType,\n              category: (ctx.flags.category as any) || 'system-change',\n              severity: (ctx.flags.severity as any) || 'medium',\n              userId: ctx.flags.user as string,\n              resource: {\n                type: (ctx.flags.resourceType as string) || 'system',\n                id: (ctx.flags.resourceId as string) || 'unknown',\n                name: ctx.flags.resourceName as string,\n              },\n              action,\n              outcome: (ctx.flags.outcome as any) || 'success',\n              details: ctx.flags.details ? JSON.parse(ctx.flags.details as string) : {},\n              context: {\n                source: 'cli',\n                ipAddress: ctx.flags.ip as string,\n                userAgent: ctx.flags.userAgent as string,\n              },\n              compliance: {\n                frameworks: ctx.flags.frameworks ? (ctx.flags.frameworks as string).split(',') : [],\n              },\n            });\n\n            success(`Audit event logged: ${entry.eventType}`);\n            console.log(`${blue('ID:')} ${entry.id}`);\n            console.log(`${blue('Category:')} ${entry.category}`);\n            console.log(`${blue('Severity:')} ${entry.severity}`);\n            console.log(`${blue('Outcome:')} ${entry.outcome}`);\n            console.log(`${blue('Timestamp:')} ${entry.timestamp.toISOString()}`);\n          } catch (err) {\n            error(`Failed to log audit event: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'report': {\n          const reportType = (ctx.args[1] as any) || 'compliance';\n\n          try {\n            const timeRange = (ctx.flags.timerange as string) || '30d';\n            const now = new Date();\n            let start: Date;\n\n            switch (timeRange) {\n              case '1d':\n                start = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n                break;\n              case '7d':\n                start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n              case '30d':\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                break;\n              case '90d':\n                start = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n                break;\n              default:\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            }\n\n            const report = await manager.generateAuditReport({\n              title: `${reportType.toUpperCase()} Audit Report`,\n              description: `Automated ${reportType} audit report for ${timeRange}`,\n              type: reportType,\n              scope: {\n                timeRange: { start, end: now },\n                systems: ['all'],\n                users: ['all'],\n                events: ['all'],\n                compliance: ctx.flags.framework ? [ctx.flags.framework as string] : [],\n              },\n            });\n\n            success(`Audit report generated: ${report.title}`);\n            console.log(`${blue('ID:')} ${report.id}`);\n            console.log(`${blue('Type:')} ${report.type}`);\n            console.log(`${blue('Status:')} ${report.status}`);\n            console.log(`${blue('Events Analyzed:')} ${report.summary.totalEvents}`);\n            console.log(`${blue('Critical Findings:')} ${report.summary.criticalFindings}`);\n            console.log(\n              `${blue('Compliance Score:')} ${report.summary.complianceScore.toFixed(1)}%`,\n            );\n            console.log(`${blue('Risk Level:')} ${report.summary.riskLevel}`);\n\n            if (report.findings.length > 0 && ctx.flags.verbose) {\n              console.log(`\\n${bold('Findings:')}`);\n              for (const finding of report.findings.slice(0, 5)) {\n                console.log(`  ${finding.severity.toUpperCase()}: ${finding.title}`);\n              }\n              if (report.findings.length > 5) {\n                console.log(`  ... and ${report.findings.length - 5} more`);\n              }\n            }\n\n            if (report.recommendations.length > 0) {\n              console.log(`\\n${bold('Recommendations:')}`);\n              for (const rec of report.recommendations.slice(0, 3)) {\n                console.log(`  • ${rec.title} (${rec.priority} priority)`);\n              }\n            }\n          } catch (err) {\n            error(`Failed to generate audit report: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'export': {\n          try {\n            const format = (ctx.flags.export as any) || 'json';\n            const timeRange = (ctx.flags.timerange as string) || '30d';\n            const now = new Date();\n            let start: Date;\n\n            switch (timeRange) {\n              case '1d':\n                start = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n                break;\n              case '7d':\n                start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n              case '30d':\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                break;\n              case '90d':\n                start = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n                break;\n              default:\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            }\n\n            const filepath = await manager.exportAuditData({\n              format,\n              scope: {\n                timeRange: { start, end: now },\n                categories: ctx.flags.categories\n                  ? (ctx.flags.categories as string).split(',')\n                  : undefined,\n                severity: ctx.flags.severity\n                  ? (ctx.flags.severity as string).split(',')\n                  : undefined,\n              },\n              destination: (ctx.flags.output as string) || './audit-export',\n              encryption: (ctx.flags.encrypt as boolean) || false,\n              compression: (ctx.flags.compress as boolean) || false,\n            });\n\n            success(`Audit data exported: ${filepath}`);\n            console.log(`${blue('Format:')} ${format}`);\n            console.log(`${blue('Time Range:')} ${timeRange}`);\n            console.log(`${blue('Encrypted:')} ${ctx.flags.encrypt ? 'Yes' : 'No'}`);\n            console.log(`${blue('Compressed:')} ${ctx.flags.compress ? 'Yes' : 'No'}`);\n          } catch (err) {\n            error(`Failed to export audit data: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'verify': {\n          try {\n            const verification = await manager.verifyAuditIntegrity();\n\n            if (verification.verified) {\n              success('Audit integrity verification passed');\n            } else {\n              error(\n                `Audit integrity verification failed: ${verification.issues.length} issues found`,\n              );\n            }\n\n            console.log(`${blue('Total Entries:')} ${verification.summary.totalEntries}`);\n            console.log(`${blue('Verified Entries:')} ${verification.summary.verifiedEntries}`);\n            console.log(`${blue('Corrupted Entries:')} ${verification.summary.corruptedEntries}`);\n            console.log(`${blue('Missing Entries:')} ${verification.summary.missingEntries}`);\n\n            if (verification.issues.length > 0 && ctx.flags.verbose) {\n              console.log(`\\n${bold('Issues:')}`);\n              for (const issue of verification.issues.slice(0, 5)) {\n                console.log(`  ${issue.severity.toUpperCase()}: ${issue.description}`);\n              }\n            }\n          } catch (err) {\n            error(`Failed to verify audit integrity: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        case 'metrics': {\n          try {\n            const timeRange = (ctx.flags.timerange as string) || '30d';\n            const now = new Date();\n            let start: Date;\n\n            switch (timeRange) {\n              case '1d':\n                start = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n                break;\n              case '7d':\n                start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                break;\n              case '30d':\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                break;\n              case '90d':\n                start = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n                break;\n              default:\n                start = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            }\n\n            const metrics = await manager.getAuditMetrics({ start, end: now });\n\n            success('Audit Metrics:');\n            console.log();\n\n            console.log(`${bold('Volume:')}`);\n            console.log(`  Total Entries: ${metrics.volume.totalEntries.toLocaleString()}`);\n            console.log(`  Daily Average: ${metrics.volume.dailyAverage.toFixed(0)}`);\n            console.log(`  Peak Hourly: ${metrics.volume.peakHourly}`);\n\n            console.log(`\\n${bold('Compliance:')}`);\n            console.log(`  Overall Score: ${metrics.compliance.overallScore.toFixed(1)}%`);\n            console.log(`  Trending: ${metrics.compliance.trending}`);\n\n            console.log(`\\n${bold('Integrity:')}`);\n            console.log(\n              `  Verification Success: ${metrics.integrity.verificationSuccess.toFixed(1)}%`,\n            );\n            console.log(`  Tamper Attempts: ${metrics.integrity.tamperAttempts}`);\n            console.log(`  Data Loss: ${metrics.integrity.dataLoss}`);\n\n            console.log(`\\n${bold('Security:')}`);\n            console.log(`  Unauthorized Access: ${metrics.security.unauthorizedAccess}`);\n            console.log(`  Privileged Actions: ${metrics.security.privilegedActions}`);\n            console.log(`  Escalated Incidents: ${metrics.security.escalatedIncidents}`);\n\n            if (Object.keys(metrics.volume.byCategory).length > 0) {\n              console.log(`\\n${bold('By Category:')}`);\n              for (const [category, count] of Object.entries(metrics.volume.byCategory)) {\n                console.log(`  ${category}: ${count.toLocaleString()}`);\n              }\n            }\n          } catch (err) {\n            error(`Failed to get audit metrics: ${(err as Error).message}`);\n          }\n          break;\n        }\n\n        default: {\n          console.log(`${bold('Available subcommands:')}`);\n          console.log('  log <event> <action>  Log an audit event');\n          console.log('  report [type]         Generate audit report');\n          console.log('  export                Export audit data');\n          console.log('  verify                Verify audit integrity');\n          console.log('  metrics               Show audit metrics');\n          console.log();\n          console.log(`${bold('Examples:')}`);\n          console.log(\n            `  ${cyan('claude-flow audit log')} user_login success --user john.doe --resource user-account`,\n          );\n          console.log(\n            `  ${cyan('claude-flow audit report')} compliance --framework SOC2 --timerange 90d`,\n          );\n          console.log(\n            `  ${cyan('claude-flow audit export')} --format csv --timerange 30d --encrypt`,\n          );\n          break;\n        }\n      }\n    },\n  },\n];\n"],"names":["success","error","warning","info","colors","ProjectManager","DeploymentManager","CloudManager","SecurityManager","AnalyticsManager","AuditManager","bold","blue","green","yellow","red","cyan","magenta","projectManager","deploymentManager","cloudManager","securityManager","analyticsManager","auditManager","getProjectManager","initialize","getDeploymentManager","getCloudManager","getSecurityManager","getAnalyticsManager","getAuditManager","enterpriseCommands","name","description","options","short","type","action","ctx","subcommand","args","manager","project","createProject","flags","priority","owner","stakeholders","split","console","log","id","verbose","timeline","plannedStart","toLocaleDateString","plannedEnd","budget","total","currency","err","message","filters","status","projects","listProjects","length","statusColor","substr","updatedAt","progress","calculateProjectProgress","toFixed","phases","spent","projectId","getProject","createdAt","actualStart","actualEnd","remaining","phase","padEnd","completionPercentage","collaboration","teamMembers","member","role","availability","metrics","getProjectMetrics","totalProjects","activeProjects","completedProjects","averageProjectDuration","budgetVariance","resourceUtilization","qualityScore","reportType","report","generateReport","title","summary","generatedAt","Object","keys","details","JSON","stringify","recommendations","rec","deployment","createDeployment","version","environmentId","environment","strategyId","strategy","initiatedBy","source","repository","repo","branch","commit","dryRun","executeDeployment","deployments","startTime","endTime","duration","deploymentId","reason","slice","join","rollbackDeployment","timeRange","range","start","Date","end","getDeploymentMetrics","totalDeployments","successfulDeployments","failedDeployments","rolledBackDeployments","averageDeploymentTime","deploymentFrequency","meanTimeToRecovery","changeFailureRate","environmentMetrics","env","data","entries","successRate","envSubcommand","createEnvironment","configuration","region","provider","endpoints","secrets","environment_variables","resources","cpu","memory","storage","replicas","providerCmd","addProvider","credentials","accessKey","secretKey","defaultRegion","availableRegions","regions","services","api","features","resourceCmd","resource","createResource","providerId","size","tags","parse","metadata","purpose","costs","monthlyEstimate","resourceId","scaleResource","deleteResource","optimizations","optimizeCosts","opt","toUpperCase","potentialSavings","effort","implementation","totalSavings","reduce","sum","getCloudMetrics","providers","active","inactive","errors","running","stopped","totalSpend","monthlySpend","projectedSpend","performance","averageUptime","security","encryptionCoverage","backupCoverage","target","scan","createSecurityScan","path","severity","undefined","formats","format","executeScan","updatedScan","get","results","criticalFindings","highFindings","mediumFindings","lowFindings","scanDuration","incidentCmd","incident","createSecurityIncident","reporter","affected","systems","response","assignedTo","frameworks","checks","runComplianceAssessment","byFramework","check","framework","passed","failed","stats","score","getSecurityMetrics","scans","completed","inProgress","findings","open","resolved","suppressed","bySeverity","critical","high","compliance","overallScore","trending","incidents","meanTimeToDetection","meanTimeToResolution","dashboardCmd","dashboard","createDashboard","widgets","scope","timerange","now","getTime","insights","generateInsights","insight","priorityColor","category","confidence","metricType","getPerformanceMetrics","system","usage","disk","application","responseTime","avg","throughput","requestsPerSecond","rate","uptime","database","connections","queries","avgExecutionTime","slowQueries","getUsageMetrics","users","new","churn","sessions","bounceRate","calls","toLocaleString","uniqueConsumers","avgResponseTime","errorRate","getBusinessMetrics","revenue","recurring","growth","arpu","customers","churned","satisfaction","conversion","leads","qualified","closed","modelCmd","model","trainPredictiveModel","algorithm","trainingPeriod","accuracy","modelId","input","prediction","makePrediction","eventType","entry","logAuditEvent","userId","user","resourceType","resourceName","outcome","context","ipAddress","ip","userAgent","timestamp","toISOString","generateAuditReport","events","totalEvents","complianceScore","riskLevel","finding","export","filepath","exportAuditData","categories","destination","output","encryption","encrypt","compression","compress","verification","verifyAuditIntegrity","verified","issues","totalEntries","verifiedEntries","corruptedEntries","missingEntries","issue","getAuditMetrics","volume","dailyAverage","peakHourly","integrity","verificationSuccess","tamperAttempts","dataLoss","unauthorizedAccess","privilegedActions","escalatedIncidents","byCategory","count"],"mappings":"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"}