{"version":3,"sources":["../../../../src/cli/commands/memory.ts"],"sourcesContent":["import chalk from 'chalk';\n/**\n * Memory management commands\n */\n\nimport { Command } from '../commander-fix.js';\nimport { promises as fs } from 'node:fs';\nimport * as Table from 'cli-table3';\n\ninterface MemoryEntry {\n  key: string;\n  value: string;\n  namespace: string;\n  timestamp: number;\n}\n\nexport class SimpleMemoryManager {\n  private filePath = './memory/memory-store.json';\n  private data: Record<string, MemoryEntry[]> = {};\n\n  async load() {\n    try {\n      const content = await fs.readFile(this.filePath, 'utf-8');\n      this.data = JSON.parse(content);\n    } catch {\n      // File doesn't exist yet\n      this.data = {};\n    }\n  }\n\n  async save() {\n    await fs.mkdir('./memory', { recursive: true });\n    await fs.writeFile(this.filePath, JSON.stringify(this.data, null, 2));\n  }\n\n  async store(key: string, value: string, namespace: string = 'default') {\n    await this.load();\n\n    if (!this.data[namespace]) {\n      this.data[namespace] = [];\n    }\n\n    // Remove existing entry with same key\n    this.data[namespace] = this.data[namespace].filter((e) => e.key !== key);\n\n    // Add new entry\n    this.data[namespace].push({\n      key,\n      value,\n      namespace,\n      timestamp: Date.now(),\n    });\n\n    await this.save();\n  }\n\n  async query(search: string, namespace?: string) {\n    await this.load();\n\n    const results: MemoryEntry[] = [];\n    const namespaces = namespace ? [namespace] : Object.keys(this.data);\n\n    for (const ns of namespaces) {\n      if (this.data[ns]) {\n        for (const entry of this.data[ns]) {\n          if (entry.key.includes(search) || entry.value.includes(search)) {\n            results.push(entry);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n  async getStats() {\n    await this.load();\n\n    let totalEntries = 0;\n    const namespaceStats: Record<string, number> = {};\n\n    for (const [namespace, entries] of Object.entries(this.data)) {\n      namespaceStats[namespace] = entries.length;\n      totalEntries += entries.length;\n    }\n\n    return {\n      totalEntries,\n      namespaces: Object.keys(this.data).length,\n      namespaceStats,\n      sizeBytes: new TextEncoder().encode(JSON.stringify(this.data)).length,\n    };\n  }\n\n  async exportData(filePath: string) {\n    await this.load();\n    await fs.writeFile(filePath, JSON.stringify(this.data, null, 2));\n  }\n\n  async importData(filePath: string) {\n    const content = await fs.readFile(filePath, 'utf8');\n    this.data = JSON.parse(content);\n    await this.save();\n  }\n\n  async cleanup(daysOld: number = 30) {\n    await this.load();\n\n    const cutoffTime = Date.now() - daysOld * 24 * 60 * 60 * 1000;\n    let removedCount = 0;\n\n    for (const namespace of Object.keys(this.data)) {\n      const before = this.data[namespace].length;\n      this.data[namespace] = this.data[namespace].filter((e) => e.timestamp > cutoffTime);\n      removedCount += before - this.data[namespace].length;\n    }\n\n    await this.save();\n    return removedCount;\n  }\n}\n\nexport const memoryCommand = new Command()\n  .name('memory')\n  .description('Manage memory bank')\n  .action(() => {\n    memoryCommand.help();\n  });\n\n// Store command\nmemoryCommand\n  .command('store')\n  .description('Store information in memory')\n  .arguments('<key> <value>')\n  .option('-n, --namespace <namespace>', 'Target namespace', 'default')\n  .action(async (key: string, value: string, options: any) => {\n    try {\n      const memory = new SimpleMemoryManager();\n      await memory.store(key, value, options.namespace);\n      console.log(chalk.green('‚úÖ Stored successfully'));\n      console.log(`üìù Key: ${key}`);\n      console.log(`üì¶ Namespace: ${options.namespace}`);\n      console.log(`üíæ Size: ${new TextEncoder().encode(value).length} bytes`);\n    } catch (error) {\n      console.error(chalk.red('Failed to store:'), (error as Error).message);\n    }\n  });\n\n// Query command\nmemoryCommand\n  .command('query')\n  .description('Search memory entries')\n  .arguments('<search>')\n  .option('-n, --namespace <namespace>', 'Filter by namespace')\n  .option('-l, --limit <limit>', 'Limit results', '10')\n  .action(async (search: string, options: any) => {\n    try {\n      const memory = new SimpleMemoryManager();\n      const results = await memory.query(search, options.namespace);\n\n      if (results.length === 0) {\n        console.log(chalk.yellow('No results found'));\n        return;\n      }\n\n      console.log(chalk.green(`‚úÖ Found ${results.length} results:`));\n\n      const limited = results.slice(0, parseInt(options.limit));\n      for (const entry of limited) {\n        console.log(chalk.blue(`\\nüìå ${entry.key}`));\n        console.log(`   Namespace: ${entry.namespace}`);\n        console.log(\n          `   Value: ${entry.value.substring(0, 100)}${entry.value.length > 100 ? '...' : ''}`,\n        );\n        console.log(`   Stored: ${new Date(entry.timestamp).toLocaleString()}`);\n      }\n\n      if (results.length > parseInt(options.limit)) {\n        console.log(\n          chalk.gray(`\\n... and ${results.length - parseInt(options.limit)} more results`),\n        );\n      }\n    } catch (error) {\n      console.error(chalk.red('Failed to query:'), (error as Error).message);\n    }\n  });\n\n// Export command\nmemoryCommand\n  .command('export')\n  .description('Export memory to file')\n  .arguments('<file>')\n  .action(async (file: string, options: any) => {\n    try {\n      const memory = new SimpleMemoryManager();\n      await memory.exportData(file);\n      const stats = await memory.getStats();\n      console.log(chalk.green('‚úÖ Memory exported successfully'));\n      console.log(`üìÅ File: ${file}`);\n      console.log(`üìä Entries: ${stats.totalEntries}`);\n      console.log(`üíæ Size: ${(stats.sizeBytes / 1024).toFixed(2)} KB`);\n    } catch (error) {\n      console.error(chalk.red('Failed to export:'), (error as Error).message);\n    }\n  });\n\n// Import command\nmemoryCommand\n  .command('import')\n  .description('Import memory from file')\n  .arguments('<file>')\n  .action(async (file: string, options: any) => {\n    try {\n      const memory = new SimpleMemoryManager();\n      await memory.importData(file);\n      const stats = await memory.getStats();\n      console.log(chalk.green('‚úÖ Memory imported successfully'));\n      console.log(`üìÅ File: ${file}`);\n      console.log(`üìä Entries: ${stats.totalEntries}`);\n      console.log(`üóÇÔ∏è  Namespaces: ${stats.namespaces}`);\n    } catch (error) {\n      console.error(chalk.red('Failed to import:'), (error as Error).message);\n    }\n  });\n\n// Stats command\nmemoryCommand\n  .command('stats')\n  .description('Show memory statistics')\n  .action(async () => {\n    try {\n      const memory = new SimpleMemoryManager();\n      const stats = await memory.getStats();\n\n      console.log(chalk.green('üìä Memory Bank Statistics:'));\n      console.log(`   Total Entries: ${stats.totalEntries}`);\n      console.log(`   Namespaces: ${stats.namespaces}`);\n      console.log(`   Size: ${(stats.sizeBytes / 1024).toFixed(2)} KB`);\n\n      if (stats.namespaces > 0) {\n        console.log(chalk.blue('\\nüìÅ Namespace Breakdown:'));\n        for (const [namespace, count] of Object.entries(stats.namespaceStats)) {\n          console.log(`   ${namespace}: ${count} entries`);\n        }\n      }\n    } catch (error) {\n      console.error(chalk.red('Failed to get stats:'), (error as Error).message);\n    }\n  });\n\n// Cleanup command\nmemoryCommand\n  .command('cleanup')\n  .description('Clean up old entries')\n  .option('-d, --days <days>', 'Entries older than n days', '30')\n  .action(async (options: any) => {\n    try {\n      const memory = new SimpleMemoryManager();\n      const removed = await memory.cleanup(parseInt(options.days));\n      console.log(chalk.green('‚úÖ Cleanup completed'));\n      console.log(`üóëÔ∏è  Removed: ${removed} entries older than ${options.days} days`);\n    } catch (error) {\n      console.error(chalk.red('Failed to cleanup:'), (error as Error).message);\n    }\n  });\n"],"names":["chalk","Command","promises","fs","SimpleMemoryManager","filePath","data","load","content","readFile","JSON","parse","save","mkdir","recursive","writeFile","stringify","store","key","value","namespace","filter","e","push","timestamp","Date","now","query","search","results","namespaces","Object","keys","ns","entry","includes","getStats","totalEntries","namespaceStats","entries","length","sizeBytes","TextEncoder","encode","exportData","importData","cleanup","daysOld","cutoffTime","removedCount","before","memoryCommand","name","description","action","help","command","arguments","option","options","memory","console","log","green","error","red","message","yellow","limited","slice","parseInt","limit","blue","substring","toLocaleString","gray","file","stats","toFixed","count","removed","days"],"mappings":"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"}