{"version":3,"sources":["../../../../src/cli/commands/advanced-memory-commands.ts"],"sourcesContent":["import { getErrorMessage } from '../../utils/error-handler.js';\n/**\n * Advanced Memory Management Commands\n * Implements comprehensive memory operations with advanced capabilities\n * Converted from @cliffy to simple CLI pattern\n */\n\nimport { promises as fs } from 'node:fs';\nimport { join, extname, basename } from 'node:path';\nimport {\n  AdvancedMemoryManager,\n  type QueryOptions,\n  type ExportOptions,\n  type ImportOptions,\n  type CleanupOptions,\n} from '../../memory/advanced-memory-manager.js';\nimport { Logger } from '../../core/logger.js';\n\n// Initialize logger\nconst logger = Logger.getInstance();\n\n// Global memory manager instance\nlet memoryManager: AdvancedMemoryManager | null = null;\n\n// Helper functions\nfunction printSuccess(message: string): void {\n  console.log(`‚úÖ ${message}`);\n}\n\nfunction printError(message: string): void {\n  console.error(`‚ùå ${message}`);\n}\n\nfunction printWarning(message: string): void {\n  console.warn(`‚ö†Ô∏è  ${message}`);\n}\n\nfunction printInfo(message: string): void {\n  console.log(`‚ÑπÔ∏è  ${message}`);\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nfunction formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n  return `${(ms / 60000).toFixed(1)}m`;\n}\n\nasync function ensureMemoryManager(): Promise<AdvancedMemoryManager> {\n  if (!memoryManager) {\n    memoryManager = new AdvancedMemoryManager(\n      {\n        maxMemorySize: 1024 * 1024 * 1024, // 1GB\n        autoCompress: true,\n        autoCleanup: true,\n        indexingEnabled: true,\n        persistenceEnabled: true,\n      },\n      logger,\n    );\n\n    await memoryManager.initialize();\n  }\n  return memoryManager;\n}\n\n// === MAIN MEMORY COMMAND ===\n\nexport async function advancedMemoryCommand(\n  subArgs: string[],\n  flags: Record<string, any>,\n): Promise<void> {\n  const subcommand = subArgs[0];\n\n  if (!subcommand) {\n    showAdvancedMemoryHelp();\n    return;\n  }\n\n  try {\n    switch (subcommand) {\n      case 'query':\n        await queryCommand(subArgs.slice(1), flags);\n        break;\n      case 'export':\n        await exportCommand(subArgs.slice(1), flags);\n        break;\n      case 'import':\n        await importCommand(subArgs.slice(1), flags);\n        break;\n      case 'stats':\n        await statsCommand(subArgs.slice(1), flags);\n        break;\n      case 'cleanup':\n        await cleanupCommand(subArgs.slice(1), flags);\n        break;\n      case 'store':\n        await storeCommand(subArgs.slice(1), flags);\n        break;\n      case 'get':\n        await getCommand(subArgs.slice(1), flags);\n        break;\n      case 'delete':\n        await deleteCommand(subArgs.slice(1), flags);\n        break;\n      case 'list':\n        await listCommand(subArgs.slice(1), flags);\n        break;\n      case 'namespaces':\n        await namespacesCommand(subArgs.slice(1), flags);\n        break;\n      case 'types':\n        await typesCommand(subArgs.slice(1), flags);\n        break;\n      case 'tags':\n        await tagsCommand(subArgs.slice(1), flags);\n        break;\n      case 'config':\n        await configCommand(subArgs.slice(1), flags);\n        break;\n      default:\n        printError(`Unknown command: ${subcommand}`);\n        showAdvancedMemoryHelp();\n    }\n  } catch (error) {\n    const message = getErrorMessage(error);\n    printError(`Command failed: ${message}`);\n    logger.error('Advanced memory command error', { error: message, subcommand, subArgs, flags });\n  }\n}\n\nfunction showAdvancedMemoryHelp(): void {\n  console.log('üß† Advanced Memory Management System\\n');\n  console.log('Available commands:');\n  console.log(\n    '  memory query <search> [options]     - Flexible searching with filters and aggregation',\n  );\n  console.log('  memory export <file> [options]      - Export memory data in multiple formats');\n  console.log(\n    '  memory import <file> [options]      - Import data with validation and transformation',\n  );\n  console.log(\n    '  memory stats [options]              - Comprehensive statistics and optimization suggestions',\n  );\n  console.log(\n    '  memory cleanup [options]            - Intelligent cleanup with archiving and retention',\n  );\n  console.log('  memory store <key> <value> [opts]   - Store data with advanced options');\n  console.log('  memory get <key> [options]          - Retrieve data with caching');\n  console.log('  memory delete <key> [options]       - Delete specific entries');\n  console.log('  memory list [options]               - List entries with filtering');\n  console.log('  memory namespaces                   - List all namespaces');\n  console.log('  memory types                        - List all data types');\n  console.log('  memory tags                         - List all tags');\n  console.log('  memory config [options]             - View/update configuration');\n  console.log('\\nFeatures:');\n  console.log('  ‚Ä¢ Advanced querying with indexing and full-text search');\n  console.log('  ‚Ä¢ Multiple export/import formats (JSON, CSV, XML, YAML)');\n  console.log('  ‚Ä¢ Intelligent cleanup with retention policies');\n  console.log('  ‚Ä¢ Compression and encryption support');\n  console.log('  ‚Ä¢ Cross-agent sharing and synchronization');\n  console.log('  ‚Ä¢ Performance analytics and optimization suggestions');\n}\n\n// === INDIVIDUAL COMMAND FUNCTIONS ===\n\nasync function queryCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const search = args[0];\n\n  if (!search) {\n    printError('Usage: memory query <search> [options]');\n    console.log('Options:');\n    console.log('  --namespace <ns>        Filter by namespace');\n    console.log('  --type <type>           Filter by data type');\n    console.log('  --tags <tags>           Filter by tags (comma-separated)');\n    console.log('  --owner <owner>         Filter by owner');\n    console.log('  --access-level <level>  Filter by access level (private|shared|public)');\n    console.log('  --key-pattern <pattern> Key pattern (regex)');\n    console.log('  --value-search <text>   Search in values');\n    console.log('  --full-text <text>      Full-text search');\n    console.log('  --created-after <date>  Created after date (ISO format)');\n    console.log('  --created-before <date> Created before date (ISO format)');\n    console.log('  --updated-after <date>  Updated after date (ISO format)');\n    console.log('  --updated-before <date> Updated before date (ISO format)');\n    console.log('  --size-gt <bytes>       Size greater than (bytes)');\n    console.log('  --size-lt <bytes>       Size less than (bytes)');\n    console.log('  --include-expired       Include expired entries');\n    console.log('  --limit <num>           Limit results');\n    console.log('  --offset <num>          Offset for pagination');\n    console.log(\n      '  --sort-by <field>       Sort by field (key|createdAt|updatedAt|lastAccessedAt|size|type)',\n    );\n    console.log('  --sort-order <order>    Sort order (asc|desc)');\n    console.log('  --aggregate-by <field>  Generate aggregations (namespace|type|owner|tags)');\n    console.log('  --include-metadata      Include full metadata in results');\n    console.log('  --format <format>       Output format (table|json|csv)');\n    return;\n  }\n\n  try {\n    const manager = await ensureMemoryManager();\n    const startTime = Date.now();\n\n    // Build query options from flags\n    const queryOptions: QueryOptions = {\n      fullTextSearch: search,\n      namespace: flags.namespace,\n      type: flags.type,\n      tags: flags.tags ? flags.tags.split(',').map((t: string) => t.trim()) : undefined,\n      owner: flags.owner,\n      accessLevel: flags['access-level'],\n      keyPattern: flags['key-pattern'],\n      valueSearch: flags['value-search'],\n      createdAfter: flags['created-after'] ? new Date(flags['created-after']) : undefined,\n      createdBefore: flags['created-before'] ? new Date(flags['created-before']) : undefined,\n      updatedAfter: flags['updated-after'] ? new Date(flags['updated-after']) : undefined,\n      updatedBefore: flags['updated-before'] ? new Date(flags['updated-before']) : undefined,\n      sizeGreaterThan: flags['size-gt'] ? parseInt(flags['size-gt']) : undefined,\n      sizeLessThan: flags['size-lt'] ? parseInt(flags['size-lt']) : undefined,\n      includeExpired: flags['include-expired'],\n      limit: flags.limit ? parseInt(flags.limit) : undefined,\n      offset: flags.offset ? parseInt(flags.offset) : undefined,\n      sortBy: flags['sort-by'],\n      sortOrder: flags['sort-order'] || 'asc',\n      aggregateBy: flags['aggregate-by'],\n      includeMetadata: flags['include-metadata'],\n    };\n\n    const result = await manager.query(queryOptions);\n    const duration = Date.now() - startTime;\n\n    printSuccess(`Found ${result.total} entries in ${formatDuration(duration)}`);\n\n    if (result.entries.length === 0) {\n      printInfo('No entries match your query criteria.');\n      return;\n    }\n\n    // Display results based on format\n    const format = flags.format || 'table';\n    switch (format) {\n      case 'json':\n        console.log(\n          JSON.stringify(\n            {\n              query: queryOptions,\n              results: result,\n              executionTime: duration,\n            },\n            null,\n            2,\n          ),\n        );\n        break;\n\n      case 'csv':\n        console.log('key,value,type,namespace,tags,size,created,updated');\n        for (const entry of result.entries) {\n          console.log(\n            [\n              entry.key,\n              JSON.stringify(entry.value).replace(/\"/g, '\"\"'),\n              entry.type,\n              entry.namespace,\n              entry.tags.join(';'),\n              entry.size,\n              entry.createdAt.toISOString(),\n              entry.updatedAt.toISOString(),\n            ].join(','),\n          );\n        }\n        break;\n\n      default: // table\n        console.log('\\nüìã Query Results:\\n');\n        result.entries.forEach((entry, i) => {\n          const value =\n            typeof entry.value === 'string' && entry.value.length > 100\n              ? entry.value.substring(0, 100) + '...'\n              : JSON.stringify(entry.value);\n\n          console.log(`${i + 1}. ${entry.key}`);\n          console.log(\n            `   Type: ${entry.type} | Namespace: ${entry.namespace} | Size: ${formatBytes(entry.size)}`,\n          );\n          console.log(`   Tags: [${entry.tags.join(', ')}]`);\n          console.log(`   Value: ${value}`);\n          console.log(\n            `   Created: ${entry.createdAt.toLocaleString()} | Updated: ${entry.updatedAt.toLocaleString()}`,\n          );\n          console.log(`   Last Accessed: ${entry.lastAccessedAt.toLocaleString()}`);\n\n          if (flags['include-metadata'] && Object.keys(entry.metadata).length > 0) {\n            console.log(`   Metadata: ${JSON.stringify(entry.metadata)}`);\n          }\n          console.log();\n        });\n    }\n\n    // Show aggregations if requested\n    if (result.aggregations) {\n      console.log('\\nüìä Aggregations:\\n');\n      for (const [key, value] of Object.entries(result.aggregations)) {\n        console.log(`${key}:`);\n        for (const [subKey, stats] of Object.entries(value as Record<string, any>)) {\n          console.log(`  ${subKey}: ${stats.count} entries, ${formatBytes(stats.totalSize)}`);\n        }\n        console.log();\n      }\n    }\n\n    // Show pagination info\n    if (result.total > result.entries.length) {\n      const showing = (flags.offset ? parseInt(flags.offset) : 0) + result.entries.length;\n      console.log(`Showing ${showing} of ${result.total} entries`);\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    printError(`Query failed: ${message}`);\n    if (flags.debug) {\n      console.error(error);\n    }\n  }\n}\n\nasync function exportCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const file = args[0];\n\n  if (!file) {\n    printError('Usage: memory export <file> [options]');\n    console.log('Options:');\n    console.log('  --format <format>       Export format (json|csv|xml|yaml)');\n    console.log('  --namespace <namespace> Export specific namespace');\n    console.log('  --type <type>           Export specific type');\n    console.log('  --include-metadata      Include full metadata');\n    console.log('  --compression           Enable compression');\n    console.log('  --encrypt               Enable encryption');\n    console.log('  --encrypt-key <key>     Encryption key');\n    console.log('  --filter-query <json>   Advanced filtering (JSON query options)');\n    return;\n  }\n\n  try {\n    const manager = await ensureMemoryManager();\n\n    // Determine format from file extension if not specified\n    let format = flags.format;\n    if (!format) {\n      const ext = extname(file).toLowerCase();\n      switch (ext) {\n        case '.json':\n          format = 'json';\n          break;\n        case '.csv':\n          format = 'csv';\n          break;\n        case '.xml':\n          format = 'xml';\n          break;\n        case '.yaml':\n        case '.yml':\n          format = 'yaml';\n          break;\n        default:\n          format = 'json';\n      }\n    }\n\n    // Parse filter query if provided\n    let filtering: QueryOptions | undefined;\n    if (flags['filter-query']) {\n      try {\n        filtering = JSON.parse(flags['filter-query']);\n      } catch (error) {\n        printError('Invalid filter query JSON format');\n        return;\n      }\n    }\n\n    // Build export options\n    const exportOptions: ExportOptions = {\n      format: format as ExportOptions['format'],\n      namespace: flags.namespace,\n      type: flags.type,\n      includeMetadata: flags['include-metadata'],\n      compression: flags.compression,\n      encryption: flags.encrypt\n        ? {\n            enabled: true,\n            key: flags['encrypt-key'],\n          }\n        : undefined,\n      filtering,\n    };\n\n    printInfo(`Starting export to ${file} (format: ${format})`);\n    const startTime = Date.now();\n\n    const result = await manager.export(file, exportOptions);\n    const duration = Date.now() - startTime;\n\n    printSuccess(`Export completed in ${formatDuration(duration)}`);\n    console.log(`üìä Exported: ${result.entriesExported} entries`);\n    console.log(`üìÅ File size: ${formatBytes(result.fileSize)}`);\n    console.log(`üîí Checksum: ${result.checksum}`);\n\n    if (flags.compression) {\n      printInfo('Data was compressed during export');\n    }\n    if (flags.encrypt) {\n      printInfo('Data was encrypted during export');\n    }\n  } catch (error) {\n    printError(`Export failed: ${error instanceof Error ? error.message : String(error)}`);\n    if (flags.debug) {\n      console.error(error);\n    }\n  }\n}\n\nasync function importCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const file = args[0];\n\n  if (!file) {\n    printError('Usage: memory import <file> [options]');\n    console.log('Options:');\n    console.log('  --format <format>           Import format (json|csv|xml|yaml)');\n    console.log('  --namespace <namespace>     Target namespace for imported data');\n    console.log(\n      '  --conflict-resolution <strategy> Conflict resolution (overwrite|skip|merge|rename)',\n    );\n    console.log('  --validation                Enable data validation');\n    console.log('  --dry-run                   Show what would be imported without making changes');\n    return;\n  }\n\n  try {\n    // Check if file exists\n    try {\n      await fs.access(file);\n    } catch {\n      printError(`File not found: ${file}`);\n      return;\n    }\n\n    const manager = await ensureMemoryManager();\n\n    // Determine format from file extension if not specified\n    let format = flags.format;\n    if (!format) {\n      const ext = extname(file).toLowerCase();\n      switch (ext) {\n        case '.json':\n          format = 'json';\n          break;\n        case '.csv':\n          format = 'csv';\n          break;\n        case '.xml':\n          format = 'xml';\n          break;\n        case '.yaml':\n        case '.yml':\n          format = 'yaml';\n          break;\n        default:\n          printError('Cannot determine format from file extension. Please specify --format');\n          return;\n      }\n    }\n\n    // Build import options\n    const importOptions: ImportOptions = {\n      format: format as ImportOptions['format'],\n      namespace: flags.namespace,\n      conflictResolution: flags['conflict-resolution'] || 'skip',\n      validation: flags.validation,\n      dryRun: flags['dry-run'],\n    };\n\n    if (flags['dry-run']) {\n      printWarning('DRY RUN MODE - No changes will be made');\n    }\n\n    printInfo(`Starting import from ${file} (format: ${format})`);\n    const startTime = Date.now();\n\n    const result = await manager.import(file, importOptions);\n    const duration = Date.now() - startTime;\n\n    printSuccess(`Import completed in ${formatDuration(duration)}`);\n\n    if (result.entriesImported > 0) {\n      console.log(`üì• Imported: ${result.entriesImported} entries`);\n    }\n    if (result.entriesUpdated > 0) {\n      console.log(`üîÑ Updated: ${result.entriesUpdated} entries`);\n    }\n    if (result.entriesSkipped > 0) {\n      console.log(`‚è≠Ô∏è  Skipped: ${result.entriesSkipped} entries`);\n    }\n    if (result.conflicts.length > 0) {\n      console.log(`‚ö†Ô∏è  Conflicts: ${result.conflicts.length}`);\n      if (result.conflicts.length <= 10) {\n        result.conflicts.forEach((conflict) => {\n          console.log(`   ‚Ä¢ ${conflict}`);\n        });\n      } else {\n        result.conflicts.slice(0, 10).forEach((conflict) => {\n          console.log(`   ‚Ä¢ ${conflict}`);\n        });\n        console.log(`   ... and ${result.conflicts.length - 10} more`);\n      }\n    }\n  } catch (error) {\n    printError(`Import failed: ${error instanceof Error ? error.message : String(error)}`);\n    if (flags.debug) {\n      console.error(error);\n    }\n  }\n}\n\nasync function statsCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n    const startTime = Date.now();\n\n    const stats = await manager.getStatistics();\n    const duration = Date.now() - startTime;\n\n    if (flags.format === 'json') {\n      const output = {\n        statistics: stats,\n        generatedAt: new Date().toISOString(),\n        generationTime: duration,\n      };\n\n      if (flags.export) {\n        await fs.writeFile(flags.export, JSON.stringify(output, null, 2));\n        printSuccess(`Statistics exported to ${flags.export}`);\n      } else {\n        console.log(JSON.stringify(output, null, 2));\n      }\n      return;\n    }\n\n    // Table format display\n    console.log('üß† Memory System Statistics\\n');\n\n    // Overview\n    console.log('üìä Overview:');\n    console.log(`   Total Entries: ${stats.overview.totalEntries.toLocaleString()}`);\n    console.log(`   Total Size: ${formatBytes(stats.overview.totalSize)}`);\n    console.log(\n      `   Compressed Entries: ${stats.overview.compressedEntries.toLocaleString()} (${(stats.overview.compressionRatio * 100).toFixed(1)}% compression)`,\n    );\n    console.log(`   Index Size: ${formatBytes(stats.overview.indexSize)}`);\n    console.log(`   Memory Usage: ${formatBytes(stats.overview.memoryUsage)}`);\n    console.log(`   Disk Usage: ${formatBytes(stats.overview.diskUsage)}`);\n    console.log();\n\n    // Distribution\n    console.log('üìà Distribution:');\n\n    if (Object.keys(stats.distribution.byNamespace).length > 0) {\n      console.log('   By Namespace:');\n      for (const [namespace, data] of Object.entries(stats.distribution.byNamespace)) {\n        console.log(`     ${namespace}: ${data.count} entries, ${formatBytes(data.size)}`);\n      }\n    }\n\n    if (Object.keys(stats.distribution.byType).length > 0) {\n      console.log('   By Type:');\n      for (const [type, data] of Object.entries(stats.distribution.byType)) {\n        console.log(`     ${type}: ${data.count} entries, ${formatBytes(data.size)}`);\n      }\n    }\n    console.log();\n\n    // Performance\n    console.log('‚ö° Performance:');\n    console.log(`   Average Query Time: ${formatDuration(stats.performance.averageQueryTime)}`);\n    console.log(`   Average Write Time: ${formatDuration(stats.performance.averageWriteTime)}`);\n    console.log(`   Cache Hit Ratio: ${(stats.performance.cacheHitRatio * 100).toFixed(1)}%`);\n    console.log(`   Index Efficiency: ${(stats.performance.indexEfficiency * 100).toFixed(1)}%`);\n    console.log();\n\n    // Health\n    console.log('üè• Health:');\n    const healthStatus = stats.health.recommendedCleanup ? 'Needs Attention' : 'Healthy';\n    console.log(`   Status: ${healthStatus}`);\n    console.log(`   Expired Entries: ${stats.health.expiredEntries}`);\n    console.log(`   Orphaned References: ${stats.health.orphanedReferences}`);\n    console.log(`   Duplicate Keys: ${stats.health.duplicateKeys}`);\n    console.log(`   Corrupted Entries: ${stats.health.corruptedEntries}`);\n    console.log();\n\n    // Optimization suggestions\n    if (stats.optimization.suggestions.length > 0) {\n      console.log('üí° Optimization Suggestions:');\n      stats.optimization.suggestions.forEach((suggestion) => {\n        console.log(`   ‚Ä¢ ${suggestion}`);\n      });\n      console.log();\n\n      console.log('üí∞ Potential Savings:');\n      console.log(\n        `   Compression: ${formatBytes(stats.optimization.potentialSavings.compression)}`,\n      );\n      console.log(`   Cleanup: ${formatBytes(stats.optimization.potentialSavings.cleanup)}`);\n      console.log(\n        `   Deduplication: ${formatBytes(stats.optimization.potentialSavings.deduplication)}`,\n      );\n      console.log();\n    }\n\n    console.log(`Statistics generated in ${formatDuration(duration)}`);\n\n    // Export if requested\n    if (flags.export) {\n      const output = {\n        statistics: stats,\n        generatedAt: new Date().toISOString(),\n        generationTime: duration,\n      };\n      await fs.writeFile(flags.export, JSON.stringify(output, null, 2));\n      printSuccess(`Statistics exported to ${flags.export}`);\n    }\n  } catch (error) {\n    printError(`Stats failed: ${error instanceof Error ? error.message : String(error)}`);\n    if (flags.debug) {\n      console.error(error);\n    }\n  }\n}\n\nasync function cleanupCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n\n    if (flags['dry-run']) {\n      printWarning('DRY RUN MODE - No changes will be made');\n    }\n\n    // Build cleanup options\n    const cleanupOptions: CleanupOptions = {\n      dryRun: flags['dry-run'],\n      removeExpired: flags['remove-expired'] !== false,\n      removeOlderThan: flags['remove-older-than']\n        ? parseInt(flags['remove-older-than'])\n        : undefined,\n      removeUnaccessed: flags['remove-unaccessed']\n        ? parseInt(flags['remove-unaccessed'])\n        : undefined,\n      removeOrphaned: flags['remove-orphaned'] !== false,\n      removeDuplicates: flags['remove-duplicates'],\n      compressEligible: flags['compress-eligible'] !== false,\n      archiveOld: flags['archive-old']\n        ? {\n            enabled: true,\n            olderThan: flags['archive-older-than'] ? parseInt(flags['archive-older-than']) : 365,\n            archivePath: flags['archive-path'] || './memory/archive',\n          }\n        : undefined,\n    };\n\n    printInfo('Starting memory cleanup...');\n    const startTime = Date.now();\n\n    const result = await manager.cleanup(cleanupOptions);\n    const duration = Date.now() - startTime;\n\n    printSuccess(`Cleanup completed in ${formatDuration(duration)}`);\n\n    if (result.entriesRemoved > 0) {\n      console.log(`üóëÔ∏è  Removed: ${result.entriesRemoved} entries`);\n    }\n    if (result.entriesArchived > 0) {\n      console.log(`üì¶ Archived: ${result.entriesArchived} entries`);\n    }\n    if (result.entriesCompressed > 0) {\n      console.log(`üóúÔ∏è  Compressed: ${result.entriesCompressed} entries`);\n    }\n    if (result.spaceSaved > 0) {\n      console.log(`üíæ Space Saved: ${formatBytes(result.spaceSaved)}`);\n    }\n\n    if (result.actions.length > 0) {\n      console.log('\\nüìã Actions Performed:');\n      result.actions.forEach((action) => {\n        console.log(`   ‚Ä¢ ${action}`);\n      });\n    }\n\n    if (flags['dry-run'] && (result.entriesRemoved > 0 || result.entriesArchived > 0)) {\n      printInfo('Run without --dry-run to perform these actions');\n    }\n  } catch (error) {\n    printError(`Cleanup failed: ${error instanceof Error ? error.message : String(error)}`);\n    if (flags.debug) {\n      console.error(error);\n    }\n  }\n}\n\nasync function storeCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const key = args[0];\n  const value = args.slice(1).join(' ');\n\n  if (!key || !value) {\n    printError('Usage: memory store <key> <value> [options]');\n    console.log('Options:');\n    console.log('  --namespace <namespace> Target namespace (default: default)');\n    console.log('  --type <type>           Data type');\n    console.log('  --tags <tags>           Tags (comma-separated)');\n    console.log('  --owner <owner>         Entry owner (default: system)');\n    console.log('  --access-level <level>  Access level (private|shared|public, default: shared)');\n    console.log('  --ttl <ms>              Time-to-live in milliseconds');\n    console.log('  --compress              Force compression');\n    return;\n  }\n\n  try {\n    const manager = await ensureMemoryManager();\n\n    // Parse value as JSON if possible\n    let parsedValue;\n    try {\n      parsedValue = JSON.parse(value);\n    } catch {\n      parsedValue = value;\n    }\n\n    const entryId = await manager.store(key, parsedValue, {\n      namespace: flags.namespace || 'default',\n      type: flags.type,\n      tags: flags.tags ? flags.tags.split(',').map((t: string) => t.trim()) : undefined,\n      owner: flags.owner || 'system',\n      accessLevel: flags['access-level'] || 'shared',\n      ttl: flags.ttl ? parseInt(flags.ttl) : undefined,\n      compress: flags.compress,\n    });\n\n    printSuccess('Entry stored successfully');\n    console.log(`üìù Entry ID: ${entryId}`);\n    console.log(`üîë Key: ${key}`);\n    console.log(`üì¶ Namespace: ${flags.namespace || 'default'}`);\n    console.log(`üè∑Ô∏è  Type: ${flags.type || 'auto-detected'}`);\n\n    if (flags.tags) {\n      console.log(`üè∑Ô∏è  Tags: [${flags.tags}]`);\n    }\n    if (flags.ttl) {\n      const expiresAt = new Date(Date.now() + parseInt(flags.ttl));\n      console.log(`‚è∞ Expires: ${expiresAt.toLocaleString()}`);\n    }\n  } catch (error) {\n    printError(`Store failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function getCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const key = args[0];\n\n  if (!key) {\n    printError('Usage: memory get <key> [options]');\n    console.log('Options:');\n    console.log('  --namespace <namespace> Target namespace');\n    console.log('  --format <format>       Output format (json|pretty, default: pretty)');\n    return;\n  }\n\n  try {\n    const manager = await ensureMemoryManager();\n\n    const entry = await manager.retrieve(key, {\n      namespace: flags.namespace,\n      updateLastAccessed: true,\n    });\n\n    if (!entry) {\n      printWarning(`Entry not found: ${key}`);\n      return;\n    }\n\n    if (flags.format === 'json') {\n      console.log(JSON.stringify(entry, null, 2));\n    } else {\n      printSuccess(`Entry found: ${key}`);\n      console.log(`üìù Entry ID: ${entry.id}`);\n      console.log(`üîë Key: ${entry.key}`);\n      console.log(`üì¶ Namespace: ${entry.namespace}`);\n      console.log(`üè∑Ô∏è  Type: ${entry.type}`);\n      console.log(`üíæ Size: ${formatBytes(entry.size)}`);\n      console.log(`üìä Version: ${entry.version}`);\n      console.log(`üë§ Owner: ${entry.owner}`);\n      console.log(`üîí Access: ${entry.accessLevel}`);\n\n      if (entry.tags.length > 0) {\n        console.log(`üè∑Ô∏è  Tags: [${entry.tags.join(', ')}]`);\n      }\n\n      console.log(`üìÖ Created: ${entry.createdAt.toLocaleString()}`);\n      console.log(`üìÖ Updated: ${entry.updatedAt.toLocaleString()}`);\n      console.log(`üìÖ Last Accessed: ${entry.lastAccessedAt.toLocaleString()}`);\n\n      if (entry.expiresAt) {\n        console.log(`‚è∞ Expires: ${entry.expiresAt.toLocaleString()}`);\n      }\n\n      if (entry.compressed) {\n        console.log(`üóúÔ∏è  Compressed: Yes`);\n      }\n\n      console.log(`üíæ Value:`);\n      if (typeof entry.value === 'string' && entry.value.length > 500) {\n        console.log(entry.value.substring(0, 500) + '...');\n        console.log(`(showing first 500 characters of ${entry.value.length} total)`);\n      } else {\n        console.log(JSON.stringify(entry.value, null, 2));\n      }\n    }\n  } catch (error) {\n    printError(`Retrieve failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function deleteCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  const key = args[0];\n\n  if (!key) {\n    printError('Usage: memory delete <key> [options]');\n    console.log('Options:');\n    console.log('  --namespace <namespace> Target namespace');\n    console.log('  --confirm               Skip confirmation prompt');\n    return;\n  }\n\n  try {\n    const manager = await ensureMemoryManager();\n\n    const entry = await manager.retrieve(key, { namespace: flags.namespace });\n    if (!entry) {\n      printWarning(`Entry not found: ${key}`);\n      return;\n    }\n\n    if (!flags.confirm) {\n      console.log(`About to delete entry: ${key} (namespace: ${entry.namespace})`);\n      console.log('Add --confirm to proceed without this prompt');\n      return;\n    }\n\n    const success = await manager.deleteEntry(entry.id);\n\n    if (success) {\n      printSuccess(`Entry deleted: ${key}`);\n    } else {\n      printError(`Failed to delete entry: ${key}`);\n    }\n  } catch (error) {\n    printError(`Delete failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function listCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n\n    const result = await manager.query({\n      namespace: flags.namespace,\n      type: flags.type,\n      limit: flags.limit ? parseInt(flags.limit) : 20,\n      offset: flags.offset ? parseInt(flags.offset) : 0,\n      sortBy: flags['sort-by'] || 'updatedAt',\n      sortOrder: flags['sort-order'] || 'desc',\n    });\n\n    if (result.entries.length === 0) {\n      printInfo('No entries found');\n      return;\n    }\n\n    console.log(`\\nüìã Memory Entries (${result.total} total):\\n`);\n\n    result.entries.forEach((entry, i) => {\n      const num = (flags.offset ? parseInt(flags.offset) : 0) + i + 1;\n      console.log(`${num}. ${entry.key}`);\n      console.log(\n        `   Namespace: ${entry.namespace} | Type: ${entry.type} | Size: ${formatBytes(entry.size)}`,\n      );\n      console.log(`   Updated: ${entry.updatedAt.toLocaleString()}`);\n\n      if (entry.tags.length > 0) {\n        console.log(`   Tags: [${entry.tags.join(', ')}]`);\n      }\n      console.log();\n    });\n\n    if (result.total > result.entries.length) {\n      const showing = (flags.offset ? parseInt(flags.offset) : 0) + result.entries.length;\n      console.log(`Showing ${showing} of ${result.total} entries`);\n    }\n  } catch (error) {\n    printError(`List failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function namespacesCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n    const namespaces = await manager.listNamespaces();\n\n    if (namespaces.length === 0) {\n      printInfo('No namespaces found');\n      return;\n    }\n\n    console.log('\\nüìÅ Namespaces:\\n');\n    namespaces.forEach((namespace, i) => {\n      console.log(`${i + 1}. ${namespace}`);\n    });\n  } catch (error) {\n    printError(\n      `Failed to list namespaces: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\nasync function typesCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n    const types = await manager.listTypes();\n\n    if (types.length === 0) {\n      printInfo('No types found');\n      return;\n    }\n\n    console.log('\\nüè∑Ô∏è  Data Types:\\n');\n    types.forEach((type, i) => {\n      console.log(`${i + 1}. ${type}`);\n    });\n  } catch (error) {\n    printError(`Failed to list types: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function tagsCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n    const tags = await manager.listTags();\n\n    if (tags.length === 0) {\n      printInfo('No tags found');\n      return;\n    }\n\n    console.log('\\nüè∑Ô∏è  Tags:\\n');\n    tags.forEach((tag, i) => {\n      console.log(`${i + 1}. ${tag}`);\n    });\n  } catch (error) {\n    printError(`Failed to list tags: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nasync function configCommand(args: string[], flags: Record<string, any>): Promise<void> {\n  try {\n    const manager = await ensureMemoryManager();\n\n    if (flags.set) {\n      try {\n        const updates = JSON.parse(flags.set);\n        await manager.updateConfiguration(updates);\n        printSuccess('Configuration updated');\n      } catch (error) {\n        printError('Invalid configuration JSON format');\n        return;\n      }\n    }\n\n    if (flags.show || !flags.set) {\n      const config = manager.getConfiguration();\n      console.log('\\n‚öôÔ∏è  Memory System Configuration:\\n');\n      console.log(JSON.stringify(config, null, 2));\n    }\n  } catch (error) {\n    printError(\n      `Configuration operation failed: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n"],"names":["getErrorMessage","promises","fs","extname","AdvancedMemoryManager","Logger","logger","getInstance","memoryManager","printSuccess","message","console","log","printError","error","printWarning","warn","printInfo","formatBytes","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","formatDuration","ms","ensureMemoryManager","maxMemorySize","autoCompress","autoCleanup","indexingEnabled","persistenceEnabled","initialize","advancedMemoryCommand","subArgs","flags","subcommand","showAdvancedMemoryHelp","queryCommand","slice","exportCommand","importCommand","statsCommand","cleanupCommand","storeCommand","getCommand","deleteCommand","listCommand","namespacesCommand","typesCommand","tagsCommand","configCommand","args","search","manager","startTime","Date","now","queryOptions","fullTextSearch","namespace","type","tags","split","map","t","trim","undefined","owner","accessLevel","keyPattern","valueSearch","createdAfter","createdBefore","updatedAfter","updatedBefore","sizeGreaterThan","parseInt","sizeLessThan","includeExpired","limit","offset","sortBy","sortOrder","aggregateBy","includeMetadata","result","query","duration","total","entries","length","format","JSON","stringify","results","executionTime","entry","key","value","replace","join","size","createdAt","toISOString","updatedAt","forEach","substring","toLocaleString","lastAccessedAt","Object","keys","metadata","aggregations","subKey","stats","count","totalSize","showing","Error","String","debug","file","ext","toLowerCase","filtering","parse","exportOptions","compression","encryption","encrypt","enabled","export","entriesExported","fileSize","checksum","access","importOptions","conflictResolution","validation","dryRun","import","entriesImported","entriesUpdated","entriesSkipped","conflicts","conflict","getStatistics","output","statistics","generatedAt","generationTime","writeFile","overview","totalEntries","compressedEntries","compressionRatio","indexSize","memoryUsage","diskUsage","distribution","byNamespace","data","byType","performance","averageQueryTime","averageWriteTime","cacheHitRatio","indexEfficiency","healthStatus","health","recommendedCleanup","expiredEntries","orphanedReferences","duplicateKeys","corruptedEntries","optimization","suggestions","suggestion","potentialSavings","cleanup","deduplication","cleanupOptions","removeExpired","removeOlderThan","removeUnaccessed","removeOrphaned","removeDuplicates","compressEligible","archiveOld","olderThan","archivePath","entriesRemoved","entriesArchived","entriesCompressed","spaceSaved","actions","action","parsedValue","entryId","store","ttl","compress","expiresAt","retrieve","updateLastAccessed","id","version","compressed","confirm","success","deleteEntry","num","namespaces","listNamespaces","types","listTypes","listTags","tag","set","updates","updateConfiguration","show","config","getConfiguration"],"mappings":"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"}