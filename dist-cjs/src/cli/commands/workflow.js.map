{"version":3,"sources":["../../../../src/cli/commands/workflow.ts"],"sourcesContent":["import { getErrorMessage } from '../../utils/error-handler.js';\n/**\n * Workflow execution commands for Claude-Flow\n */\n\nimport { Command } from '../commander-fix.js';\nimport { promises as fs } from 'node:fs';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport * as Table from 'cli-table3';\nimport { generateId } from '../../utils/helpers.js';\nimport { formatDuration, formatStatusIndicator, formatProgressBar } from '../formatter.js';\n\nexport const workflowCommand = new Command()\n  .name('workflow')\n  .description('Execute and manage workflows')\n  .action(() => {\n    workflowCommand.outputHelp();\n  })\n  .command('run')\n  .description('Execute a workflow from file')\n  .argument('<workflow-file>', 'Workflow file path')\n  .option('-d, --dry-run', 'Validate workflow without executing')\n  .option('-v, --variables <vars>', 'Override variables (JSON format)')\n  .option('-w, --watch', 'Watch workflow execution progress')\n  .option('--parallel', 'Allow parallel execution where possible')\n  .option('--fail-fast', 'Stop on first task failure')\n  .action(async (workflowFile: string, options: any) => {\n    await runWorkflow(workflowFile, options);\n  })\n  .command('validate')\n  .description('Validate a workflow file')\n  .argument('<workflow-file>', 'Workflow file path')\n  .option('--strict', 'Use strict validation mode')\n  .action(async (workflowFile: string, options: any) => {\n    await validateWorkflow(workflowFile, options);\n  })\n  .command('list')\n  .description('List running workflows')\n  .option('--all', 'Include completed workflows')\n  .option('--format <format>', 'Output format (table, json)', 'table')\n  .action(async (options: any) => {\n    await listWorkflows(options);\n  })\n  .command('status')\n  .description('Show workflow execution status')\n  .argument('<workflow-id>', 'Workflow ID')\n  .option('-w, --watch', 'Watch workflow progress')\n  .action(async (workflowId: string, options: any) => {\n    await showWorkflowStatus(workflowId, options);\n  })\n  .command('stop')\n  .description('Stop a running workflow')\n  .argument('<workflow-id>', 'Workflow ID')\n  .option('-f, --force', 'Force stop without cleanup')\n  .action(async (workflowId: string, options: any) => {\n    await stopWorkflow(workflowId, options);\n  })\n  .command('template')\n  .description('Generate workflow templates')\n  .argument('<template-type>', 'Template type')\n  .option('-o, --output <file>', 'Output file path')\n  .option('--format <format>', 'Template format (json, yaml)', 'json')\n  .action(async (templateType: string, options: any) => {\n    await generateTemplate(templateType, options);\n  });\n\ninterface WorkflowDefinition {\n  name: string;\n  version?: string;\n  description?: string;\n  variables?: Record<string, any>;\n  agents?: AgentDefinition[];\n  tasks: TaskDefinition[];\n  dependencies?: Record<string, string[]>;\n  settings?: WorkflowSettings;\n}\n\ninterface AgentDefinition {\n  id: string;\n  type: string;\n  name?: string;\n  config?: Record<string, any>;\n}\n\ninterface TaskDefinition {\n  id: string;\n  name?: string;\n  type: string;\n  description: string;\n  assignTo?: string;\n  depends?: string[];\n  input?: Record<string, any>;\n  timeout?: number;\n  retries?: number;\n  condition?: string;\n}\n\ninterface WorkflowSettings {\n  maxConcurrency?: number;\n  timeout?: number;\n  retryPolicy?: 'none' | 'immediate' | 'exponential';\n  failurePolicy?: 'fail-fast' | 'continue' | 'ignore';\n}\n\ninterface WorkflowExecution {\n  id: string;\n  workflowName: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'stopped';\n  startedAt: Date;\n  completedAt?: Date;\n  progress: {\n    total: number;\n    completed: number;\n    failed: number;\n  };\n  tasks: TaskExecution[];\n}\n\ninterface TaskExecution {\n  id: string;\n  taskId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped';\n  startedAt?: Date;\n  completedAt?: Date;\n  assignedAgent?: string;\n  error?: string;\n  output?: any;\n}\n\nasync function runWorkflow(workflowFile: string, options: any): Promise<void> {\n  try {\n    // Load and validate workflow\n    const workflow = await loadWorkflow(workflowFile);\n\n    if (options.dryRun) {\n      await validateWorkflowDefinition(workflow, true);\n      console.log(chalk.green('✓ Workflow validation passed'));\n      return;\n    }\n\n    // Override variables if provided\n    if (options.variables) {\n      try {\n        const vars = JSON.parse(options.variables);\n        workflow.variables = { ...workflow.variables, ...vars };\n      } catch (error) {\n        throw new Error(`Invalid variables JSON: ${(error as Error).message}`);\n      }\n    }\n\n    // Create execution plan\n    const execution = await createExecution(workflow);\n\n    console.log(chalk.cyan.bold('Starting workflow execution'));\n    console.log(`${chalk.white('Workflow:')} ${workflow.name}`);\n    console.log(`${chalk.white('ID:')} ${execution.id}`);\n    console.log(`${chalk.white('Tasks:')} ${execution.tasks.length}`);\n    console.log();\n\n    // Execute workflow\n    if (options.watch) {\n      await executeWorkflowWithWatch(execution, workflow, options);\n    } else {\n      await executeWorkflow(execution, workflow, options);\n    }\n  } catch (error) {\n    console.error(chalk.red('Workflow execution failed:'), (error as Error).message);\n    process.exit(1);\n  }\n}\n\nasync function validateWorkflow(workflowFile: string, options: any): Promise<void> {\n  try {\n    const workflow = await loadWorkflow(workflowFile);\n    await validateWorkflowDefinition(workflow, options.strict);\n\n    console.log(chalk.green('✓ Workflow validation passed'));\n    console.log(`${chalk.white('Name:')} ${workflow.name}`);\n    console.log(`${chalk.white('Tasks:')} ${workflow.tasks.length}`);\n    console.log(`${chalk.white('Agents:')} ${workflow.agents?.length || 0}`);\n\n    if (workflow.dependencies) {\n      const depCount = Object.values(workflow.dependencies).flat().length;\n      console.log(`${chalk.white('Dependencies:')} ${depCount}`);\n    }\n  } catch (error) {\n    console.error(chalk.red('✗ Workflow validation failed:'), (error as Error).message);\n    process.exit(1);\n  }\n}\n\nasync function listWorkflows(options: any): Promise<void> {\n  try {\n    // Mock workflow list - in production, this would query the orchestrator\n    const workflows = await getRunningWorkflows(options.all);\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(workflows, null, 2));\n      return;\n    }\n\n    if (workflows.length === 0) {\n      console.log(chalk.gray('No workflows found'));\n      return;\n    }\n\n    console.log(chalk.cyan.bold(`Workflows (${workflows.length})`));\n    console.log('─'.repeat(60));\n\n    const table = new Table.default({\n      head: ['ID', 'Name', 'Status', 'Progress', 'Started', 'Duration'],\n    });\n\n    for (const workflow of workflows) {\n      const statusIcon = formatStatusIndicator(workflow.status);\n      const progress = `${workflow.progress.completed}/${workflow.progress.total}`;\n      const progressBar = formatProgressBar(\n        workflow.progress.completed,\n        workflow.progress.total,\n        10,\n      );\n      const duration = workflow.completedAt\n        ? formatDuration(workflow.completedAt.getTime() - workflow.startedAt.getTime())\n        : formatDuration(Date.now() - workflow.startedAt.getTime());\n\n      table.push([\n        chalk.gray(workflow.id.substring(0, 8) + '...'),\n        chalk.white(workflow.workflowName),\n        `${statusIcon} ${workflow.status}`,\n        `${progressBar} ${progress}`,\n        workflow.startedAt.toLocaleTimeString(),\n        duration,\n      ]);\n    }\n\n    console.log(table.toString());\n  } catch (error) {\n    console.error(chalk.red('Failed to list workflows:'), (error as Error).message);\n  }\n}\n\nasync function showWorkflowStatus(workflowId: string, options: any): Promise<void> {\n  try {\n    if (options.watch) {\n      await watchWorkflowStatus(workflowId);\n    } else {\n      const execution = await getWorkflowExecution(workflowId);\n      displayWorkflowStatus(execution);\n    }\n  } catch (error) {\n    console.error(chalk.red('Failed to get workflow status:'), (error as Error).message);\n  }\n}\n\nasync function stopWorkflow(workflowId: string, options: any): Promise<void> {\n  try {\n    const execution = await getWorkflowExecution(workflowId);\n\n    if (execution.status !== 'running') {\n      console.log(chalk.yellow(`Workflow is not running (status: ${execution.status})`));\n      return;\n    }\n\n    if (!options.force) {\n      const { confirmed } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'confirmed',\n          message: `Stop workflow \"${execution.workflowName}\"?`,\n          default: false,\n        },\n      ]);\n\n      if (!confirmed) {\n        console.log(chalk.gray('Stop cancelled'));\n        return;\n      }\n    }\n\n    console.log(chalk.yellow('Stopping workflow...'));\n\n    // Mock stopping - in production, this would call the orchestrator\n    if (options.force) {\n      console.log(chalk.red('• Force stopping all tasks'));\n    } else {\n      console.log(chalk.blue('• Gracefully stopping tasks'));\n      console.log(chalk.blue('• Cleaning up resources'));\n    }\n\n    console.log(chalk.green('✓ Workflow stopped'));\n  } catch (error) {\n    console.error(chalk.red('Failed to stop workflow:'), (error as Error).message);\n  }\n}\n\nasync function generateTemplate(templateType: string, options: any): Promise<void> {\n  const templates: Record<string, WorkflowDefinition> = {\n    research: {\n      name: 'Research Workflow',\n      description: 'Multi-stage research and analysis workflow',\n      variables: {\n        topic: 'quantum computing',\n        depth: 'comprehensive',\n      },\n      agents: [\n        { id: 'researcher', type: 'researcher', name: 'Research Agent' },\n        { id: 'analyst', type: 'analyst', name: 'Analysis Agent' },\n      ],\n      tasks: [\n        {\n          id: 'research-task',\n          type: 'research',\n          description: 'Research the given topic',\n          assignTo: 'researcher',\n          input: { topic: '${topic}', depth: '${depth}' },\n        },\n        {\n          id: 'analyze-task',\n          type: 'analysis',\n          description: 'Analyze research findings',\n          assignTo: 'analyst',\n          depends: ['research-task'],\n          input: { data: '${research-task.output}' },\n        },\n      ],\n      settings: {\n        maxConcurrency: 2,\n        timeout: 300000,\n        failurePolicy: 'fail-fast',\n      },\n    },\n    implementation: {\n      name: 'Implementation Workflow',\n      description: 'Code implementation and testing workflow',\n      agents: [\n        { id: 'implementer', type: 'implementer', name: 'Implementation Agent' },\n        { id: 'tester', type: 'implementer', name: 'Testing Agent' },\n      ],\n      tasks: [\n        {\n          id: 'implement',\n          type: 'implementation',\n          description: 'Implement the solution',\n          assignTo: 'implementer',\n        },\n        {\n          id: 'test',\n          type: 'testing',\n          description: 'Test the implementation',\n          assignTo: 'tester',\n          depends: ['implement'],\n        },\n      ],\n    },\n    coordination: {\n      name: 'Multi-Agent Coordination',\n      description: 'Complex multi-agent coordination workflow',\n      agents: [\n        { id: 'coordinator', type: 'coordinator', name: 'Coordinator Agent' },\n        { id: 'worker1', type: 'implementer', name: 'Worker Agent 1' },\n        { id: 'worker2', type: 'implementer', name: 'Worker Agent 2' },\n      ],\n      tasks: [\n        {\n          id: 'plan',\n          type: 'planning',\n          description: 'Create execution plan',\n          assignTo: 'coordinator',\n        },\n        {\n          id: 'work1',\n          type: 'implementation',\n          description: 'Execute part 1',\n          assignTo: 'worker1',\n          depends: ['plan'],\n        },\n        {\n          id: 'work2',\n          type: 'implementation',\n          description: 'Execute part 2',\n          assignTo: 'worker2',\n          depends: ['plan'],\n        },\n        {\n          id: 'integrate',\n          type: 'integration',\n          description: 'Integrate results',\n          assignTo: 'coordinator',\n          depends: ['work1', 'work2'],\n        },\n      ],\n      settings: {\n        maxConcurrency: 3,\n        failurePolicy: 'continue',\n      },\n    },\n  };\n\n  const template = templates[templateType];\n  if (!template) {\n    console.error(chalk.red(`Unknown template type: ${templateType}`));\n    console.log(chalk.gray('Available templates:'), Object.keys(templates).join(', '));\n    return;\n  }\n\n  const outputFile = options.output || `${templateType}-workflow.${options.format}`;\n\n  let content: string;\n  if (options.format === 'yaml') {\n    // In production, use a proper YAML library\n    console.log(chalk.yellow('YAML format not implemented, using JSON'));\n    content = JSON.stringify(template, null, 2);\n  } else {\n    content = JSON.stringify(template, null, 2);\n  }\n\n  await fs.writeFile(outputFile, content);\n\n  console.log(chalk.green('✓ Workflow template generated'));\n  console.log(`${chalk.white('Template:')} ${templateType}`);\n  console.log(`${chalk.white('File:')} ${outputFile}`);\n  console.log(`${chalk.white('Tasks:')} ${template.tasks.length}`);\n  console.log(`${chalk.white('Agents:')} ${template.agents?.length || 0}`);\n}\n\nasync function loadWorkflow(workflowFile: string): Promise<WorkflowDefinition> {\n  try {\n    const content = await fs.readFile(workflowFile, 'utf-8');\n\n    if (workflowFile.endsWith('.yaml') || workflowFile.endsWith('.yml')) {\n      // In production, use a proper YAML parser\n      throw new Error('YAML workflows not yet supported');\n    }\n\n    return JSON.parse(content) as WorkflowDefinition;\n  } catch (error) {\n    throw new Error(`Failed to load workflow file: ${getErrorMessage(error)}`);\n  }\n}\n\nasync function validateWorkflowDefinition(\n  workflow: WorkflowDefinition,\n  strict = false,\n): Promise<void> {\n  const errors: string[] = [];\n\n  // Basic validation\n  if (!workflow.name) errors.push('Workflow name is required');\n  if (!workflow.tasks || workflow.tasks.length === 0) errors.push('At least one task is required');\n\n  // Task validation\n  const taskIds = new Set<string>();\n  for (const task of workflow.tasks || []) {\n    if (!task.id) errors.push('Task ID is required');\n    if (taskIds.has(task.id)) errors.push(`Duplicate task ID: ${task.id}`);\n    taskIds.add(task.id);\n\n    if (!task.type) errors.push(`Task ${task.id}: type is required`);\n    if (!task.description) errors.push(`Task ${task.id}: description is required`);\n\n    // Validate dependencies\n    if (task.depends) {\n      for (const dep of task.depends) {\n        if (!taskIds.has(dep)) {\n          // Check if dependency exists in previous tasks\n          const taskIndex = workflow.tasks.indexOf(task);\n          const depExists = workflow.tasks.slice(0, taskIndex).some((t) => t.id === dep);\n          if (!depExists) {\n            errors.push(`Task ${task.id}: unknown dependency ${dep}`);\n          }\n        }\n      }\n    }\n  }\n\n  // Agent validation\n  if (workflow.agents) {\n    const agentIds = new Set<string>();\n    for (const agent of workflow.agents) {\n      if (!agent.id) errors.push('Agent ID is required');\n      if (agentIds.has(agent.id)) errors.push(`Duplicate agent ID: ${agent.id}`);\n      agentIds.add(agent.id);\n\n      if (!agent.type) errors.push(`Agent ${agent.id}: type is required`);\n    }\n\n    // Validate task assignments\n    for (const task of workflow.tasks) {\n      if (task.assignTo && !agentIds.has(task.assignTo)) {\n        errors.push(`Task ${task.id}: assigned to unknown agent ${task.assignTo}`);\n      }\n    }\n  }\n\n  // Strict validation\n  if (strict) {\n    // Check for circular dependencies\n    const graph = new Map<string, string[]>();\n    for (const task of workflow.tasks) {\n      graph.set(task.id, task.depends || []);\n    }\n\n    if (hasCircularDependencies(graph)) {\n      errors.push('Circular dependencies detected');\n    }\n  }\n\n  if (errors.length > 0) {\n    throw new Error('Workflow validation failed:\\n• ' + errors.join('\\n• '));\n  }\n}\n\nasync function createExecution(workflow: WorkflowDefinition): Promise<WorkflowExecution> {\n  const tasks: TaskExecution[] = workflow.tasks.map((task) => ({\n    id: generateId('task-exec'),\n    taskId: task.id,\n    status: 'pending',\n  }));\n\n  return {\n    id: generateId('workflow-exec'),\n    workflowName: workflow.name,\n    status: 'pending',\n    startedAt: new Date(),\n    progress: {\n      total: tasks.length,\n      completed: 0,\n      failed: 0,\n    },\n    tasks,\n  };\n}\n\nasync function executeWorkflow(\n  execution: WorkflowExecution,\n  workflow: WorkflowDefinition,\n  options: any,\n): Promise<void> {\n  execution.status = 'running';\n\n  console.log(chalk.blue('Executing workflow...'));\n  console.log();\n\n  // Mock execution - in production, this would use the orchestrator\n  for (let i = 0; i < execution.tasks.length; i++) {\n    const taskExec = execution.tasks[i];\n    const taskDef = workflow.tasks.find((t) => t.id === taskExec.taskId)!;\n\n    console.log(`${chalk.cyan('→')} Starting task: ${taskDef.description}`);\n\n    taskExec.status = 'running';\n    taskExec.startedAt = new Date();\n\n    // Simulate task execution\n    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n    // Random success/failure for demo\n    const success = Math.random() > 0.1; // 90% success rate\n\n    if (success) {\n      taskExec.status = 'completed';\n      taskExec.completedAt = new Date();\n      execution.progress.completed++;\n      console.log(`${chalk.green('✓')} Completed: ${taskDef.description}`);\n    } else {\n      taskExec.status = 'failed';\n      taskExec.completedAt = new Date();\n      taskExec.error = 'Simulated task failure';\n      execution.progress.failed++;\n      console.log(`${chalk.red('✗')} Failed: ${taskDef.description}`);\n\n      if (options.failFast || workflow.settings?.failurePolicy === 'fail-fast') {\n        execution.status = 'failed';\n        console.log(chalk.red('\\nWorkflow failed (fail-fast mode)'));\n        return;\n      }\n    }\n\n    console.log();\n  }\n\n  execution.status = execution.progress.failed > 0 ? 'failed' : 'completed';\n  execution.completedAt = new Date();\n\n  const duration = formatDuration(execution.completedAt.getTime() - execution.startedAt.getTime());\n\n  if (execution.status === 'completed') {\n    console.log(chalk.green.bold('✓ Workflow completed successfully'));\n  } else {\n    console.log(chalk.red.bold('✗ Workflow completed with failures'));\n  }\n\n  console.log(`${chalk.white('Duration:')} ${duration}`);\n  console.log(\n    `${chalk.white('Tasks:')} ${execution.progress.completed}/${execution.progress.total} completed`,\n  );\n\n  if (execution.progress.failed > 0) {\n    console.log(`${chalk.white('Failed:')} ${execution.progress.failed}`);\n  }\n}\n\nasync function executeWorkflowWithWatch(\n  execution: WorkflowExecution,\n  workflow: WorkflowDefinition,\n  options: any,\n): Promise<void> {\n  console.log(chalk.yellow('Starting workflow execution in watch mode...'));\n  console.log(chalk.gray('Press Ctrl+C to stop\\n'));\n\n  // Start execution in background and watch progress\n  const executionPromise = executeWorkflow(execution, workflow, options);\n\n  // Watch loop\n  const watchInterval = setInterval(() => {\n    displayWorkflowProgress(execution);\n  }, 1000);\n\n  try {\n    await executionPromise;\n  } finally {\n    clearInterval(watchInterval);\n    displayWorkflowProgress(execution);\n  }\n}\n\nasync function watchWorkflowStatus(workflowId: string): Promise<void> {\n  console.log(chalk.cyan('Watching workflow status...'));\n  console.log(chalk.gray('Press Ctrl+C to stop\\n'));\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      console.clear();\n      const execution = await getWorkflowExecution(workflowId);\n      displayWorkflowStatus(execution);\n\n      if (\n        execution.status === 'completed' ||\n        execution.status === 'failed' ||\n        execution.status === 'stopped'\n      ) {\n        console.log('\\n' + chalk.gray('Workflow finished. Exiting watch mode.'));\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n    } catch (error) {\n      console.error(chalk.red('Error watching workflow:'), (error as Error).message);\n      break;\n    }\n  }\n}\n\nfunction displayWorkflowStatus(execution: WorkflowExecution): void {\n  console.log(chalk.cyan.bold('Workflow Status'));\n  console.log('─'.repeat(50));\n\n  const statusIcon = formatStatusIndicator(execution.status);\n  const duration = execution.completedAt\n    ? formatDuration(execution.completedAt.getTime() - execution.startedAt.getTime())\n    : formatDuration(Date.now() - execution.startedAt.getTime());\n\n  console.log(`${chalk.white('Name:')} ${execution.workflowName}`);\n  console.log(`${chalk.white('ID:')} ${execution.id}`);\n  console.log(`${chalk.white('Status:')} ${statusIcon} ${execution.status}`);\n  console.log(`${chalk.white('Started:')} ${execution.startedAt.toLocaleString()}`);\n  console.log(`${chalk.white('Duration:')} ${duration}`);\n\n  const progressBar = formatProgressBar(\n    execution.progress.completed,\n    execution.progress.total,\n    40,\n    'Progress',\n  );\n  console.log(`${progressBar} ${execution.progress.completed}/${execution.progress.total}`);\n\n  if (execution.progress.failed > 0) {\n    console.log(\n      `${chalk.white('Failed Tasks:')} ${chalk.red(execution.progress.failed.toString())}`,\n    );\n  }\n  console.log();\n\n  // Task details\n  console.log(chalk.cyan.bold('Tasks'));\n  console.log('─'.repeat(50));\n\n  const table = new Table.default({\n    head: ['Task', 'Status', 'Duration', 'Agent'],\n  });\n\n  for (const taskExec of execution.tasks) {\n    const statusIcon = formatStatusIndicator(taskExec.status);\n    const duration =\n      taskExec.completedAt && taskExec.startedAt\n        ? formatDuration(taskExec.completedAt.getTime() - taskExec.startedAt.getTime())\n        : taskExec.startedAt\n          ? formatDuration(Date.now() - taskExec.startedAt.getTime())\n          : '-';\n\n    table.push([\n      chalk.white(taskExec.taskId),\n      `${statusIcon} ${taskExec.status}`,\n      duration,\n      taskExec.assignedAgent || '-',\n    ]);\n  }\n\n  console.log(table.toString());\n}\n\nfunction displayWorkflowProgress(execution: WorkflowExecution): void {\n  const progress = `${execution.progress.completed}/${execution.progress.total}`;\n  const progressBar = formatProgressBar(execution.progress.completed, execution.progress.total, 30);\n\n  console.log(`\\r${progressBar} ${progress} tasks completed`);\n}\n\nasync function getRunningWorkflows(includeAll = false): Promise<WorkflowExecution[]> {\n  // Mock workflow list - in production, this would query the orchestrator\n  return [\n    {\n      id: 'workflow-001',\n      workflowName: 'Research Workflow',\n      status: 'running' as const,\n      startedAt: new Date(Date.now() - 120000), // 2 minutes ago\n      progress: { total: 5, completed: 3, failed: 0 },\n      tasks: [],\n    },\n    {\n      id: 'workflow-002',\n      workflowName: 'Implementation Workflow',\n      status: 'completed' as const,\n      startedAt: new Date(Date.now() - 300000), // 5 minutes ago\n      completedAt: new Date(Date.now() - 60000), // 1 minute ago\n      progress: { total: 3, completed: 3, failed: 0 },\n      tasks: [],\n    },\n  ].filter((w) => includeAll || w.status === 'running');\n}\n\nasync function getWorkflowExecution(workflowId: string): Promise<WorkflowExecution> {\n  const workflows = await getRunningWorkflows(true);\n  const workflow = workflows.find((w) => w.id === workflowId || w.id.startsWith(workflowId));\n\n  if (!workflow) {\n    throw new Error(`Workflow '${workflowId}' not found`);\n  }\n\n  return workflow;\n}\n\nfunction hasCircularDependencies(graph: Map<string, string[]>): boolean {\n  const visited = new Set<string>();\n  const recursionStack = new Set<string>();\n\n  function hasCycle(node: string): boolean {\n    if (recursionStack.has(node)) return true;\n    if (visited.has(node)) return false;\n\n    visited.add(node);\n    recursionStack.add(node);\n\n    const dependencies = graph.get(node) || [];\n    for (const dep of dependencies) {\n      if (hasCycle(dep)) return true;\n    }\n\n    recursionStack.delete(node);\n    return false;\n  }\n\n  for (const node of graph.keys()) {\n    if (hasCycle(node)) return true;\n  }\n\n  return false;\n}\n"],"names":["getErrorMessage","Command","promises","fs","chalk","inquirer","Table","generateId","formatDuration","formatStatusIndicator","formatProgressBar","workflowCommand","name","description","action","outputHelp","command","argument","option","workflowFile","options","runWorkflow","validateWorkflow","listWorkflows","workflowId","showWorkflowStatus","stopWorkflow","templateType","generateTemplate","workflow","loadWorkflow","dryRun","validateWorkflowDefinition","console","log","green","variables","vars","JSON","parse","error","Error","message","execution","createExecution","cyan","bold","white","id","tasks","length","watch","executeWorkflowWithWatch","executeWorkflow","red","process","exit","strict","agents","dependencies","depCount","Object","values","flat","workflows","getRunningWorkflows","all","format","stringify","gray","repeat","table","default","head","statusIcon","status","progress","completed","total","progressBar","duration","completedAt","getTime","startedAt","Date","now","push","substring","workflowName","toLocaleTimeString","toString","watchWorkflowStatus","getWorkflowExecution","displayWorkflowStatus","yellow","force","confirmed","prompt","type","blue","templates","research","topic","depth","assignTo","input","depends","data","settings","maxConcurrency","timeout","failurePolicy","implementation","coordination","template","keys","join","outputFile","output","content","writeFile","readFile","endsWith","errors","taskIds","Set","task","has","add","dep","taskIndex","indexOf","depExists","slice","some","t","agentIds","agent","graph","Map","set","hasCircularDependencies","map","taskId","failed","i","taskExec","taskDef","find","Promise","resolve","setTimeout","Math","random","success","failFast","executionPromise","watchInterval","setInterval","displayWorkflowProgress","clearInterval","clear","toLocaleString","assignedAgent","includeAll","filter","w","startsWith","visited","recursionStack","hasCycle","node","get","delete"],"mappings":"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"}