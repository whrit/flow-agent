{"version":3,"sources":["../../../../src/cli/commands/agent-simple.ts"],"sourcesContent":["/**\n * Comprehensive Agent management commands - Simplified version\n */\n\nimport { AgentManager } from '../../agents/agent-manager.js';\nimport { AgentRegistry } from '../../agents/agent-registry.js';\nimport { DistributedMemorySystem } from '../../memory/distributed-memory.js';\nimport { EventBus } from '../../core/event-bus.js';\nimport { Logger } from '../../core/logger.js';\n\n// Global instances\nlet agentManager: AgentManager | null = null;\nlet agentRegistry: AgentRegistry | null = null;\n\n// Initialize agent management system\nasync function initializeAgentSystem(): Promise<{\n  manager: AgentManager;\n  registry: AgentRegistry;\n}> {\n  if (agentManager && agentRegistry) {\n    return { manager: agentManager, registry: agentRegistry };\n  }\n\n  try {\n    const logger = new Logger({\n      level: 'info',\n      format: 'text',\n      destination: 'console',\n    });\n\n    const eventBus = EventBus.getInstance();\n\n    const memorySystem = new DistributedMemorySystem(\n      {\n        namespace: 'agents',\n        distributed: false,\n        consistency: 'eventual',\n        replicationFactor: 1,\n        syncInterval: 60000,\n        maxMemorySize: 100,\n        compressionEnabled: false,\n        encryptionEnabled: false,\n        backupEnabled: true,\n        persistenceEnabled: true,\n        shardingEnabled: false,\n        cacheSize: 50,\n        cacheTtl: 300000,\n      },\n      logger,\n      eventBus,\n    );\n\n    await memorySystem.initialize();\n\n    agentRegistry = new AgentRegistry(memorySystem, 'agents');\n    await agentRegistry.initialize();\n\n    agentManager = new AgentManager(\n      {\n        maxAgents: 50,\n        defaultTimeout: 60000,\n        heartbeatInterval: 15000,\n        healthCheckInterval: 30000,\n        autoRestart: true,\n        resourceLimits: {\n          memory: 1024 * 1024 * 1024, // 1GB\n          cpu: 2.0,\n          disk: 2 * 1024 * 1024 * 1024, // 2GB\n        },\n      },\n      logger,\n      eventBus,\n      memorySystem,\n    );\n\n    await agentManager.initialize();\n\n    return { manager: agentManager, registry: agentRegistry };\n  } catch (error) {\n    throw new Error(\n      `Failed to initialize agent system: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\n// Agent Management Commands\nexport const agentCommands = {\n  async spawn(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const templateName = args[0] || 'researcher';\n      const name = options.name || `${templateName}-${Date.now().toString(36)}`;\n\n      console.log(`üöÄ Creating agent with template: ${templateName}`);\n\n      const agentId = await manager.createAgent(templateName, {\n        name,\n        config: {\n          autonomyLevel: options.autonomy || 0.7,\n          maxConcurrentTasks: options.maxTasks || 5,\n          timeoutThreshold: options.timeout || 300000,\n        },\n      });\n\n      if (options.start !== false) {\n        console.log('‚ö° Starting agent...');\n        await manager.startAgent(agentId);\n      }\n\n      console.log('‚úÖ Agent created successfully!');\n      console.log(`   ID: ${agentId}`);\n      console.log(`   Name: ${name}`);\n      console.log(`   Template: ${templateName}`);\n    } catch (error) {\n      console.error(\n        '‚ùå Error creating agent:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async list(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      let agents = manager.getAllAgents();\n\n      // Apply filters\n      if (options.type) {\n        agents = agents.filter((agent) => agent.type === options.type);\n      }\n\n      if (options.status) {\n        agents = agents.filter((agent) => agent.status === options.status);\n      }\n\n      if (options.unhealthy) {\n        agents = agents.filter((agent) => agent.health < 0.7);\n      }\n\n      if (agents.length === 0) {\n        console.log('üìã No agents found matching the criteria');\n        return;\n      }\n\n      console.log(`ü§ñ Agent List (${agents.length} agents)`);\n      console.log('='.repeat(60));\n\n      for (const agent of agents) {\n        const healthEmoji = agent.health > 0.8 ? 'üü¢' : agent.health > 0.5 ? 'üü°' : 'üî¥';\n        const statusEmoji =\n          agent.status === 'idle'\n            ? '‚≠ï'\n            : agent.status === 'busy'\n              ? 'üîµ'\n              : agent.status === 'error'\n                ? 'üî¥'\n                : '‚ö™';\n\n        console.log(`${healthEmoji} ${agent.name}`);\n        console.log(`   ID: ${agent.id.id.slice(-8)}`);\n        console.log(`   Type: ${agent.type}`);\n        console.log(`   Status: ${statusEmoji} ${agent.status.toUpperCase()}`);\n        console.log(`   Health: ${Math.round(agent.health * 100)}%`);\n        console.log(`   Workload: ${agent.workload} tasks`);\n\n        if (options.detailed) {\n          console.log(`   Tasks Completed: ${agent.metrics.tasksCompleted}`);\n          console.log(`   Success Rate: ${Math.round(agent.metrics.successRate * 100)}%`);\n          console.log(`   Memory: ${Math.round(agent.metrics.memoryUsage / 1024 / 1024)}MB`);\n        }\n\n        console.log('');\n      }\n\n      // System stats\n      const stats = manager.getSystemStats();\n      console.log('üìä System Overview:');\n      console.log(\n        `   Total: ${stats.totalAgents} | Active: ${stats.activeAgents} | Healthy: ${stats.healthyAgents}`,\n      );\n      console.log(`   Average Health: ${Math.round(stats.averageHealth * 100)}%`);\n    } catch (error) {\n      console.error(\n        '‚ùå Error listing agents:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async info(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const agentId = args[0];\n      if (!agentId) {\n        console.error('‚ùå Agent ID is required');\n        console.log('Usage: agent info <agent-id>');\n        return;\n      }\n\n      const agent = manager.getAgent(agentId);\n      if (!agent) {\n        console.error(`‚ùå Agent '${agentId}' not found`);\n\n        // Suggest similar agents\n        const allAgents = manager.getAllAgents();\n        const similar = allAgents.filter(\n          (a) => a.id.id.includes(agentId) || a.name.toLowerCase().includes(agentId.toLowerCase()),\n        );\n\n        if (similar.length > 0) {\n          console.log('\\\\nDid you mean one of these agents?');\n          similar.forEach((a) => console.log(`  ${a.id.id} - ${a.name}`));\n        }\n        return;\n      }\n\n      console.log(`ü§ñ Agent Information: ${agent.name}`);\n      console.log('='.repeat(50));\n\n      // Basic info\n      console.log(`ID: ${agent.id.id}`);\n      console.log(`Name: ${agent.name}`);\n      console.log(`Type: ${agent.type}`);\n      console.log(`Status: ${agent.status.toUpperCase()}`);\n      console.log(`Health: ${Math.round(agent.health * 100)}%`);\n      console.log(`Workload: ${agent.workload} active tasks`);\n\n      // Configuration\n      console.log('\\\\n‚öôÔ∏è Configuration:');\n      console.log(`  Autonomy Level: ${agent.config.autonomyLevel}`);\n      console.log(`  Max Concurrent Tasks: ${agent.config.maxConcurrentTasks}`);\n      console.log(`  Timeout Threshold: ${agent.config.timeoutThreshold}ms`);\n      console.log(`  Runtime: ${agent.environment.runtime}`);\n\n      // Metrics\n      console.log('\\\\nüìä Performance Metrics:');\n      console.log(`  Tasks Completed: ${agent.metrics.tasksCompleted}`);\n      console.log(`  Tasks Failed: ${agent.metrics.tasksFailed}`);\n      console.log(`  Success Rate: ${Math.round(agent.metrics.successRate * 100)}%`);\n      console.log(`  Average Execution Time: ${agent.metrics.averageExecutionTime}ms`);\n      console.log(`  Memory Usage: ${Math.round(agent.metrics.memoryUsage / 1024 / 1024)}MB`);\n      console.log(`  CPU Usage: ${Math.round(agent.metrics.cpuUsage * 100)}%`);\n\n      // Health details\n      const health = manager.getAgentHealth(agentId);\n      if (health) {\n        console.log('\\\\nüè• Health Details:');\n        console.log(`  Responsiveness: ${Math.round(health.components.responsiveness * 100)}%`);\n        console.log(`  Performance: ${Math.round(health.components.performance * 100)}%`);\n        console.log(`  Reliability: ${Math.round(health.components.reliability * 100)}%`);\n        console.log(`  Resource Usage: ${Math.round(health.components.resourceUsage * 100)}%`);\n\n        if (health.issues.length > 0) {\n          console.log('\\\\n‚ö†Ô∏è Active Issues:');\n          health.issues.forEach((issue, index) => {\n            console.log(`  ${index + 1}. [${issue.severity.toUpperCase()}] ${issue.message}`);\n          });\n        }\n      }\n\n      // Capabilities\n      console.log('\\\\nüõ†Ô∏è Capabilities:');\n      console.log(`  Code Generation: ${agent.capabilities.codeGeneration ? '‚úÖ' : '‚ùå'}`);\n      console.log(`  Code Review: ${agent.capabilities.codeReview ? '‚úÖ' : '‚ùå'}`);\n      console.log(`  Testing: ${agent.capabilities.testing ? '‚úÖ' : '‚ùå'}`);\n      console.log(`  Research: ${agent.capabilities.research ? '‚úÖ' : '‚ùå'}`);\n      console.log(`  Web Search: ${agent.capabilities.webSearch ? '‚úÖ' : '‚ùå'}`);\n\n      if (agent.capabilities.languages.length > 0) {\n        console.log(`  Languages: ${agent.capabilities.languages.join(', ')}`);\n      }\n\n      if (agent.capabilities.frameworks.length > 0) {\n        console.log(`  Frameworks: ${agent.capabilities.frameworks.join(', ')}`);\n      }\n    } catch (error) {\n      console.error(\n        '‚ùå Error getting agent info:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async terminate(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const agentId = args[0];\n      if (!agentId) {\n        console.error('‚ùå Agent ID is required');\n        console.log('Usage: agent terminate <agent-id>');\n        return;\n      }\n\n      const agent = manager.getAgent(agentId);\n      if (!agent) {\n        console.error(`‚ùå Agent '${agentId}' not found`);\n        return;\n      }\n\n      console.log(`üõë Terminating agent: ${agent.name} (${agentId})`);\n\n      const reason = options.reason || 'user_request';\n\n      // Graceful or force termination\n      if (options.force) {\n        console.log('‚ö° Force terminating agent...');\n      } else {\n        console.log('üîÑ Gracefully shutting down agent...');\n      }\n\n      await manager.stopAgent(agentId, reason);\n\n      if (options.cleanup) {\n        console.log('üßπ Cleaning up agent data...');\n        await manager.removeAgent(agentId);\n      }\n\n      console.log('‚úÖ Agent terminated successfully');\n\n      // Show final stats\n      if (agent.metrics) {\n        console.log('\\\\nüìà Final Statistics:');\n        console.log(`  Tasks Completed: ${agent.metrics.tasksCompleted}`);\n        console.log(`  Success Rate: ${Math.round(agent.metrics.successRate * 100)}%`);\n        console.log(`  Total Uptime: ${Math.round(agent.metrics.totalUptime / 1000)}s`);\n      }\n    } catch (error) {\n      console.error(\n        '‚ùå Error terminating agent:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async start(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const agentId = args[0];\n      if (!agentId) {\n        console.error('‚ùå Agent ID is required');\n        console.log('Usage: agent start <agent-id>');\n        return;\n      }\n\n      console.log(`üöÄ Starting agent ${agentId}...`);\n      await manager.startAgent(agentId);\n      console.log('‚úÖ Agent started successfully');\n    } catch (error) {\n      console.error(\n        '‚ùå Error starting agent:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async restart(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const agentId = args[0];\n      if (!agentId) {\n        console.error('‚ùå Agent ID is required');\n        console.log('Usage: agent restart <agent-id>');\n        return;\n      }\n\n      console.log(`üîÑ Restarting agent ${agentId}...`);\n      const reason = options.reason || 'manual_restart';\n      await manager.restartAgent(agentId, reason);\n      console.log('‚úÖ Agent restarted successfully');\n    } catch (error) {\n      console.error(\n        '‚ùå Error restarting agent:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async health(args: string[], options: Record<string, any> = {}): Promise<void> {\n    try {\n      const { manager } = await initializeAgentSystem();\n\n      const agents = manager.getAllAgents();\n      const stats = manager.getSystemStats();\n      const threshold = options.threshold || 0.7;\n\n      console.log('üè• Agent Health Dashboard');\n      console.log('='.repeat(50));\n      console.log(`Time: ${new Date().toLocaleString()}`);\n      console.log(\n        `Total Agents: ${stats.totalAgents} | Active: ${stats.activeAgents} | Healthy: ${stats.healthyAgents}`,\n      );\n      console.log(`Average Health: ${Math.round(stats.averageHealth * 100)}%`);\n\n      const unhealthyAgents = agents.filter((a) => a.health < threshold);\n      if (unhealthyAgents.length > 0) {\n        console.log(\n          `\\\\n‚ö†Ô∏è ${unhealthyAgents.length} agents below health threshold (${Math.round(threshold * 100)}%):`,\n        );\n        unhealthyAgents.forEach((agent) => {\n          const healthPercent = Math.round(agent.health * 100);\n          console.log(`  üî¥ ${agent.name}: ${healthPercent}% (${agent.status})`);\n        });\n      } else {\n        console.log('\\\\n‚úÖ All agents are healthy!');\n      }\n\n      // Resource utilization\n      console.log('\\\\nüíª Resource Utilization:');\n      console.log(`  CPU: ${Math.round(stats.resourceUtilization.cpu * 100)}%`);\n      console.log(`  Memory: ${Math.round(stats.resourceUtilization.memory / 1024 / 1024)}MB`);\n      console.log(`  Disk: ${Math.round(stats.resourceUtilization.disk / 1024 / 1024)}MB`);\n    } catch (error) {\n      console.error(\n        '‚ùå Error getting health status:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  },\n\n  async help(): Promise<void> {\n    console.log('ü§ñ Agent Management Commands:');\n    console.log('');\n    console.log('Available commands:');\n    console.log('  spawn <template>     - Create and start new agents');\n    console.log('  list                 - Display all agents with status');\n    console.log('  info <agent-id>      - Get detailed agent information');\n    console.log('  terminate <agent-id> - Safely terminate agents');\n    console.log('  start <agent-id>     - Start a created agent');\n    console.log('  restart <agent-id>   - Restart an agent');\n    console.log('  health               - Monitor agent health');\n    console.log('');\n    console.log('Common options:');\n    console.log('  --type <type>        - Filter by agent type');\n    console.log('  --status <status>    - Filter by agent status');\n    console.log('  --detailed           - Show detailed information');\n    console.log('  --force              - Force operation');\n    console.log('  --cleanup            - Clean up data after operation');\n    console.log('');\n    console.log('Examples:');\n    console.log('  agent spawn researcher --name \"research-bot\"');\n    console.log('  agent list --type researcher --detailed');\n    console.log('  agent info agent-123');\n    console.log('  agent terminate agent-123 --cleanup');\n    console.log('  agent health --threshold 0.8');\n  },\n};\n\n// Export individual command functions for use in CLI\nexport const {\n  spawn: spawnAgent,\n  list: listAgents,\n  info: agentInfo,\n  terminate: terminateAgent,\n  start: startAgent,\n  restart: restartAgent,\n  health: agentHealth,\n} = agentCommands;\n"],"names":["AgentManager","AgentRegistry","DistributedMemorySystem","EventBus","Logger","agentManager","agentRegistry","initializeAgentSystem","manager","registry","logger","level","format","destination","eventBus","getInstance","memorySystem","namespace","distributed","consistency","replicationFactor","syncInterval","maxMemorySize","compressionEnabled","encryptionEnabled","backupEnabled","persistenceEnabled","shardingEnabled","cacheSize","cacheTtl","initialize","maxAgents","defaultTimeout","heartbeatInterval","healthCheckInterval","autoRestart","resourceLimits","memory","cpu","disk","error","Error","message","String","agentCommands","spawn","args","options","templateName","name","Date","now","toString","console","log","agentId","createAgent","config","autonomyLevel","autonomy","maxConcurrentTasks","maxTasks","timeoutThreshold","timeout","start","startAgent","list","agents","getAllAgents","type","filter","agent","status","unhealthy","health","length","repeat","healthEmoji","statusEmoji","id","slice","toUpperCase","Math","round","workload","detailed","metrics","tasksCompleted","successRate","memoryUsage","stats","getSystemStats","totalAgents","activeAgents","healthyAgents","averageHealth","info","getAgent","allAgents","similar","a","includes","toLowerCase","forEach","environment","runtime","tasksFailed","averageExecutionTime","cpuUsage","getAgentHealth","components","responsiveness","performance","reliability","resourceUsage","issues","issue","index","severity","capabilities","codeGeneration","codeReview","testing","research","webSearch","languages","join","frameworks","terminate","reason","force","stopAgent","cleanup","removeAgent","totalUptime","restart","restartAgent","threshold","toLocaleString","unhealthyAgents","healthPercent","resourceUtilization","help","spawnAgent","listAgents","agentInfo","terminateAgent","agentHealth"],"mappings":"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"}