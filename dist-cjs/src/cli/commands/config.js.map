{"version":3,"sources":["../../../../src/cli/commands/config.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { ConfigManager } from '../../core/config.js';\n\nconst configManager = ConfigManager.getInstance();\n\nexport const configCommand = new Command('config').description('Configuration management commands');\n\n// Get command\nconfigCommand\n  .command('get')\n  .arguments('<key>')\n  .description('Get configuration value')\n  .action(async (key: string) => {\n    try {\n      const value = configManager.getValue(key);\n      console.log(chalk.green('✓'), `${key}:`, JSON.stringify(value, null, 2));\n    } catch (error) {\n      console.error(chalk.red('Failed to get configuration:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// Set command\nconfigCommand\n  .command('set')\n  .arguments('<key> <value>')\n  .description('Set configuration value')\n  .action(async (key: string, value: string) => {\n    try {\n      let parsedValue: any = value;\n      try {\n        parsedValue = JSON.parse(value);\n      } catch {\n        // Keep as string if not valid JSON\n      }\n\n      await configManager.set(key, parsedValue);\n      console.log(\n        chalk.green('✓'),\n        `Configuration updated: ${key} = ${JSON.stringify(parsedValue)}`,\n      );\n    } catch (error) {\n      console.error(chalk.red('Failed to set configuration:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// List command\nconfigCommand\n  .command('list')\n  .description('List all configuration values')\n  .option('--json', 'Output as JSON')\n  .action(async (options: any) => {\n    try {\n      const config = await configManager.getAll();\n\n      if (options.json) {\n        console.log(JSON.stringify(config, null, 2));\n      } else {\n        console.log(chalk.cyan.bold('Configuration:'));\n        console.log('─'.repeat(40));\n        for (const [key, value] of Object.entries(config)) {\n          console.log(`${chalk.yellow(key)}: ${JSON.stringify(value)}`);\n        }\n      }\n    } catch (error) {\n      console.error(chalk.red('Failed to list configuration:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\n// Reset command\nconfigCommand\n  .command('reset')\n  .description('Reset configuration to defaults')\n  .option('--force', 'Skip confirmation')\n  .action(async (options: any) => {\n    try {\n      if (!options.force) {\n        console.log(chalk.yellow('This will reset all configuration to defaults.'));\n        // Note: In a real implementation, you'd want to add a confirmation prompt here\n      }\n\n      await configManager.reset();\n      console.log(chalk.green('✓'), 'Configuration reset to defaults');\n    } catch (error) {\n      console.error(chalk.red('Failed to reset configuration:'), (error as Error).message);\n      process.exit(1);\n    }\n  });\n\nexport default configCommand;\n"],"names":["Command","chalk","ConfigManager","configManager","getInstance","configCommand","description","command","arguments","action","key","value","getValue","console","log","green","JSON","stringify","error","red","message","process","exit","parsedValue","parse","set","option","options","config","getAll","json","cyan","bold","repeat","Object","entries","yellow","force","reset"],"mappings":";AAEA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,OAAOC,WAAW,QAAQ;AAE1B,SAASC,aAAa,QAAQ,uBAAuB;AAErD,MAAMC,gBAAgBD,cAAcE,WAAW;AAE/C,OAAO,MAAMC,gBAAgB,IAAIL,QAAQ,UAAUM,WAAW,CAAC,qCAAqC;AAGpGD,cACGE,OAAO,CAAC,OACRC,SAAS,CAAC,SACVF,WAAW,CAAC,2BACZG,MAAM,CAAC,OAAOC;IACb,IAAI;QACF,MAAMC,QAAQR,cAAcS,QAAQ,CAACF;QACrCG,QAAQC,GAAG,CAACb,MAAMc,KAAK,CAAC,MAAM,GAAGL,IAAI,CAAC,CAAC,EAAEM,KAAKC,SAAS,CAACN,OAAO,MAAM;IACvE,EAAE,OAAOO,OAAO;QACdL,QAAQK,KAAK,CAACjB,MAAMkB,GAAG,CAAC,iCAAiC,AAACD,MAAgBE,OAAO;QACjFC,QAAQC,IAAI,CAAC;IACf;AACF;AAGFjB,cACGE,OAAO,CAAC,OACRC,SAAS,CAAC,iBACVF,WAAW,CAAC,2BACZG,MAAM,CAAC,OAAOC,KAAaC;IAC1B,IAAI;QACF,IAAIY,cAAmBZ;QACvB,IAAI;YACFY,cAAcP,KAAKQ,KAAK,CAACb;QAC3B,EAAE,OAAM,CAER;QAEA,MAAMR,cAAcsB,GAAG,CAACf,KAAKa;QAC7BV,QAAQC,GAAG,CACTb,MAAMc,KAAK,CAAC,MACZ,CAAC,uBAAuB,EAAEL,IAAI,GAAG,EAAEM,KAAKC,SAAS,CAACM,cAAc;IAEpE,EAAE,OAAOL,OAAO;QACdL,QAAQK,KAAK,CAACjB,MAAMkB,GAAG,CAAC,iCAAiC,AAACD,MAAgBE,OAAO;QACjFC,QAAQC,IAAI,CAAC;IACf;AACF;AAGFjB,cACGE,OAAO,CAAC,QACRD,WAAW,CAAC,iCACZoB,MAAM,CAAC,UAAU,kBACjBjB,MAAM,CAAC,OAAOkB;IACb,IAAI;QACF,MAAMC,SAAS,MAAMzB,cAAc0B,MAAM;QAEzC,IAAIF,QAAQG,IAAI,EAAE;YAChBjB,QAAQC,GAAG,CAACE,KAAKC,SAAS,CAACW,QAAQ,MAAM;QAC3C,OAAO;YACLf,QAAQC,GAAG,CAACb,MAAM8B,IAAI,CAACC,IAAI,CAAC;YAC5BnB,QAAQC,GAAG,CAAC,IAAImB,MAAM,CAAC;YACvB,KAAK,MAAM,CAACvB,KAAKC,MAAM,IAAIuB,OAAOC,OAAO,CAACP,QAAS;gBACjDf,QAAQC,GAAG,CAAC,GAAGb,MAAMmC,MAAM,CAAC1B,KAAK,EAAE,EAAEM,KAAKC,SAAS,CAACN,QAAQ;YAC9D;QACF;IACF,EAAE,OAAOO,OAAO;QACdL,QAAQK,KAAK,CAACjB,MAAMkB,GAAG,CAAC,kCAAkC,AAACD,MAAgBE,OAAO;QAClFC,QAAQC,IAAI,CAAC;IACf;AACF;AAGFjB,cACGE,OAAO,CAAC,SACRD,WAAW,CAAC,mCACZoB,MAAM,CAAC,WAAW,qBAClBjB,MAAM,CAAC,OAAOkB;IACb,IAAI;QACF,IAAI,CAACA,QAAQU,KAAK,EAAE;YAClBxB,QAAQC,GAAG,CAACb,MAAMmC,MAAM,CAAC;QAE3B;QAEA,MAAMjC,cAAcmC,KAAK;QACzBzB,QAAQC,GAAG,CAACb,MAAMc,KAAK,CAAC,MAAM;IAChC,EAAE,OAAOG,OAAO;QACdL,QAAQK,KAAK,CAACjB,MAAMkB,GAAG,CAAC,mCAAmC,AAACD,MAAgBE,OAAO;QACnFC,QAAQC,IAAI,CAAC;IACf;AACF;AAEF,eAAejB,cAAc"}