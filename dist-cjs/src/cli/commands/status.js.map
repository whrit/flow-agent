{"version":3,"sources":["../../../../src/cli/commands/status.ts"],"sourcesContent":["import { promises as fs } from 'node:fs';\n/**\n * Status command for Claude-Flow\n */\n\nimport { Command } from '../commander-fix.js';\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport { formatHealthStatus, formatDuration, formatStatusIndicator } from '../formatter.js';\nimport { VERSION } from '../../core/version.js';\nimport { MetricsReader } from '../../utils/metrics-reader.js';\n\nexport const statusCommand = new Command()\n  .name('status')\n  .description('Show Claude-Flow system status')\n  .option('-w, --watch', 'Watch mode - continuously update status')\n  .option('-i, --interval <seconds>', 'Update interval in seconds', '5')\n  .option('-c, --component <name>', 'Show status for specific component')\n  .option('--json', 'Output in JSON format')\n  .action(async (options: any) => {\n    if (options.watch) {\n      await watchStatus(options);\n    } else {\n      await showStatus(options);\n    }\n  });\n\nasync function showStatus(options: any): Promise<void> {\n  try {\n    // In a real implementation, this would connect to the running orchestrator\n    const status = await getSystemStatus();\n\n    if (options.json) {\n      console.log(JSON.stringify(status, null, 2));\n      return;\n    }\n\n    if (options.component) {\n      showComponentStatus(status, options.component);\n    } else {\n      showFullStatus(status);\n    }\n  } catch (error) {\n    if (\n      (error as Error).message.includes('ECONNREFUSED') ||\n      (error as Error).message.includes('connection refused')\n    ) {\n      console.error(chalk.red('✗ Claude-Flow is not running'));\n      console.log(chalk.gray('Start it with: claude-flow start'));\n    } else {\n      console.error(chalk.red('Error getting status:'), (error as Error).message);\n    }\n  }\n}\n\nasync function watchStatus(options: any): Promise<void> {\n  const interval = parseInt(options.interval) * 1000;\n\n  console.log(chalk.cyan('Watching Claude-Flow status...'));\n  console.log(chalk.gray(`Update interval: ${options.interval}s`));\n  console.log(chalk.gray('Press Ctrl+C to stop\\n'));\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // Clear screen and show status\n    console.clear();\n    console.log(chalk.cyan.bold('Claude-Flow Status Monitor'));\n    console.log(chalk.gray(`Last updated: ${new Date().toLocaleTimeString()}\\n`));\n\n    try {\n      await showStatus({ ...options, json: false });\n    } catch (error) {\n      console.error(chalk.red('Status update failed:'), (error as Error).message);\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, interval));\n  }\n}\n\nfunction showFullStatus(status: any): void {\n  // System overview\n  console.log(chalk.cyan.bold('System Overview'));\n  console.log('─'.repeat(50));\n\n  const statusIcon = formatStatusIndicator(status.overall);\n  console.log(\n    `${statusIcon} Overall Status: ${getStatusColor(status.overall)(status.overall.toUpperCase())}`,\n  );\n  console.log(`${chalk.white('Uptime:')} ${formatDuration(status.uptime)}`);\n  console.log(`${chalk.white('Version:')} ${status.version}`);\n  console.log(`${chalk.white('Started:')} ${new Date(status.startTime).toLocaleString()}`);\n  console.log();\n\n  // Components status\n  console.log(chalk.cyan.bold('Components'));\n  console.log('─'.repeat(50));\n\n  const componentRows = [];\n  for (const [name, component] of Object.entries(status.components)) {\n    const comp = component as any;\n    const statusIcon = formatStatusIndicator(comp.status);\n    const statusText = getStatusColor(comp.status)(comp.status.toUpperCase());\n\n    componentRows.push([\n      chalk.white(name),\n      `${statusIcon} ${statusText}`,\n      formatDuration(comp.uptime || 0),\n      comp.details || '-',\n    ]);\n  }\n\n  const componentTable = new Table({\n    head: ['Component', 'Status', 'Uptime', 'Details'],\n  });\n  componentTable.push(...componentRows);\n\n  console.log(componentTable.toString());\n  console.log();\n\n  // Resource usage\n  if (status.resources) {\n    console.log(chalk.cyan.bold('Resource Usage'));\n    console.log('─'.repeat(50));\n\n    const resourceRows = [];\n    for (const [name, resource] of Object.entries(status.resources)) {\n      const res = resource as any;\n      const percentage = ((res.used / res.total) * 100).toFixed(1);\n      const color = getResourceColor(parseFloat(percentage));\n\n      resourceRows.push([\n        chalk.white(name),\n        res.used.toString(),\n        res.total.toString(),\n        color(`${percentage}%`),\n      ]);\n    }\n\n    const resourceTable = new Table({\n      head: ['Resource', 'Used', 'Total', 'Percentage'],\n    });\n    resourceTable.push(...resourceRows);\n\n    console.log(resourceTable.toString());\n    console.log();\n  }\n\n  // Active agents\n  if (status.agents) {\n    console.log(chalk.cyan.bold(`Active Agents (${status.agents.length})`));\n    console.log('─'.repeat(50));\n\n    if (status.agents.length > 0) {\n      const agentRows = [];\n      for (const agent of status.agents) {\n        const statusIcon = formatStatusIndicator(agent.status);\n        const statusText = getStatusColor(agent.status)(agent.status);\n\n        agentRows.push([\n          chalk.gray(agent.id.slice(0, 8)),\n          chalk.white(agent.name),\n          agent.type,\n          `${statusIcon} ${statusText}`,\n          agent.activeTasks.toString(),\n        ]);\n      }\n\n      const agentTable = new Table({\n        head: ['ID', 'Name', 'Type', 'Status', 'Tasks'],\n      });\n      agentTable.push(...agentRows);\n\n      console.log(agentTable.toString());\n    } else {\n      console.log(chalk.gray('No active agents'));\n    }\n    console.log();\n  }\n\n  // Recent tasks\n  if (status.recentTasks) {\n    console.log(chalk.cyan.bold('Recent Tasks'));\n    console.log('─'.repeat(50));\n\n    if (status.recentTasks.length > 0) {\n      const taskRows = [];\n      for (const task of status.recentTasks.slice(0, 10)) {\n        const statusIcon = formatStatusIndicator(task.status);\n        const statusText = getStatusColor(task.status)(task.status);\n\n        taskRows.push([\n          chalk.gray(task.id.slice(0, 8)),\n          task.type,\n          `${statusIcon} ${statusText}`,\n          formatDuration(Date.now() - new Date(task.startTime).getTime()),\n          task.assignedTo ? chalk.gray(task.assignedTo.slice(0, 8)) : '-',\n        ]);\n      }\n\n      const taskTable = new Table({\n        head: ['ID', 'Type', 'Status', 'Duration', 'Agent'],\n      });\n      taskTable.push(...taskRows);\n\n      console.log(taskTable.toString());\n    } else {\n      console.log(chalk.gray('No recent tasks'));\n    }\n  }\n}\n\nfunction showComponentStatus(status: any, componentName: string): void {\n  const component = status.components[componentName];\n\n  if (!component) {\n    console.error(chalk.red(`Component '${componentName}' not found`));\n    console.log(chalk.gray(`Available components: ${Object.keys(status.components).join(', ')}`));\n    return;\n  }\n\n  console.log(chalk.cyan.bold(`Component: ${componentName}`));\n  console.log('─'.repeat(50));\n\n  const statusIcon = formatStatusIndicator(component.status);\n  console.log(\n    `${statusIcon} Status: ${getStatusColor(component.status)(component.status.toUpperCase())}`,\n  );\n  console.log(`${chalk.white('Uptime:')} ${formatDuration(component.uptime || 0)}`);\n\n  if (component.details) {\n    console.log(`${chalk.white('Details:')} ${component.details}`);\n  }\n\n  if (component.metrics) {\n    console.log();\n    console.log(chalk.cyan('Metrics:'));\n\n    const metricRows = [];\n    for (const [name, value] of Object.entries(component.metrics)) {\n      metricRows.push([chalk.white(name), (value as any).toString()]);\n    }\n\n    const metricsTable = new Table({\n      head: ['Metric', 'Value'],\n    });\n    metricsTable.push(...metricRows);\n    console.log(metricsTable.toString());\n  }\n\n  if (component.errors && component.errors.length > 0) {\n    console.log();\n    console.log(chalk.red('Recent Errors:'));\n\n    const errorRows = [];\n    for (const error of component.errors.slice(0, 5)) {\n      errorRows.push([new Date(error.timestamp).toLocaleTimeString(), error.message]);\n    }\n\n    const errorTable = new Table({\n      head: ['Time', 'Error'],\n    });\n    errorTable.push(...errorRows);\n    console.log(errorTable.toString());\n  }\n}\n\nasync function getSystemStatus(): Promise<any> {\n  const reader = new MetricsReader();\n  \n  // Get real metrics from files\n  const [systemMetrics, perfMetrics, agents, recentTasks, overallHealth] = await Promise.all([\n    reader.getSystemMetrics(),\n    reader.getPerformanceMetrics(),\n    reader.getActiveAgents(),\n    reader.getRecentTasks(5),\n    reader.getOverallHealth()\n  ]);\n  \n  // Calculate uptime and memory in MB\n  const uptime = systemMetrics ? systemMetrics.uptime * 1000 : 0; // Convert to ms\n  const memUsedMB = systemMetrics ? Math.round(systemMetrics.memoryUsed / (1024 * 1024)) : 0;\n  const memTotalMB = systemMetrics ? Math.round(systemMetrics.memoryTotal / (1024 * 1024)) : 512;\n  \n  // Determine component health based on metrics\n  const orchestratorStatus = perfMetrics && perfMetrics.totalTasks > 0 ? 'healthy' : 'idle';\n  const agentsStatus = agents.length > 0 ? 'healthy' : 'idle';\n  const memoryStatus = systemMetrics && systemMetrics.memoryUsagePercent < 80 ? 'healthy' : \n                       systemMetrics && systemMetrics.memoryUsagePercent < 90 ? 'warning' : 'error';\n  \n  // Count active agents\n  const activeAgentCount = agents.filter(a => a.status === 'active' || a.status === 'busy').length;\n  \n  return {\n    overall: overallHealth,\n    version: VERSION,\n    uptime: uptime,\n    startTime: Date.now() - uptime,\n    components: {\n      orchestrator: {\n        status: orchestratorStatus,\n        uptime: uptime,\n        details: perfMetrics ? `${perfMetrics.totalTasks} tasks processed` : 'No tasks yet',\n      },\n      agents: {\n        status: agentsStatus,\n        uptime: uptime,\n        details: `${activeAgentCount} active, ${agents.length} total agents`,\n      },\n      memory: {\n        status: memoryStatus,\n        uptime: uptime,\n        details: `Using ${memUsedMB}MB of ${memTotalMB}MB`,\n      },\n    },\n    resources: {\n      memory: {\n        used: memUsedMB,\n        total: memTotalMB,\n      },\n      cpu: {\n        used: systemMetrics ? Math.round(systemMetrics.cpuLoad * 100) : 0,\n        total: 100,\n      },\n    },\n    agents: agents,\n    recentTasks: recentTasks,\n  };\n}\n\nfunction getStatusColor(status: string): (text: string) => string {\n  switch (status.toLowerCase()) {\n    case 'healthy':\n    case 'active':\n    case 'completed':\n      return chalk.green;\n    case 'warning':\n    case 'idle':\n    case 'pending':\n      return chalk.yellow;\n    case 'error':\n    case 'failed':\n      return chalk.red;\n    default:\n      return chalk.gray;\n  }\n}\n\nfunction getResourceColor(percentage: number): (text: string) => string {\n  if (percentage < 50) return chalk.green;\n  if (percentage < 80) return chalk.yellow;\n  return chalk.red;\n}\n"],"names":["Command","chalk","Table","formatDuration","formatStatusIndicator","VERSION","MetricsReader","statusCommand","name","description","option","action","options","watch","watchStatus","showStatus","status","getSystemStatus","json","console","log","JSON","stringify","component","showComponentStatus","showFullStatus","error","message","includes","red","gray","interval","parseInt","cyan","clear","bold","Date","toLocaleTimeString","Promise","resolve","setTimeout","repeat","statusIcon","overall","getStatusColor","toUpperCase","white","uptime","version","startTime","toLocaleString","componentRows","Object","entries","components","comp","statusText","push","details","componentTable","head","toString","resources","resourceRows","resource","res","percentage","used","total","toFixed","color","getResourceColor","parseFloat","resourceTable","agents","length","agentRows","agent","id","slice","type","activeTasks","agentTable","recentTasks","taskRows","task","now","getTime","assignedTo","taskTable","componentName","keys","join","metrics","metricRows","value","metricsTable","errors","errorRows","timestamp","errorTable","reader","systemMetrics","perfMetrics","overallHealth","all","getSystemMetrics","getPerformanceMetrics","getActiveAgents","getRecentTasks","getOverallHealth","memUsedMB","Math","round","memoryUsed","memTotalMB","memoryTotal","orchestratorStatus","totalTasks","agentsStatus","memoryStatus","memoryUsagePercent","activeAgentCount","filter","a","orchestrator","memory","cpu","cpuLoad","toLowerCase","green","yellow"],"mappings":"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"}