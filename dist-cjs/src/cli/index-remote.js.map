{"version":3,"sources":["../../../src/cli/index-remote.ts"],"sourcesContent":["#!/usr/bin/env -S deno run --allow-all\n/**\n * Claude-Flow CLI entry point - Remote execution friendly version\n * This version can be run directly from GitHub\n */\n\nimport { VERSION } from '../core/version.js';\n\n// Simple color functions\nconst chalk = {\n  red: (text: string) => `\\x1b[31m${text}\\x1b[0m`,\n  green: (text: string) => `\\x1b[32m${text}\\x1b[0m`,\n  yellow: (text: string) => `\\x1b[33m${text}\\x1b[0m`,\n  blue: (text: string) => `\\x1b[34m${text}\\x1b[0m`,\n  gray: (text: string) => `\\x1b[90m${text}\\x1b[0m`,\n  bold: (text: string) => `\\x1b[1m${text}\\x1b[0m`,\n};\n\nfunction printHelp() {\n  console.log(`\n🧠 Claude-Flow v${VERSION} - Advanced AI Agent Orchestration System\n\nUSAGE:\n  claude-flow [COMMAND] [OPTIONS]\n\nCOMMANDS:\n  init                  Initialize Claude Code integration files\n  start                 Start the orchestration system\n  agent                 Manage agents (spawn, list, terminate, info)\n  task                  Manage tasks (create, list, status, cancel, workflow)\n  memory               Manage memory (query, export, import, stats, cleanup)\n  mcp                  Manage MCP server (status, tools, start, stop)\n  config               Manage configuration (show, get, set, init, validate)\n  status               Show system status\n  monitor              Monitor system in real-time\n  session              Manage terminal sessions\n  workflow             Execute workflow files\n  claude               Spawn Claude instances with specific configurations\n  version              Show version information\n  help                 Show this help message\n\nOPTIONS:\n  -c, --config <path>   Path to configuration file\n  -v, --verbose         Enable verbose logging\n  --help                Show help for any command\n\nEXAMPLES:\n  claude-flow init                    # Initialize Claude Code integration\n  claude-flow start                   # Start orchestration system\n  claude-flow agent spawn researcher  # Spawn a research agent\n  claude-flow task create research \"Analyze authentication patterns\"\n  claude-flow memory store key \"value\"\n  claude-flow status                  # Check system status\n\nFor more info: https://github.com/ruvnet/claude-code-flow\n`);\n}\n\nfunction printSuccess(message: string) {\n  console.log(chalk.green('✅ ' + message));\n}\n\nfunction printError(message: string) {\n  console.log(chalk.red('❌ ' + message));\n}\n\nfunction printWarning(message: string) {\n  console.log(chalk.yellow('⚠️  ' + message));\n}\n\nasync function main() {\n  const args = Deno.args;\n  const command = args[0] || 'help';\n  const subArgs = args.slice(1);\n\n  switch (command) {\n    case '--help':\n    case '-h':\n    case 'help':\n      printHelp();\n      break;\n\n    case '--version':\n    case '-v':\n    case 'version':\n      console.log(`Claude-Flow v${VERSION}`);\n      break;\n\n    case 'init':\n      printSuccess('Initializing Claude Code integration files...');\n      console.log('📝 This command would create:');\n      console.log('   - CLAUDE.md (Claude Code configuration)');\n      console.log('   - memory-bank.md (Memory system documentation)');\n      console.log('   - coordination.md (Agent coordination documentation)');\n      console.log('   - Memory folder structure');\n      console.log('\\n💡 To run locally, clone the repo and use:');\n      console.log('   git clone https://github.com/ruvnet/claude-code-flow.git');\n      console.log('   cd claude-code-flow');\n      console.log('   npm install -g claude-flow');\n      console.log('   claude-flow init');\n      break;\n\n    case 'install':\n      console.log(chalk.blue('📦 Installing Claude-Flow...'));\n      console.log('\\nRun these commands to install:');\n      console.log(chalk.gray('  # Using npm (recommended)'));\n      console.log('  npm install -g claude-flow');\n      console.log('');\n      console.log(chalk.gray('  # Or using Deno'));\n      console.log('  deno install --allow-all --name claude-flow \\\\');\n      console.log(\n        '    https://raw.githubusercontent.com/ruvnet/claude-code-flow/main/src/cli/index.ts',\n      );\n      console.log('');\n      console.log(chalk.gray('  # Or clone and build from source'));\n      console.log('  git clone https://github.com/ruvnet/claude-code-flow.git');\n      console.log('  cd claude-code-flow');\n      console.log('  deno task build');\n      break;\n\n    default:\n      printWarning(`Command '${command}' requires local installation.`);\n      console.log('\\n📥 To use all features, install Claude-Flow:');\n      console.log('   npm install -g claude-flow');\n      console.log('\\n🌐 Or run directly with Deno:');\n      console.log('   deno install --allow-all --name claude-flow \\\\');\n      console.log(\n        '     https://raw.githubusercontent.com/ruvnet/claude-code-flow/main/src/cli/index.ts',\n      );\n      console.log('\\n📚 Documentation: https://github.com/ruvnet/claude-code-flow');\n      console.log('💬 Issues: https://github.com/ruvnet/claude-code-flow/issues');\n      break;\n  }\n}\n\nif (import.meta.url === `file://${Deno.execPath()}`) {\n  main().catch((error) => {\n    printError(`Error: ${error instanceof Error ? error.message : String(error)}`);\n    process.exit(1);\n  });\n}\n"],"names":["VERSION","chalk","red","text","green","yellow","blue","gray","bold","printHelp","console","log","printSuccess","message","printError","printWarning","main","args","Deno","command","subArgs","slice","url","execPath","catch","error","Error","String","process","exit"],"mappings":";AAMA,SAASA,OAAO,QAAQ,qBAAqB;AAG7C,MAAMC,QAAQ;IACZC,KAAK,CAACC,OAAiB,CAAC,QAAQ,EAAEA,KAAK,OAAO,CAAC;IAC/CC,OAAO,CAACD,OAAiB,CAAC,QAAQ,EAAEA,KAAK,OAAO,CAAC;IACjDE,QAAQ,CAACF,OAAiB,CAAC,QAAQ,EAAEA,KAAK,OAAO,CAAC;IAClDG,MAAM,CAACH,OAAiB,CAAC,QAAQ,EAAEA,KAAK,OAAO,CAAC;IAChDI,MAAM,CAACJ,OAAiB,CAAC,QAAQ,EAAEA,KAAK,OAAO,CAAC;IAChDK,MAAM,CAACL,OAAiB,CAAC,OAAO,EAAEA,KAAK,OAAO,CAAC;AACjD;AAEA,SAASM;IACPC,QAAQC,GAAG,CAAC,CAAC;gBACC,EAAEX,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmC1B,CAAC;AACD;AAEA,SAASY,aAAaC,OAAe;IACnCH,QAAQC,GAAG,CAACV,MAAMG,KAAK,CAAC,OAAOS;AACjC;AAEA,SAASC,WAAWD,OAAe;IACjCH,QAAQC,GAAG,CAACV,MAAMC,GAAG,CAAC,OAAOW;AAC/B;AAEA,SAASE,aAAaF,OAAe;IACnCH,QAAQC,GAAG,CAACV,MAAMI,MAAM,CAAC,SAASQ;AACpC;AAEA,eAAeG;IACb,MAAMC,OAAOC,KAAKD,IAAI;IACtB,MAAME,UAAUF,IAAI,CAAC,EAAE,IAAI;IAC3B,MAAMG,UAAUH,KAAKI,KAAK,CAAC;IAE3B,OAAQF;QACN,KAAK;QACL,KAAK;QACL,KAAK;YACHV;YACA;QAEF,KAAK;QACL,KAAK;QACL,KAAK;YACHC,QAAQC,GAAG,CAAC,CAAC,aAAa,EAAEX,SAAS;YACrC;QAEF,KAAK;YACHY,aAAa;YACbF,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ;QAEF,KAAK;YACHD,QAAQC,GAAG,CAACV,MAAMK,IAAI,CAAC;YACvBI,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAACV,MAAMM,IAAI,CAAC;YACvBG,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAACV,MAAMM,IAAI,CAAC;YACvBG,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CACT;YAEFD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAACV,MAAMM,IAAI,CAAC;YACvBG,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ;QAEF;YACEI,aAAa,CAAC,SAAS,EAAEI,QAAQ,8BAA8B,CAAC;YAChET,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CACT;YAEFD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZ;IACJ;AACF;AAEA,IAAI,YAAYW,GAAG,KAAK,CAAC,OAAO,EAAEJ,KAAKK,QAAQ,IAAI,EAAE;IACnDP,OAAOQ,KAAK,CAAC,CAACC;QACZX,WAAW,CAAC,OAAO,EAAEW,iBAAiBC,QAAQD,MAAMZ,OAAO,GAAGc,OAAOF,QAAQ;QAC7EG,QAAQC,IAAI,CAAC;IACf;AACF"}