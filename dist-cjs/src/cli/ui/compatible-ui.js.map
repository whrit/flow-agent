{"version":3,"sources":["../../../../src/cli/ui/compatible-ui.ts"],"sourcesContent":["/**\n * Compatible Terminal UI - Works without raw mode\n * Designed for environments that don't support stdin raw mode\n */\n\nimport readline from 'readline';\nimport chalk from 'chalk';\n\nexport interface UIProcess {\n  id: string;\n  name: string;\n  status: 'running' | 'stopped' | 'starting' | 'stopping' | 'error' | 'crashed';\n  type: string;\n  pid?: number;\n  startTime?: number;\n  metrics?: {\n    cpu?: number;\n    memory?: number;\n    restarts?: number;\n    lastError?: string;\n  };\n}\n\nexport interface UISystemStats {\n  totalProcesses: number;\n  runningProcesses: number;\n  errorProcesses: number;\n}\n\nexport class CompatibleUI {\n  private processes: UIProcess[] = [];\n  private running = false;\n  private rl: readline.Interface;\n\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      terminal: false, // Don't require raw mode\n    });\n  }\n\n  async start(): Promise<void> {\n    this.running = true;\n\n    // Initial render\n    this.render();\n\n    // Setup command loop\n    while (this.running) {\n      const command = await this.promptCommand();\n      await this.handleCommand(command);\n    }\n  }\n\n  stop(): void {\n    this.running = false;\n    this.rl.close();\n    console.clear();\n  }\n\n  updateProcesses(processes: UIProcess[]): void {\n    this.processes = processes;\n    if (this.running) {\n      this.render();\n    }\n  }\n\n  private async promptCommand(): Promise<string> {\n    return new Promise((resolve) => {\n      this.rl.question('\\nCommand: ', (answer) => {\n        resolve(answer.trim());\n      });\n    });\n  }\n\n  private async handleCommand(input: string): Promise<void> {\n    switch (input.toLowerCase()) {\n      case 'q':\n      case 'quit':\n      case 'exit':\n        await this.handleExit();\n        break;\n\n      case 'r':\n      case 'refresh':\n        this.render();\n        break;\n\n      case 'h':\n      case 'help':\n      case '?':\n        this.showHelp();\n        break;\n\n      case 's':\n      case 'status':\n        this.showStatus();\n        break;\n\n      case 'l':\n      case 'list':\n        this.showProcessList();\n        break;\n\n      default:\n        // Check if it's a number (process selection)\n        const num = parseInt(input);\n        if (!isNaN(num) && num >= 1 && num <= this.processes.length) {\n          await this.showProcessDetails(this.processes[num - 1]);\n        } else {\n          console.log(chalk.yellow('Invalid command. Type \"h\" for help.'));\n        }\n        break;\n    }\n  }\n\n  private render(): void {\n    console.clear();\n    const stats = this.getSystemStats();\n\n    // Header\n    console.log(chalk.cyan.bold('🧠 Claude-Flow System Monitor'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    // System stats\n    console.log(\n      chalk.white('System Status:'),\n      chalk.green(`${stats.runningProcesses}/${stats.totalProcesses} running`),\n    );\n\n    if (stats.errorProcesses > 0) {\n      console.log(chalk.red(`⚠️  ${stats.errorProcesses} processes with errors`));\n    }\n\n    console.log();\n\n    // Process list\n    console.log(chalk.white.bold('Processes:'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    if (this.processes.length === 0) {\n      console.log(chalk.gray('No processes configured'));\n    } else {\n      this.processes.forEach((process, index) => {\n        const num = `[${index + 1}]`.padEnd(4);\n        const status = this.getStatusDisplay(process.status);\n        const name = process.name.padEnd(25);\n\n        console.log(`${chalk.gray(num)} ${status} ${chalk.white(name)}`);\n\n        if (process.metrics?.lastError) {\n          console.log(chalk.red(`       Error: ${process.metrics.lastError}`));\n        }\n      });\n    }\n\n    // Footer\n    console.log(chalk.gray('─'.repeat(60)));\n    console.log(\n      chalk.gray(\n        'Commands: [1-9] Process details [s] Status [l] List [r] Refresh [h] Help [q] Quit',\n      ),\n    );\n  }\n\n  private showStatus(): void {\n    const stats = this.getSystemStats();\n\n    console.log();\n    console.log(chalk.cyan.bold('📊 System Status Details'));\n    console.log(chalk.gray('─'.repeat(40)));\n    console.log(chalk.white('Total Processes:'), stats.totalProcesses);\n    console.log(chalk.white('Running:'), chalk.green(stats.runningProcesses));\n    console.log(\n      chalk.white('Stopped:'),\n      chalk.gray(stats.totalProcesses - stats.runningProcesses - stats.errorProcesses),\n    );\n    console.log(chalk.white('Errors:'), chalk.red(stats.errorProcesses));\n    console.log(chalk.white('System Load:'), this.getSystemLoad());\n    console.log(chalk.white('Uptime:'), this.getSystemUptime());\n  }\n\n  private showProcessList(): void {\n    console.log();\n    console.log(chalk.cyan.bold('📋 Process List'));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    if (this.processes.length === 0) {\n      console.log(chalk.gray('No processes configured'));\n      return;\n    }\n\n    this.processes.forEach((process, index) => {\n      console.log(\n        `${chalk.gray(`[${index + 1}]`)} ${this.getStatusDisplay(process.status)} ${chalk.white.bold(process.name)}`,\n      );\n      console.log(chalk.gray(`    Type: ${process.type}`));\n\n      if (process.pid) {\n        console.log(chalk.gray(`    PID: ${process.pid}`));\n      }\n\n      if (process.startTime) {\n        const uptime = Date.now() - process.startTime;\n        console.log(chalk.gray(`    Uptime: ${this.formatUptime(uptime)}`));\n      }\n\n      if (process.metrics) {\n        if (process.metrics.cpu !== undefined) {\n          console.log(chalk.gray(`    CPU: ${process.metrics.cpu.toFixed(1)}%`));\n        }\n        if (process.metrics.memory !== undefined) {\n          console.log(chalk.gray(`    Memory: ${process.metrics.memory.toFixed(0)} MB`));\n        }\n      }\n\n      console.log();\n    });\n  }\n\n  private async showProcessDetails(process: UIProcess): Promise<void> {\n    console.log();\n    console.log(chalk.cyan.bold(`📋 Process Details: ${process.name}`));\n    console.log(chalk.gray('─'.repeat(60)));\n\n    console.log(chalk.white('ID:'), process.id);\n    console.log(chalk.white('Type:'), process.type);\n    console.log(chalk.white('Status:'), this.getStatusDisplay(process.status), process.status);\n\n    if (process.pid) {\n      console.log(chalk.white('PID:'), process.pid);\n    }\n\n    if (process.startTime) {\n      const uptime = Date.now() - process.startTime;\n      console.log(chalk.white('Uptime:'), this.formatUptime(uptime));\n    }\n\n    if (process.metrics) {\n      console.log();\n      console.log(chalk.white.bold('Metrics:'));\n      if (process.metrics.cpu !== undefined) {\n        console.log(chalk.white('CPU:'), `${process.metrics.cpu.toFixed(1)}%`);\n      }\n      if (process.metrics.memory !== undefined) {\n        console.log(chalk.white('Memory:'), `${process.metrics.memory.toFixed(0)} MB`);\n      }\n      if (process.metrics.restarts !== undefined) {\n        console.log(chalk.white('Restarts:'), process.metrics.restarts);\n      }\n      if (process.metrics.lastError) {\n        console.log(chalk.red('Last Error:'), process.metrics.lastError);\n      }\n    }\n  }\n\n  private getStatusDisplay(status: string): string {\n    switch (status) {\n      case 'running':\n        return chalk.green('●');\n      case 'stopped':\n        return chalk.gray('○');\n      case 'starting':\n        return chalk.yellow('◐');\n      case 'stopping':\n        return chalk.yellow('◑');\n      case 'error':\n        return chalk.red('✗');\n      case 'crashed':\n        return chalk.red('☠');\n      default:\n        return chalk.gray('?');\n    }\n  }\n\n  private getSystemStats(): UISystemStats {\n    return {\n      totalProcesses: this.processes.length,\n      runningProcesses: this.processes.filter((p) => p.status === 'running').length,\n      errorProcesses: this.processes.filter((p) => p.status === 'error' || p.status === 'crashed')\n        .length,\n    };\n  }\n\n  private getSystemLoad(): string {\n    // Simulate system load\n    return '0.45, 0.52, 0.48';\n  }\n\n  private getSystemUptime(): string {\n    const uptime = process.uptime() * 1000;\n    return this.formatUptime(uptime);\n  }\n\n  private formatUptime(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days}d ${hours % 24}h`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  private showHelp(): void {\n    console.log();\n    console.log(chalk.cyan.bold('🧠 Claude-Flow System Monitor - Help'));\n    console.log(chalk.gray('─'.repeat(60)));\n    console.log();\n    console.log(chalk.white.bold('Commands:'));\n    console.log('  1-9     - Show process details by number');\n    console.log('  s       - Show system status');\n    console.log('  l       - List all processes');\n    console.log('  r       - Refresh display');\n    console.log('  h/?     - Show this help');\n    console.log('  q       - Quit');\n    console.log();\n    console.log(chalk.white.bold('Features:'));\n    console.log('  • Non-interactive mode (works in any terminal)');\n    console.log('  • Real-time process monitoring');\n    console.log('  • System statistics');\n    console.log('  • Compatible with VS Code, CI/CD, containers');\n  }\n\n  private async handleExit(): Promise<void> {\n    const runningProcesses = this.processes.filter((p) => p.status === 'running');\n\n    if (runningProcesses.length > 0) {\n      console.log();\n      console.log(chalk.yellow(`⚠️  ${runningProcesses.length} processes are still running.`));\n      console.log('These processes will continue running in the background.');\n      console.log('Use the main CLI to stop them if needed.');\n    }\n\n    this.stop();\n  }\n}\n\n// Factory function to create UI instances\nexport function createCompatibleUI(): CompatibleUI {\n  return new CompatibleUI();\n}\n\n// Check if raw mode is supported\nexport function isRawModeSupported(): boolean {\n  try {\n    return process.stdin.isTTY && typeof process.stdin.setRawMode === 'function';\n  } catch {\n    return false;\n  }\n}\n\n// Fallback UI launcher that chooses the best available UI\nexport async function launchUI(): Promise<void> {\n  const ui = createCompatibleUI();\n\n  // Mock some example processes for demonstration\n  const mockProcesses: UIProcess[] = [\n    {\n      id: 'orchestrator',\n      name: 'Orchestrator Engine',\n      status: 'running',\n      type: 'core',\n      pid: 12345,\n      startTime: Date.now() - 30000,\n      metrics: { cpu: 2.1, memory: 45.2, restarts: 0 },\n    },\n    {\n      id: 'memory-manager',\n      name: 'Memory Manager',\n      status: 'running',\n      type: 'service',\n      pid: 12346,\n      startTime: Date.now() - 25000,\n      metrics: { cpu: 0.8, memory: 12.5, restarts: 0 },\n    },\n    {\n      id: 'mcp-server',\n      name: 'MCP Server',\n      status: 'stopped',\n      type: 'server',\n      metrics: { restarts: 1 },\n    },\n  ];\n\n  ui.updateProcesses(mockProcesses);\n\n  console.log(chalk.green('✅ Starting Claude-Flow UI (compatible mode)'));\n  console.log(chalk.gray('Note: Using compatible UI mode for broader terminal support'));\n  console.log();\n\n  await ui.start();\n}\n"],"names":["readline","chalk","CompatibleUI","processes","running","rl","createInterface","input","process","stdin","output","stdout","terminal","start","render","command","promptCommand","handleCommand","stop","close","console","clear","updateProcesses","Promise","resolve","question","answer","trim","toLowerCase","handleExit","showHelp","showStatus","showProcessList","num","parseInt","isNaN","length","showProcessDetails","log","yellow","stats","getSystemStats","cyan","bold","gray","repeat","white","green","runningProcesses","totalProcesses","errorProcesses","red","forEach","index","padEnd","status","getStatusDisplay","name","metrics","lastError","getSystemLoad","getSystemUptime","type","pid","startTime","uptime","Date","now","formatUptime","cpu","undefined","toFixed","memory","id","restarts","filter","p","ms","seconds","Math","floor","minutes","hours","days","createCompatibleUI","isRawModeSupported","isTTY","setRawMode","launchUI","ui","mockProcesses"],"mappings":"AAKA,OAAOA,cAAc,WAAW;AAChC,OAAOC,WAAW,QAAQ;AAuB1B,OAAO,MAAMC;IACHC,YAAyB,EAAE,CAAC;IAC5BC,UAAU,MAAM;IAChBC,GAAuB;IAE/B,aAAc;QACZ,IAAI,CAACA,EAAE,GAAGL,SAASM,eAAe,CAAC;YACjCC,OAAOC,QAAQC,KAAK;YACpBC,QAAQF,QAAQG,MAAM;YACtBC,UAAU;QACZ;IACF;IAEA,MAAMC,QAAuB;QAC3B,IAAI,CAACT,OAAO,GAAG;QAGf,IAAI,CAACU,MAAM;QAGX,MAAO,IAAI,CAACV,OAAO,CAAE;YACnB,MAAMW,UAAU,MAAM,IAAI,CAACC,aAAa;YACxC,MAAM,IAAI,CAACC,aAAa,CAACF;QAC3B;IACF;IAEAG,OAAa;QACX,IAAI,CAACd,OAAO,GAAG;QACf,IAAI,CAACC,EAAE,CAACc,KAAK;QACbC,QAAQC,KAAK;IACf;IAEAC,gBAAgBnB,SAAsB,EAAQ;QAC5C,IAAI,CAACA,SAAS,GAAGA;QACjB,IAAI,IAAI,CAACC,OAAO,EAAE;YAChB,IAAI,CAACU,MAAM;QACb;IACF;IAEA,MAAcE,gBAAiC;QAC7C,OAAO,IAAIO,QAAQ,CAACC;YAClB,IAAI,CAACnB,EAAE,CAACoB,QAAQ,CAAC,eAAe,CAACC;gBAC/BF,QAAQE,OAAOC,IAAI;YACrB;QACF;IACF;IAEA,MAAcV,cAAcV,KAAa,EAAiB;QACxD,OAAQA,MAAMqB,WAAW;YACvB,KAAK;YACL,KAAK;YACL,KAAK;gBACH,MAAM,IAAI,CAACC,UAAU;gBACrB;YAEF,KAAK;YACL,KAAK;gBACH,IAAI,CAACf,MAAM;gBACX;YAEF,KAAK;YACL,KAAK;YACL,KAAK;gBACH,IAAI,CAACgB,QAAQ;gBACb;YAEF,KAAK;YACL,KAAK;gBACH,IAAI,CAACC,UAAU;gBACf;YAEF,KAAK;YACL,KAAK;gBACH,IAAI,CAACC,eAAe;gBACpB;YAEF;gBAEE,MAAMC,MAAMC,SAAS3B;gBACrB,IAAI,CAAC4B,MAAMF,QAAQA,OAAO,KAAKA,OAAO,IAAI,CAAC9B,SAAS,CAACiC,MAAM,EAAE;oBAC3D,MAAM,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAAClC,SAAS,CAAC8B,MAAM,EAAE;gBACvD,OAAO;oBACLb,QAAQkB,GAAG,CAACrC,MAAMsC,MAAM,CAAC;gBAC3B;gBACA;QACJ;IACF;IAEQzB,SAAe;QACrBM,QAAQC,KAAK;QACb,MAAMmB,QAAQ,IAAI,CAACC,cAAc;QAGjCrB,QAAQkB,GAAG,CAACrC,MAAMyC,IAAI,CAACC,IAAI,CAAC;QAC5BvB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAGlCzB,QAAQkB,GAAG,CACTrC,MAAM6C,KAAK,CAAC,mBACZ7C,MAAM8C,KAAK,CAAC,GAAGP,MAAMQ,gBAAgB,CAAC,CAAC,EAAER,MAAMS,cAAc,CAAC,QAAQ,CAAC;QAGzE,IAAIT,MAAMU,cAAc,GAAG,GAAG;YAC5B9B,QAAQkB,GAAG,CAACrC,MAAMkD,GAAG,CAAC,CAAC,IAAI,EAAEX,MAAMU,cAAc,CAAC,sBAAsB,CAAC;QAC3E;QAEA9B,QAAQkB,GAAG;QAGXlB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAACH,IAAI,CAAC;QAC7BvB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAElC,IAAI,IAAI,CAAC1C,SAAS,CAACiC,MAAM,KAAK,GAAG;YAC/BhB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC;QACzB,OAAO;YACL,IAAI,CAACzC,SAAS,CAACiD,OAAO,CAAC,CAAC5C,UAAS6C;gBAC/B,MAAMpB,MAAM,CAAC,CAAC,EAAEoB,QAAQ,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC;gBACpC,MAAMC,SAAS,IAAI,CAACC,gBAAgB,CAAChD,SAAQ+C,MAAM;gBACnD,MAAME,OAAOjD,SAAQiD,IAAI,CAACH,MAAM,CAAC;gBAEjClC,QAAQkB,GAAG,CAAC,GAAGrC,MAAM2C,IAAI,CAACX,KAAK,CAAC,EAAEsB,OAAO,CAAC,EAAEtD,MAAM6C,KAAK,CAACW,OAAO;gBAE/D,IAAIjD,SAAQkD,OAAO,EAAEC,WAAW;oBAC9BvC,QAAQkB,GAAG,CAACrC,MAAMkD,GAAG,CAAC,CAAC,cAAc,EAAE3C,SAAQkD,OAAO,CAACC,SAAS,EAAE;gBACpE;YACF;QACF;QAGAvC,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAClCzB,QAAQkB,GAAG,CACTrC,MAAM2C,IAAI,CACR;IAGN;IAEQb,aAAmB;QACzB,MAAMS,QAAQ,IAAI,CAACC,cAAc;QAEjCrB,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAMyC,IAAI,CAACC,IAAI,CAAC;QAC5BvB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAClCzB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,qBAAqBN,MAAMS,cAAc;QACjE7B,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,aAAa7C,MAAM8C,KAAK,CAACP,MAAMQ,gBAAgB;QACvE5B,QAAQkB,GAAG,CACTrC,MAAM6C,KAAK,CAAC,aACZ7C,MAAM2C,IAAI,CAACJ,MAAMS,cAAc,GAAGT,MAAMQ,gBAAgB,GAAGR,MAAMU,cAAc;QAEjF9B,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,YAAY7C,MAAMkD,GAAG,CAACX,MAAMU,cAAc;QAClE9B,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,iBAAiB,IAAI,CAACc,aAAa;QAC3DxC,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,YAAY,IAAI,CAACe,eAAe;IAC1D;IAEQ7B,kBAAwB;QAC9BZ,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAMyC,IAAI,CAACC,IAAI,CAAC;QAC5BvB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAElC,IAAI,IAAI,CAAC1C,SAAS,CAACiC,MAAM,KAAK,GAAG;YAC/BhB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC;YACvB;QACF;QAEA,IAAI,CAACzC,SAAS,CAACiD,OAAO,CAAC,CAAC5C,UAAS6C;YAC/BjC,QAAQkB,GAAG,CACT,GAAGrC,MAAM2C,IAAI,CAAC,CAAC,CAAC,EAAES,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACG,gBAAgB,CAAChD,SAAQ+C,MAAM,EAAE,CAAC,EAAEtD,MAAM6C,KAAK,CAACH,IAAI,CAACnC,SAAQiD,IAAI,GAAG;YAE9GrC,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,CAAC,UAAU,EAAEpC,SAAQsD,IAAI,EAAE;YAElD,IAAItD,SAAQuD,GAAG,EAAE;gBACf3C,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,CAAC,SAAS,EAAEpC,SAAQuD,GAAG,EAAE;YAClD;YAEA,IAAIvD,SAAQwD,SAAS,EAAE;gBACrB,MAAMC,SAASC,KAAKC,GAAG,KAAK3D,SAAQwD,SAAS;gBAC7C5C,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,CAAC,YAAY,EAAE,IAAI,CAACwB,YAAY,CAACH,SAAS;YACnE;YAEA,IAAIzD,SAAQkD,OAAO,EAAE;gBACnB,IAAIlD,SAAQkD,OAAO,CAACW,GAAG,KAAKC,WAAW;oBACrClD,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,CAAC,SAAS,EAAEpC,SAAQkD,OAAO,CAACW,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;gBACtE;gBACA,IAAI/D,SAAQkD,OAAO,CAACc,MAAM,KAAKF,WAAW;oBACxClD,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,CAAC,YAAY,EAAEpC,SAAQkD,OAAO,CAACc,MAAM,CAACD,OAAO,CAAC,GAAG,GAAG,CAAC;gBAC9E;YACF;YAEAnD,QAAQkB,GAAG;QACb;IACF;IAEA,MAAcD,mBAAmB7B,QAAkB,EAAiB;QAClEY,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAMyC,IAAI,CAACC,IAAI,CAAC,CAAC,oBAAoB,EAAEnC,SAAQiD,IAAI,EAAE;QACjErC,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAElCzB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,QAAQtC,SAAQiE,EAAE;QAC1CrD,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,UAAUtC,SAAQsD,IAAI;QAC9C1C,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,YAAY,IAAI,CAACU,gBAAgB,CAAChD,SAAQ+C,MAAM,GAAG/C,SAAQ+C,MAAM;QAEzF,IAAI/C,SAAQuD,GAAG,EAAE;YACf3C,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,SAAStC,SAAQuD,GAAG;QAC9C;QAEA,IAAIvD,SAAQwD,SAAS,EAAE;YACrB,MAAMC,SAASC,KAAKC,GAAG,KAAK3D,SAAQwD,SAAS;YAC7C5C,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,YAAY,IAAI,CAACsB,YAAY,CAACH;QACxD;QAEA,IAAIzD,SAAQkD,OAAO,EAAE;YACnBtC,QAAQkB,GAAG;YACXlB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAACH,IAAI,CAAC;YAC7B,IAAInC,SAAQkD,OAAO,CAACW,GAAG,KAAKC,WAAW;gBACrClD,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,SAAS,GAAGtC,SAAQkD,OAAO,CAACW,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;YACvE;YACA,IAAI/D,SAAQkD,OAAO,CAACc,MAAM,KAAKF,WAAW;gBACxClD,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,YAAY,GAAGtC,SAAQkD,OAAO,CAACc,MAAM,CAACD,OAAO,CAAC,GAAG,GAAG,CAAC;YAC/E;YACA,IAAI/D,SAAQkD,OAAO,CAACgB,QAAQ,KAAKJ,WAAW;gBAC1ClD,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAAC,cAActC,SAAQkD,OAAO,CAACgB,QAAQ;YAChE;YACA,IAAIlE,SAAQkD,OAAO,CAACC,SAAS,EAAE;gBAC7BvC,QAAQkB,GAAG,CAACrC,MAAMkD,GAAG,CAAC,gBAAgB3C,SAAQkD,OAAO,CAACC,SAAS;YACjE;QACF;IACF;IAEQH,iBAAiBD,MAAc,EAAU;QAC/C,OAAQA;YACN,KAAK;gBACH,OAAOtD,MAAM8C,KAAK,CAAC;YACrB,KAAK;gBACH,OAAO9C,MAAM2C,IAAI,CAAC;YACpB,KAAK;gBACH,OAAO3C,MAAMsC,MAAM,CAAC;YACtB,KAAK;gBACH,OAAOtC,MAAMsC,MAAM,CAAC;YACtB,KAAK;gBACH,OAAOtC,MAAMkD,GAAG,CAAC;YACnB,KAAK;gBACH,OAAOlD,MAAMkD,GAAG,CAAC;YACnB;gBACE,OAAOlD,MAAM2C,IAAI,CAAC;QACtB;IACF;IAEQH,iBAAgC;QACtC,OAAO;YACLQ,gBAAgB,IAAI,CAAC9C,SAAS,CAACiC,MAAM;YACrCY,kBAAkB,IAAI,CAAC7C,SAAS,CAACwE,MAAM,CAAC,CAACC,IAAMA,EAAErB,MAAM,KAAK,WAAWnB,MAAM;YAC7Ec,gBAAgB,IAAI,CAAC/C,SAAS,CAACwE,MAAM,CAAC,CAACC,IAAMA,EAAErB,MAAM,KAAK,WAAWqB,EAAErB,MAAM,KAAK,WAC/EnB,MAAM;QACX;IACF;IAEQwB,gBAAwB;QAE9B,OAAO;IACT;IAEQC,kBAA0B;QAChC,MAAMI,SAASzD,QAAQyD,MAAM,KAAK;QAClC,OAAO,IAAI,CAACG,YAAY,CAACH;IAC3B;IAEQG,aAAaS,EAAU,EAAU;QACvC,MAAMC,UAAUC,KAAKC,KAAK,CAACH,KAAK;QAChC,MAAMI,UAAUF,KAAKC,KAAK,CAACF,UAAU;QACrC,MAAMI,QAAQH,KAAKC,KAAK,CAACC,UAAU;QACnC,MAAME,OAAOJ,KAAKC,KAAK,CAACE,QAAQ;QAEhC,IAAIC,OAAO,GAAG;YACZ,OAAO,GAAGA,KAAK,EAAE,EAAED,QAAQ,GAAG,CAAC,CAAC;QAClC,OAAO,IAAIA,QAAQ,GAAG;YACpB,OAAO,GAAGA,MAAM,EAAE,EAAED,UAAU,GAAG,CAAC,CAAC;QACrC,OAAO,IAAIA,UAAU,GAAG;YACtB,OAAO,GAAGA,QAAQ,EAAE,EAAEH,UAAU,GAAG,CAAC,CAAC;QACvC,OAAO;YACL,OAAO,GAAGA,QAAQ,CAAC,CAAC;QACtB;IACF;IAEQhD,WAAiB;QACvBV,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAMyC,IAAI,CAACC,IAAI,CAAC;QAC5BvB,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC,IAAIC,MAAM,CAAC;QAClCzB,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAACH,IAAI,CAAC;QAC7BvB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG;QACXlB,QAAQkB,GAAG,CAACrC,MAAM6C,KAAK,CAACH,IAAI,CAAC;QAC7BvB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;QACZlB,QAAQkB,GAAG,CAAC;IACd;IAEA,MAAcT,aAA4B;QACxC,MAAMmB,mBAAmB,IAAI,CAAC7C,SAAS,CAACwE,MAAM,CAAC,CAACC,IAAMA,EAAErB,MAAM,KAAK;QAEnE,IAAIP,iBAAiBZ,MAAM,GAAG,GAAG;YAC/BhB,QAAQkB,GAAG;YACXlB,QAAQkB,GAAG,CAACrC,MAAMsC,MAAM,CAAC,CAAC,IAAI,EAAES,iBAAiBZ,MAAM,CAAC,6BAA6B,CAAC;YACtFhB,QAAQkB,GAAG,CAAC;YACZlB,QAAQkB,GAAG,CAAC;QACd;QAEA,IAAI,CAACpB,IAAI;IACX;AACF;AAGA,OAAO,SAASkE;IACd,OAAO,IAAIlF;AACb;AAGA,OAAO,SAASmF;IACd,IAAI;QACF,OAAO7E,QAAQC,KAAK,CAAC6E,KAAK,IAAI,OAAO9E,QAAQC,KAAK,CAAC8E,UAAU,KAAK;IACpE,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAGA,OAAO,eAAeC;IACpB,MAAMC,KAAKL;IAGX,MAAMM,gBAA6B;QACjC;YACEjB,IAAI;YACJhB,MAAM;YACNF,QAAQ;YACRO,MAAM;YACNC,KAAK;YACLC,WAAWE,KAAKC,GAAG,KAAK;YACxBT,SAAS;gBAAEW,KAAK;gBAAKG,QAAQ;gBAAME,UAAU;YAAE;QACjD;QACA;YACED,IAAI;YACJhB,MAAM;YACNF,QAAQ;YACRO,MAAM;YACNC,KAAK;YACLC,WAAWE,KAAKC,GAAG,KAAK;YACxBT,SAAS;gBAAEW,KAAK;gBAAKG,QAAQ;gBAAME,UAAU;YAAE;QACjD;QACA;YACED,IAAI;YACJhB,MAAM;YACNF,QAAQ;YACRO,MAAM;YACNJ,SAAS;gBAAEgB,UAAU;YAAE;QACzB;KACD;IAEDe,GAAGnE,eAAe,CAACoE;IAEnBtE,QAAQkB,GAAG,CAACrC,MAAM8C,KAAK,CAAC;IACxB3B,QAAQkB,GAAG,CAACrC,MAAM2C,IAAI,CAAC;IACvBxB,QAAQkB,GAAG;IAEX,MAAMmD,GAAG5E,KAAK;AAChB"}