{"version":3,"sources":["../../../../src/cli/ui/fallback-handler.ts"],"sourcesContent":["import { getErrorMessage } from '../../utils/type-guards.js';\n/**\n * Fallback UI Handler - Handles raw mode errors gracefully\n * Provides alternative UI when Ink/raw mode isn't supported\n */\n\nimport chalk from 'chalk';\nimport { createCompatibleUI } from './compatible-ui.js';\n\nexport interface FallbackOptions {\n  enableUI?: boolean;\n  fallbackMessage?: string;\n  showHelp?: boolean;\n}\n\n/**\n * Handles raw mode errors and provides fallback UI\n */\nexport async function handleRawModeError(\n  error: Error,\n  options: FallbackOptions = {},\n): Promise<void> {\n  const isRawModeError =\n    (error instanceof Error ? error.message : String(error)).includes(\n      'Raw mode is not supported',\n    ) ||\n    (error instanceof Error ? error.message : String(error)).includes('stdin') ||\n    (error instanceof Error ? error.message : String(error)).includes('Ink');\n\n  if (!isRawModeError) {\n    throw error; // Re-throw if it's not a raw mode error\n  }\n\n  console.clear();\n  console.log(chalk.yellow.bold('‚ö†Ô∏è  Interactive Mode Not Supported'));\n  console.log(chalk.gray('‚îÄ'.repeat(50)));\n  console.log(chalk.white('The current terminal environment does not support'));\n  console.log(chalk.white('interactive UI features (raw mode).'));\n  console.log();\n  console.log(chalk.cyan('Common causes:'));\n  console.log(chalk.gray('‚Ä¢ VS Code integrated terminal'));\n  console.log(chalk.gray('‚Ä¢ WSL (Windows Subsystem for Linux)'));\n  console.log(chalk.gray('‚Ä¢ Native Windows terminals'));\n  console.log(chalk.gray('‚Ä¢ CI/CD environments'));\n  console.log(chalk.gray('‚Ä¢ Docker containers'));\n  console.log(chalk.gray('‚Ä¢ SSH sessions without TTY'));\n  console.log();\n\n  if (options.fallbackMessage) {\n    console.log(chalk.blue('‚ÑπÔ∏è  '), options.fallbackMessage);\n    console.log();\n  }\n\n  if (options.enableUI) {\n    console.log(chalk.green('‚úÖ Launching compatible UI mode...'));\n    console.log();\n\n    try {\n      const ui = createCompatibleUI();\n      await ui.start();\n    } catch (fallbackError) {\n      console.log(chalk.red('‚ùå Fallback UI also failed:'), getErrorMessage(fallbackError));\n      await showBasicInterface(options);\n    }\n  } else {\n    await showBasicInterface(options);\n  }\n}\n\n/**\n * Shows a basic text-based interface when UI isn't available\n */\nasync function showBasicInterface(options: FallbackOptions): Promise<void> {\n  console.log(chalk.green('üìã Available alternatives:'));\n  console.log();\n  console.log(chalk.white('1. Use CLI commands directly:'));\n  console.log(chalk.gray('   ./claude-flow status'));\n  console.log(chalk.gray('   ./claude-flow memory list'));\n  console.log(chalk.gray('   ./claude-flow sparc modes'));\n  console.log();\n  console.log(chalk.white('2. Use non-interactive modes:'));\n  console.log(chalk.gray('   ./claude-flow start (without --ui)'));\n  console.log(chalk.gray('   ./claude-flow swarm \"task\" --monitor'));\n  console.log();\n  console.log(chalk.white('3. Use external terminal:'));\n  console.log(chalk.gray('   Run in a standalone terminal application'));\n  console.log();\n\n  if (options.showHelp) {\n    console.log(chalk.cyan('üí° For help with any command, use:'));\n    console.log(chalk.gray('   ./claude-flow help <command>'));\n    console.log(chalk.gray('   ./claude-flow <command> --help'));\n    console.log();\n  }\n\n  console.log(chalk.gray('Press Ctrl+C to exit'));\n\n  // Wait for user to exit\n  await new Promise(() => {\n    process.on('SIGINT', () => {\n      console.log(chalk.green('\\nüëã Goodbye!'));\n      process.exit(0);\n    });\n  });\n}\n\n/**\n * Wraps a function to catch and handle raw mode errors\n */\nexport function withRawModeFallback<T extends any[], R>(\n  fn: (...args: T) => Promise<R>,\n  fallbackOptions: FallbackOptions = {},\n) {\n  return async (...args: T): Promise<R | void> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      if (error instanceof Error) {\n        await handleRawModeError(error, fallbackOptions);\n      } else {\n        throw error;\n      }\n    }\n  };\n}\n\n/**\n * Checks if the current environment supports interactive UI\n */\nexport function checkUISupport(): {\n  supported: boolean;\n  reason?: string;\n  recommendation?: string;\n} {\n  // Check if we're in a TTY\n  if (!process.stdin.isTTY) {\n    return {\n      supported: false,\n      reason: 'Not running in a TTY environment',\n      recommendation: 'Use a proper terminal application',\n    };\n  }\n\n  // Check if raw mode is available\n  if (typeof process.stdin.setRawMode !== 'function') {\n    return {\n      supported: false,\n      reason: 'Raw mode not available',\n      recommendation: 'Use --no-ui flag or run in external terminal',\n    };\n  }\n\n  // Check for VS Code terminal\n  if (process.env.TERM_PROGRAM === 'vscode') {\n    return {\n      supported: false,\n      reason: 'Running in VS Code integrated terminal',\n      recommendation: 'Use VS Code external terminal or standalone terminal',\n    };\n  }\n\n  // Check for other problematic environments\n  if (process.env.CI || process.env.GITHUB_ACTIONS) {\n    return {\n      supported: false,\n      reason: 'Running in CI/CD environment',\n      recommendation: 'Use non-interactive mode',\n    };\n  }\n\n  return { supported: true };\n}\n\n/**\n * Shows UI support information\n */\nexport function showUISupport(): void {\n  const support = checkUISupport();\n\n  console.log(chalk.cyan.bold('üñ•Ô∏è  UI Support Information'));\n  console.log(chalk.gray('‚îÄ'.repeat(40)));\n\n  if (support.supported) {\n    console.log(chalk.green('‚úÖ Interactive UI supported'));\n    console.log(chalk.gray('Your terminal supports all UI features'));\n  } else {\n    console.log(chalk.yellow('‚ö†Ô∏è  Limited UI support'));\n    console.log(chalk.gray(`Reason: ${support.reason}`));\n    if (support.recommendation) {\n      console.log(chalk.blue(`Recommendation: ${support.recommendation}`));\n    }\n  }\n\n  console.log();\n  console.log(chalk.white('Environment details:'));\n  console.log(chalk.gray(`‚Ä¢ Terminal: ${process.env.TERM || 'unknown'}`));\n  console.log(chalk.gray(`‚Ä¢ TTY: ${process.stdin.isTTY ? 'yes' : 'no'}`));\n  console.log(chalk.gray(`‚Ä¢ Program: ${process.env.TERM_PROGRAM || 'unknown'}`));\n  console.log(chalk.gray(`‚Ä¢ Platform: ${process.platform}`));\n}\n"],"names":["getErrorMessage","chalk","createCompatibleUI","handleRawModeError","error","options","isRawModeError","Error","message","String","includes","console","clear","log","yellow","bold","gray","repeat","white","cyan","fallbackMessage","blue","enableUI","green","ui","start","fallbackError","red","showBasicInterface","showHelp","Promise","process","on","exit","withRawModeFallback","fn","fallbackOptions","args","checkUISupport","stdin","isTTY","supported","reason","recommendation","setRawMode","env","TERM_PROGRAM","CI","GITHUB_ACTIONS","showUISupport","support","TERM","platform"],"mappings":"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"}