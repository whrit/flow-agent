{"version":3,"sources":["../../../src/cli/create-enhanced-task.js"],"sourcesContent":["/**\n * Creates an enhanced task prompt with Claude-Flow guidance\n * @param {string} task - The original task description\n * @param {Object} flags - Command flags/options\n * @param {string} instanceId - Unique instance identifier\n * @param {string} tools - Comma-separated list of available tools\n * @returns {string} Enhanced task prompt\n */\nexport function createEnhancedTask(task, flags, instanceId, tools) {\n  let enhancedTask = `# Claude-Flow Enhanced Task\n\n## Your Task\n${task}\n\n## Claude-Flow System Context\n\nYou are running within the Claude-Flow orchestration system, which provides powerful features for complex task management.\n\n### Configuration\n- Instance ID: ${instanceId}\n- Mode: ${flags.mode || 'full'}\n- Coverage Target: ${flags.coverage || 80}%\n- Commit Strategy: ${flags.commit || 'phase'}\n${flags.config ? `- MCP Config: ${flags.config}` : ''}\n\n### Available Features\n\n1. **Memory Bank** (Always Available)\n   - Store data: \\`npx claude-flow memory store <key> \"<value>\"\\` - Save important data, findings, or progress\n   - Retrieve data: \\`npx claude-flow memory query <key>\\` - Access previously stored information\n   - Export memory: \\`npx claude-flow memory export <file>\\` - Export memory to file\n   - Import memory: \\`npx claude-flow memory import <file>\\` - Import memory from file\n   - Memory stats: \\`npx claude-flow memory stats\\` - Show memory usage statistics\n\n2. **System Management**\n   - Check status: \\`npx claude-flow status\\` - View current system/task status\n   - Monitor system: \\`npx claude-flow monitor\\` - Real-time system monitoring\n   - List agents: \\`npx claude-flow agent list\\` - See active agents\n   - List tasks: \\`npx claude-flow task list\\` - See active tasks\n\n3. **Tool Access**\n   - You have access to these tools: ${tools}\n   ${flags.tools ? `- Custom tools specified: ${flags.tools}` : ''}`;\n\n  if (flags.parallel) {\n    enhancedTask += `\n   - **Parallel Execution Enabled**: Use \\`npx claude-flow agent spawn <type> --name <name>\\` to spawn sub-agents\n   - Create tasks: \\`npx claude-flow task create <type> \"<description>\"\\`\n   - Assign tasks: \\`npx claude-flow task assign <task-id> <agent-id>\\`\n   - Break down complex tasks and delegate to specialized agents`;\n  }\n\n  if (flags.research) {\n    enhancedTask += `\n   - **Research Mode**: Use \\`WebFetchTool\\` for web research and information gathering`;\n  }\n\n  enhancedTask += `\n\n### Workflow Guidelines\n\n1. **Before Starting**:\n   - Check memory: \\`npx claude-flow memory query previous_work\\`\n   - Check memory stats: \\`npx claude-flow memory stats\\`\n   - Check system status: \\`npx claude-flow status\\`\n   - List active agents: \\`npx claude-flow agent list\\`\n   - List active tasks: \\`npx claude-flow task list\\`\n   ${flags.mode === 'backend-only' ? '- Focus on backend implementation without frontend concerns' : ''}\n   ${flags.mode === 'frontend-only' ? '- Focus on frontend implementation without backend concerns' : ''}\n   ${flags.mode === 'api-only' ? '- Focus on API design and implementation' : ''}\n\n2. **During Execution**:\n   - Store findings: \\`npx claude-flow memory store findings \"your data here\"\\`\n   - Save checkpoints: \\`npx claude-flow memory store progress_${task.replace(/\\s+/g, '_')} \"current status\"\\`\n   ${flags.parallel ? '- Spawn agents: `npx claude-flow agent spawn researcher --name \"research-agent\"`' : ''}\n   ${flags.parallel ? '- Create tasks: `npx claude-flow task create implementation \"implement feature X\"`' : ''}\n   ${flags.parallel ? '- Assign tasks: `npx claude-flow task assign <task-id> <agent-id>`' : ''}\n   ${flags.coverage ? `- Ensure test coverage meets ${flags.coverage}% target` : ''}\n   ${flags.commit === 'phase' ? '- Commit changes after completing each major phase' : ''}\n   ${flags.commit === 'feature' ? '- Commit changes after each feature is complete' : ''}\n   ${flags.commit === 'manual' ? '- Only commit when explicitly requested' : ''}\n\n3. **Best Practices**:\n   - Use the Bash tool to run \\`npx claude-flow\\` commands\n   - Store data as JSON strings for complex structures\n   - Query memory before starting to check for existing work\n   - Use descriptive keys for memory storage\n   - Monitor progress: \\`npx claude-flow monitor\\`\n   ${flags.parallel ? '- Coordinate with other agents through shared memory' : ''}\n   ${flags.research ? '- Store research findings: `npx claude-flow memory store research_findings \"data\"`' : ''}\n   ${flags.noPermissions ? '- Running with --no-permissions, all operations will execute without prompts' : ''}\n   ${flags.verbose ? '- Verbose mode enabled, provide detailed output and explanations' : ''}\n\n## Example Commands\n\nTo interact with Claude-Flow, use the Bash tool:\n\n\\`\\`\\`bash\n# Memory Operations\nBash(\"npx claude-flow memory query previous_work\")\nBash(\"npx claude-flow memory store task_analysis '{\\\\\"status\\\\\": \\\\\"completed\\\\\", \\\\\"findings\\\\\": [...]}'\")\nBash(\"npx claude-flow memory stats\")\nBash(\"npx claude-flow memory export backup.json\")\n\n# System Management\nBash(\"npx claude-flow status\")\nBash(\"npx claude-flow monitor\")  # Real-time monitoring\nBash(\"npx claude-flow agent list\")\nBash(\"npx claude-flow task list --verbose\")\n${\n  flags.parallel\n    ? `\n# Parallel Execution (enabled for this instance)\nBash(\"npx claude-flow agent spawn researcher --name research-bot\")\nBash(\"npx claude-flow agent spawn coder --name code-bot\")\nBash(\"npx claude-flow task create research 'Analyze best practices'\")\nBash(\"npx claude-flow task create implementation 'Implement auth module'\")\nBash(\"npx claude-flow task assign task-123 agent-456\")`\n    : ''\n}\n${\n  flags.research\n    ? `\n# Research Operations (research mode enabled)\n# Use WebFetchTool for web research, then store findings\nBash(\"npx claude-flow memory store web_research_urls '[\\\\\"url1\\\\\", \\\\\"url2\\\\\"]'\")\nBash(\"npx claude-flow memory store research_summary 'Key findings from research...'\")`\n    : ''\n}\n\n# Configuration Management\nBash(\"npx claude-flow config show\")\nBash(\"npx claude-flow config get orchestrator.maxConcurrentTasks\")\nBash(\"npx claude-flow config set orchestrator.maxConcurrentTasks 20\")\n\n# Workflow Execution\nBash(\"npx claude-flow workflow examples/development-config.json\")\nBash(\"npx claude-flow workflow examples/research-workflow.json --async\")\n\\`\\`\\`\n\n## Mode-Specific Guidelines\n${\n  flags.mode === 'backend-only'\n    ? `\n### Backend-Only Mode\n- Focus exclusively on server-side implementation\n- Prioritize API design, database schemas, and business logic\n- Ignore frontend/UI considerations\n- Test coverage should emphasize unit and integration tests`\n    : ''\n}\n${\n  flags.mode === 'frontend-only'\n    ? `\n### Frontend-Only Mode\n- Focus exclusively on client-side implementation\n- Prioritize UI/UX, component design, and user interactions\n- Assume backend APIs are already available\n- Test coverage should emphasize component and E2E tests`\n    : ''\n}\n${\n  flags.mode === 'api-only'\n    ? `\n### API-Only Mode\n- Focus exclusively on API design and implementation\n- Prioritize RESTful principles, documentation, and contracts\n- Include comprehensive API documentation\n- Test coverage should emphasize API endpoint testing`\n    : ''\n}\n${\n  flags.mode === 'full' || !flags.mode\n    ? `\n### Full Stack Mode (Default)\n- Consider both frontend and backend requirements\n- Ensure proper integration between all layers\n- Balance test coverage across all components\n- Document both API contracts and user interfaces`\n    : ''\n}\n\n## Commit Strategy\n${flags.commit === 'phase' ? `- **Phase Commits**: Commit after completing major phases (planning, implementation, testing)` : ''}\n${flags.commit === 'feature' ? `- **Feature Commits**: Commit after each feature or module is complete` : ''}\n${flags.commit === 'manual' ? `- **Manual Commits**: Only commit when explicitly requested by the user` : ''}\n${!flags.commit ? `- **Default (Phase)**: Commit after completing major phases` : ''}\n\n## Additional Guidelines\n${\n  flags.noPermissions\n    ? `\n### No-Permissions Mode\n- All file operations will execute without confirmation prompts\n- Be extra careful with destructive operations\n- Ensure all changes are intentional and well-tested`\n    : ''\n}\n${\n  flags.verbose\n    ? `\n### Verbose Mode\n- Provide detailed explanations for all actions\n- Include reasoning behind technical decisions\n- Show intermediate steps and thought processes\n- Log all command outputs comprehensively`\n    : ''\n}\n\nNow, please proceed with the task: ${task}`;\n\n  return enhancedTask;\n}\n"],"names":["createEnhancedTask","task","flags","instanceId","tools","enhancedTask","mode","coverage","commit","config","parallel","research","replace","noPermissions","verbose"],"mappings":"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"}