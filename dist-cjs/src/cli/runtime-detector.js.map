{"version":3,"sources":["../../../src/cli/runtime-detector.js"],"sourcesContent":["/**\n * Runtime Environment Detection\n * Cross-platform detection and compatibility layer for Node.js and Deno\n */\n\n// Runtime detection\nconst isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\nconst isDeno = typeof Deno !== 'undefined';\n\n// Environment-specific imports\nlet runtime;\nlet stdin, stdout, stderr;\nlet TextEncoder, TextDecoder;\nlet exit, pid, addSignalListener;\n\nif (isDeno) {\n  // Deno environment\n  runtime = 'deno';\n  stdin = Deno.stdin;\n  stdout = Deno.stdout;\n  stderr = Deno.stderr;\n  TextEncoder = globalThis.TextEncoder;\n  TextDecoder = globalThis.TextDecoder;\n  exit = Deno.exit;\n  pid = Deno.pid;\n  addSignalListener = Deno.addSignalListener;\n} else if (isNode) {\n  // Node.js environment\n  runtime = 'node';\n  stdin = process.stdin;\n  stdout = process.stdout;\n  stderr = process.stderr;\n  TextEncoder = globalThis.TextEncoder || require('util').TextEncoder;\n  TextDecoder = globalThis.TextDecoder || require('util').TextDecoder;\n  exit = process.exit;\n  pid = process.pid;\n  addSignalListener = (signal, handler) => {\n    process.on(signal, handler);\n  };\n} else {\n  throw new Error('Unsupported runtime environment');\n}\n\n/**\n * Cross-platform terminal I/O layer\n */\nexport class UnifiedTerminalIO {\n  constructor() {\n    this.decoder = new TextDecoder();\n    this.encoder = new TextEncoder();\n    this.runtime = runtime;\n  }\n\n  /**\n   * Write to stdout\n   */\n  async write(data) {\n    if (typeof data === 'string') {\n      data = this.encoder.encode(data);\n    }\n\n    if (runtime === 'deno') {\n      await stdout.write(data);\n    } else {\n      return new Promise((resolve) => {\n        stdout.write(data, resolve);\n      });\n    }\n  }\n\n  /**\n   * Read from stdin\n   */\n  async read(buffer) {\n    if (runtime === 'deno') {\n      return await stdin.read(buffer);\n    } else {\n      return new Promise((resolve) => {\n        let data = '';\n        const onData = (chunk) => {\n          data += chunk;\n          if (data.includes('\\n')) {\n            stdin.removeListener('data', onData);\n            const encoded = this.encoder.encode(data);\n            const bytesToCopy = Math.min(encoded.length, buffer.length);\n            buffer.set(encoded.slice(0, bytesToCopy));\n            resolve(bytesToCopy);\n          }\n        };\n\n        // Only set raw mode if available (terminal environments)\n        if (stdin.setRawMode && typeof stdin.setRawMode === 'function') {\n          try {\n            stdin.setRawMode(true);\n          } catch (err) {\n            // Ignore errors if not in a TTY\n          }\n        }\n\n        if (stdin.resume && typeof stdin.resume === 'function') {\n          stdin.resume();\n        }\n\n        stdin.on('data', onData);\n      });\n    }\n  }\n\n  /**\n   * Set up signal handlers\n   */\n  onSignal(signal, handler) {\n    if (runtime === 'deno') {\n      addSignalListener(signal, handler);\n    } else {\n      process.on(signal, handler);\n    }\n  }\n\n  /**\n   * Exit the process\n   */\n  exit(code = 0) {\n    exit(code);\n  }\n\n  /**\n   * Get process ID\n   */\n  getPid() {\n    return pid;\n  }\n\n  /**\n   * Set raw mode for stdin (Node.js only)\n   */\n  setRawMode(enabled) {\n    if (runtime === 'node' && stdin.setRawMode && typeof stdin.setRawMode === 'function') {\n      try {\n        stdin.setRawMode(enabled);\n      } catch (err) {\n        // Ignore errors if not in a TTY\n      }\n    }\n  }\n\n  /**\n   * Resume stdin (Node.js only)\n   */\n  resume() {\n    if (runtime === 'node' && stdin.resume) {\n      stdin.resume();\n    }\n  }\n\n  /**\n   * Pause stdin (Node.js only)\n   */\n  pause() {\n    if (runtime === 'node' && stdin.pause) {\n      stdin.pause();\n    }\n  }\n}\n\n/**\n * Environment detection utilities\n */\nexport const RuntimeDetector = {\n  isNode: () => isNode,\n  isDeno: () => isDeno,\n  getRuntime: () => runtime,\n\n  /**\n   * Get platform-specific information\n   */\n  getPlatform: () => {\n    if (runtime === 'deno') {\n      return {\n        os: Deno.build.os,\n        arch: Deno.build.arch,\n        target: Deno.build.target,\n      };\n    } else {\n      return {\n        os:\n          process.platform === 'win32'\n            ? 'windows'\n            : process.platform === 'darwin'\n              ? 'darwin'\n              : process.platform === 'linux'\n                ? 'linux'\n                : process.platform,\n        arch: process.arch,\n        target: `${process.arch}-${process.platform}`,\n      };\n    }\n  },\n\n  /**\n   * Check if API is available\n   */\n  hasAPI: (apiName) => {\n    switch (apiName) {\n      case 'deno':\n        return isDeno;\n      case 'node':\n        return isNode;\n      case 'fs':\n        return runtime === 'node' || (runtime === 'deno' && typeof Deno.readFile !== 'undefined');\n      case 'process':\n        return runtime === 'node' || (runtime === 'deno' && typeof Deno.run !== 'undefined');\n      default:\n        return false;\n    }\n  },\n\n  /**\n   * Get environment variables\n   */\n  getEnv: (key) => {\n    if (runtime === 'deno') {\n      return process.env[key];\n    } else {\n      return process.env[key];\n    }\n  },\n\n  /**\n   * Set environment variables\n   */\n  setEnv: (key, value) => {\n    if (runtime === 'deno') {\n      process.env[key] = value;\n    } else {\n      process.env[key] = value;\n    }\n  },\n};\n\n/**\n * Cross-platform compatibility layer\n */\nexport const createCompatibilityLayer = () => {\n  return {\n    runtime,\n    terminal: new UnifiedTerminalIO(),\n    detector: RuntimeDetector,\n\n    // Unified APIs\n    TextEncoder,\n    TextDecoder,\n\n    // Platform info\n    platform: RuntimeDetector.getPlatform(),\n\n    // Environment\n    getEnv: RuntimeDetector.getEnv,\n    setEnv: RuntimeDetector.setEnv,\n\n    // Process control\n    exit,\n    pid,\n\n    // Graceful degradation helpers\n    safeCall: async (fn, fallback = null) => {\n      try {\n        return await fn();\n      } catch (error) {\n        console.warn(`Runtime compatibility warning: ${error.message}`);\n        return fallback;\n      }\n    },\n\n    // Feature detection\n    hasFeature: (feature) => {\n      return RuntimeDetector.hasAPI(feature);\n    },\n  };\n};\n\n// Export the compatibility layer instance\nexport const compat = createCompatibilityLayer();\n\n// Export runtime detection results\nexport { runtime, isNode, isDeno };\n"],"names":["isNode","process","versions","node","isDeno","Deno","runtime","stdin","stdout","stderr","TextEncoder","TextDecoder","exit","pid","addSignalListener","globalThis","require","signal","handler","on","Error","UnifiedTerminalIO","decoder","encoder","write","data","encode","Promise","resolve","read","buffer","onData","chunk","includes","removeListener","encoded","bytesToCopy","Math","min","length","set","slice","setRawMode","err","resume","onSignal","code","getPid","enabled","pause","RuntimeDetector","getRuntime","getPlatform","os","build","arch","target","platform","hasAPI","apiName","readFile","run","getEnv","key","env","setEnv","value","createCompatibilityLayer","terminal","detector","safeCall","fn","fallback","error","console","warn","message","hasFeature","feature","compat"],"mappings":"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"}