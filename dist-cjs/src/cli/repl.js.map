{"version":3,"sources":["../../../src/cli/repl.ts"],"sourcesContent":["import { promises as fs } from 'node:fs';\n/**\n * Enhanced Interactive REPL for Claude-Flow\n */\n\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport type { AgentProfile, Task } from '../utils/types.js';\nimport { generateId } from '../utils/helpers.js';\nimport { formatStatusIndicator, formatDuration, formatProgressBar } from './formatter.js';\n\ninterface REPLCommand {\n  name: string;\n  aliases?: string[];\n  description: string;\n  usage?: string;\n  examples?: string[];\n  handler: (args: string[], context: REPLContext) => Promise<void>;\n}\n\ninterface REPLContext {\n  options: any;\n  history: string[];\n  workingDirectory: string;\n  currentSession?: string;\n  connectionStatus: 'connected' | 'disconnected' | 'connecting';\n  lastActivity: Date;\n}\n\nclass CommandHistory {\n  private history: string[] = [];\n  private maxSize = 1000;\n  private historyFile: string;\n\n  constructor(historyFile?: string) {\n    this.historyFile = historyFile || '.claude-flow-history';\n    this.loadHistory();\n  }\n\n  add(command: string): void {\n    if (command.trim() && command !== this.history[this.history.length - 1]) {\n      this.history.push(command);\n      if (this.history.length > this.maxSize) {\n        this.history = this.history.slice(-this.maxSize);\n      }\n      this.saveHistory();\n    }\n  }\n\n  get(): string[] {\n    return [...this.history];\n  }\n\n  search(query: string): string[] {\n    return this.history.filter((cmd) => cmd.includes(query));\n  }\n\n  private async loadHistory(): Promise<void> {\n    try {\n      const content = await fs.readFile(this.historyFile, 'utf-8');\n      this.history = content.split('\\n').filter((line: string) => line.trim());\n    } catch {\n      // History file doesn't exist yet\n    }\n  }\n\n  private async saveHistory(): Promise<void> {\n    try {\n      await fs.writeFile(this.historyFile, this.history.join('\\n'));\n    } catch {\n      // Ignore save errors\n    }\n  }\n}\n\nclass CommandCompleter {\n  private commands: Map<string, REPLCommand> = new Map();\n\n  setCommands(commands: REPLCommand[]): void {\n    this.commands.clear();\n    for (const cmd of commands) {\n      this.commands.set(cmd.name, cmd);\n      if (cmd.aliases) {\n        for (const alias of cmd.aliases) {\n          this.commands.set(alias, cmd);\n        }\n      }\n    }\n  }\n\n  complete(input: string): string[] {\n    const parts = input.trim().split(/\\s+/);\n\n    if (parts.length === 1) {\n      // Complete command names\n      const prefix = parts[0];\n      return Array.from(this.commands.keys())\n        .filter((name) => name.startsWith(prefix))\n        .sort();\n    }\n\n    // Complete subcommands and arguments\n    const commandName = parts[0];\n    const command = this.commands.get(commandName);\n\n    if (command) {\n      return this.completeForCommand(command, parts.slice(1));\n    }\n\n    return [];\n  }\n\n  private completeForCommand(command: REPLCommand, args: string[]): string[] {\n    // Basic completion for known commands\n    switch (command.name) {\n      case 'agent':\n        if (args.length === 1) {\n          return ['spawn', 'list', 'terminate', 'info'].filter((sub) => sub.startsWith(args[0]));\n        }\n        if (args[0] === 'spawn' && args.length === 2) {\n          return ['coordinator', 'researcher', 'implementer', 'analyst', 'custom'].filter((type) =>\n            type.startsWith(args[1]),\n          );\n        }\n        break;\n\n      case 'task':\n        if (args.length === 1) {\n          return ['create', 'list', 'status', 'cancel', 'workflow'].filter((sub) =>\n            sub.startsWith(args[0]),\n          );\n        }\n        if (args[0] === 'create' && args.length === 2) {\n          return ['research', 'implementation', 'analysis', 'coordination'].filter((type) =>\n            type.startsWith(args[1]),\n          );\n        }\n        break;\n\n      case 'session':\n        if (args.length === 1) {\n          return ['list', 'save', 'restore', 'delete', 'export', 'import'].filter((sub) =>\n            sub.startsWith(args[0]),\n          );\n        }\n        break;\n\n      case 'workflow':\n        if (args.length === 1) {\n          return ['run', 'validate', 'list', 'status', 'stop', 'template'].filter((sub) =>\n            sub.startsWith(args[0]),\n          );\n        }\n        break;\n    }\n\n    return [];\n  }\n}\n\n/**\n * Start the enhanced interactive REPL\n */\nexport async function startREPL(options: any = {}): Promise<void> {\n  const context: REPLContext = {\n    options,\n    history: [],\n    workingDirectory: process.cwd(),\n    connectionStatus: 'disconnected',\n    lastActivity: new Date(),\n  };\n\n  const history = new CommandHistory(options.historyFile);\n  const completer = new CommandCompleter();\n\n  const commands: REPLCommand[] = [\n    {\n      name: 'help',\n      aliases: ['h', '?'],\n      description: 'Show available commands or help for a specific command',\n      usage: 'help [command]',\n      examples: ['help', 'help agent', 'help task create'],\n      handler: async (args) => {\n        if (args.length === 0) {\n          showHelp(commands);\n        } else {\n          showCommandHelp(commands, args[0]);\n        }\n      },\n    },\n    {\n      name: 'status',\n      aliases: ['st'],\n      description: 'Show system status and connection info',\n      usage: 'status [component]',\n      examples: ['status', 'status orchestrator'],\n      handler: async (args, ctx) => {\n        await showSystemStatus(ctx, args[0]);\n      },\n    },\n    {\n      name: 'connect',\n      aliases: ['conn'],\n      description: 'Connect to Claude-Flow orchestrator',\n      usage: 'connect [host:port]',\n      examples: ['connect', 'connect localhost:3000'],\n      handler: async (args, ctx) => {\n        await connectToOrchestrator(ctx, args[0]);\n      },\n    },\n    {\n      name: 'agent',\n      description: 'Agent management (spawn, list, terminate, info)',\n      usage: 'agent <subcommand> [options]',\n      examples: [\n        'agent list',\n        'agent spawn researcher --name \"Research Agent\"',\n        'agent info agent-001',\n        'agent terminate agent-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleAgentCommand(args, ctx);\n      },\n    },\n    {\n      name: 'task',\n      description: 'Task management (create, list, status, cancel)',\n      usage: 'task <subcommand> [options]',\n      examples: [\n        'task list',\n        'task create research \"Find quantum computing papers\"',\n        'task status task-001',\n        'task cancel task-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleTaskCommand(args, ctx);\n      },\n    },\n    {\n      name: 'memory',\n      description: 'Memory operations (query, stats, export)',\n      usage: 'memory <subcommand> [options]',\n      examples: ['memory stats', 'memory query --agent agent-001', 'memory export memory.json'],\n      handler: async (args, ctx) => {\n        await handleMemoryCommand(args, ctx);\n      },\n    },\n    {\n      name: 'session',\n      description: 'Session management (save, restore, list)',\n      usage: 'session <subcommand> [options]',\n      examples: [\n        'session list',\n        'session save \"Development Session\"',\n        'session restore session-001',\n      ],\n      handler: async (args, ctx) => {\n        await handleSessionCommand(args, ctx);\n      },\n    },\n    {\n      name: 'workflow',\n      description: 'Workflow operations (run, list, status)',\n      usage: 'workflow <subcommand> [options]',\n      examples: ['workflow list', 'workflow run workflow.json', 'workflow status workflow-001'],\n      handler: async (args, ctx) => {\n        await handleWorkflowCommand(args, ctx);\n      },\n    },\n    {\n      name: 'monitor',\n      aliases: ['mon'],\n      description: 'Start monitoring mode',\n      usage: 'monitor [--interval seconds]',\n      examples: ['monitor', 'monitor --interval 5'],\n      handler: async (args) => {\n        console.log(chalk.cyan('Starting monitor mode...'));\n        console.log(chalk.gray('(This would start the live dashboard)'));\n      },\n    },\n    {\n      name: 'history',\n      aliases: ['hist'],\n      description: 'Show command history',\n      usage: 'history [--search query]',\n      examples: ['history', 'history --search agent'],\n      handler: async (args) => {\n        const searchQuery =\n          args.indexOf('--search') >= 0 ? args[args.indexOf('--search') + 1] : null;\n        const historyItems = searchQuery ? history.search(searchQuery) : history.get();\n\n        console.log(\n          chalk.cyan.bold(`Command History${searchQuery ? ` (search: ${searchQuery})` : ''}`),\n        );\n        console.log('─'.repeat(50));\n\n        if (historyItems.length === 0) {\n          console.log(chalk.gray('No commands in history'));\n          return;\n        }\n\n        const recent = historyItems.slice(-20); // Show last 20\n        recent.forEach((cmd, i) => {\n          const lineNumber = historyItems.length - recent.length + i + 1;\n          console.log(`${chalk.gray(lineNumber.toString().padStart(3))} ${cmd}`);\n        });\n      },\n    },\n    {\n      name: 'clear',\n      aliases: ['cls'],\n      description: 'Clear the screen',\n      handler: async () => {\n        console.clear();\n      },\n    },\n    {\n      name: 'cd',\n      description: 'Change working directory',\n      usage: 'cd <directory>',\n      examples: ['cd /path/to/project', 'cd ..'],\n      handler: async (args, ctx) => {\n        if (args.length === 0) {\n          console.log(ctx.workingDirectory);\n          return;\n        }\n\n        try {\n          const newDir = args[0] === '~' ? process.env['HOME'] || '/' : args[0];\n          process.chdir(newDir);\n          ctx.workingDirectory = process.cwd();\n          console.log(chalk.gray(`Changed to: ${ctx.workingDirectory}`));\n        } catch (error) {\n          console.error(\n            chalk.red('Error:'),\n            error instanceof Error ? error.message : String(error),\n          );\n        }\n      },\n    },\n    {\n      name: 'pwd',\n      description: 'Print working directory',\n      handler: async (_, ctx) => {\n        console.log(ctx.workingDirectory);\n      },\n    },\n    {\n      name: 'echo',\n      description: 'Echo arguments',\n      usage: 'echo <text>',\n      examples: ['echo \"Hello, world!\"'],\n      handler: async (args) => {\n        console.log(args.join(' '));\n      },\n    },\n    {\n      name: 'exit',\n      aliases: ['quit', 'q'],\n      description: 'Exit the REPL',\n      handler: async () => {\n        console.log(chalk.gray('Goodbye!'));\n        process.exit(0);\n      },\n    },\n  ];\n\n  // Set up command completion\n  completer.setCommands(commands);\n\n  // Show initial status\n  if (!options.quiet) {\n    await showSystemStatus(context);\n    console.log(chalk.gray('Type \"help\" for available commands or \"exit\" to quit.\\n'));\n  }\n\n  // Main REPL loop\n  while (true) {\n    try {\n      const promptString = createPrompt(context);\n      const { input } = await inquirer.prompt([\n        {\n          type: 'input',\n          name: 'input',\n          message: promptString,\n          transformer: (input: string) => input,\n        },\n      ]);\n\n      if (!input.trim()) {\n        continue;\n      }\n\n      // Add to history\n      history.add(input);\n      context.history.push(input);\n      context.lastActivity = new Date();\n\n      // Parse command\n      const args = parseCommand(input);\n      const [commandName, ...commandArgs] = args;\n\n      // Find and execute command\n      const command = commands.find(\n        (c) => c.name === commandName || (c.aliases && c.aliases.includes(commandName)),\n      );\n\n      if (command) {\n        try {\n          await command.handler(commandArgs, context);\n        } catch (error) {\n          console.error(\n            chalk.red('Command failed:'),\n            error instanceof Error ? error.message : String(error),\n          );\n        }\n      } else {\n        console.log(chalk.red(`Unknown command: ${commandName}`));\n        console.log(chalk.gray('Type \"help\" for available commands'));\n\n        // Suggest similar commands\n        const suggestions = findSimilarCommands(commandName, commands);\n        if (suggestions.length > 0) {\n          console.log(\n            chalk.gray('Did you mean:'),\n            suggestions.map((s) => chalk.cyan(s)).join(', '),\n          );\n        }\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes('EOF') || errorMessage.includes('interrupted')) {\n        // Ctrl+D or Ctrl+C pressed\n        console.log('\\n' + chalk.gray('Goodbye!'));\n        break;\n      }\n      console.error(chalk.red('REPL Error:'), errorMessage);\n    }\n  }\n}\n\nfunction createPrompt(context: REPLContext): string {\n  const statusIcon = getConnectionStatusIcon(context.connectionStatus);\n  const dir = context.workingDirectory.split('/').pop() || '/';\n\n  return `${statusIcon} ${chalk.cyan('claude-flow')}:${chalk.yellow(dir)}${chalk.white('>')} `;\n}\n\nfunction getConnectionStatusIcon(status: string): string {\n  switch (status) {\n    case 'connected':\n      return chalk.green('●');\n    case 'connecting':\n      return chalk.yellow('◐');\n    case 'disconnected':\n      return chalk.red('○');\n    default:\n      return chalk.gray('?');\n  }\n}\n\nfunction parseCommand(input: string): string[] {\n  // Simple command parsing - handle quoted strings\n  const args: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  let quoteChar = '';\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n\n    if (inQuotes) {\n      if (char === quoteChar) {\n        inQuotes = false;\n        quoteChar = '';\n      } else {\n        current += char;\n      }\n    } else {\n      if (char === '\"' || char === \"'\") {\n        inQuotes = true;\n        quoteChar = char;\n      } else if (char === ' ' || char === '\\t') {\n        if (current.trim()) {\n          args.push(current.trim());\n          current = '';\n        }\n      } else {\n        current += char;\n      }\n    }\n  }\n\n  if (current.trim()) {\n    args.push(current.trim());\n  }\n\n  return args;\n}\n\nfunction showHelp(commands: REPLCommand[]): void {\n  console.log(chalk.cyan.bold('Claude-Flow Interactive REPL'));\n  console.log('─'.repeat(50));\n  console.log();\n\n  console.log(chalk.white.bold('Available Commands:'));\n  console.log();\n\n  const table = new Table({\n    head: ['Command', 'Aliases', 'Description'],\n    style: { 'padding-left': 0, 'padding-right': 1, border: [] },\n  });\n\n  for (const cmd of commands) {\n    table.push([\n      chalk.cyan(cmd.name),\n      cmd.aliases ? chalk.gray(cmd.aliases.join(', ')) : '',\n      cmd.description,\n    ]);\n  }\n\n  console.log(table.toString());\n  console.log();\n\n  console.log(chalk.gray('Tips:'));\n  console.log(chalk.gray('• Use TAB for command completion'));\n  console.log(chalk.gray('• Use \"help <command>\" for detailed help'));\n  console.log(chalk.gray('• Use UP/DOWN arrows for command history'));\n  console.log(chalk.gray('• Use Ctrl+C or \"exit\" to quit'));\n}\n\nfunction showCommandHelp(commands: REPLCommand[], commandName: string): void {\n  const command = commands.find(\n    (c) => c.name === commandName || (c.aliases && c.aliases.includes(commandName)),\n  );\n\n  if (!command) {\n    console.log(chalk.red(`Unknown command: ${commandName}`));\n    return;\n  }\n\n  console.log(chalk.cyan.bold(`Command: ${command.name}`));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('Description:')} ${command.description}`);\n\n  if (command.aliases) {\n    console.log(`${chalk.white('Aliases:')} ${command.aliases.join(', ')}`);\n  }\n\n  if (command.usage) {\n    console.log(`${chalk.white('Usage:')} ${command.usage}`);\n  }\n\n  if (command.examples) {\n    console.log();\n    console.log(chalk.white.bold('Examples:'));\n    for (const example of command.examples) {\n      console.log(`  ${chalk.gray('$')} ${chalk.cyan(example)}`);\n    }\n  }\n}\n\nasync function showSystemStatus(context: REPLContext, component?: string): Promise<void> {\n  console.log(chalk.cyan.bold('System Status'));\n  console.log('─'.repeat(30));\n\n  const statusIcon = formatStatusIndicator(\n    context.connectionStatus === 'connected' ? 'success' : 'error',\n  );\n  console.log(`${statusIcon} Connection: ${context.connectionStatus}`);\n  console.log(`${chalk.white('Working Directory:')} ${context.workingDirectory}`);\n  console.log(`${chalk.white('Last Activity:')} ${context.lastActivity.toLocaleTimeString()}`);\n\n  if (context.currentSession) {\n    console.log(`${chalk.white('Current Session:')} ${context.currentSession}`);\n  }\n\n  console.log(`${chalk.white('Commands in History:')} ${context.history.length}`);\n\n  if (context.connectionStatus === 'disconnected') {\n    console.log();\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    console.log(chalk.gray('Use \"connect\" command to establish connection'));\n  }\n}\n\nasync function connectToOrchestrator(context: REPLContext, target?: string): Promise<void> {\n  const host = target || 'localhost:3000';\n\n  console.log(chalk.yellow(`Connecting to ${host}...`));\n  context.connectionStatus = 'connecting';\n\n  // Mock connection attempt\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  // Simulate connection result\n  const success = Math.random() > 0.3; // 70% success rate\n\n  if (success) {\n    context.connectionStatus = 'connected';\n    console.log(chalk.green('✓ Connected successfully'));\n  } else {\n    context.connectionStatus = 'disconnected';\n    console.log(chalk.red('✗ Connection failed'));\n    console.log(chalk.gray('Make sure Claude-Flow is running with: claude-flow start'));\n  }\n}\n\nasync function handleAgentCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    console.log(chalk.gray('Use \"connect\" to establish connection first'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: agent <spawn|list|terminate|info> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  switch (subcommand) {\n    case 'list':\n      await showAgentList();\n      break;\n    case 'spawn':\n      await handleAgentSpawn(args.slice(1));\n      break;\n    case 'terminate':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify agent ID'));\n      } else {\n        await handleAgentTerminate(args[1]);\n      }\n      break;\n    case 'info':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify agent ID'));\n      } else {\n        await showAgentInfo(args[1]);\n      }\n      break;\n    default:\n      console.log(chalk.red(`Unknown agent subcommand: ${subcommand}`));\n  }\n}\n\nasync function showAgentList(): Promise<void> {\n  // Mock agent data\n  const agents = [\n    { id: 'agent-001', name: 'Coordinator', type: 'coordinator', status: 'active', tasks: 2 },\n    { id: 'agent-002', name: 'Researcher', type: 'researcher', status: 'active', tasks: 5 },\n    { id: 'agent-003', name: 'Implementer', type: 'implementer', status: 'idle', tasks: 0 },\n  ];\n\n  console.log(chalk.cyan.bold(`Active Agents (${agents.length})`));\n  console.log('─'.repeat(50));\n\n  const table = new Table({\n    head: ['ID', 'Name', 'Type', 'Status', 'Tasks'],\n  });\n\n  for (const agent of agents) {\n    const statusIcon = formatStatusIndicator(agent.status);\n\n    table.push([\n      chalk.gray(agent.id),\n      chalk.white(agent.name),\n      chalk.cyan(agent.type),\n      `${statusIcon} ${agent.status}`,\n      agent.tasks.toString(),\n    ]);\n  }\n\n  console.log(table.toString());\n}\n\nasync function handleAgentSpawn(args: string[]): Promise<void> {\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: agent spawn <type> [name]'));\n    console.log(chalk.gray('Types: coordinator, researcher, implementer, analyst, custom'));\n    return;\n  }\n\n  const type = args[0];\n  const name =\n    args[1] ||\n    (await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Agent name:',\n        default: `${type}-agent`,\n      },\n    ])).name;\n\n  console.log(chalk.yellow('Spawning agent...'));\n\n  // Mock spawning\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  const agentId = generateId('agent');\n  console.log(chalk.green('✓ Agent spawned successfully'));\n  console.log(`${chalk.white('ID:')} ${agentId}`);\n  console.log(`${chalk.white('Name:')} ${name}`);\n  console.log(`${chalk.white('Type:')} ${type}`);\n}\n\nasync function handleAgentTerminate(agentId: string): Promise<void> {\n  const { confirmed } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'confirmed',\n      message: `Terminate agent ${agentId}?`,\n      default: false,\n    },\n  ]);\n\n  if (!confirmed) {\n    console.log(chalk.gray('Termination cancelled'));\n    return;\n  }\n\n  console.log(chalk.yellow('Terminating agent...'));\n  await new Promise((resolve) => setTimeout(resolve, 500));\n  console.log(chalk.green('✓ Agent terminated'));\n}\n\nasync function showAgentInfo(agentId: string): Promise<void> {\n  // Mock agent info\n  console.log(chalk.cyan.bold('Agent Information'));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('ID:')} ${agentId}`);\n  console.log(`${chalk.white('Name:')} Research Agent`);\n  console.log(`${chalk.white('Type:')} researcher`);\n  console.log(`${chalk.white('Status:')} ${formatStatusIndicator('success')} active`);\n  console.log(`${chalk.white('Uptime:')} ${formatDuration(3600000)}`);\n  console.log(`${chalk.white('Active Tasks:')} 3`);\n  console.log(`${chalk.white('Completed Tasks:')} 12`);\n}\n\nasync function handleTaskCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: task <create|list|status|cancel> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  switch (subcommand) {\n    case 'list':\n      await showTaskList();\n      break;\n    case 'create':\n      await handleTaskCreate(args.slice(1));\n      break;\n    case 'status':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify task ID'));\n      } else {\n        await showTaskStatus(args[1]);\n      }\n      break;\n    case 'cancel':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify task ID'));\n      } else {\n        await handleTaskCancel(args[1]);\n      }\n      break;\n    default:\n      console.log(chalk.red(`Unknown task subcommand: ${subcommand}`));\n  }\n}\n\nasync function showTaskList(): Promise<void> {\n  // Mock task data\n  const tasks = [\n    {\n      id: 'task-001',\n      type: 'research',\n      description: 'Research quantum computing',\n      status: 'running',\n      agent: 'agent-002',\n    },\n    {\n      id: 'task-002',\n      type: 'analysis',\n      description: 'Analyze research results',\n      status: 'pending',\n      agent: null,\n    },\n    {\n      id: 'task-003',\n      type: 'implementation',\n      description: 'Implement solution',\n      status: 'completed',\n      agent: 'agent-003',\n    },\n  ];\n\n  console.log(chalk.cyan.bold(`Tasks (${tasks.length})`));\n  console.log('─'.repeat(60));\n\n  const table = new Table({\n    head: ['ID', 'Type', 'Description', 'Status', 'Agent'],\n  });\n\n  for (const task of tasks) {\n    const statusIcon = formatStatusIndicator(task.status);\n\n    table.push([\n      chalk.gray(task.id),\n      chalk.white(task.type),\n      task.description.substring(0, 30) + (task.description.length > 30 ? '...' : ''),\n      `${statusIcon} ${task.status}`,\n      task.agent ? chalk.cyan(task.agent) : '-',\n    ]);\n  }\n\n  console.log(table.toString());\n}\n\nasync function handleTaskCreate(args: string[]): Promise<void> {\n  if (args.length < 2) {\n    console.log(chalk.gray('Usage: task create <type> <description>'));\n    return;\n  }\n\n  const type = args[0];\n  const description = args.slice(1).join(' ');\n\n  console.log(chalk.yellow('Creating task...'));\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  const taskId = generateId('task');\n  console.log(chalk.green('✓ Task created successfully'));\n  console.log(`${chalk.white('ID:')} ${taskId}`);\n  console.log(`${chalk.white('Type:')} ${type}`);\n  console.log(`${chalk.white('Description:')} ${description}`);\n}\n\nasync function showTaskStatus(taskId: string): Promise<void> {\n  console.log(chalk.cyan.bold('Task Status'));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('ID:')} ${taskId}`);\n  console.log(`${chalk.white('Type:')} research`);\n  console.log(`${chalk.white('Status:')} ${formatStatusIndicator('running')} running`);\n  console.log(`${chalk.white('Progress:')} ${formatProgressBar(65, 100, 20)} 65%`);\n  console.log(`${chalk.white('Agent:')} agent-002`);\n  console.log(`${chalk.white('Started:')} ${new Date().toLocaleTimeString()}`);\n}\n\nasync function handleTaskCancel(taskId: string): Promise<void> {\n  const { confirmed } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'confirmed',\n      message: `Cancel task ${taskId}?`,\n      default: false,\n    },\n  ]);\n\n  if (!confirmed) {\n    console.log(chalk.gray('Cancellation cancelled'));\n    return;\n  }\n\n  console.log(chalk.yellow('Cancelling task...'));\n  await new Promise((resolve) => setTimeout(resolve, 500));\n  console.log(chalk.green('✓ Task cancelled'));\n}\n\nasync function handleMemoryCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: memory <query|stats|export> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  switch (subcommand) {\n    case 'stats':\n      await showMemoryStats();\n      break;\n    case 'query':\n      console.log(chalk.yellow('Memory query functionality not yet implemented in REPL'));\n      break;\n    case 'export':\n      console.log(chalk.yellow('Memory export functionality not yet implemented in REPL'));\n      break;\n    default:\n      console.log(chalk.red(`Unknown memory subcommand: ${subcommand}`));\n  }\n}\n\nasync function showMemoryStats(): Promise<void> {\n  console.log(chalk.cyan.bold('Memory Statistics'));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('Total Entries:')} 1,247`);\n  console.log(`${chalk.white('Cache Size:')} 95 MB`);\n  console.log(`${chalk.white('Hit Rate:')} 94.2%`);\n  console.log(`${chalk.white('Backend:')} SQLite + Markdown`);\n}\n\nasync function handleSessionCommand(args: string[], context: REPLContext): Promise<void> {\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: session <list|save|restore> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  switch (subcommand) {\n    case 'list':\n      await showSessionList();\n      break;\n    case 'save':\n      await handleSessionSave(args.slice(1));\n      break;\n    case 'restore':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify session ID'));\n      } else {\n        await handleSessionRestore(args[1]);\n      }\n      break;\n    default:\n      console.log(chalk.red(`Unknown session subcommand: ${subcommand}`));\n  }\n}\n\nasync function showSessionList(): Promise<void> {\n  // Mock session data\n  const sessions = [\n    { id: 'session-001', name: 'Research Project', date: '2024-01-15', agents: 3, tasks: 8 },\n    { id: 'session-002', name: 'Development', date: '2024-01-14', agents: 2, tasks: 5 },\n  ];\n\n  console.log(chalk.cyan.bold(`Saved Sessions (${sessions.length})`));\n  console.log('─'.repeat(50));\n\n  const table = new Table({\n    head: ['ID', 'Name', 'Date', 'Agents', 'Tasks'],\n  });\n\n  for (const session of sessions) {\n    table.push([\n      chalk.gray(session.id),\n      chalk.white(session.name),\n      session.date,\n      session.agents.toString(),\n      session.tasks.toString(),\n    ]);\n  }\n\n  console.log(table.toString());\n}\n\nasync function handleSessionSave(args: string[]): Promise<void> {\n  const name =\n    args.length > 0\n      ? args.join(' ')\n      : (await inquirer.prompt([\n          {\n            type: 'input',\n            name: 'name',\n            message: 'Session name:',\n            default: `session-${new Date().toISOString().split('T')[0]}`,\n          },\n        ])).name;\n\n  console.log(chalk.yellow('Saving session...'));\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  const sessionId = generateId('session');\n  console.log(chalk.green('✓ Session saved successfully'));\n  console.log(`${chalk.white('ID:')} ${sessionId}`);\n  console.log(`${chalk.white('Name:')} ${name}`);\n}\n\nasync function handleSessionRestore(sessionId: string): Promise<void> {\n  const { confirmed } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'confirmed',\n      message: `Restore session ${sessionId}?`,\n      default: false,\n    },\n  ]);\n\n  if (!confirmed) {\n    console.log(chalk.gray('Restore cancelled'));\n    return;\n  }\n\n  console.log(chalk.yellow('Restoring session...'));\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n  console.log(chalk.green('✓ Session restored successfully'));\n}\n\nasync function handleWorkflowCommand(args: string[], context: REPLContext): Promise<void> {\n  if (context.connectionStatus !== 'connected') {\n    console.log(chalk.yellow('⚠ Not connected to orchestrator'));\n    return;\n  }\n\n  if (args.length === 0) {\n    console.log(chalk.gray('Usage: workflow <list|run|status> [options]'));\n    return;\n  }\n\n  const subcommand = args[0];\n  switch (subcommand) {\n    case 'list':\n      await showWorkflowList();\n      break;\n    case 'run':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify workflow file'));\n      } else {\n        await handleWorkflowRun(args[1]);\n      }\n      break;\n    case 'status':\n      if (args.length < 2) {\n        console.log(chalk.red('Please specify workflow ID'));\n      } else {\n        await showWorkflowStatus(args[1]);\n      }\n      break;\n    default:\n      console.log(chalk.red(`Unknown workflow subcommand: ${subcommand}`));\n  }\n}\n\nasync function showWorkflowList(): Promise<void> {\n  // Mock workflow data\n  const workflows = [\n    { id: 'workflow-001', name: 'Research Pipeline', status: 'running', progress: 60 },\n    { id: 'workflow-002', name: 'Data Analysis', status: 'completed', progress: 100 },\n  ];\n\n  console.log(chalk.cyan.bold(`Workflows (${workflows.length})`));\n  console.log('─'.repeat(50));\n\n  const table = new Table({\n    head: ['ID', 'Name', 'Status', 'Progress'],\n  });\n\n  for (const workflow of workflows) {\n    const statusIcon = formatStatusIndicator(workflow.status);\n    const progressBar = formatProgressBar(workflow.progress, 100, 15);\n\n    table.push([\n      chalk.gray(workflow.id),\n      chalk.white(workflow.name),\n      `${statusIcon} ${workflow.status}`,\n      `${progressBar} ${workflow.progress}%`,\n    ]);\n  }\n\n  console.log(table.toString());\n}\n\nasync function handleWorkflowRun(filename: string): Promise<void> {\n  try {\n    await fs.stat(filename);\n    console.log(chalk.yellow(`Running workflow: ${filename}`));\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    const workflowId = generateId('workflow');\n    console.log(chalk.green('✓ Workflow started successfully'));\n    console.log(`${chalk.white('ID:')} ${workflowId}`);\n  } catch {\n    console.log(chalk.red(`Workflow file not found: ${filename}`));\n  }\n}\n\nasync function showWorkflowStatus(workflowId: string): Promise<void> {\n  console.log(chalk.cyan.bold('Workflow Status'));\n  console.log('─'.repeat(30));\n  console.log(`${chalk.white('ID:')} ${workflowId}`);\n  console.log(`${chalk.white('Name:')} Research Pipeline`);\n  console.log(`${chalk.white('Status:')} ${formatStatusIndicator('running')} running`);\n  console.log(`${chalk.white('Progress:')} ${formatProgressBar(75, 100, 20)} 75%`);\n  console.log(`${chalk.white('Tasks:')} 6/8 completed`);\n  console.log(`${chalk.white('Started:')} ${new Date().toLocaleTimeString()}`);\n}\n\nfunction findSimilarCommands(input: string, commands: REPLCommand[]): string[] {\n  const allNames = commands.flatMap((c) => [c.name, ...(c.aliases || [])]);\n\n  return allNames\n    .filter((name) => {\n      // Simple similarity check - could use Levenshtein distance\n      const commonChars = input.split('').filter((char) => name.includes(char)).length;\n      return commonChars >= Math.min(2, input.length / 2);\n    })\n    .slice(0, 3); // Top 3 suggestions\n}\n"],"names":["promises","fs","inquirer","chalk","Table","generateId","formatStatusIndicator","formatDuration","formatProgressBar","CommandHistory","history","maxSize","historyFile","loadHistory","add","command","trim","length","push","slice","saveHistory","get","search","query","filter","cmd","includes","content","readFile","split","line","writeFile","join","CommandCompleter","commands","Map","setCommands","clear","set","name","aliases","alias","complete","input","parts","prefix","Array","from","keys","startsWith","sort","commandName","completeForCommand","args","sub","type","startREPL","options","context","workingDirectory","process","cwd","connectionStatus","lastActivity","Date","completer","description","usage","examples","handler","showHelp","showCommandHelp","ctx","showSystemStatus","connectToOrchestrator","handleAgentCommand","handleTaskCommand","handleMemoryCommand","handleSessionCommand","handleWorkflowCommand","console","log","cyan","gray","searchQuery","indexOf","historyItems","bold","repeat","recent","forEach","i","lineNumber","toString","padStart","newDir","env","chdir","error","red","Error","message","String","_","exit","quiet","promptString","createPrompt","prompt","transformer","parseCommand","commandArgs","find","c","suggestions","findSimilarCommands","map","s","errorMessage","statusIcon","getConnectionStatusIcon","dir","pop","yellow","white","status","green","current","inQuotes","quoteChar","char","table","head","style","border","example","component","toLocaleTimeString","currentSession","target","host","Promise","resolve","setTimeout","success","Math","random","subcommand","showAgentList","handleAgentSpawn","handleAgentTerminate","showAgentInfo","agents","id","tasks","agent","default","agentId","confirmed","showTaskList","handleTaskCreate","showTaskStatus","handleTaskCancel","task","substring","taskId","showMemoryStats","showSessionList","handleSessionSave","handleSessionRestore","sessions","date","session","toISOString","sessionId","showWorkflowList","handleWorkflowRun","showWorkflowStatus","workflows","progress","workflow","progressBar","filename","stat","workflowId","allNames","flatMap","commonChars","min"],"mappings":"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"}