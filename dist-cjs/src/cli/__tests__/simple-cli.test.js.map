{"version":3,"sources":["../../../../src/cli/__tests__/simple-cli.test.js"],"sourcesContent":["/**\n * Tests for simple-cli.js\n */\n\nimport { jest } from '@jest/globals';\nimport { parseFlags } from '../utils.js';\n\n// Mock the command registry\njest.mock('../command-registry.js', () => ({\n  executeCommand: jest.fn(),\n  hasCommand: jest.fn(),\n  showCommandHelp: jest.fn(),\n  showAllCommands: jest.fn(),\n  listCommands: jest.fn(() => ['init', 'agent', 'task', 'memory', 'swarm']),\n  commandRegistry: new Map(),\n  registerCoreCommands: jest.fn(),\n}));\n\n// Mock node-compat\njest.mock('../node-compat.js', () => ({\n  args: () => process.argv.slice(2),\n  cwd: () => process.cwd(),\n  isMainModule: () => true,\n}));\n\ndescribe('Claude-Flow CLI', () => {\n  let originalArgv;\n  let originalExit;\n  let consoleLogSpy;\n  let consoleErrorSpy;\n\n  beforeEach(() => {\n    originalArgv = process.argv;\n    originalExit = process.exit;\n    process.exit = jest.fn();\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.exit = originalExit;\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('Help output', () => {\n    test('should show help when no arguments provided', async () => {\n      process.argv = ['node', 'claude-flow'];\n\n      const { executeCommand, hasCommand, showAllCommands } = await import(\n        '../command-registry.js'\n      );\n      hasCommand.mockReturnValue(false);\n\n      // Import after mocks are set up\n      await import('../simple-cli.js');\n\n      expect(consoleLogSpy).toHaveBeenCalled();\n      const output = consoleLogSpy.mock.calls.join('\\n');\n      expect(output).toContain('Claude-Flow v2.0.0');\n      expect(output).toContain('USAGE:');\n      expect(output).toContain('claude-flow <command> [options]');\n    });\n\n    test('should show help for --help flag', async () => {\n      process.argv = ['node', 'claude-flow', '--help'];\n\n      const { hasCommand } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(false);\n\n      await import('../simple-cli.js');\n\n      expect(consoleLogSpy).toHaveBeenCalled();\n      const output = consoleLogSpy.mock.calls.join('\\n');\n      expect(output).toContain('Claude-Flow v2.0.0');\n    });\n\n    test('should show version for --version flag', async () => {\n      process.argv = ['node', 'claude-flow', '--version'];\n\n      await import('../simple-cli.js');\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('2.0.0');\n      expect(process.exit).toHaveBeenCalledWith(0);\n    });\n  });\n\n  describe('Command execution', () => {\n    test('should execute valid command', async () => {\n      process.argv = ['node', 'claude-flow', 'init', '--sparc'];\n\n      const { executeCommand, hasCommand } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(true);\n      executeCommand.mockResolvedValue(undefined);\n\n      await import('../simple-cli.js');\n\n      expect(hasCommand).toHaveBeenCalledWith('init');\n      expect(executeCommand).toHaveBeenCalledWith('init', ['--sparc'], {});\n    });\n\n    test('should handle command with multiple arguments', async () => {\n      process.argv = [\n        'node',\n        'claude-flow',\n        'swarm',\n        'Build a REST API',\n        '--strategy',\n        'development',\n      ];\n\n      const { executeCommand, hasCommand } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(true);\n      executeCommand.mockResolvedValue(undefined);\n\n      await import('../simple-cli.js');\n\n      expect(hasCommand).toHaveBeenCalledWith('swarm');\n      expect(executeCommand).toHaveBeenCalledWith('swarm', ['Build a REST API'], {\n        strategy: 'development',\n      });\n    });\n\n    test('should show error for unknown command', async () => {\n      process.argv = ['node', 'claude-flow', 'invalid-command'];\n\n      const { hasCommand, listCommands } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(false);\n\n      await import('../simple-cli.js');\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Unknown command: invalid-command'),\n      );\n      expect(consoleLogSpy).toHaveBeenCalledWith(expect.stringContaining('Available commands:'));\n    });\n  });\n\n  describe('Flag parsing', () => {\n    test('should parse boolean flags correctly', () => {\n      const flags = parseFlags(['--force', '--verbose']);\n      expect(flags).toEqual({ force: true, verbose: true });\n    });\n\n    test('should parse value flags correctly', () => {\n      const flags = parseFlags(['--port', '8080', '--name', 'test']);\n      expect(flags).toEqual({ port: '8080', name: 'test' });\n    });\n\n    test('should handle mixed flags and arguments', () => {\n      const flags = parseFlags(['arg1', '--flag', 'value', 'arg2', '--bool']);\n      expect(flags).toEqual({ flag: 'value', bool: true });\n    });\n\n    test('should handle flags with equals sign', () => {\n      const flags = parseFlags(['--port=8080', '--name=test']);\n      expect(flags).toEqual({ port: '8080', name: 'test' });\n    });\n  });\n\n  describe('Error handling', () => {\n    test('should handle command execution errors gracefully', async () => {\n      process.argv = ['node', 'claude-flow', 'init'];\n\n      const { executeCommand, hasCommand } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(true);\n      executeCommand.mockRejectedValue(new Error('Test error'));\n\n      await import('../simple-cli.js');\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Error executing command:'),\n      );\n      expect(process.exit).toHaveBeenCalledWith(1);\n    });\n\n    test('should handle missing required arguments', async () => {\n      process.argv = ['node', 'claude-flow', 'agent'];\n\n      const { executeCommand, hasCommand } = await import('../command-registry.js');\n      hasCommand.mockReturnValue(true);\n      executeCommand.mockRejectedValue(new Error('Missing required argument'));\n\n      await import('../simple-cli.js');\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Missing required argument'),\n      );\n    });\n  });\n});\n"],"names":["jest","parseFlags","mock","executeCommand","fn","hasCommand","showCommandHelp","showAllCommands","listCommands","commandRegistry","Map","registerCoreCommands","args","process","argv","slice","cwd","isMainModule","describe","originalArgv","originalExit","consoleLogSpy","consoleErrorSpy","beforeEach","exit","spyOn","console","mockImplementation","clearAllMocks","afterEach","mockRestore","test","mockReturnValue","expect","toHaveBeenCalled","output","calls","join","toContain","toHaveBeenCalledWith","mockResolvedValue","undefined","strategy","stringContaining","flags","toEqual","force","verbose","port","name","flag","bool","mockRejectedValue","Error"],"mappings":"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"}