{"version":3,"sources":["../../../../src/cli/__tests__/command-registry.test.js"],"sourcesContent":["/**\n * Tests for command-registry.js\n */\n\nimport { jest } from '@jest/globals';\nimport {\n  commandRegistry,\n  registerCoreCommands,\n  executeCommand,\n  hasCommand,\n  showCommandHelp,\n  showAllCommands,\n  listCommands,\n} from '../command-registry.js';\n\n// Mock all command modules\njest.mock('../simple-commands/init.js', () => ({\n  initCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/memory.js', () => ({\n  memoryCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/agent.js', () => ({\n  agentCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/task.js', () => ({\n  taskCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/swarm.js', () => ({\n  swarmCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/config.js', () => ({\n  configCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/status.js', () => ({\n  statusCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/mcp.js', () => ({\n  mcpCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/monitor.js', () => ({\n  monitorCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/start.js', () => ({\n  startCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/sparc.js', () => ({\n  sparcCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../simple-commands/batch-manager.js', () => ({\n  batchManagerCommand: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../commands/ruv-swarm.js', () => ({\n  ruvSwarmAction: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('../commands/config-integration.js', () => ({\n  configIntegrationAction: jest.fn().mockResolvedValue(undefined),\n}));\n\ndescribe('Command Registry', () => {\n  let consoleLogSpy;\n  let consoleErrorSpy;\n\n  beforeEach(() => {\n    commandRegistry.clear();\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('registerCoreCommands', () => {\n    test('should register all core commands', () => {\n      registerCoreCommands();\n\n      const expectedCommands = [\n        'init',\n        'start',\n        'memory',\n        'sparc',\n        'agent',\n        'task',\n        'config',\n        'status',\n        'mcp',\n        'monitor',\n        'swarm',\n        'batch-manager',\n        'github',\n        'docker',\n        'ruv-swarm',\n        'config-integration',\n      ];\n\n      expectedCommands.forEach((cmd) => {\n        expect(commandRegistry.has(cmd)).toBe(true);\n      });\n    });\n\n    test('should register commands with correct metadata', () => {\n      registerCoreCommands();\n\n      const initCmd = commandRegistry.get('init');\n      expect(initCmd).toHaveProperty('handler');\n      expect(initCmd).toHaveProperty('description');\n      expect(initCmd).toHaveProperty('usage');\n      expect(initCmd).toHaveProperty('examples');\n      expect(initCmd.description).toContain('Initialize Claude Code integration');\n    });\n  });\n\n  describe('hasCommand', () => {\n    beforeEach(() => {\n      registerCoreCommands();\n    });\n\n    test('should return true for registered commands', () => {\n      expect(hasCommand('init')).toBe(true);\n      expect(hasCommand('swarm')).toBe(true);\n      expect(hasCommand('agent')).toBe(true);\n    });\n\n    test('should return false for unregistered commands', () => {\n      expect(hasCommand('nonexistent')).toBe(false);\n      expect(hasCommand('')).toBe(false);\n      expect(hasCommand(null)).toBe(false);\n    });\n  });\n\n  describe('executeCommand', () => {\n    beforeEach(() => {\n      registerCoreCommands();\n    });\n\n    test('should execute command handler with arguments', async () => {\n      const { initCommand } = await import('../simple-commands/init.js');\n\n      await executeCommand('init', ['--sparc'], { force: true });\n\n      expect(initCommand).toHaveBeenCalledWith(['--sparc'], { force: true });\n    });\n\n    test('should throw error for unknown command', async () => {\n      await expect(executeCommand('unknown', [], {})).rejects.toThrow('Unknown command: unknown');\n    });\n\n    test('should handle command execution errors', async () => {\n      const { swarmCommand } = await import('../simple-commands/swarm.js');\n      swarmCommand.mockRejectedValue(new Error('Command failed'));\n\n      await expect(executeCommand('swarm', ['test'], {})).rejects.toThrow('Command failed');\n    });\n  });\n\n  describe('showCommandHelp', () => {\n    beforeEach(() => {\n      registerCoreCommands();\n    });\n\n    test('should display help for existing command', () => {\n      showCommandHelp('init');\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n      expect(output).toContain('init');\n      expect(output).toContain('Initialize Claude Code integration');\n      expect(output).toContain('Usage:');\n      expect(output).toContain('Examples:');\n    });\n\n    test('should show error for unknown command', () => {\n      showCommandHelp('unknown');\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Unknown command: unknown'),\n      );\n    });\n  });\n\n  describe('showAllCommands', () => {\n    test('should display all registered commands grouped by category', () => {\n      registerCoreCommands();\n      showAllCommands();\n\n      const output = consoleLogSpy.mock.calls.flat().join('\\n');\n\n      // Check for categories\n      expect(output).toContain('SWARM INTELLIGENCE COMMANDS');\n      expect(output).toContain('WORKFLOW AUTOMATION');\n      expect(output).toContain('DEVELOPMENT & TESTING');\n      expect(output).toContain('INFRASTRUCTURE');\n\n      // Check for specific commands\n      expect(output).toContain('swarm');\n      expect(output).toContain('agent');\n      expect(output).toContain('task');\n      expect(output).toContain('github');\n      expect(output).toContain('docker');\n    });\n  });\n\n  describe('listCommands', () => {\n    test('should return array of all command names', () => {\n      registerCoreCommands();\n      const commands = listCommands();\n\n      expect(Array.isArray(commands)).toBe(true);\n      expect(commands).toContain('init');\n      expect(commands).toContain('swarm');\n      expect(commands).toContain('agent');\n      expect(commands.length).toBeGreaterThan(10);\n    });\n\n    test('should return empty array when no commands registered', () => {\n      commandRegistry.clear();\n      const commands = listCommands();\n\n      expect(commands).toEqual([]);\n    });\n  });\n});\n"],"names":["jest","commandRegistry","registerCoreCommands","executeCommand","hasCommand","showCommandHelp","showAllCommands","listCommands","mock","initCommand","fn","mockResolvedValue","undefined","memoryCommand","agentCommand","taskCommand","swarmCommand","configCommand","statusCommand","mcpCommand","monitorCommand","startCommand","sparcCommand","batchManagerCommand","ruvSwarmAction","configIntegrationAction","describe","consoleLogSpy","consoleErrorSpy","beforeEach","clear","spyOn","console","mockImplementation","clearAllMocks","afterEach","mockRestore","test","expectedCommands","forEach","cmd","expect","has","toBe","initCmd","get","toHaveProperty","description","toContain","force","toHaveBeenCalledWith","rejects","toThrow","mockRejectedValue","Error","output","calls","flat","join","stringContaining","commands","Array","isArray","length","toBeGreaterThan","toEqual"],"mappings":"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"}