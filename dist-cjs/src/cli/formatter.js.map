{"version":3,"sources":["../../../src/cli/formatter.ts"],"sourcesContent":["/**\n * Output formatting utilities for CLI\n */\n\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\n// Using cli-table3 instead of @cliffy/table for Node.js compatibility\nimport type { AgentProfile, Task, MemoryEntry, HealthStatus } from '../utils/types.js';\nimport * as process from 'process';\n\n/**\n * Formats an error for display\n */\nexport function formatError(error: unknown): string {\n  if (error instanceof Error) {\n    let message = error instanceof Error ? error.message : String(error);\n\n    if ('code' in error) {\n      message = `[${(error as any).code}] ${message}`;\n    }\n\n    if ('details' in error && (error as any).details) {\n      message += '\\n' + chalk.gray('Details: ' + JSON.stringify((error as any).details, null, 2));\n    }\n\n    return message;\n  }\n\n  return String(error);\n}\n\n/**\n * Formats an agent profile for display\n */\nexport function formatAgent(agent: AgentProfile): string {\n  const lines = [\n    chalk.cyan.bold(`Agent: ${agent.name}`),\n    chalk.gray(`ID: ${agent.id}`),\n    chalk.gray(`Type: ${agent.type}`),\n    chalk.gray(`Priority: ${agent.priority}`),\n    chalk.gray(`Max Tasks: ${agent.maxConcurrentTasks}`),\n    chalk.gray(`Capabilities: ${agent.capabilities.join(', ')}`),\n  ];\n\n  return lines.join('\\n');\n}\n\n/**\n * Formats a task for display\n */\nexport function formatTask(task: Task): string {\n  const statusColor =\n    {\n      pending: chalk.gray,\n      queued: chalk.yellow,\n      assigned: chalk.blue,\n      running: chalk.cyan,\n      completed: chalk.green,\n      failed: chalk.red,\n      cancelled: chalk.magenta,\n    }[task.status] || chalk.white;\n\n  const lines = [\n    chalk.yellow.bold(`Task: ${task.description}`),\n    chalk.gray(`ID: ${task.id}`),\n    chalk.gray(`Type: ${task.type}`),\n    statusColor(`Status: ${task.status}`),\n    chalk.gray(`Priority: ${task.priority}`),\n  ];\n\n  if (task.assignedAgent) {\n    lines.push(chalk.gray(`Assigned to: ${task.assignedAgent}`));\n  }\n\n  if (task.dependencies.length > 0) {\n    lines.push(chalk.gray(`Dependencies: ${task.dependencies.join(', ')}`));\n  }\n\n  if (task.error) {\n    lines.push(chalk.red(`Error: ${task.error}`));\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Formats a memory entry for display\n */\nexport function formatMemoryEntry(entry: MemoryEntry): string {\n  const lines = [\n    chalk.magenta.bold(`Memory Entry: ${entry.type}`),\n    chalk.gray(`ID: ${entry.id}`),\n    chalk.gray(`Agent: ${entry.agentId}`),\n    chalk.gray(`Session: ${entry.sessionId}`),\n    chalk.gray(`Timestamp: ${entry.timestamp.toISOString()}`),\n    chalk.gray(`Version: ${entry.version}`),\n  ];\n\n  if (entry.tags.length > 0) {\n    lines.push(chalk.gray(`Tags: ${entry.tags.join(', ')}`));\n  }\n\n  lines.push('', chalk.white('Content:'), entry.content);\n\n  return lines.join('\\n');\n}\n\n/**\n * Formats health status for display\n */\nexport function formatHealthStatus(health: HealthStatus): string {\n  const statusColor = {\n    healthy: chalk.green,\n    degraded: chalk.yellow,\n    unhealthy: chalk.red,\n  }[health.status];\n\n  const lines = [\n    statusColor.bold(`System Status: ${health.status.toUpperCase()}`),\n    chalk.gray(`Checked at: ${health.timestamp.toISOString()}`),\n    '',\n    chalk.cyan.bold('Components:'),\n  ];\n\n  for (const [name, component] of Object.entries(health.components)) {\n    const compColor = {\n      healthy: chalk.green,\n      degraded: chalk.yellow,\n      unhealthy: chalk.red,\n    }[component.status];\n\n    lines.push(compColor(`  ${name}: ${component.status}`));\n\n    if (component.error) {\n      lines.push(chalk.red(`    Error: ${component.error}`));\n    }\n\n    if (component.metrics) {\n      for (const [metric, value] of Object.entries(component.metrics)) {\n        lines.push(chalk.gray(`    ${metric}: ${value}`));\n      }\n    }\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Creates a table for agent listing\n */\nexport function createAgentTable(agents: AgentProfile[]): any {\n  const table = new Table({\n    head: ['ID', 'Name', 'Type', 'Priority', 'Max Tasks'],\n  });\n\n  for (const agent of agents) {\n    table.push([\n      agent.id,\n      agent.name,\n      agent.type,\n      agent.priority.toString(),\n      agent.maxConcurrentTasks.toString(),\n    ]);\n  }\n\n  return table;\n}\n\n/**\n * Creates a table for task listing\n */\nexport function createTaskTable(tasks: Task[]): any {\n  const table = new Table({\n    head: ['ID', 'Type', 'Description', 'Status', 'Agent'],\n  });\n\n  for (const task of tasks) {\n    const statusCell =\n      {\n        pending: chalk.gray(task.status),\n        queued: chalk.yellow(task.status),\n        assigned: chalk.blue(task.status),\n        running: chalk.cyan(task.status),\n        completed: chalk.green(task.status),\n        failed: chalk.red(task.status),\n        cancelled: chalk.magenta(task.status),\n      }[task.status] || task.status;\n\n    table.push([\n      task.id,\n      task.type,\n      task.description.substring(0, 40) + (task.description.length > 40 ? '...' : ''),\n      statusCell,\n      task.assignedAgent || '-',\n    ]);\n  }\n\n  return table;\n}\n\n/**\n * Formats duration in human-readable form\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) {\n    return `${ms}ms`;\n  }\n\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) {\n    return `${days}d ${hours % 24}h`;\n  }\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  }\n  if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  }\n\n  return `${seconds}s`;\n}\n\n/**\n * Displays the Claude-Flow banner\n */\nexport function displayBanner(version: string): void {\n  const banner = `\n${chalk.cyan.bold('╔══════════════════════════════════════════════════════════════╗')}\n${chalk.cyan.bold('║')}             ${chalk.white.bold('🧠 Claude-Flow')} ${chalk.gray('v' + version)}                        ${chalk.cyan.bold('║')}\n${chalk.cyan.bold('║')}          ${chalk.gray('Advanced AI Agent Orchestration')}               ${chalk.cyan.bold('║')}\n${chalk.cyan.bold('╚══════════════════════════════════════════════════════════════╝')}\n`;\n  console.log(banner);\n}\n\n/**\n * Displays detailed version information\n */\nexport function displayVersion(version: string, buildDate: string): void {\n  const info = [\n    chalk.cyan.bold('Claude-Flow Version Information'),\n    '',\n    chalk.white('Version:    ') + chalk.yellow(version),\n    chalk.white('Build Date: ') + chalk.yellow(buildDate),\n    chalk.white('Runtime:    ') + chalk.yellow('Node.js ' + process.version),\n    chalk.white('Platform:   ') + chalk.yellow(process.platform),\n    chalk.white('Arch:       ') + chalk.yellow(process.arch),\n    '',\n    chalk.gray('Components:'),\n    chalk.white('  • Multi-Agent Orchestration'),\n    chalk.white('  • Memory Management'),\n    chalk.white('  • Terminal Integration'),\n    chalk.white('  • MCP Server'),\n    chalk.white('  • Task Coordination'),\n    '',\n    chalk.blue('Homepage: ') + chalk.underline('https://github.com/ruvnet/claude-flow'),\n  ];\n\n  console.log(info.join('\\n'));\n}\n\n/**\n * Formats a progress bar\n */\nexport function formatProgressBar(\n  current: number,\n  total: number,\n  width: number = 40,\n  label?: string,\n): string {\n  const percentage = Math.min(100, (current / total) * 100);\n  const filled = Math.floor((percentage / 100) * width);\n  const empty = width - filled;\n\n  const bar = chalk.green('█'.repeat(filled)) + chalk.gray('░'.repeat(empty));\n  const percent = percentage.toFixed(1).padStart(5) + '%';\n\n  let result = `[${bar}] ${percent}`;\n  if (label) {\n    result = `${label}: ${result}`;\n  }\n\n  return result;\n}\n\n/**\n * Creates a status indicator\n */\nexport function formatStatusIndicator(status: string): string {\n  const indicators = {\n    success: chalk.green('✓'),\n    error: chalk.red('✗'),\n    warning: chalk.yellow('⚠'),\n    info: chalk.blue('ℹ'),\n    running: chalk.cyan('⟳'),\n    pending: chalk.gray('○'),\n  };\n\n  return indicators[status as keyof typeof indicators] || status;\n}\n\n/**\n * Formats a success message\n */\nexport function formatSuccess(message: string): string {\n  return chalk.green('✓') + ' ' + chalk.white(message);\n}\n\n/**\n * Formats an info message\n */\nexport function formatInfo(message: string): string {\n  return chalk.blue('ℹ') + ' ' + chalk.white(message);\n}\n\n/**\n * Formats a warning message\n */\nexport function formatWarning(message: string): string {\n  return chalk.yellow('⚠') + ' ' + chalk.white(message);\n}\n\n/**\n * Formats a spinner with message\n */\nexport function formatSpinner(message: string, frame: number = 0): string {\n  const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n  const spinner = chalk.cyan(frames[frame % frames.length]);\n  return `${spinner} ${message}`;\n}\n"],"names":["chalk","Table","process","formatError","error","Error","message","String","code","details","gray","JSON","stringify","formatAgent","agent","lines","cyan","bold","name","id","type","priority","maxConcurrentTasks","capabilities","join","formatTask","task","statusColor","pending","queued","yellow","assigned","blue","running","completed","green","failed","red","cancelled","magenta","status","white","description","assignedAgent","push","dependencies","length","formatMemoryEntry","entry","agentId","sessionId","timestamp","toISOString","version","tags","content","formatHealthStatus","health","healthy","degraded","unhealthy","toUpperCase","component","Object","entries","components","compColor","metrics","metric","value","createAgentTable","agents","table","head","toString","createTaskTable","tasks","statusCell","substring","formatDuration","ms","seconds","Math","floor","minutes","hours","days","displayBanner","banner","console","log","displayVersion","buildDate","info","platform","arch","underline","formatProgressBar","current","total","width","label","percentage","min","filled","empty","bar","repeat","percent","toFixed","padStart","result","formatStatusIndicator","indicators","success","warning","formatSuccess","formatInfo","formatWarning","formatSpinner","frame","frames","spinner"],"mappings":"AAIA,OAAOA,WAAW,QAAQ;AAC1B,OAAOC,WAAW,aAAa;AAG/B,YAAYC,aAAa,UAAU;AAKnC,OAAO,SAASC,YAAYC,KAAc;IACxC,IAAIA,iBAAiBC,OAAO;QAC1B,IAAIC,UAAUF,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;QAE9D,IAAI,UAAUA,OAAO;YACnBE,UAAU,CAAC,CAAC,EAAE,AAACF,MAAcI,IAAI,CAAC,EAAE,EAAEF,SAAS;QACjD;QAEA,IAAI,aAAaF,SAAS,AAACA,MAAcK,OAAO,EAAE;YAChDH,WAAW,OAAON,MAAMU,IAAI,CAAC,cAAcC,KAAKC,SAAS,CAAC,AAACR,MAAcK,OAAO,EAAE,MAAM;QAC1F;QAEA,OAAOH;IACT;IAEA,OAAOC,OAAOH;AAChB;AAKA,OAAO,SAASS,YAAYC,KAAmB;IAC7C,MAAMC,QAAQ;QACZf,MAAMgB,IAAI,CAACC,IAAI,CAAC,CAAC,OAAO,EAAEH,MAAMI,IAAI,EAAE;QACtClB,MAAMU,IAAI,CAAC,CAAC,IAAI,EAAEI,MAAMK,EAAE,EAAE;QAC5BnB,MAAMU,IAAI,CAAC,CAAC,MAAM,EAAEI,MAAMM,IAAI,EAAE;QAChCpB,MAAMU,IAAI,CAAC,CAAC,UAAU,EAAEI,MAAMO,QAAQ,EAAE;QACxCrB,MAAMU,IAAI,CAAC,CAAC,WAAW,EAAEI,MAAMQ,kBAAkB,EAAE;QACnDtB,MAAMU,IAAI,CAAC,CAAC,cAAc,EAAEI,MAAMS,YAAY,CAACC,IAAI,CAAC,OAAO;KAC5D;IAED,OAAOT,MAAMS,IAAI,CAAC;AACpB;AAKA,OAAO,SAASC,WAAWC,IAAU;IACnC,MAAMC,cACJ;QACEC,SAAS5B,MAAMU,IAAI;QACnBmB,QAAQ7B,MAAM8B,MAAM;QACpBC,UAAU/B,MAAMgC,IAAI;QACpBC,SAASjC,MAAMgB,IAAI;QACnBkB,WAAWlC,MAAMmC,KAAK;QACtBC,QAAQpC,MAAMqC,GAAG;QACjBC,WAAWtC,MAAMuC,OAAO;IAC1B,CAAC,CAACb,KAAKc,MAAM,CAAC,IAAIxC,MAAMyC,KAAK;IAE/B,MAAM1B,QAAQ;QACZf,MAAM8B,MAAM,CAACb,IAAI,CAAC,CAAC,MAAM,EAAES,KAAKgB,WAAW,EAAE;QAC7C1C,MAAMU,IAAI,CAAC,CAAC,IAAI,EAAEgB,KAAKP,EAAE,EAAE;QAC3BnB,MAAMU,IAAI,CAAC,CAAC,MAAM,EAAEgB,KAAKN,IAAI,EAAE;QAC/BO,YAAY,CAAC,QAAQ,EAAED,KAAKc,MAAM,EAAE;QACpCxC,MAAMU,IAAI,CAAC,CAAC,UAAU,EAAEgB,KAAKL,QAAQ,EAAE;KACxC;IAED,IAAIK,KAAKiB,aAAa,EAAE;QACtB5B,MAAM6B,IAAI,CAAC5C,MAAMU,IAAI,CAAC,CAAC,aAAa,EAAEgB,KAAKiB,aAAa,EAAE;IAC5D;IAEA,IAAIjB,KAAKmB,YAAY,CAACC,MAAM,GAAG,GAAG;QAChC/B,MAAM6B,IAAI,CAAC5C,MAAMU,IAAI,CAAC,CAAC,cAAc,EAAEgB,KAAKmB,YAAY,CAACrB,IAAI,CAAC,OAAO;IACvE;IAEA,IAAIE,KAAKtB,KAAK,EAAE;QACdW,MAAM6B,IAAI,CAAC5C,MAAMqC,GAAG,CAAC,CAAC,OAAO,EAAEX,KAAKtB,KAAK,EAAE;IAC7C;IAEA,OAAOW,MAAMS,IAAI,CAAC;AACpB;AAKA,OAAO,SAASuB,kBAAkBC,KAAkB;IAClD,MAAMjC,QAAQ;QACZf,MAAMuC,OAAO,CAACtB,IAAI,CAAC,CAAC,cAAc,EAAE+B,MAAM5B,IAAI,EAAE;QAChDpB,MAAMU,IAAI,CAAC,CAAC,IAAI,EAAEsC,MAAM7B,EAAE,EAAE;QAC5BnB,MAAMU,IAAI,CAAC,CAAC,OAAO,EAAEsC,MAAMC,OAAO,EAAE;QACpCjD,MAAMU,IAAI,CAAC,CAAC,SAAS,EAAEsC,MAAME,SAAS,EAAE;QACxClD,MAAMU,IAAI,CAAC,CAAC,WAAW,EAAEsC,MAAMG,SAAS,CAACC,WAAW,IAAI;QACxDpD,MAAMU,IAAI,CAAC,CAAC,SAAS,EAAEsC,MAAMK,OAAO,EAAE;KACvC;IAED,IAAIL,MAAMM,IAAI,CAACR,MAAM,GAAG,GAAG;QACzB/B,MAAM6B,IAAI,CAAC5C,MAAMU,IAAI,CAAC,CAAC,MAAM,EAAEsC,MAAMM,IAAI,CAAC9B,IAAI,CAAC,OAAO;IACxD;IAEAT,MAAM6B,IAAI,CAAC,IAAI5C,MAAMyC,KAAK,CAAC,aAAaO,MAAMO,OAAO;IAErD,OAAOxC,MAAMS,IAAI,CAAC;AACpB;AAKA,OAAO,SAASgC,mBAAmBC,MAAoB;IACrD,MAAM9B,cAAc;QAClB+B,SAAS1D,MAAMmC,KAAK;QACpBwB,UAAU3D,MAAM8B,MAAM;QACtB8B,WAAW5D,MAAMqC,GAAG;IACtB,CAAC,CAACoB,OAAOjB,MAAM,CAAC;IAEhB,MAAMzB,QAAQ;QACZY,YAAYV,IAAI,CAAC,CAAC,eAAe,EAAEwC,OAAOjB,MAAM,CAACqB,WAAW,IAAI;QAChE7D,MAAMU,IAAI,CAAC,CAAC,YAAY,EAAE+C,OAAON,SAAS,CAACC,WAAW,IAAI;QAC1D;QACApD,MAAMgB,IAAI,CAACC,IAAI,CAAC;KACjB;IAED,KAAK,MAAM,CAACC,MAAM4C,UAAU,IAAIC,OAAOC,OAAO,CAACP,OAAOQ,UAAU,EAAG;QACjE,MAAMC,YAAY;YAChBR,SAAS1D,MAAMmC,KAAK;YACpBwB,UAAU3D,MAAM8B,MAAM;YACtB8B,WAAW5D,MAAMqC,GAAG;QACtB,CAAC,CAACyB,UAAUtB,MAAM,CAAC;QAEnBzB,MAAM6B,IAAI,CAACsB,UAAU,CAAC,EAAE,EAAEhD,KAAK,EAAE,EAAE4C,UAAUtB,MAAM,EAAE;QAErD,IAAIsB,UAAU1D,KAAK,EAAE;YACnBW,MAAM6B,IAAI,CAAC5C,MAAMqC,GAAG,CAAC,CAAC,WAAW,EAAEyB,UAAU1D,KAAK,EAAE;QACtD;QAEA,IAAI0D,UAAUK,OAAO,EAAE;YACrB,KAAK,MAAM,CAACC,QAAQC,MAAM,IAAIN,OAAOC,OAAO,CAACF,UAAUK,OAAO,EAAG;gBAC/DpD,MAAM6B,IAAI,CAAC5C,MAAMU,IAAI,CAAC,CAAC,IAAI,EAAE0D,OAAO,EAAE,EAAEC,OAAO;YACjD;QACF;IACF;IAEA,OAAOtD,MAAMS,IAAI,CAAC;AACpB;AAKA,OAAO,SAAS8C,iBAAiBC,MAAsB;IACrD,MAAMC,QAAQ,IAAIvE,MAAM;QACtBwE,MAAM;YAAC;YAAM;YAAQ;YAAQ;YAAY;SAAY;IACvD;IAEA,KAAK,MAAM3D,SAASyD,OAAQ;QAC1BC,MAAM5B,IAAI,CAAC;YACT9B,MAAMK,EAAE;YACRL,MAAMI,IAAI;YACVJ,MAAMM,IAAI;YACVN,MAAMO,QAAQ,CAACqD,QAAQ;YACvB5D,MAAMQ,kBAAkB,CAACoD,QAAQ;SAClC;IACH;IAEA,OAAOF;AACT;AAKA,OAAO,SAASG,gBAAgBC,KAAa;IAC3C,MAAMJ,QAAQ,IAAIvE,MAAM;QACtBwE,MAAM;YAAC;YAAM;YAAQ;YAAe;YAAU;SAAQ;IACxD;IAEA,KAAK,MAAM/C,QAAQkD,MAAO;QACxB,MAAMC,aACJ;YACEjD,SAAS5B,MAAMU,IAAI,CAACgB,KAAKc,MAAM;YAC/BX,QAAQ7B,MAAM8B,MAAM,CAACJ,KAAKc,MAAM;YAChCT,UAAU/B,MAAMgC,IAAI,CAACN,KAAKc,MAAM;YAChCP,SAASjC,MAAMgB,IAAI,CAACU,KAAKc,MAAM;YAC/BN,WAAWlC,MAAMmC,KAAK,CAACT,KAAKc,MAAM;YAClCJ,QAAQpC,MAAMqC,GAAG,CAACX,KAAKc,MAAM;YAC7BF,WAAWtC,MAAMuC,OAAO,CAACb,KAAKc,MAAM;QACtC,CAAC,CAACd,KAAKc,MAAM,CAAC,IAAId,KAAKc,MAAM;QAE/BgC,MAAM5B,IAAI,CAAC;YACTlB,KAAKP,EAAE;YACPO,KAAKN,IAAI;YACTM,KAAKgB,WAAW,CAACoC,SAAS,CAAC,GAAG,MAAOpD,CAAAA,KAAKgB,WAAW,CAACI,MAAM,GAAG,KAAK,QAAQ,EAAC;YAC7E+B;YACAnD,KAAKiB,aAAa,IAAI;SACvB;IACH;IAEA,OAAO6B;AACT;AAKA,OAAO,SAASO,eAAeC,EAAU;IACvC,IAAIA,KAAK,MAAM;QACb,OAAO,GAAGA,GAAG,EAAE,CAAC;IAClB;IAEA,MAAMC,UAAUC,KAAKC,KAAK,CAACH,KAAK;IAChC,MAAMI,UAAUF,KAAKC,KAAK,CAACF,UAAU;IACrC,MAAMI,QAAQH,KAAKC,KAAK,CAACC,UAAU;IACnC,MAAME,OAAOJ,KAAKC,KAAK,CAACE,QAAQ;IAEhC,IAAIC,OAAO,GAAG;QACZ,OAAO,GAAGA,KAAK,EAAE,EAAED,QAAQ,GAAG,CAAC,CAAC;IAClC;IACA,IAAIA,QAAQ,GAAG;QACb,OAAO,GAAGA,MAAM,EAAE,EAAED,UAAU,GAAG,CAAC,CAAC;IACrC;IACA,IAAIA,UAAU,GAAG;QACf,OAAO,GAAGA,QAAQ,EAAE,EAAEH,UAAU,GAAG,CAAC,CAAC;IACvC;IAEA,OAAO,GAAGA,QAAQ,CAAC,CAAC;AACtB;AAKA,OAAO,SAASM,cAAclC,OAAe;IAC3C,MAAMmC,SAAS,CAAC;AAClB,EAAExF,MAAMgB,IAAI,CAACC,IAAI,CAAC,oEAAoE;AACtF,EAAEjB,MAAMgB,IAAI,CAACC,IAAI,CAAC,KAAK,aAAa,EAAEjB,MAAMyC,KAAK,CAACxB,IAAI,CAAC,kBAAkB,CAAC,EAAEjB,MAAMU,IAAI,CAAC,MAAM2C,SAAS,wBAAwB,EAAErD,MAAMgB,IAAI,CAACC,IAAI,CAAC,KAAK;AACrJ,EAAEjB,MAAMgB,IAAI,CAACC,IAAI,CAAC,KAAK,UAAU,EAAEjB,MAAMU,IAAI,CAAC,mCAAmC,eAAe,EAAEV,MAAMgB,IAAI,CAACC,IAAI,CAAC,KAAK;AACvH,EAAEjB,MAAMgB,IAAI,CAACC,IAAI,CAAC,oEAAoE;AACtF,CAAC;IACCwE,QAAQC,GAAG,CAACF;AACd;AAKA,OAAO,SAASG,eAAetC,OAAe,EAAEuC,SAAiB;IAC/D,MAAMC,OAAO;QACX7F,MAAMgB,IAAI,CAACC,IAAI,CAAC;QAChB;QACAjB,MAAMyC,KAAK,CAAC,kBAAkBzC,MAAM8B,MAAM,CAACuB;QAC3CrD,MAAMyC,KAAK,CAAC,kBAAkBzC,MAAM8B,MAAM,CAAC8D;QAC3C5F,MAAMyC,KAAK,CAAC,kBAAkBzC,MAAM8B,MAAM,CAAC,aAAa5B,QAAQmD,OAAO;QACvErD,MAAMyC,KAAK,CAAC,kBAAkBzC,MAAM8B,MAAM,CAAC5B,QAAQ4F,QAAQ;QAC3D9F,MAAMyC,KAAK,CAAC,kBAAkBzC,MAAM8B,MAAM,CAAC5B,QAAQ6F,IAAI;QACvD;QACA/F,MAAMU,IAAI,CAAC;QACXV,MAAMyC,KAAK,CAAC;QACZzC,MAAMyC,KAAK,CAAC;QACZzC,MAAMyC,KAAK,CAAC;QACZzC,MAAMyC,KAAK,CAAC;QACZzC,MAAMyC,KAAK,CAAC;QACZ;QACAzC,MAAMgC,IAAI,CAAC,gBAAgBhC,MAAMgG,SAAS,CAAC;KAC5C;IAEDP,QAAQC,GAAG,CAACG,KAAKrE,IAAI,CAAC;AACxB;AAKA,OAAO,SAASyE,kBACdC,OAAe,EACfC,KAAa,EACbC,QAAgB,EAAE,EAClBC,KAAc;IAEd,MAAMC,aAAapB,KAAKqB,GAAG,CAAC,KAAK,AAACL,UAAUC,QAAS;IACrD,MAAMK,SAAStB,KAAKC,KAAK,CAAC,AAACmB,aAAa,MAAOF;IAC/C,MAAMK,QAAQL,QAAQI;IAEtB,MAAME,MAAM1G,MAAMmC,KAAK,CAAC,IAAIwE,MAAM,CAACH,WAAWxG,MAAMU,IAAI,CAAC,IAAIiG,MAAM,CAACF;IACpE,MAAMG,UAAUN,WAAWO,OAAO,CAAC,GAAGC,QAAQ,CAAC,KAAK;IAEpD,IAAIC,SAAS,CAAC,CAAC,EAAEL,IAAI,EAAE,EAAEE,SAAS;IAClC,IAAIP,OAAO;QACTU,SAAS,GAAGV,MAAM,EAAE,EAAEU,QAAQ;IAChC;IAEA,OAAOA;AACT;AAKA,OAAO,SAASC,sBAAsBxE,MAAc;IAClD,MAAMyE,aAAa;QACjBC,SAASlH,MAAMmC,KAAK,CAAC;QACrB/B,OAAOJ,MAAMqC,GAAG,CAAC;QACjB8E,SAASnH,MAAM8B,MAAM,CAAC;QACtB+D,MAAM7F,MAAMgC,IAAI,CAAC;QACjBC,SAASjC,MAAMgB,IAAI,CAAC;QACpBY,SAAS5B,MAAMU,IAAI,CAAC;IACtB;IAEA,OAAOuG,UAAU,CAACzE,OAAkC,IAAIA;AAC1D;AAKA,OAAO,SAAS4E,cAAc9G,OAAe;IAC3C,OAAON,MAAMmC,KAAK,CAAC,OAAO,MAAMnC,MAAMyC,KAAK,CAACnC;AAC9C;AAKA,OAAO,SAAS+G,WAAW/G,OAAe;IACxC,OAAON,MAAMgC,IAAI,CAAC,OAAO,MAAMhC,MAAMyC,KAAK,CAACnC;AAC7C;AAKA,OAAO,SAASgH,cAAchH,OAAe;IAC3C,OAAON,MAAM8B,MAAM,CAAC,OAAO,MAAM9B,MAAMyC,KAAK,CAACnC;AAC/C;AAKA,OAAO,SAASiH,cAAcjH,OAAe,EAAEkH,QAAgB,CAAC;IAC9D,MAAMC,SAAS;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IACjE,MAAMC,UAAU1H,MAAMgB,IAAI,CAACyG,MAAM,CAACD,QAAQC,OAAO3E,MAAM,CAAC;IACxD,OAAO,GAAG4E,QAAQ,CAAC,EAAEpH,SAAS;AAChC"}