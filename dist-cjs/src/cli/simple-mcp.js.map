{"version":3,"sources":["../../../src/cli/simple-mcp.ts"],"sourcesContent":["/**\n * Simple MCP command implementation for Node.js compatibility\n */\n\nimport { Command } from './commander-fix.js';\nimport http from 'http';\n\nfunction printSuccess(message: string) {\n  console.log(`‚úÖ ${message}`);\n}\n\nfunction printError(message: string) {\n  console.error(`‚ùå Error: ${message}`);\n}\n\n// Check if MCP server is running\nasync function checkMCPStatus(host: string, port: number): Promise<boolean> {\n  return new Promise((resolve) => {\n    const options = {\n      hostname: host,\n      port: port,\n      path: '/health',\n      method: 'GET',\n      timeout: 2000,\n    };\n\n    const req = http.request(options, (res) => {\n      resolve(res.statusCode === 200 || res.statusCode === 404);\n    });\n\n    req.on('error', () => {\n      resolve(false);\n    });\n\n    req.on('timeout', () => {\n      req.destroy();\n      resolve(false);\n    });\n\n    req.end();\n  });\n}\n\nexport function createMCPCommand() {\n  const mcpCmd = new Command('mcp').description('Manage MCP server and tools').action(() => {\n    printSuccess('MCP Server Management');\n    console.log('\\nüåê Available MCP commands:');\n    console.log('  ‚Ä¢ mcp start - Start the MCP server');\n    console.log('  ‚Ä¢ mcp status - Show MCP server status');\n    console.log('  ‚Ä¢ mcp tools - List available MCP tools');\n    console.log('  ‚Ä¢ mcp stop - Stop the MCP server');\n    console.log('\\nüí° Use \"mcp start --port 3001\" to use a different port');\n  });\n\n  mcpCmd\n    .command('start')\n    .description('Start the MCP server')\n    .option('--port <port>', 'Port for MCP server', '3000')\n    .option('--host <host>', 'Host for MCP server', 'localhost')\n    .option('--transport <transport>', 'Transport type (stdio, http)', 'http')\n    .action(async (options) => {\n      // This is handled by the actual MCP implementation\n      console.log('Starting MCP server...');\n      console.log('(This command is handled by the MCP module)');\n    });\n\n  mcpCmd\n    .command('status')\n    .description('Show MCP server status')\n    .option('--port <port>', 'Port to check', '3000')\n    .option('--host <host>', 'Host to check', 'localhost')\n    .action(async (options) => {\n      printSuccess('MCP Server Status:');\n\n      const host = options.host || 'localhost';\n      const port = parseInt(options.port) || 3000;\n\n      // Check if server is actually running\n      const isRunning = await checkMCPStatus(host, port);\n\n      if (isRunning) {\n        console.log('üü¢ Status: Running');\n        console.log(`üìç Address: ${host}:${port}`);\n        console.log('üîê Authentication: Disabled');\n        console.log('üîß Tools: System, Health, Tools');\n        console.log('üì° Transport: http');\n        console.log('\\nüí° Use \"mcp tools\" to see available tools');\n      } else {\n        console.log('üü° Status: Not running (use \"mcp start\" to start)');\n        console.log(`üìç Checked address: ${host}:${port}`);\n        console.log('üîê Authentication: Disabled');\n        console.log('üîß Tools: System, Health, Tools (when running)');\n      }\n    });\n\n  mcpCmd\n    .command('tools')\n    .description('List available MCP tools')\n    .action(() => {\n      printSuccess('Available MCP Tools:');\n      console.log('\\nüìä System Tools:');\n      console.log('  ‚Ä¢ system/info - Get system information');\n      console.log('  ‚Ä¢ system/health - Get system health status');\n      console.log('\\nüîß Tool Management:');\n      console.log('  ‚Ä¢ tools/list - List all available tools');\n      console.log('  ‚Ä¢ tools/schema - Get schema for a specific tool');\n      console.log('\\nüí° Note: Additional tools available when orchestrator is running');\n    });\n\n  mcpCmd\n    .command('stop')\n    .description('Stop the MCP server')\n    .action(() => {\n      printSuccess('Stopping MCP server...');\n      console.log('üõë MCP server stop requested');\n      console.log('üí° Use Ctrl+C in the terminal running \"mcp start\" to stop');\n    });\n\n  return mcpCmd;\n}\n"],"names":["Command","http","printSuccess","message","console","log","printError","error","checkMCPStatus","host","port","Promise","resolve","options","hostname","path","method","timeout","req","request","res","statusCode","on","destroy","end","createMCPCommand","mcpCmd","description","action","command","option","parseInt","isRunning"],"mappings":"AAIA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,OAAOC,UAAU,OAAO;AAExB,SAASC,aAAaC,OAAe;IACnCC,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEF,SAAS;AAC5B;AAEA,SAASG,WAAWH,OAAe;IACjCC,QAAQG,KAAK,CAAC,CAAC,SAAS,EAAEJ,SAAS;AACrC;AAGA,eAAeK,eAAeC,IAAY,EAAEC,IAAY;IACtD,OAAO,IAAIC,QAAQ,CAACC;QAClB,MAAMC,UAAU;YACdC,UAAUL;YACVC,MAAMA;YACNK,MAAM;YACNC,QAAQ;YACRC,SAAS;QACX;QAEA,MAAMC,MAAMjB,KAAKkB,OAAO,CAACN,SAAS,CAACO;YACjCR,QAAQQ,IAAIC,UAAU,KAAK,OAAOD,IAAIC,UAAU,KAAK;QACvD;QAEAH,IAAII,EAAE,CAAC,SAAS;YACdV,QAAQ;QACV;QAEAM,IAAII,EAAE,CAAC,WAAW;YAChBJ,IAAIK,OAAO;YACXX,QAAQ;QACV;QAEAM,IAAIM,GAAG;IACT;AACF;AAEA,OAAO,SAASC;IACd,MAAMC,SAAS,IAAI1B,QAAQ,OAAO2B,WAAW,CAAC,+BAA+BC,MAAM,CAAC;QAClF1B,aAAa;QACbE,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd;IAEAqB,OACGG,OAAO,CAAC,SACRF,WAAW,CAAC,wBACZG,MAAM,CAAC,iBAAiB,uBAAuB,QAC/CA,MAAM,CAAC,iBAAiB,uBAAuB,aAC/CA,MAAM,CAAC,2BAA2B,gCAAgC,QAClEF,MAAM,CAAC,OAAOf;QAEbT,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd;IAEFqB,OACGG,OAAO,CAAC,UACRF,WAAW,CAAC,0BACZG,MAAM,CAAC,iBAAiB,iBAAiB,QACzCA,MAAM,CAAC,iBAAiB,iBAAiB,aACzCF,MAAM,CAAC,OAAOf;QACbX,aAAa;QAEb,MAAMO,OAAOI,QAAQJ,IAAI,IAAI;QAC7B,MAAMC,OAAOqB,SAASlB,QAAQH,IAAI,KAAK;QAGvC,MAAMsB,YAAY,MAAMxB,eAAeC,MAAMC;QAE7C,IAAIsB,WAAW;YACb5B,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEI,KAAK,CAAC,EAAEC,MAAM;YACzCN,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;QACd,OAAO;YACLD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEI,KAAK,CAAC,EAAEC,MAAM;YACjDN,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;QACd;IACF;IAEFqB,OACGG,OAAO,CAAC,SACRF,WAAW,CAAC,4BACZC,MAAM,CAAC;QACN1B,aAAa;QACbE,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd;IAEFqB,OACGG,OAAO,CAAC,QACRF,WAAW,CAAC,uBACZC,MAAM,CAAC;QACN1B,aAAa;QACbE,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IACd;IAEF,OAAOqB;AACT"}