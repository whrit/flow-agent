{"version":3,"sources":["../../../../src/cli/agents/base-agent.ts"],"sourcesContent":["/**\n * Base Agent Class - Foundation for all specialized agents\n */\n\nimport { EventEmitter } from 'node:events';\nimport type {\n  AgentId,\n  AgentType,\n  AgentStatus,\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  AgentMetrics,\n  AgentError,\n  TaskDefinition,\n  TaskId,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\nimport { generateId } from '../../utils/helpers.js';\n\nexport interface AgentState {\n  id: AgentId;\n  name: string;\n  type: AgentType;\n  status: AgentStatus;\n  capabilities: AgentCapabilities;\n  config: AgentConfig;\n  environment: AgentEnvironment;\n  metrics: AgentMetrics;\n  workload: number;\n  health: number;\n  lastHeartbeat: Date;\n  currentTasks: TaskId[];\n  taskHistory: TaskId[];\n  errorHistory: AgentError[];\n  collaborators: AgentId[];\n  childAgents: AgentId[];\n  endpoints: string[];\n}\n\nexport abstract class BaseAgent extends EventEmitter {\n  protected id: string;\n  protected type: AgentType;\n  protected status: AgentStatus = 'initializing';\n  protected capabilities: AgentCapabilities;\n  protected config: AgentConfig;\n  protected environment: AgentEnvironment;\n  protected metrics: AgentMetrics;\n  protected workload = 0;\n  protected health = 1.0;\n  protected lastHeartbeat = new Date();\n  protected currentTasks: TaskId[] = [];\n  protected taskHistory: TaskId[] = [];\n  protected errorHistory: AgentError[] = [];\n  protected collaborators: AgentId[] = [];\n  protected childAgents: AgentId[] = [];\n  protected endpoints: string[] = [];\n\n  protected logger: ILogger;\n  protected eventBus: IEventBus;\n  protected memory: DistributedMemorySystem;\n\n  private heartbeatInterval?: NodeJS.Timeout;\n  private metricsInterval?: NodeJS.Timeout;\n  private isShuttingDown = false;\n\n  constructor(\n    id: string,\n    type: AgentType,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super();\n    this.id = id;\n    this.type = type;\n    this.logger = logger;\n    this.eventBus = eventBus;\n    this.memory = memory;\n\n    // Merge with defaults\n    this.capabilities = { ...this.getDefaultCapabilities(), ...(config as any).capabilities };\n    this.config = { ...this.getDefaultConfig(), ...config };\n    this.environment = { ...this.getDefaultEnvironment(), ...environment };\n    this.metrics = this.createDefaultMetrics();\n\n    this.setupEventHandlers();\n  }\n\n  // Abstract methods that specialized agents must implement\n  protected abstract getDefaultCapabilities(): AgentCapabilities;\n  protected abstract getDefaultConfig(): Partial<AgentConfig>;\n  public abstract executeTask(task: TaskDefinition): Promise<any>;\n\n  // Common agent lifecycle methods\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing agent', {\n      agentId: this.id,\n      type: this.type,\n    });\n\n    this.status = 'initializing';\n    this.emit('agent:status-changed', { agentId: this.id, status: this.status });\n\n    // Start heartbeat\n    this.startHeartbeat();\n\n    // Start metrics collection\n    this.startMetricsCollection();\n\n    // Store initial state\n    await this.saveState();\n\n    this.status = 'idle';\n    this.emit('agent:status-changed', { agentId: this.id, status: this.status });\n    this.emit('agent:ready', { agentId: this.id });\n\n    this.logger.info('Agent initialized successfully', {\n      agentId: this.id,\n      type: this.type,\n    });\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down agent', {\n      agentId: this.id,\n      type: this.type,\n    });\n\n    this.isShuttingDown = true;\n    this.status = 'terminating';\n    this.emit('agent:status-changed', { agentId: this.id, status: this.status });\n\n    // Wait for current tasks to complete\n    await this.waitForTasksCompletion();\n\n    // Stop intervals\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval);\n    }\n\n    // Save final state\n    await this.saveState();\n\n    this.status = 'terminated';\n    this.emit('agent:status-changed', { agentId: this.id, status: this.status });\n    this.emit('agent:shutdown', { agentId: this.id });\n\n    this.logger.info('Agent shutdown complete', {\n      agentId: this.id,\n      type: this.type,\n    });\n  }\n\n  async assignTask(task: TaskDefinition): Promise<void> {\n    if (this.status !== 'idle') {\n      throw new Error(`Agent ${this.id} is not available (status: ${this.status})`);\n    }\n\n    if (this.currentTasks.length >= this.capabilities.maxConcurrentTasks) {\n      throw new Error(`Agent ${this.id} has reached maximum concurrent tasks`);\n    }\n\n    this.logger.info('Task assigned to agent', {\n      agentId: this.id,\n      taskId: task.id,\n      taskType: task.type,\n    });\n\n    this.currentTasks.push(task.id);\n    this.status = 'busy';\n    this.workload = this.currentTasks.length / this.capabilities.maxConcurrentTasks;\n\n    this.emit('agent:task-assigned', { agentId: this.id, taskId: task.id });\n    this.emit('agent:status-changed', { agentId: this.id, status: this.status });\n\n    try {\n      const startTime = Date.now();\n      const result = await this.executeTask(task);\n      const executionTime = Date.now() - startTime;\n\n      // Update metrics\n      this.updateTaskMetrics(task.id, executionTime, true);\n\n      // Remove from current tasks\n      this.currentTasks = this.currentTasks.filter((id) => id !== task.id);\n      this.taskHistory.push(task.id);\n\n      // Update status\n      this.status = this.currentTasks.length > 0 ? 'busy' : 'idle';\n      this.workload = this.currentTasks.length / this.capabilities.maxConcurrentTasks;\n\n      this.emit('agent:task-completed', {\n        agentId: this.id,\n        taskId: task.id,\n        result,\n        executionTime,\n      });\n\n      this.logger.info('Task completed successfully', {\n        agentId: this.id,\n        taskId: task.id,\n        executionTime,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      // Update metrics\n      this.updateTaskMetrics(task.id, 0, false);\n\n      // Add to error history\n      this.addError({\n        timestamp: new Date(),\n        type: 'task_execution_failed',\n        message: errorMessage,\n        context: { taskId: task.id, taskType: task.type },\n        severity: 'high',\n        resolved: false,\n      });\n\n      // Remove from current tasks\n      this.currentTasks = this.currentTasks.filter((id) => id !== task.id);\n      this.status = this.currentTasks.length > 0 ? 'busy' : 'idle';\n      this.workload = this.currentTasks.length / this.capabilities.maxConcurrentTasks;\n\n      this.emit('agent:task-failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: errorMessage,\n      });\n\n      this.logger.error('Task execution failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: errorMessage,\n      });\n\n      throw error;\n    }\n  }\n\n  // Agent information and status methods\n  getAgentInfo(): AgentState {\n    return {\n      id: {\n        id: this.id,\n        swarmId: 'default',\n        type: this.type,\n        instance: 1,\n      },\n      name: `${this.type}-${this.id.slice(-8)}`,\n      type: this.type,\n      status: this.status,\n      capabilities: this.capabilities,\n      config: this.config,\n      environment: this.environment,\n      metrics: this.metrics,\n      workload: this.workload,\n      health: this.health,\n      lastHeartbeat: this.lastHeartbeat,\n      currentTasks: this.currentTasks,\n      taskHistory: this.taskHistory,\n      errorHistory: this.errorHistory,\n      collaborators: this.collaborators,\n      childAgents: this.childAgents,\n      endpoints: this.endpoints,\n    };\n  }\n\n  getAgentStatus(): any {\n    return {\n      id: this.id,\n      type: this.type,\n      status: this.status,\n      health: this.health,\n      workload: this.workload,\n      currentTasks: this.currentTasks.length,\n      totalTasksCompleted: this.metrics.tasksCompleted,\n      successRate: this.metrics.successRate,\n      averageExecutionTime: this.metrics.averageExecutionTime,\n      lastActivity: this.metrics.lastActivity,\n      uptime: Date.now() - this.metrics.totalUptime,\n    };\n  }\n\n  getCurrentTasks(): TaskId[] {\n    return [...this.currentTasks];\n  }\n\n  getTaskHistory(): TaskId[] {\n    return [...this.taskHistory];\n  }\n\n  getErrorHistory(): AgentError[] {\n    return [...this.errorHistory];\n  }\n\n  getLastTaskCompletedTime(): Date {\n    return this.metrics.lastActivity;\n  }\n\n  // Health and metrics methods\n  updateHealth(health: number): void {\n    this.health = Math.max(0, Math.min(1, health));\n    this.emit('agent:health-changed', { agentId: this.id, health: this.health });\n  }\n\n  addCollaborator(agentId: AgentId): void {\n    if (!this.collaborators.find((c) => c.id === agentId.id)) {\n      this.collaborators.push(agentId);\n      this.emit('agent:collaborator-added', { agentId: this.id, collaborator: agentId });\n    }\n  }\n\n  removeCollaborator(agentId: string): void {\n    this.collaborators = this.collaborators.filter((c) => c.id !== agentId);\n    this.emit('agent:collaborator-removed', { agentId: this.id, collaborator: agentId });\n  }\n\n  // Protected helper methods\n  protected getDefaultEnvironment(): Partial<AgentEnvironment> {\n    return {\n      runtime: 'deno',\n      version: '1.40.0',\n      workingDirectory: `./agents/${this.type}`,\n      tempDirectory: `./tmp/${this.type}`,\n      logDirectory: `./logs/${this.type}`,\n      apiEndpoints: {},\n      credentials: {},\n      availableTools: [],\n      toolConfigs: {},\n    };\n  }\n\n  protected createDefaultMetrics(): AgentMetrics {\n    return {\n      tasksCompleted: 0,\n      tasksFailed: 0,\n      averageExecutionTime: 0,\n      successRate: 1.0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      diskUsage: 0,\n      networkUsage: 0,\n      codeQuality: 0.8,\n      testCoverage: 0,\n      bugRate: 0,\n      userSatisfaction: 0.8,\n      totalUptime: Date.now(),\n      lastActivity: new Date(),\n      responseTime: 0,\n    };\n  }\n\n  protected setupEventHandlers(): void {\n    this.eventBus.on('system:shutdown', () => {\n      if (!this.isShuttingDown) {\n        this.shutdown().catch((error) => {\n          this.logger.error('Error during agent shutdown', {\n            agentId: this.id,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        });\n      }\n    });\n  }\n\n  protected startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (!this.isShuttingDown) {\n        this.sendHeartbeat();\n      }\n    }, this.config.heartbeatInterval || 10000);\n  }\n\n  protected startMetricsCollection(): void {\n    this.metricsInterval = setInterval(() => {\n      if (!this.isShuttingDown) {\n        this.collectMetrics();\n      }\n    }, 30000); // Every 30 seconds\n  }\n\n  protected sendHeartbeat(): void {\n    this.lastHeartbeat = new Date();\n    this.eventBus.emit('agent:heartbeat', {\n      agentId: this.id,\n      timestamp: this.lastHeartbeat,\n      metrics: this.metrics,\n    });\n  }\n\n  protected async collectMetrics(): Promise<void> {\n    // Update response time based on recent tasks\n    const recentTasksTime = this.getRecentTasksAverageTime();\n    this.metrics.responseTime = recentTasksTime;\n\n    // Update activity timestamp\n    if (this.currentTasks.length > 0) {\n      this.metrics.lastActivity = new Date();\n    }\n\n    // Calculate success rate\n    const totalTasks = this.metrics.tasksCompleted + this.metrics.tasksFailed;\n    if (totalTasks > 0) {\n      this.metrics.successRate = this.metrics.tasksCompleted / totalTasks;\n    }\n\n    // Store metrics in memory\n    await this.memory.store(`agent:${this.id}:metrics`, this.metrics, {\n      type: 'agent-metrics',\n      tags: ['metrics', this.type, this.id],\n      partition: 'metrics',\n    });\n  }\n\n  protected updateTaskMetrics(taskId: TaskId, executionTime: number, success: boolean): void {\n    if (success) {\n      this.metrics.tasksCompleted++;\n\n      // Update average execution time\n      const totalTime =\n        this.metrics.averageExecutionTime * (this.metrics.tasksCompleted - 1) + executionTime;\n      this.metrics.averageExecutionTime = totalTime / this.metrics.tasksCompleted;\n    } else {\n      this.metrics.tasksFailed++;\n    }\n\n    this.metrics.lastActivity = new Date();\n  }\n\n  protected addError(error: AgentError): void {\n    this.errorHistory.push(error);\n\n    // Keep only last 50 errors\n    if (this.errorHistory.length > 50) {\n      this.errorHistory.shift();\n    }\n\n    this.eventBus.emit('agent:error', {\n      agentId: this.id,\n      error,\n    });\n\n    // Reduce health based on error severity\n    const healthImpact =\n      {\n        low: 0.01,\n        medium: 0.05,\n        high: 0.1,\n        critical: 0.2,\n      }[error.severity] || 0.05;\n\n    this.updateHealth(this.health - healthImpact);\n  }\n\n  protected getRecentTasksAverageTime(): number {\n    // Simplified - would normally track individual task times\n    return this.metrics.averageExecutionTime;\n  }\n\n  protected async waitForTasksCompletion(): Promise<void> {\n    if (this.currentTasks.length === 0) return;\n\n    return new Promise((resolve) => {\n      const checkTasks = () => {\n        if (this.currentTasks.length === 0) {\n          resolve();\n        } else {\n          setTimeout(checkTasks, 1000);\n        }\n      };\n      checkTasks();\n    });\n  }\n\n  protected async saveState(): Promise<void> {\n    try {\n      await this.memory.store(`agent:${this.id}:state`, this.getAgentInfo(), {\n        type: 'agent-state',\n        tags: ['state', this.type, this.id],\n        partition: 'state',\n      });\n    } catch (error) {\n      this.logger.error('Failed to save agent state', {\n        agentId: this.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n}\n"],"names":["EventEmitter","BaseAgent","id","type","status","capabilities","config","environment","metrics","workload","health","lastHeartbeat","Date","currentTasks","taskHistory","errorHistory","collaborators","childAgents","endpoints","logger","eventBus","memory","heartbeatInterval","metricsInterval","isShuttingDown","getDefaultCapabilities","getDefaultConfig","getDefaultEnvironment","createDefaultMetrics","setupEventHandlers","initialize","info","agentId","emit","startHeartbeat","startMetricsCollection","saveState","shutdown","waitForTasksCompletion","clearInterval","assignTask","task","Error","length","maxConcurrentTasks","taskId","taskType","push","startTime","now","result","executeTask","executionTime","updateTaskMetrics","filter","error","errorMessage","message","String","addError","timestamp","context","severity","resolved","getAgentInfo","swarmId","instance","name","slice","getAgentStatus","totalTasksCompleted","tasksCompleted","successRate","averageExecutionTime","lastActivity","uptime","totalUptime","getCurrentTasks","getTaskHistory","getErrorHistory","getLastTaskCompletedTime","updateHealth","Math","max","min","addCollaborator","find","c","collaborator","removeCollaborator","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","tasksFailed","cpuUsage","memoryUsage","diskUsage","networkUsage","codeQuality","testCoverage","bugRate","userSatisfaction","responseTime","on","catch","setInterval","sendHeartbeat","collectMetrics","recentTasksTime","getRecentTasksAverageTime","totalTasks","store","tags","partition","success","totalTime","shift","healthImpact","low","medium","high","critical","Promise","resolve","checkTasks","setTimeout"],"mappings":"AAIA,SAASA,YAAY,QAAQ,cAAc;AAsC3C,OAAO,MAAeC,kBAAkBD;IAC5BE,GAAW;IACXC,KAAgB;IAChBC,SAAsB,eAAe;IACrCC,aAAgC;IAChCC,OAAoB;IACpBC,YAA8B;IAC9BC,QAAsB;IACtBC,WAAW,EAAE;IACbC,SAAS,IAAI;IACbC,gBAAgB,IAAIC,OAAO;IAC3BC,eAAyB,EAAE,CAAC;IAC5BC,cAAwB,EAAE,CAAC;IAC3BC,eAA6B,EAAE,CAAC;IAChCC,gBAA2B,EAAE,CAAC;IAC9BC,cAAyB,EAAE,CAAC;IAC5BC,YAAsB,EAAE,CAAC;IAEzBC,OAAgB;IAChBC,SAAoB;IACpBC,OAAgC;IAElCC,kBAAmC;IACnCC,gBAAiC;IACjCC,iBAAiB,MAAM;IAE/B,YACEtB,EAAU,EACVC,IAAe,EACfG,MAAmB,EACnBC,WAA6B,EAC7BY,MAAe,EACfC,QAAmB,EACnBC,MAA+B,CAC/B;QACA,KAAK;QACL,IAAI,CAACnB,EAAE,GAAGA;QACV,IAAI,CAACC,IAAI,GAAGA;QACZ,IAAI,CAACgB,MAAM,GAAGA;QACd,IAAI,CAACC,QAAQ,GAAGA;QAChB,IAAI,CAACC,MAAM,GAAGA;QAGd,IAAI,CAAChB,YAAY,GAAG;YAAE,GAAG,IAAI,CAACoB,sBAAsB,EAAE;YAAE,GAAG,AAACnB,OAAeD,YAAY;QAAC;QACxF,IAAI,CAACC,MAAM,GAAG;YAAE,GAAG,IAAI,CAACoB,gBAAgB,EAAE;YAAE,GAAGpB,MAAM;QAAC;QACtD,IAAI,CAACC,WAAW,GAAG;YAAE,GAAG,IAAI,CAACoB,qBAAqB,EAAE;YAAE,GAAGpB,WAAW;QAAC;QACrE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACoB,oBAAoB;QAExC,IAAI,CAACC,kBAAkB;IACzB;IAQA,MAAMC,aAA4B;QAChC,IAAI,CAACX,MAAM,CAACY,IAAI,CAAC,sBAAsB;YACrCC,SAAS,IAAI,CAAC9B,EAAE;YAChBC,MAAM,IAAI,CAACA,IAAI;QACjB;QAEA,IAAI,CAACC,MAAM,GAAG;QACd,IAAI,CAAC6B,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEE,QAAQ,IAAI,CAACA,MAAM;QAAC;QAG1E,IAAI,CAAC8B,cAAc;QAGnB,IAAI,CAACC,sBAAsB;QAG3B,MAAM,IAAI,CAACC,SAAS;QAEpB,IAAI,CAAChC,MAAM,GAAG;QACd,IAAI,CAAC6B,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEE,QAAQ,IAAI,CAACA,MAAM;QAAC;QAC1E,IAAI,CAAC6B,IAAI,CAAC,eAAe;YAAED,SAAS,IAAI,CAAC9B,EAAE;QAAC;QAE5C,IAAI,CAACiB,MAAM,CAACY,IAAI,CAAC,kCAAkC;YACjDC,SAAS,IAAI,CAAC9B,EAAE;YAChBC,MAAM,IAAI,CAACA,IAAI;QACjB;IACF;IAEA,MAAMkC,WAA0B;QAC9B,IAAI,CAAClB,MAAM,CAACY,IAAI,CAAC,uBAAuB;YACtCC,SAAS,IAAI,CAAC9B,EAAE;YAChBC,MAAM,IAAI,CAACA,IAAI;QACjB;QAEA,IAAI,CAACqB,cAAc,GAAG;QACtB,IAAI,CAACpB,MAAM,GAAG;QACd,IAAI,CAAC6B,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEE,QAAQ,IAAI,CAACA,MAAM;QAAC;QAG1E,MAAM,IAAI,CAACkC,sBAAsB;QAGjC,IAAI,IAAI,CAAChB,iBAAiB,EAAE;YAC1BiB,cAAc,IAAI,CAACjB,iBAAiB;QACtC;QACA,IAAI,IAAI,CAACC,eAAe,EAAE;YACxBgB,cAAc,IAAI,CAAChB,eAAe;QACpC;QAGA,MAAM,IAAI,CAACa,SAAS;QAEpB,IAAI,CAAChC,MAAM,GAAG;QACd,IAAI,CAAC6B,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEE,QAAQ,IAAI,CAACA,MAAM;QAAC;QAC1E,IAAI,CAAC6B,IAAI,CAAC,kBAAkB;YAAED,SAAS,IAAI,CAAC9B,EAAE;QAAC;QAE/C,IAAI,CAACiB,MAAM,CAACY,IAAI,CAAC,2BAA2B;YAC1CC,SAAS,IAAI,CAAC9B,EAAE;YAChBC,MAAM,IAAI,CAACA,IAAI;QACjB;IACF;IAEA,MAAMqC,WAAWC,IAAoB,EAAiB;QACpD,IAAI,IAAI,CAACrC,MAAM,KAAK,QAAQ;YAC1B,MAAM,IAAIsC,MAAM,CAAC,MAAM,EAAE,IAAI,CAACxC,EAAE,CAAC,2BAA2B,EAAE,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;QAC9E;QAEA,IAAI,IAAI,CAACS,YAAY,CAAC8B,MAAM,IAAI,IAAI,CAACtC,YAAY,CAACuC,kBAAkB,EAAE;YACpE,MAAM,IAAIF,MAAM,CAAC,MAAM,EAAE,IAAI,CAACxC,EAAE,CAAC,qCAAqC,CAAC;QACzE;QAEA,IAAI,CAACiB,MAAM,CAACY,IAAI,CAAC,0BAA0B;YACzCC,SAAS,IAAI,CAAC9B,EAAE;YAChB2C,QAAQJ,KAAKvC,EAAE;YACf4C,UAAUL,KAAKtC,IAAI;QACrB;QAEA,IAAI,CAACU,YAAY,CAACkC,IAAI,CAACN,KAAKvC,EAAE;QAC9B,IAAI,CAACE,MAAM,GAAG;QACd,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACI,YAAY,CAAC8B,MAAM,GAAG,IAAI,CAACtC,YAAY,CAACuC,kBAAkB;QAE/E,IAAI,CAACX,IAAI,CAAC,uBAAuB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAE2C,QAAQJ,KAAKvC,EAAE;QAAC;QACrE,IAAI,CAAC+B,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEE,QAAQ,IAAI,CAACA,MAAM;QAAC;QAE1E,IAAI;YACF,MAAM4C,YAAYpC,KAAKqC,GAAG;YAC1B,MAAMC,SAAS,MAAM,IAAI,CAACC,WAAW,CAACV;YACtC,MAAMW,gBAAgBxC,KAAKqC,GAAG,KAAKD;YAGnC,IAAI,CAACK,iBAAiB,CAACZ,KAAKvC,EAAE,EAAEkD,eAAe;YAG/C,IAAI,CAACvC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACyC,MAAM,CAAC,CAACpD,KAAOA,OAAOuC,KAAKvC,EAAE;YACnE,IAAI,CAACY,WAAW,CAACiC,IAAI,CAACN,KAAKvC,EAAE;YAG7B,IAAI,CAACE,MAAM,GAAG,IAAI,CAACS,YAAY,CAAC8B,MAAM,GAAG,IAAI,SAAS;YACtD,IAAI,CAAClC,QAAQ,GAAG,IAAI,CAACI,YAAY,CAAC8B,MAAM,GAAG,IAAI,CAACtC,YAAY,CAACuC,kBAAkB;YAE/E,IAAI,CAACX,IAAI,CAAC,wBAAwB;gBAChCD,SAAS,IAAI,CAAC9B,EAAE;gBAChB2C,QAAQJ,KAAKvC,EAAE;gBACfgD;gBACAE;YACF;YAEA,IAAI,CAACjC,MAAM,CAACY,IAAI,CAAC,+BAA+B;gBAC9CC,SAAS,IAAI,CAAC9B,EAAE;gBAChB2C,QAAQJ,KAAKvC,EAAE;gBACfkD;YACF;YAEA,OAAOF;QACT,EAAE,OAAOK,OAAO;YACd,MAAMC,eAAeD,iBAAiBb,QAAQa,MAAME,OAAO,GAAGC,OAAOH;YAGrE,IAAI,CAACF,iBAAiB,CAACZ,KAAKvC,EAAE,EAAE,GAAG;YAGnC,IAAI,CAACyD,QAAQ,CAAC;gBACZC,WAAW,IAAIhD;gBACfT,MAAM;gBACNsD,SAASD;gBACTK,SAAS;oBAAEhB,QAAQJ,KAAKvC,EAAE;oBAAE4C,UAAUL,KAAKtC,IAAI;gBAAC;gBAChD2D,UAAU;gBACVC,UAAU;YACZ;YAGA,IAAI,CAAClD,YAAY,GAAG,IAAI,CAACA,YAAY,CAACyC,MAAM,CAAC,CAACpD,KAAOA,OAAOuC,KAAKvC,EAAE;YACnE,IAAI,CAACE,MAAM,GAAG,IAAI,CAACS,YAAY,CAAC8B,MAAM,GAAG,IAAI,SAAS;YACtD,IAAI,CAAClC,QAAQ,GAAG,IAAI,CAACI,YAAY,CAAC8B,MAAM,GAAG,IAAI,CAACtC,YAAY,CAACuC,kBAAkB;YAE/E,IAAI,CAACX,IAAI,CAAC,qBAAqB;gBAC7BD,SAAS,IAAI,CAAC9B,EAAE;gBAChB2C,QAAQJ,KAAKvC,EAAE;gBACfqD,OAAOC;YACT;YAEA,IAAI,CAACrC,MAAM,CAACoC,KAAK,CAAC,yBAAyB;gBACzCvB,SAAS,IAAI,CAAC9B,EAAE;gBAChB2C,QAAQJ,KAAKvC,EAAE;gBACfqD,OAAOC;YACT;YAEA,MAAMD;QACR;IACF;IAGAS,eAA2B;QACzB,OAAO;YACL9D,IAAI;gBACFA,IAAI,IAAI,CAACA,EAAE;gBACX+D,SAAS;gBACT9D,MAAM,IAAI,CAACA,IAAI;gBACf+D,UAAU;YACZ;YACAC,MAAM,GAAG,IAAI,CAAChE,IAAI,CAAC,CAAC,EAAE,IAAI,CAACD,EAAE,CAACkE,KAAK,CAAC,CAAC,IAAI;YACzCjE,MAAM,IAAI,CAACA,IAAI;YACfC,QAAQ,IAAI,CAACA,MAAM;YACnBC,cAAc,IAAI,CAACA,YAAY;YAC/BC,QAAQ,IAAI,CAACA,MAAM;YACnBC,aAAa,IAAI,CAACA,WAAW;YAC7BC,SAAS,IAAI,CAACA,OAAO;YACrBC,UAAU,IAAI,CAACA,QAAQ;YACvBC,QAAQ,IAAI,CAACA,MAAM;YACnBC,eAAe,IAAI,CAACA,aAAa;YACjCE,cAAc,IAAI,CAACA,YAAY;YAC/BC,aAAa,IAAI,CAACA,WAAW;YAC7BC,cAAc,IAAI,CAACA,YAAY;YAC/BC,eAAe,IAAI,CAACA,aAAa;YACjCC,aAAa,IAAI,CAACA,WAAW;YAC7BC,WAAW,IAAI,CAACA,SAAS;QAC3B;IACF;IAEAmD,iBAAsB;QACpB,OAAO;YACLnE,IAAI,IAAI,CAACA,EAAE;YACXC,MAAM,IAAI,CAACA,IAAI;YACfC,QAAQ,IAAI,CAACA,MAAM;YACnBM,QAAQ,IAAI,CAACA,MAAM;YACnBD,UAAU,IAAI,CAACA,QAAQ;YACvBI,cAAc,IAAI,CAACA,YAAY,CAAC8B,MAAM;YACtC2B,qBAAqB,IAAI,CAAC9D,OAAO,CAAC+D,cAAc;YAChDC,aAAa,IAAI,CAAChE,OAAO,CAACgE,WAAW;YACrCC,sBAAsB,IAAI,CAACjE,OAAO,CAACiE,oBAAoB;YACvDC,cAAc,IAAI,CAAClE,OAAO,CAACkE,YAAY;YACvCC,QAAQ/D,KAAKqC,GAAG,KAAK,IAAI,CAACzC,OAAO,CAACoE,WAAW;QAC/C;IACF;IAEAC,kBAA4B;QAC1B,OAAO;eAAI,IAAI,CAAChE,YAAY;SAAC;IAC/B;IAEAiE,iBAA2B;QACzB,OAAO;eAAI,IAAI,CAAChE,WAAW;SAAC;IAC9B;IAEAiE,kBAAgC;QAC9B,OAAO;eAAI,IAAI,CAAChE,YAAY;SAAC;IAC/B;IAEAiE,2BAAiC;QAC/B,OAAO,IAAI,CAACxE,OAAO,CAACkE,YAAY;IAClC;IAGAO,aAAavE,MAAc,EAAQ;QACjC,IAAI,CAACA,MAAM,GAAGwE,KAAKC,GAAG,CAAC,GAAGD,KAAKE,GAAG,CAAC,GAAG1E;QACtC,IAAI,CAACuB,IAAI,CAAC,wBAAwB;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEQ,QAAQ,IAAI,CAACA,MAAM;QAAC;IAC5E;IAEA2E,gBAAgBrD,OAAgB,EAAQ;QACtC,IAAI,CAAC,IAAI,CAAChB,aAAa,CAACsE,IAAI,CAAC,CAACC,IAAMA,EAAErF,EAAE,KAAK8B,QAAQ9B,EAAE,GAAG;YACxD,IAAI,CAACc,aAAa,CAAC+B,IAAI,CAACf;YACxB,IAAI,CAACC,IAAI,CAAC,4BAA4B;gBAAED,SAAS,IAAI,CAAC9B,EAAE;gBAAEsF,cAAcxD;YAAQ;QAClF;IACF;IAEAyD,mBAAmBzD,OAAe,EAAQ;QACxC,IAAI,CAAChB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACsC,MAAM,CAAC,CAACiC,IAAMA,EAAErF,EAAE,KAAK8B;QAC/D,IAAI,CAACC,IAAI,CAAC,8BAA8B;YAAED,SAAS,IAAI,CAAC9B,EAAE;YAAEsF,cAAcxD;QAAQ;IACpF;IAGUL,wBAAmD;QAC3D,OAAO;YACL+D,SAAS;YACTC,SAAS;YACTC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAACzF,IAAI,EAAE;YACzC0F,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC1F,IAAI,EAAE;YACnC2F,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC3F,IAAI,EAAE;YACnC4F,cAAc,CAAC;YACfC,aAAa,CAAC;YACdC,gBAAgB,EAAE;YAClBC,aAAa,CAAC;QAChB;IACF;IAEUtE,uBAAqC;QAC7C,OAAO;YACL2C,gBAAgB;YAChB4B,aAAa;YACb1B,sBAAsB;YACtBD,aAAa;YACb4B,UAAU;YACVC,aAAa;YACbC,WAAW;YACXC,cAAc;YACdC,aAAa;YACbC,cAAc;YACdC,SAAS;YACTC,kBAAkB;YAClB/B,aAAahE,KAAKqC,GAAG;YACrByB,cAAc,IAAI9D;YAClBgG,cAAc;QAChB;IACF;IAEU/E,qBAA2B;QACnC,IAAI,CAACT,QAAQ,CAACyF,EAAE,CAAC,mBAAmB;YAClC,IAAI,CAAC,IAAI,CAACrF,cAAc,EAAE;gBACxB,IAAI,CAACa,QAAQ,GAAGyE,KAAK,CAAC,CAACvD;oBACrB,IAAI,CAACpC,MAAM,CAACoC,KAAK,CAAC,+BAA+B;wBAC/CvB,SAAS,IAAI,CAAC9B,EAAE;wBAChBqD,OAAOA,iBAAiBb,QAAQa,MAAME,OAAO,GAAGC,OAAOH;oBACzD;gBACF;YACF;QACF;IACF;IAEUrB,iBAAuB;QAC/B,IAAI,CAACZ,iBAAiB,GAAGyF,YAAY;YACnC,IAAI,CAAC,IAAI,CAACvF,cAAc,EAAE;gBACxB,IAAI,CAACwF,aAAa;YACpB;QACF,GAAG,IAAI,CAAC1G,MAAM,CAACgB,iBAAiB,IAAI;IACtC;IAEUa,yBAA+B;QACvC,IAAI,CAACZ,eAAe,GAAGwF,YAAY;YACjC,IAAI,CAAC,IAAI,CAACvF,cAAc,EAAE;gBACxB,IAAI,CAACyF,cAAc;YACrB;QACF,GAAG;IACL;IAEUD,gBAAsB;QAC9B,IAAI,CAACrG,aAAa,GAAG,IAAIC;QACzB,IAAI,CAACQ,QAAQ,CAACa,IAAI,CAAC,mBAAmB;YACpCD,SAAS,IAAI,CAAC9B,EAAE;YAChB0D,WAAW,IAAI,CAACjD,aAAa;YAC7BH,SAAS,IAAI,CAACA,OAAO;QACvB;IACF;IAEA,MAAgByG,iBAAgC;QAE9C,MAAMC,kBAAkB,IAAI,CAACC,yBAAyB;QACtD,IAAI,CAAC3G,OAAO,CAACoG,YAAY,GAAGM;QAG5B,IAAI,IAAI,CAACrG,YAAY,CAAC8B,MAAM,GAAG,GAAG;YAChC,IAAI,CAACnC,OAAO,CAACkE,YAAY,GAAG,IAAI9D;QAClC;QAGA,MAAMwG,aAAa,IAAI,CAAC5G,OAAO,CAAC+D,cAAc,GAAG,IAAI,CAAC/D,OAAO,CAAC2F,WAAW;QACzE,IAAIiB,aAAa,GAAG;YAClB,IAAI,CAAC5G,OAAO,CAACgE,WAAW,GAAG,IAAI,CAAChE,OAAO,CAAC+D,cAAc,GAAG6C;QAC3D;QAGA,MAAM,IAAI,CAAC/F,MAAM,CAACgG,KAAK,CAAC,CAAC,MAAM,EAAE,IAAI,CAACnH,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,CAACM,OAAO,EAAE;YAChEL,MAAM;YACNmH,MAAM;gBAAC;gBAAW,IAAI,CAACnH,IAAI;gBAAE,IAAI,CAACD,EAAE;aAAC;YACrCqH,WAAW;QACb;IACF;IAEUlE,kBAAkBR,MAAc,EAAEO,aAAqB,EAAEoE,OAAgB,EAAQ;QACzF,IAAIA,SAAS;YACX,IAAI,CAAChH,OAAO,CAAC+D,cAAc;YAG3B,MAAMkD,YACJ,IAAI,CAACjH,OAAO,CAACiE,oBAAoB,GAAI,CAAA,IAAI,CAACjE,OAAO,CAAC+D,cAAc,GAAG,CAAA,IAAKnB;YAC1E,IAAI,CAAC5C,OAAO,CAACiE,oBAAoB,GAAGgD,YAAY,IAAI,CAACjH,OAAO,CAAC+D,cAAc;QAC7E,OAAO;YACL,IAAI,CAAC/D,OAAO,CAAC2F,WAAW;QAC1B;QAEA,IAAI,CAAC3F,OAAO,CAACkE,YAAY,GAAG,IAAI9D;IAClC;IAEU+C,SAASJ,KAAiB,EAAQ;QAC1C,IAAI,CAACxC,YAAY,CAACgC,IAAI,CAACQ;QAGvB,IAAI,IAAI,CAACxC,YAAY,CAAC4B,MAAM,GAAG,IAAI;YACjC,IAAI,CAAC5B,YAAY,CAAC2G,KAAK;QACzB;QAEA,IAAI,CAACtG,QAAQ,CAACa,IAAI,CAAC,eAAe;YAChCD,SAAS,IAAI,CAAC9B,EAAE;YAChBqD;QACF;QAGA,MAAMoE,eACJ;YACEC,KAAK;YACLC,QAAQ;YACRC,MAAM;YACNC,UAAU;QACZ,CAAC,CAACxE,MAAMO,QAAQ,CAAC,IAAI;QAEvB,IAAI,CAACmB,YAAY,CAAC,IAAI,CAACvE,MAAM,GAAGiH;IAClC;IAEUR,4BAAoC;QAE5C,OAAO,IAAI,CAAC3G,OAAO,CAACiE,oBAAoB;IAC1C;IAEA,MAAgBnC,yBAAwC;QACtD,IAAI,IAAI,CAACzB,YAAY,CAAC8B,MAAM,KAAK,GAAG;QAEpC,OAAO,IAAIqF,QAAQ,CAACC;YAClB,MAAMC,aAAa;gBACjB,IAAI,IAAI,CAACrH,YAAY,CAAC8B,MAAM,KAAK,GAAG;oBAClCsF;gBACF,OAAO;oBACLE,WAAWD,YAAY;gBACzB;YACF;YACAA;QACF;IACF;IAEA,MAAgB9F,YAA2B;QACzC,IAAI;YACF,MAAM,IAAI,CAACf,MAAM,CAACgG,KAAK,CAAC,CAAC,MAAM,EAAE,IAAI,CAACnH,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC8D,YAAY,IAAI;gBACrE7D,MAAM;gBACNmH,MAAM;oBAAC;oBAAS,IAAI,CAACnH,IAAI;oBAAE,IAAI,CAACD,EAAE;iBAAC;gBACnCqH,WAAW;YACb;QACF,EAAE,OAAOhE,OAAO;YACd,IAAI,CAACpC,MAAM,CAACoC,KAAK,CAAC,8BAA8B;gBAC9CvB,SAAS,IAAI,CAAC9B,EAAE;gBAChBqD,OAAOA,iBAAiBb,QAAQa,MAAME,OAAO,GAAGC,OAAOH;YACzD;QACF;IACF;AACF"}