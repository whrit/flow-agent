{"version":3,"sources":["../../../../src/cli/agents/capabilities.ts"],"sourcesContent":["/**\n * Agent Capabilities System - Defines and manages agent skills and selection algorithms\n */\n\nimport type { AgentType, AgentCapabilities, TaskDefinition } from '../../swarm/types.js';\nimport type { AgentState } from './base-agent.js';\n\nexport interface CapabilityMatch {\n  agent: AgentState;\n  score: number;\n  matchedCapabilities: string[];\n  missingCapabilities: string[];\n  confidence: number;\n  reason: string;\n}\n\nexport interface TaskRequirements {\n  type: string;\n  requiredCapabilities: string[];\n  preferredCapabilities: string[];\n  languages?: string[];\n  frameworks?: string[];\n  domains?: string[];\n  tools?: string[];\n  complexity: 'low' | 'medium' | 'high' | 'critical';\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  estimatedDuration: number; // minutes\n  dependencies: string[];\n}\n\nexport interface CapabilityRegistry {\n  [capability: string]: {\n    description: string;\n    category: 'technical' | 'domain' | 'soft' | 'system';\n    prerequisites: string[];\n    relatedCapabilities: string[];\n    complexity: number; // 1-10\n    importance: number; // 1-10\n  };\n}\n\n/**\n * Agent Capability System\n */\nexport class AgentCapabilitySystem {\n  private capabilityRegistry: CapabilityRegistry;\n  private agentCapabilities: Map<string, AgentCapabilities>;\n  private taskTypeRequirements: Map<string, TaskRequirements>;\n\n  constructor() {\n    this.capabilityRegistry = this.initializeCapabilityRegistry();\n    this.agentCapabilities = new Map();\n    this.taskTypeRequirements = this.initializeTaskRequirements();\n  }\n\n  /**\n   * Get agent capabilities by agent ID\n   */\n  getAgentCapabilities(agentId: string): AgentCapabilities | undefined {\n    return this.agentCapabilities.get(agentId);\n  }\n\n  /**\n   * Register agent capabilities\n   */\n  registerAgentCapabilities(agentId: string, capabilities: AgentCapabilities): void {\n    this.agentCapabilities.set(agentId, capabilities);\n  }\n\n  /**\n   * Find best matching agents for a task\n   */\n  findBestAgents(\n    task: TaskDefinition,\n    availableAgents: AgentState[],\n    maxResults: number = 5,\n  ): CapabilityMatch[] {\n    const requirements = this.getTaskRequirements(task);\n    const matches: CapabilityMatch[] = [];\n\n    for (const agent of availableAgents) {\n      const match = this.evaluateAgentMatch(agent, requirements);\n      if (match.score > 0) {\n        matches.push(match);\n      }\n    }\n\n    // Sort by score (highest first) and return top results\n    return matches.sort((a, b) => b.score - a.score).slice(0, maxResults);\n  }\n\n  /**\n   * Get capability requirements for a task type\n   */\n  getTaskRequirements(task: TaskDefinition): TaskRequirements {\n    const baseRequirements = this.taskTypeRequirements.get(task.type);\n\n    if (!baseRequirements) {\n      // Infer requirements from task parameters\n      return this.inferTaskRequirements(task);\n    }\n\n    // Merge with task-specific parameters\n    return {\n      ...baseRequirements,\n      languages: task.parameters?.languages || baseRequirements.languages,\n      frameworks: task.parameters?.frameworks || baseRequirements.frameworks,\n      complexity: task.parameters?.complexity || baseRequirements.complexity,\n      urgency: task.parameters?.urgency || baseRequirements.urgency,\n      estimatedDuration: task.parameters?.estimatedDuration || baseRequirements.estimatedDuration,\n    };\n  }\n\n  /**\n   * Evaluate how well an agent matches task requirements\n   */\n  private evaluateAgentMatch(agent: AgentState, requirements: TaskRequirements): CapabilityMatch {\n    const capabilities = agent.capabilities;\n    let score = 0;\n    let maxScore = 0;\n    const matchedCapabilities: string[] = [];\n    const missingCapabilities: string[] = [];\n\n    // Evaluate required capabilities\n    for (const required of requirements.requiredCapabilities) {\n      maxScore += 20; // Each required capability is worth 20 points\n\n      if (this.agentHasCapability(capabilities, required)) {\n        score += 20;\n        matchedCapabilities.push(required);\n      } else {\n        missingCapabilities.push(required);\n        score -= 5; // Penalty for missing required capability\n      }\n    }\n\n    // Evaluate preferred capabilities\n    for (const preferred of requirements.preferredCapabilities) {\n      maxScore += 10; // Each preferred capability is worth 10 points\n\n      if (this.agentHasCapability(capabilities, preferred)) {\n        score += 10;\n        matchedCapabilities.push(preferred);\n      }\n    }\n\n    // Evaluate language compatibility\n    if (requirements.languages) {\n      maxScore += 15;\n      const languageMatch = requirements.languages.some((lang) =>\n        capabilities.languages.includes(lang),\n      );\n      if (languageMatch) {\n        score += 15;\n      }\n    }\n\n    // Evaluate framework compatibility\n    if (requirements.frameworks) {\n      maxScore += 15;\n      const frameworkMatch = requirements.frameworks.some((framework) =>\n        capabilities.frameworks.includes(framework),\n      );\n      if (frameworkMatch) {\n        score += 15;\n      }\n    }\n\n    // Evaluate domain expertise\n    if (requirements.domains) {\n      maxScore += 10;\n      const domainMatch = requirements.domains.some((domain) =>\n        capabilities.domains.includes(domain),\n      );\n      if (domainMatch) {\n        score += 10;\n      }\n    }\n\n    // Agent health and availability bonus\n    maxScore += 20;\n    score += agent.health * 10; // Health contributes up to 10 points\n    score += (1 - agent.workload) * 10; // Low workload contributes up to 10 points\n\n    // Agent reliability bonus\n    maxScore += 10;\n    score += capabilities.reliability * 10;\n\n    // Complexity matching\n    const complexityScore = this.evaluateComplexityMatch(capabilities, requirements.complexity);\n    maxScore += 10;\n    score += complexityScore;\n\n    // Calculate final score as percentage\n    const finalScore = maxScore > 0 ? (score / maxScore) * 100 : 0;\n    const confidence = this.calculateConfidence(\n      matchedCapabilities,\n      missingCapabilities,\n      requirements,\n    );\n    const reason = this.generateMatchReason(matchedCapabilities, missingCapabilities, finalScore);\n\n    return {\n      agent,\n      score: Math.max(0, Math.min(100, finalScore)),\n      matchedCapabilities,\n      missingCapabilities,\n      confidence,\n      reason,\n    };\n  }\n\n  /**\n   * Check if agent has a specific capability\n   */\n  private agentHasCapability(capabilities: AgentCapabilities, capability: string): boolean {\n    // Check direct capabilities\n    const capabilityFields = [\n      'codeGeneration',\n      'codeReview',\n      'testing',\n      'documentation',\n      'research',\n      'analysis',\n      'webSearch',\n      'apiIntegration',\n      'fileSystem',\n      'terminalAccess',\n    ] as const;\n\n    for (const field of capabilityFields) {\n      if (capability === field && capabilities[field]) {\n        return true;\n      }\n    }\n\n    // Check arrays\n    const arrayFields = ['languages', 'frameworks', 'domains', 'tools'] as const;\n    for (const field of arrayFields) {\n      if (capabilities[field].includes(capability)) {\n        return true;\n      }\n    }\n\n    // Check for semantic matches\n    return this.checkSemanticCapabilityMatch(capabilities, capability);\n  }\n\n  /**\n   * Check for semantic capability matches\n   */\n  private checkSemanticCapabilityMatch(\n    capabilities: AgentCapabilities,\n    capability: string,\n  ): boolean {\n    const semanticMappings: Record<string, string[]> = {\n      'web-development': ['react', 'vue', 'angular', 'javascript', 'typescript', 'html', 'css'],\n      'backend-development': ['node', 'express', 'fastify', 'python', 'django', 'flask'],\n      database: ['sql', 'postgresql', 'mysql', 'mongodb', 'redis'],\n      cloud: ['aws', 'azure', 'gcp', 'docker', 'kubernetes'],\n      testing: ['jest', 'mocha', 'cypress', 'playwright', 'selenium'],\n      'data-science': ['python', 'r', 'pandas', 'numpy', 'sklearn'],\n      mobile: ['react-native', 'flutter', 'swift', 'kotlin', 'ionic'],\n    };\n\n    for (const [concept, related] of Object.entries(semanticMappings)) {\n      if (capability.includes(concept)) {\n        return related.some(\n          (item) =>\n            capabilities.languages.includes(item) ||\n            capabilities.frameworks.includes(item) ||\n            capabilities.tools.includes(item),\n        );\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Evaluate complexity matching\n   */\n  private evaluateComplexityMatch(capabilities: AgentCapabilities, complexity: string): number {\n    const complexityScores = {\n      low: 1,\n      medium: 2,\n      high: 3,\n      critical: 4,\n    };\n\n    const agentComplexity = this.calculateAgentComplexityLevel(capabilities);\n    const taskComplexity = complexityScores[complexity as keyof typeof complexityScores] || 2;\n\n    // Perfect match gets full points, close matches get partial points\n    const diff = Math.abs(agentComplexity - taskComplexity);\n    if (diff === 0) return 10;\n    if (diff === 1) return 7;\n    if (diff === 2) return 4;\n    return 1;\n  }\n\n  /**\n   * Calculate agent's complexity handling level\n   */\n  private calculateAgentComplexityLevel(capabilities: AgentCapabilities): number {\n    let level = 1;\n\n    // Advanced capabilities increase complexity level\n    if (capabilities.codeGeneration) level += 0.5;\n    if (capabilities.analysis) level += 0.5;\n    if (capabilities.terminalAccess) level += 0.5;\n\n    // Multiple languages/frameworks indicate higher complexity handling\n    if (capabilities.languages.length > 3) level += 0.5;\n    if (capabilities.frameworks.length > 3) level += 0.5;\n    if (capabilities.domains.length > 5) level += 0.5;\n\n    // Reliability indicates ability to handle complex tasks\n    level += capabilities.reliability;\n\n    return Math.min(4, Math.max(1, Math.round(level)));\n  }\n\n  /**\n   * Calculate confidence in the match\n   */\n  private calculateConfidence(\n    matched: string[],\n    missing: string[],\n    requirements: TaskRequirements,\n  ): number {\n    const totalRequired = requirements.requiredCapabilities.length;\n    if (totalRequired === 0) return 0.8; // Default confidence\n\n    const matchRate = matched.length / (matched.length + missing.length);\n    const criticalMissing = missing.filter((cap) =>\n      requirements.requiredCapabilities.includes(cap),\n    ).length;\n\n    let confidence = matchRate;\n\n    // Reduce confidence for missing critical capabilities\n    if (criticalMissing > 0) {\n      confidence *= 1 - (criticalMissing / totalRequired) * 0.5;\n    }\n\n    return Math.max(0, Math.min(1, confidence));\n  }\n\n  /**\n   * Generate human-readable match reason\n   */\n  private generateMatchReason(matched: string[], missing: string[], score: number): string {\n    if (score >= 90) {\n      return `Excellent match with ${matched.length} matching capabilities`;\n    } else if (score >= 75) {\n      return `Good match, minor gaps in ${missing.slice(0, 2).join(', ')}`;\n    } else if (score >= 50) {\n      return `Partial match, missing key capabilities: ${missing.slice(0, 3).join(', ')}`;\n    } else {\n      return `Poor match, significant capability gaps`;\n    }\n  }\n\n  /**\n   * Infer task requirements from task description and parameters\n   */\n  private inferTaskRequirements(task: TaskDefinition): TaskRequirements {\n    const description = task.description.toLowerCase();\n    const requiredCapabilities: string[] = [];\n    const preferredCapabilities: string[] = [];\n    const languages: string[] = [];\n    const frameworks: string[] = [];\n    const domains: string[] = [];\n\n    // Analyze description for keywords\n    if (description.includes('code') || description.includes('develop')) {\n      requiredCapabilities.push('codeGeneration');\n      domains.push('development');\n    }\n\n    if (description.includes('test')) {\n      requiredCapabilities.push('testing');\n      domains.push('testing');\n    }\n\n    if (description.includes('analyze') || description.includes('analysis')) {\n      requiredCapabilities.push('analysis');\n      domains.push('analysis');\n    }\n\n    if (description.includes('research')) {\n      requiredCapabilities.push('research');\n      domains.push('research');\n    }\n\n    // Check for language mentions\n    const commonLanguages = ['javascript', 'typescript', 'python', 'java', 'go', 'rust'];\n    for (const lang of commonLanguages) {\n      if (description.includes(lang)) {\n        languages.push(lang);\n      }\n    }\n\n    return {\n      type: task.type,\n      requiredCapabilities,\n      preferredCapabilities,\n      languages,\n      frameworks,\n      domains,\n      tools: [],\n      complexity: 'medium',\n      urgency: 'medium',\n      estimatedDuration: 30, // Default 30 minutes\n      dependencies: [],\n    };\n  }\n\n  /**\n   * Initialize capability registry\n   */\n  private initializeCapabilityRegistry(): CapabilityRegistry {\n    return {\n      codeGeneration: {\n        description: 'Ability to generate code in various programming languages',\n        category: 'technical',\n        prerequisites: [],\n        relatedCapabilities: ['codeReview', 'testing'],\n        complexity: 8,\n        importance: 9,\n      },\n      codeReview: {\n        description: 'Ability to review and analyze code for quality and security',\n        category: 'technical',\n        prerequisites: ['codeGeneration'],\n        relatedCapabilities: ['testing', 'security'],\n        complexity: 7,\n        importance: 8,\n      },\n      testing: {\n        description: 'Ability to create and execute various types of tests',\n        category: 'technical',\n        prerequisites: [],\n        relatedCapabilities: ['codeGeneration', 'analysis'],\n        complexity: 6,\n        importance: 9,\n      },\n      documentation: {\n        description: 'Ability to create comprehensive documentation',\n        category: 'technical',\n        prerequisites: [],\n        relatedCapabilities: ['research', 'analysis'],\n        complexity: 4,\n        importance: 7,\n      },\n      research: {\n        description: 'Ability to gather and analyze information from various sources',\n        category: 'domain',\n        prerequisites: [],\n        relatedCapabilities: ['analysis', 'webSearch'],\n        complexity: 5,\n        importance: 8,\n      },\n      analysis: {\n        description: 'Ability to analyze data, patterns, and systems',\n        category: 'technical',\n        prerequisites: [],\n        relatedCapabilities: ['research', 'documentation'],\n        complexity: 7,\n        importance: 8,\n      },\n      webSearch: {\n        description: 'Ability to search and retrieve information from the web',\n        category: 'system',\n        prerequisites: [],\n        relatedCapabilities: ['research'],\n        complexity: 3,\n        importance: 6,\n      },\n      apiIntegration: {\n        description: 'Ability to integrate with external APIs and services',\n        category: 'technical',\n        prerequisites: [],\n        relatedCapabilities: ['codeGeneration', 'testing'],\n        complexity: 6,\n        importance: 7,\n      },\n      fileSystem: {\n        description: 'Ability to read, write, and manipulate files',\n        category: 'system',\n        prerequisites: [],\n        relatedCapabilities: [],\n        complexity: 3,\n        importance: 6,\n      },\n      terminalAccess: {\n        description: 'Ability to execute commands in terminal/shell',\n        category: 'system',\n        prerequisites: [],\n        relatedCapabilities: ['fileSystem'],\n        complexity: 5,\n        importance: 6,\n      },\n    };\n  }\n\n  /**\n   * Initialize task type requirements\n   */\n  private initializeTaskRequirements(): Map<string, TaskRequirements> {\n    const requirements = new Map<string, TaskRequirements>();\n\n    requirements.set('code-generation', {\n      type: 'code-generation',\n      requiredCapabilities: ['codeGeneration'],\n      preferredCapabilities: ['codeReview', 'testing'],\n      complexity: 'medium',\n      urgency: 'medium',\n      estimatedDuration: 30,\n      dependencies: [],\n    });\n\n    requirements.set('testing', {\n      type: 'testing',\n      requiredCapabilities: ['testing'],\n      preferredCapabilities: ['codeGeneration', 'codeReview'],\n      complexity: 'medium',\n      urgency: 'medium',\n      estimatedDuration: 25,\n      dependencies: [],\n    });\n\n    requirements.set('research', {\n      type: 'research',\n      requiredCapabilities: ['research'],\n      preferredCapabilities: ['webSearch', 'analysis', 'documentation'],\n      complexity: 'low',\n      urgency: 'low',\n      estimatedDuration: 20,\n      dependencies: [],\n    });\n\n    requirements.set('analysis', {\n      type: 'analysis',\n      requiredCapabilities: ['analysis'],\n      preferredCapabilities: ['research', 'documentation'],\n      complexity: 'medium',\n      urgency: 'medium',\n      estimatedDuration: 35,\n      dependencies: [],\n    });\n\n    requirements.set('system-design', {\n      type: 'system-design',\n      requiredCapabilities: ['analysis', 'documentation'],\n      preferredCapabilities: ['research', 'codeReview'],\n      complexity: 'high',\n      urgency: 'low',\n      estimatedDuration: 60,\n      dependencies: [],\n    });\n\n    return requirements;\n  }\n\n  /**\n   * Get agent type capabilities\n   */\n  static getAgentTypeCapabilities(agentType: AgentType): AgentCapabilities {\n    const baseCapabilities: AgentCapabilities = {\n      codeGeneration: false,\n      codeReview: false,\n      testing: false,\n      documentation: false,\n      research: false,\n      analysis: false,\n      webSearch: false,\n      apiIntegration: false,\n      fileSystem: false,\n      terminalAccess: false,\n      languages: [],\n      frameworks: [],\n      domains: [],\n      tools: [],\n      maxConcurrentTasks: 3,\n      maxMemoryUsage: 512 * 1024 * 1024,\n      maxExecutionTime: 300000,\n      reliability: 0.8,\n      speed: 0.8,\n      quality: 0.8,\n    };\n\n    switch (agentType) {\n      case 'researcher':\n        return {\n          ...baseCapabilities,\n          research: true,\n          analysis: true,\n          webSearch: true,\n          documentation: true,\n          domains: ['research', 'analysis', 'information-gathering'],\n          tools: ['web-search', 'document-analyzer', 'data-extractor'],\n        };\n\n      case 'coder':\n        return {\n          ...baseCapabilities,\n          codeGeneration: true,\n          codeReview: true,\n          testing: true,\n          terminalAccess: true,\n          fileSystem: true,\n          languages: ['typescript', 'javascript', 'python'],\n          frameworks: ['deno', 'node', 'react'],\n          domains: ['web-development', 'backend-development'],\n          tools: ['git', 'editor', 'debugger', 'linter'],\n        };\n\n      case 'analyst':\n        return {\n          ...baseCapabilities,\n          analysis: true,\n          research: true,\n          documentation: true,\n          languages: ['python', 'r', 'sql'],\n          frameworks: ['pandas', 'numpy', 'matplotlib'],\n          domains: ['data-analysis', 'statistics', 'visualization'],\n          tools: ['data-processor', 'chart-generator', 'statistical-analyzer'],\n        };\n\n      case 'architect':\n        return {\n          ...baseCapabilities,\n          analysis: true,\n          research: true,\n          documentation: true,\n          codeReview: true,\n          domains: ['system-architecture', 'software-architecture', 'cloud-architecture'],\n          tools: ['architecture-diagrams', 'system-modeler', 'design-patterns'],\n        };\n\n      case 'tester':\n        return {\n          ...baseCapabilities,\n          testing: true,\n          codeGeneration: true,\n          codeReview: true,\n          terminalAccess: true,\n          frameworks: ['jest', 'cypress', 'playwright'],\n          domains: ['testing', 'quality-assurance', 'automation'],\n          tools: ['test-runner', 'coverage-analyzer', 'browser-automation'],\n        };\n\n      case 'coordinator':\n        return {\n          ...baseCapabilities,\n          analysis: true,\n          documentation: true,\n          research: true,\n          domains: ['project-management', 'coordination', 'planning'],\n          tools: ['task-manager', 'workflow-orchestrator', 'communication-hub'],\n        };\n\n      default:\n        return baseCapabilities;\n    }\n  }\n}\n"],"names":["AgentCapabilitySystem","capabilityRegistry","agentCapabilities","taskTypeRequirements","initializeCapabilityRegistry","Map","initializeTaskRequirements","getAgentCapabilities","agentId","get","registerAgentCapabilities","capabilities","set","findBestAgents","task","availableAgents","maxResults","requirements","getTaskRequirements","matches","agent","match","evaluateAgentMatch","score","push","sort","a","b","slice","baseRequirements","type","inferTaskRequirements","languages","parameters","frameworks","complexity","urgency","estimatedDuration","maxScore","matchedCapabilities","missingCapabilities","required","requiredCapabilities","agentHasCapability","preferred","preferredCapabilities","languageMatch","some","lang","includes","frameworkMatch","framework","domains","domainMatch","domain","health","workload","reliability","complexityScore","evaluateComplexityMatch","finalScore","confidence","calculateConfidence","reason","generateMatchReason","Math","max","min","capability","capabilityFields","field","arrayFields","checkSemanticCapabilityMatch","semanticMappings","database","cloud","testing","mobile","concept","related","Object","entries","item","tools","complexityScores","low","medium","high","critical","agentComplexity","calculateAgentComplexityLevel","taskComplexity","diff","abs","level","codeGeneration","analysis","terminalAccess","length","round","matched","missing","totalRequired","matchRate","criticalMissing","filter","cap","join","description","toLowerCase","commonLanguages","dependencies","category","prerequisites","relatedCapabilities","importance","codeReview","documentation","research","webSearch","apiIntegration","fileSystem","getAgentTypeCapabilities","agentType","baseCapabilities","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","speed","quality"],"mappings":"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"}