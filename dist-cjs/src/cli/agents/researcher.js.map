{"version":3,"sources":["../../../../src/cli/agents/researcher.ts"],"sourcesContent":["/**\n * Researcher Agent - Specialized in information gathering and research\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\nexport class ResearcherAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'researcher', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: false,\n      codeReview: false,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n      webSearch: true,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: false,\n      languages: [],\n      frameworks: [],\n      domains: [\n        'research',\n        'information-gathering',\n        'data-collection',\n        'market-analysis',\n        'competitive-intelligence',\n        'academic-research',\n        'fact-checking',\n        'trend-analysis',\n        'literature-review',\n      ],\n      tools: [\n        'web-search',\n        'document-analyzer',\n        'data-extractor',\n        'citation-generator',\n        'summary-generator',\n        'trend-tracker',\n        'fact-checker',\n        'source-validator',\n        'research-planner',\n      ],\n      maxConcurrentTasks: 5,\n      maxMemoryUsage: 512 * 1024 * 1024, // 512MB\n      maxExecutionTime: 900000, // 15 minutes\n      reliability: 0.92,\n      speed: 0.85,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.8,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 20,\n      maxConcurrentTasks: 5,\n      timeoutThreshold: 900000,\n      reportingInterval: 30000,\n      heartbeatInterval: 10000,\n      permissions: ['web-access', 'file-read', 'api-access', 'search-engines', 'database-read'],\n      trustedAgents: [],\n      expertise: {\n        research: 0.95,\n        analysis: 0.9,\n        documentation: 0.85,\n        'data-collection': 0.92,\n        'fact-checking': 0.88,\n      },\n      preferences: {\n        verbose: true,\n        detailed: true,\n        citeSources: true,\n        validateFacts: true,\n        crossReference: true,\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Researcher executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'research':\n          return await this.performResearch(task);\n        case 'analysis':\n          return await this.analyzeData(task);\n        case 'fact-check':\n          return await this.verifyFacts(task);\n        case 'literature-review':\n          return await this.conductLiteratureReview(task);\n        case 'market-analysis':\n          return await this.analyzeMarket(task);\n        default:\n          return await this.performGeneralResearch(task);\n      }\n    } catch (error) {\n      this.logger.error('Research task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async performResearch(task: TaskDefinition): Promise<any> {\n    const query = task.parameters?.query || task.description;\n    const sources = task.parameters?.sources || ['web', 'academic', 'news'];\n    const depth = task.parameters?.depth || 'moderate';\n\n    this.logger.info('Starting research task', {\n      query,\n      sources,\n      depth,\n    });\n\n    const results = {\n      query,\n      sources: [] as any[],\n      summary: '',\n      findings: [] as string[],\n      recommendations: [] as string[],\n      confidence: 0,\n      metadata: {\n        searchTime: new Date(),\n        totalSources: 0,\n        sourcesAnalyzed: 0,\n        researchDepth: depth,\n      },\n    };\n\n    // Store research progress\n    await this.memory.store(\n      `research:${task.id}:progress`,\n      {\n        status: 'in-progress',\n        startTime: new Date(),\n        query,\n      },\n      {\n        type: 'research-progress',\n        tags: ['research', this.id],\n        partition: 'tasks',\n      },\n    );\n\n    // Simulate research process\n    await this.delay(2000);\n\n    results.summary = `Research findings for: ${query}`;\n    results.findings = [\n      'Key insight 1 based on research',\n      'Important trend identified',\n      'Relevant data points discovered',\n    ];\n    results.recommendations = ['Recommendation based on findings', 'Suggested next steps'];\n    results.confidence = 0.85;\n    results.metadata.totalSources = 15;\n    results.metadata.sourcesAnalyzed = 12;\n\n    // Store final results\n    await this.memory.store(`research:${task.id}:results`, results, {\n      type: 'research-results',\n      tags: ['research', 'completed', this.id],\n      partition: 'tasks',\n    });\n\n    return results;\n  }\n\n  private async analyzeData(task: TaskDefinition): Promise<any> {\n    const data = task.input?.data;\n    const analysisType = task.input?.type || 'general';\n\n    this.logger.info('Analyzing data', {\n      analysisType,\n      dataSize: data ? Object.keys(data).length : 0,\n    });\n\n    const analysis = {\n      type: analysisType,\n      insights: [] as string[],\n      patterns: [] as any[],\n      anomalies: [] as any[],\n      confidence: 0,\n      methodology: analysisType,\n      timestamp: new Date(),\n    };\n\n    // Simulate analysis\n    await this.delay(1500);\n\n    analysis.insights = [\n      'Pattern A shows significant correlation',\n      'Trend B indicates growth potential',\n      'Factor C requires attention',\n    ];\n    analysis.confidence = 0.82;\n\n    return analysis;\n  }\n\n  private async verifyFacts(task: TaskDefinition): Promise<any> {\n    const claims = task.input?.claims || [];\n    const sources = task.input?.sources || ['reliable', 'academic'];\n\n    this.logger.info('Fact-checking claims', {\n      claimsCount: claims.length,\n      sources,\n    });\n\n    const verification = {\n      claims: [] as any[],\n      overallAccuracy: 0,\n      sourcesChecked: [] as string[],\n      methodology: 'cross-reference',\n      timestamp: new Date(),\n    };\n\n    // Simulate fact-checking\n    await this.delay(3000);\n\n    verification.overallAccuracy = 0.88;\n    verification.sourcesChecked = ['Source A', 'Source B', 'Source C'];\n\n    return verification;\n  }\n\n  private async conductLiteratureReview(task: TaskDefinition): Promise<any> {\n    const topic = task.input?.topic || task.description;\n    const timeframe = task.input?.timeframe || '5-years';\n    const scope = task.input?.scope || 'broad';\n\n    this.logger.info('Conducting literature review', {\n      topic,\n      timeframe,\n      scope,\n    });\n\n    const review = {\n      topic,\n      timeframe,\n      scope,\n      papers: [] as any[],\n      keyFindings: [] as string[],\n      gaps: [] as any[],\n      recommendations: [] as any[],\n      confidence: 0,\n      methodology: 'systematic-review',\n      timestamp: new Date(),\n    };\n\n    // Simulate literature review\n    await this.delay(4000);\n\n    review.keyFindings = [\n      'Consistent finding across multiple studies',\n      'Emerging trend in recent publications',\n      'Contradictory results require further investigation',\n    ];\n    review.confidence = 0.9;\n\n    return review;\n  }\n\n  private async analyzeMarket(task: TaskDefinition): Promise<any> {\n    const market = task.input?.market || 'general';\n    const metrics = task.input?.metrics || ['size', 'growth', 'competition'];\n\n    this.logger.info('Analyzing market', {\n      market,\n      metrics,\n    });\n\n    const analysis = {\n      market,\n      metrics: {},\n      trends: [] as string[],\n      opportunities: [] as any[],\n      threats: [] as any[],\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate market analysis\n    await this.delay(2500);\n\n    analysis.trends = [\n      'Growing demand in segment X',\n      'Declining interest in feature Y',\n      'Emerging technology Z shows promise',\n    ];\n    analysis.confidence = 0.83;\n\n    return analysis;\n  }\n\n  private async performGeneralResearch(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general research', {\n      description: task.description,\n    });\n\n    // Default research approach\n    return await this.performResearch(task);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'Research & Information Gathering',\n      researchCapabilities: [\n        'Web Research',\n        'Academic Literature Review',\n        'Market Analysis',\n        'Fact Checking',\n        'Data Collection',\n        'Trend Analysis',\n      ],\n      currentResearchProjects: this.getCurrentTasks().length,\n      averageResearchTime: '8-15 minutes',\n      preferredSources: ['Academic', 'Government', 'Industry Reports', 'News'],\n      lastResearchCompleted: this.getLastTaskCompletedTime(),\n    };\n  }\n}\n\nexport const createResearcherAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): ResearcherAgent => {\n  const defaultConfig = {\n    autonomyLevel: 0.8,\n    learningEnabled: true,\n    adaptationEnabled: true,\n    maxTasksPerHour: 10,\n    maxConcurrentTasks: 3,\n    timeoutThreshold: 600000,\n    reportingInterval: 120000,\n    heartbeatInterval: 60000,\n    permissions: ['web-search', 'data-access', 'file-read', 'api-access', 'research-tools'],\n    trustedAgents: [],\n    expertise: {\n      'information-gathering': 0.95,\n      'fact-checking': 0.92,\n      'data-analysis': 0.88,\n      'literature-review': 0.9,\n      'market-research': 0.85,\n    },\n    preferences: {\n      searchDepth: 'comprehensive',\n      sourceVerification: 'rigorous',\n      reportingDetail: 'detailed',\n      timeInvestment: 'thorough',\n    },\n  };\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/researcher',\n    tempDirectory: './tmp/researcher',\n    logDirectory: './logs/researcher',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: ['web-search', 'document-reader', 'data-extractor', 'citation-generator'],\n    toolConfigs: {},\n  };\n\n  return new ResearcherAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","ResearcherAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","preferences","verbose","detailed","citeSources","validateFacts","crossReference","executeTask","task","info","agentId","taskType","type","taskId","performResearch","analyzeData","verifyFacts","conductLiteratureReview","analyzeMarket","performGeneralResearch","error","Error","message","String","query","parameters","description","sources","depth","results","summary","findings","recommendations","confidence","metadata","searchTime","Date","totalSources","sourcesAnalyzed","researchDepth","store","status","startTime","tags","partition","delay","data","input","analysisType","dataSize","Object","keys","length","insights","patterns","anomalies","methodology","timestamp","claims","claimsCount","verification","overallAccuracy","sourcesChecked","topic","timeframe","scope","review","papers","keyFindings","gaps","market","metrics","trends","opportunities","threats","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","researchCapabilities","currentResearchProjects","getCurrentTasks","averageResearchTime","preferredSources","lastResearchCompleted","getLastTaskCompletedTime","createResearcherAgent","defaultConfig","searchDepth","sourceVerification","reportingDetail","timeInvestment","defaultEnv","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs"],"mappings":"AAIA,SAASA,SAAS,QAAQ,kBAAkB;AAW5C,OAAO,MAAMC,wBAAwBD;IACnC,YACEE,EAAU,EACVC,MAAmB,EACnBC,WAA6B,EAC7BC,MAAe,EACfC,QAAmB,EACnBC,MAA+B,CAC/B;QACA,KAAK,CAACL,IAAI,cAAcC,QAAQC,aAAaC,QAAQC,UAAUC;IACjE;IAEUC,yBAA4C;QACpD,OAAO;YACLC,gBAAgB;YAChBC,YAAY;YACZC,SAAS;YACTC,eAAe;YACfC,UAAU;YACVC,UAAU;YACVC,WAAW;YACXC,gBAAgB;YAChBC,YAAY;YACZC,gBAAgB;YAChBC,WAAW,EAAE;YACbC,YAAY,EAAE;YACdC,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,OAAO;gBACL;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,oBAAoB;YACpBC,gBAAgB,MAAM,OAAO;YAC7BC,kBAAkB;YAClBC,aAAa;YACbC,OAAO;YACPC,SAAS;QACX;IACF;IAEUC,mBAAyC;QACjD,OAAO;YACLC,eAAe;YACfC,iBAAiB;YACjBC,mBAAmB;YACnBC,iBAAiB;YACjBV,oBAAoB;YACpBW,kBAAkB;YAClBC,mBAAmB;YACnBC,mBAAmB;YACnBC,aAAa;gBAAC;gBAAc;gBAAa;gBAAc;gBAAkB;aAAgB;YACzFC,eAAe,EAAE;YACjBC,WAAW;gBACT1B,UAAU;gBACVC,UAAU;gBACVF,eAAe;gBACf,mBAAmB;gBACnB,iBAAiB;YACnB;YACA4B,aAAa;gBACXC,SAAS;gBACTC,UAAU;gBACVC,aAAa;gBACbC,eAAe;gBACfC,gBAAgB;YAClB;QACF;IACF;IAEA,MAAeC,YAAYC,IAAoB,EAAgB;QAC7D,IAAI,CAAC1C,MAAM,CAAC2C,IAAI,CAAC,6BAA6B;YAC5CC,SAAS,IAAI,CAAC/C,EAAE;YAChBgD,UAAUH,KAAKI,IAAI;YACnBC,QAAQL,KAAK7C,EAAE;QACjB;QAEA,IAAI;YACF,OAAQ6C,KAAKI,IAAI;gBACf,KAAK;oBACH,OAAO,MAAM,IAAI,CAACE,eAAe,CAACN;gBACpC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACO,WAAW,CAACP;gBAChC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACQ,WAAW,CAACR;gBAChC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACS,uBAAuB,CAACT;gBAC5C,KAAK;oBACH,OAAO,MAAM,IAAI,CAACU,aAAa,CAACV;gBAClC;oBACE,OAAO,MAAM,IAAI,CAACW,sBAAsB,CAACX;YAC7C;QACF,EAAE,OAAOY,OAAO;YACd,IAAI,CAACtD,MAAM,CAACsD,KAAK,CAAC,wBAAwB;gBACxCV,SAAS,IAAI,CAAC/C,EAAE;gBAChBkD,QAAQL,KAAK7C,EAAE;gBACfyD,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,MAAMA;QACR;IACF;IAEA,MAAcN,gBAAgBN,IAAoB,EAAgB;QAChE,MAAMgB,QAAQhB,KAAKiB,UAAU,EAAED,SAAShB,KAAKkB,WAAW;QACxD,MAAMC,UAAUnB,KAAKiB,UAAU,EAAEE,WAAW;YAAC;YAAO;YAAY;SAAO;QACvE,MAAMC,QAAQpB,KAAKiB,UAAU,EAAEG,SAAS;QAExC,IAAI,CAAC9D,MAAM,CAAC2C,IAAI,CAAC,0BAA0B;YACzCe;YACAG;YACAC;QACF;QAEA,MAAMC,UAAU;YACdL;YACAG,SAAS,EAAE;YACXG,SAAS;YACTC,UAAU,EAAE;YACZC,iBAAiB,EAAE;YACnBC,YAAY;YACZC,UAAU;gBACRC,YAAY,IAAIC;gBAChBC,cAAc;gBACdC,iBAAiB;gBACjBC,eAAeX;YACjB;QACF;QAGA,MAAM,IAAI,CAAC5D,MAAM,CAACwE,KAAK,CACrB,CAAC,SAAS,EAAEhC,KAAK7C,EAAE,CAAC,SAAS,CAAC,EAC9B;YACE8E,QAAQ;YACRC,WAAW,IAAIN;YACfZ;QACF,GACA;YACEZ,MAAM;YACN+B,MAAM;gBAAC;gBAAY,IAAI,CAAChF,EAAE;aAAC;YAC3BiF,WAAW;QACb;QAIF,MAAM,IAAI,CAACC,KAAK,CAAC;QAEjBhB,QAAQC,OAAO,GAAG,CAAC,uBAAuB,EAAEN,OAAO;QACnDK,QAAQE,QAAQ,GAAG;YACjB;YACA;YACA;SACD;QACDF,QAAQG,eAAe,GAAG;YAAC;YAAoC;SAAuB;QACtFH,QAAQI,UAAU,GAAG;QACrBJ,QAAQK,QAAQ,CAACG,YAAY,GAAG;QAChCR,QAAQK,QAAQ,CAACI,eAAe,GAAG;QAGnC,MAAM,IAAI,CAACtE,MAAM,CAACwE,KAAK,CAAC,CAAC,SAAS,EAAEhC,KAAK7C,EAAE,CAAC,QAAQ,CAAC,EAAEkE,SAAS;YAC9DjB,MAAM;YACN+B,MAAM;gBAAC;gBAAY;gBAAa,IAAI,CAAChF,EAAE;aAAC;YACxCiF,WAAW;QACb;QAEA,OAAOf;IACT;IAEA,MAAcd,YAAYP,IAAoB,EAAgB;QAC5D,MAAMsC,OAAOtC,KAAKuC,KAAK,EAAED;QACzB,MAAME,eAAexC,KAAKuC,KAAK,EAAEnC,QAAQ;QAEzC,IAAI,CAAC9C,MAAM,CAAC2C,IAAI,CAAC,kBAAkB;YACjCuC;YACAC,UAAUH,OAAOI,OAAOC,IAAI,CAACL,MAAMM,MAAM,GAAG;QAC9C;QAEA,MAAM7E,WAAW;YACfqC,MAAMoC;YACNK,UAAU,EAAE;YACZC,UAAU,EAAE;YACZC,WAAW,EAAE;YACbtB,YAAY;YACZuB,aAAaR;YACbS,WAAW,IAAIrB;QACjB;QAGA,MAAM,IAAI,CAACS,KAAK,CAAC;QAEjBtE,SAAS8E,QAAQ,GAAG;YAClB;YACA;YACA;SACD;QACD9E,SAAS0D,UAAU,GAAG;QAEtB,OAAO1D;IACT;IAEA,MAAcyC,YAAYR,IAAoB,EAAgB;QAC5D,MAAMkD,SAASlD,KAAKuC,KAAK,EAAEW,UAAU,EAAE;QACvC,MAAM/B,UAAUnB,KAAKuC,KAAK,EAAEpB,WAAW;YAAC;YAAY;SAAW;QAE/D,IAAI,CAAC7D,MAAM,CAAC2C,IAAI,CAAC,wBAAwB;YACvCkD,aAAaD,OAAON,MAAM;YAC1BzB;QACF;QAEA,MAAMiC,eAAe;YACnBF,QAAQ,EAAE;YACVG,iBAAiB;YACjBC,gBAAgB,EAAE;YAClBN,aAAa;YACbC,WAAW,IAAIrB;QACjB;QAGA,MAAM,IAAI,CAACS,KAAK,CAAC;QAEjBe,aAAaC,eAAe,GAAG;QAC/BD,aAAaE,cAAc,GAAG;YAAC;YAAY;YAAY;SAAW;QAElE,OAAOF;IACT;IAEA,MAAc3C,wBAAwBT,IAAoB,EAAgB;QACxE,MAAMuD,QAAQvD,KAAKuC,KAAK,EAAEgB,SAASvD,KAAKkB,WAAW;QACnD,MAAMsC,YAAYxD,KAAKuC,KAAK,EAAEiB,aAAa;QAC3C,MAAMC,QAAQzD,KAAKuC,KAAK,EAAEkB,SAAS;QAEnC,IAAI,CAACnG,MAAM,CAAC2C,IAAI,CAAC,gCAAgC;YAC/CsD;YACAC;YACAC;QACF;QAEA,MAAMC,SAAS;YACbH;YACAC;YACAC;YACAE,QAAQ,EAAE;YACVC,aAAa,EAAE;YACfC,MAAM,EAAE;YACRrC,iBAAiB,EAAE;YACnBC,YAAY;YACZuB,aAAa;YACbC,WAAW,IAAIrB;QACjB;QAGA,MAAM,IAAI,CAACS,KAAK,CAAC;QAEjBqB,OAAOE,WAAW,GAAG;YACnB;YACA;YACA;SACD;QACDF,OAAOjC,UAAU,GAAG;QAEpB,OAAOiC;IACT;IAEA,MAAchD,cAAcV,IAAoB,EAAgB;QAC9D,MAAM8D,SAAS9D,KAAKuC,KAAK,EAAEuB,UAAU;QACrC,MAAMC,UAAU/D,KAAKuC,KAAK,EAAEwB,WAAW;YAAC;YAAQ;YAAU;SAAc;QAExE,IAAI,CAACzG,MAAM,CAAC2C,IAAI,CAAC,oBAAoB;YACnC6D;YACAC;QACF;QAEA,MAAMhG,WAAW;YACf+F;YACAC,SAAS,CAAC;YACVC,QAAQ,EAAE;YACVC,eAAe,EAAE;YACjBC,SAAS,EAAE;YACXzC,YAAY;YACZwB,WAAW,IAAIrB;QACjB;QAGA,MAAM,IAAI,CAACS,KAAK,CAAC;QAEjBtE,SAASiG,MAAM,GAAG;YAChB;YACA;YACA;SACD;QACDjG,SAAS0D,UAAU,GAAG;QAEtB,OAAO1D;IACT;IAEA,MAAc4C,uBAAuBX,IAAoB,EAAgB;QACvE,IAAI,CAAC1C,MAAM,CAAC2C,IAAI,CAAC,+BAA+B;YAC9CiB,aAAalB,KAAKkB,WAAW;QAC/B;QAGA,OAAO,MAAM,IAAI,CAACZ,eAAe,CAACN;IACpC;IAEA,MAAcqC,MAAM8B,EAAU,EAAiB;QAC7C,OAAO,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAASF;IACtD;IAESI,iBAAsB;QAC7B,OAAO;YACL,GAAG,KAAK,CAACA,gBAAgB;YACzBC,gBAAgB;YAChBC,sBAAsB;gBACpB;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,yBAAyB,IAAI,CAACC,eAAe,GAAG/B,MAAM;YACtDgC,qBAAqB;YACrBC,kBAAkB;gBAAC;gBAAY;gBAAc;gBAAoB;aAAO;YACxEC,uBAAuB,IAAI,CAACC,wBAAwB;QACtD;IACF;AACF;AAEA,OAAO,MAAMC,wBAAwB,CACnC7H,IACAC,QACAC,aACAC,QACAC,UACAC;IAEA,MAAMyH,gBAAgB;QACpBlG,eAAe;QACfC,iBAAiB;QACjBC,mBAAmB;QACnBC,iBAAiB;QACjBV,oBAAoB;QACpBW,kBAAkB;QAClBC,mBAAmB;QACnBC,mBAAmB;QACnBC,aAAa;YAAC;YAAc;YAAe;YAAa;YAAc;SAAiB;QACvFC,eAAe,EAAE;QACjBC,WAAW;YACT,yBAAyB;YACzB,iBAAiB;YACjB,iBAAiB;YACjB,qBAAqB;YACrB,mBAAmB;QACrB;QACAC,aAAa;YACXyF,aAAa;YACbC,oBAAoB;YACpBC,iBAAiB;YACjBC,gBAAgB;QAClB;IACF;IACA,MAAMC,aAAa;QACjBC,SAAS;QACTC,SAAS;QACTC,kBAAkB;QAClBC,eAAe;QACfC,cAAc;QACdC,cAAc,CAAC;QACfC,aAAa,CAAC;QACdC,gBAAgB;YAAC;YAAc;YAAmB;YAAkB;SAAqB;QACzFC,aAAa,CAAC;IAChB;IAEA,OAAO,IAAI7I,gBACTC,IACA;QAAE,GAAG8H,aAAa;QAAE,GAAG7H,MAAM;IAAC,GAC9B;QAAE,GAAGkI,UAAU;QAAE,GAAGjI,WAAW;IAAC,GAChCC,QACAC,UACAC;AAEJ,EAAE"}