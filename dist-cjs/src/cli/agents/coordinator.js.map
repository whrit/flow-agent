{"version":3,"sources":["../../../../src/cli/agents/coordinator.ts"],"sourcesContent":["/**\n * Coordinator Agent - Specialized in task orchestration and management\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\n// Type definitions for coordinator activities\ninterface ResourceAssignment {\n  resource: string;\n  task: string;\n  utilization: number;\n  duration: string;\n}\n\ninterface TaskProgressItem {\n  name: string;\n  status: string;\n  duration: string;\n}\n\nexport class CoordinatorAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'coordinator', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: false,\n      codeReview: false,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n      webSearch: false,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: false,\n      languages: [],\n      frameworks: [],\n      domains: [\n        'project-management',\n        'task-coordination',\n        'workflow-orchestration',\n        'team-management',\n        'planning',\n        'communication',\n        'resource-allocation',\n        'progress-tracking',\n      ],\n      tools: [\n        'task-manager',\n        'workflow-orchestrator',\n        'communication-hub',\n        'progress-tracker',\n        'resource-allocator',\n        'deadline-manager',\n        'status-reporter',\n      ],\n      maxConcurrentTasks: 8,\n      maxMemoryUsage: 512 * 1024 * 1024, // 512MB\n      maxExecutionTime: 600000, // 10 minutes\n      reliability: 0.95,\n      speed: 0.9,\n      quality: 0.88,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.9,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 30,\n      maxConcurrentTasks: 8,\n      timeoutThreshold: 600000,\n      reportingInterval: 15000,\n      heartbeatInterval: 8000,\n      permissions: ['file-read', 'file-write', 'api-access', 'agent-management', 'task-management'],\n      trustedAgents: [],\n      expertise: {\n        'task-orchestration': 0.95,\n        'resource-management': 0.9,\n        'progress-tracking': 0.92,\n        communication: 0.88,\n        planning: 0.85,\n      },\n      preferences: {\n        communicationStyle: 'clear',\n        reportingFrequency: 'regular',\n        prioritization: 'impact-based',\n        escalationThreshold: 'medium',\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Coordinator executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'task-orchestration':\n          return await this.orchestrateTasks(task);\n        case 'progress-tracking':\n          return await this.trackProgress(task);\n        case 'resource-allocation':\n          return await this.allocateResources(task);\n        case 'workflow-management':\n          return await this.manageWorkflow(task);\n        case 'team-coordination':\n          return await this.coordinateTeam(task);\n        case 'status-reporting':\n          return await this.generateStatusReport(task);\n        default:\n          return await this.performGeneralCoordination(task);\n      }\n    } catch (error) {\n      this.logger.error('Coordination task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async orchestrateTasks(task: TaskDefinition): Promise<any> {\n    const tasks = task.parameters?.tasks || [];\n    const strategy = task.parameters?.strategy || 'sequential';\n    const priority = task.parameters?.priority || 'balanced';\n\n    this.logger.info('Orchestrating tasks', {\n      taskCount: tasks.length,\n      strategy,\n      priority,\n    });\n\n    const orchestration = {\n      strategy,\n      priority,\n      tasks: [],\n      dependencies: [],\n      timeline: {\n        estimated: 0,\n        critical_path: [],\n        milestones: [],\n      },\n      resource_allocation: {},\n      monitoring: {\n        checkpoints: [],\n        alerts: [],\n        metrics: [],\n      },\n      risk_assessment: {\n        risks: [],\n        mitigation: [],\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate task orchestration\n    await this.delay(2000);\n\n    orchestration.tasks = tasks.map((t: any, index: number) => ({\n      id: t.id || `task-${index + 1}`,\n      name: t.name || `Task ${index + 1}`,\n      status: 'pending',\n      assignee: null,\n      estimated_duration: t.duration || 30,\n      dependencies: t.dependencies || [],\n    }));\n\n    return orchestration;\n  }\n\n  private async trackProgress(task: TaskDefinition): Promise<any> {\n    const project = task.parameters?.project;\n    const timeframe = task.parameters?.timeframe || 'weekly';\n    const metrics = task.parameters?.metrics || ['completion', 'velocity', 'quality'];\n\n    this.logger.info('Tracking progress', {\n      project,\n      timeframe,\n      metrics,\n    });\n\n    const progress = {\n      project,\n      timeframe,\n      metrics,\n      summary: {\n        overall_progress: 0,\n        tasks_completed: 0,\n        tasks_in_progress: 0,\n        tasks_pending: 0,\n        blockers: 0,\n      },\n      velocity: {\n        current: 0,\n        average: 0,\n        trend: 'stable',\n      },\n      quality_metrics: {\n        defect_rate: 0,\n        review_coverage: 0,\n        test_coverage: 0,\n      },\n      timeline: {\n        on_track: true,\n        estimated_completion: new Date(),\n        delays: [],\n      },\n      recommendations: [],\n      timestamp: new Date(),\n    };\n\n    // Simulate progress tracking\n    await this.delay(1500);\n\n    progress.summary = {\n      overall_progress: 68,\n      tasks_completed: 15,\n      tasks_in_progress: 6,\n      tasks_pending: 4,\n      blockers: 1,\n    };\n\n    return progress;\n  }\n\n  private async allocateResources(task: TaskDefinition): Promise<any> {\n    const resources = task.input?.resources || [];\n    const requirements = task.input?.requirements || [];\n    const constraints = task.input?.constraints || [];\n\n    this.logger.info('Allocating resources', {\n      resources: resources.length,\n      requirements: requirements.length,\n      constraints: constraints.length,\n    });\n\n    const allocation = {\n      resources,\n      requirements,\n      constraints,\n      assignments: [] as ResourceAssignment[],\n      utilization: {},\n      conflicts: [] as any[],\n      optimizations: [] as any[],\n      recommendations: [] as any[],\n      efficiency: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate resource allocation\n    await this.delay(2500);\n\n    allocation.assignments = [\n      {\n        resource: 'Agent-001',\n        task: 'API Development',\n        utilization: 0.8,\n        duration: '2 days',\n      },\n      {\n        resource: 'Agent-002',\n        task: 'Testing',\n        utilization: 0.6,\n        duration: '1 day',\n      },\n    ];\n\n    allocation.efficiency = 0.85;\n\n    return allocation;\n  }\n\n  private async manageWorkflow(task: TaskDefinition): Promise<any> {\n    const workflow = task.input?.workflow;\n    const stage = task.input?.stage || 'planning';\n    const automation = task.input?.automation || false;\n\n    this.logger.info('Managing workflow', {\n      workflow,\n      stage,\n      automation,\n    });\n\n    const management = {\n      workflow,\n      stage,\n      automation,\n      stages: [] as TaskProgressItem[],\n      transitions: [] as any[],\n      approvals: [] as any[],\n      bottlenecks: [] as any[],\n      optimizations: [] as any[],\n      sla_compliance: {\n        on_time: 0,\n        quality: 0,\n        budget: 0,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate workflow management\n    await this.delay(2000);\n\n    management.stages = [\n      { name: 'Planning', status: 'completed', duration: '2 days' },\n      { name: 'Development', status: 'in_progress', duration: '5 days' },\n      { name: 'Testing', status: 'pending', duration: '2 days' },\n      { name: 'Deployment', status: 'pending', duration: '1 day' },\n    ];\n\n    return management;\n  }\n\n  private async coordinateTeam(task: TaskDefinition): Promise<any> {\n    const team = task.parameters?.team || [];\n    const objectives = task.parameters?.objectives || [];\n    const communication = task.parameters?.communication || 'daily';\n\n    this.logger.info('Coordinating team', {\n      teamSize: team.length,\n      objectives: objectives.length,\n      communication,\n    });\n\n    const coordination = {\n      team,\n      objectives,\n      communication,\n      meetings: [],\n      assignments: [],\n      collaboration: {\n        tools: [],\n        channels: [],\n        frequency: communication,\n      },\n      performance: {\n        individual: {},\n        team: {\n          productivity: 0,\n          satisfaction: 0,\n          collaboration_score: 0,\n        },\n      },\n      issues: [],\n      improvements: [],\n      timestamp: new Date(),\n    };\n\n    // Simulate team coordination\n    await this.delay(1800);\n\n    coordination.performance.team = {\n      productivity: 0.82,\n      satisfaction: 0.88,\n      collaboration_score: 0.85,\n    };\n\n    return coordination;\n  }\n\n  private async generateStatusReport(task: TaskDefinition): Promise<any> {\n    const scope = task.input?.scope || 'project';\n    const period = task.input?.period || 'weekly';\n    const audience = task.input?.audience || 'stakeholders';\n    const format = task.input?.format || 'summary';\n\n    this.logger.info('Generating status report', {\n      scope,\n      period,\n      audience,\n      format,\n    });\n\n    const report = {\n      scope,\n      period,\n      audience,\n      format,\n      executive_summary: '',\n      key_metrics: {},\n      achievements: [] as string[],\n      challenges: [] as any[],\n      next_steps: [] as any[],\n      risks: [] as any[],\n      recommendations: [] as any[],\n      appendix: {\n        detailed_metrics: {},\n        charts: [] as any[],\n        raw_data: {},\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate report generation\n    await this.delay(3000);\n\n    report.executive_summary =\n      'Project is 68% complete and on track for delivery. Team productivity is high with minor blockers identified.';\n\n    report.key_metrics = {\n      completion: '68%',\n      velocity: '12 points/sprint',\n      quality: '4.2/5.0',\n      budget: '72% utilized',\n    };\n\n    report.achievements = [\n      'Completed API development milestone',\n      'Achieved 85% test coverage',\n      'Resolved 3 critical bugs',\n    ];\n\n    return report;\n  }\n\n  private async performGeneralCoordination(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general coordination', {\n      description: task.description,\n    });\n\n    // Default to task orchestration\n    return await this.orchestrateTasks(task);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'Task Orchestration & Project Management',\n      coordinationCapabilities: [\n        'Task Orchestration',\n        'Resource Allocation',\n        'Progress Tracking',\n        'Team Coordination',\n        'Workflow Management',\n        'Status Reporting',\n      ],\n      managementStyles: ['Agile', 'Waterfall', 'Hybrid'],\n      currentCoordinations: this.getCurrentTasks().length,\n      averageCoordinationTime: '5-15 minutes',\n      lastCoordinationCompleted: this.getLastTaskCompletedTime(),\n      teamSize: this.collaborators.length,\n    };\n  }\n}\n\nexport const createCoordinatorAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): CoordinatorAgent => {\n  const defaultConfig = {\n    autonomyLevel: 0.9,\n    learningEnabled: true,\n    adaptationEnabled: true,\n    maxTasksPerHour: 20,\n    maxConcurrentTasks: 5,\n    timeoutThreshold: 180000,\n    reportingInterval: 30000,\n    heartbeatInterval: 15000,\n    permissions: [\n      'task-orchestration',\n      'resource-allocation',\n      'progress-tracking',\n      'team-coordination',\n      'reporting',\n      'workflow-management',\n    ],\n    trustedAgents: [],\n    expertise: {\n      'task-orchestration': 0.98,\n      'resource-allocation': 0.95,\n      'progress-tracking': 0.92,\n      'team-coordination': 0.9,\n      'workflow-management': 0.94,\n    },\n    preferences: {\n      coordinationStyle: 'collaborative',\n      reportingFrequency: 'regular',\n      escalationThreshold: 'medium',\n      teamSize: 'medium',\n    },\n  };\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/coordinator',\n    tempDirectory: './tmp/coordinator',\n    logDirectory: './logs/coordinator',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: [\n      'task-manager',\n      'workflow-orchestrator',\n      'communication-hub',\n      'progress-tracker',\n    ],\n    toolConfigs: {\n      taskManager: { autoAssign: true, prioritization: 'impact' },\n      communication: { frequency: 'regular', style: 'clear' },\n    },\n  };\n\n  return new CoordinatorAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","CoordinatorAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","communication","planning","preferences","communicationStyle","reportingFrequency","prioritization","escalationThreshold","executeTask","task","info","agentId","taskType","type","taskId","orchestrateTasks","trackProgress","allocateResources","manageWorkflow","coordinateTeam","generateStatusReport","performGeneralCoordination","error","Error","message","String","tasks","parameters","strategy","priority","taskCount","length","orchestration","dependencies","timeline","estimated","critical_path","milestones","resource_allocation","monitoring","checkpoints","alerts","metrics","risk_assessment","risks","mitigation","timestamp","Date","delay","map","t","index","name","status","assignee","estimated_duration","duration","project","timeframe","progress","summary","overall_progress","tasks_completed","tasks_in_progress","tasks_pending","blockers","velocity","current","average","trend","quality_metrics","defect_rate","review_coverage","test_coverage","on_track","estimated_completion","delays","recommendations","resources","input","requirements","constraints","allocation","assignments","utilization","conflicts","optimizations","efficiency","resource","workflow","stage","automation","management","stages","transitions","approvals","bottlenecks","sla_compliance","on_time","budget","team","objectives","teamSize","coordination","meetings","collaboration","channels","frequency","performance","individual","productivity","satisfaction","collaboration_score","issues","improvements","scope","period","audience","format","report","executive_summary","key_metrics","achievements","challenges","next_steps","appendix","detailed_metrics","charts","raw_data","completion","description","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","coordinationCapabilities","managementStyles","currentCoordinations","getCurrentTasks","averageCoordinationTime","lastCoordinationCompleted","getLastTaskCompletedTime","collaborators","createCoordinatorAgent","defaultConfig","coordinationStyle","defaultEnv","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","taskManager","autoAssign","style"],"mappings":"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"}