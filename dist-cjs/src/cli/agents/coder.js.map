{"version":3,"sources":["../../../../src/cli/agents/coder.ts"],"sourcesContent":["/**\n * Coder Agent - Specialized in software development and code generation\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\n// Type definitions for coder activities\ninterface CodeFile {\n  path: string;\n  content: string;\n  type: string;\n}\n\ninterface TestFile {\n  path: string;\n  content: string;\n  framework: string;\n}\n\ninterface DatabaseTable {\n  name: string;\n  columns: string[];\n}\n\nexport class CoderAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'coder', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: true,\n      codeReview: true,\n      testing: true,\n      documentation: true,\n      research: false,\n      analysis: true,\n      webSearch: false,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: true,\n      languages: [\n        'typescript',\n        'javascript',\n        'python',\n        'rust',\n        'go',\n        'java',\n        'cpp',\n        'csharp',\n        'php',\n        'ruby',\n        'swift',\n        'kotlin',\n      ],\n      frameworks: [\n        'deno',\n        'node',\n        'react',\n        'vue',\n        'svelte',\n        'angular',\n        'express',\n        'fastify',\n        'nextjs',\n        'nuxtjs',\n        'django',\n        'flask',\n        'spring',\n        'rails',\n      ],\n      domains: [\n        'web-development',\n        'backend-development',\n        'frontend-development',\n        'api-development',\n        'database-design',\n        'devops',\n        'mobile-development',\n        'microservices',\n        'fullstack-development',\n        'system-architecture',\n      ],\n      tools: [\n        'git',\n        'editor',\n        'debugger',\n        'linter',\n        'formatter',\n        'compiler',\n        'bundler',\n        'package-manager',\n        'docker',\n        'kubernetes',\n        'ci-cd',\n        'testing-framework',\n      ],\n      maxConcurrentTasks: 3,\n      maxMemoryUsage: 1024 * 1024 * 1024, // 1GB\n      maxExecutionTime: 1800000, // 30 minutes\n      reliability: 0.95,\n      speed: 0.75,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.7,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 12,\n      maxConcurrentTasks: 3,\n      timeoutThreshold: 1800000,\n      reportingInterval: 60000,\n      heartbeatInterval: 15000,\n      permissions: [\n        'file-read',\n        'file-write',\n        'terminal-access',\n        'git-access',\n        'package-install',\n        'docker-access',\n      ],\n      trustedAgents: [],\n      expertise: {\n        'code-generation': 0.95,\n        debugging: 0.9,\n        testing: 0.85,\n        refactoring: 0.92,\n        architecture: 0.8,\n        performance: 0.85,\n      },\n      preferences: {\n        codeStyle: 'functional',\n        testFramework: 'jest',\n        lintingStrict: true,\n        documentation: 'comprehensive',\n        errorHandling: 'robust',\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Coder executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'code-generation':\n          return await this.generateCode(task);\n        case 'code-review':\n          return await this.reviewCode(task);\n        case 'refactoring':\n          return await this.refactorCode(task);\n        case 'testing':\n          return await this.writeTests(task);\n        case 'debugging':\n          return await this.debugCode(task);\n        case 'api-development':\n          return await this.developAPI(task);\n        case 'database-design':\n          return await this.designDatabase(task);\n        case 'performance-optimization':\n          return await this.optimizePerformance(task);\n        default:\n          return await this.performGeneralDevelopment(task);\n      }\n    } catch (error) {\n      this.logger.error('Coding task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async generateCode(task: TaskDefinition): Promise<any> {\n    const requirements = task.input?.requirements || task.description;\n    const language = task.input?.language || 'typescript';\n    const framework = task.input?.framework;\n    const style = task.input?.style || 'functional';\n\n    this.logger.info('Generating code', {\n      requirements,\n      language,\n      framework,\n      style,\n    });\n\n    const result = {\n      requirements,\n      language,\n      framework,\n      style,\n      files: [] as CodeFile[],\n      tests: [] as TestFile[],\n      documentation: '',\n      metrics: {\n        linesOfCode: 0,\n        complexity: 0,\n        testCoverage: 0,\n        quality: 0,\n      },\n      dependencies: [] as string[],\n      buildInstructions: [] as string[],\n      timestamp: new Date(),\n    };\n\n    // Store development progress\n    await this.memory.store(\n      `code:${task.id}:progress`,\n      {\n        status: 'generating',\n        startTime: new Date(),\n        requirements,\n      },\n      {\n        type: 'code-progress',\n        tags: ['coding', this.id, language],\n        partition: 'tasks',\n      },\n    );\n\n    // Simulate code generation\n    await this.delay(3000);\n\n    result.files = [\n      {\n        path: `src/main.${this.getFileExtension(language)}`,\n        content: this.generateSampleCode(language, requirements),\n        type: 'main',\n      },\n      {\n        path: `src/types.${this.getFileExtension(language)}`,\n        content: this.generateTypesCode(language),\n        type: 'types',\n      },\n    ];\n\n    result.tests = [\n      {\n        path: `tests/main.test.${this.getFileExtension(language)}`,\n        content: this.generateTestCode(language, requirements),\n        framework: 'jest',\n      },\n    ];\n\n    result.documentation = this.generateDocumentation(requirements, language);\n    result.metrics = {\n      linesOfCode: 150,\n      complexity: 3.2,\n      testCoverage: 85,\n      quality: 0.92,\n    };\n\n    result.dependencies = this.suggestDependencies(language, framework) as any[];\n    result.buildInstructions = this.generateBuildInstructions(language, framework) as string[];\n\n    // Store final results\n    await this.memory.store(`code:${task.id}:results`, result, {\n      type: 'code-results',\n      tags: ['coding', 'completed', this.id, language],\n      partition: 'tasks',\n    });\n\n    return result;\n  }\n\n  private async reviewCode(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const files = task.input?.files || [];\n    const focus = task.input?.focus || ['quality', 'security', 'performance'];\n\n    this.logger.info('Reviewing code', {\n      filesCount: files.length,\n      focus,\n    });\n\n    const review = {\n      files: [] as any[],\n      overallScore: 0,\n      issues: [] as any[],\n      suggestions: [] as any[],\n      metrics: {\n        maintainability: 0,\n        readability: 0,\n        performance: 0,\n        security: 0,\n        testability: 0,\n      },\n      recommendations: [] as any[],\n      priorityFixes: [] as any[],\n      timestamp: new Date(),\n    };\n\n    // Simulate code review\n    await this.delay(2500);\n\n    review.overallScore = 0.88;\n    review.issues = [\n      {\n        type: 'performance',\n        severity: 'medium',\n        message: 'Potential memory leak in async handler',\n        file: 'src/handlers.ts',\n        line: 45,\n        suggestion: 'Add proper cleanup in finally block',\n      },\n      {\n        type: 'security',\n        severity: 'high',\n        message: 'Input validation missing',\n        file: 'src/api.ts',\n        line: 23,\n        suggestion: 'Implement input sanitization',\n      },\n    ];\n\n    review.metrics = {\n      maintainability: 0.85,\n      readability: 0.9,\n      performance: 0.82,\n      security: 0.75,\n      testability: 0.88,\n    };\n\n    return review;\n  }\n\n  private async refactorCode(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const goals = task.input?.goals || ['maintainability', 'performance'];\n    const preserveAPI = task.input?.preserveAPI || true;\n\n    this.logger.info('Refactoring code', {\n      goals,\n      preserveAPI,\n    });\n\n    const refactoring = {\n      originalFiles: [] as any[],\n      refactoredFiles: [] as any[],\n      changes: [] as string[],\n      improvements: {\n        maintainability: 0,\n        performance: 0,\n        readability: 0,\n        testability: 0,\n      },\n      breakingChanges: [] as any[],\n      migrationGuide: '',\n      testResults: {\n        passed: 0,\n        failed: 0,\n        coverage: 0,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate refactoring\n    await this.delay(4000);\n\n    refactoring.changes = [\n      'Extracted common functionality into utility functions',\n      'Improved error handling with custom error classes',\n      'Optimized database queries using connection pooling',\n      'Added comprehensive type definitions',\n    ];\n\n    refactoring.improvements = {\n      maintainability: 0.25,\n      performance: 0.15,\n      readability: 0.3,\n      testability: 0.2,\n    };\n\n    return refactoring;\n  }\n\n  private async writeTests(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const testType = task.input?.type || 'unit';\n    const coverage = task.input?.coverage || 80;\n    const framework = task.input?.framework || 'jest';\n\n    this.logger.info('Writing tests', {\n      testType,\n      coverage,\n      framework,\n    });\n\n    const testing = {\n      testType,\n      framework,\n      targetCoverage: coverage,\n      testFiles: [] as any[],\n      testSuites: [] as any[],\n      coverage: {\n        lines: 0,\n        functions: 0,\n        branches: 0,\n        statements: 0,\n      },\n      testResults: {\n        total: 0,\n        passed: 0,\n        failed: 0,\n        skipped: 0,\n      },\n      mockingStrategy: '',\n      timestamp: new Date(),\n    };\n\n    // Simulate test writing\n    await this.delay(2000);\n\n    testing.testFiles = [\n      {\n        path: 'tests/unit/service.test.ts',\n        content: this.generateTestCode('typescript', 'service tests'),\n        testCount: 12,\n      },\n      {\n        path: 'tests/integration/api.test.ts',\n        content: this.generateTestCode('typescript', 'API integration tests'),\n        testCount: 8,\n      },\n    ];\n\n    testing.coverage = {\n      lines: 87,\n      functions: 92,\n      branches: 78,\n      statements: 89,\n    };\n\n    testing.testResults = {\n      total: 20,\n      passed: 19,\n      failed: 1,\n      skipped: 0,\n    };\n\n    return testing;\n  }\n\n  private async debugCode(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const error = task.input?.error;\n    const symptoms = task.input?.symptoms || [];\n    const environment = task.input?.environment || 'development';\n\n    this.logger.info('Debugging code', {\n      error: error?.message,\n      symptoms,\n      environment,\n    });\n\n    const debugging = {\n      error,\n      symptoms,\n      environment,\n      investigation: [] as string[],\n      rootCause: '',\n      solution: '',\n      fixes: [] as any[],\n      preventionMeasures: [] as string[],\n      testCases: [] as any[],\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate debugging\n    await this.delay(3500);\n\n    debugging.investigation = [\n      'Analyzed stack trace and error context',\n      'Reviewed recent code changes',\n      'Checked environment configuration',\n      'Examined dependency versions',\n    ];\n\n    debugging.rootCause = 'Race condition in async event handler';\n    debugging.solution = 'Implement proper synchronization using mutex';\n    debugging.confidence = 0.92;\n\n    return debugging;\n  }\n\n  private async developAPI(task: TaskDefinition): Promise<any> {\n    const spec = task.input?.spec;\n    const framework = task.input?.framework || 'express';\n    const database = task.input?.database || 'postgresql';\n    const auth = task.input?.auth || 'jwt';\n\n    this.logger.info('Developing API', {\n      framework,\n      database,\n      auth,\n    });\n\n    const api = {\n      framework,\n      database,\n      auth,\n      endpoints: [] as any[],\n      models: [] as any[],\n      middleware: [] as any[],\n      documentation: '',\n      security: {\n        authentication: auth,\n        authorization: 'rbac',\n        inputValidation: true,\n        rateLimiting: true,\n        cors: true,\n      },\n      testing: {\n        unit: true,\n        integration: true,\n        e2e: false,\n      },\n      deployment: {\n        containerized: true,\n        scalable: true,\n        monitoring: true,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate API development\n    await this.delay(5000);\n\n    api.endpoints = [\n      { method: 'GET', path: '/api/users', description: 'List users' },\n      { method: 'POST', path: '/api/users', description: 'Create user' },\n      { method: 'GET', path: '/api/users/:id', description: 'Get user by ID' },\n      { method: 'PUT', path: '/api/users/:id', description: 'Update user' },\n      { method: 'DELETE', path: '/api/users/:id', description: 'Delete user' },\n    ];\n\n    return api;\n  }\n\n  private async designDatabase(task: TaskDefinition): Promise<any> {\n    const requirements = task.input?.requirements;\n    const dbType = task.input?.type || 'relational';\n    const engine = task.input?.engine || 'postgresql';\n\n    this.logger.info('Designing database', {\n      dbType,\n      engine,\n    });\n\n    const design = {\n      type: dbType,\n      engine,\n      schema: {},\n      tables: [] as DatabaseTable[],\n      relationships: [],\n      indexes: [],\n      constraints: [],\n      migrations: [],\n      performance: {\n        queryOptimization: true,\n        indexingStrategy: 'balanced',\n        cachingLayer: 'redis',\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate database design\n    await this.delay(3000);\n\n    design.tables = [\n      { name: 'users', columns: ['id', 'email', 'password', 'created_at'] },\n      { name: 'posts', columns: ['id', 'user_id', 'title', 'content', 'created_at'] },\n      { name: 'comments', columns: ['id', 'post_id', 'user_id', 'content', 'created_at'] },\n    ];\n\n    return design;\n  }\n\n  private async optimizePerformance(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const metrics = task.input?.metrics;\n    const targets = task.input?.targets || ['speed', 'memory'];\n\n    this.logger.info('Optimizing performance', {\n      targets,\n    });\n\n    const optimization = {\n      targets,\n      analysis: {\n        bottlenecks: [] as string[],\n        hotspots: [] as string[],\n        recommendations: [] as string[],\n      },\n      optimizations: [],\n      results: {\n        speedImprovement: 0,\n        memoryReduction: 0,\n        throughputIncrease: 0,\n      },\n      tradeoffs: [],\n      timestamp: new Date(),\n    };\n\n    // Simulate performance optimization\n    await this.delay(4000);\n\n    optimization.analysis.bottlenecks = [\n      'Database queries in loops',\n      'Large object instantiation',\n      'Inefficient algorithms',\n    ];\n\n    optimization.results = {\n      speedImprovement: 0.35,\n      memoryReduction: 0.22,\n      throughputIncrease: 0.45,\n    };\n\n    return optimization;\n  }\n\n  private async performGeneralDevelopment(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general development', {\n      description: task.description,\n    });\n\n    // Default to code generation\n    return await this.generateCode(task);\n  }\n\n  // Helper methods\n  private getFileExtension(language: string): string {\n    const extensions = {\n      typescript: 'ts',\n      javascript: 'js',\n      python: 'py',\n      rust: 'rs',\n      go: 'go',\n      java: 'java',\n      cpp: 'cpp',\n      csharp: 'cs',\n      php: 'php',\n      ruby: 'rb',\n      swift: 'swift',\n      kotlin: 'kt',\n    };\n    return extensions[language as keyof typeof extensions] || 'txt';\n  }\n\n  private generateSampleCode(language: string, requirements: string): string {\n    const templates = {\n      typescript: `\n// ${requirements}\nexport class Application {\n  constructor() {\n    console.log('Application initialized');\n  }\n\n  public start(): void {\n    // Implementation here\n  }\n}\n`,\n      javascript: `\n// ${requirements}\nclass Application {\n  constructor() {\n    console.log('Application initialized');\n  }\n\n  start() {\n    // Implementation here\n  }\n}\n\nmodule.exports = Application;\n`,\n      python: `\n# ${requirements}\nclass Application:\n    def __init__(self):\n        print('Application initialized')\n    \n    def start(self):\n        # Implementation here\n        pass\n`,\n    };\n    return (\n      templates[language as keyof typeof templates] ||\n      `// ${requirements}\\n// Code implementation\\n`\n    );\n  }\n\n  private generateTypesCode(language: string): string {\n    if (language === 'typescript') {\n      return `\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  createdAt: Date;\n}\n\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n}\n`;\n    }\n    return '// Type definitions\\n';\n  }\n\n  private generateTestCode(language: string, description: string): string {\n    const templates = {\n      typescript: `\nimport { Application } from '../src/main';\n\ndescribe('${description}', () => {\n  let app: Application;\n\n  beforeEach(() => {\n    app = new Application();\n  });\n\n  test('should initialize correctly', () => {\n    expect(app).toBeDefined();\n  });\n\n  test('should start successfully', () => {\n    expect(() => app.start()).not.toThrow();\n  });\n});\n`,\n      javascript: `\nconst Application = require('../src/main');\n\ndescribe('${description}', () => {\n  let app;\n\n  beforeEach(() => {\n    app = new Application();\n  });\n\n  test('should initialize correctly', () => {\n    expect(app).toBeDefined();\n  });\n\n  test('should start successfully', () => {\n    expect(() => app.start()).not.toThrow();\n  });\n});\n`,\n    };\n    return templates[language as keyof typeof templates] || `// Test code for ${description}\\n`;\n  }\n\n  private generateDocumentation(requirements: string, language: string): string {\n    return `\n# ${requirements}\n\n## Overview\nThis ${language} application implements the specified requirements.\n\n## Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\\`\\`\\`${language}\n// Example usage\n\\`\\`\\`\n\n## API Reference\n- Method 1: Description\n- Method 2: Description\n\n## Testing\n\\`\\`\\`bash\nnpm test\n\\`\\`\\`\n`;\n  }\n\n  private suggestDependencies(language: string, framework?: string): string[] {\n    const baseDeps = {\n      typescript: ['typescript', '@types/node'],\n      javascript: ['lodash', 'axios'],\n      python: ['requests', 'pytest'],\n      rust: ['serde', 'tokio'],\n      go: ['gin', 'gorm'],\n    };\n\n    const frameworkDeps = {\n      express: ['express', 'cors', 'helmet'],\n      react: ['react', 'react-dom', '@types/react'],\n      vue: ['vue', 'vue-router'],\n      django: ['django', 'djangorestframework'],\n      spring: ['spring-boot', 'spring-data-jpa'],\n    };\n\n    const deps = baseDeps[language as keyof typeof baseDeps] || [];\n    if (framework && frameworkDeps[framework as keyof typeof frameworkDeps]) {\n      deps.push(...frameworkDeps[framework as keyof typeof frameworkDeps]);\n    }\n\n    return deps;\n  }\n\n  private generateBuildInstructions(language: string, framework?: string): string[] {\n    const instructions = {\n      typescript: ['npm install', 'npm run build', 'npm start'],\n      javascript: ['npm install', 'npm start'],\n      python: ['python -m pip install -r requirements.txt', 'python main.py'],\n      rust: ['cargo build --release', 'cargo run'],\n      go: ['go mod tidy', 'go build', './main'],\n    };\n\n    return (\n      instructions[language as keyof typeof instructions] || ['Build instructions not available']\n    );\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'Software Development & Code Generation',\n      programmingLanguages: this.capabilities.languages,\n      frameworks: this.capabilities.frameworks,\n      currentProjects: this.getCurrentTasks().length,\n      averageDevelopmentTime: '15-30 minutes',\n      codeQualityScore: this.metrics.codeQuality,\n      testCoverage: this.metrics.testCoverage,\n      lastCodeGenerated: this.getLastTaskCompletedTime(),\n      preferredStyle: this.config.preferences?.codeStyle || 'functional',\n    };\n  }\n}\n\nexport const createCoderAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): CoderAgent => {\n  const defaultConfig = {\n    autonomyLevel: 0.7,\n    learningEnabled: true,\n    adaptationEnabled: true,\n    maxTasksPerHour: 15,\n    maxConcurrentTasks: 2,\n    timeoutThreshold: 300000,\n    reportingInterval: 45000,\n    heartbeatInterval: 20000,\n    permissions: [\n      'file-read',\n      'file-write',\n      'directory-create',\n      'code-execution',\n      'package-management',\n      'git-operations',\n    ],\n    trustedAgents: [],\n    expertise: {\n      'code-generation': 0.95,\n      debugging: 0.9,\n      refactoring: 0.88,\n      testing: 0.85,\n      'performance-optimization': 0.87,\n    },\n    preferences: {\n      codingStyle: 'clean',\n      testingApproach: 'comprehensive',\n      documentationLevel: 'moderate',\n      refactoringFrequency: 'regular',\n    },\n  };\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/coder',\n    tempDirectory: './tmp/coder',\n    logDirectory: './logs/coder',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: ['git', 'editor', 'debugger', 'linter', 'formatter', 'compiler'],\n    toolConfigs: {\n      git: { autoCommit: false, autoSync: true },\n      linter: { strict: true, autoFix: true },\n      formatter: { style: 'prettier', tabSize: 2 },\n    },\n  };\n\n  return new CoderAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","CoderAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","debugging","refactoring","architecture","performance","preferences","codeStyle","testFramework","lintingStrict","errorHandling","executeTask","task","info","agentId","taskType","type","taskId","generateCode","reviewCode","refactorCode","writeTests","debugCode","developAPI","designDatabase","optimizePerformance","performGeneralDevelopment","error","Error","message","String","requirements","input","description","language","framework","style","result","files","tests","metrics","linesOfCode","complexity","testCoverage","dependencies","buildInstructions","timestamp","Date","store","status","startTime","tags","partition","delay","path","getFileExtension","content","generateSampleCode","generateTypesCode","generateTestCode","generateDocumentation","suggestDependencies","generateBuildInstructions","code","focus","filesCount","length","review","overallScore","issues","suggestions","maintainability","readability","security","testability","recommendations","priorityFixes","severity","file","line","suggestion","goals","preserveAPI","originalFiles","refactoredFiles","changes","improvements","breakingChanges","migrationGuide","testResults","passed","failed","coverage","testType","targetCoverage","testFiles","testSuites","lines","functions","branches","statements","total","skipped","mockingStrategy","testCount","symptoms","investigation","rootCause","solution","fixes","preventionMeasures","testCases","confidence","spec","database","auth","api","endpoints","models","middleware","authentication","authorization","inputValidation","rateLimiting","cors","unit","integration","e2e","deployment","containerized","scalable","monitoring","method","dbType","engine","design","schema","tables","relationships","indexes","constraints","migrations","queryOptimization","indexingStrategy","cachingLayer","name","columns","targets","optimization","bottlenecks","hotspots","optimizations","results","speedImprovement","memoryReduction","throughputIncrease","tradeoffs","extensions","typescript","javascript","python","rust","go","java","cpp","csharp","php","ruby","swift","kotlin","templates","baseDeps","frameworkDeps","express","react","vue","django","spring","deps","push","instructions","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","programmingLanguages","capabilities","currentProjects","getCurrentTasks","averageDevelopmentTime","codeQualityScore","codeQuality","lastCodeGenerated","getLastTaskCompletedTime","preferredStyle","createCoderAgent","defaultConfig","codingStyle","testingApproach","documentationLevel","refactoringFrequency","defaultEnv","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","git","autoCommit","autoSync","linter","strict","autoFix","formatter","tabSize"],"mappings":"AAIA,SAASA,SAAS,QAAQ,kBAAkB;AA6B5C,OAAO,MAAMC,mBAAmBD;IAC9B,YACEE,EAAU,EACVC,MAAmB,EACnBC,WAA6B,EAC7BC,MAAe,EACfC,QAAmB,EACnBC,MAA+B,CAC/B;QACA,KAAK,CAACL,IAAI,SAASC,QAAQC,aAAaC,QAAQC,UAAUC;IAC5D;IAEUC,yBAA4C;QACpD,OAAO;YACLC,gBAAgB;YAChBC,YAAY;YACZC,SAAS;YACTC,eAAe;YACfC,UAAU;YACVC,UAAU;YACVC,WAAW;YACXC,gBAAgB;YAChBC,YAAY;YACZC,gBAAgB;YAChBC,WAAW;gBACT;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,YAAY;gBACV;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,SAAS;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,OAAO;gBACL;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,oBAAoB;YACpBC,gBAAgB,OAAO,OAAO;YAC9BC,kBAAkB;YAClBC,aAAa;YACbC,OAAO;YACPC,SAAS;QACX;IACF;IAEUC,mBAAyC;QACjD,OAAO;YACLC,eAAe;YACfC,iBAAiB;YACjBC,mBAAmB;YACnBC,iBAAiB;YACjBV,oBAAoB;YACpBW,kBAAkB;YAClBC,mBAAmB;YACnBC,mBAAmB;YACnBC,aAAa;gBACX;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACDC,eAAe,EAAE;YACjBC,WAAW;gBACT,mBAAmB;gBACnBC,WAAW;gBACX7B,SAAS;gBACT8B,aAAa;gBACbC,cAAc;gBACdC,aAAa;YACf;YACAC,aAAa;gBACXC,WAAW;gBACXC,eAAe;gBACfC,eAAe;gBACfnC,eAAe;gBACfoC,eAAe;YACjB;QACF;IACF;IAEA,MAAeC,YAAYC,IAAoB,EAAgB;QAC7D,IAAI,CAAC7C,MAAM,CAAC8C,IAAI,CAAC,wBAAwB;YACvCC,SAAS,IAAI,CAAClD,EAAE;YAChBmD,UAAUH,KAAKI,IAAI;YACnBC,QAAQL,KAAKhD,EAAE;QACjB;QAEA,IAAI;YACF,OAAQgD,KAAKI,IAAI;gBACf,KAAK;oBACH,OAAO,MAAM,IAAI,CAACE,YAAY,CAACN;gBACjC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACO,UAAU,CAACP;gBAC/B,KAAK;oBACH,OAAO,MAAM,IAAI,CAACQ,YAAY,CAACR;gBACjC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACS,UAAU,CAACT;gBAC/B,KAAK;oBACH,OAAO,MAAM,IAAI,CAACU,SAAS,CAACV;gBAC9B,KAAK;oBACH,OAAO,MAAM,IAAI,CAACW,UAAU,CAACX;gBAC/B,KAAK;oBACH,OAAO,MAAM,IAAI,CAACY,cAAc,CAACZ;gBACnC,KAAK;oBACH,OAAO,MAAM,IAAI,CAACa,mBAAmB,CAACb;gBACxC;oBACE,OAAO,MAAM,IAAI,CAACc,yBAAyB,CAACd;YAChD;QACF,EAAE,OAAOe,OAAO;YACd,IAAI,CAAC5D,MAAM,CAAC4D,KAAK,CAAC,sBAAsB;gBACtCb,SAAS,IAAI,CAAClD,EAAE;gBAChBqD,QAAQL,KAAKhD,EAAE;gBACf+D,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,MAAMA;QACR;IACF;IAEA,MAAcT,aAAaN,IAAoB,EAAgB;QAC7D,MAAMmB,eAAenB,KAAKoB,KAAK,EAAED,gBAAgBnB,KAAKqB,WAAW;QACjE,MAAMC,WAAWtB,KAAKoB,KAAK,EAAEE,YAAY;QACzC,MAAMC,YAAYvB,KAAKoB,KAAK,EAAEG;QAC9B,MAAMC,QAAQxB,KAAKoB,KAAK,EAAEI,SAAS;QAEnC,IAAI,CAACrE,MAAM,CAAC8C,IAAI,CAAC,mBAAmB;YAClCkB;YACAG;YACAC;YACAC;QACF;QAEA,MAAMC,SAAS;YACbN;YACAG;YACAC;YACAC;YACAE,OAAO,EAAE;YACTC,OAAO,EAAE;YACTjE,eAAe;YACfkE,SAAS;gBACPC,aAAa;gBACbC,YAAY;gBACZC,cAAc;gBACdrD,SAAS;YACX;YACAsD,cAAc,EAAE;YAChBC,mBAAmB,EAAE;YACrBC,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAAC9E,MAAM,CAAC+E,KAAK,CACrB,CAAC,KAAK,EAAEpC,KAAKhD,EAAE,CAAC,SAAS,CAAC,EAC1B;YACEqF,QAAQ;YACRC,WAAW,IAAIH;YACfhB;QACF,GACA;YACEf,MAAM;YACNmC,MAAM;gBAAC;gBAAU,IAAI,CAACvF,EAAE;gBAAEsE;aAAS;YACnCkB,WAAW;QACb;QAIF,MAAM,IAAI,CAACC,KAAK,CAAC;QAEjBhB,OAAOC,KAAK,GAAG;YACb;gBACEgB,MAAM,CAAC,SAAS,EAAE,IAAI,CAACC,gBAAgB,CAACrB,WAAW;gBACnDsB,SAAS,IAAI,CAACC,kBAAkB,CAACvB,UAAUH;gBAC3Cf,MAAM;YACR;YACA;gBACEsC,MAAM,CAAC,UAAU,EAAE,IAAI,CAACC,gBAAgB,CAACrB,WAAW;gBACpDsB,SAAS,IAAI,CAACE,iBAAiB,CAACxB;gBAChClB,MAAM;YACR;SACD;QAEDqB,OAAOE,KAAK,GAAG;YACb;gBACEe,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAACC,gBAAgB,CAACrB,WAAW;gBAC1DsB,SAAS,IAAI,CAACG,gBAAgB,CAACzB,UAAUH;gBACzCI,WAAW;YACb;SACD;QAEDE,OAAO/D,aAAa,GAAG,IAAI,CAACsF,qBAAqB,CAAC7B,cAAcG;QAChEG,OAAOG,OAAO,GAAG;YACfC,aAAa;YACbC,YAAY;YACZC,cAAc;YACdrD,SAAS;QACX;QAEA+C,OAAOO,YAAY,GAAG,IAAI,CAACiB,mBAAmB,CAAC3B,UAAUC;QACzDE,OAAOQ,iBAAiB,GAAG,IAAI,CAACiB,yBAAyB,CAAC5B,UAAUC;QAGpE,MAAM,IAAI,CAAClE,MAAM,CAAC+E,KAAK,CAAC,CAAC,KAAK,EAAEpC,KAAKhD,EAAE,CAAC,QAAQ,CAAC,EAAEyE,QAAQ;YACzDrB,MAAM;YACNmC,MAAM;gBAAC;gBAAU;gBAAa,IAAI,CAACvF,EAAE;gBAAEsE;aAAS;YAChDkB,WAAW;QACb;QAEA,OAAOf;IACT;IAEA,MAAclB,WAAWP,IAAoB,EAAgB;QAC3D,MAAMmD,OAAOnD,KAAKoB,KAAK,EAAE+B;QACzB,MAAMzB,QAAQ1B,KAAKoB,KAAK,EAAEM,SAAS,EAAE;QACrC,MAAM0B,QAAQpD,KAAKoB,KAAK,EAAEgC,SAAS;YAAC;YAAW;YAAY;SAAc;QAEzE,IAAI,CAACjG,MAAM,CAAC8C,IAAI,CAAC,kBAAkB;YACjCoD,YAAY3B,MAAM4B,MAAM;YACxBF;QACF;QAEA,MAAMG,SAAS;YACb7B,OAAO,EAAE;YACT8B,cAAc;YACdC,QAAQ,EAAE;YACVC,aAAa,EAAE;YACf9B,SAAS;gBACP+B,iBAAiB;gBACjBC,aAAa;gBACbnE,aAAa;gBACboE,UAAU;gBACVC,aAAa;YACf;YACAC,iBAAiB,EAAE;YACnBC,eAAe,EAAE;YACjB9B,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjBc,OAAOC,YAAY,GAAG;QACtBD,OAAOE,MAAM,GAAG;YACd;gBACErD,MAAM;gBACN6D,UAAU;gBACVhD,SAAS;gBACTiD,MAAM;gBACNC,MAAM;gBACNC,YAAY;YACd;YACA;gBACEhE,MAAM;gBACN6D,UAAU;gBACVhD,SAAS;gBACTiD,MAAM;gBACNC,MAAM;gBACNC,YAAY;YACd;SACD;QAEDb,OAAO3B,OAAO,GAAG;YACf+B,iBAAiB;YACjBC,aAAa;YACbnE,aAAa;YACboE,UAAU;YACVC,aAAa;QACf;QAEA,OAAOP;IACT;IAEA,MAAc/C,aAAaR,IAAoB,EAAgB;QAC7D,MAAMmD,OAAOnD,KAAKoB,KAAK,EAAE+B;QACzB,MAAMkB,QAAQrE,KAAKoB,KAAK,EAAEiD,SAAS;YAAC;YAAmB;SAAc;QACrE,MAAMC,cAActE,KAAKoB,KAAK,EAAEkD,eAAe;QAE/C,IAAI,CAACnH,MAAM,CAAC8C,IAAI,CAAC,oBAAoB;YACnCoE;YACAC;QACF;QAEA,MAAM/E,cAAc;YAClBgF,eAAe,EAAE;YACjBC,iBAAiB,EAAE;YACnBC,SAAS,EAAE;YACXC,cAAc;gBACZf,iBAAiB;gBACjBlE,aAAa;gBACbmE,aAAa;gBACbE,aAAa;YACf;YACAa,iBAAiB,EAAE;YACnBC,gBAAgB;YAChBC,aAAa;gBACXC,QAAQ;gBACRC,QAAQ;gBACRC,UAAU;YACZ;YACA9C,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjBlD,YAAYkF,OAAO,GAAG;YACpB;YACA;YACA;YACA;SACD;QAEDlF,YAAYmF,YAAY,GAAG;YACzBf,iBAAiB;YACjBlE,aAAa;YACbmE,aAAa;YACbE,aAAa;QACf;QAEA,OAAOvE;IACT;IAEA,MAAckB,WAAWT,IAAoB,EAAgB;QAC3D,MAAMmD,OAAOnD,KAAKoB,KAAK,EAAE+B;QACzB,MAAM8B,WAAWjF,KAAKoB,KAAK,EAAEhB,QAAQ;QACrC,MAAM4E,WAAWhF,KAAKoB,KAAK,EAAE4D,YAAY;QACzC,MAAMzD,YAAYvB,KAAKoB,KAAK,EAAEG,aAAa;QAE3C,IAAI,CAACpE,MAAM,CAAC8C,IAAI,CAAC,iBAAiB;YAChCgF;YACAD;YACAzD;QACF;QAEA,MAAM9D,UAAU;YACdwH;YACA1D;YACA2D,gBAAgBF;YAChBG,WAAW,EAAE;YACbC,YAAY,EAAE;YACdJ,UAAU;gBACRK,OAAO;gBACPC,WAAW;gBACXC,UAAU;gBACVC,YAAY;YACd;YACAX,aAAa;gBACXY,OAAO;gBACPX,QAAQ;gBACRC,QAAQ;gBACRW,SAAS;YACX;YACAC,iBAAiB;YACjBzD,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjBhF,QAAQ0H,SAAS,GAAG;YAClB;gBACEzC,MAAM;gBACNE,SAAS,IAAI,CAACG,gBAAgB,CAAC,cAAc;gBAC7C6C,WAAW;YACb;YACA;gBACElD,MAAM;gBACNE,SAAS,IAAI,CAACG,gBAAgB,CAAC,cAAc;gBAC7C6C,WAAW;YACb;SACD;QAEDnI,QAAQuH,QAAQ,GAAG;YACjBK,OAAO;YACPC,WAAW;YACXC,UAAU;YACVC,YAAY;QACd;QAEA/H,QAAQoH,WAAW,GAAG;YACpBY,OAAO;YACPX,QAAQ;YACRC,QAAQ;YACRW,SAAS;QACX;QAEA,OAAOjI;IACT;IAEA,MAAciD,UAAUV,IAAoB,EAAgB;QAC1D,MAAMmD,OAAOnD,KAAKoB,KAAK,EAAE+B;QACzB,MAAMpC,QAAQf,KAAKoB,KAAK,EAAEL;QAC1B,MAAM8E,WAAW7F,KAAKoB,KAAK,EAAEyE,YAAY,EAAE;QAC3C,MAAM3I,cAAc8C,KAAKoB,KAAK,EAAElE,eAAe;QAE/C,IAAI,CAACC,MAAM,CAAC8C,IAAI,CAAC,kBAAkB;YACjCc,OAAOA,OAAOE;YACd4E;YACA3I;QACF;QAEA,MAAMoC,YAAY;YAChByB;YACA8E;YACA3I;YACA4I,eAAe,EAAE;YACjBC,WAAW;YACXC,UAAU;YACVC,OAAO,EAAE;YACTC,oBAAoB,EAAE;YACtBC,WAAW,EAAE;YACbC,YAAY;YACZlE,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjBnD,UAAUwG,aAAa,GAAG;YACxB;YACA;YACA;YACA;SACD;QAEDxG,UAAUyG,SAAS,GAAG;QACtBzG,UAAU0G,QAAQ,GAAG;QACrB1G,UAAU8G,UAAU,GAAG;QAEvB,OAAO9G;IACT;IAEA,MAAcqB,WAAWX,IAAoB,EAAgB;QAC3D,MAAMqG,OAAOrG,KAAKoB,KAAK,EAAEiF;QACzB,MAAM9E,YAAYvB,KAAKoB,KAAK,EAAEG,aAAa;QAC3C,MAAM+E,WAAWtG,KAAKoB,KAAK,EAAEkF,YAAY;QACzC,MAAMC,OAAOvG,KAAKoB,KAAK,EAAEmF,QAAQ;QAEjC,IAAI,CAACpJ,MAAM,CAAC8C,IAAI,CAAC,kBAAkB;YACjCsB;YACA+E;YACAC;QACF;QAEA,MAAMC,MAAM;YACVjF;YACA+E;YACAC;YACAE,WAAW,EAAE;YACbC,QAAQ,EAAE;YACVC,YAAY,EAAE;YACdjJ,eAAe;YACfmG,UAAU;gBACR+C,gBAAgBL;gBAChBM,eAAe;gBACfC,iBAAiB;gBACjBC,cAAc;gBACdC,MAAM;YACR;YACAvJ,SAAS;gBACPwJ,MAAM;gBACNC,aAAa;gBACbC,KAAK;YACP;YACAC,YAAY;gBACVC,eAAe;gBACfC,UAAU;gBACVC,YAAY;YACd;YACArF,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjB+D,IAAIC,SAAS,GAAG;YACd;gBAAEe,QAAQ;gBAAO9E,MAAM;gBAAcrB,aAAa;YAAa;YAC/D;gBAAEmG,QAAQ;gBAAQ9E,MAAM;gBAAcrB,aAAa;YAAc;YACjE;gBAAEmG,QAAQ;gBAAO9E,MAAM;gBAAkBrB,aAAa;YAAiB;YACvE;gBAAEmG,QAAQ;gBAAO9E,MAAM;gBAAkBrB,aAAa;YAAc;YACpE;gBAAEmG,QAAQ;gBAAU9E,MAAM;gBAAkBrB,aAAa;YAAc;SACxE;QAED,OAAOmF;IACT;IAEA,MAAc5F,eAAeZ,IAAoB,EAAgB;QAC/D,MAAMmB,eAAenB,KAAKoB,KAAK,EAAED;QACjC,MAAMsG,SAASzH,KAAKoB,KAAK,EAAEhB,QAAQ;QACnC,MAAMsH,SAAS1H,KAAKoB,KAAK,EAAEsG,UAAU;QAErC,IAAI,CAACvK,MAAM,CAAC8C,IAAI,CAAC,sBAAsB;YACrCwH;YACAC;QACF;QAEA,MAAMC,SAAS;YACbvH,MAAMqH;YACNC;YACAE,QAAQ,CAAC;YACTC,QAAQ,EAAE;YACVC,eAAe,EAAE;YACjBC,SAAS,EAAE;YACXC,aAAa,EAAE;YACfC,YAAY,EAAE;YACdxI,aAAa;gBACXyI,mBAAmB;gBACnBC,kBAAkB;gBAClBC,cAAc;YAChB;YACAlG,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjBkF,OAAOE,MAAM,GAAG;YACd;gBAAEQ,MAAM;gBAASC,SAAS;oBAAC;oBAAM;oBAAS;oBAAY;iBAAa;YAAC;YACpE;gBAAED,MAAM;gBAASC,SAAS;oBAAC;oBAAM;oBAAW;oBAAS;oBAAW;iBAAa;YAAC;YAC9E;gBAAED,MAAM;gBAAYC,SAAS;oBAAC;oBAAM;oBAAW;oBAAW;oBAAW;iBAAa;YAAC;SACpF;QAED,OAAOX;IACT;IAEA,MAAc9G,oBAAoBb,IAAoB,EAAgB;QACpE,MAAMmD,OAAOnD,KAAKoB,KAAK,EAAE+B;QACzB,MAAMvB,UAAU5B,KAAKoB,KAAK,EAAEQ;QAC5B,MAAM2G,UAAUvI,KAAKoB,KAAK,EAAEmH,WAAW;YAAC;YAAS;SAAS;QAE1D,IAAI,CAACpL,MAAM,CAAC8C,IAAI,CAAC,0BAA0B;YACzCsI;QACF;QAEA,MAAMC,eAAe;YACnBD;YACA3K,UAAU;gBACR6K,aAAa,EAAE;gBACfC,UAAU,EAAE;gBACZ3E,iBAAiB,EAAE;YACrB;YACA4E,eAAe,EAAE;YACjBC,SAAS;gBACPC,kBAAkB;gBAClBC,iBAAiB;gBACjBC,oBAAoB;YACtB;YACAC,WAAW,EAAE;YACb9G,WAAW,IAAIC;QACjB;QAGA,MAAM,IAAI,CAACM,KAAK,CAAC;QAEjB+F,aAAa5K,QAAQ,CAAC6K,WAAW,GAAG;YAClC;YACA;YACA;SACD;QAEDD,aAAaI,OAAO,GAAG;YACrBC,kBAAkB;YAClBC,iBAAiB;YACjBC,oBAAoB;QACtB;QAEA,OAAOP;IACT;IAEA,MAAc1H,0BAA0Bd,IAAoB,EAAgB;QAC1E,IAAI,CAAC7C,MAAM,CAAC8C,IAAI,CAAC,kCAAkC;YACjDoB,aAAarB,KAAKqB,WAAW;QAC/B;QAGA,OAAO,MAAM,IAAI,CAACf,YAAY,CAACN;IACjC;IAGQ2C,iBAAiBrB,QAAgB,EAAU;QACjD,MAAM2H,aAAa;YACjBC,YAAY;YACZC,YAAY;YACZC,QAAQ;YACRC,MAAM;YACNC,IAAI;YACJC,MAAM;YACNC,KAAK;YACLC,QAAQ;YACRC,KAAK;YACLC,MAAM;YACNC,OAAO;YACPC,QAAQ;QACV;QACA,OAAOZ,UAAU,CAAC3H,SAAoC,IAAI;IAC5D;IAEQuB,mBAAmBvB,QAAgB,EAAEH,YAAoB,EAAU;QACzE,MAAM2I,YAAY;YAChBZ,YAAY,CAAC;GAChB,EAAE/H,aAAa;;;;;;;;;;AAUlB,CAAC;YACKgI,YAAY,CAAC;GAChB,EAAEhI,aAAa;;;;;;;;;;;;AAYlB,CAAC;YACKiI,QAAQ,CAAC;EACb,EAAEjI,aAAa;;;;;;;;AAQjB,CAAC;QACG;QACA,OACE2I,SAAS,CAACxI,SAAmC,IAC7C,CAAC,GAAG,EAAEH,aAAa,0BAA0B,CAAC;IAElD;IAEQ2B,kBAAkBxB,QAAgB,EAAU;QAClD,IAAIA,aAAa,cAAc;YAC7B,OAAO,CAAC;;;;;;;;;;;;;AAad,CAAC;QACG;QACA,OAAO;IACT;IAEQyB,iBAAiBzB,QAAgB,EAAED,WAAmB,EAAU;QACtE,MAAMyI,YAAY;YAChBZ,YAAY,CAAC;;;UAGT,EAAE7H,YAAY;;;;;;;;;;;;;;;AAexB,CAAC;YACK8H,YAAY,CAAC;;;UAGT,EAAE9H,YAAY;;;;;;;;;;;;;;;AAexB,CAAC;QACG;QACA,OAAOyI,SAAS,CAACxI,SAAmC,IAAI,CAAC,iBAAiB,EAAED,YAAY,EAAE,CAAC;IAC7F;IAEQ2B,sBAAsB7B,YAAoB,EAAEG,QAAgB,EAAU;QAC5E,OAAO,CAAC;EACV,EAAEH,aAAa;;;KAGZ,EAAEG,SAAS;;;;;;;;MAQV,EAAEA,SAAS;;;;;;;;;;;;AAYjB,CAAC;IACC;IAEQ2B,oBAAoB3B,QAAgB,EAAEC,SAAkB,EAAY;QAC1E,MAAMwI,WAAW;YACfb,YAAY;gBAAC;gBAAc;aAAc;YACzCC,YAAY;gBAAC;gBAAU;aAAQ;YAC/BC,QAAQ;gBAAC;gBAAY;aAAS;YAC9BC,MAAM;gBAAC;gBAAS;aAAQ;YACxBC,IAAI;gBAAC;gBAAO;aAAO;QACrB;QAEA,MAAMU,gBAAgB;YACpBC,SAAS;gBAAC;gBAAW;gBAAQ;aAAS;YACtCC,OAAO;gBAAC;gBAAS;gBAAa;aAAe;YAC7CC,KAAK;gBAAC;gBAAO;aAAa;YAC1BC,QAAQ;gBAAC;gBAAU;aAAsB;YACzCC,QAAQ;gBAAC;gBAAe;aAAkB;QAC5C;QAEA,MAAMC,OAAOP,QAAQ,CAACzI,SAAkC,IAAI,EAAE;QAC9D,IAAIC,aAAayI,aAAa,CAACzI,UAAwC,EAAE;YACvE+I,KAAKC,IAAI,IAAIP,aAAa,CAACzI,UAAwC;QACrE;QAEA,OAAO+I;IACT;IAEQpH,0BAA0B5B,QAAgB,EAAEC,SAAkB,EAAY;QAChF,MAAMiJ,eAAe;YACnBtB,YAAY;gBAAC;gBAAe;gBAAiB;aAAY;YACzDC,YAAY;gBAAC;gBAAe;aAAY;YACxCC,QAAQ;gBAAC;gBAA6C;aAAiB;YACvEC,MAAM;gBAAC;gBAAyB;aAAY;YAC5CC,IAAI;gBAAC;gBAAe;gBAAY;aAAS;QAC3C;QAEA,OACEkB,YAAY,CAAClJ,SAAsC,IAAI;YAAC;SAAmC;IAE/F;IAEA,MAAcmB,MAAMgI,EAAU,EAAiB;QAC7C,OAAO,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAASF;IACtD;IAESI,iBAAsB;QAC7B,OAAO;YACL,GAAG,KAAK,CAACA,gBAAgB;YACzBC,gBAAgB;YAChBC,sBAAsB,IAAI,CAACC,YAAY,CAAC/M,SAAS;YACjDC,YAAY,IAAI,CAAC8M,YAAY,CAAC9M,UAAU;YACxC+M,iBAAiB,IAAI,CAACC,eAAe,GAAG5H,MAAM;YAC9C6H,wBAAwB;YACxBC,kBAAkB,IAAI,CAACxJ,OAAO,CAACyJ,WAAW;YAC1CtJ,cAAc,IAAI,CAACH,OAAO,CAACG,YAAY;YACvCuJ,mBAAmB,IAAI,CAACC,wBAAwB;YAChDC,gBAAgB,IAAI,CAACvO,MAAM,CAACyC,WAAW,EAAEC,aAAa;QACxD;IACF;AACF;AAEA,OAAO,MAAM8L,mBAAmB,CAC9BzO,IACAC,QACAC,aACAC,QACAC,UACAC;IAEA,MAAMqO,gBAAgB;QACpB9M,eAAe;QACfC,iBAAiB;QACjBC,mBAAmB;QACnBC,iBAAiB;QACjBV,oBAAoB;QACpBW,kBAAkB;QAClBC,mBAAmB;QACnBC,mBAAmB;QACnBC,aAAa;YACX;YACA;YACA;YACA;YACA;YACA;SACD;QACDC,eAAe,EAAE;QACjBC,WAAW;YACT,mBAAmB;YACnBC,WAAW;YACXC,aAAa;YACb9B,SAAS;YACT,4BAA4B;QAC9B;QACAiC,aAAa;YACXiM,aAAa;YACbC,iBAAiB;YACjBC,oBAAoB;YACpBC,sBAAsB;QACxB;IACF;IACA,MAAMC,aAAa;QACjBC,SAAS;QACTC,SAAS;QACTC,kBAAkB;QAClBC,eAAe;QACfC,cAAc;QACdC,cAAc,CAAC;QACfC,aAAa,CAAC;QACdC,gBAAgB;YAAC;YAAO;YAAU;YAAY;YAAU;YAAa;SAAW;QAChFC,aAAa;YACXC,KAAK;gBAAEC,YAAY;gBAAOC,UAAU;YAAK;YACzCC,QAAQ;gBAAEC,QAAQ;gBAAMC,SAAS;YAAK;YACtCC,WAAW;gBAAEvL,OAAO;gBAAYwL,SAAS;YAAE;QAC7C;IACF;IAEA,OAAO,IAAIjQ,WACTC,IACA;QAAE,GAAG0O,aAAa;QAAE,GAAGzO,MAAM;IAAC,GAC9B;QAAE,GAAG8O,UAAU;QAAE,GAAG7O,WAAW;IAAC,GAChCC,QACAC,UACAC;AAEJ,EAAE"}