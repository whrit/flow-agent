{"version":3,"sources":["../../../../src/cli/agents/analyst.ts"],"sourcesContent":["/**\n * Analyst Agent - Specialized in data analysis and performance optimization\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\n// Type definitions for analysis\ninterface AnalysisVisualization {\n  type: string;\n  title: string;\n  description: string;\n  dataPoints: number;\n  interactive: boolean;\n}\n\ninterface AnalysisBottleneck {\n  component: string;\n  impact: string;\n  description: string;\n  recommendation: string;\n}\n\ninterface AnalysisAnomaly {\n  id: string;\n  timestamp: Date;\n  severity: string;\n  score: number;\n  description: string;\n  features: string[];\n}\n\ninterface AnalysisTrend {\n  metric: string;\n  direction: string;\n  slope: number;\n  significance: number;\n  period: string;\n}\n\ninterface QualityIssue {\n  category: string;\n  severity: string;\n  description: string;\n  impact: string;\n}\n\ninterface DataAnalysis {\n  dataset: {\n    name: string;\n    size: number;\n    columns: string[];\n    types: Record<string, string>;\n  };\n  analysisType: string;\n  summary: {\n    rowCount: number;\n    columnCount: number;\n    missingValues: number;\n    duplicateRows: number;\n    outliers: number;\n  };\n  descriptiveStats: Record<string, any>;\n  correlations: Record<string, any>;\n  distributions: Record<string, any>;\n  insights: string[];\n  recommendations: string[];\n  visualizations: AnalysisVisualization[];\n  confidence: number;\n  methodology: string;\n  timestamp: Date;\n}\n\ninterface PerformanceAnalysis {\n  system?: string;\n  timeframe?: string;\n  metrics: Record<string, any>;\n  benchmarks?: Record<string, any>;\n  bottlenecks: AnalysisBottleneck[];\n  anomalies: AnalysisAnomaly[];\n  trends: AnalysisTrend[];\n  insights: string[];\n  recommendations: string[];\n  visualizations: AnalysisVisualization[];\n  optimizationPotential: number;\n  projectedImprovement: number;\n  confidence: number;\n  timestamp: Date;\n  alertsTriggered?: any[];\n  slaCompliance?: {\n    availability: number;\n    responseTime: number;\n    throughput: number;\n  };\n  comparison?: {\n    baseline: string;\n    improvements: string[];\n    regressions: string[];\n  };\n}\n\ninterface QualityAnalysis {\n  codeQuality: {\n    complexity: number;\n    maintainability: number;\n    testCoverage: number;\n    technicalDebt: number;\n  };\n  issues: QualityIssue[];\n  patterns: string[];\n  recommendations: string[];\n  visualizations: AnalysisVisualization[];\n  overallScore: number;\n  confidence: number;\n  timestamp: Date;\n}\n\ninterface StatisticalAnalysis {\n  tests: Record<string, any>;\n  hypothesis: string;\n  alpha: number;\n  results: Record<string, any>;\n  interpretation: Record<string, any>;\n  assumptions: {\n    normality: boolean;\n    independence: boolean;\n    homogeneity: boolean;\n  };\n  powerAnalysis: {\n    power: number;\n    sampleSize: number;\n    effectSize: number;\n  };\n  conclusions: string[];\n  limitations: string[];\n  timestamp: Date;\n}\n\ninterface VisualizationResult {\n  chartType: string;\n  style: string;\n  interactive: boolean;\n  charts: any[];\n  dashboard: any;\n  insights: string[];\n  recommendations: string[];\n  exportFormats: string[];\n  accessibility: {\n    colorBlind: boolean;\n    screenReader: boolean;\n    highContrast: boolean;\n  };\n  timestamp: Date;\n}\n\ninterface AnomalyDetectionResult {\n  method: string;\n  sensitivity: number;\n  threshold: string | number;\n  detected: AnalysisAnomaly[];\n  summary: {\n    total: number;\n    severity: {\n      low: number;\n      medium: number;\n      high: number;\n      critical: number;\n    };\n  };\n  patterns: string[];\n  recommendations: string[];\n  falsePositiveRate: number;\n  confidence: number;\n  timestamp: Date;\n}\n\ninterface TrendAnalysisResult {\n  timeframe: string;\n  metrics: string[];\n  trends: AnalysisTrend[];\n  correlations: Record<string, number>;\n  patterns: {\n    seasonal: boolean;\n    cyclical: boolean;\n    trending: boolean;\n  };\n  forecasts: any[];\n  insights: string[];\n  recommendations: string[];\n  confidence: number;\n  timestamp: Date;\n}\n\ninterface PredictiveModelResult {\n  algorithm: string;\n  features: string[];\n  target: string;\n  performance: {\n    accuracy: number;\n    precision: number;\n    recall: number;\n    f1Score: number;\n    rmse?: number;\n    mse?: number;\n    auc?: number;\n  };\n  validation: {\n    method: string;\n    splits: number;\n    crossValidation: any;\n  };\n  predictions: any[];\n  featureImportance: Record<string, number>;\n  insights: string[];\n  recommendations: string[];\n  modelMetadata: {\n    parameters: Record<string, any>;\n    training: {\n      epochs: number;\n      convergence: boolean;\n      finalLoss: number;\n    };\n  };\n  confidence: number;\n  timestamp: Date;\n}\n\ninterface BusinessIntelligenceResult {\n  scope: string;\n  timeframe: string;\n  kpis: Record<string, any>;\n  trends: AnalysisTrend[];\n  insights: string[];\n  recommendations: string[];\n  actionItems: string[];\n  riskFactors: string[];\n  opportunities: string[];\n  marketAnalysis: {\n    competitors: any[];\n    positioning: string;\n    threats: string[];\n    opportunities: string[];\n  };\n  financialProjections: {\n    revenue: any[];\n    costs: any[];\n    profitability: any[];\n  };\n  confidence: number;\n  timestamp: Date;\n}\n\nexport class AnalystAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'analyst', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: false,\n      codeReview: true,\n      testing: false,\n      documentation: true,\n      research: false,\n      analysis: true,\n      webSearch: false,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: false,\n      languages: ['python', 'r', 'sql', 'typescript', 'javascript', 'julia', 'scala', 'matlab'],\n      frameworks: [\n        'pandas',\n        'numpy',\n        'matplotlib',\n        'seaborn',\n        'plotly',\n        'dask',\n        'spark',\n        'tensorflow',\n        'pytorch',\n        'scikit-learn',\n        'jupyter',\n        'tableau',\n      ],\n      domains: [\n        'data-analysis',\n        'statistical-analysis',\n        'performance-analysis',\n        'business-intelligence',\n        'data-visualization',\n        'predictive-modeling',\n        'machine-learning',\n        'data-mining',\n        'financial-analysis',\n        'market-research',\n        'operations-research',\n        'quality-assurance',\n      ],\n      tools: [\n        'data-processor',\n        'statistical-analyzer',\n        'chart-generator',\n        'report-builder',\n        'dashboard-creator',\n        'ml-pipeline',\n        'data-validator',\n        'performance-profiler',\n        'anomaly-detector',\n        'trend-analyzer',\n      ],\n      maxConcurrentTasks: 4,\n      maxMemoryUsage: 2048 * 1024 * 1024, // 2GB\n      maxExecutionTime: 1200000, // 20 minutes\n      reliability: 0.9,\n      speed: 0.8,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.75,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 15,\n      maxConcurrentTasks: 4,\n      timeoutThreshold: 1200000,\n      reportingInterval: 45000,\n      heartbeatInterval: 12000,\n      permissions: ['file-read', 'file-write', 'data-access', 'database-read', 'api-access'],\n      trustedAgents: [],\n      expertise: {\n        'data-analysis': 0.95,\n        'statistical-analysis': 0.92,\n        visualization: 0.88,\n        'performance-analysis': 0.9,\n        'predictive-modeling': 0.85,\n        'business-intelligence': 0.83,\n      },\n      preferences: {\n        outputFormat: 'detailed',\n        includeCharts: true,\n        statisticalTests: 'comprehensive',\n        confidenceLevel: 0.95,\n        visualStyle: 'professional',\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Analyst executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'data-analysis':\n          return await this.analyzeData(task);\n        case 'performance-analysis':\n          return await this.analyzePerformance(task);\n        case 'statistical-analysis':\n          return await this.performStatisticalAnalysis(task);\n        case 'visualization':\n          return await this.createVisualization(task);\n        case 'predictive-modeling':\n          return await this.buildPredictiveModel(task);\n        case 'anomaly-detection':\n          return await this.detectAnomalies(task);\n        case 'trend-analysis':\n          return await this.analyzeTrends(task);\n        case 'business-intelligence':\n          return await this.generateBusinessIntelligence(task);\n        case 'quality-analysis':\n          return await this.analyzeQuality(task);\n        default:\n          return await this.performGeneralAnalysis(task);\n      }\n    } catch (error) {\n      this.logger.error('Analysis task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async analyzeData(task: TaskDefinition): Promise<any> {\n    const dataset = task.context?.dataset;\n    const analysisType = task.context?.type || 'exploratory';\n    const metrics = task.context?.metrics || ['central_tendency', 'distribution', 'correlation'];\n    const outputFormat = task.context?.format || 'report';\n\n    this.logger.info('Analyzing data', {\n      analysisType,\n      metrics,\n      outputFormat,\n    });\n\n    const analysis: DataAnalysis = {\n      dataset: {\n        name: dataset?.name || 'Unknown',\n        size: dataset?.size || 0,\n        columns: dataset?.columns || [],\n        types: dataset?.types || {},\n      },\n      analysisType,\n      summary: {\n        rowCount: 0,\n        columnCount: 0,\n        missingValues: 0,\n        duplicateRows: 0,\n        outliers: 0,\n      },\n      descriptiveStats: {},\n      correlations: {},\n      distributions: {},\n      insights: [] as string[],\n      recommendations: [] as string[],\n      visualizations: [] as AnalysisVisualization[],\n      confidence: 0,\n      methodology: 'statistical-analysis',\n      timestamp: new Date(),\n    };\n\n    // Store analysis progress\n    await this.memory.store(\n      `analysis:${task.id}:progress`,\n      {\n        status: 'analyzing',\n        startTime: new Date(),\n        analysisType,\n      },\n      {\n        type: 'analysis-progress',\n        tags: ['analysis', this.id, analysisType],\n        partition: 'tasks',\n      },\n    );\n\n    // Simulate data analysis\n    await this.delay(3000);\n\n    analysis.summary = {\n      rowCount: 10000,\n      columnCount: 15,\n      missingValues: 125,\n      duplicateRows: 23,\n      outliers: 47,\n    };\n\n    analysis.insights = [\n      'Strong positive correlation between variables A and B (r=0.85)',\n      'Variable C shows seasonal patterns with 3-month cycles',\n      'Data quality is high with only 1.25% missing values',\n      'Outliers concentrated in Q4 periods, likely due to seasonal effects',\n    ];\n\n    analysis.recommendations = [\n      'Consider log transformation for skewed variables',\n      'Implement imputation strategy for missing values',\n      'Investigate Q4 outliers for business context',\n      'Add more recent data to improve model accuracy',\n    ];\n\n    analysis.confidence = 0.88;\n\n    // Store final results\n    await this.memory.store(`analysis:${task.id}:results`, analysis, {\n      type: 'analysis-results',\n      tags: ['analysis', 'completed', this.id, analysisType],\n      partition: 'tasks',\n    });\n\n    return analysis;\n  }\n\n  private async analyzePerformance(task: TaskDefinition): Promise<any> {\n    const system = task.context?.system;\n    const metrics = task.context?.metrics || ['response_time', 'throughput', 'error_rate'];\n    const timeframe = task.context?.timeframe || '24h';\n    const baseline = task.context?.baseline;\n\n    this.logger.info('Analyzing performance', {\n      system,\n      metrics,\n      timeframe,\n    });\n\n    const performance: PerformanceAnalysis = {\n      system,\n      timeframe,\n      metrics: {},\n      benchmarks: {},\n      bottlenecks: [] as AnalysisBottleneck[],\n      trends: [] as AnalysisTrend[],\n      recommendations: [] as string[],\n      alertsTriggered: [] as any[],\n      slaCompliance: {\n        availability: 0,\n        responseTime: 0,\n        throughput: 0,\n      },\n      comparison: {\n        baseline: baseline || 'previous_week',\n        improvements: [] as string[],\n        regressions: [] as string[],\n      },\n      timestamp: new Date(),\n      anomalies: [] as AnalysisAnomaly[],\n      insights: [] as string[],\n      visualizations: [] as AnalysisVisualization[],\n      optimizationPotential: 0,\n      projectedImprovement: 0,\n      confidence: 0,\n    };\n\n    // Simulate performance analysis\n    await this.delay(2500);\n\n    performance.metrics = {\n      averageResponseTime: 245, // ms\n      p95ResponseTime: 520,\n      p99ResponseTime: 1200,\n      throughput: 1250, // requests/min\n      errorRate: 0.03, // 3%\n      availability: 99.85, // %\n    };\n\n    performance.bottlenecks = [\n      {\n        component: 'Database queries',\n        impact: 'high',\n        description: 'N+1 query pattern causing 40% performance degradation',\n        recommendation: 'Implement query optimization and caching',\n      },\n      {\n        component: 'Memory allocation',\n        impact: 'medium',\n        description: 'Large object creation in hot path',\n        recommendation: 'Use object pooling or lazy initialization',\n      },\n    ];\n\n    performance.slaCompliance = {\n      availability: 99.85,\n      responseTime: 92.3,\n      throughput: 103.5,\n    };\n\n    return performance;\n  }\n\n  private async performStatisticalAnalysis(task: TaskDefinition): Promise<StatisticalAnalysis> {\n    const data = task.context?.data;\n    const tests = task.context?.tests || ['normality', 'correlation', 'significance'];\n    const alpha = task.context?.alpha || 0.05;\n    const hypothesis = task.context?.hypothesis;\n\n    this.logger.info('Performing statistical analysis', {\n      tests,\n      alpha,\n      hypothesis,\n    });\n\n    const statistics: StatisticalAnalysis = {\n      tests: {},\n      hypothesis: hypothesis || 'no_hypothesis',\n      alpha,\n      results: {},\n      interpretation: {},\n      assumptions: {\n        normality: false,\n        independence: false,\n        homogeneity: false,\n      },\n      powerAnalysis: {\n        power: 0,\n        sampleSize: 0,\n        effectSize: 0,\n      },\n      conclusions: [] as string[],\n      limitations: [] as string[],\n      timestamp: new Date(),\n    };\n\n    // Simulate statistical analysis\n    await this.delay(2000);\n\n    statistics.results = {\n      normalityTest: {\n        statistic: 0.923,\n        pValue: 0.041,\n        significant: true,\n        interpretation: 'Data deviates significantly from normal distribution',\n      },\n      correlationTest: {\n        coefficient: 0.756,\n        pValue: 0.002,\n        significant: true,\n        interpretation: 'Strong positive correlation detected',\n      },\n    };\n\n    statistics.conclusions.push(\n      'Null hypothesis rejected at α = 0.05 level',\n      \"Effect size is large (Cohen's d = 0.8)\",\n      'Results are statistically and practically significant',\n    );\n\n    return statistics;\n  }\n\n  private async createVisualization(task: TaskDefinition): Promise<VisualizationResult> {\n    const data = task.context?.data;\n    const chartType = task.context?.type || 'auto';\n    const style = task.context?.style || 'professional';\n    const interactive = task.context?.interactive || false;\n\n    this.logger.info('Creating visualization', {\n      chartType,\n      style,\n      interactive,\n    });\n\n    const visualization: VisualizationResult = {\n      chartType,\n      style,\n      interactive,\n      charts: [] as any[],\n      dashboard: null,\n      insights: [] as string[],\n      recommendations: [] as string[],\n      exportFormats: ['png', 'svg', 'pdf', 'html'],\n      accessibility: {\n        colorBlind: true,\n        screenReader: true,\n        highContrast: false,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate visualization creation\n    await this.delay(1500);\n\n    visualization.charts.push(\n      {\n        type: 'line',\n        title: 'Trend Analysis Over Time',\n        description: 'Shows temporal patterns in the data',\n        dataPoints: 100,\n        interactive: true,\n      },\n      {\n        type: 'scatter',\n        title: 'Correlation Matrix',\n        description: 'Displays relationships between variables',\n        dataPoints: 500,\n        interactive: false,\n      },\n    );\n\n    visualization.insights.push(\n      'Clear upward trend visible in Q3-Q4',\n      'Seasonal patterns repeat every 3 months',\n      'Strong correlation between variables X and Y',\n    );\n\n    return visualization;\n  }\n\n  private async buildPredictiveModel(task: TaskDefinition): Promise<PredictiveModelResult> {\n    const data = task.context?.data;\n    const target = task.context?.target;\n    const algorithm = task.context?.algorithm || 'auto';\n    const validation = task.context?.validation || 'k-fold';\n\n    this.logger.info('Building predictive model', {\n      target,\n      algorithm,\n      validation,\n    });\n\n    const model: PredictiveModelResult = {\n      algorithm: algorithm === 'auto' ? 'random_forest' : algorithm,\n      features: [],\n      target: target || 'default_target',\n      performance: {\n        accuracy: 0,\n        precision: 0,\n        recall: 0,\n        f1Score: 0,\n        rmse: 0,\n        mse: 0,\n      },\n      validation: {\n        method: validation,\n        splits: 5,\n        crossValidation: {\n          folds: 5,\n          avgScore: 0,\n          stdDev: 0,\n        },\n      },\n      predictions: [],\n      featureImportance: {},\n      insights: [],\n      recommendations: [],\n      modelMetadata: {\n        parameters: {},\n        training: {\n          epochs: 100,\n          convergence: true,\n          finalLoss: 0.15,\n        },\n      },\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate model building\n    await this.delay(4000);\n\n    model.performance = {\n      accuracy: 0.87,\n      precision: 0.85,\n      recall: 0.89,\n      f1Score: 0.87,\n      auc: 0.92,\n      rmse: 2.34,\n    };\n\n    model.featureImportance = {\n      feature_1: 0.35,\n      feature_2: 0.28,\n      feature_3: 0.22,\n      feature_4: 0.15,\n    };\n\n    return model;\n  }\n\n  private async detectAnomalies(task: TaskDefinition): Promise<AnomalyDetectionResult> {\n    const data = task.context?.data;\n    const method = task.context?.method || 'isolation_forest';\n    const sensitivity = task.context?.sensitivity || 0.1;\n    const threshold = task.context?.threshold;\n\n    this.logger.info('Detecting anomalies', {\n      method,\n      sensitivity,\n    });\n\n    const anomalies: AnomalyDetectionResult = {\n      method,\n      sensitivity,\n      threshold: threshold || 'auto',\n      detected: [] as any as any[],\n      summary: {\n        total: 0,\n        severity: {\n          low: 0,\n          medium: 0,\n          high: 0,\n          critical: 0,\n        },\n      },\n      patterns: [] as any as string[],\n      recommendations: [] as any as string[],\n      falsePositiveRate: 0,\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate anomaly detection\n    await this.delay(2000);\n\n    (anomalies.detected as any).push(\n      {\n        id: 'anom_001',\n        timestamp: new Date('2024-01-15'),\n        severity: 'high',\n        score: 0.95,\n        description: 'Unusual spike in traffic during off-peak hours',\n        features: ['traffic_volume', 'time_of_day'],\n      },\n      {\n        id: 'anom_002',\n        timestamp: new Date('2024-01-16'),\n        severity: 'medium',\n        score: 0.72,\n        description: 'Abnormal response time pattern',\n        features: ['response_time', 'request_size'],\n      },\n    );\n\n    anomalies.summary = {\n      total: 15,\n      severity: {\n        low: 8,\n        medium: 4,\n        high: 2,\n        critical: 1,\n      },\n    };\n\n    anomalies.confidence = 0.83;\n\n    return anomalies;\n  }\n\n  private async analyzeTrends(task: TaskDefinition): Promise<TrendAnalysisResult> {\n    const data = task.context?.data;\n    const timeframe = task.context?.timeframe || '3-months';\n    const granularity = task.context?.granularity || 'daily';\n    const forecast = task.context?.forecast || false;\n\n    this.logger.info('Analyzing trends', {\n      timeframe,\n      granularity,\n      forecast,\n    });\n\n    const trends: TrendAnalysisResult = {\n      timeframe,\n      metrics: [] as any as string[],\n      trends: [] as any as any[],\n      correlations: {},\n      patterns: {\n        seasonal: false,\n        cyclical: false,\n        trending: false,\n      },\n      forecasts: forecast ? ([] as any) : [],\n      insights: [] as any as string[],\n      recommendations: [] as any as string[],\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate trend analysis\n    await this.delay(2500);\n\n    (trends.trends as any).push(\n      {\n        metric: 'user_engagement',\n        direction: 'increasing',\n        slope: 0.15,\n        significance: 0.92,\n        period: 'Q4-2023',\n      },\n      {\n        metric: 'conversion_rate',\n        direction: 'stable',\n        slope: 0.02,\n        significance: 0.23,\n        period: 'Q4-2023',\n      },\n    );\n\n    trends.patterns = {\n      seasonal: true,\n      cyclical: false,\n      trending: true,\n    };\n\n    trends.confidence = 0.89;\n\n    return trends;\n  }\n\n  private async generateBusinessIntelligence(\n    task: TaskDefinition,\n  ): Promise<BusinessIntelligenceResult> {\n    const domain = task.context?.domain || 'general';\n    const metrics = task.context?.metrics || ['revenue', 'growth', 'efficiency'];\n    const timeframe = task.context?.timeframe || 'quarterly';\n    const audience = task.context?.audience || 'executive';\n\n    this.logger.info('Generating business intelligence', {\n      domain,\n      metrics,\n      timeframe,\n      audience,\n    });\n\n    const intelligence: BusinessIntelligenceResult = {\n      scope: domain,\n      timeframe,\n      kpis: {},\n      trends: [],\n      insights: [],\n      recommendations: [],\n      actionItems: [],\n      riskFactors: [],\n      opportunities: [],\n      marketAnalysis: {\n        competitors: [],\n        positioning: '',\n        threats: [],\n        opportunities: [],\n      },\n      financialProjections: {\n        revenue: [],\n        costs: [],\n        profitability: [],\n      },\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate business intelligence generation\n    await this.delay(3500);\n\n    intelligence.kpis = {\n      revenue_growth: 12.5,\n      customer_acquisition_cost: 45.3,\n      lifetime_value: 1250.0,\n      churn_rate: 5.2,\n      market_share: 15.7,\n    };\n\n    intelligence.insights = [\n      'Customer acquisition costs decreased by 18% due to improved targeting',\n      'Premium tier adoption increased 35% following feature updates',\n      'Seasonal patterns show consistent Q4 revenue spikes',\n    ];\n\n    intelligence.recommendations = [\n      'Increase marketing budget allocation to high-performing channels',\n      'Develop retention strategies for at-risk customer segments',\n      'Accelerate premium feature development to capture market demand',\n    ];\n\n    intelligence.confidence = 0.91;\n\n    return intelligence;\n  }\n\n  private async analyzeQuality(task: TaskDefinition): Promise<QualityAnalysis> {\n    const subject = task.context?.subject;\n    const criteria = task.context?.criteria || ['accuracy', 'completeness', 'consistency'];\n    const standards = task.context?.standards || 'industry';\n    const benchmark = task.context?.benchmark;\n\n    this.logger.info('Analyzing quality', {\n      subject,\n      criteria,\n      standards,\n    });\n\n    const quality: QualityAnalysis = {\n      codeQuality: {\n        complexity: 0,\n        maintainability: 0,\n        testCoverage: 0,\n        technicalDebt: 0,\n      },\n      issues: [] as any as QualityIssue[],\n      patterns: [] as any as string[],\n      recommendations: [] as any as string[],\n      visualizations: [] as any as AnalysisVisualization[],\n      overallScore: 0,\n      confidence: 0,\n      timestamp: new Date(),\n    };\n\n    // Simulate quality analysis\n    await this.delay(2000);\n\n    quality.codeQuality = {\n      complexity: 3.2,\n      maintainability: 0.87,\n      testCoverage: 0.91,\n      technicalDebt: 0.23,\n    };\n\n    quality.overallScore = 0.91;\n\n    (quality.issues as any).push({\n      category: 'completeness',\n      severity: 'medium',\n      description: 'Missing values in 13% of records',\n      impact: 'Affects downstream analysis accuracy',\n    });\n\n    (quality.patterns as any).push('High complexity in authentication module');\n    (quality.recommendations as any).push('Implement automated testing coverage');\n    quality.confidence = 0.89;\n\n    return quality;\n  }\n\n  private async performGeneralAnalysis(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general analysis', {\n      description: task.description,\n    });\n\n    // Default to data analysis\n    return await this.analyzeData(task);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'Data Analysis & Performance Optimization',\n      analyticsCapabilities: [\n        'Statistical Analysis',\n        'Data Visualization',\n        'Performance Analysis',\n        'Predictive Modeling',\n        'Anomaly Detection',\n        'Business Intelligence',\n      ],\n      supportedFormats: ['CSV', 'JSON', 'Parquet', 'SQL', 'Excel'],\n      statisticalMethods: ['Descriptive', 'Inferential', 'Multivariate', 'Time Series'],\n      currentAnalyses: this.getCurrentTasks().length,\n      averageAnalysisTime: '10-20 minutes',\n      lastAnalysisCompleted: this.getLastTaskCompletedTime(),\n      preferredTools: ['Python', 'R', 'SQL', 'Jupyter'],\n    };\n  }\n}\n\nexport const createAnalystAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): AnalystAgent => {\n  const tempAgent = new AnalystAgent(\n    id,\n    {} as AgentConfig,\n    {} as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n  const defaultConfig = (tempAgent as any).getDefaultConfig();\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/analyst',\n    tempDirectory: './tmp/analyst',\n    logDirectory: './logs/analyst',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: ['data-processor', 'statistical-analyzer', 'chart-generator', 'report-builder'],\n    toolConfigs: {\n      dataProcessor: { chunkSize: 10000, parallel: true },\n      chartGenerator: { style: 'professional', dpi: 300 },\n      reportBuilder: { format: 'pdf', includeCharts: true },\n    },\n  };\n\n  return new AnalystAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","AnalystAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","visualization","preferences","outputFormat","includeCharts","statisticalTests","confidenceLevel","visualStyle","executeTask","task","info","agentId","taskType","type","taskId","analyzeData","analyzePerformance","performStatisticalAnalysis","createVisualization","buildPredictiveModel","detectAnomalies","analyzeTrends","generateBusinessIntelligence","analyzeQuality","performGeneralAnalysis","error","Error","message","String","dataset","context","analysisType","metrics","format","name","size","columns","types","summary","rowCount","columnCount","missingValues","duplicateRows","outliers","descriptiveStats","correlations","distributions","insights","recommendations","visualizations","confidence","methodology","timestamp","Date","store","status","startTime","tags","partition","delay","system","timeframe","baseline","performance","benchmarks","bottlenecks","trends","alertsTriggered","slaCompliance","availability","responseTime","throughput","comparison","improvements","regressions","anomalies","optimizationPotential","projectedImprovement","averageResponseTime","p95ResponseTime","p99ResponseTime","errorRate","component","impact","description","recommendation","data","tests","alpha","hypothesis","statistics","results","interpretation","assumptions","normality","independence","homogeneity","powerAnalysis","power","sampleSize","effectSize","conclusions","limitations","normalityTest","statistic","pValue","significant","correlationTest","coefficient","push","chartType","style","interactive","charts","dashboard","exportFormats","accessibility","colorBlind","screenReader","highContrast","title","dataPoints","target","algorithm","validation","model","features","accuracy","precision","recall","f1Score","rmse","mse","method","splits","crossValidation","folds","avgScore","stdDev","predictions","featureImportance","modelMetadata","parameters","training","epochs","convergence","finalLoss","auc","feature_1","feature_2","feature_3","feature_4","sensitivity","threshold","detected","total","severity","low","medium","high","critical","patterns","falsePositiveRate","score","granularity","forecast","seasonal","cyclical","trending","forecasts","metric","direction","slope","significance","period","domain","audience","intelligence","scope","kpis","actionItems","riskFactors","opportunities","marketAnalysis","competitors","positioning","threats","financialProjections","revenue","costs","profitability","revenue_growth","customer_acquisition_cost","lifetime_value","churn_rate","market_share","subject","criteria","standards","benchmark","codeQuality","complexity","maintainability","testCoverage","technicalDebt","issues","overallScore","category","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","analyticsCapabilities","supportedFormats","statisticalMethods","currentAnalyses","getCurrentTasks","length","averageAnalysisTime","lastAnalysisCompleted","getLastTaskCompletedTime","preferredTools","createAnalystAgent","tempAgent","defaultConfig","defaultEnv","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","dataProcessor","chunkSize","parallel","chartGenerator","dpi","reportBuilder"],"mappings":"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"}