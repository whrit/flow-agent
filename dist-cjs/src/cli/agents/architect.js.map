{"version":3,"sources":["../../../../src/cli/agents/architect.ts"],"sourcesContent":["/**\n * Architect Agent - Specialized in system design and architecture\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\n// Type definitions for architect analysis\ninterface ArchitectureIssue {\n  category: string;\n  severity: string;\n  description: string;\n  component: string;\n  recommendation: string;\n}\n\ninterface ArchitectureRecommendation {\n  category: string;\n  priority: string;\n  description: string;\n  benefits: string[];\n  implementation: string;\n}\n\ninterface ApiEndpoint {\n  method: string;\n  path: string;\n  description: string;\n  auth: boolean;\n  rateLimit: string;\n}\n\ninterface MicroserviceComponent {\n  service: string;\n  purpose: string;\n}\n\ninterface ServiceComponent {\n  name: string;\n  responsibility: string;\n  database: string;\n  api: string;\n  dependencies: string[];\n}\n\ninterface DatabaseComponent {\n  name: string;\n  type: string;\n  purpose: string;\n  size: string;\n}\n\ninterface InfrastructureComponent {\n  name: string;\n  type: string;\n  purpose: string;\n  specifications: any;\n}\n\nexport class ArchitectAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'architect', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: false,\n      codeReview: true,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n      webSearch: true,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: false,\n      languages: ['typescript', 'javascript', 'python', 'java', 'csharp', 'go', 'rust'],\n      frameworks: [\n        'microservices',\n        'kubernetes',\n        'docker',\n        'aws',\n        'azure',\n        'gcp',\n        'terraform',\n        'helm',\n      ],\n      domains: [\n        'system-architecture',\n        'software-architecture',\n        'cloud-architecture',\n        'microservices-design',\n        'api-design',\n        'database-architecture',\n        'security-architecture',\n        'scalability-design',\n        'infrastructure-design',\n        'enterprise-architecture',\n      ],\n      tools: [\n        'architecture-diagrams',\n        'system-modeler',\n        'design-patterns',\n        'cloud-designer',\n        'api-designer',\n        'security-analyzer',\n        'performance-modeler',\n        'cost-calculator',\n      ],\n      maxConcurrentTasks: 2,\n      maxMemoryUsage: 1024 * 1024 * 1024, // 1GB\n      maxExecutionTime: 2400000, // 40 minutes\n      reliability: 0.95,\n      speed: 0.7,\n      quality: 0.98,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.6,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 8,\n      maxConcurrentTasks: 2,\n      timeoutThreshold: 2400000,\n      reportingInterval: 90000,\n      heartbeatInterval: 20000,\n      permissions: ['file-read', 'file-write', 'web-access', 'api-access', 'cloud-access'],\n      trustedAgents: [],\n      expertise: {\n        'system-design': 0.98,\n        'architecture-patterns': 0.95,\n        scalability: 0.92,\n        security: 0.88,\n        performance: 0.9,\n        'cloud-design': 0.87,\n      },\n      preferences: {\n        architectureStyle: 'microservices',\n        cloudProvider: 'multi',\n        securityFirst: true,\n        scalabilityFocus: true,\n        documentationDetail: 'comprehensive',\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Architect executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'system-design':\n          return await this.designSystem(task);\n        case 'architecture-review':\n          return await this.reviewArchitecture(task);\n        case 'api-design':\n          return await this.designAPI(task);\n        case 'cloud-architecture':\n          return await this.designCloudArchitecture(task);\n        case 'microservices-design':\n          return await this.designMicroservices(task);\n        case 'security-architecture':\n          return await this.designSecurity(task);\n        case 'scalability-design':\n          return await this.designScalability(task);\n        case 'database-architecture':\n          return await this.designDatabase(task);\n        default:\n          return await this.performGeneralDesign(task);\n      }\n    } catch (error) {\n      this.logger.error('Architecture task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async designSystem(task: TaskDefinition): Promise<any> {\n    const requirements = task.input?.requirements;\n    const scale = task.input?.scale || 'medium';\n    const constraints = task.input?.constraints || [];\n    const style = task.input?.style || 'microservices';\n\n    this.logger.info('Designing system', {\n      requirements: requirements?.length || 0,\n      scale,\n      style,\n    });\n\n    const design = {\n      requirements,\n      scale,\n      style,\n      architecture: {\n        components: [] as any[],\n        services: [] as any[],\n        databases: [] as any[],\n        queues: [] as any[],\n        caches: [] as any[],\n      },\n      patterns: [] as string[],\n      technologies: {\n        backend: [] as string[],\n        frontend: [] as string[],\n        database: [] as string[],\n        infrastructure: [] as string[],\n        monitoring: [] as string[],\n      },\n      diagrams: [],\n      documentation: {\n        overview: '',\n        components: [],\n        apis: [],\n        deployment: '',\n        monitoring: '',\n      },\n      constraints: constraints,\n      tradeoffs: [],\n      risks: [],\n      recommendations: [],\n      timestamp: new Date(),\n    };\n\n    // Store design progress\n    await this.memory.store(\n      `design:${task.id}:progress`,\n      {\n        status: 'designing',\n        startTime: new Date(),\n        requirements,\n      },\n      {\n        type: 'design-progress',\n        tags: ['architecture', this.id, style],\n        partition: 'tasks',\n      },\n    );\n\n    // Simulate system design\n    await this.delay(5000);\n\n    design.architecture.components = [\n      {\n        name: 'API Gateway',\n        type: 'gateway',\n        purpose: 'Request routing and load balancing',\n        technology: 'Kong/NGINX',\n      },\n      {\n        name: 'User Service',\n        type: 'microservice',\n        purpose: 'User management and authentication',\n        technology: 'Node.js/Express',\n      },\n      {\n        name: 'Data Service',\n        type: 'microservice',\n        purpose: 'Data processing and analytics',\n        technology: 'Python/FastAPI',\n      },\n    ] as any[];\n\n    design.patterns = [\n      'Microservices Architecture',\n      'API Gateway Pattern',\n      'Database per Service',\n      'Event Sourcing',\n      'CQRS',\n      'Circuit Breaker',\n    ] as string[];\n\n    design.technologies = {\n      backend: ['Node.js', 'Python', 'TypeScript'] as string[],\n      frontend: ['React', 'TypeScript'] as string[],\n      database: ['PostgreSQL', 'Redis', 'MongoDB'] as string[],\n      infrastructure: ['Kubernetes', 'Docker', 'AWS'] as string[],\n      monitoring: ['Prometheus', 'Grafana', 'Jaeger'] as string[],\n    };\n\n    // Store final design\n    await this.memory.store(`design:${task.id}:results`, design, {\n      type: 'design-results',\n      tags: ['architecture', 'completed', this.id, style],\n      partition: 'tasks',\n    });\n\n    return design;\n  }\n\n  private async reviewArchitecture(task: TaskDefinition): Promise<any> {\n    const architecture = task.parameters?.architecture;\n    const focus = task.parameters?.focus || ['scalability', 'security', 'maintainability'];\n    const standards = task.parameters?.standards || 'enterprise';\n\n    this.logger.info('Reviewing architecture', {\n      focus,\n      standards,\n    });\n\n    const review = {\n      architecture,\n      focus,\n      standards,\n      scores: {},\n      issues: [] as ArchitectureIssue[],\n      recommendations: [] as ArchitectureRecommendation[],\n      compliance: {\n        passed: [] as any[],\n        failed: [] as any[],\n        warnings: [] as any[],\n      },\n      patterns: {\n        identified: [] as any[],\n        missing: [] as any[],\n        antipatterns: [] as any[],\n      },\n      improvements: [] as any[],\n      riskAssessment: {\n        technical: [] as any[],\n        security: [] as any[],\n        operational: [] as any[],\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate architecture review\n    await this.delay(4000);\n\n    review.scores = {\n      scalability: 0.85,\n      security: 0.78,\n      maintainability: 0.92,\n      performance: 0.88,\n      reliability: 0.9,\n    };\n\n    review.issues = [\n      {\n        category: 'security',\n        severity: 'high',\n        description: 'Missing API rate limiting',\n        component: 'API Gateway',\n        recommendation: 'Implement rate limiting and throttling',\n      },\n      {\n        category: 'scalability',\n        severity: 'medium',\n        description: 'Single point of failure in auth service',\n        component: 'Authentication Service',\n        recommendation: 'Add redundancy and load balancing',\n      },\n    ];\n\n    return review;\n  }\n\n  private async designAPI(task: TaskDefinition): Promise<any> {\n    const domain = task.parameters?.domain;\n    const style = task.parameters?.style || 'REST';\n    const version = task.parameters?.version || 'v1';\n    const auth = task.parameters?.auth || 'JWT';\n\n    this.logger.info('Designing API', {\n      domain,\n      style,\n      version,\n      auth,\n    });\n\n    const apiDesign = {\n      domain,\n      style,\n      version,\n      auth,\n      endpoints: [] as ApiEndpoint[],\n      schemas: [] as any[],\n      security: {\n        authentication: auth,\n        authorization: 'RBAC',\n        rateLimiting: true,\n        cors: true,\n        validation: true,\n      },\n      documentation: {\n        openapi: '3.0.0',\n        interactive: true,\n        examples: true,\n      },\n      standards: {\n        naming: 'kebab-case',\n        versioning: 'url-path',\n        errorHandling: 'RFC7807',\n        pagination: 'cursor-based',\n      },\n      performance: {\n        caching: 'Redis',\n        compression: 'gzip',\n        cdn: true,\n      },\n      monitoring: {\n        logging: true,\n        metrics: true,\n        tracing: true,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate API design\n    await this.delay(3000);\n\n    apiDesign.endpoints = [\n      {\n        method: 'GET',\n        path: '/api/v1/users',\n        description: 'List users with pagination',\n        auth: true,\n        rateLimit: '1000/hour',\n      },\n      {\n        method: 'POST',\n        path: '/api/v1/users',\n        description: 'Create new user',\n        auth: true,\n        rateLimit: '100/hour',\n      },\n    ];\n\n    return apiDesign;\n  }\n\n  private async designCloudArchitecture(task: TaskDefinition): Promise<any> {\n    const provider = task.parameters?.provider || 'AWS';\n    const regions = task.parameters?.regions || ['us-east-1'];\n    const budget = task.parameters?.budget;\n    const compliance = task.parameters?.compliance || [];\n\n    this.logger.info('Designing cloud architecture', {\n      provider,\n      regions,\n      compliance,\n    });\n\n    const cloudDesign = {\n      provider,\n      regions,\n      budget,\n      compliance,\n      infrastructure: {\n        compute: [] as any[],\n        storage: [] as any[],\n        network: [] as any[],\n        database: [] as any[],\n        security: [] as any[],\n      },\n      services: [] as any[],\n      deployment: {\n        strategy: 'blue-green',\n        automation: 'terraform',\n        ci_cd: 'github-actions',\n      },\n      monitoring: {\n        logging: 'cloudwatch',\n        metrics: 'cloudwatch',\n        alerting: 'sns',\n        tracing: 'x-ray',\n      },\n      security: {\n        iam: 'principle-of-least-privilege',\n        network: 'vpc-with-private-subnets',\n        encryption: 'at-rest-and-in-transit',\n        secrets: 'parameter-store',\n      },\n      cost: {\n        estimated: 0,\n        optimization: [],\n        monitoring: true,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate cloud architecture design\n    await this.delay(4500);\n\n    cloudDesign.infrastructure.compute = [\n      { service: 'EKS', purpose: 'Container orchestration' },\n      { service: 'Lambda', purpose: 'Serverless functions' },\n      { service: 'EC2', purpose: 'Virtual machines' },\n    ];\n\n    cloudDesign.cost.estimated = 2500; // monthly USD\n\n    return cloudDesign;\n  }\n\n  private async designMicroservices(task: TaskDefinition): Promise<any> {\n    const domain = task.parameters?.domain;\n    const services = task.parameters?.services || [];\n    const communication = task.parameters?.communication || 'async';\n    const dataConsistency = task.parameters?.dataConsistency || 'eventual';\n\n    this.logger.info('Designing microservices', {\n      domain,\n      servicesCount: services.length,\n      communication,\n      dataConsistency,\n    });\n\n    const microservicesDesign = {\n      domain,\n      communication,\n      dataConsistency,\n      services: [] as ServiceComponent[],\n      patterns: {\n        communication: ['API Gateway', 'Service Mesh', 'Event Bus'],\n        data: ['Database per Service', 'Saga Pattern', 'CQRS'],\n        resilience: ['Circuit Breaker', 'Retry', 'Timeout'],\n        observability: ['Distributed Tracing', 'Centralized Logging'],\n      },\n      infrastructure: {\n        serviceDiscovery: 'consul',\n        loadBalancing: 'nginx',\n        messaging: 'kafka',\n        monitoring: 'prometheus',\n      },\n      deployment: {\n        containerization: 'docker',\n        orchestration: 'kubernetes',\n        ci_cd: 'jenkins',\n        configuration: 'helm',\n      },\n      challenges: [] as any[],\n      solutions: [] as any[],\n      timestamp: new Date(),\n    };\n\n    // Simulate microservices design\n    await this.delay(4000);\n\n    microservicesDesign.services = [\n      {\n        name: 'User Service',\n        responsibility: 'User management',\n        database: 'PostgreSQL',\n        api: 'REST',\n        dependencies: [] as string[],\n      },\n      {\n        name: 'Order Service',\n        responsibility: 'Order processing',\n        database: 'MongoDB',\n        api: 'REST + Events',\n        dependencies: ['User Service', 'Payment Service'] as string[],\n      },\n    ];\n\n    return microservicesDesign;\n  }\n\n  private async designSecurity(task: TaskDefinition): Promise<any> {\n    const system = task.parameters?.system;\n    const threats = task.parameters?.threats || [];\n    const compliance = task.parameters?.compliance || [];\n    const sensitivity = task.parameters?.sensitivity || 'medium';\n\n    this.logger.info('Designing security architecture', {\n      threats: threats.length,\n      compliance,\n      sensitivity,\n    });\n\n    const securityDesign = {\n      system,\n      sensitivity,\n      compliance,\n      threatModel: {\n        assets: [] as any[],\n        threats: [] as any[],\n        vulnerabilities: [] as any[],\n        risks: [] as any[],\n      },\n      controls: {\n        preventive: [] as any[],\n        detective: [] as any[],\n        corrective: [] as any[],\n      },\n      architecture: {\n        authentication: 'OAuth2 + JWT',\n        authorization: 'RBAC + ABAC',\n        encryption: 'AES-256',\n        network: 'Zero Trust',\n      },\n      monitoring: {\n        siem: true,\n        ids: true,\n        logging: 'centralized',\n        alerting: 'real-time',\n      },\n      incidents: {\n        response: 'automated',\n        recovery: 'backup-restore',\n        communication: 'stakeholder-notification',\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate security design\n    await this.delay(3500);\n\n    securityDesign.controls.preventive = [\n      'Multi-factor Authentication',\n      'API Rate Limiting',\n      'Input Validation',\n      'Access Controls',\n      'Encryption at Rest',\n    ];\n\n    return securityDesign;\n  }\n\n  private async designScalability(task: TaskDefinition): Promise<any> {\n    const currentLoad = task.parameters?.currentLoad;\n    const targetLoad = task.parameters?.targetLoad;\n    const constraints = task.parameters?.constraints || [];\n    const budget = task.parameters?.budget;\n\n    this.logger.info('Designing scalability', {\n      currentLoad,\n      targetLoad,\n      constraints,\n    });\n\n    const scalabilityDesign = {\n      currentLoad,\n      targetLoad,\n      constraints,\n      budget,\n      strategies: {\n        horizontal: [] as any[],\n        vertical: [] as any[],\n        caching: [] as any[],\n        database: [] as any[],\n      },\n      implementation: {\n        autoScaling: true,\n        loadBalancing: 'application',\n        caching: 'multi-tier',\n        cdn: 'global',\n      },\n      metrics: {\n        latency: 'p99 < 100ms',\n        throughput: '10000 rps',\n        availability: '99.99%',\n        errorRate: '< 0.1%',\n      },\n      testing: {\n        loadTesting: true,\n        stressTesting: true,\n        chaosEngineering: true,\n      },\n      monitoring: {\n        realTime: true,\n        predictive: true,\n        alerting: 'proactive',\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate scalability design\n    await this.delay(3000);\n\n    scalabilityDesign.strategies.horizontal = [\n      'Kubernetes HPA',\n      'Database Sharding',\n      'Microservices Decomposition',\n    ];\n\n    return scalabilityDesign;\n  }\n\n  private async designDatabase(task: TaskDefinition): Promise<any> {\n    const requirements = task.parameters?.requirements;\n    const dataTypes = task.parameters?.dataTypes || ['relational'];\n    const scale = task.parameters?.scale || 'medium';\n    const consistency = task.parameters?.consistency || 'strong';\n\n    this.logger.info('Designing database architecture', {\n      dataTypes,\n      scale,\n      consistency,\n    });\n\n    const databaseDesign = {\n      requirements,\n      dataTypes,\n      scale,\n      consistency,\n      databases: [] as DatabaseComponent[],\n      patterns: {\n        data: ['Database per Service', 'Shared Database', 'Data Lake'],\n        consistency: ['ACID', 'BASE', 'Eventual Consistency'],\n        scaling: ['Read Replicas', 'Sharding', 'Partitioning'],\n      },\n      technologies: {\n        relational: ['PostgreSQL', 'MySQL'],\n        document: ['MongoDB', 'DynamoDB'],\n        cache: ['Redis', 'Memcached'],\n        search: ['Elasticsearch', 'Solr'],\n      },\n      performance: {\n        indexing: 'optimized',\n        caching: 'multi-layer',\n        partitioning: 'horizontal',\n        replication: 'master-slave',\n      },\n      backup: {\n        strategy: 'incremental',\n        frequency: 'hourly',\n        retention: '30-days',\n        testing: 'monthly',\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate database design\n    await this.delay(2500);\n\n    databaseDesign.databases = [\n      {\n        name: 'Primary DB',\n        type: 'PostgreSQL',\n        purpose: 'Transactional data',\n        size: '500GB',\n      },\n      {\n        name: 'Cache',\n        type: 'Redis',\n        purpose: 'Session and application cache',\n        size: '50GB',\n      },\n    ];\n\n    return databaseDesign;\n  }\n\n  private async performGeneralDesign(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general design', {\n      description: task.description,\n    });\n\n    // Default to system design\n    return await this.designSystem(task);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'System Architecture & Design',\n      architectureStyles: ['Microservices', 'Monolithic', 'Serverless', 'Event-Driven'],\n      cloudProviders: ['AWS', 'Azure', 'GCP', 'Multi-Cloud'],\n      designPatterns: ['Gang of Four', 'Enterprise', 'Cloud Native', 'Microservices'],\n      currentDesigns: this.getCurrentTasks().length,\n      averageDesignTime: '30-60 minutes',\n      lastDesignCompleted: this.getLastTaskCompletedTime(),\n      specializations: ['Cloud Architecture', 'Security Design', 'Scalability Planning'],\n    };\n  }\n}\n\nexport const createArchitectAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): ArchitectAgent => {\n  const defaultConfig = {\n    autonomyLevel: 0.8,\n    learningEnabled: true,\n    adaptationEnabled: true,\n    maxTasksPerHour: 12,\n    maxConcurrentTasks: 3,\n    timeoutThreshold: 300000,\n    reportingInterval: 60000,\n    heartbeatInterval: 30000,\n    permissions: [\n      'file-read',\n      'file-write',\n      'system-analysis',\n      'architecture-design',\n      'api-access',\n    ],\n    trustedAgents: [],\n    expertise: {\n      'system-architecture': 0.95,\n      'cloud-architecture': 0.9,\n      'microservices-design': 0.92,\n      'api-design': 0.88,\n      'database-architecture': 0.85,\n      'security-architecture': 0.87,\n    },\n    preferences: {\n      designMethodology: 'domain-driven',\n      architecturalStyle: 'microservices',\n      documentationLevel: 'comprehensive',\n      reviewThoroughness: 'detailed',\n    },\n  };\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/architect',\n    tempDirectory: './tmp/architect',\n    logDirectory: './logs/architect',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: [\n      'architecture-diagrams',\n      'system-modeler',\n      'design-patterns',\n      'cloud-designer',\n    ],\n    toolConfigs: {\n      diagramTool: { format: 'svg', style: 'professional' },\n      cloudDesigner: { provider: 'multi', compliance: true },\n    },\n  };\n\n  return new ArchitectAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","ArchitectAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","scalability","security","performance","preferences","architectureStyle","cloudProvider","securityFirst","scalabilityFocus","documentationDetail","executeTask","task","info","agentId","taskType","type","taskId","designSystem","reviewArchitecture","designAPI","designCloudArchitecture","designMicroservices","designSecurity","designScalability","designDatabase","performGeneralDesign","error","Error","message","String","requirements","input","scale","constraints","style","length","design","architecture","components","services","databases","queues","caches","patterns","technologies","backend","frontend","database","infrastructure","monitoring","diagrams","overview","apis","deployment","tradeoffs","risks","recommendations","timestamp","Date","store","status","startTime","tags","partition","delay","name","purpose","technology","parameters","focus","standards","review","scores","issues","compliance","passed","failed","warnings","identified","missing","antipatterns","improvements","riskAssessment","technical","operational","maintainability","category","severity","description","component","recommendation","domain","version","auth","apiDesign","endpoints","schemas","authentication","authorization","rateLimiting","cors","validation","openapi","interactive","examples","naming","versioning","errorHandling","pagination","caching","compression","cdn","logging","metrics","tracing","method","path","rateLimit","provider","regions","budget","cloudDesign","compute","storage","network","strategy","automation","ci_cd","alerting","iam","encryption","secrets","cost","estimated","optimization","service","communication","dataConsistency","servicesCount","microservicesDesign","data","resilience","observability","serviceDiscovery","loadBalancing","messaging","containerization","orchestration","configuration","challenges","solutions","responsibility","api","dependencies","system","threats","sensitivity","securityDesign","threatModel","assets","vulnerabilities","controls","preventive","detective","corrective","siem","ids","incidents","response","recovery","currentLoad","targetLoad","scalabilityDesign","strategies","horizontal","vertical","implementation","autoScaling","latency","throughput","availability","errorRate","loadTesting","stressTesting","chaosEngineering","realTime","predictive","dataTypes","consistency","databaseDesign","scaling","relational","document","cache","search","indexing","partitioning","replication","backup","frequency","retention","size","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","architectureStyles","cloudProviders","designPatterns","currentDesigns","getCurrentTasks","averageDesignTime","lastDesignCompleted","getLastTaskCompletedTime","specializations","createArchitectAgent","defaultConfig","designMethodology","architecturalStyle","documentationLevel","reviewThoroughness","defaultEnv","runtime","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","diagramTool","format","cloudDesigner"],"mappings":"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"}