{"version":3,"sources":["../../../../src/cli/agents/tester.ts"],"sourcesContent":["/**\n * Tester Agent - Specialized in testing and quality assurance\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type {\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  TaskDefinition,\n} from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\n\n// Type definitions for tester activities\ninterface TestCoverageItem {\n  path: string;\n  testCount: number;\n  coverage: number;\n}\n\ninterface TestCase {\n  name: string;\n  steps: string[];\n  assertions: string[];\n}\n\ninterface PerformanceTestCase {\n  name: string;\n  steps: string[];\n  expected: string;\n}\n\ninterface SecurityIssue {\n  type: string;\n  severity: string;\n  location: string;\n  description: string;\n  impact: string;\n}\n\ninterface ApiTestResult {\n  endpoint: string;\n  status: string;\n  responseTime: number;\n  statusCode: number;\n  error?: string;\n}\n\nexport class TesterAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: AgentEnvironment,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super(id, 'tester', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      codeGeneration: true,\n      codeReview: true,\n      testing: true,\n      documentation: true,\n      research: false,\n      analysis: true,\n      webSearch: false,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: true,\n      languages: ['typescript', 'javascript', 'python', 'java', 'csharp', 'go'],\n      frameworks: [\n        'jest',\n        'mocha',\n        'cypress',\n        'playwright',\n        'selenium',\n        'pytest',\n        'junit',\n        'testng',\n      ],\n      domains: [\n        'unit-testing',\n        'integration-testing',\n        'e2e-testing',\n        'performance-testing',\n        'security-testing',\n        'accessibility-testing',\n        'api-testing',\n        'mobile-testing',\n        'load-testing',\n        'test-automation',\n      ],\n      tools: [\n        'test-runner',\n        'coverage-analyzer',\n        'mock-generator',\n        'test-data-factory',\n        'assertion-library',\n        'browser-automation',\n        'api-tester',\n        'performance-profiler',\n      ],\n      maxConcurrentTasks: 4,\n      maxMemoryUsage: 1024 * 1024 * 1024, // 1GB\n      maxExecutionTime: 1800000, // 30 minutes\n      reliability: 0.95,\n      speed: 0.8,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.8,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 16,\n      maxConcurrentTasks: 4,\n      timeoutThreshold: 1800000,\n      reportingInterval: 30000,\n      heartbeatInterval: 12000,\n      permissions: [\n        'file-read',\n        'file-write',\n        'terminal-access',\n        'browser-control',\n        'network-access',\n      ],\n      trustedAgents: [],\n      expertise: {\n        'unit-testing': 0.95,\n        'integration-testing': 0.9,\n        'e2e-testing': 0.88,\n        'test-automation': 0.92,\n        'performance-testing': 0.85,\n        'security-testing': 0.8,\n      },\n      preferences: {\n        testFramework: 'jest',\n        coverageThreshold: 80,\n        testStrategy: 'pyramid',\n        mockingStyle: 'minimal',\n        reportFormat: 'detailed',\n      },\n    };\n  }\n\n  override async executeTask(task: TaskDefinition): Promise<any> {\n    this.logger.info('Tester executing task', {\n      agentId: this.id,\n      taskType: task.type,\n      taskId: task.id,\n    });\n\n    try {\n      switch (task.type) {\n        case 'unit-testing':\n          return await this.createUnitTests(task);\n        case 'integration-testing':\n          return await this.createIntegrationTests(task);\n        case 'e2e-testing':\n          return await this.createE2ETests(task);\n        case 'performance-testing':\n          return await this.performanceTest(task);\n        case 'security-testing':\n          return await this.securityTest(task);\n        case 'api-testing':\n          return await this.testAPI(task);\n        case 'test-automation':\n          return await this.automateTests(task);\n        case 'test-analysis':\n          return await this.analyzeTests(task);\n        default:\n          return await this.performGeneralTesting(task);\n      }\n    } catch (error) {\n      this.logger.error('Testing task failed', {\n        agentId: this.id,\n        taskId: task.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async createUnitTests(task: TaskDefinition): Promise<any> {\n    const code = task.input?.code;\n    const framework = task.input?.framework || 'jest';\n    const coverage = task.input?.coverage || 80;\n    const style = task.input?.style || 'arrange-act-assert';\n\n    this.logger.info('Creating unit tests', {\n      framework,\n      coverage,\n      style,\n    });\n\n    const testing = {\n      framework,\n      style,\n      targetCoverage: coverage,\n      testFiles: [] as TestCoverageItem[],\n      testSuites: [] as any[],\n      coverage: {\n        lines: 0,\n        functions: 0,\n        branches: 0,\n        statements: 0,\n      },\n      mocks: [] as any[],\n      assertions: [] as any[],\n      setup: {\n        beforeEach: true,\n        afterEach: true,\n        fixtures: [] as any[],\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate unit test creation\n    await this.delay(2000);\n\n    testing.testFiles = [\n      {\n        path: 'tests/unit/user.test.ts',\n        testCount: 15,\n        coverage: 92,\n      },\n      {\n        path: 'tests/unit/auth.test.ts',\n        testCount: 8,\n        coverage: 88,\n      },\n    ];\n\n    testing.coverage = {\n      lines: 87,\n      functions: 92,\n      branches: 78,\n      statements: 89,\n    };\n\n    return testing;\n  }\n\n  private async createIntegrationTests(task: TaskDefinition): Promise<any> {\n    const components = task.input?.components || [];\n    const database = task.input?.database || false;\n    const api = task.input?.api || false;\n    const framework = task.input?.framework || 'jest';\n\n    this.logger.info('Creating integration tests', {\n      components: components.length,\n      database,\n      api,\n      framework,\n    });\n\n    const integration = {\n      framework,\n      components,\n      database,\n      api,\n      testSuites: [] as any[],\n      environment: {\n        setup: 'docker-compose',\n        database: 'test-db',\n        services: [] as any[],\n      },\n      scenarios: [] as TestCase[],\n      dataFlow: [] as any[],\n      assertions: [] as any[],\n      timestamp: new Date(),\n    };\n\n    // Simulate integration test creation\n    await this.delay(3000);\n\n    integration.scenarios = [\n      {\n        name: 'User registration flow',\n        steps: ['Create user', 'Send email', 'Verify account'],\n        assertions: ['User created', 'Email sent', 'Account active'],\n      },\n      {\n        name: 'Order processing flow',\n        steps: ['Create order', 'Process payment', 'Update inventory'],\n        assertions: ['Order confirmed', 'Payment processed', 'Stock updated'],\n      },\n    ];\n\n    return integration;\n  }\n\n  private async createE2ETests(task: TaskDefinition): Promise<any> {\n    const userJourneys = task.input?.userJourneys || [];\n    const browser = task.input?.browser || 'chromium';\n    const framework = task.input?.framework || 'playwright';\n    const viewport = task.input?.viewport || 'desktop';\n\n    this.logger.info('Creating E2E tests', {\n      userJourneys: userJourneys.length,\n      browser,\n      framework,\n      viewport,\n    });\n\n    const e2e = {\n      framework,\n      browser,\n      viewport,\n      userJourneys,\n      testScenarios: [] as PerformanceTestCase[],\n      pageObjects: [] as any[],\n      selectors: [] as any[],\n      assertions: [] as any[],\n      configuration: {\n        headless: true,\n        screenshots: true,\n        videos: false,\n        retries: 2,\n      },\n      crossBrowser: {\n        chrome: true,\n        firefox: true,\n        safari: false,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate E2E test creation\n    await this.delay(4000);\n\n    e2e.testScenarios = [\n      {\n        name: 'User login and dashboard access',\n        steps: [\n          'Navigate to login page',\n          'Enter credentials',\n          'Click login button',\n          'Verify dashboard loads',\n        ],\n        expected: 'User successfully logged in and sees dashboard',\n      },\n    ];\n\n    return e2e;\n  }\n\n  private async performanceTest(task: TaskDefinition): Promise<any> {\n    const target = task.input?.target;\n    const loadPattern = task.input?.loadPattern || 'ramp-up';\n    const duration = task.input?.duration || '5m';\n    const virtualUsers = task.input?.virtualUsers || 100;\n\n    this.logger.info('Performing performance test', {\n      target,\n      loadPattern,\n      duration,\n      virtualUsers,\n    });\n\n    const performance = {\n      target,\n      loadPattern,\n      duration,\n      virtualUsers,\n      metrics: {\n        responseTime: {\n          avg: 0,\n          p95: 0,\n          p99: 0,\n          max: 0,\n        },\n        throughput: 0,\n        errorRate: 0,\n        resourceUtilization: {\n          cpu: 0,\n          memory: 0,\n          network: 0,\n        },\n      },\n      bottlenecks: [],\n      recommendations: [],\n      slaCompliance: {\n        responseTime: false,\n        throughput: false,\n        errorRate: false,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate performance testing\n    await this.delay(6000);\n\n    performance.metrics = {\n      responseTime: {\n        avg: 245,\n        p95: 520,\n        p99: 1200,\n        max: 2500,\n      },\n      throughput: 1250,\n      errorRate: 0.03,\n      resourceUtilization: {\n        cpu: 75,\n        memory: 68,\n        network: 45,\n      },\n    };\n\n    return performance;\n  }\n\n  private async securityTest(task: TaskDefinition): Promise<any> {\n    const target = task.input?.target;\n    const testTypes = task.input?.types || ['authentication', 'authorization', 'injection'];\n    const severity = task.input?.severity || 'all';\n\n    this.logger.info('Performing security test', {\n      target,\n      testTypes,\n      severity,\n    });\n\n    const security = {\n      target,\n      testTypes,\n      severity,\n      vulnerabilities: [] as SecurityIssue[],\n      compliance: {\n        owasp: [] as any[],\n        gdpr: [] as any[],\n        pci: [] as any[],\n      },\n      penetrationTests: [] as any[],\n      recommendations: [] as any[],\n      riskLevel: 'unknown',\n      timestamp: new Date(),\n    };\n\n    // Simulate security testing\n    await this.delay(5000);\n\n    security.vulnerabilities = [\n      {\n        type: 'SQL Injection',\n        severity: 'high',\n        location: '/api/users/search',\n        description: 'Input not properly sanitized',\n        impact: 'Data breach potential',\n      },\n    ];\n\n    security.riskLevel = 'medium';\n\n    return security;\n  }\n\n  private async testAPI(task: TaskDefinition): Promise<any> {\n    const endpoints = task.input?.endpoints || [];\n    const authentication = task.input?.auth || false;\n    const environment = task.input?.environment || 'staging';\n\n    this.logger.info('Testing API', {\n      endpoints: endpoints.length,\n      authentication,\n      environment,\n    });\n\n    const apiTest = {\n      environment,\n      authentication,\n      endpoints,\n      testResults: [] as ApiTestResult[],\n      schemas: [] as any[],\n      responseValidation: true,\n      errorHandling: [] as any[],\n      performance: {\n        averageResponseTime: 0,\n        slowestEndpoint: '',\n        fastestEndpoint: '',\n      },\n      coverage: {\n        endpoints: 0,\n        statusCodes: [] as any[],\n        errorScenarios: 0,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate API testing\n    await this.delay(3000);\n\n    apiTest.testResults = [\n      {\n        endpoint: 'GET /api/users',\n        status: 'passed',\n        responseTime: 150,\n        statusCode: 200,\n      },\n      {\n        endpoint: 'POST /api/users',\n        status: 'failed',\n        responseTime: 300,\n        statusCode: 500,\n        error: 'Internal server error',\n      },\n    ];\n\n    return apiTest;\n  }\n\n  private async automateTests(task: TaskDefinition): Promise<any> {\n    const testSuite = task.input?.testSuite;\n    const pipeline = task.input?.pipeline || 'ci/cd';\n    const triggers = task.input?.triggers || ['commit', 'pr'];\n\n    this.logger.info('Automating tests', {\n      testSuite,\n      pipeline,\n      triggers,\n    });\n\n    const automation = {\n      testSuite,\n      pipeline,\n      triggers,\n      configuration: {\n        parallel: true,\n        retries: 2,\n        timeout: '30m',\n        artifacts: ['reports', 'screenshots'],\n      },\n      environments: ['staging', 'production'],\n      notifications: {\n        slack: true,\n        email: true,\n        github: true,\n      },\n      reporting: {\n        format: 'junit',\n        coverage: true,\n        trends: true,\n      },\n      timestamp: new Date(),\n    };\n\n    // Simulate test automation setup\n    await this.delay(2000);\n\n    return automation;\n  }\n\n  private async analyzeTests(task: TaskDefinition): Promise<any> {\n    const testResults = task.input?.results;\n    const coverage = task.input?.coverage;\n    const timeframe = task.input?.timeframe || '7d';\n\n    this.logger.info('Analyzing tests', {\n      timeframe,\n    });\n\n    const analysis = {\n      timeframe,\n      summary: {\n        totalTests: 0,\n        passed: 0,\n        failed: 0,\n        skipped: 0,\n        flaky: 0,\n      },\n      trends: {\n        passRate: [] as any[],\n        executionTime: [] as any[],\n        coverage: [] as any[],\n      },\n      flakyTests: [] as any[],\n      slowTests: [] as any[],\n      recommendations: [] as any[],\n      insights: [] as string[],\n      timestamp: new Date(),\n    };\n\n    // Simulate test analysis\n    await this.delay(1500);\n\n    analysis.summary = {\n      totalTests: 245,\n      passed: 230,\n      failed: 10,\n      skipped: 5,\n      flaky: 3,\n    };\n\n    analysis.insights = [\n      'Test execution time increased by 15% this week',\n      'Coverage decreased in auth module',\n      '3 tests are consistently flaky and need attention',\n    ];\n\n    return analysis;\n  }\n\n  private async performGeneralTesting(task: TaskDefinition): Promise<any> {\n    this.logger.info('Performing general testing', {\n      description: task.description,\n    });\n\n    // Default to unit testing\n    return await this.createUnitTests(task);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  override getAgentStatus(): any {\n    return {\n      ...super.getAgentStatus(),\n      specialization: 'Testing & Quality Assurance',\n      testingTypes: [\n        'Unit Testing',\n        'Integration Testing',\n        'E2E Testing',\n        'Performance Testing',\n        'Security Testing',\n        'API Testing',\n      ],\n      frameworks: this.capabilities.frameworks,\n      currentTests: this.getCurrentTasks().length,\n      averageTestTime: '15-30 minutes',\n      lastTestCompleted: this.getLastTaskCompletedTime(),\n      testCoverageGoal: this.config.preferences?.coverageThreshold || 80,\n    };\n  }\n}\n\nexport const createTesterAgent = (\n  id: string,\n  config: Partial<AgentConfig>,\n  environment: Partial<AgentEnvironment>,\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): TesterAgent => {\n  const defaultConfig = {\n    autonomyLevel: 0.7,\n    learningEnabled: true,\n    adaptationEnabled: true,\n    maxTasksPerHour: 8,\n    maxConcurrentTasks: 2,\n    timeoutThreshold: 900000,\n    reportingInterval: 180000,\n    heartbeatInterval: 60000,\n    permissions: [\n      'test-execution',\n      'code-access',\n      'system-access',\n      'browser-automation',\n      'security-testing',\n    ],\n    trustedAgents: [],\n    expertise: {\n      'unit-testing': 0.95,\n      'integration-testing': 0.92,\n      'e2e-testing': 0.9,\n      'performance-testing': 0.88,\n      'security-testing': 0.85,\n      'api-testing': 0.9,\n    },\n    preferences: {\n      testingApproach: 'comprehensive',\n      coverageThreshold: 85,\n      testingFramework: 'jest',\n      automationLevel: 'high',\n    },\n  };\n  const defaultEnv = {\n    runtime: 'deno' as const,\n    version: '1.40.0',\n    workingDirectory: './agents/tester',\n    tempDirectory: './tmp/tester',\n    logDirectory: './logs/tester',\n    apiEndpoints: {},\n    credentials: {},\n    availableTools: ['test-runner', 'coverage-analyzer', 'browser-automation', 'api-tester'],\n    toolConfigs: {\n      testRunner: { framework: 'jest', coverage: true },\n      browser: { headless: true, screenshots: true },\n    },\n  };\n\n  return new TesterAgent(\n    id,\n    { ...defaultConfig, ...config } as AgentConfig,\n    { ...defaultEnv, ...environment } as AgentEnvironment,\n    logger,\n    eventBus,\n    memory,\n  );\n};\n"],"names":["BaseAgent","TesterAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","trustedAgents","expertise","preferences","testFramework","coverageThreshold","testStrategy","mockingStyle","reportFormat","executeTask","task","info","agentId","taskType","type","taskId","createUnitTests","createIntegrationTests","createE2ETests","performanceTest","securityTest","testAPI","automateTests","analyzeTests","performGeneralTesting","error","Error","message","String","code","input","framework","coverage","style","targetCoverage","testFiles","testSuites","lines","functions","branches","statements","mocks","assertions","setup","beforeEach","afterEach","fixtures","timestamp","Date","delay","path","testCount","components","database","api","length","integration","services","scenarios","dataFlow","name","steps","userJourneys","browser","viewport","e2e","testScenarios","pageObjects","selectors","configuration","headless","screenshots","videos","retries","crossBrowser","chrome","firefox","safari","expected","target","loadPattern","duration","virtualUsers","performance","metrics","responseTime","avg","p95","p99","max","throughput","errorRate","resourceUtilization","cpu","network","bottlenecks","recommendations","slaCompliance","testTypes","types","severity","security","vulnerabilities","compliance","owasp","gdpr","pci","penetrationTests","riskLevel","location","description","impact","endpoints","authentication","auth","apiTest","testResults","schemas","responseValidation","errorHandling","averageResponseTime","slowestEndpoint","fastestEndpoint","statusCodes","errorScenarios","endpoint","status","statusCode","testSuite","pipeline","triggers","automation","parallel","timeout","artifacts","environments","notifications","slack","email","github","reporting","format","trends","results","timeframe","summary","totalTests","passed","failed","skipped","flaky","passRate","executionTime","flakyTests","slowTests","insights","ms","Promise","resolve","setTimeout","getAgentStatus","specialization","testingTypes","capabilities","currentTests","getCurrentTasks","averageTestTime","lastTestCompleted","getLastTaskCompletedTime","testCoverageGoal","createTesterAgent","defaultConfig","testingApproach","testingFramework","automationLevel","defaultEnv","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","testRunner"],"mappings":"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"}