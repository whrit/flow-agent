{"version":3,"sources":["../../../../src/cli/agents/hive-agents.ts"],"sourcesContent":["/**\n * Hive Mind Agent Templates\n * Specialized agents for the Hive Mind swarm system\n */\n\nimport { BaseAgent } from './base-agent.js';\nimport type { AgentCapabilities, AgentConfig, TaskDefinition } from '../../swarm/types.js';\n\nexport interface HiveAgentConfig {\n  type: 'queen' | 'worker' | 'scout' | 'guardian' | 'architect';\n  specialization?: string;\n  consensusWeight?: number;\n  knowledgeDomains?: string[];\n}\n\n/**\n * Queen Agent - Orchestrator and decision maker\n */\nexport class QueenAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ) {\n    super(id, 'coordinator', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      // Core capabilities\n      codeGeneration: false,\n      codeReview: true,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n\n      // Communication capabilities\n      webSearch: true,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: false,\n\n      // Specialized capabilities\n      languages: ['javascript', 'typescript'],\n      frameworks: ['node.js'],\n      domains: ['orchestration', 'coordination'],\n      tools: ['consensus', 'delegation'],\n\n      // Resource limits\n      maxConcurrentTasks: 5,\n      maxMemoryUsage: 512,\n      maxExecutionTime: 300000,\n\n      // Performance characteristics\n      reliability: 0.95,\n      speed: 0.8,\n      quality: 0.9,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.8,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 20,\n      maxConcurrentTasks: 5,\n      timeoutThreshold: 30000,\n      reportingInterval: 5000,\n      heartbeatInterval: 10000,\n      permissions: ['orchestrate', 'delegate', 'consensus'],\n    };\n  }\n\n  public async executeTask(task: TaskDefinition): Promise<any> {\n    // Queen agent execution logic\n    return {\n      result: 'orchestrated',\n      taskId: task.id,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  getSystemPrompt(): string {\n    return `You are ${this.id}, a Queen agent in the Hive Mind swarm.\n\nROLE: Orchestrator and Decision Maker\n- Coordinate all swarm activities\n- Make final decisions after consensus\n- Delegate tasks to appropriate agents\n- Monitor overall progress and quality\n\nRESPONSIBILITIES:\n1. Task decomposition and planning\n2. Agent assignment and coordination\n3. Consensus facilitation\n4. Quality assurance\n5. Strategic decision making\n\nCONSENSUS PROTOCOL:\n- Propose major decisions for voting\n- Facilitate discussion among agents\n- Calculate consensus thresholds\n- Make tie-breaking decisions when needed\n\nCOMMUNICATION STYLE:\n- Clear and authoritative\n- Balanced and fair\n- Strategic thinking\n- Focus on swarm objectives`;\n  }\n\n  async analyzeObjective(objective: string): Promise<any> {\n    return {\n      complexity: 'high',\n      requiredAgents: ['architect', 'worker', 'scout', 'guardian'],\n      estimatedTasks: 5,\n      strategy: 'hierarchical',\n      consensusRequired: true,\n    };\n  }\n}\n\n/**\n * Worker Agent - Implementation and execution\n */\nexport class WorkerAgent extends BaseAgent {\n  private specialization: string;\n\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n    specialization: string = 'general',\n  ) {\n    super(id, 'coder', config, environment, logger, eventBus, memory);\n    this.specialization = specialization;\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      // Core capabilities\n      codeGeneration: true,\n      codeReview: false,\n      testing: true,\n      documentation: false,\n      research: false,\n      analysis: false,\n\n      // Communication capabilities\n      webSearch: false,\n      apiIntegration: true,\n      fileSystem: true,\n      terminalAccess: true,\n\n      // Specialized capabilities\n      languages: ['javascript', 'typescript', 'python'],\n      frameworks: ['node.js', 'react', 'express'],\n      domains: ['backend', 'frontend', 'fullstack'],\n      tools: ['git', 'npm', 'docker'],\n\n      // Resource limits\n      maxConcurrentTasks: 3,\n      maxMemoryUsage: 1024,\n      maxExecutionTime: 600000,\n\n      // Performance characteristics\n      reliability: 0.9,\n      speed: 0.9,\n      quality: 0.85,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.7,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 15,\n      maxConcurrentTasks: 3,\n      timeoutThreshold: 60000,\n      reportingInterval: 10000,\n      heartbeatInterval: 15000,\n      permissions: ['code', 'test', 'debug', 'build'],\n    };\n  }\n\n  public async executeTask(task: TaskDefinition): Promise<any> {\n    // Worker agent execution logic\n    return {\n      result: 'implemented',\n      taskId: task.id,\n      specialization: this.specialization,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  getSystemPrompt(): string {\n    return `You are ${this.id}, a Worker agent in the Hive Mind swarm.\n\nROLE: Implementation and Execution Specialist\n- Execute assigned tasks efficiently\n- Implement solutions based on designs\n- Collaborate with other workers\n- Report progress and issues\n\nSPECIALIZATION: ${this.specialization || 'general'}\n\nRESPONSIBILITIES:\n1. Task implementation\n2. Code development\n3. Testing and validation\n4. Bug fixing\n5. Performance optimization\n\nWORK PROTOCOL:\n- Accept tasks from Queen or consensus\n- Provide effort estimates\n- Request help when blocked\n- Share knowledge with swarm\n\nCOMMUNICATION STYLE:\n- Technical and precise\n- Progress-focused\n- Collaborative\n- Solution-oriented`;\n  }\n\n  async estimateEffort(task: any): Promise<number> {\n    // Estimate based on task type and specialization match\n    const baseEffort = task.complexity || 5;\n    const specializationBonus = task.type === this.specialization ? 0.8 : 1.0;\n    return Math.round(baseEffort * specializationBonus);\n  }\n}\n\n/**\n * Scout Agent - Research and exploration\n */\nexport class ScoutAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ) {\n    super(id, 'researcher', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      // Core capabilities\n      codeGeneration: false,\n      codeReview: false,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n\n      // Communication capabilities\n      webSearch: true,\n      apiIntegration: true,\n      fileSystem: false,\n      terminalAccess: false,\n\n      // Specialized capabilities\n      languages: [],\n      frameworks: [],\n      domains: ['research', 'analysis', 'discovery'],\n      tools: ['web-search', 'data-analysis'],\n\n      // Resource limits\n      maxConcurrentTasks: 4,\n      maxMemoryUsage: 768,\n      maxExecutionTime: 300000,\n\n      // Performance characteristics\n      reliability: 0.85,\n      speed: 0.95,\n      quality: 0.9,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.9,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 25,\n      maxConcurrentTasks: 4,\n      timeoutThreshold: 45000,\n      reportingInterval: 8000,\n      heartbeatInterval: 12000,\n      permissions: ['research', 'analyze', 'web-search'],\n    };\n  }\n\n  public async executeTask(task: TaskDefinition): Promise<any> {\n    // Scout agent execution logic\n    return {\n      result: 'researched',\n      taskId: task.id,\n      findings: [],\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  getSystemPrompt(): string {\n    return `You are ${this.id}, a Scout agent in the Hive Mind swarm.\n\nROLE: Research and Exploration Specialist\n- Explore new territories and solutions\n- Research best practices and patterns\n- Identify potential risks and opportunities\n- Gather intelligence for the swarm\n\nRESPONSIBILITIES:\n1. Information gathering\n2. Technology research\n3. Risk assessment\n4. Opportunity identification\n5. Knowledge synthesis\n\nSCOUTING PROTOCOL:\n- Proactively investigate unknowns\n- Report findings to swarm\n- Suggest new approaches\n- Validate assumptions\n\nCOMMUNICATION STYLE:\n- Curious and investigative\n- Evidence-based\n- Forward-thinking\n- Risk-aware`;\n  }\n\n  async scout(topic: string): Promise<any> {\n    return {\n      findings: [`Best practices for ${topic}`, `Common pitfalls in ${topic}`],\n      risks: ['Technical debt', 'Scalability concerns'],\n      opportunities: ['New framework available', 'Performance optimization possible'],\n      recommendations: ['Consider microservices', 'Implement caching'],\n    };\n  }\n}\n\n/**\n * Guardian Agent - Quality and validation\n */\nexport class GuardianAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ) {\n    super(id, 'reviewer', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      // Core capabilities\n      codeGeneration: false,\n      codeReview: true,\n      testing: true,\n      documentation: false,\n      research: false,\n      analysis: true,\n\n      // Communication capabilities\n      webSearch: false,\n      apiIntegration: false,\n      fileSystem: true,\n      terminalAccess: false,\n\n      // Specialized capabilities\n      languages: ['javascript', 'typescript'],\n      frameworks: ['jest', 'eslint'],\n      domains: ['quality-assurance', 'security', 'review'],\n      tools: ['linting', 'testing', 'security-scan'],\n\n      // Resource limits\n      maxConcurrentTasks: 2,\n      maxMemoryUsage: 512,\n      maxExecutionTime: 180000,\n\n      // Performance characteristics\n      reliability: 0.98,\n      speed: 0.7,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.6,\n      learningEnabled: true,\n      adaptationEnabled: false,\n      maxTasksPerHour: 10,\n      maxConcurrentTasks: 2,\n      timeoutThreshold: 90000,\n      reportingInterval: 15000,\n      heartbeatInterval: 20000,\n      permissions: ['review', 'test', 'validate'],\n    };\n  }\n\n  public async executeTask(task: TaskDefinition): Promise<any> {\n    // Guardian agent execution logic\n    return {\n      result: 'reviewed',\n      taskId: task.id,\n      quality: 'high',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  getSystemPrompt(): string {\n    return `You are ${this.id}, a Guardian agent in the Hive Mind swarm.\n\nROLE: Quality Assurance and Protection\n- Ensure code quality and standards\n- Identify security vulnerabilities\n- Validate implementations\n- Protect swarm from errors\n\nRESPONSIBILITIES:\n1. Code review\n2. Security analysis\n3. Quality validation\n4. Standard enforcement\n5. Risk mitigation\n\nGUARDIAN PROTOCOL:\n- Review all implementations\n- Flag potential issues\n- Suggest improvements\n- Enforce best practices\n\nCOMMUNICATION STYLE:\n- Protective and thorough\n- Constructive criticism\n- Standards-focused\n- Security-minded`;\n  }\n\n  async validateWork(work: any): Promise<any> {\n    return {\n      qualityScore: 0.85,\n      issues: ['Missing error handling', 'Incomplete tests'],\n      securityConcerns: ['Input validation needed'],\n      recommendations: ['Add unit tests', 'Implement logging'],\n      approved: true,\n    };\n  }\n}\n\n/**\n * Architect Agent - System design and planning\n */\nexport class ArchitectAgent extends BaseAgent {\n  constructor(\n    id: string,\n    config: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ) {\n    super(id, 'architect', config, environment, logger, eventBus, memory);\n  }\n\n  protected getDefaultCapabilities(): AgentCapabilities {\n    return {\n      // Core capabilities\n      codeGeneration: false,\n      codeReview: true,\n      testing: false,\n      documentation: true,\n      research: true,\n      analysis: true,\n\n      // Communication capabilities\n      webSearch: true,\n      apiIntegration: false,\n      fileSystem: true,\n      terminalAccess: false,\n\n      // Specialized capabilities\n      languages: ['javascript', 'typescript'],\n      frameworks: ['architecture-patterns'],\n      domains: ['system-design', 'architecture', 'planning'],\n      tools: ['design-patterns', 'documentation'],\n\n      // Resource limits\n      maxConcurrentTasks: 2,\n      maxMemoryUsage: 1024,\n      maxExecutionTime: 240000,\n\n      // Performance characteristics\n      reliability: 0.92,\n      speed: 0.75,\n      quality: 0.95,\n    };\n  }\n\n  protected getDefaultConfig(): Partial<AgentConfig> {\n    return {\n      autonomyLevel: 0.85,\n      learningEnabled: true,\n      adaptationEnabled: true,\n      maxTasksPerHour: 8,\n      maxConcurrentTasks: 2,\n      timeoutThreshold: 120000,\n      reportingInterval: 20000,\n      heartbeatInterval: 25000,\n      permissions: ['design', 'plan', 'architect'],\n    };\n  }\n\n  public async executeTask(task: TaskDefinition): Promise<any> {\n    // Architect agent execution logic\n    return {\n      result: 'designed',\n      taskId: task.id,\n      architecture: 'planned',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  getSystemPrompt(): string {\n    return `You are ${this.id}, an Architect agent in the Hive Mind swarm.\n\nROLE: System Design and Architecture\n- Design system architecture\n- Plan technical solutions\n- Define interfaces and contracts\n- Ensure scalability and maintainability\n\nRESPONSIBILITIES:\n1. System architecture design\n2. Technical planning\n3. Interface definition\n4. Pattern selection\n5. Documentation\n\nARCHITECTURE PROTOCOL:\n- Design before implementation\n- Consider all requirements\n- Plan for scalability\n- Document decisions\n\nCOMMUNICATION STYLE:\n- Strategic and systematic\n- Pattern-focused\n- Future-oriented\n- Technically detailed`;\n  }\n\n  async designSystem(requirements: any): Promise<any> {\n    return {\n      architecture: 'microservices',\n      components: ['API Gateway', 'Auth Service', 'Business Logic', 'Database'],\n      patterns: ['Repository', 'Factory', 'Observer'],\n      technologies: ['Node.js', 'PostgreSQL', 'Redis', 'Docker'],\n      interfaces: ['REST API', 'WebSocket', 'Message Queue'],\n    };\n  }\n}\n\n/**\n * Factory for creating Hive agents\n */\nexport class HiveAgentFactory {\n  static createAgent(\n    config: HiveAgentConfig & { name: string },\n    agentConfig: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ): BaseAgent {\n    switch (config.type) {\n      case 'queen':\n        return new QueenAgent(config.name, agentConfig, environment, logger, eventBus, memory);\n\n      case 'worker':\n        return new WorkerAgent(\n          config.name,\n          agentConfig,\n          environment,\n          logger,\n          eventBus,\n          memory,\n          config.specialization,\n        );\n\n      case 'scout':\n        return new ScoutAgent(config.name, agentConfig, environment, logger, eventBus, memory);\n\n      case 'guardian':\n        return new GuardianAgent(config.name, agentConfig, environment, logger, eventBus, memory);\n\n      case 'architect':\n        return new ArchitectAgent(config.name, agentConfig, environment, logger, eventBus, memory);\n\n      default:\n        throw new Error(`Unknown Hive agent type: ${config.type}`);\n    }\n  }\n\n  /**\n   * Create a balanced swarm for an objective\n   */\n  static createBalancedSwarm(\n    objective: string,\n    maxAgents: number = 8,\n    agentConfig: AgentConfig,\n    environment: any,\n    logger: any,\n    eventBus: any,\n    memory: any,\n  ): BaseAgent[] {\n    const agents: BaseAgent[] = [];\n\n    // Always include a Queen\n    agents.push(\n      new QueenAgent('Queen-Genesis', agentConfig, environment, logger, eventBus, memory),\n    );\n\n    // Determine agent composition based on objective\n    const needsDesign =\n      objective.toLowerCase().includes('build') || objective.toLowerCase().includes('create');\n    const needsResearch =\n      objective.toLowerCase().includes('research') || objective.toLowerCase().includes('analyze');\n\n    if (needsDesign && agents.length < maxAgents) {\n      agents.push(\n        new ArchitectAgent('Architect-Prime', agentConfig, environment, logger, eventBus, memory),\n      );\n    }\n\n    if (needsResearch && agents.length < maxAgents) {\n      agents.push(\n        new ScoutAgent('Scout-Alpha', agentConfig, environment, logger, eventBus, memory),\n      );\n    }\n\n    // Add workers based on remaining slots\n    const workerCount = Math.min(3, maxAgents - agents.length - 1); // -1 for Guardian\n    for (let i = 0; i < workerCount; i++) {\n      const specializations = ['backend', 'frontend', 'database', 'integration'];\n      const spec = specializations[i % specializations.length];\n      agents.push(\n        new WorkerAgent(\n          `Worker-${i + 1}`,\n          agentConfig,\n          environment,\n          logger,\n          eventBus,\n          memory,\n          spec,\n        ),\n      );\n    }\n\n    // Always include a Guardian if space\n    if (agents.length < maxAgents) {\n      agents.push(\n        new GuardianAgent('Guardian-Omega', agentConfig, environment, logger, eventBus, memory),\n      );\n    }\n\n    return agents;\n  }\n\n  /**\n   * Get agent capabilities matrix\n   */\n  static getCapabilitiesMatrix(): Map<string, string[]> {\n    return new Map([\n      ['queen', ['orchestration', 'consensus', 'decision-making', 'delegation']],\n      ['worker', ['implementation', 'coding', 'testing', 'debugging']],\n      ['scout', ['research', 'exploration', 'analysis', 'discovery']],\n      ['guardian', ['validation', 'security', 'quality', 'review']],\n      ['architect', ['design', 'planning', 'architecture', 'patterns']],\n    ]);\n  }\n}\n"],"names":["BaseAgent","QueenAgent","id","config","environment","logger","eventBus","memory","getDefaultCapabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","getDefaultConfig","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","permissions","executeTask","task","result","taskId","timestamp","Date","toISOString","getSystemPrompt","analyzeObjective","objective","complexity","requiredAgents","estimatedTasks","strategy","consensusRequired","WorkerAgent","specialization","estimateEffort","baseEffort","specializationBonus","type","Math","round","ScoutAgent","findings","scout","topic","risks","opportunities","recommendations","GuardianAgent","validateWork","work","qualityScore","issues","securityConcerns","approved","ArchitectAgent","architecture","designSystem","requirements","components","patterns","technologies","interfaces","HiveAgentFactory","createAgent","agentConfig","name","Error","createBalancedSwarm","maxAgents","agents","push","needsDesign","toLowerCase","includes","needsResearch","length","workerCount","min","i","specializations","spec","getCapabilitiesMatrix","Map"],"mappings":"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"}