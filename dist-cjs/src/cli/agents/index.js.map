{"version":3,"sources":["../../../../src/cli/agents/index.ts"],"sourcesContent":["/**\n * Agent System Index - Central exports and agent factory\n */\n\n// Agent Classes\nexport { BaseAgent } from './base-agent.js';\nexport { ResearcherAgent, createResearcherAgent } from './researcher.js';\nexport { CoderAgent, createCoderAgent } from './coder.js';\nexport { AnalystAgent, createAnalystAgent } from './analyst.js';\nexport { ArchitectAgent, createArchitectAgent } from './architect.js';\nexport { TesterAgent, createTesterAgent } from './tester.js';\nexport { CoordinatorAgent, createCoordinatorAgent } from './coordinator.js';\n\n// Systems\nexport { AgentCapabilitySystem } from './capabilities.js';\nexport { AgentManager } from '../../agents/agent-manager.js';\nexport { AgentRegistry } from '../../agents/agent-registry.js';\n\n// Types\nexport type { AgentState } from './base-agent.js';\nexport type { CapabilityMatch, TaskRequirements, CapabilityRegistry } from './capabilities.js';\n\n// Agent Factory\nimport type { AgentType, AgentConfig, AgentEnvironment } from '../../swarm/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { IEventBus } from '../../core/event-bus.js';\nimport type { DistributedMemorySystem } from '../../memory/distributed-memory.js';\nimport { BaseAgent } from './base-agent.js';\nimport { createResearcherAgent } from './researcher.js';\nimport { createCoderAgent } from './coder.js';\nimport { createAnalystAgent } from './analyst.js';\nimport { createArchitectAgent } from './architect.js';\nimport { createTesterAgent } from './tester.js';\nimport { createCoordinatorAgent } from './coordinator.js';\nimport { generateId } from '../../utils/helpers.js';\n\nexport interface AgentFactoryConfig {\n  logger: ILogger;\n  eventBus: IEventBus;\n  memory: DistributedMemorySystem;\n}\n\n/**\n * Agent Factory - Creates specialized agents based on type\n */\nexport class AgentFactory {\n  private logger: ILogger;\n  private eventBus: IEventBus;\n  private memory: DistributedMemorySystem;\n  private agentCounter = 0;\n\n  constructor(config: AgentFactoryConfig) {\n    this.logger = config.logger;\n    this.eventBus = config.eventBus;\n    this.memory = config.memory;\n  }\n\n  /**\n   * Create an agent of the specified type\n   */\n  createAgent(\n    type: AgentType,\n    config: Partial<AgentConfig> = {},\n    environment: Partial<AgentEnvironment> = {},\n    customId?: string,\n  ): BaseAgent {\n    const id = customId || this.generateAgentId(type);\n\n    this.logger.info('Creating agent', {\n      id,\n      type,\n      factory: 'AgentFactory',\n    });\n\n    switch (type) {\n      case 'researcher':\n        return createResearcherAgent(\n          id,\n          config,\n          environment,\n          this.logger,\n          this.eventBus,\n          this.memory,\n        );\n\n      case 'coder':\n        return createCoderAgent(id, config, environment, this.logger, this.eventBus, this.memory);\n\n      case 'analyst':\n        return createAnalystAgent(id, config, environment, this.logger, this.eventBus, this.memory);\n\n      case 'architect':\n        return createArchitectAgent(\n          id,\n          config,\n          environment,\n          this.logger,\n          this.eventBus,\n          this.memory,\n        );\n\n      case 'tester':\n        return createTesterAgent(id, config, environment, this.logger, this.eventBus, this.memory);\n\n      case 'coordinator':\n        return createCoordinatorAgent(\n          id,\n          config,\n          environment,\n          this.logger,\n          this.eventBus,\n          this.memory,\n        );\n\n      default:\n        throw new Error(`Unknown agent type: ${type}`);\n    }\n  }\n\n  /**\n   * Create multiple agents of different types\n   */\n  createAgents(\n    specs: Array<{\n      type: AgentType;\n      count?: number;\n      config?: Partial<AgentConfig>;\n      environment?: Partial<AgentEnvironment>;\n    }>,\n  ): BaseAgent[] {\n    const agents: BaseAgent[] = [];\n\n    for (const spec of specs) {\n      const count = spec.count || 1;\n      for (let i = 0; i < count; i++) {\n        const agent = this.createAgent(spec.type, spec.config, spec.environment);\n        agents.push(agent);\n      }\n    }\n\n    this.logger.info('Created multiple agents', {\n      totalAgents: agents.length,\n      specs: specs.map((s) => ({ type: s.type, count: s.count || 1 })),\n    });\n\n    return agents;\n  }\n\n  /**\n   * Create a balanced swarm of agents\n   */\n  createBalancedSwarm(\n    size: number = 5,\n    strategy: 'research' | 'development' | 'analysis' | 'balanced' = 'balanced',\n  ): BaseAgent[] {\n    const compositions = {\n      research: {\n        researcher: 0.4,\n        analyst: 0.3,\n        coordinator: 0.2,\n        architect: 0.1,\n      },\n      development: {\n        coder: 0.4,\n        tester: 0.25,\n        architect: 0.2,\n        coordinator: 0.15,\n      },\n      analysis: {\n        analyst: 0.4,\n        researcher: 0.3,\n        coordinator: 0.2,\n        architect: 0.1,\n      },\n      balanced: {\n        coder: 0.25,\n        researcher: 0.2,\n        analyst: 0.2,\n        tester: 0.15,\n        architect: 0.1,\n        coordinator: 0.1,\n      },\n    };\n\n    const composition = compositions[strategy];\n    const specs: Array<{ type: AgentType; count: number }> = [];\n\n    for (const [type, ratio] of Object.entries(composition)) {\n      const count = Math.max(1, Math.round(size * ratio));\n      specs.push({ type: type as AgentType, count });\n    }\n\n    // Adjust if we have too many agents\n    const totalCount = specs.reduce((sum, spec) => sum + spec.count, 0);\n    if (totalCount > size) {\n      // Remove from largest groups first\n      specs.sort((a, b) => b.count - a.count);\n      let excess = totalCount - size;\n      for (const spec of specs) {\n        if (excess <= 0) break;\n        const reduction = Math.min(excess, spec.count - 1);\n        spec.count -= reduction;\n        excess -= reduction;\n      }\n    }\n\n    return this.createAgents(specs.map((spec) => ({ type: spec.type, count: spec.count })));\n  }\n\n  /**\n   * Get supported agent types\n   */\n  getSupportedTypes(): AgentType[] {\n    return [\n      'researcher', 'coder', 'analyst', 'architect', 'tester', 'coordinator',\n      'reviewer', 'optimizer', 'documenter', 'monitor', 'specialist',\n      'requirements_analyst', 'design_architect', 'task_planner', \n      'implementation_coder', 'quality_reviewer', 'steering_documenter'\n    ];\n  }\n\n  /**\n   * Get agent type descriptions\n   */\n  getAgentTypeDescriptions(): Record<AgentType, string> {\n    return {\n      researcher: 'Specialized in information gathering, web research, and data collection',\n      coder: 'Expert in software development, code generation, and implementation',\n      analyst: 'Focused on data analysis, performance optimization, and insights',\n      architect: 'Designs system architecture, technical specifications, and solutions',\n      tester: 'Specializes in testing, quality assurance, and validation',\n      coordinator: 'Manages task orchestration, planning, and team coordination',\n      reviewer: 'Reviews and validates work quality and standards',\n      optimizer: 'Optimizes performance and efficiency across systems',\n      documenter: 'Creates and maintains comprehensive documentation',\n      monitor: 'Monitors system health and performance metrics',\n      specialist: 'Provides domain-specific expertise and specialized knowledge',\n      requirements_analyst: 'Analyzes requirements and creates user stories with acceptance criteria',\n      design_architect: 'Creates technical designs and system architecture for features',\n      'system-architect': 'High-level system architecture and design patterns',\n      task_planner: 'Plans implementation tasks and orchestrates workflow execution', \n      'task-planner': 'Plans implementation tasks and orchestrates workflow execution',\n      implementation_coder: 'Implements code based on designs with quality focus',\n      developer: 'General purpose software development and implementation',\n      quality_reviewer: 'Reviews code quality and ensures standards compliance',\n      steering_documenter: 'Maintains governance documentation and project steering'\n    };\n  }\n\n  /**\n   * Generate unique agent ID\n   */\n  private generateAgentId(type: AgentType): string {\n    this.agentCounter++;\n    const timestamp = Date.now().toString(36);\n    const counter = this.agentCounter.toString(36).padStart(2, '0');\n    return `${type}-${timestamp}-${counter}`;\n  }\n}\n\n/**\n * Create default agent factory instance\n */\nexport function createAgentFactory(\n  logger: ILogger,\n  eventBus: IEventBus,\n  memory: DistributedMemorySystem,\n): AgentFactory {\n  return new AgentFactory({ logger, eventBus, memory });\n}\n\n/**\n * Agent lifecycle management utilities\n */\nexport class AgentLifecycle {\n  private agents = new Map<string, BaseAgent>();\n  private logger: ILogger;\n\n  constructor(logger: ILogger) {\n    this.logger = logger;\n  }\n\n  /**\n   * Register an agent for lifecycle management\n   */\n  register(agent: BaseAgent): void {\n    const info = agent.getAgentInfo();\n    this.agents.set(info.id.id, agent);\n    this.logger.info('Agent registered for lifecycle management', {\n      agentId: info.id.id,\n      type: info.type,\n    });\n  }\n\n  /**\n   * Initialize all registered agents\n   */\n  async initializeAll(): Promise<void> {\n    const initPromises = Array.from(this.agents.values()).map((agent) =>\n      agent.initialize().catch((error) => {\n        const info = agent.getAgentInfo();\n        this.logger.error('Agent initialization failed', {\n          agentId: info.id.id,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw error;\n      }),\n    );\n\n    await Promise.all(initPromises);\n    this.logger.info('All agents initialized', {\n      count: this.agents.size,\n    });\n  }\n\n  /**\n   * Shutdown all registered agents\n   */\n  async shutdownAll(): Promise<void> {\n    const shutdownPromises = Array.from(this.agents.values()).map((agent) =>\n      agent.shutdown().catch((error) => {\n        const info = agent.getAgentInfo();\n        this.logger.error('Agent shutdown failed', {\n          agentId: info.id.id,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }),\n    );\n\n    await Promise.all(shutdownPromises);\n    this.agents.clear();\n    this.logger.info('All agents shutdown');\n  }\n\n  /**\n   * Get agent by ID\n   */\n  getAgent(agentId: string): BaseAgent | undefined {\n    return this.agents.get(agentId);\n  }\n\n  /**\n   * Get all registered agents\n   */\n  getAllAgents(): BaseAgent[] {\n    return Array.from(this.agents.values());\n  }\n\n  /**\n   * Get agents by type\n   */\n  getAgentsByType(type: AgentType): BaseAgent[] {\n    return Array.from(this.agents.values()).filter((agent) => {\n      const info = agent.getAgentInfo();\n      return info.type === type;\n    });\n  }\n\n  /**\n   * Get agent statistics\n   */\n  getStatistics(): {\n    total: number;\n    byType: Record<AgentType, number>;\n    byStatus: Record<string, number>;\n    healthy: number;\n    active: number;\n  } {\n    const stats = {\n      total: this.agents.size,\n      byType: {} as Record<AgentType, number>,\n      byStatus: {} as Record<string, number>,\n      healthy: 0,\n      active: 0,\n    };\n\n    for (const agent of this.agents.values()) {\n      const info = agent.getAgentInfo();\n\n      // Count by type\n      stats.byType[info.type] = (stats.byType[info.type] || 0) + 1;\n\n      // Count by status\n      stats.byStatus[info.status] = (stats.byStatus[info.status] || 0) + 1;\n\n      // Count healthy agents (health > 0.7)\n      if (info.health > 0.7) {\n        stats.healthy++;\n      }\n\n      // Count active agents\n      if (info.status === 'idle' || info.status === 'busy') {\n        stats.active++;\n      }\n    }\n\n    return stats;\n  }\n}\n"],"names":["BaseAgent","ResearcherAgent","createResearcherAgent","CoderAgent","createCoderAgent","AnalystAgent","createAnalystAgent","ArchitectAgent","createArchitectAgent","TesterAgent","createTesterAgent","CoordinatorAgent","createCoordinatorAgent","AgentCapabilitySystem","AgentManager","AgentRegistry","AgentFactory","logger","eventBus","memory","agentCounter","config","createAgent","type","environment","customId","id","generateAgentId","info","factory","Error","createAgents","specs","agents","spec","count","i","agent","push","totalAgents","length","map","s","createBalancedSwarm","size","strategy","compositions","research","researcher","analyst","coordinator","architect","development","coder","tester","analysis","balanced","composition","ratio","Object","entries","Math","max","round","totalCount","reduce","sum","sort","a","b","excess","reduction","min","getSupportedTypes","getAgentTypeDescriptions","reviewer","optimizer","documenter","monitor","specialist","requirements_analyst","design_architect","task_planner","implementation_coder","developer","quality_reviewer","steering_documenter","timestamp","Date","now","toString","counter","padStart","createAgentFactory","AgentLifecycle","Map","register","getAgentInfo","set","agentId","initializeAll","initPromises","Array","from","values","initialize","catch","error","message","String","Promise","all","shutdownAll","shutdownPromises","shutdown","clear","getAgent","get","getAllAgents","getAgentsByType","filter","getStatistics","stats","total","byType","byStatus","healthy","active","status","health"],"mappings":"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"}