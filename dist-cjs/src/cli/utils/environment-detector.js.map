{"version":3,"sources":["../../../../src/cli/utils/environment-detector.ts"],"sourcesContent":["/**\n * Environment Detection Utility for Claude-Flow v2.0\n * Detects execution environment and recommends appropriate flags\n */\n\nimport chalk from 'chalk';\n\nexport interface ExecutionEnvironment {\n  isInteractive: boolean;\n  isVSCode: boolean;\n  isVSCodeInsiders: boolean;\n  isCI: boolean;\n  isDocker: boolean;\n  isSSH: boolean;\n  isGitBash: boolean;\n  isWindowsTerminal: boolean;\n  isWSL: boolean;\n  isWindows: boolean;\n  supportsRawMode: boolean;\n  supportsColor: boolean;\n  terminalType: string;\n  recommendedFlags: string[];\n  warnings: string[];\n}\n\nexport interface EnvironmentOptions {\n  skipWarnings?: boolean;\n  autoApplyDefaults?: boolean;\n  verbose?: boolean;\n}\n\n/**\n * Detects the current execution environment\n */\nexport function detectExecutionEnvironment(options: EnvironmentOptions = {}): ExecutionEnvironment {\n  const env: ExecutionEnvironment = {\n    isInteractive: false,\n    isVSCode: false,\n    isVSCodeInsiders: false,\n    isCI: false,\n    isDocker: false,\n    isSSH: false,\n    isGitBash: false,\n    isWindowsTerminal: false,\n    isWSL: false,\n    isWindows: false,\n    supportsRawMode: false,\n    supportsColor: true,\n    terminalType: 'unknown',\n    recommendedFlags: [],\n    warnings: [],\n  };\n\n  // Basic TTY check\n  env.isInteractive = Boolean(process.stdin.isTTY && process.stdout.isTTY);\n\n  // Terminal program detection\n  const termProgram = process.env.TERM_PROGRAM?.toLowerCase() || '';\n  env.isVSCode = termProgram === 'vscode';\n  env.isVSCodeInsiders = termProgram === 'vscode-insiders';\n  env.terminalType = termProgram || process.env.TERM || 'unknown';\n\n  // CI environment detection\n  env.isCI = Boolean(\n    process.env.CI ||\n      process.env.GITHUB_ACTIONS ||\n      process.env.GITLAB_CI ||\n      process.env.JENKINS_URL ||\n      process.env.CIRCLECI ||\n      process.env.TRAVIS ||\n      process.env.BUILDKITE ||\n      process.env.DRONE,\n  );\n\n  // Docker detection\n  env.isDocker = Boolean(\n    process.env.DOCKER_CONTAINER ||\n      existsSync('/.dockerenv') ||\n      (existsSync('/proc/1/cgroup') && readFileSync('/proc/1/cgroup', 'utf8').includes('docker')),\n  );\n\n  // SSH detection\n  env.isSSH = Boolean(process.env.SSH_CLIENT || process.env.SSH_TTY);\n\n  // Git Bash detection\n  env.isGitBash =\n    process.env.TERM_PROGRAM === 'mintty' || process.env.MSYSTEM?.startsWith('MINGW') || false;\n\n  // Windows Terminal detection\n  env.isWindowsTerminal = Boolean(process.env.WT_SESSION);\n\n  // Windows detection\n  env.isWindows = process.platform === 'win32';\n\n  // WSL detection\n  env.isWSL = Boolean(\n    process.env.WSL_DISTRO_NAME ||\n      process.env.WSL_INTEROP ||\n      (existsSync('/proc/version') &&\n        readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft')),\n  );\n\n  // Raw mode support check\n  env.supportsRawMode = checkRawModeSupport();\n\n  // Color support check\n  env.supportsColor =\n    process.env.NO_COLOR !== '1' &&\n    process.env.TERM !== 'dumb' &&\n    (process.stdout.isTTY || process.env.FORCE_COLOR === '1');\n\n  // Generate recommendations based on environment\n  generateRecommendations(env);\n\n  // Show warnings if requested\n  if (!options.skipWarnings && env.warnings.length > 0) {\n    showEnvironmentWarnings(env);\n  }\n\n  return env;\n}\n\n/**\n * Checks if raw mode is supported\n */\nfunction checkRawModeSupport(): boolean {\n  try {\n    if (!process.stdin.isTTY) return false;\n    if (typeof process.stdin.setRawMode !== 'function') return false;\n\n    // Try to set raw mode and immediately restore\n    const originalRawMode = process.stdin.isRaw;\n    process.stdin.setRawMode(true);\n    process.stdin.setRawMode(originalRawMode);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Generates recommendations based on environment\n */\nfunction generateRecommendations(env: ExecutionEnvironment): void {\n  // VS Code specific recommendations\n  if (env.isVSCode || env.isVSCodeInsiders) {\n    env.recommendedFlags.push('--dangerously-skip-permissions');\n    env.recommendedFlags.push('--non-interactive');\n    env.warnings.push('VS Code integrated terminal detected - interactive features may be limited');\n  }\n\n  // CI environment recommendations\n  if (env.isCI) {\n    env.recommendedFlags.push('--dangerously-skip-permissions');\n    env.recommendedFlags.push('--non-interactive');\n    env.recommendedFlags.push('--json');\n    env.warnings.push('CI environment detected - running in non-interactive mode');\n  }\n\n  // Docker recommendations\n  if (env.isDocker && !env.isInteractive) {\n    env.recommendedFlags.push('--dangerously-skip-permissions');\n    env.recommendedFlags.push('--non-interactive');\n    env.warnings.push('Docker container without TTY - interactive features disabled');\n  }\n\n  // SSH without TTY\n  if (env.isSSH && !env.isInteractive) {\n    env.recommendedFlags.push('--dangerously-skip-permissions');\n    env.warnings.push('SSH session without TTY - consider using ssh -t');\n  }\n\n  // Git Bash specific\n  if (env.isGitBash) {\n    env.warnings.push('Git Bash detected - some interactive features may not work correctly');\n  }\n\n  // WSL specific recommendations\n  if (env.isWSL) {\n    env.recommendedFlags.push('--no-interactive');\n    env.warnings.push('WSL detected - raw mode may cause hangs, using non-interactive mode');\n    if (!env.supportsRawMode) {\n      env.warnings.push('WSL subprocess context detected - interactive features disabled');\n    }\n  }\n\n  // Windows specific recommendations\n  if (env.isWindows && !env.isWSL) {\n    env.recommendedFlags.push('--compatible-ui');\n    env.warnings.push('Native Windows detected - using compatible UI mode');\n  }\n\n  // Raw mode not supported\n  if (!env.supportsRawMode && env.isInteractive) {\n    env.recommendedFlags.push('--compatible-ui');\n    env.warnings.push('Terminal does not support raw mode - using compatible UI');\n  }\n}\n\n/**\n * Shows environment warnings to the user\n */\nfunction showEnvironmentWarnings(env: ExecutionEnvironment): void {\n  if (env.warnings.length === 0) return;\n\n  console.log(chalk.yellow('\\n‚ö†Ô∏è  Environment Detection:'));\n  env.warnings.forEach((warning) => {\n    console.log(chalk.gray(`   ‚Ä¢ ${warning}`));\n  });\n\n  if (env.recommendedFlags.length > 0) {\n    console.log(chalk.cyan('\\nüí° Recommended flags for your environment:'));\n    console.log(chalk.gray(`   ${env.recommendedFlags.join(' ')}`));\n  }\n\n  console.log(); // Empty line for spacing\n}\n\n/**\n * Applies smart defaults based on environment\n */\nexport function applySmartDefaults<T extends Record<string, any>>(\n  options: T,\n  env?: ExecutionEnvironment,\n): T & { appliedDefaults: string[]; skipPermissions?: boolean; dangerouslySkipPermissions?: boolean; nonInteractive?: boolean; json?: boolean; noColor?: boolean; } {\n  const environment = env || detectExecutionEnvironment({ skipWarnings: true });\n  const appliedDefaults: string[] = [];\n  const enhanced = { ...options, appliedDefaults } as T & { appliedDefaults: string[]; skipPermissions?: boolean; dangerouslySkipPermissions?: boolean; nonInteractive?: boolean; json?: boolean; noColor?: boolean; };\n\n  // Apply defaults based on environment\n  if (\n    (environment.isVSCode || environment.isCI || !environment.supportsRawMode) &&\n    !options.hasOwnProperty('skipPermissions')\n  ) {\n    enhanced.skipPermissions = true;\n    enhanced.dangerouslySkipPermissions = true;\n    appliedDefaults.push('--dangerously-skip-permissions');\n  }\n\n  if (\n    (environment.isCI || !environment.isInteractive) &&\n    !options.hasOwnProperty('nonInteractive')\n  ) {\n    enhanced.nonInteractive = true;\n    appliedDefaults.push('--non-interactive');\n  }\n\n  if (environment.isCI && !options.hasOwnProperty('json')) {\n    enhanced.json = true;\n    appliedDefaults.push('--json');\n  }\n\n  if (!environment.supportsColor && !options.hasOwnProperty('noColor')) {\n    enhanced.noColor = true;\n    appliedDefaults.push('--no-color');\n  }\n\n  // Log applied defaults if verbose\n  if (options.verbose && appliedDefaults.length > 0) {\n    console.log(chalk.gray(`‚ÑπÔ∏è  Auto-applied flags: ${appliedDefaults.join(' ')}`));\n  }\n\n  return enhanced;\n}\n\n/**\n * Gets a human-readable environment description\n */\nexport function getEnvironmentDescription(env?: ExecutionEnvironment): string {\n  const environment = env || detectExecutionEnvironment({ skipWarnings: true });\n  const parts: string[] = [];\n\n  if (environment.isVSCode) parts.push('VS Code');\n  if (environment.isCI) parts.push('CI');\n  if (environment.isDocker) parts.push('Docker');\n  if (environment.isSSH) parts.push('SSH');\n  if (environment.isGitBash) parts.push('Git Bash');\n  if (environment.isWindowsTerminal) parts.push('Windows Terminal');\n  if (environment.isWSL) parts.push('WSL');\n  if (environment.isWindows && !environment.isWSL) parts.push('Windows');\n\n  if (parts.length === 0) {\n    parts.push(environment.terminalType);\n  }\n\n  const features: string[] = [];\n  if (environment.isInteractive) features.push('interactive');\n  if (environment.supportsRawMode) features.push('raw mode');\n  if (environment.supportsColor) features.push('color');\n\n  return `${parts.join('/')} (${features.join(', ')})`;\n}\n\n/**\n * Checks if we should use non-interactive mode\n */\nexport function shouldUseNonInteractiveMode(options?: { force?: boolean }): boolean {\n  if (options?.force) return true;\n\n  const env = detectExecutionEnvironment({ skipWarnings: true });\n  return (\n    !env.isInteractive ||\n    env.isCI ||\n    env.isVSCode ||\n    env.isWSL ||\n    env.isWindows ||\n    !env.supportsRawMode\n  );\n}\n\n// Helper functions (these would normally be imported)\nfunction existsSync(path: string): boolean {\n  try {\n    require('fs').accessSync(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction readFileSync(path: string, encoding: string): string {\n  try {\n    return require('fs').readFileSync(path, encoding);\n  } catch {\n    return '';\n  }\n}\n\nexport default {\n  detectExecutionEnvironment,\n  applySmartDefaults,\n  getEnvironmentDescription,\n  shouldUseNonInteractiveMode,\n};\n"],"names":["chalk","detectExecutionEnvironment","options","env","isInteractive","isVSCode","isVSCodeInsiders","isCI","isDocker","isSSH","isGitBash","isWindowsTerminal","isWSL","isWindows","supportsRawMode","supportsColor","terminalType","recommendedFlags","warnings","Boolean","process","stdin","isTTY","stdout","termProgram","TERM_PROGRAM","toLowerCase","TERM","CI","GITHUB_ACTIONS","GITLAB_CI","JENKINS_URL","CIRCLECI","TRAVIS","BUILDKITE","DRONE","DOCKER_CONTAINER","existsSync","readFileSync","includes","SSH_CLIENT","SSH_TTY","MSYSTEM","startsWith","WT_SESSION","platform","WSL_DISTRO_NAME","WSL_INTEROP","checkRawModeSupport","NO_COLOR","FORCE_COLOR","generateRecommendations","skipWarnings","length","showEnvironmentWarnings","setRawMode","originalRawMode","isRaw","push","console","log","yellow","forEach","warning","gray","cyan","join","applySmartDefaults","environment","appliedDefaults","enhanced","hasOwnProperty","skipPermissions","dangerouslySkipPermissions","nonInteractive","json","noColor","verbose","getEnvironmentDescription","parts","features","shouldUseNonInteractiveMode","force","path","require","accessSync","encoding"],"mappings":"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"}