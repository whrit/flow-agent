{"version":3,"sources":["../../../../src/cli/utils/safe-interactive.js"],"sourcesContent":["/**\n * Safe Interactive Wrapper - Handles interactive commands in non-interactive environments\n */\n\nimport chalk from 'chalk';\nimport { isInteractive, isRawModeSupported, getEnvironmentType } from './interactive-detector.js';\n\n/**\n * Wraps an interactive function with safety checks\n * @param {Function} interactiveFn - The interactive function to wrap\n * @param {Function} fallbackFn - The non-interactive fallback function\n * @param {Object} options - Options for the wrapper\n * @returns {Function} The wrapped function\n */\nexport function safeInteractive(interactiveFn, fallbackFn, options = {}) {\n  return async function (...args) {\n    const flags = args[args.length - 1] || {};\n\n    // Check if user explicitly requested non-interactive mode\n    if (flags.nonInteractive || flags['no-interactive']) {\n      if (fallbackFn) {\n        return fallbackFn(...args);\n      } else {\n        console.log(chalk.yellow('‚ö†Ô∏è  Non-interactive mode requested but no fallback available'));\n        console.log(chalk.gray('This command requires interactive mode to function properly'));\n        process.exit(1);\n      }\n    }\n\n    // Auto-detect if we should use non-interactive mode\n    if (!isInteractive() || !isRawModeSupported()) {\n      const envType = getEnvironmentType();\n\n      if (!options.silent) {\n        console.log(chalk.yellow('\\n‚ö†Ô∏è  Interactive mode not available'));\n        console.log(chalk.gray(`Detected environment: ${envType}`));\n\n        // Provide specific message based on environment\n        if (process.env.WSL_DISTRO_NAME || process.env.WSL_INTEROP) {\n          console.log(chalk.gray('WSL detected - raw mode may cause process hangs'));\n          console.log(chalk.cyan('üí° Tip: Use --no-interactive flag or run in native Linux'));\n        } else if (process.platform === 'win32') {\n          console.log(chalk.gray('Windows detected - terminal compatibility issues'));\n          console.log(chalk.cyan('üí° Tip: Use Windows Terminal or WSL2 for better experience'));\n        } else if (process.env.TERM_PROGRAM === 'vscode') {\n          console.log(chalk.gray('VS Code terminal detected - limited interactive support'));\n          console.log(chalk.cyan('üí° Tip: Use external terminal for full functionality'));\n        } else if (!isRawModeSupported()) {\n          console.log(chalk.gray('Terminal does not support raw mode'));\n        }\n\n        console.log();\n      }\n\n      if (fallbackFn) {\n        return fallbackFn(...args);\n      } else {\n        console.log(chalk.red('‚ùå This command requires interactive mode'));\n        console.log(chalk.gray('Please run in a compatible terminal environment'));\n        process.exit(1);\n      }\n    }\n\n    // Try to run the interactive function\n    try {\n      return await interactiveFn(...args);\n    } catch (error) {\n      // Check if it's a raw mode error\n      if (\n        error.message &&\n        (error.message.includes('setRawMode') ||\n          error.message.includes('raw mode') ||\n          error.message.includes('stdin') ||\n          error.message.includes('TTY'))\n      ) {\n        console.log(chalk.yellow('\\n‚ö†Ô∏è  Interactive mode failed'));\n        console.log(chalk.gray(error.message));\n\n        if (fallbackFn) {\n          console.log(chalk.cyan('Falling back to non-interactive mode...'));\n          return fallbackFn(...args);\n        } else {\n          console.log(chalk.red('‚ùå No non-interactive fallback available'));\n          process.exit(1);\n        }\n      }\n\n      // Re-throw other errors\n      throw error;\n    }\n  };\n}\n\n/**\n * Create a non-interactive version of a prompt\n * @param {string} message - The prompt message\n * @param {*} defaultValue - The default value to use\n * @returns {*} The default value\n */\nexport function nonInteractivePrompt(message, defaultValue) {\n  console.log(chalk.gray(`üìù ${message}`));\n  console.log(chalk.cyan(`   Using default: ${defaultValue}`));\n  return defaultValue;\n}\n\n/**\n * Create a non-interactive version of a selection\n * @param {string} message - The selection message\n * @param {Array} choices - The available choices\n * @param {*} defaultChoice - The default choice\n * @returns {*} The default choice\n */\nexport function nonInteractiveSelect(message, choices, defaultChoice) {\n  console.log(chalk.gray(`üìã ${message}`));\n  console.log(chalk.gray('   Available choices:'));\n  choices.forEach((choice) => {\n    const isDefault = choice === defaultChoice || choice.value === defaultChoice;\n    console.log(chalk.gray(`   ${isDefault ? '‚ñ∂' : ' '} ${choice.name || choice}`));\n  });\n  console.log(chalk.cyan(`   Using default: ${defaultChoice}`));\n  return defaultChoice;\n}\n\n/**\n * Show a non-interactive progress indicator\n * @param {string} message - The progress message\n * @returns {Object} Progress control object\n */\nexport function nonInteractiveProgress(message) {\n  console.log(chalk.gray(`‚è≥ ${message}...`));\n\n  return {\n    update: (newMessage) => {\n      console.log(chalk.gray(`   ${newMessage}`));\n    },\n    succeed: (finalMessage) => {\n      console.log(chalk.green(`‚úÖ ${finalMessage || message}`));\n    },\n    fail: (errorMessage) => {\n      console.log(chalk.red(`‚ùå ${errorMessage || 'Failed'}`));\n    },\n  };\n}\n"],"names":["chalk","isInteractive","isRawModeSupported","getEnvironmentType","safeInteractive","interactiveFn","fallbackFn","options","args","flags","length","nonInteractive","console","log","yellow","gray","process","exit","envType","silent","env","WSL_DISTRO_NAME","WSL_INTEROP","cyan","platform","TERM_PROGRAM","red","error","message","includes","nonInteractivePrompt","defaultValue","nonInteractiveSelect","choices","defaultChoice","forEach","choice","isDefault","value","name","nonInteractiveProgress","update","newMessage","succeed","finalMessage","green","fail","errorMessage"],"mappings":"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"}