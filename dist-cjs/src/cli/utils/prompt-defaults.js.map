{"version":3,"sources":["../../../../src/cli/utils/prompt-defaults.ts"],"sourcesContent":["/**\n * Prompt Defaults System for Non-Interactive Mode\n *\n * This module provides a system for supplying default values\n * to prompts when running in non-interactive mode.\n */\n\nimport { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { homedir } from 'node:os';\n\nexport interface PromptDefault {\n  id: string;\n  type: 'text' | 'confirm' | 'select' | 'multiselect' | 'number';\n  pattern?: RegExp | string;\n  defaultValue: any;\n  description?: string;\n}\n\nexport interface PromptDefaultsConfig {\n  global?: PromptDefault[];\n  command?: {\n    [command: string]: PromptDefault[];\n  };\n  environment?: {\n    [env: string]: PromptDefault[];\n  };\n}\n\nexport class PromptDefaultsManager {\n  private config: PromptDefaultsConfig = {};\n  private configPath: string;\n  private environmentDefaults: Map<string, any> = new Map();\n\n  constructor(configPath?: string) {\n    this.configPath = configPath || join(homedir(), '.claude-flow', 'prompt-defaults.json');\n    this.loadConfig();\n    this.loadEnvironmentDefaults();\n  }\n\n  /**\n   * Load configuration from file\n   */\n  private loadConfig(): void {\n    try {\n      if (existsSync(this.configPath)) {\n        const content = readFileSync(this.configPath, 'utf-8');\n        this.config = JSON.parse(content);\n      }\n    } catch (error) {\n      // Silently fail, use empty config\n      this.config = {};\n    }\n  }\n\n  /**\n   * Save configuration to file\n   */\n  private saveConfig(): void {\n    try {\n      const dir = join(this.configPath, '..');\n      if (!existsSync(dir)) {\n        require('fs').mkdirSync(dir, { recursive: true });\n      }\n      writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));\n    } catch (error) {\n      // Silently fail\n    }\n  }\n\n  /**\n   * Load defaults from environment variables\n   */\n  private loadEnvironmentDefaults(): void {\n    const env = process.env;\n\n    // Common defaults from environment\n    if (env.CLAUDE_AUTO_APPROVE === '1' || env.CLAUDE_AUTO_APPROVE === 'true') {\n      this.environmentDefaults.set('confirm:*', true);\n    }\n\n    if (env.CLAUDE_DEFAULT_MODEL) {\n      this.environmentDefaults.set('select:model', env.CLAUDE_DEFAULT_MODEL);\n    }\n\n    if (env.CLAUDE_DEFAULT_REGION) {\n      this.environmentDefaults.set('select:region', env.CLAUDE_DEFAULT_REGION);\n    }\n\n    // Parse CLAUDE_PROMPT_DEFAULTS if set\n    if (env.CLAUDE_PROMPT_DEFAULTS) {\n      try {\n        const defaults = JSON.parse(env.CLAUDE_PROMPT_DEFAULTS);\n        Object.entries(defaults).forEach(([key, value]) => {\n          this.environmentDefaults.set(key, value);\n        });\n      } catch (error) {\n        // Invalid JSON, ignore\n      }\n    }\n  }\n\n  /**\n   * Get default value for a prompt\n   */\n  getDefault(promptId: string, command?: string, promptType?: string): any {\n    // Check environment defaults first (highest priority)\n    const envKey = `${promptType || 'text'}:${promptId}`;\n    if (this.environmentDefaults.has(envKey)) {\n      return this.environmentDefaults.get(envKey);\n    }\n\n    // Check wildcard environment defaults\n    const wildcardKey = `${promptType || 'text'}:*`;\n    if (this.environmentDefaults.has(wildcardKey)) {\n      return this.environmentDefaults.get(wildcardKey);\n    }\n\n    // Check command-specific defaults\n    if (command && this.config.command?.[command]) {\n      const commandDefault = this.config.command[command].find(\n        (d) => d.id === promptId || (d.pattern && this.matchPattern(promptId, d.pattern)),\n      );\n      if (commandDefault) {\n        return commandDefault.defaultValue;\n      }\n    }\n\n    // Check environment-specific defaults\n    const currentEnv = process.env.NODE_ENV || 'development';\n    if (this.config.environment?.[currentEnv]) {\n      const envDefault = this.config.environment[currentEnv].find(\n        (d) => d.id === promptId || (d.pattern && this.matchPattern(promptId, d.pattern)),\n      );\n      if (envDefault) {\n        return envDefault.defaultValue;\n      }\n    }\n\n    // Check global defaults\n    if (this.config.global) {\n      const globalDefault = this.config.global.find(\n        (d) => d.id === promptId || (d.pattern && this.matchPattern(promptId, d.pattern)),\n      );\n      if (globalDefault) {\n        return globalDefault.defaultValue;\n      }\n    }\n\n    // Return undefined if no default found\n    return undefined;\n  }\n\n  /**\n   * Set a default value\n   */\n  setDefault(\n    promptId: string,\n    defaultValue: any,\n    options: {\n      command?: string;\n      type?: string;\n      pattern?: string | RegExp;\n      description?: string;\n      scope?: 'global' | 'command' | 'environment';\n    } = {},\n  ): void {\n    const defaultEntry: PromptDefault = {\n      id: promptId,\n      type: (options.type as any) || 'text',\n      defaultValue,\n      description: options.description,\n      pattern: options.pattern,\n    };\n\n    const scope = options.scope || 'global';\n\n    if (scope === 'command' && options.command) {\n      if (!this.config.command) {\n        this.config.command = {};\n      }\n      if (!this.config.command[options.command]) {\n        this.config.command[options.command] = [];\n      }\n      this.config.command[options.command].push(defaultEntry);\n    } else if (scope === 'environment') {\n      const currentEnv = process.env.NODE_ENV || 'development';\n      if (!this.config.environment) {\n        this.config.environment = {};\n      }\n      if (!this.config.environment[currentEnv]) {\n        this.config.environment[currentEnv] = [];\n      }\n      this.config.environment[currentEnv].push(defaultEntry);\n    } else {\n      if (!this.config.global) {\n        this.config.global = [];\n      }\n      this.config.global.push(defaultEntry);\n    }\n\n    this.saveConfig();\n  }\n\n  /**\n   * Get common defaults for non-interactive mode\n   */\n  getNonInteractiveDefaults(): Record<string, any> {\n    return {\n      // Confirmation prompts\n      'confirm:continue': true,\n      'confirm:overwrite': true,\n      'confirm:delete': false, // Safety: don't auto-confirm deletes\n      'confirm:deploy': false, // Safety: don't auto-confirm deploys\n\n      // Selection prompts\n      'select:model': 'claude-3-opus-20240229',\n      'select:region': 'us-east-1',\n      'select:topology': 'hierarchical',\n      'select:strategy': 'auto',\n\n      // Text prompts\n      'text:projectName': 'claude-flow-project',\n      'text:description': 'Claude Flow AI Project',\n\n      // Number prompts\n      'number:maxAgents': 4,\n      'number:timeout': 30000,\n      'number:port': 3000,\n    };\n  }\n\n  /**\n   * Apply non-interactive defaults if needed\n   */\n  applyNonInteractiveDefaults(isNonInteractive: boolean): void {\n    if (!isNonInteractive) return;\n\n    const defaults = this.getNonInteractiveDefaults();\n    Object.entries(defaults).forEach(([key, value]) => {\n      if (!this.environmentDefaults.has(key)) {\n        this.environmentDefaults.set(key, value);\n      }\n    });\n  }\n\n  /**\n   * Match a pattern against a prompt ID\n   */\n  private matchPattern(promptId: string, pattern: string | RegExp): boolean {\n    if (typeof pattern === 'string') {\n      // Simple wildcard matching\n      const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n      return regex.test(promptId);\n    } else {\n      return pattern.test(promptId);\n    }\n  }\n\n  /**\n   * Export current configuration\n   */\n  exportConfig(): PromptDefaultsConfig {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * Import configuration\n   */\n  importConfig(config: PromptDefaultsConfig): void {\n    this.config = JSON.parse(JSON.stringify(config));\n    this.saveConfig();\n  }\n\n  /**\n   * Clear all defaults\n   */\n  clearDefaults(scope?: 'global' | 'command' | 'environment', target?: string): void {\n    if (scope === 'command' && target && this.config.command) {\n      delete this.config.command[target];\n    } else if (scope === 'environment' && target && this.config.environment) {\n      delete this.config.environment[target];\n    } else if (scope === 'global' || !scope) {\n      this.config.global = [];\n    }\n\n    this.saveConfig();\n  }\n}\n\n// Singleton instance\nlet instance: PromptDefaultsManager | null = null;\n\nexport function getPromptDefaultsManager(configPath?: string): PromptDefaultsManager {\n  if (!instance) {\n    instance = new PromptDefaultsManager(configPath);\n  }\n  return instance;\n}\n\n// Convenience function for getting defaults\nexport function getPromptDefault(promptId: string, command?: string, promptType?: string): any {\n  return getPromptDefaultsManager().getDefault(promptId, command, promptType);\n}\n\n// Apply non-interactive defaults based on environment\nexport function applyNonInteractiveDefaults(flags: any): void {\n  const manager = getPromptDefaultsManager();\n  const isNonInteractive =\n    flags.nonInteractive || flags['non-interactive'] || flags.ci || !process.stdout.isTTY;\n  manager.applyNonInteractiveDefaults(isNonInteractive);\n}\n"],"names":["existsSync","readFileSync","writeFileSync","join","homedir","PromptDefaultsManager","config","configPath","environmentDefaults","Map","loadConfig","loadEnvironmentDefaults","content","JSON","parse","error","saveConfig","dir","require","mkdirSync","recursive","stringify","env","process","CLAUDE_AUTO_APPROVE","set","CLAUDE_DEFAULT_MODEL","CLAUDE_DEFAULT_REGION","CLAUDE_PROMPT_DEFAULTS","defaults","Object","entries","forEach","key","value","getDefault","promptId","command","promptType","envKey","has","get","wildcardKey","commandDefault","find","d","id","pattern","matchPattern","defaultValue","currentEnv","NODE_ENV","environment","envDefault","global","globalDefault","undefined","setDefault","options","defaultEntry","type","description","scope","push","getNonInteractiveDefaults","applyNonInteractiveDefaults","isNonInteractive","regex","RegExp","replace","test","exportConfig","importConfig","clearDefaults","target","instance","getPromptDefaultsManager","getPromptDefault","flags","manager","nonInteractive","ci","stdout","isTTY"],"mappings":"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"}