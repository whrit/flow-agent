{"version":3,"sources":["../../../../src/cli/init/index.ts"],"sourcesContent":["// init/index.ts - Main init command orchestrator\nimport { printSuccess, printError } from '../utils.js';\nimport { createDirectoryStructure } from './directory-structure.js';\nimport { createSwarmCommands } from './swarm-commands.js';\nimport { createSparcEnvironment } from './sparc-environment.js';\nimport { createClaudeConfig } from './claude-config.js';\nimport { createBatchToolsGuide } from './batch-tools.js';\n\nexport interface InitOptions {\n  sparc?: boolean;\n  force?: boolean;\n}\n\nexport async function initCommand(options: InitOptions = {}) {\n  try {\n    const fs = await import('fs/promises');\n    const path = await import('path');\n\n    printSuccess('Initializing Claude-Flow project...');\n\n    // Phase 1: Create directory structure\n    console.log('\\nüìÅ Phase 1: Creating directory structure...');\n    await createDirectoryStructure();\n\n    // Phase 2: Create base configuration\n    console.log('\\n‚öôÔ∏è  Phase 2: Creating configuration...');\n    await createClaudeConfig(options);\n\n    // Phase 3: Create swarm commands and documentation\n    console.log('\\nü§ñ Phase 3: Creating swarm commands...');\n    await createSwarmCommands();\n\n    // Phase 4: Create batch tools guides\n    console.log('\\nüîß Phase 4: Creating batch tools guides...');\n    await createBatchToolsGuide();\n\n    // Phase 5: SPARC environment (if requested)\n    if (options.sparc) {\n      console.log('\\nüöÄ Phase 5: Creating SPARC environment...');\n      await createSparcEnvironment();\n    }\n\n    // Success summary\n    console.log('\\nüéâ Project initialized successfully!');\n    console.log('   üìÅ Created .claude/ directory structure');\n    console.log('   üìã Created comprehensive swarm command documentation');\n    console.log('   üîß Created batch tools coordination guides');\n    console.log('   üìñ Created detailed usage examples with orchestration');\n\n    console.log('\\n   Next steps:');\n    console.log('   1. Run \"claude-flow swarm --help\" to see swarm options');\n    console.log('   2. Check .claude/commands/swarm/ for detailed documentation');\n    console.log('   3. Review batch tools guide for orchestration patterns');\n    console.log('   4. Run \"claude-flow help\" for all available commands');\n\n    if (options.sparc) {\n      console.log('   5. Run \"claude-flow sparc modes\" to see available SPARC modes');\n      console.log('   6. Use TodoWrite/TodoRead for task coordination');\n      console.log('   7. Use Task tool for parallel agent execution');\n    }\n  } catch (error) {\n    printError(\n      `Failed to initialize project: ${error instanceof Error ? error.message : String(error)}`,\n    );\n    throw error;\n  }\n}\n"],"names":["printSuccess","printError","createDirectoryStructure","createSwarmCommands","createSparcEnvironment","createClaudeConfig","createBatchToolsGuide","initCommand","options","fs","path","console","log","sparc","error","Error","message","String"],"mappings":"AACA,SAASA,YAAY,EAAEC,UAAU,QAAQ,cAAc;AACvD,SAASC,wBAAwB,QAAQ,2BAA2B;AACpE,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,kBAAkB,QAAQ,qBAAqB;AACxD,SAASC,qBAAqB,QAAQ,mBAAmB;AAOzD,OAAO,eAAeC,YAAYC,UAAuB,CAAC,CAAC;IACzD,IAAI;QACF,MAAMC,KAAK,MAAM,MAAM,CAAC;QACxB,MAAMC,OAAO,MAAM,MAAM,CAAC;QAE1BV,aAAa;QAGbW,QAAQC,GAAG,CAAC;QACZ,MAAMV;QAGNS,QAAQC,GAAG,CAAC;QACZ,MAAMP,mBAAmBG;QAGzBG,QAAQC,GAAG,CAAC;QACZ,MAAMT;QAGNQ,QAAQC,GAAG,CAAC;QACZ,MAAMN;QAGN,IAAIE,QAAQK,KAAK,EAAE;YACjBF,QAAQC,GAAG,CAAC;YACZ,MAAMR;QACR;QAGAO,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QAEZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;QAEZ,IAAIJ,QAAQK,KAAK,EAAE;YACjBF,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC;QACd;IACF,EAAE,OAAOE,OAAO;QACdb,WACE,CAAC,8BAA8B,EAAEa,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH,QAAQ;QAE3F,MAAMA;IACR;AACF"}