{"version":3,"sources":["../../../../src/cli/init/sparc-environment.ts"],"sourcesContent":["// init/sparc-environment.ts - SPARC development environment setup\nexport async function createSparcEnvironment(): Promise<void> {\n  const fs = await import('fs/promises');\n\n  // Create .roomodes file with 17 pre-configured modes\n  const roomodes = createRoomodes();\n  await fs.writeFile('.roomodes', JSON.stringify(roomodes, null, 2));\n  console.log('  ‚úÖ Created .roomodes file with 17 pre-configured modes');\n\n  // Create comprehensive CLAUDE.md with batch tools integration\n  const claudeMd = createClaudeMd();\n  await fs.writeFile('CLAUDE.md', claudeMd);\n  console.log('  ‚úÖ Created CLAUDE.md with batch tools and swarm orchestration');\n\n  console.log('  ‚úÖ SPARC environment configured with batch tools integration');\n}\n\nfunction createRoomodes() {\n  return {\n    orchestrator: {\n      description: 'Multi-agent task orchestration and coordination',\n      prompt:\n        'SPARC: orchestrator\\\\nYou are an AI orchestrator coordinating multiple specialized agents to complete complex tasks efficiently using TodoWrite, TodoRead, Task, and Memory tools.',\n      tools: ['TodoWrite', 'TodoRead', 'Task', 'Memory', 'Bash'],\n    },\n    coder: {\n      description: 'Autonomous code generation and implementation',\n      prompt:\n        'SPARC: coder\\\\nYou are an expert programmer focused on writing clean, efficient, and well-documented code using batch file operations.',\n      tools: ['Read', 'Write', 'Edit', 'Bash', 'Glob', 'Grep', 'TodoWrite'],\n    },\n    researcher: {\n      description: 'Deep research and comprehensive analysis',\n      prompt:\n        'SPARC: researcher\\\\nYou are a research specialist focused on gathering comprehensive information using parallel WebSearch/WebFetch and Memory coordination.',\n      tools: ['WebSearch', 'WebFetch', 'Read', 'Write', 'Memory', 'TodoWrite', 'Task'],\n    },\n    tdd: {\n      description: 'Test-driven development methodology',\n      prompt:\n        'SPARC: tdd\\\\nYou follow strict test-driven development practices using TodoWrite for test planning and batch operations for test execution.',\n      tools: ['Read', 'Write', 'Edit', 'Bash', 'TodoWrite', 'Task'],\n    },\n    architect: {\n      description: 'System design and architecture planning',\n      prompt:\n        'SPARC: architect\\\\nYou are a software architect focused on designing scalable, maintainable system architectures using Memory for design coordination.',\n      tools: ['Read', 'Write', 'Glob', 'Memory', 'TodoWrite', 'Task'],\n    },\n    reviewer: {\n      description: 'Code review and quality optimization',\n      prompt:\n        'SPARC: reviewer\\\\nYou are a code reviewer focused on improving code quality using batch file analysis and systematic review processes.',\n      tools: ['Read', 'Edit', 'Grep', 'Bash', 'TodoWrite', 'Memory'],\n    },\n    debugger: {\n      description: 'Debug and fix issues systematically',\n      prompt:\n        'SPARC: debugger\\\\nYou are a debugging specialist using TodoWrite for systematic debugging and Memory for tracking issue patterns.',\n      tools: ['Read', 'Edit', 'Bash', 'Grep', 'TodoWrite', 'Memory'],\n    },\n    tester: {\n      description: 'Comprehensive testing and validation',\n      prompt:\n        'SPARC: tester\\\\nYou are a testing specialist using TodoWrite for test planning and parallel execution for comprehensive coverage.',\n      tools: ['Read', 'Write', 'Edit', 'Bash', 'TodoWrite', 'Task'],\n    },\n    analyzer: {\n      description: 'Code and data analysis specialist',\n      prompt:\n        'SPARC: analyzer\\\\nYou are an analysis specialist using batch operations for efficient data processing and Memory for insight coordination.',\n      tools: ['Read', 'Grep', 'Bash', 'Write', 'Memory', 'TodoWrite', 'Task'],\n    },\n    optimizer: {\n      description: 'Performance optimization specialist',\n      prompt:\n        'SPARC: optimizer\\\\nYou are a performance optimization specialist using systematic analysis and TodoWrite for optimization planning.',\n      tools: ['Read', 'Edit', 'Bash', 'Grep', 'TodoWrite', 'Memory'],\n    },\n    documenter: {\n      description: 'Documentation generation and maintenance',\n      prompt:\n        'SPARC: documenter\\\\nYou are a documentation specialist using batch file operations and Memory for comprehensive documentation coordination.',\n      tools: ['Read', 'Write', 'Glob', 'Memory', 'TodoWrite'],\n    },\n    designer: {\n      description: 'UI/UX design and user experience',\n      prompt:\n        'SPARC: designer\\\\nYou are a UI/UX designer using Memory for design coordination and TodoWrite for design process management.',\n      tools: ['Read', 'Write', 'Edit', 'Memory', 'TodoWrite'],\n    },\n    innovator: {\n      description: 'Creative problem solving and innovation',\n      prompt:\n        'SPARC: innovator\\\\nYou are an innovation specialist using WebSearch for inspiration and Memory for idea coordination across sessions.',\n      tools: ['Read', 'Write', 'WebSearch', 'Memory', 'TodoWrite', 'Task'],\n    },\n    'swarm-coordinator': {\n      description: 'Swarm coordination and management',\n      prompt:\n        'SPARC: swarm-coordinator\\\\nYou coordinate swarms of AI agents using TodoWrite for task management, Task for agent launching, and Memory for coordination.',\n      tools: ['TodoWrite', 'TodoRead', 'Task', 'Memory', 'Bash'],\n    },\n    'memory-manager': {\n      description: 'Memory and knowledge management',\n      prompt:\n        'SPARC: memory-manager\\\\nYou manage knowledge and memory systems using Memory tools for persistent storage and TodoWrite for knowledge organization.',\n      tools: ['Memory', 'Read', 'Write', 'TodoWrite', 'TodoRead'],\n    },\n    'batch-executor': {\n      description: 'Parallel task execution specialist',\n      prompt:\n        'SPARC: batch-executor\\\\nYou excel at executing multiple tasks in parallel using batch tool operations and Task coordination for maximum efficiency.',\n      tools: ['Task', 'Bash', 'Read', 'Write', 'TodoWrite', 'Memory'],\n    },\n    'workflow-manager': {\n      description: 'Workflow automation and process management',\n      prompt:\n        'SPARC: workflow-manager\\\\nYou design and manage automated workflows using TodoWrite for process planning and Task coordination for execution.',\n      tools: ['TodoWrite', 'TodoRead', 'Task', 'Bash', 'Memory'],\n    },\n  };\n}\n\nfunction createClaudeMd(): string {\n  return `# Claude Code Configuration for Your Project\n\n## üéØ Purpose of This Configuration\nThis CLAUDE.md file configures Claude Code to help you BUILD YOUR OWN APPLICATIONS using the claude-flow orchestration system. Claude-flow is a tool to help you develop software - it is NOT the project you should be modifying.\n\n**IMPORTANT**: \n- Use claude-flow commands to BUILD YOUR APPLICATION\n- DO NOT modify the claude-flow system itself\n- Focus on YOUR PROJECT'S code, not the orchestration tool\n\n## üìÅ Project Structure\nWhen building your application, organize your code in:\n- \\`src/\\`: Your application source code\n- \\`tests/\\`: Your application tests\n- \\`docs/\\`: Your project documentation\n- \\`config/\\`: Your application configuration\n\n## üõ†Ô∏è Your Project's Build Commands\nConfigure these for YOUR application (not claude-flow):\n- \\`npm run build\\`: Build YOUR project\n- \\`npm run test\\`: Run YOUR project's test suite\n- \\`npm run lint\\`: Run linting on YOUR code\n- \\`npm run typecheck\\`: Type check YOUR TypeScript code\n- \\`npm start\\`: Start YOUR application\n\n## üöÄ Using Claude-Flow to Build Your Application\n\nClaude-flow provides powerful AI orchestration tools to accelerate YOUR application development. Use these commands to build YOUR project:\n\n### üéÆ Getting Started with Your Project\n- \\`./claude-flow start --ui\\`: Start the AI orchestration system to help build YOUR app\n- \\`./claude-flow sparc \"Build a [YOUR APP TYPE] application\"\\`: Start building YOUR application\n- \\`./claude-flow swarm \"Create [YOUR FEATURE]\"\\`: Use multiple AI agents to build complex features\n- \\`./claude-flow status\\`: Check the status of YOUR development tasks\n\n### ü§ñ AI Agents to Build Your Application\n- \\`./claude-flow agent spawn coder\\`: Create a coding agent for YOUR project\n- \\`./claude-flow agent spawn researcher\\`: Research best practices for YOUR features\n- \\`./claude-flow agent spawn tester\\`: Create tests for YOUR application\n- \\`./claude-flow agent list\\`: See agents working on YOUR project\n\n### üìã Managing Your Development Tasks\n- \\`./claude-flow task create feature \"Add user authentication to my app\"\\`: Create development tasks\n- \\`./claude-flow task list\\`: View YOUR project's task queue\n- \\`./claude-flow workflow my-app-workflow.json\\`: Automate YOUR development workflow\n\n### üß† Project Knowledge Management\n- \\`./claude-flow memory store \"my_app_architecture\" \"REST API with React frontend\"\\`: Store YOUR project decisions\n- \\`./claude-flow memory get \"my_app_requirements\"\\`: Retrieve YOUR project information\n- \\`./claude-flow memory list\\`: See all stored knowledge about YOUR project\n- \\`./claude-flow memory export my-project-knowledge.json\\`: Export YOUR project knowledge\n\n### üéØ SPARC Modes for Building Your Application\n- \\`./claude-flow sparc \"Create a todo list app with React\"\\`: Start building YOUR app\n- \\`./claude-flow sparc run coder \"Implement user login for my app\"\\`: Code YOUR features\n- \\`./claude-flow sparc tdd \"Shopping cart functionality\"\\`: Build YOUR features test-first\n- \\`./claude-flow sparc run architect \"Design my app's database schema\"\\`: Design YOUR architecture\n\n**Available SPARC modes for YOUR project:**\n- **coder**: Write code for YOUR application\n- **architect**: Design YOUR system architecture\n- **tdd**: Test-driven development for YOUR features\n- **researcher**: Research solutions for YOUR requirements\n- **reviewer**: Review YOUR code quality\n- **debugger**: Debug issues in YOUR application\n- **tester**: Test YOUR application thoroughly\n- **documenter**: Document YOUR project\n\n### üêù Swarm Mode: Multiple AI Agents for Your Project\n\\`./claude-flow swarm \"Build a complete e-commerce website\" --strategy development --parallel\\`\n\nOptions for YOUR project:\n- \\`--strategy development\\`: Build YOUR application features\n- \\`--strategy testing\\`: Comprehensive testing of YOUR app\n- \\`--strategy optimization\\`: Optimize YOUR application performance\n- \\`--max-agents 8\\`: Use up to 8 AI agents for YOUR project\n- \\`--parallel\\`: Build multiple features simultaneously\n\n## üí° Example Workflows for Your Projects\n\n### üöÄ Building a New Web Application\n\\`\\`\\`bash\n# Example: Building a Task Management App\n./claude-flow sparc \"Create a task management web app with React and Node.js\"\n\n# Add authentication to YOUR app\n./claude-flow sparc run coder \"Add user authentication with JWT tokens to my task app\"\n\n# Create tests for YOUR features\n./claude-flow sparc tdd \"Task creation and assignment features\"\n\n# Use multiple agents to build faster\n./claude-flow swarm \"Build complete task management system\" --strategy development --parallel\n\\`\\`\\`\n\n### üîç Research Phase for Your Project\n\\`\\`\\`bash\n# Research best practices for YOUR app type\n./claude-flow sparc run researcher \"Research best practices for building SaaS applications\"\n\n# Store YOUR project's technical decisions\n./claude-flow memory store \"tech_stack\" \"React, Node.js, PostgreSQL, Redis\"\n./claude-flow memory store \"auth_strategy\" \"JWT with refresh tokens\"\n\n# Analyze similar applications\n./claude-flow sparc run analyzer \"Analyze successful task management apps for feature ideas\"\n\\`\\`\\`\n\n### üèóÔ∏è Development Workflow for Your Application\n\\`\\`\\`bash\n# Design YOUR application architecture\n./claude-flow sparc run architect \"Design microservices architecture for my e-commerce platform\"\n\n# Implement YOUR features with TDD\n./claude-flow sparc tdd \"Shopping cart with discount calculation\"\n\n# Multiple agents working on YOUR project\n./claude-flow swarm \"Build user dashboard with analytics\" --strategy development --max-agents 5\n\n# Review and optimize YOUR code\n./claude-flow sparc run reviewer \"Review authentication implementation for security\"\n\\`\\`\\`\n\n### üîß Testing and Debugging Your Application\n\\`\\`\\`bash\n# Comprehensive testing for YOUR app\n./claude-flow sparc run tester \"Create comprehensive test suite for my API endpoints\"\n\n# Debug issues in YOUR application\n./claude-flow sparc run debugger \"Debug why user login is failing in production\"\n\n# Performance optimization for YOUR app\n./claude-flow sparc run optimizer \"Optimize database queries in my application\"\n\n# Security review for YOUR project\n./claude-flow sparc run reviewer \"Security audit of my payment processing system\"\n\\`\\`\\`\n\n### üìö Documentation for Your Project\n\\`\\`\\`bash\n# Generate documentation for YOUR API\n./claude-flow sparc run documenter \"Create API documentation for my REST endpoints\"\n\n# Document YOUR project architecture\n./claude-flow sparc run documenter \"Document the system architecture and design decisions\"\n\n# Create user guides for YOUR application\n./claude-flow sparc run documenter \"Write user guide for the admin dashboard\"\n\\`\\`\\`\n\n## üé® Building Your Application Step by Step\n\n### üìê Planning Your Application\nStore YOUR project decisions and requirements:\n\n\\`\\`\\`bash\n# Define YOUR application requirements\n./claude-flow memory store \"app_type\" \"SaaS project management tool\"\n./claude-flow memory store \"target_users\" \"Small to medium development teams\"\n./claude-flow memory store \"core_features\" \"Task tracking, team collaboration, time tracking, reporting\"\n\n# Design YOUR architecture based on requirements\n./claude-flow sparc run architect \"Design scalable SaaS architecture for project management tool\"\n\n# Research best practices for YOUR app type\n./claude-flow sparc run researcher \"Research best practices for multi-tenant SaaS applications\"\n\\`\\`\\`\n\n### üèóÔ∏è Building Your Application Features\nImplement YOUR application step by step:\n\n\\`\\`\\`bash\n# Phase 1: Core functionality\n./claude-flow sparc tdd \"User registration and team creation\"\n./claude-flow sparc run coder \"Implement project and task management features\"\n\n# Phase 2: Advanced features\n./claude-flow swarm \"Build real-time collaboration features\" --strategy development --parallel\n./claude-flow sparc run coder \"Add time tracking and reporting dashboard\"\n\n# Phase 3: Polish and optimize\n./claude-flow sparc run optimizer \"Optimize performance for 1000+ concurrent users\"\n./claude-flow sparc run designer \"Improve UI/UX for mobile responsiveness\"\n\\`\\`\\`\n\n### üöÄ Deploying Your Application\nPrepare YOUR application for production:\n\n\\`\\`\\`bash\n# Final testing and security review\n./claude-flow sparc run tester \"Complete end-to-end testing suite\"\n./claude-flow sparc run reviewer \"Final security audit before launch\"\n\n# Documentation for YOUR users\n./claude-flow sparc run documenter \"Create user documentation and API guides\"\n\n# Performance optimization\n./claude-flow sparc run optimizer \"Optimize for production deployment\"\n\\`\\`\\`\n\n## üõ†Ô∏è How Claude Code Helps Build YOUR Application\n\n### ü§ñ AI-Powered Development Assistance\nWhen you use claude-flow commands, Claude Code will help you:\n- **Write code** for YOUR application (not for claude-flow itself)\n- **Design architecture** for YOUR project requirements\n- **Create tests** for YOUR features\n- **Debug issues** in YOUR code\n- **Optimize performance** of YOUR application\n- **Document** YOUR project\n\n### üìã Task Management for YOUR Project\nClaude Code uses TodoWrite and TodoRead to manage YOUR development tasks:\n\n\\`\\`\\`javascript\n// Example: Claude Code will create tasks for YOUR application development\nTodoWrite([\n  {\n    id: \"create_user_model\",\n    content: \"Create User model for YOUR application\",\n    status: \"pending\",\n    priority: \"high\"\n  },\n  {\n    id: \"implement_auth\", \n    content: \"Implement authentication for YOUR app\",\n    status: \"pending\",\n    priority: \"high\"\n  },\n  {\n    id: \"add_user_dashboard\",\n    content: \"Create user dashboard for YOUR application\",\n    status: \"pending\",\n    priority: \"medium\"\n  },\n  {\n    id: \"write_tests\",\n    content: \"Write tests for YOUR new features\",\n    status: \"pending\",\n    priority: \"high\"\n  }\n]);\n\\`\\`\\`\n\n## üéØ SPARC Modes: Specialized AI Assistants for Your Project\n\nEach SPARC mode is a specialized AI assistant that helps with different aspects of YOUR application development:\n\n### üë®‚Äçüíª Development Modes\n- **coder**: Writes code for YOUR application features\n- **architect**: Designs YOUR system architecture and database schemas\n- **tdd**: Helps you build YOUR features with test-driven development\n- **designer**: Creates UI/UX designs for YOUR application\n\n### üîç Analysis & Research Modes\n- **researcher**: Researches best practices for YOUR project needs\n- **analyzer**: Analyzes YOUR code for improvements\n- **optimizer**: Optimizes YOUR application's performance\n- **reviewer**: Reviews YOUR code for quality and security\n\n### üõ†Ô∏è Support Modes\n- **debugger**: Helps debug issues in YOUR application\n- **tester**: Creates comprehensive tests for YOUR features\n- **documenter**: Writes documentation for YOUR project\n- **innovator**: Suggests innovative features for YOUR application\n\n## üêù Swarm Mode: Multiple AI Agents for Complex Features\n\nUse swarm mode when building complex features that benefit from multiple specialized agents:\n\n\\`\\`\\`bash\n# Example: Building a complete e-commerce platform\n./claude-flow swarm \"Build complete e-commerce platform with payment integration\" \\\\\n  --strategy development --parallel --max-agents 8\n\n# Example: Adding real-time features to YOUR app\n./claude-flow swarm \"Add real-time chat and notifications to my app\" \\\\\n  --strategy development --parallel --max-agents 5\n\n# Example: Comprehensive testing of YOUR application\n./claude-flow swarm \"Create comprehensive test suite for my API\" \\\\\n  --strategy testing --parallel --max-agents 6\n\\`\\`\\`\n\n## üíª Code Style for YOUR Project\n\nWhen Claude Code writes code for YOUR application, it will follow these best practices:\n- Modern ES6+ JavaScript/TypeScript\n- Clean, readable code with proper naming\n- Comprehensive error handling\n- Security best practices\n- Performance optimization\n- Proper documentation\n\n## üö® Important Reminders\n\n### ‚úÖ DO Use Claude-Flow For:\n- Building YOUR new application\n- Adding features to YOUR project\n- Writing tests for YOUR code\n- Debugging YOUR application\n- Optimizing YOUR performance\n- Documenting YOUR project\n\n### ‚ùå DON'T Use Claude-Flow For:\n- Modifying the claude-flow system itself\n- Changing how claude-flow works internally\n- Updating claude-flow commands or features\n- Fixing claude-flow bugs (report them on GitHub instead)\n\n## üéâ Get Started Building YOUR Application!\n\nRemember: Claude-flow is a TOOL to help you build YOUR application faster and better. Focus on describing what YOU want to build, and let the AI agents help you create it.\n\n**Example first command for a new project:**\n\\`\\`\\`bash\n./claude-flow sparc \"Create a [YOUR APP TYPE] application with [YOUR MAIN FEATURES]\"\n\\`\\`\\`\n\nHappy coding! üöÄ\n`;\n}\n"],"names":["createSparcEnvironment","fs","roomodes","createRoomodes","writeFile","JSON","stringify","console","log","claudeMd","createClaudeMd","orchestrator","description","prompt","tools","coder","researcher","tdd","architect","reviewer","debugger","tester","analyzer","optimizer","documenter","designer","innovator"],"mappings":"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"}