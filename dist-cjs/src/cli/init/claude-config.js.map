{"version":3,"sources":["../../../../src/cli/init/claude-config.ts"],"sourcesContent":["// init/claude-config.ts - Claude configuration creation\nimport type { InitOptions } from './index.js';\n\nexport async function createClaudeConfig(options: InitOptions): Promise<void> {\n  const fs = await import('fs/promises');\n  const path = await import('path');\n\n  // Create base configuration\n  const claudeConfig = {\n    version: '1.0.71',\n    project: {\n      name: path.basename(process.cwd()),\n      type: 'claude-flow',\n      created: new Date().toISOString(),\n    },\n    features: {\n      swarm: true,\n      sparc: options.sparc || false,\n      memory: true,\n      terminal: true,\n      mcp: true,\n      batchTools: true,\n      orchestration: true,\n    },\n    batchTools: {\n      enabled: true,\n      maxConcurrentTasks: 10,\n      memoryCoordination: true,\n      taskOrchestration: true,\n      parallelExecution: true,\n    },\n    swarmConfig: {\n      defaultStrategy: 'auto',\n      defaultMode: 'centralized',\n      defaultMaxAgents: 5,\n      defaultTimeout: 60,\n      enableMonitoring: true,\n      enableParallel: true,\n      outputFormats: ['json', 'sqlite', 'csv', 'html'],\n      defaultOutputDir: './reports',\n    },\n    coordination: {\n      todoIntegration: true,\n      memorySharing: true,\n      crossAgentCommunication: true,\n      taskDependencyTracking: true,\n      progressMonitoring: true,\n    },\n  };\n\n  await fs.writeFile('.claude/config.json', JSON.stringify(claudeConfig, null, 2));\n  console.log('  ✅ Created .claude/config.json with batch tools configuration');\n\n  // Create additional configuration files\n  await createBatchToolsConfig();\n  await createSwarmConfig();\n  await createCoordinationConfig();\n}\n\nasync function createBatchToolsConfig(): Promise<void> {\n  const fs = await import('fs/promises');\n\n  const batchConfig = {\n    version: '1.0.71',\n    description: 'Batch tools configuration for Claude Code orchestration',\n    tools: {\n      todoWrite: {\n        enabled: true,\n        features: [\n          'task_breakdown',\n          'dependency_tracking',\n          'priority_management',\n          'progress_monitoring',\n        ],\n        maxTasks: 50,\n        defaultPriority: 'medium',\n      },\n      todoRead: {\n        enabled: true,\n        features: ['progress_tracking', 'status_monitoring', 'task_filtering'],\n        autoRefresh: true,\n        refreshInterval: 30,\n      },\n      task: {\n        enabled: true,\n        features: ['parallel_execution', 'agent_coordination', 'load_balancing'],\n        maxConcurrentTasks: 10,\n        timeoutDefault: 300,\n        retryAttempts: 3,\n      },\n      memory: {\n        enabled: true,\n        features: ['cross_agent_sharing', 'persistent_storage', 'knowledge_coordination'],\n        maxEntries: 1000,\n        compressionEnabled: true,\n        encryptionEnabled: false,\n      },\n      fileOperations: {\n        batchRead: {\n          enabled: true,\n          maxConcurrentReads: 10,\n          timeoutPerFile: 30,\n        },\n        batchWrite: {\n          enabled: true,\n          maxConcurrentWrites: 5,\n          backupEnabled: true,\n        },\n        batchEdit: {\n          enabled: true,\n          maxConcurrentEdits: 5,\n          validationEnabled: true,\n        },\n      },\n      search: {\n        batchGlob: {\n          enabled: true,\n          maxConcurrentSearches: 5,\n          cacheResults: true,\n        },\n        batchGrep: {\n          enabled: true,\n          maxConcurrentSearches: 5,\n          regexOptimization: true,\n        },\n      },\n    },\n    performance: {\n      monitoring: {\n        enabled: true,\n        metricsCollection: true,\n        performanceAlerts: true,\n      },\n      optimization: {\n        resourcePooling: true,\n        intelligentBatching: true,\n        loadBalancing: true,\n      },\n    },\n  };\n\n  await fs.writeFile('.claude/configs/batch-tools.json', JSON.stringify(batchConfig, null, 2));\n  console.log('  ✅ Created batch tools configuration');\n}\n\nasync function createSwarmConfig(): Promise<void> {\n  const fs = await import('fs/promises');\n\n  const swarmConfig = {\n    version: '1.0.71',\n    description: 'Swarm orchestration configuration for Claude-Flow',\n    strategies: {\n      research: {\n        description: 'Multi-agent research coordination',\n        defaultMode: 'distributed',\n        defaultAgents: 6,\n        phases: ['planning', 'execution', 'synthesis', 'reporting'],\n        tools: ['WebSearch', 'WebFetch', 'Memory', 'TodoWrite', 'Task'],\n        coordination: 'memory_based',\n      },\n      development: {\n        description: 'Coordinated software development',\n        defaultMode: 'hierarchical',\n        defaultAgents: 8,\n        phases: ['architecture', 'implementation', 'testing', 'integration'],\n        tools: ['Read', 'Write', 'Edit', 'Bash', 'Memory', 'TodoWrite', 'Task'],\n        coordination: 'hierarchical_teams',\n      },\n      analysis: {\n        description: 'Data analysis and insights generation',\n        defaultMode: 'mesh',\n        defaultAgents: 10,\n        phases: ['collection', 'processing', 'analysis', 'visualization'],\n        tools: ['Read', 'Bash', 'Memory', 'TodoWrite', 'Task'],\n        coordination: 'peer_to_peer',\n      },\n      testing: {\n        description: 'Comprehensive testing coordination',\n        defaultMode: 'distributed',\n        defaultAgents: 12,\n        phases: ['planning', 'execution', 'validation', 'reporting'],\n        tools: ['Read', 'Write', 'Bash', 'TodoWrite', 'Task'],\n        coordination: 'distributed_validation',\n      },\n      optimization: {\n        description: 'Performance optimization coordination',\n        defaultMode: 'hybrid',\n        defaultAgents: 6,\n        phases: ['profiling', 'analysis', 'optimization', 'validation'],\n        tools: ['Read', 'Edit', 'Bash', 'Memory', 'TodoWrite'],\n        coordination: 'adaptive_hybrid',\n      },\n      maintenance: {\n        description: 'System maintenance coordination',\n        defaultMode: 'centralized',\n        defaultAgents: 4,\n        phases: ['assessment', 'planning', 'execution', 'verification'],\n        tools: ['Read', 'Write', 'Bash', 'TodoWrite', 'Memory'],\n        coordination: 'centralized_safety',\n      },\n    },\n    coordinationModes: {\n      centralized: {\n        description: 'Single coordinator manages all agents',\n        useCases: ['maintenance', 'safety_critical', 'simple_tasks'],\n        coordination: 'master_slave',\n        communication: 'hub_spoke',\n      },\n      distributed: {\n        description: 'Multiple coordinators manage agent groups',\n        useCases: ['research', 'testing', 'large_scale'],\n        coordination: 'multi_master',\n        communication: 'federated',\n      },\n      hierarchical: {\n        description: 'Tree-like organization with team leads',\n        useCases: ['development', 'structured_workflows', 'large_teams'],\n        coordination: 'tree_structure',\n        communication: 'hierarchical_reporting',\n      },\n      mesh: {\n        description: 'Peer-to-peer agent communication',\n        useCases: ['analysis', 'dynamic_tasks', 'adaptive_workflows'],\n        coordination: 'peer_to_peer',\n        communication: 'mesh_network',\n      },\n      hybrid: {\n        description: 'Adaptive coordination based on task phase',\n        useCases: ['optimization', 'complex_workflows', 'multi_phase'],\n        coordination: 'adaptive_mixed',\n        communication: 'dynamic_topology',\n      },\n    },\n  };\n\n  await fs.writeFile('.claude/configs/swarm.json', JSON.stringify(swarmConfig, null, 2));\n  console.log('  ✅ Created swarm orchestration configuration');\n}\n\nasync function createCoordinationConfig(): Promise<void> {\n  const fs = await import('fs/promises');\n\n  const coordinationConfig = {\n    version: '1.0.71',\n    description: 'Agent coordination and orchestration configuration',\n    coordination: {\n      taskManagement: {\n        todoIntegration: {\n          enabled: true,\n          autoBreakdown: true,\n          dependencyTracking: true,\n          progressMonitoring: true,\n          priorityManagement: true,\n        },\n        taskDistribution: {\n          algorithm: 'intelligent_balancing',\n          loadBalancing: true,\n          skillMatching: true,\n          resourceOptimization: true,\n        },\n      },\n      communication: {\n        memorySharing: {\n          enabled: true,\n          crossAgentAccess: true,\n          knowledgeSync: true,\n          conflictResolution: 'timestamp_priority',\n        },\n        coordination: {\n          realTimeUpdates: true,\n          statusBroadcasting: true,\n          emergencySignaling: true,\n        },\n      },\n      monitoring: {\n        progressTracking: {\n          enabled: true,\n          realTimeUpdates: true,\n          milestoneTracking: true,\n          performanceMetrics: true,\n        },\n        healthMonitoring: {\n          agentHealth: true,\n          taskHealth: true,\n          systemHealth: true,\n          alerting: true,\n        },\n      },\n    },\n    optimization: {\n      resourceManagement: {\n        pooling: true,\n        allocation: 'dynamic',\n        recycling: true,\n        monitoring: true,\n      },\n      performance: {\n        batchOptimization: true,\n        parallelExecution: true,\n        caching: true,\n        compression: true,\n      },\n    },\n  };\n\n  await fs.writeFile(\n    '.claude/configs/coordination.json',\n    JSON.stringify(coordinationConfig, null, 2),\n  );\n  console.log('  ✅ Created coordination configuration');\n}\n"],"names":["createClaudeConfig","options","fs","path","claudeConfig","version","project","name","basename","process","cwd","type","created","Date","toISOString","features","swarm","sparc","memory","terminal","mcp","batchTools","orchestration","enabled","maxConcurrentTasks","memoryCoordination","taskOrchestration","parallelExecution","swarmConfig","defaultStrategy","defaultMode","defaultMaxAgents","defaultTimeout","enableMonitoring","enableParallel","outputFormats","defaultOutputDir","coordination","todoIntegration","memorySharing","crossAgentCommunication","taskDependencyTracking","progressMonitoring","writeFile","JSON","stringify","console","log","createBatchToolsConfig","createSwarmConfig","createCoordinationConfig","batchConfig","description","tools","todoWrite","maxTasks","defaultPriority","todoRead","autoRefresh","refreshInterval","task","timeoutDefault","retryAttempts","maxEntries","compressionEnabled","encryptionEnabled","fileOperations","batchRead","maxConcurrentReads","timeoutPerFile","batchWrite","maxConcurrentWrites","backupEnabled","batchEdit","maxConcurrentEdits","validationEnabled","search","batchGlob","maxConcurrentSearches","cacheResults","batchGrep","regexOptimization","performance","monitoring","metricsCollection","performanceAlerts","optimization","resourcePooling","intelligentBatching","loadBalancing","strategies","research","defaultAgents","phases","development","analysis","testing","maintenance","coordinationModes","centralized","useCases","communication","distributed","hierarchical","mesh","hybrid","coordinationConfig","taskManagement","autoBreakdown","dependencyTracking","priorityManagement","taskDistribution","algorithm","skillMatching","resourceOptimization","crossAgentAccess","knowledgeSync","conflictResolution","realTimeUpdates","statusBroadcasting","emergencySignaling","progressTracking","milestoneTracking","performanceMetrics","healthMonitoring","agentHealth","taskHealth","systemHealth","alerting","resourceManagement","pooling","allocation","recycling","batchOptimization","caching","compression"],"mappings":"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"}