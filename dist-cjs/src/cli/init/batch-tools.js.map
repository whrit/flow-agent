{"version":3,"sources":["../../../../src/cli/init/batch-tools.ts"],"sourcesContent":["// init/batch-tools.ts - Batch tools coordination guides\nexport async function createBatchToolsGuide(): Promise<void> {\n  const fs = await import('fs/promises');\n  const path = await import('path');\n\n  const batchToolsDir = '.claude/commands/swarm';\n\n  const batchToolsGuide = `# Batch Tools Coordination Guide\n\n## Overview\nThis guide explains how to use Claude Code's batch tools effectively for swarm orchestration and parallel task execution.\n\n## Core Batch Tools\n\n### TodoWrite/TodoRead - Task Coordination Engine\nThe foundation of all swarm operations - manages task distribution, progress tracking, and coordination.\n\n#### TodoWrite Usage\n\\`\\`\\`javascript\n// Create comprehensive task breakdown\nTodoWrite([\n  {\n    id: \"research_phase\",\n    content: \"Research cloud architecture patterns\",\n    status: \"pending\",\n    priority: \"high\",\n    dependencies: [],\n    estimatedTime: \"30min\",\n    assignedAgent: \"research_specialist\"\n  },\n  {\n    id: \"analysis_phase\", \n    content: \"Analyze performance requirements\",\n    status: \"pending\",\n    priority: \"medium\",\n    dependencies: [\"research_phase\"],\n    estimatedTime: \"45min\",\n    assignedAgent: \"performance_analyst\"\n  },\n  {\n    id: \"implementation_phase\",\n    content: \"Implement optimized solution\",\n    status: \"pending\", \n    priority: \"high\",\n    dependencies: [\"research_phase\", \"analysis_phase\"],\n    estimatedTime: \"90min\",\n    assignedAgent: \"implementation_specialist\"\n  }\n]);\n\\`\\`\\`\n\n#### TodoRead Monitoring\n\\`\\`\\`javascript\n// Regular progress checks\nconst progress = TodoRead();\nconsole.log(\"Current progress:\", progress);\n\n// Check specific task status\nconst researchStatus = TodoRead().find(task => task.id === \"research_phase\");\nif (researchStatus.status === \"completed\") {\n  // Trigger dependent tasks\n  updateTaskStatus(\"analysis_phase\", \"in_progress\");\n}\n\\`\\`\\`\n\n### Task Tool - Parallel Agent Orchestration\nLaunches multiple specialized agents simultaneously for maximum efficiency.\n\n#### Basic Agent Launching\n\\`\\`\\`javascript\n// Launch specialized agents for different domains\nTask(\"Architecture Research\", \n     \"Research microservices architecture patterns and best practices for scalable systems\");\n\nTask(\"Performance Analysis\", \n     \"Analyze current system performance and identify optimization opportunities\");\n\nTask(\"Security Assessment\", \n     \"Conduct security analysis and identify potential vulnerabilities\");\n\\`\\`\\`\n\n#### Coordinated Agent Launching\n\\`\\`\\`javascript\n// Launch agents with coordination instructions\nTask(\"Frontend Development Team\", \\`\n  Develop React components for user dashboard:\n  - Use TodoWrite to track component development progress\n  - Store component specifications in Memory under 'frontend_specs'\n  - Coordinate with backend team through Memory shared state\n  - Use batch Read operations for existing component analysis\n\\`);\n\nTask(\"Backend Development Team\", \\`\n  Develop API services for dashboard:\n  - Check Memory 'frontend_specs' for component requirements\n  - Use TodoWrite to track API endpoint development\n  - Store API documentation in Memory under 'api_specs'\n  - Coordinate database changes with data team\n\\`);\n\\`\\`\\`\n\n### Memory Tool - Cross-Agent Knowledge Sharing\nEnables persistent knowledge sharing and coordination across all agents.\n\n#### Knowledge Storage Patterns\n\\`\\`\\`javascript\n// Store research findings for other agents\nMemory.store(\"architecture_research\", {\n  patterns: {\n    microservices: {\n      benefits: [\"scalability\", \"maintainability\", \"technology_diversity\"],\n      challenges: [\"complexity\", \"network_latency\", \"data_consistency\"],\n      recommendations: [\"use_api_gateway\", \"implement_circuit_breakers\"]\n    },\n    serverless: {\n      benefits: [\"cost_efficiency\", \"auto_scaling\", \"reduced_ops\"],\n      challenges: [\"cold_starts\", \"vendor_lock_in\", \"debugging\"],\n      recommendations: [\"warm_up_functions\", \"multi_cloud_strategy\"]\n    }\n  },\n  performance_requirements: {\n    response_time: \"< 200ms\",\n    throughput: \"> 1000 rps\", \n    availability: \"99.9%\"\n  },\n  timestamp: Date.now(),\n  source: \"research_specialist\"\n});\n\n// Store analysis results\nMemory.store(\"performance_analysis\", {\n  current_metrics: {\n    avg_response_time: \"450ms\",\n    peak_throughput: \"750 rps\",\n    bottlenecks: [\"database_queries\", \"external_api_calls\"]\n  },\n  optimization_opportunities: [\n    {area: \"database\", impact: \"high\", effort: \"medium\"},\n    {area: \"caching\", impact: \"high\", effort: \"low\"},\n    {area: \"cdn\", impact: \"medium\", effort: \"low\"}\n  ],\n  recommendations: {\n    immediate: [\"implement_redis_cache\", \"optimize_queries\"],\n    medium_term: [\"add_cdn\", \"database_indexing\"],\n    long_term: [\"microservices_migration\", \"auto_scaling\"]\n  }\n});\n\\`\\`\\`\n\n#### Cross-Agent Coordination\n\\`\\`\\`javascript\n// Implementation agent retrieves and uses research/analysis\nconst architectureData = Memory.retrieve(\"architecture_research\");\nconst performanceData = Memory.retrieve(\"performance_analysis\");\n\n// Use combined knowledge for implementation\nconst implementationPlan = {\n  architecture: architectureData.patterns.microservices,\n  performance_targets: architectureData.performance_requirements,\n  optimizations: performanceData.recommendations.immediate,\n  implementation_order: [\n    \"setup_redis_cache\",\n    \"optimize_database_queries\", \n    \"implement_api_gateway\",\n    \"add_circuit_breakers\"\n  ]\n};\n\nMemory.store(\"implementation_plan\", implementationPlan);\n\\`\\`\\`\n\n### Batch File Operations - Efficient I/O Management\nMaximize efficiency by batching file operations and searches.\n\n#### Parallel File Reading\n\\`\\`\\`javascript\n// Read multiple configuration files simultaneously\nRead(\"config/database.json\");\nRead(\"config/api.json\");\nRead(\"config/cache.json\");\nRead(\"config/monitoring.json\");\n\n// Read source code for analysis\nRead(\"src/services/user-service.ts\");\nRead(\"src/services/order-service.ts\");\nRead(\"src/services/payment-service.ts\");\nRead(\"src/middleware/auth.ts\");\nRead(\"src/middleware/validation.ts\");\n\\`\\`\\`\n\n#### Batch Search Operations\n\\`\\`\\`javascript\n// Search for different patterns simultaneously\nGlob(\"**/*.ts\");           // All TypeScript files\nGlob(\"**/*.test.ts\");      // All test files\nGlob(\"**/package.json\");   // All package definitions\nGlob(\"**/*.env*\");         // All environment files\n\n// Search for code patterns\nGrep(\"TODO|FIXME|HACK\", \"**/*.ts\");     // Code comments\nGrep(\"console\\\\.log\", \"**/*.ts\");        // Debug statements\nGrep(\"any\\\\s\", \"**/*.ts\");               // TypeScript any usage\nGrep(\"fetch\\\\(|axios\", \"**/*.ts\");       // API calls\n\\`\\`\\`\n\n#### Coordinated File Modifications\n\\`\\`\\`javascript\n// Edit multiple files with coordination\nEdit(\"src/config/database.ts\", oldConfig, optimizedConfig);\nEdit(\"src/services/cache.ts\", oldCacheLogic, newCacheLogic);\nEdit(\"src/middleware/performance.ts\", oldMiddleware, optimizedMiddleware);\n\n// Write new files as part of coordinated implementation\nWrite(\"src/services/redis-cache.ts\", redisCacheImplementation);\nWrite(\"src/monitoring/performance-metrics.ts\", metricsImplementation);\nWrite(\"docs/performance-optimization.md\", optimizationDocumentation);\n\\`\\`\\`\n\n## Advanced Coordination Patterns\n\n### Research Swarm Pattern\n\\`\\`\\`javascript\n// 1. Initialize research coordination\nTodoWrite([\n  {id: \"domain_research\", content: \"Research domain-specific patterns\", status: \"pending\", priority: \"high\"},\n  {id: \"competitive_analysis\", content: \"Analyze competitor solutions\", status: \"pending\", priority: \"medium\"},\n  {id: \"technology_evaluation\", content: \"Evaluate technology options\", status: \"pending\", priority: \"high\"},\n  {id: \"synthesis\", content: \"Synthesize findings into recommendations\", status: \"pending\", priority: \"high\"}\n]);\n\n// 2. Launch parallel research agents\nTask(\"Domain Expert\", \"Research best practices and patterns for the specific domain\");\nTask(\"Competitive Analyst\", \"Analyze competitor solutions and market approaches\");\nTask(\"Technology Evaluator\", \"Evaluate and compare technology options\");\n\n// 3. Agents store findings in Memory with structured keys\n// Each agent uses Memory.store() with domain-specific keys\n\n// 4. Synthesis agent combines all findings\nTask(\"Research Synthesizer\", \\`\n  Retrieve all research findings from Memory:\n  - domain_research findings\n  - competitive_analysis results\n  - technology_evaluation data\n  \n  Synthesize into comprehensive recommendations and store final results\n\\`);\n\\`\\`\\`\n\n### Development Swarm Pattern\n\\`\\`\\`javascript\n// 1. Create development roadmap\nTodoWrite([\n  {id: \"architecture_design\", content: \"Design system architecture\", status: \"pending\", priority: \"high\"},\n  {id: \"frontend_development\", content: \"Develop frontend components\", status: \"pending\", priority: \"medium\"},\n  {id: \"backend_development\", content: \"Develop backend services\", status: \"pending\", priority: \"medium\"},\n  {id: \"integration_testing\", content: \"Integration and testing\", status: \"pending\", priority: \"high\"},\n  {id: \"deployment_setup\", content: \"Setup deployment pipeline\", status: \"pending\", priority: \"medium\"}\n]);\n\n// 2. Architecture phase\nTask(\"System Architect\", \\`\n  Design system architecture:\n  - Use Memory to retrieve research findings\n  - Create component specifications\n  - Define API contracts\n  - Store architecture decisions in Memory\n\\`);\n\n// 3. Parallel development (after architecture)\nTask(\"Frontend Team\", \\`\n  Develop frontend components:\n  - Retrieve architecture specs from Memory\n  - Use batch Read operations for existing code analysis\n  - Implement components using batch Write/Edit operations\n  - Store component documentation in Memory\n\\`);\n\nTask(\"Backend Team\", \\`\n  Develop backend services:\n  - Retrieve architecture and API specs from Memory\n  - Implement services using batch file operations\n  - Store service documentation and test results\n\\`);\n\n// 4. Integration and testing\nTask(\"Integration Team\", \\`\n  Integration and testing:\n  - Retrieve all component specifications from Memory\n  - Use batch testing operations\n  - Coordinate deployment with DevOps team\n\\`);\n\\`\\`\\`\n\n### Analysis Swarm Pattern\n\\`\\`\\`javascript\n// 1. Analysis task breakdown\nTodoWrite([\n  {id: \"data_collection\", content: \"Collect and prepare data\", status: \"pending\", priority: \"high\"},\n  {id: \"statistical_analysis\", content: \"Perform statistical analysis\", status: \"pending\", priority: \"medium\"},\n  {id: \"pattern_detection\", content: \"Detect patterns and anomalies\", status: \"pending\", priority: \"medium\"},\n  {id: \"visualization\", content: \"Create visualizations and reports\", status: \"pending\", priority: \"low\"},\n  {id: \"insights_synthesis\", content: \"Synthesize insights and recommendations\", status: \"pending\", priority: \"high\"}\n]);\n\n// 2. Data collection and preparation\nTask(\"Data Collector\", \\`\n  Collect and prepare data:\n  - Use batch Read operations for data files\n  - Clean and structure data\n  - Store prepared datasets in Memory\n\\`);\n\n// 3. Parallel analysis agents\nTask(\"Statistical Analyst\", \"Perform statistical analysis on prepared data\");\nTask(\"Pattern Detection Specialist\", \"Detect patterns, trends, and anomalies\");\nTask(\"Visualization Specialist\", \"Create charts, graphs, and dashboards\");\n\n// 4. Insights synthesis\nTask(\"Analysis Synthesizer\", \\`\n  Synthesize analysis results:\n  - Retrieve all analysis results from Memory\n  - Combine statistical findings with pattern detection\n  - Generate comprehensive insights and recommendations\n\\`);\n\\`\\`\\`\n\n## Performance Optimization Guidelines\n\n### Efficient Task Distribution\n- Break down complex tasks into independent subtasks\n- Use TodoWrite to define clear dependencies\n- Launch parallel agents only for truly independent work\n- Coordinate through Memory rather than sequential communication\n\n### Memory Usage Optimization\n- Use structured keys for easy retrieval\n- Store intermediate results for reuse across agents\n- Clean up memory after task completion\n- Use namespacing for complex operations\n\n### Batch Operation Efficiency\n- Group similar file operations together\n- Use parallel Read operations for multiple files\n- Batch search operations with similar patterns\n- Coordinate file modifications to avoid conflicts\n\n### Resource Management\n- Monitor system resources during execution\n- Adjust agent count based on available resources\n- Use appropriate coordination modes for task complexity\n- Implement graceful degradation for resource constraints\n\n## Error Handling and Recovery\n\n### Robust Task Planning\n\\`\\`\\`javascript\nTodoWrite([\n  {id: \"main_task\", content: \"Primary objective\", status: \"pending\", priority: \"high\"},\n  {id: \"validation_task\", content: \"Validate results\", status: \"pending\", priority: \"high\"},\n  {id: \"error_recovery\", content: \"Handle errors and recovery\", status: \"pending\", priority: \"medium\"},\n  {id: \"rollback_plan\", content: \"Rollback procedure if needed\", status: \"pending\", priority: \"low\"}\n]);\n\\`\\`\\`\n\n### Error State Management\n\\`\\`\\`javascript\n// Store error states for debugging and recovery\nMemory.store(\"error_state\", {\n  task_id: \"failed_task\",\n  error_type: \"api_timeout\",\n  error_message: \"Connection timeout after 30 seconds\",\n  recovery_options: [\"retry_with_backoff\", \"use_alternative_api\", \"manual_intervention\"],\n  timestamp: Date.now()\n});\n\\`\\`\\`\n\n### Graceful Degradation\n- Implement fallback strategies for critical operations\n- Use Memory to store partial results for recovery\n- Plan rollback procedures in TodoWrite tasks\n- Monitor agent health and implement recovery procedures\n\nThis guide provides the foundation for effective batch tool coordination in Claude-Flow swarm operations.\n`;\n\n  await fs.writeFile(path.join(batchToolsDir, 'batch-tools-guide.md'), batchToolsGuide);\n  console.log('  ✅ Created batch-tools-guide.md');\n}\n"],"names":["createBatchToolsGuide","fs","path","batchToolsDir","batchToolsGuide","writeFile","join","console","log"],"mappings":"AACA,OAAO,eAAeA;IACpB,MAAMC,KAAK,MAAM,MAAM,CAAC;IACxB,MAAMC,OAAO,MAAM,MAAM,CAAC;IAE1B,MAAMC,gBAAgB;IAEtB,MAAMC,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyX3B,CAAC;IAEC,MAAMH,GAAGI,SAAS,CAACH,KAAKI,IAAI,CAACH,eAAe,yBAAyBC;IACrEG,QAAQC,GAAG,CAAC;AACd"}