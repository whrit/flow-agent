{"version":3,"sources":["../../../../src/cli/init/swarm-commands.ts"],"sourcesContent":["// init/swarm-commands.ts - Swarm command documentation creation\nexport async function createSwarmCommands(): Promise<void> {\n  const fs = await import('fs/promises');\n  const path = await import('path');\n\n  const swarmDir = '.claude/commands/swarm';\n\n  // Individual strategy documentation\n  const swarmCommands = {\n    'research.md': createResearchCommand(),\n    'development.md': createDevelopmentCommand(),\n    'analysis.md': createAnalysisCommand(),\n    'testing.md': createTestingCommand(),\n    'optimization.md': createOptimizationCommand(),\n    'maintenance.md': createMaintenanceCommand(),\n    'examples.md': createSwarmExamples(),\n    'coordination-modes.md': createCoordinationModes(),\n    'best-practices.md': createBestPractices(),\n    'task-tracking.md': createTaskTracking(),\n  };\n\n  // Write swarm command documentation\n  for (const [filename, content] of Object.entries(swarmCommands)) {\n    await fs.writeFile(path.join(swarmDir, filename), content);\n    console.log(`  ✅ Created ${filename}`);\n  }\n}\n\nfunction createResearchCommand(): string {\n  return `# Research Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"Research objective\" --strategy research --mode distributed --parallel\n\\`\\`\\`\n\n## Description\nMulti-agent research coordination with distributed intelligence gathering using batch tools.\n\n## Strategy Features\n- **Parallel Web Search**: Multiple agents search different sources simultaneously\n- **Source Credibility Analysis**: Automated fact-checking and source validation\n- **Knowledge Synthesis**: AI agents combine findings from multiple sources\n- **Report Generation**: Structured output with citations and references\n\n## Batch Tool Integration\n- **TodoWrite**: Creates research task breakdown (sources, topics, validation)\n- **Task Tool**: Launches parallel research agents for different domains\n- **Memory Tool**: Stores findings for cross-agent knowledge sharing\n- **WebSearch/WebFetch**: Batch web operations for comprehensive coverage\n\n## Best Practices\n- Use distributed mode for complex, multi-domain research\n- Enable parallel execution with \\`--parallel\\` for faster results\n- Set appropriate timeout with \\`--timeout\\` for comprehensive research\n- Use \\`--monitor\\` for real-time progress tracking\n- Increase agent count with \\`--max-agents\\` for broad topics\n\n## Example Workflow\n1. **Initialize**: TodoWrite creates research plan with subtopics\n2. **Search**: Task launches agents for parallel domain research\n3. **Validate**: Cross-reference findings using Memory coordination\n4. **Synthesize**: Combine results into comprehensive report\n5. **Output**: Generate formatted report with citations\n\n## Output Formats\n- \\`--output json\\`: Structured data with metadata\n- \\`--output sqlite\\`: Queryable database format\n- \\`--output html\\`: Human-readable report with links\n`;\n}\n\nfunction createDevelopmentCommand(): string {\n  return `# Development Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"Build application\" --strategy development --mode hierarchical --parallel\n\\`\\`\\`\n\n## Description\nCoordinated software development with specialized agents using batch operations.\n\n## Strategy Features\n- **Architecture Design**: System planning and component specification\n- **Parallel Implementation**: Multiple agents work on different modules\n- **Code Integration**: Coordinated merge and integration processes\n- **Testing & Validation**: Automated testing across all components\n\n## Batch Tool Integration\n- **TodoWrite**: Creates development phases and component breakdown\n- **Task Tool**: Launches specialized development agents (frontend, backend, database)\n- **Read/Write/Edit**: Batch file operations for coordinated code generation\n- **Bash Tool**: Automated build, test, and deployment operations\n- **Memory Tool**: Shares architecture decisions and component interfaces\n\n## Best Practices\n- Use hierarchical mode for organized, structured development\n- Enable parallel execution for independent modules/components\n- Set higher agent count (\\`--max-agents 8+\\`) for large projects\n- Monitor progress with \\`--monitor\\` for real-time updates\n- Use \\`--output sqlite\\` for detailed development metrics\n\n## Example Workflow\n1. **Planning**: TodoWrite creates development roadmap\n2. **Architecture**: Lead agent designs system architecture\n3. **Implementation**: Task launches parallel development agents\n4. **Integration**: Memory coordinates interface contracts\n5. **Testing**: Batch testing across all components\n6. **Deployment**: Automated deployment pipeline\n\n## Coordination Patterns\n- **Frontend Team**: React/Vue components, styling, UX\n- **Backend Team**: APIs, services, business logic\n- **Database Team**: Schema, queries, optimization\n- **DevOps Team**: CI/CD, infrastructure, monitoring\n`;\n}\n\nfunction createAnalysisCommand(): string {\n  return `# Analysis Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"Analyze data\" --strategy analysis --parallel --max-agents 10\n\\`\\`\\`\n\n## Description\nData analysis and insights generation with coordinated batch processing.\n\n## Strategy Features\n- **Data Collection**: Automated data gathering from multiple sources\n- **Statistical Analysis**: Parallel statistical computations\n- **Pattern Recognition**: AI-powered pattern and anomaly detection\n- **Visualization**: Automated chart and dashboard generation\n\n## Batch Tool Integration\n- **TodoWrite**: Creates analysis phases (collection, processing, visualization)\n- **Task Tool**: Launches specialized analysis agents for different data types\n- **Read Tool**: Batch file reading for large datasets\n- **Memory Tool**: Stores intermediate results and discovered patterns\n- **Bash Tool**: Runs analysis scripts and data processing pipelines\n\n## Best Practices\n- Use mesh mode for peer-to-peer data sharing and validation\n- Enable parallel execution for large datasets\n- Increase agent count for complex, multi-dimensional analysis\n- Use \\`--monitor\\` for long-running analysis tasks\n- Choose appropriate output format (\\`json\\`, \\`csv\\`, \\`sqlite\\`)\n\n## Example Workflow\n1. **Data Collection**: TodoWrite defines data sources and collection strategy\n2. **Preprocessing**: Task launches data cleaning and preparation agents\n3. **Analysis**: Parallel statistical and ML analysis across data segments\n4. **Pattern Discovery**: Memory coordinates pattern sharing between agents\n5. **Visualization**: Generate charts, dashboards, and reports\n6. **Insights**: Synthesize findings into actionable recommendations\n\n## Analysis Types\n- **Statistical Analysis**: Descriptive and inferential statistics\n- **Time Series Analysis**: Trend analysis and forecasting\n- **Machine Learning**: Classification, clustering, regression\n- **Text Analysis**: NLP, sentiment analysis, topic modeling\n- **Performance Analysis**: System metrics and optimization\n`;\n}\n\nfunction createTestingCommand(): string {\n  return `# Testing Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"Test application\" --strategy testing --mode mesh --parallel\n\\`\\`\\`\n\n## Description\nComprehensive testing coordination with distributed validation and batch operations.\n\n## Strategy Features\n- **Test Planning**: Automated test strategy and case generation\n- **Parallel Execution**: Simultaneous test execution across multiple environments\n- **Coverage Analysis**: Comprehensive code and feature coverage reporting\n- **Performance Testing**: Load, stress, and performance validation\n\n## Batch Tool Integration\n- **TodoWrite**: Creates comprehensive test matrix and execution plan\n- **Task Tool**: Launches parallel testing agents for different test types\n- **Bash Tool**: Executes test suites, builds, and deployment verification\n- **Read/Grep**: Batch code analysis for test coverage gaps\n- **Memory Tool**: Shares test results and failure patterns\n\n## Best Practices\n- Use mesh mode for distributed, peer-to-peer test coordination\n- Enable parallel execution for comprehensive test coverage\n- Set appropriate timeout for long-running integration tests\n- Monitor results with \\`--monitor\\` for real-time test feedback\n- Use \\`--output sqlite\\` for detailed test analytics\n\n## Example Workflow\n1. **Test Planning**: TodoWrite creates test matrix (unit, integration, e2e)\n2. **Environment Setup**: Task prepares multiple test environments\n3. **Parallel Execution**: Simultaneous test execution across environments\n4. **Result Collection**: Memory aggregates test results and metrics\n5. **Analysis**: Identify failures, performance issues, coverage gaps\n6. **Reporting**: Generate comprehensive test reports and recommendations\n\n## Test Types\n- **Unit Tests**: Component-level testing with high coverage\n- **Integration Tests**: Service and API integration validation\n- **End-to-End Tests**: Full user workflow testing\n- **Performance Tests**: Load, stress, and scalability testing\n- **Security Tests**: Vulnerability scanning and penetration testing\n- **Accessibility Tests**: WCAG compliance and usability testing\n`;\n}\n\nfunction createOptimizationCommand(): string {\n  return `# Optimization Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"Optimize performance\" --strategy optimization --mode hybrid --parallel\n\\`\\`\\`\n\n## Description\nPerformance optimization with coordinated analysis and improvements using batch operations.\n\n## Strategy Features\n- **Performance Profiling**: Comprehensive system and application profiling\n- **Bottleneck Identification**: Automated detection of performance constraints\n- **Optimization Implementation**: Coordinated performance improvements\n- **Validation & Testing**: Performance regression testing and validation\n\n## Batch Tool Integration\n- **TodoWrite**: Creates optimization roadmap with priorities and dependencies\n- **Task Tool**: Launches specialized optimization agents (frontend, backend, database)\n- **Bash Tool**: Runs performance tests, profiling, and optimization scripts\n- **Read/Edit**: Batch code analysis and optimization implementation\n- **Memory Tool**: Shares optimization strategies and performance metrics\n\n## Best Practices\n- Use hybrid mode for adaptive optimization strategies\n- Enable monitoring with \\`--monitor\\` for real-time performance metrics\n- Use parallel execution for multiple optimization paths\n- Set adequate timeout for thorough performance analysis\n- Use \\`--output sqlite\\` for detailed performance tracking\n\n## Example Workflow\n1. **Profiling**: TodoWrite defines profiling strategy and target metrics\n2. **Analysis**: Task launches performance analysis agents\n3. **Optimization**: Parallel implementation of performance improvements\n4. **Validation**: Memory coordinates before/after performance comparisons\n5. **Regression Testing**: Ensure optimizations don't break functionality\n6. **Monitoring**: Set up ongoing performance monitoring\n\n## Optimization Areas\n- **Database Optimization**: Query optimization, indexing, caching\n- **Frontend Performance**: Bundle optimization, lazy loading, CDN\n- **Backend Performance**: Algorithm optimization, caching, scaling\n- **Infrastructure**: Server optimization, load balancing, resource allocation\n- **Network Performance**: CDN, compression, request optimization\n`;\n}\n\nfunction createMaintenanceCommand(): string {\n  return `# Maintenance Swarm Command\n\n## Usage\n\\`\\`\\`bash\nclaude-flow swarm \"System maintenance\" --strategy maintenance --mode centralized --monitor\n\\`\\`\\`\n\n## Description\nSystem maintenance and updates with coordinated agents and batch operations.\n\n## Strategy Features\n- **System Health Checks**: Comprehensive system monitoring and diagnostics\n- **Update Planning**: Coordinated dependency and system updates\n- **Implementation**: Safe, coordinated maintenance operations\n- **Verification & Rollback**: Automated verification and rollback capabilities\n\n## Batch Tool Integration\n- **TodoWrite**: Creates maintenance checklist with dependencies and rollback plans\n- **Task Tool**: Launches maintenance agents for different system components\n- **Bash Tool**: Executes maintenance scripts, updates, and system operations\n- **Read Tool**: Batch configuration and log file analysis\n- **Memory Tool**: Tracks maintenance history and system state changes\n\n## Best Practices\n- Use centralized mode for controlled, coordinated maintenance\n- Enable monitoring with \\`--monitor\\` for safety and progress tracking\n- Set conservative timeouts for safe maintenance operations\n- Use \\`--output json\\` for detailed audit trails\n- Plan rollback procedures before starting maintenance\n\n## Example Workflow\n1. **Health Assessment**: TodoWrite creates system health checklist\n2. **Backup Creation**: Task creates comprehensive system backups\n3. **Maintenance Execution**: Coordinated maintenance operations\n4. **Verification**: Memory tracks changes and validates system state\n5. **Rollback (if needed)**: Automated rollback to previous state\n6. **Documentation**: Update maintenance logs and documentation\n\n## Maintenance Types\n- **Dependency Updates**: Package updates, security patches\n- **System Updates**: OS updates, security configurations\n- **Database Maintenance**: Index rebuilding, cleanup, optimization\n- **Log Rotation**: Log cleanup and archival\n- **Security Audits**: Vulnerability scanning and remediation\n- **Performance Tuning**: System optimization and resource cleanup\n`;\n}\n\nfunction createSwarmExamples(): string {\n  return `# Claude-Flow Swarm Examples with Batch Tools\n\n## Quick Start Commands with Batch Operations\n\n### Research Tasks with Parallel Execution\n\\`\\`\\`bash\n# Distributed research with parallel agents\nclaude-flow swarm \"Research modern web frameworks\" --strategy research --mode distributed --parallel --max-agents 6\n\n# Market analysis with coordinated batch operations\nclaude-flow swarm \"Analyze AI market trends\" --strategy research --parallel --monitor --timeout 120\n\\`\\`\\`\n\n### Development Tasks with Batch Coordination\n\\`\\`\\`bash\n# Hierarchical development with batch file operations\nclaude-flow swarm \"Build microservice API\" --strategy development --mode hierarchical --parallel --max-agents 8\n\n# React dashboard with coordinated component development\nclaude-flow swarm \"Create React dashboard\" --strategy development --parallel --monitor --output sqlite\n\\`\\`\\`\n\n### Analysis Tasks with Batch Processing\n\\`\\`\\`bash\n# Mesh-coordinated data analysis\nclaude-flow swarm \"Analyze user behavior data\" --strategy analysis --mode mesh --parallel --max-agents 10\n\n# Performance analysis with monitoring\nclaude-flow swarm \"Performance analysis of application\" --strategy analysis --monitor --output csv\n\\`\\`\\`\n\n### Testing Tasks with Parallel Validation\n\\`\\`\\`bash\n# Comprehensive parallel testing\nclaude-flow swarm \"Comprehensive testing suite\" --strategy testing --parallel --max-agents 12\n\n# Security testing with distributed coordination\nclaude-flow swarm \"Security testing analysis\" --strategy testing --mode distributed --monitor\n\\`\\`\\`\n\n### Optimization Tasks with Hybrid Coordination\n\\`\\`\\`bash\n# Database optimization with hybrid approach\nclaude-flow swarm \"Optimize database queries\" --strategy optimization --mode hybrid --parallel\n\n# Frontend optimization with batch processing\nclaude-flow swarm \"Frontend performance optimization\" --strategy optimization --monitor --max-agents 6\n\\`\\`\\`\n\n### Maintenance Tasks with Centralized Control\n\\`\\`\\`bash\n# Dependency updates with centralized coordination\nclaude-flow swarm \"Update dependencies safely\" --strategy maintenance --mode centralized --monitor\n\n# System health checks with batch operations\nclaude-flow swarm \"System health check\" --strategy maintenance --parallel --output json\n\\`\\`\\`\n\nSee individual strategy files for detailed documentation and best practices.\n`;\n}\n\nfunction createCoordinationModes(): string {\n  return `# Coordination Modes for Swarm Operations\n\n## Centralized Mode\n**Best for**: Simple tasks, controlled operations, safety-critical maintenance\n\n### Characteristics\n- Single coordinator manages all agents\n- Sequential task assignment and monitoring\n- Centralized decision making and error handling\n- Clear hierarchy and command structure\n\n### Batch Tool Usage\n- TodoWrite creates master task list\n- Coordinator assigns tasks to agents sequentially\n- Memory stores central state and decisions\n- All agents report back to central coordinator\n\n### Use Cases\n- System maintenance and updates\n- Critical production deployments\n- Security-sensitive operations\n- Small-scale, well-defined tasks\n\n## Distributed Mode\n**Best for**: Complex, parallelizable tasks, research, large-scale analysis\n\n### Characteristics\n- Multiple coordinators manage agent groups\n- Parallel task execution across coordinators\n- Distributed decision making with coordination\n- Fault tolerance through redundancy\n\n### Batch Tool Usage\n- TodoWrite creates distributed task segments\n- Multiple Task launches for parallel agent groups\n- Memory enables inter-coordinator communication\n- Shared state through distributed memory\n\n### Use Cases\n- Large-scale research projects\n- Distributed data analysis\n- Multi-domain problem solving\n- High-throughput operations\n\n## Hierarchical Mode\n**Best for**: Structured development, organized workflows, complex projects\n\n### Characteristics\n- Tree-like organization with team leads\n- Clear reporting structure and delegation\n- Specialized teams for different components\n- Organized communication channels\n\n### Batch Tool Usage\n- TodoWrite creates hierarchical task breakdown\n- Task creates team leads, then team members\n- Memory maintains hierarchy and team boundaries\n- Structured reporting up the hierarchy\n\n### Use Cases\n- Software development projects\n- Structured analysis workflows\n- Large team coordination\n- Multi-phase project execution\n\n## Mesh Mode\n**Best for**: Dynamic tasks, peer-to-peer collaboration, adaptive workflows\n\n### Characteristics\n- Peer-to-peer agent communication\n- Self-organizing task distribution\n- Dynamic adaptation to changing requirements\n- Emergent coordination patterns\n\n### Batch Tool Usage\n- TodoWrite creates shared task pool\n- Agents claim tasks dynamically from pool\n- Memory enables peer discovery and communication\n- Adaptive coordination through shared state\n\n### Use Cases\n- Dynamic problem solving\n- Adaptive testing strategies\n- Exploratory research\n- Flexible workflow execution\n\n## Hybrid Mode\n**Best for**: Complex workflows, adaptive requirements, multi-phase operations\n\n### Characteristics\n- Combines multiple coordination patterns\n- Adaptive mode switching based on task phase\n- Flexible coordination based on requirements\n- Optimal efficiency for complex operations\n\n### Batch Tool Usage\n- TodoWrite creates phase-based coordination plan\n- Task adapts agent launching based on current phase\n- Memory tracks coordination mode changes\n- Dynamic coordination pattern selection\n\n### Use Cases\n- Complex multi-phase projects\n- Adaptive optimization workflows\n- Large-scale system migrations\n- Research and development projects\n\n## Choosing the Right Mode\n\n### Simple Tasks → Centralized\n- Single objective, clear requirements\n- Safety and control are priorities\n- Small team or simple workflow\n\n### Complex Tasks → Distributed/Hierarchical\n- Multiple objectives or domains\n- Parallel execution beneficial\n- Large team or complex workflow\n\n### Dynamic Tasks → Mesh/Hybrid\n- Changing requirements\n- Adaptive coordination needed\n- Emergent or exploratory work\n\n### Multi-Phase Tasks → Hybrid\n- Different phases need different coordination\n- Changing complexity over time\n- Need for adaptive optimization\n`;\n}\n\nfunction createBestPractices(): string {\n  return `# Swarm Operation Best Practices\n\n## Task Planning and Coordination\n\n### Use TodoWrite Effectively\n- Create comprehensive task breakdowns before starting\n- Assign priorities based on dependencies and importance\n- Include rollback and error handling tasks\n- Update task status in real-time for progress tracking\n\n### Optimize Agent Coordination\n- Use appropriate coordination mode for task complexity\n- Balance agent count with task complexity\n- Enable monitoring for long-running operations\n- Set realistic timeouts based on task scope\n\n## Batch Tool Optimization\n\n### Parallel Execution\n- Identify independent tasks for parallel execution\n- Use batch file operations for I/O-intensive tasks\n- Coordinate through Memory for shared state\n- Avoid sequential dependencies where possible\n\n### Memory Management\n- Store intermediate results for agent coordination\n- Use descriptive keys for easy retrieval\n- Clean up memory after task completion\n- Share patterns and insights across agents\n\n### Error Handling\n- Plan rollback strategies in advance\n- Use TodoWrite to track error recovery tasks\n- Store error states in Memory for debugging\n- Implement graceful degradation for partial failures\n\n## Performance Optimization\n\n### Resource Management\n- Monitor system resources during execution\n- Adjust agent count based on available resources\n- Use appropriate output formats for efficiency\n- Implement resource pooling for repeated operations\n\n### Scaling Strategies\n- Start with fewer agents and scale up as needed\n- Use distributed mode for large-scale operations\n- Implement load balancing across agents\n- Monitor performance metrics in real-time\n\n## Monitoring and Debugging\n\n### Real-Time Monitoring\n- Use --monitor flag for long-running operations\n- Track progress through TodoRead checks\n- Monitor resource usage and performance\n- Set up alerts for critical failures\n\n### Output Management\n- Choose appropriate output formats for use case\n- Use structured formats (JSON, SQLite) for analysis\n- Generate human-readable reports for stakeholders\n- Implement proper logging and audit trails\n\n## Security and Safety\n\n### Safe Operations\n- Implement proper validation and verification\n- Use centralized mode for safety-critical operations\n- Plan and test rollback procedures\n- Implement proper authentication and authorization\n\n### Data Protection\n- Secure sensitive data in Memory storage\n- Implement proper access controls\n- Use encryption for sensitive operations\n- Follow data retention and cleanup policies\n\n## Common Patterns\n\n### Research and Analysis\n1. TodoWrite creates research plan\n2. Task launches parallel research agents\n3. Memory stores and cross-references findings\n4. Batch operations generate comprehensive reports\n\n### Development and Implementation\n1. TodoWrite creates development roadmap\n2. Hierarchical coordination for organized development\n3. Parallel implementation with Memory coordination\n4. Integrated testing and validation\n\n### Testing and Validation\n1. TodoWrite creates comprehensive test matrix\n2. Mesh coordination for distributed testing\n3. Parallel test execution across environments\n4. Memory aggregates results and identifies patterns\n\n### Optimization and Performance\n1. TodoWrite defines optimization strategy\n2. Hybrid coordination adapts to optimization phases\n3. Parallel profiling and optimization implementation\n4. Memory tracks performance improvements\n\n## Troubleshooting\n\n### Common Issues\n- Agent coordination failures: Check Memory state and connectivity\n- Performance bottlenecks: Reduce agent count or adjust coordination mode\n- Task failures: Review TodoWrite breakdown and dependencies\n- Resource exhaustion: Monitor system resources and scale appropriately\n\n### Debugging Strategies\n- Use dry-run mode to validate configuration\n- Enable detailed monitoring and logging\n- Check Memory state for coordination issues\n- Review task dependencies and sequencing\n\n### Recovery Procedures\n- Implement proper error handling in TodoWrite tasks\n- Use Memory to store recovery state\n- Plan rollback procedures for critical operations\n- Test recovery procedures in safe environments\n`;\n}\n\nfunction createTaskTracking(): string {\n  return `# Task Tracking Format for Swarm Operations\n\n## Overview\nSwarm operations use a standardized task tracking format to provide clear visibility into progress, priorities, and dependencies across all agents.\n\n## Progress Overview Display\n\nThe swarm coordinator will display task progress using this format:\n\n\\`\\`\\`\n📊 Progress Overview\n   ├── Total Tasks: 12\n   ├── ✅ Completed: 8 (67%)\n   ├── 🔄 In Progress: 2 (17%)\n   ├── ⭕ Todo: 1 (8%)\n   └── ❌ Blocked: 1 (8%)\n\\`\\`\\`\n\n## Task Lists by Status\n\n### 📋 Todo Tasks\nTasks waiting to be started:\n\\`\\`\\`\n📋 Todo (1)\n   └── 🔴 001: Set up authentication system [HIGH] ▶\n\\`\\`\\`\n\n### 🔄 In Progress Tasks\nTasks currently being worked on:\n\\`\\`\\`\n🔄 In progress (2)\n   ├── 🟡 002: Implement user dashboard ↳ 1 deps ▶\n   └── 🔴 003: Add payment integration [CRITICAL] ▶\n\\`\\`\\`\n\n### ✅ Completed Tasks\nTasks that have been finished:\n\\`\\`\\`\n✅ Completed (8)\n   ├── ✅ 004: Design wireframes\n   ├── ✅ 005: Set up database schema\n   ├── ✅ 006: Create API endpoints\n   └── ... (more completed tasks)\n\\`\\`\\`\n\n### ❌ Blocked Tasks\nTasks that cannot proceed due to dependencies:\n\\`\\`\\`\n❌ Blocked (1)\n   └── 🔴 007: Deploy to production ↳ 3 deps [BLOCKED]\n\\`\\`\\`\n\n## Priority Indicators\n\nTasks use color-coded priority indicators:\n- 🔴 **HIGH/CRITICAL**: Urgent tasks requiring immediate attention\n- 🟡 **MEDIUM**: Important tasks that should be addressed soon\n- 🟢 **LOW**: Tasks that can be deferred if needed\n\n## Special Notations\n\n### Dependencies\n- \\`↳ X deps\\`: Indicates the task depends on X other tasks\n- Tasks with dependencies show the count after the task description\n\n### Action Indicators\n- \\`▶\\`: Indicates an actionable task that can be started\n- \\`[BLOCKED]\\`: Task cannot proceed until dependencies are resolved\n- \\`[PRIORITY]\\`: Explicit priority level (HIGH, CRITICAL, etc.)\n\n## Usage in Swarm Operations\n\n### TodoWrite Integration\nWhen creating tasks with TodoWrite, include priority and dependency information:\n\\`\\`\\`javascript\nTodoWrite([\n  {\n    id: \"auth_001\",\n    content: \"Set up authentication system\",\n    status: \"pending\",\n    priority: \"high\",\n    dependencies: []\n  },\n  {\n    id: \"dashboard_002\",\n    content: \"Implement user dashboard\",\n    status: \"pending\",\n    priority: \"medium\",\n    dependencies: [\"auth_001\"]\n  },\n  {\n    id: \"payment_003\",\n    content: \"Add payment integration\",\n    status: \"pending\",\n    priority: \"critical\",\n    dependencies: []\n  }\n]);\n\\`\\`\\`\n\n### Real-time Updates\nThe swarm coordinator will:\n1. Update task statuses as agents progress\n2. Recalculate percentages automatically\n3. Move tasks between categories based on status\n4. Show dependency resolution in real-time\n\n## Best Practices\n\n### Task Organization\n- Group related tasks together\n- Use clear, actionable task descriptions\n- Set realistic priorities based on business value\n- Define dependencies explicitly\n\n### Progress Monitoring\n- Check progress overview regularly\n- Focus on unblocking blocked tasks\n- Prioritize high/critical items\n- Balance workload across agents\n\n### Status Management\n- Update task status immediately when starting work\n- Mark tasks complete as soon as finished\n- Document blockers when they occur\n- Use Memory to store progress details\n\n## Example Swarm Progress Display\n\n\\`\\`\\`\n🐝 Swarm: Build E-commerce Platform\n📊 Progress Overview\n   ├── Total Tasks: 25\n   ├── ✅ Completed: 15 (60%)\n   ├── 🔄 In Progress: 5 (20%)\n   ├── ⭕ Todo: 4 (16%)\n   └── ❌ Blocked: 1 (4%)\n\n📋 Todo (4)\n   ├── 🔴 008: Implement cart functionality [HIGH] ▶\n   ├── 🟡 009: Add product search ▶\n   ├── 🟡 010: Create order history page ▶\n   └── 🟢 011: Add social sharing buttons [LOW] ▶\n\n🔄 In progress (5)\n   ├── 🔴 012: Payment gateway integration [CRITICAL] \n   ├── 🔴 013: User authentication system [HIGH] \n   ├── 🟡 014: Product catalog implementation ↳ 2 deps \n   ├── 🟡 015: Shopping cart API endpoints \n   └── 🟢 016: Email notification service \n\n✅ Completed (15)\n   ├── ✅ 001: Project setup and configuration\n   ├── ✅ 002: Database schema design\n   ├── ✅ 003: API framework setup\n   └── ... (12 more completed tasks)\n\n❌ Blocked (1)\n   └── 🔴 017: Deploy to production ↳ 5 deps [BLOCKED]\n\\`\\`\\`\n\nThis format ensures all swarm participants have clear visibility into:\n- Overall progress percentage\n- Task priorities and urgencies\n- Dependencies and blockers\n- What can be worked on immediately (▶ indicators)\n- Distribution of work across different states\n\nUse this format consistently across all swarm operations for maximum clarity and coordination efficiency.\n`;\n}\n"],"names":["createSwarmCommands","fs","path","swarmDir","swarmCommands","createResearchCommand","createDevelopmentCommand","createAnalysisCommand","createTestingCommand","createOptimizationCommand","createMaintenanceCommand","createSwarmExamples","createCoordinationModes","createBestPractices","createTaskTracking","filename","content","Object","entries","writeFile","join","console","log"],"mappings":"AACA,OAAO,eAAeA;IACpB,MAAMC,KAAK,MAAM,MAAM,CAAC;IACxB,MAAMC,OAAO,MAAM,MAAM,CAAC;IAE1B,MAAMC,WAAW;IAGjB,MAAMC,gBAAgB;QACpB,eAAeC;QACf,kBAAkBC;QAClB,eAAeC;QACf,cAAcC;QACd,mBAAmBC;QACnB,kBAAkBC;QAClB,eAAeC;QACf,yBAAyBC;QACzB,qBAAqBC;QACrB,oBAAoBC;IACtB;IAGA,KAAK,MAAM,CAACC,UAAUC,QAAQ,IAAIC,OAAOC,OAAO,CAACd,eAAgB;QAC/D,MAAMH,GAAGkB,SAAS,CAACjB,KAAKkB,IAAI,CAACjB,UAAUY,WAAWC;QAClDK,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEP,UAAU;IACvC;AACF;AAEA,SAASV;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyKV,CAAC;AACD"}