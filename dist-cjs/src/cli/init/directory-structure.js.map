{"version":3,"sources":["../../../../src/cli/init/directory-structure.ts"],"sourcesContent":["// init/directory-structure.ts - Directory structure creation\nexport async function createDirectoryStructure(): Promise<void> {\n  const fs = await import('fs/promises');\n  const path = await import('path');\n\n  // Define directory structure\n  const directories = [\n    '.claude',\n    '.claude/commands',\n    '.claude/commands/swarm',\n    '.claude/commands/sparc',\n    '.claude/logs',\n    '.claude/memory',\n    '.claude/configs',\n    'memory',\n    'memory/agents',\n    'memory/sessions',\n    'coordination',\n    'coordination/memory_bank',\n    'coordination/subtasks',\n    'coordination/orchestration',\n    'reports',\n  ];\n\n  // Create directories\n  for (const dir of directories) {\n    try {\n      await fs.mkdir(dir, { recursive: true });\n      console.log(`  ✅ Created ${dir}/ directory`);\n    } catch (error: unknown) {\n      if ((error as any).code !== 'EEXIST') {\n        throw error;\n      }\n    }\n  }\n\n  // Create README files for key directories\n  const readmeFiles = {\n    'memory/agents/README.md': createAgentsReadme(),\n    'memory/sessions/README.md': createSessionsReadme(),\n    'coordination/README.md': createCoordinationReadme(),\n    'reports/README.md': createReportsReadme(),\n  };\n\n  for (const [filePath, content] of Object.entries(readmeFiles)) {\n    await fs.writeFile(filePath, content);\n    console.log(`  ✅ Created ${filePath}`);\n  }\n\n  // Create initial persistence database\n  const initialData = {\n    agents: [],\n    tasks: [],\n    swarms: [],\n    lastUpdated: Date.now(),\n    version: '1.0.71',\n  };\n\n  await fs.writeFile('memory/claude-flow-data.json', JSON.stringify(initialData, null, 2));\n  console.log('  ✅ Created memory/claude-flow-data.json (persistence database)');\n}\n\nfunction createAgentsReadme(): string {\n  return `# Agents Directory\n\nThis directory stores persistent information about AI agents created and managed by Claude-Flow.\n\n## Structure\n- Each agent gets its own JSON file named by agent ID\n- Agent files contain configuration, state, and memory\n- Shared agent data is stored in agent-registry.json\n\n## Usage\nAgents are automatically managed by the Claude-Flow orchestration system. You can:\n- View agent status with \\`claude-flow agent list\\`\n- Create new agents with \\`claude-flow agent spawn <type>\\`\n- Configure agents with \\`claude-flow agent configure <id>\\`\n\n## Files\n- \\`agent-registry.json\\`: Central agent registry\n- \\`agent-<id>.json\\`: Individual agent data files\n- \\`templates/\\`: Agent configuration templates\n`;\n}\n\nfunction createSessionsReadme(): string {\n  return `# Sessions Directory\n\nThis directory stores information about Claude-Flow orchestration sessions.\n\n## Structure\n- Each session gets its own subdirectory\n- Session data includes tasks, coordination state, and results\n- Session logs are automatically rotated\n\n## Usage\nSessions are managed automatically during orchestration:\n- Start sessions with \\`claude-flow start\\`\n- Monitor sessions with \\`claude-flow status\\`\n- Review session history with \\`claude-flow session list\\`\n\n## Files\n- \\`session-<id>/\\`: Individual session directories\n- \\`active-sessions.json\\`: Currently active sessions\n- \\`session-history.json\\`: Historical session data\n`;\n}\n\nfunction createCoordinationReadme(): string {\n  return `# Coordination Directory\n\nThis directory manages task coordination and orchestration data.\n\n## Subdirectories\n- \\`memory_bank/\\`: Shared memory for agent coordination\n- \\`subtasks/\\`: Task breakdown and assignment data\n- \\`orchestration/\\`: High-level orchestration patterns\n\n## Usage\nCoordination data is used for:\n- Multi-agent task distribution\n- Progress tracking and monitoring\n- Resource allocation and balancing\n- Error recovery and failover\n\nAccess coordination data through the Claude-Flow API or CLI commands.\n`;\n}\n\nfunction createReportsReadme(): string {\n  return `# Reports Directory\n\nThis directory stores output reports from swarm operations and orchestration tasks.\n\n## Structure\n- Swarm reports are stored by operation ID\n- Reports include execution logs, results, and metrics\n- Multiple output formats supported (JSON, SQLite, CSV, HTML)\n\n## Usage\nReports are generated automatically by swarm operations:\n- View recent reports with \\`claude-flow swarm list\\`\n- Check specific reports with \\`claude-flow swarm status <id>\\`\n- Export reports in different formats using \\`--output\\` flags\n\n## File Types\n- \\`*.json\\`: Structured operation data\n- \\`*.sqlite\\`: Database format for complex queries\n- \\`*.csv\\`: Tabular data for analysis\n- \\`*.html\\`: Human-readable reports\n`;\n}\n"],"names":["createDirectoryStructure","fs","path","directories","dir","mkdir","recursive","console","log","error","code","readmeFiles","createAgentsReadme","createSessionsReadme","createCoordinationReadme","createReportsReadme","filePath","content","Object","entries","writeFile","initialData","agents","tasks","swarms","lastUpdated","Date","now","version","JSON","stringify"],"mappings":"AACA,OAAO,eAAeA;IACpB,MAAMC,KAAK,MAAM,MAAM,CAAC;IACxB,MAAMC,OAAO,MAAM,MAAM,CAAC;IAG1B,MAAMC,cAAc;QAClB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAGD,KAAK,MAAMC,OAAOD,YAAa;QAC7B,IAAI;YACF,MAAMF,GAAGI,KAAK,CAACD,KAAK;gBAAEE,WAAW;YAAK;YACtCC,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEJ,IAAI,WAAW,CAAC;QAC7C,EAAE,OAAOK,OAAgB;YACvB,IAAI,AAACA,MAAcC,IAAI,KAAK,UAAU;gBACpC,MAAMD;YACR;QACF;IACF;IAGA,MAAME,cAAc;QAClB,2BAA2BC;QAC3B,6BAA6BC;QAC7B,0BAA0BC;QAC1B,qBAAqBC;IACvB;IAEA,KAAK,MAAM,CAACC,UAAUC,QAAQ,IAAIC,OAAOC,OAAO,CAACR,aAAc;QAC7D,MAAMV,GAAGmB,SAAS,CAACJ,UAAUC;QAC7BV,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEQ,UAAU;IACvC;IAGA,MAAMK,cAAc;QAClBC,QAAQ,EAAE;QACVC,OAAO,EAAE;QACTC,QAAQ,EAAE;QACVC,aAAaC,KAAKC,GAAG;QACrBC,SAAS;IACX;IAEA,MAAM3B,GAAGmB,SAAS,CAAC,gCAAgCS,KAAKC,SAAS,CAACT,aAAa,MAAM;IACrFd,QAAQC,GAAG,CAAC;AACd;AAEA,SAASI;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;AAmBV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;AAmBV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;AAiBV,CAAC;AACD;AAEA,SAASC;IACP,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;AAoBV,CAAC;AACD"}