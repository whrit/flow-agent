{"version":3,"sources":["../../../src/cli/index.ts"],"sourcesContent":["#!/usr/bin/env -S deno run --allow-all\n/**\n * Claude-Flow CLI entry point\n * This redirects to simple-cli.ts for remote execution compatibility\n */\n\n// Import and run the simple CLI which doesn't have external dependencies\nimport './simple-cli.ts';\n// Spinner import removed - not available in current cliffy version\nimport { Command } from './commander-fix.js';\nimport chalk from 'chalk';\nimport { logger } from '../core/logger.js';\nimport { configManager } from '../core/config.js';\nimport { startCommand } from './commands/start.js';\nimport { agentCommand } from './commands/agent.js';\nimport { taskCommand } from './commands/task.js';\nimport { memoryCommand } from './commands/memory.js';\nimport { configCommand } from './commands/config.js';\nimport { statusCommand } from './commands/status.js';\nimport { monitorCommand } from './commands/monitor.js';\nimport { sessionCommand } from './commands/session.js';\nimport { workflowCommand } from './commands/workflow.js';\nimport { helpCommand } from './commands/help.js';\nimport { mcpCommand } from './commands/mcp.js';\nimport { formatError, displayBanner, displayVersion } from './formatter.js';\nimport { startREPL } from './repl.js';\nimport { CompletionGenerator } from './completion.js';\nimport { VERSION, BUILD_DATE } from '../core/version.js';\n\n// Main CLI command\nconst cli = new Command()\n  .name('claude-flow')\n  .version(VERSION)\n  .description('Claude-Flow: Advanced AI agent orchestration system for multi-agent coordination')\n  // .meta() commented out - not available\n  // .meta() commented out - not available\n  .option('-c, --config <path>', 'Path to configuration file', './claude-flow.config.json')\n  .option('-v, --verbose', 'Enable verbose logging')\n  .option('-q, --quiet', 'Suppress non-essential output')\n  .option('--log-level <level>', 'Set log level (debug, info, warn, error)', 'info')\n  .option('--no-color', 'Disable colored output')\n  .option('--json', 'Output in JSON format where applicable')\n  .option('--profile <profile>', 'Use named configuration profile')\n  .action(async (options: any) => {\n    // If no subcommand, show banner and start REPL\n    await setupLogging(options);\n\n    if (!options.quiet) {\n      displayBanner(VERSION);\n      console.log(chalk.gray('Type \"help\" for available commands or \"exit\" to quit.\\n'));\n    }\n\n    await startREPL(options);\n  });\n\n// Add subcommands\n// NOTE: Temporarily disabled due to Cliffy/Commander compatibility issues\n// These commands are created with Cliffy but being added to Commander\n// cli\n//   .addCommand(startCommand)\n//   .addCommand(agentCommand)\n//   .addCommand(taskCommand)\n//   .addCommand(memoryCommand)\n//   .addCommand(configCommand)\n//   .addCommand(statusCommand)\n//   .addCommand(monitorCommand)\n//   .addCommand(sessionCommand)\n//   .addCommand(workflowCommand)\n//   .addCommand(mcpCommand)\n//   .addCommand(helpCommand);\n\n// Add repl command\nconst replCommand = new Command('repl')\n  .description('Start interactive REPL mode with command completion')\n  .option('--no-banner', 'Skip welcome banner')\n  .option('--history-file <path>', 'Custom history file path')\n  .action(async (options: any) => {\n    await setupLogging(options);\n    if (options.banner !== false) {\n      displayBanner(VERSION);\n    }\n    await startREPL(options);\n  });\ncli.addCommand(replCommand);\n\n// Add version command\nconst versionCommand = new Command('version')\n  .description('Show detailed version information')\n  .option('--short', 'Show version number only')\n  .action(async (options: any) => {\n    if (options.short) {\n      console.log(VERSION);\n    } else {\n      displayVersion(VERSION, BUILD_DATE);\n    }\n  });\ncli.addCommand(versionCommand);\n\n// Add completion command\nconst completionCommand = new Command('completion')\n  .description('Generate shell completion scripts')\n  .argument('[shell]', 'Shell type')\n  .option('--install', 'Install completion script automatically')\n  .action(async (shell: any, options: any) => {\n    const generator = new CompletionGenerator();\n    await generator.generate(shell || 'detect', options.install === true);\n  });\ncli.addCommand(completionCommand);\n\n// Global error handler\nasync function handleError(error: unknown, options?: any): Promise<void> {\n  const formatted = formatError(error);\n\n  if (options?.json) {\n    console.error(\n      JSON.stringify({\n        error: true,\n        message: formatted,\n        timestamp: new Date().toISOString(),\n      }),\n    );\n  } else {\n    console.error(chalk.red(chalk.bold('âœ— Error:')), formatted);\n  }\n\n  // Show stack trace in debug mode or verbose\n  if (process.env['CLAUDE_FLOW_DEBUG'] === 'true' || options?.verbose) {\n    console.error(chalk.gray('\\nStack trace:'));\n    console.error(error);\n  }\n\n  // Suggest helpful actions\n  if (!options?.quiet) {\n    console.error(chalk.gray('\\nTry running with --verbose for more details'));\n    console.error(chalk.gray('Or use \"claude-flow help\" to see available commands'));\n  }\n\n  process.exit(1);\n}\n\n// Setup logging and configuration based on CLI options\nasync function setupLogging(options: any): Promise<void> {\n  // Determine log level\n  let logLevel = options.logLevel;\n  if (options.verbose) logLevel = 'debug';\n  if (options.quiet) logLevel = 'warn';\n\n  // Configure logger\n  await logger.configure({\n    level: logLevel as any,\n    format: options.json ? 'json' : 'text',\n    destination: 'console',\n  });\n\n  // Load configuration\n  try {\n    if (options.config) {\n      await configManager.load(options.config);\n    } else {\n      // Try to load default config file if it exists\n      try {\n        await configManager.load('./claude-flow.config.json');\n      } catch {\n        // Use default config if no file found\n        configManager.loadDefault();\n      }\n    }\n\n    // Apply profile if specified\n    if (options.profile) {\n      await configManager.applyProfile(options.profile);\n    }\n  } catch (error) {\n    logger.warn('Failed to load configuration:', (error as Error).message);\n    configManager.loadDefault();\n  }\n}\n\n// Signal handlers for graceful shutdown\nfunction setupSignalHandlers(): void {\n  const gracefulShutdown = () => {\n    console.log('\\n' + chalk.gray('Gracefully shutting down...'));\n    process.exit(0);\n  };\n\n  Deno.addSignalListener('SIGINT', gracefulShutdown);\n  Deno.addSignalListener('SIGTERM', gracefulShutdown);\n}\n\n// Main entry point\nif (false) {\n  // import.meta.main not available\n  let globalOptions: any = {};\n\n  try {\n    // Setup signal handlers\n    setupSignalHandlers();\n\n    // Pre-parse global options for error handling\n    const args = Deno.args;\n    globalOptions = {\n      verbose: args.includes('-v') || args.includes('--verbose'),\n      quiet: args.includes('-q') || args.includes('--quiet'),\n      json: args.includes('--json'),\n      noColor: args.includes('--no-color'),\n    };\n\n    // Configure colors based on options\n    if (globalOptions.noColor) {\n      // colors.setColorEnabled(false);\n    }\n\n    await cli.parse(args);\n  } catch (error) {\n    await handleError(error, globalOptions);\n  }\n}\n"],"names":["Command","chalk","logger","configManager","formatError","displayBanner","displayVersion","startREPL","CompletionGenerator","VERSION","BUILD_DATE","cli","name","version","description","option","action","options","setupLogging","quiet","console","log","gray","replCommand","banner","addCommand","versionCommand","short","completionCommand","argument","shell","generator","generate","install","handleError","error","formatted","json","JSON","stringify","message","timestamp","Date","toISOString","red","bold","process","env","verbose","exit","logLevel","configure","level","format","destination","config","load","loadDefault","profile","applyProfile","warn","setupSignalHandlers","gracefulShutdown","Deno","addSignalListener","globalOptions","args","includes","noColor","parse"],"mappings":"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"}