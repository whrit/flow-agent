{"version":3,"sources":["../../../src/cli/help-text.js"],"sourcesContent":["/**\n * Help text templates for Claude Flow CLI\n * Provides clear, actionable command documentation\n */\n\nimport { HelpFormatter } from './help-formatter.js';\nimport { VERSION } from '../core/version.js';\n\nexport { VERSION };\n\nexport const MAIN_HELP = `\nüåä Claude-Flow v${VERSION} - Enterprise-Grade AI Agent Orchestration Platform\n\nüöÄ v2.5.0-alpha.130 - SDK Integration & Performance Breakthrough\n\nüî• NEW IN v2.5.0-alpha.130:\n  ‚ö° 10-20x Faster Agent Spawning - Parallel agent execution with session forking\n  üéÆ Real-Time Query Control - Pause, resume, terminate queries mid-execution\n  üîÑ Dynamic Model Switching - Change Claude models during execution (cost optimization)\n  üîê Dynamic Permissions - Change permission modes on-the-fly\n  üìä 90 MCP Tools - 87 existing + 3 new Phase 4 tools\n  üöÑ 500-2000x Potential Speedup - Combined performance stack (In-Process + Parallel + Hooks)\n\nüéØ ENTERPRISE FEATURES:\n  ‚Ä¢ Complete ruv-swarm integration with 90+ MCP tools\n  ‚Ä¢ Flow Nexus cloud platform with distributed sandboxes\n  ‚Ä¢ Claude Code SDK integration for maximum performance\n  ‚Ä¢ Production-ready infrastructure with enterprise reliability\n\nUSAGE:\n  npx claude-flow <command> [options]    # Run latest alpha version\n  npx claude-flow <command> --help       # Get detailed help for any command\n  npx claude-flow --help                 # Show this help\n  \n  # After local install:\n  claude-flow <command> [options]\n  claude-flow <command> --help    # Get detailed help for any command\n\nüöÄ QUICK START:\n  # First time setup (creates CLAUDE.md & .claude/commands)\n  npx claude-flow init\n  \n  # üåê FLOW NEXUS CLOUD (NEW!):\n  mcp__flow-nexus__user_register         # Register for cloud features\n  mcp__flow-nexus__user_login            # Login to access sandboxes & neural networks\n  mcp__flow-nexus__sandbox_create        # Create cloud execution environments\n  \n  # üêù HIVE MIND QUICK START:\n  claude-flow hive-mind wizard          # Interactive setup wizard\n  claude-flow hive-mind spawn \"objective\"  # Create intelligent swarm\n  claude-flow hive-mind spawn \"Build API\" --claude  # Open Claude Code CLI\n  \n  # After setup, use without npx:\n  claude-flow start --swarm              # Start with swarm intelligence\n  claude-flow swarm \"build REST API\"     # Deploy multi-agent workflow\n  claude-flow swarm \"create service\" --claude  # Open Claude Code CLI with swarm\n\nüêù HIVE MIND COMMANDS (NEW!):\n  hive-mind wizard         üéØ Interactive setup wizard (RECOMMENDED)\n  hive-mind init           Initialize Hive Mind system with SQLite\n  hive-mind spawn <task>   Create intelligent swarm with objective\n  hive-mind status         View active swarms and performance metrics\n  hive-mind metrics        Advanced performance analytics\n\nüìã CORE COMMANDS:\n  init                     Initialize Claude Flow v2.0.0 (creates CLAUDE.md & .claude/commands)\n                          --monitoring enables token usage tracking\n  start [--swarm]          Start orchestration system\n  swarm <objective>        Multi-agent swarm coordination\n  agent <action>           Agent management (spawn, list, terminate)\n  sparc <mode>             SPARC development modes (17 available)\n  memory <action>          Persistent memory operations\n  github <mode>            GitHub workflow automation (6 modes)\n  status                   System status and health\n  \nüîç VERIFICATION COMMANDS (NEW!):\n  verify <subcommand>      Truth verification system (0.95 threshold)\n  truth                    View truth scores and reliability metrics\n  pair [--start]           Collaborative development with real-time verification\n  \nüìã SWARM INTELLIGENCE COMMANDS:\n  training <command>       Neural pattern learning & model updates (3 commands)\n  coordination <command>   Swarm & agent orchestration (3 commands)\n  analysis <command>       Performance & token usage analytics (real tracking!)\n  automation <command>     Intelligent agent & workflow management (3 commands)\n  hooks <command>          Lifecycle event management (5 commands)\n  migrate-hooks            Migrate settings.json to Claude Code 1.0.51+ format\n  monitoring <command>     Real-time system monitoring (3 commands)\n  optimization <command>   Performance & topology optimization (3 commands)\n  \nüìã ADDITIONAL COMMANDS:\n  task <action>            Task and workflow management\n  config <action>          System configuration\n  mcp <action>             MCP server management\n  batch <action>           Batch operations\n  stream-chain <workflow>  Stream-JSON chaining for multi-agent pipelines\n\nüî• NEW MCP TOOLS (v2.5.0-alpha.130):\n  Available via Claude Code after installing:\n    claude mcp add claude-flow npx claude-flow@alpha mcp start\n\n  mcp__claude-flow__agents_spawn_parallel    Spawn agents in parallel (10-20x faster)\n    ‚Ä¢ Spawn multiple agents concurrently\n    ‚Ä¢ 10-20x speedup vs sequential spawning\n    ‚Ä¢ Example: 3 agents in 150ms instead of 2250ms\n\n  mcp__claude-flow__query_control            Control running queries in real-time\n    ‚Ä¢ Actions: pause, resume, terminate\n    ‚Ä¢ Change model mid-execution (Sonnet ‚Üí Haiku for cost savings)\n    ‚Ä¢ Change permissions dynamically\n    ‚Ä¢ Execute commands in query context\n\n  mcp__claude-flow__query_list               List active queries with status\n    ‚Ä¢ View all running queries\n    ‚Ä¢ Monitor query status and performance\n    ‚Ä¢ Filter by active or include history\n\nüîç GET HELP:\n  npx claude-flow --help                Show this help\n  npx claude-flow <command> --help      Detailed command help\n\nüéØ RECOMMENDED FOR NEW USERS:\n  npx claude-flow hive-mind wizard     # Start here! Interactive guided setup\n  npx claude-flow init                 # Initialize Claude Flow\n  npx claude-flow help hive-mind       # Learn about Hive Mind features\n  npx claude-flow swarm \"Build API\" --claude  # Quick start with Claude Code CLI\n\nüìö Documentation: https://github.com/ruvnet/claude-flow\nüêù Hive Mind Guide: https://github.com/ruvnet/claude-flow/tree/main/docs/hive-mind\nüêù ruv-swarm: https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm\nüí¨ Discord Community: https://discord.agentics.org\n\nüíñ Created by rUv with love: https://github.com/ruvnet\n`;\n\nexport const COMMAND_HELP = {\n  verify: `\nüîç VERIFY COMMAND - Truth Verification System\n\nUSAGE:\n  claude-flow verify <subcommand> [options]\n\nDESCRIPTION:\n  Enforce truth and accuracy in multi-agent operations with a 0.95 threshold.\n  \"Truth is enforced, not assumed\" - every agent claim is verified.\n\nSUBCOMMANDS:\n  init <mode>        Initialize verification system\n                     Modes: strict (0.95), moderate (0.85), development (0.75)\n  verify <task>      Run verification on specific task or agent\n  status             Show verification system status and metrics\n  rollback           Trigger manual rollback to last good state\n\nOPTIONS:\n  --threshold <n>    Custom accuracy threshold (0.0-1.0)\n  --agent <type>     Specify agent type for verification\n  --auto-rollback    Enable automatic rollback on failures\n  --verbose          Detailed verification output\n  --json             Output in JSON format\n\nEXAMPLES:\n  claude-flow verify init strict                  # Production mode\n  claude-flow verify verify task-123 --agent coder\n  claude-flow verify status --recent 10\n  claude-flow verify rollback --checkpoint last\n`,\n  truth: `\nüìä TRUTH COMMAND - Truth Score Analytics\n\nUSAGE:\n  claude-flow truth [options]\n\nDESCRIPTION:\n  View and analyze truth scores, reliability metrics, and verification history.\n  Provides insights into agent accuracy and system reliability.\n\nOPTIONS:\n  --report           Generate detailed truth score report\n  --analyze          Analyze failure patterns and trends\n  --agent <type>     Filter by specific agent type\n  --taskId <id>      Check specific task truth score\n  --threshold <n>    Filter scores below threshold\n  --json             Output in JSON format\n  --export <file>    Export report to file\n\nEXAMPLES:\n  claude-flow truth                        # Show current scores\n  claude-flow truth --report               # Detailed report\n  claude-flow truth --analyze              # Pattern analysis\n  claude-flow truth --agent coder --detailed\n  claude-flow truth --json | jq .averageScore\n`,\n  pair: `\nüë• PAIR COMMAND - Collaborative Development Mode\n\nUSAGE:\n  claude-flow pair [options]\n\nDESCRIPTION:\n  Real-time collaborative development with AI verification.\n  Continuous validation with instant feedback and auto-rollback.\n\nOPTIONS:\n  --start            Start new pair programming session\n  --mode <type>      Set verification mode:\n                     strict (0.95), standard (0.85), development (0.75)\n  --threshold <n>    Custom accuracy threshold (0.0-1.0)\n  --verify           Enable real-time verification\n  --monitor          Show real-time metrics dashboard\n  --auto-rollback    Enable automatic rollback on failures\n  --summary          View session summary\n  --export <file>    Export session metrics\n\nEXAMPLES:\n  claude-flow pair --start                 # Start session\n  claude-flow pair --start --mode strict   # Production pairing\n  claude-flow pair --threshold 0.90        # Custom threshold\n  claude-flow pair --summary               # View session stats\n  claude-flow pair --monitor --verify      # Real-time monitoring\n`,\n  swarm: `\nüß† SWARM COMMAND - Multi-Agent AI Coordination\n\nUSAGE:\n  claude-flow swarm <objective> [options]\n\nDESCRIPTION:\n  Deploy intelligent multi-agent swarms to accomplish complex objectives.\n  Agents work in parallel with neural optimization and real-time coordination.\n\nOPTIONS:\n  --strategy <type>    Execution strategy: research, development, analysis,\n                       testing, optimization, maintenance\n  --mode <type>        Coordination mode: centralized, distributed,\n                       hierarchical, mesh, hybrid\n  --max-agents <n>     Maximum number of agents (default: 5)\n  --parallel           Enable parallel execution (2.8-4.4x speed improvement)\n  --monitor            Real-time swarm monitoring\n  --background         Run in background with progress tracking\n  --claude             Open Claude Code CLI\n  --executor           Use built-in executor instead of Claude Code\n  --analysis           Enable analysis/read-only mode (no code changes)\n  --read-only          Enable read-only mode (alias for --analysis)\n\nEXAMPLES:\n  claude-flow swarm \"Build a REST API with authentication\"\n  claude-flow swarm \"Research cloud architecture patterns\" --strategy research\n  claude-flow swarm \"Optimize database queries\" --max-agents 3 --parallel\n  claude-flow swarm \"Develop feature X\" --strategy development --monitor\n  claude-flow swarm \"Build API\" --claude  # Open Claude Code CLI\n  claude-flow swarm \"Create service\" --executor  # Use built-in executor\n  claude-flow swarm \"Analyze codebase for security issues\" --analysis\n  claude-flow swarm \"Review architecture patterns\" --read-only --strategy research\n\nAGENT TYPES:\n  researcher    Research with web access and data analysis\n  coder         Code development with neural patterns\n  analyst       Performance analysis and optimization\n  architect     System design with enterprise patterns\n  tester        Comprehensive testing with automation\n  coordinator   Multi-agent orchestration\n\nANALYSIS MODE:\n  When using --analysis or --read-only flags, the swarm operates in a safe\n  read-only mode that prevents all code modifications. Perfect for:\n  \n  ‚Ä¢ Code reviews and security audits\n  ‚Ä¢ Architecture analysis and documentation\n  ‚Ä¢ Performance bottleneck identification\n  ‚Ä¢ Technical debt assessment\n  ‚Ä¢ Dependency mapping and analysis\n  ‚Ä¢ \"What-if\" scenario exploration\n  \n  In analysis mode, agents can only read files, search codebases, and\n  generate reports - no Write, Edit, or system-modifying operations.\n`,\n\n  github: `\nüêô GITHUB COMMAND - Workflow Automation\n\nUSAGE:\n  claude-flow github <mode> <objective> [options]\n\nDESCRIPTION:\n  Automate GitHub workflows with 6 specialized AI-powered modes.\n  Each mode handles specific aspects of repository management.\n\nMODES:\n  init                Initialize GitHub-enhanced checkpoint system (NEW!)\n  gh-coordinator      GitHub workflow orchestration and CI/CD\n  pr-manager          Pull request management with reviews\n  issue-tracker       Issue management and project coordination\n  release-manager     Release coordination and deployment\n  repo-architect      Repository structure optimization\n  sync-coordinator    Multi-package synchronization\n\nOPTIONS:\n  --auto-approve      Automatically approve safe changes\n  --dry-run           Preview changes without applying\n  --verbose           Detailed operation logging\n  --config <file>     Custom configuration file\n\nEXAMPLES:\n  claude-flow github init                                        # Initialize GitHub checkpoint hooks\n  claude-flow github pr-manager \"create feature PR with tests\"\n  claude-flow github gh-coordinator \"setup CI/CD pipeline\" --auto-approve\n  claude-flow github release-manager \"prepare v2.0.0 release\"\n  claude-flow github repo-architect \"optimize monorepo structure\"\n  claude-flow github issue-tracker \"analyze and label issues\"\n  claude-flow github sync-coordinator \"sync versions across packages\"\n`,\n\n  agent: `\nü§ñ AGENT COMMAND - AI Agent Management\n\nUSAGE:\n  claude-flow agent <action> [options]\n\nACTIONS:\n  spawn <type>      Create new AI agent\n  list              List all active agents\n  terminate <id>    Terminate specific agent\n  info <id>         Show agent details\n  hierarchy         Manage agent hierarchies\n  ecosystem         View agent ecosystem\n\nOPTIONS:\n  --name <name>     Custom agent name\n  --verbose         Detailed output\n  --json            JSON output format\n\nAGENT TYPES:\n  researcher        Research and data analysis\n  coder            Code generation and refactoring\n  analyst          Performance and security analysis\n  architect        System design and architecture\n  tester           Test creation and execution\n  coordinator      Task coordination\n  reviewer         Code and design review\n  optimizer        Performance optimization\n\nEXAMPLES:\n  claude-flow agent spawn researcher --name \"DataBot\"\n  claude-flow agent list --verbose\n  claude-flow agent terminate agent-123\n  claude-flow agent hierarchy create enterprise\n  claude-flow agent ecosystem status\n`,\n\n  memory: `\nüíæ MEMORY COMMAND - Persistent Memory Management\n\nUSAGE:\n  claude-flow memory <action> [options]\n\nACTIONS:\n  store <key> <value>     Store data in memory\n  get <key>               Retrieve stored data\n  query <search>          Search memory contents\n  list                    List all stored items\n  delete <key>            Delete specific entry\n  stats                   Memory usage statistics\n  export <file>           Export memory to file\n  import <file>           Import memory from file\n  cleanup                 Clean old entries\n\nOPTIONS:\n  --namespace <ns>        Use specific namespace\n  --format <type>         Output format (json, table)\n  --verbose               Detailed output\n\nEXAMPLES:\n  claude-flow memory store architecture \"microservices pattern\"\n  claude-flow memory get architecture\n  claude-flow memory query \"API design\"\n  claude-flow memory stats\n  claude-flow memory export backup.json\n  claude-flow memory cleanup --older-than 30d\n`,\n\n  sparc: `\nüöÄ SPARC COMMAND - Development Mode Operations\n\nUSAGE:\n  claude-flow sparc [mode] [objective]\n  claude-flow sparc <action>\n\nDESCRIPTION:\n  SPARC provides 17 specialized development modes for different workflows.\n  Each mode optimizes AI assistance for specific tasks.\n\nMODES:\n  architect      System architecture and design\n  code           Code generation and implementation\n  tdd            Test-driven development workflow\n  debug          Debugging and troubleshooting\n  security       Security analysis and fixes\n  refactor       Code refactoring and optimization\n  docs           Documentation generation\n  review         Code review and quality checks\n  data           Data modeling and analysis\n  api            API design and implementation\n  ui             UI/UX development\n  ops            DevOps and infrastructure\n  ml             Machine learning workflows\n  blockchain     Blockchain development\n  mobile         Mobile app development\n  game           Game development\n  iot            IoT system development\n\nACTIONS:\n  modes          List all available modes\n  info <mode>    Show mode details\n  run <mode>     Run specific mode\n\nEXAMPLES:\n  claude-flow sparc \"design authentication system\"    # Auto-select mode\n  claude-flow sparc architect \"design microservices\"  # Use architect mode\n  claude-flow sparc tdd \"user registration feature\"   # TDD workflow\n  claude-flow sparc modes                            # List all modes\n  claude-flow sparc info security                    # Mode details\n`,\n\n  init: `\nüéØ INIT COMMAND - Initialize Claude Flow Environment\n\nUSAGE:\n  claude-flow init [options]\n\nDESCRIPTION:\n  Initialize Claude Flow v2.0.0 in your project with full MCP integration.\n  By default creates standard setup with local Git checkpoints.\n  \n  TWO INITIALIZATION MODES:\n  ‚Ä¢ claude-flow init         Standard init with local Git checkpoints\n  ‚Ä¢ claude-flow github init  GitHub-enhanced with automatic releases (NEW!)\n\nOPTIONS:\n  --force          Overwrite existing configuration\n  --dry-run        Preview what will be created\n  --basic          Use basic initialization (pre-v2.0.0)\n  --sparc          SPARC enterprise setup with additional features\n  --minimal        Minimal setup without examples\n  --template <t>   Use specific project template\n\nWHAT claude-flow init CREATES (DEFAULT):\n  üìÑ CLAUDE.md          AI-readable project instructions & context\n  üìÅ .claude/           Enterprise configuration directory containing:\n    ‚îî‚îÄ‚îÄ commands/       Custom commands and automation scripts\n    ‚îî‚îÄ‚îÄ settings.json   Advanced configuration and hooks\n    ‚îî‚îÄ‚îÄ hooks/          Pre/post operation automation\n  üìã .roomodes          17 specialized SPARC development modes\n  \n  CLAUDE.md CONTENTS:\n  ‚Ä¢ Project overview and objectives\n  ‚Ä¢ Technology stack and architecture\n  ‚Ä¢ Development guidelines and patterns\n  ‚Ä¢ AI-specific instructions for better assistance\n  ‚Ä¢ Integration with ruv-swarm MCP tools\n  \n  .claude/commands INCLUDES:\n  ‚Ä¢ Custom project-specific commands\n  ‚Ä¢ Automated workflow scripts\n  ‚Ä¢ Integration hooks for Claude Code\n  ‚Ä¢ Team collaboration tools\n  \n  Features enabled:\n  ‚Ä¢ ruv-swarm integration with 27 MCP tools\n  ‚Ä¢ Neural network processing with WASM\n  ‚Ä¢ Multi-agent coordination topologies\n  ‚Ä¢ Cross-session memory persistence\n  ‚Ä¢ GitHub workflow automation\n  ‚Ä¢ Performance monitoring\n  ‚Ä¢ Enterprise security features\n\nEXAMPLES:\n  npx claude-flow init              # Standard init with local checkpoints\n  npx claude-flow github init       # GitHub-enhanced init with releases\n  claude-flow init --force                # Overwrite existing configuration\n  claude-flow github init --force         # Force GitHub mode (overwrite)\n  claude-flow init --dry-run              # Preview what will be created\n  claude-flow init --monitoring           # Initialize with token tracking\n  claude-flow init --sparc                # SPARC enterprise setup\n  claude-flow init --minimal              # Basic setup only\n`,\n\n  start: `\nüöÄ START COMMAND - Start Orchestration System\n\nUSAGE:\n  claude-flow start [options]\n\nDESCRIPTION:\n  Start the Claude Flow orchestration system with optional swarm intelligence.\n\nOPTIONS:\n  --swarm          Enable swarm intelligence features\n  --daemon         Run as background daemon\n  --port <port>    MCP server port (default: 3000)\n  --verbose        Detailed logging\n  --config <file>  Custom configuration file\n\nEXAMPLES:\n  claude-flow start                      # Basic start\n  claude-flow start --swarm              # Start with swarm features\n  claude-flow start --daemon             # Background daemon\n  claude-flow start --port 8080          # Custom MCP port\n  claude-flow start --config prod.json   # Production config\n`,\n\n  status: `\nüìä STATUS COMMAND - System Status\n\nUSAGE:\n  claude-flow status [options]\n\nDESCRIPTION:\n  Show comprehensive system status including agents, tasks, and resources.\n\nOPTIONS:\n  --verbose        Detailed system information\n  --json           JSON output format\n  --watch          Live updates\n  --interval <ms>  Update interval (with --watch)\n\nOUTPUT INCLUDES:\n  ‚Ä¢ Orchestrator status\n  ‚Ä¢ Active agents and their state\n  ‚Ä¢ Task queue and progress\n  ‚Ä¢ Memory usage statistics\n  ‚Ä¢ MCP server status\n  ‚Ä¢ System resources\n  ‚Ä¢ Performance metrics\n\nEXAMPLES:\n  claude-flow status                     # Basic status\n  claude-flow status --verbose           # Detailed information\n  claude-flow status --json              # Machine-readable format\n  claude-flow status --watch             # Live monitoring\n`,\n\n  training: `\nüß† TRAINING COMMAND - Neural Pattern Learning & Model Updates\n\nUSAGE:\n  claude-flow training <command> [options]\n\nDESCRIPTION:\n  Train neural patterns from operations, learn from outcomes, and update agent models \n  with real ruv-swarm integration for continuous learning and optimization.\n\nCOMMANDS:\n  neural-train      Train neural patterns from operations data\n  pattern-learn     Learn from specific operation outcomes  \n  model-update      Update agent models with new insights\n\nNEURAL TRAIN OPTIONS:\n  --data <source>   Training data source (default: recent)\n                    Options: recent, historical, custom, swarm-<id>\n  --model <name>    Target model (default: general-predictor)\n                    Options: task-predictor, agent-selector, performance-optimizer\n  --epochs <n>      Training epochs (default: 50)\n\nPATTERN LEARN OPTIONS:\n  --operation <op>  Operation type to learn from\n  --outcome <result> Operation outcome (success/failure/partial)\n\nMODEL UPDATE OPTIONS:\n  --agent-type <type>      Agent type to update (coordinator, coder, researcher, etc.)\n  --operation-result <res> Result from operation execution\n\nEXAMPLES:\n  claude-flow training neural-train --data recent --model task-predictor\n  claude-flow training pattern-learn --operation \"file-creation\" --outcome \"success\"\n  claude-flow training model-update --agent-type coordinator --operation-result \"efficient\"\n  claude-flow training neural-train --data \"swarm-123\" --epochs 100 --model \"coordinator-predictor\"\n\nüéØ Neural training improves:\n  ‚Ä¢ Task selection accuracy\n  ‚Ä¢ Agent performance prediction  \n  ‚Ä¢ Coordination efficiency\n  ‚Ä¢ Error prevention patterns\n`,\n\n  coordination: `\nüêù COORDINATION COMMAND - Swarm & Agent Orchestration\n\nUSAGE:\n  claude-flow coordination <command> [options]\n\nDESCRIPTION:\n  Initialize swarms, spawn coordinated agents, and orchestrate task execution \n  across agents with real ruv-swarm MCP integration for optimal performance.\n\nCOMMANDS:\n  swarm-init        Initialize swarm coordination infrastructure\n  agent-spawn       Spawn and coordinate new agents\n  task-orchestrate  Orchestrate task execution across agents\n\nSWARM-INIT OPTIONS:\n  --swarm-id <id>      Swarm identifier (auto-generated if not provided)\n  --topology <type>    Coordination topology (default: hierarchical)\n                       Options: hierarchical, mesh, ring, star, hybrid\n  --max-agents <n>     Maximum number of agents (default: 5)\n  --strategy <strategy> Coordination strategy (default: balanced)\n\nAGENT-SPAWN OPTIONS:\n  --type <type>        Agent type (default: general)\n                       Options: coordinator, coder, developer, researcher, analyst, analyzer, \n                       tester, architect, reviewer, optimizer, general\n  --name <name>        Custom agent name (auto-generated if not provided)\n  --swarm-id <id>      Target swarm for agent coordination\n  --capabilities <cap> Custom capabilities specification\n\nTASK-ORCHESTRATE OPTIONS:\n  --task <description> Task description (required)\n  --swarm-id <id>      Target swarm for task execution\n  --strategy <strategy> Coordination strategy (default: adaptive)\n                       Options: adaptive, parallel, sequential, hierarchical\n  --share-results      Enable result sharing across swarm\n\nEXAMPLES:\n  claude-flow coordination swarm-init --topology hierarchical --max-agents 8\n  claude-flow coordination agent-spawn --type developer --name \"api-dev\" --swarm-id swarm-123\n  claude-flow coordination task-orchestrate --task \"Build REST API\" --strategy parallel --share-results\n  claude-flow coordination swarm-init --topology mesh --max-agents 12\n\nüéØ Coordination enables:\n  ‚Ä¢ Intelligent task distribution\n  ‚Ä¢ Agent synchronization\n  ‚Ä¢ Shared memory coordination\n  ‚Ä¢ Performance optimization\n  ‚Ä¢ Fault tolerance\n`,\n\n  analysis: `\nüìä ANALYSIS COMMAND - Performance & Usage Analytics\n\nUSAGE:\n  claude-flow analysis <command> [options]\n\nDESCRIPTION:\n  Detect performance bottlenecks, generate comprehensive reports, and analyze \n  token consumption using real ruv-swarm analytics for system optimization.\n\nCOMMANDS:\n  bottleneck-detect    Detect performance bottlenecks in the system\n  performance-report   Generate comprehensive performance reports\n  token-usage          Analyze token consumption and costs\n\nBOTTLENECK DETECT OPTIONS:\n  --scope <scope>      Analysis scope (default: system)\n                       Options: system, swarm, agent, task, memory\n  --target <target>    Specific target to analyze (default: all)\n                       Examples: agent-id, swarm-id, task-type\n\nPERFORMANCE REPORT OPTIONS:\n  --timeframe <time>   Report timeframe (default: 24h)\n                       Options: 1h, 6h, 24h, 7d, 30d\n  --format <format>    Report format (default: summary)\n                       Options: summary, detailed, json, csv\n\nTOKEN USAGE OPTIONS:\n  --agent <agent>      Filter by agent type or ID (default: all)\n  --breakdown          Include detailed breakdown by agent type\n  --cost-analysis      Include cost projections and optimization\n\nEXAMPLES:\n  claude-flow analysis bottleneck-detect --scope system\n  claude-flow analysis bottleneck-detect --scope agent --target coordinator-1\n  claude-flow analysis performance-report --timeframe 7d --format detailed\n  claude-flow analysis token-usage --breakdown --cost-analysis\n  claude-flow analysis bottleneck-detect --scope swarm --target swarm-123\n\nüéØ Analysis helps with:\n  ‚Ä¢ Performance optimization\n  ‚Ä¢ Cost management\n  ‚Ä¢ Resource allocation\n  ‚Ä¢ Bottleneck identification\n  ‚Ä¢ Trend analysis\n`,\n\n  automation: `\nü§ñ AUTOMATION COMMAND - Intelligent Agent & Workflow Management\n\nUSAGE:\n  claude-flow automation <command> [options]\n\nDESCRIPTION:\n  Automatically spawn optimal agents, intelligently manage workflows, and select \n  optimal configurations with real ruv-swarm intelligence for maximum efficiency.\n\nCOMMANDS:\n  auto-agent        Automatically spawn optimal agents based on task complexity\n  smart-spawn       Intelligently spawn agents based on specific requirements\n  workflow-select   Select and configure optimal workflows for project types\n\nAUTO-AGENT OPTIONS:\n  --task-complexity <level>  Task complexity level (default: medium)\n                             Options: low, medium, high, enterprise\n  --swarm-id <id>           Target swarm ID for agent spawning\n\nSMART-SPAWN OPTIONS:\n  --requirement <req>       Specific requirement description\n                           Examples: \"web-development\", \"data-analysis\", \"enterprise-api\"\n  --max-agents <n>         Maximum number of agents to spawn (default: 10)\n\nWORKFLOW-SELECT OPTIONS:\n  --project-type <type>     Project type (default: general)\n                           Options: web-app, api, data-analysis, enterprise, general\n  --priority <priority>     Optimization priority (default: balanced)\n                           Options: speed, quality, cost, balanced\n\nEXAMPLES:\n  claude-flow automation auto-agent --task-complexity enterprise --swarm-id swarm-123\n  claude-flow automation smart-spawn --requirement \"web-development\" --max-agents 8\n  claude-flow automation workflow-select --project-type api --priority speed\n  claude-flow automation auto-agent --task-complexity low\n\nüéØ Automation benefits:\n  ‚Ä¢ Optimal resource allocation\n  ‚Ä¢ Intelligent agent selection\n  ‚Ä¢ Workflow optimization\n  ‚Ä¢ Reduced manual configuration\n  ‚Ä¢ Performance-based scaling\n`,\n\n  hooks: `\nüîó HOOKS COMMAND - Lifecycle Event Management\n\nUSAGE:\n  claude-flow hooks <command> [options]\n\nDESCRIPTION:\n  Execute lifecycle hooks before and after tasks, edits, and sessions with \n  real ruv-swarm integration for automated preparation, tracking, and cleanup.\n\nCOMMANDS:\n  pre-task      Execute before task begins (preparation & setup)\n  post-task     Execute after task completion (analysis & cleanup)\n  pre-edit      Execute before file modifications (backup & validation)\n  post-edit     Execute after file modifications (tracking & coordination)\n  session-end   Execute at session termination (cleanup & export)\n\nPRE-TASK OPTIONS:\n  --description <desc>     Task description\n  --task-id <id>          Task identifier\n  --agent-id <id>         Executing agent identifier\n  --auto-spawn-agents     Auto-spawn agents for task (default: true)\n\nPOST-TASK OPTIONS:\n  --task-id <id>               Task identifier\n  --analyze-performance        Generate performance analysis\n  --generate-insights          Create AI-powered insights\n\nPRE-EDIT OPTIONS:\n  --file <path>           Target file path\n  --operation <type>      Edit operation type (edit, create, delete)\n\nPOST-EDIT OPTIONS:\n  --file <path>           Modified file path\n  --memory-key <key>      Coordination memory key for storing edit info\n\nSESSION-END OPTIONS:\n  --export-metrics        Export session performance metrics\n  --swarm-id <id>         Swarm identifier for coordination cleanup\n  --generate-summary      Create comprehensive session summary\n\nEXAMPLES:\n  claude-flow hooks pre-task --description \"Build API\" --task-id task-123 --agent-id agent-456\n  claude-flow hooks post-task --task-id task-123 --analyze-performance --generate-insights\n  claude-flow hooks pre-edit --file \"src/api.js\" --operation edit\n  claude-flow hooks post-edit --file \"src/api.js\" --memory-key \"swarm/123/edits/timestamp\"\n  claude-flow hooks session-end --export-metrics --generate-summary --swarm-id swarm-123\n\nüéØ Hooks enable:\n  ‚Ä¢ Automated preparation & cleanup\n  ‚Ä¢ Performance tracking\n  ‚Ä¢ Coordination synchronization\n  ‚Ä¢ Error prevention\n  ‚Ä¢ Insight generation\n`,\n};\n\nexport function getCommandHelp(command) {\n  // Return legacy format for now - to be updated\n  return COMMAND_HELP[command] || `Help not available for command: ${command}`;\n}\n\nexport function getStandardizedCommandHelp(command) {\n  const commandConfigs = {\n    agent: {\n      name: 'claude-flow agent',\n      description: 'Manage individual agents',\n      usage: 'claude-flow agent <action> [options]',\n      commands: [\n        { name: 'spawn', description: 'Create a new agent' },\n        { name: 'list', description: 'List all active agents' },\n        { name: 'info', description: 'Show agent details' },\n        { name: 'terminate', description: 'Stop an agent' },\n        { name: 'hierarchy', description: 'Manage agent hierarchies' },\n        { name: 'ecosystem', description: 'View agent ecosystem' },\n      ],\n      options: [\n        {\n          flags: '--type <type>',\n          description: 'Agent type',\n          validValues: [\n            'coordinator',\n            'researcher',\n            'coder',\n            'analyst',\n            'architect',\n            'tester',\n            'reviewer',\n            'optimizer',\n          ],\n        },\n        {\n          flags: '--name <name>',\n          description: 'Agent name',\n        },\n        {\n          flags: '--verbose',\n          description: 'Detailed output',\n        },\n        {\n          flags: '--json',\n          description: 'Output in JSON format',\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow agent spawn researcher --name \"Research Bot\"',\n        'claude-flow agent list --json',\n        'claude-flow agent terminate agent-123',\n        'claude-flow agent info agent-456 --verbose',\n      ],\n    },\n    sparc: {\n      name: 'claude-flow sparc',\n      description: 'Execute SPARC development modes',\n      usage: 'claude-flow sparc <mode> [task] [options]',\n      commands: [\n        { name: 'spec', description: 'Specification mode - Requirements analysis' },\n        { name: 'architect', description: 'Architecture mode - System design' },\n        { name: 'tdd', description: 'Test-driven development mode' },\n        { name: 'integration', description: 'Integration mode - Component connection' },\n        { name: 'refactor', description: 'Refactoring mode - Code improvement' },\n        { name: 'modes', description: 'List all available SPARC modes' },\n      ],\n      options: [\n        {\n          flags: '--file <path>',\n          description: 'Input/output file path',\n        },\n        {\n          flags: '--format <type>',\n          description: 'Output format',\n          validValues: ['markdown', 'json', 'yaml'],\n        },\n        {\n          flags: '--verbose',\n          description: 'Detailed output',\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow sparc spec \"User authentication system\"',\n        'claude-flow sparc tdd \"Payment processing module\"',\n        'claude-flow sparc architect \"Microservices architecture\"',\n        'claude-flow sparc modes',\n      ],\n    },\n    memory: {\n      name: 'claude-flow memory',\n      description: 'Manage persistent memory operations',\n      usage: 'claude-flow memory <action> [key] [value] [options]',\n      commands: [\n        { name: 'store', description: 'Store data in memory' },\n        { name: 'query', description: 'Search memory by pattern' },\n        { name: 'list', description: 'List memory namespaces' },\n        { name: 'export', description: 'Export memory to file' },\n        { name: 'import', description: 'Import memory from file' },\n        { name: 'clear', description: 'Clear memory namespace' },\n      ],\n      options: [\n        {\n          flags: '--namespace <name>',\n          description: 'Memory namespace',\n          defaultValue: 'default',\n        },\n        {\n          flags: '--ttl <seconds>',\n          description: 'Time to live in seconds',\n        },\n        {\n          flags: '--format <type>',\n          description: 'Export format',\n          validValues: ['json', 'yaml'],\n        },\n        {\n          flags: '--help',\n          description: 'Show this help message',\n        },\n      ],\n      examples: [\n        'claude-flow memory store \"api_design\" \"REST endpoints specification\"',\n        'claude-flow memory query \"authentication\"',\n        'claude-flow memory export backup.json',\n        'claude-flow memory list --namespace project',\n      ],\n    },\n  };\n\n  const config = commandConfigs[command];\n  if (!config) {\n    return HelpFormatter.formatError(\n      `Unknown command: ${command}`,\n      'claude-flow',\n      'claude-flow <command> --help',\n    );\n  }\n\n  return HelpFormatter.formatHelp(config);\n}\n\nexport function getMainHelp(plain = false) {\n  // Return the vibrant, emoji-rich version by default\n  if (!plain) {\n    return MAIN_HELP;\n  }\n\n  // Return plain standardized format when requested\n  const helpInfo = {\n    name: 'claude-flow',\n    description: 'Advanced AI agent orchestration system',\n    usage: `claude-flow <command> [<args>] [options]\n    claude-flow <command> --help\n    claude-flow --version`,\n    commands: [\n      {\n        name: 'hive-mind',\n        description: 'Manage hive mind swarm intelligence',\n        aliases: ['hm'],\n      },\n      {\n        name: 'init',\n        description: 'Initialize Claude Flow configuration',\n      },\n      {\n        name: 'start',\n        description: 'Start orchestration system',\n      },\n      {\n        name: 'swarm',\n        description: 'Execute multi-agent swarm coordination',\n      },\n      {\n        name: 'agent',\n        description: 'Manage individual agents',\n      },\n      {\n        name: 'sparc',\n        description: 'Execute SPARC development modes',\n      },\n      {\n        name: 'memory',\n        description: 'Manage persistent memory operations',\n      },\n      {\n        name: 'github',\n        description: 'Automate GitHub workflows',\n      },\n      {\n        name: 'status',\n        description: 'Show system status and health',\n      },\n      {\n        name: 'config',\n        description: 'Manage configuration settings',\n      },\n      {\n        name: 'session',\n        description: 'Manage sessions and state persistence',\n      },\n      {\n        name: 'terminal',\n        description: 'Terminal pool management',\n      },\n      {\n        name: 'workflow',\n        description: 'Manage automated workflows',\n      },\n      {\n        name: 'training',\n        description: 'Neural pattern training',\n      },\n      {\n        name: 'coordination',\n        description: 'Swarm coordination commands',\n      },\n      {\n        name: 'help',\n        description: 'Show help information',\n      },\n    ],\n    globalOptions: [\n      {\n        flags: '--config <path>',\n        description: 'Configuration file path',\n        defaultValue: '.claude/config.json',\n      },\n      {\n        flags: '--verbose',\n        description: 'Enable verbose output',\n      },\n      {\n        flags: '--quiet',\n        description: 'Suppress non-error output',\n      },\n      {\n        flags: '--json',\n        description: 'Output in JSON format',\n      },\n      {\n        flags: '--plain',\n        description: 'Show plain help without emojis',\n      },\n      {\n        flags: '--help',\n        description: 'Show help information',\n      },\n      {\n        flags: '--version',\n        description: 'Show version information',\n      },\n    ],\n    examples: [\n      'npx claude-flow init',\n      'claude-flow hive-mind wizard',\n      'claude-flow swarm \"Build REST API\"',\n      'claude-flow agent spawn researcher --name \"Research Bot\"',\n      'claude-flow status --json',\n      'claude-flow memory query \"API design\"',\n    ],\n  };\n\n  return HelpFormatter.formatHelp(helpInfo);\n}\n"],"names":["HelpFormatter","VERSION","MAIN_HELP","COMMAND_HELP","verify","truth","pair","swarm","github","agent","memory","sparc","init","start","status","training","coordination","analysis","automation","hooks","getCommandHelp","command","getStandardizedCommandHelp","commandConfigs","name","description","usage","commands","options","flags","validValues","examples","defaultValue","config","formatError","formatHelp","getMainHelp","plain","helpInfo","aliases","globalOptions"],"mappings":"AAKA,SAASA,aAAa,QAAQ,sBAAsB;AACpD,SAASC,OAAO,QAAQ,qBAAqB;AAE7C,SAASA,OAAO,GAAG;AAEnB,OAAO,MAAMC,YAAY,CAAC;gBACV,EAAED,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0H1B,CAAC,CAAC;AAEF,OAAO,MAAME,eAAe;IAC1BC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BX,CAAC;IACCC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBV,CAAC;IACCC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BT,CAAC;IACCC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDV,CAAC;IAECC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCX,CAAC;IAECC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCV,CAAC;IAECC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BX,CAAC;IAECC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCV,CAAC;IAECC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DT,CAAC;IAECC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBV,CAAC;IAECC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BX,CAAC;IAECC,UAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCb,CAAC;IAECC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDjB,CAAC;IAECC,UAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Cb,CAAC;IAECC,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2Cf,CAAC;IAECC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDV,CAAC;AACD,EAAE;AAEF,OAAO,SAASC,eAAeC,OAAO;IAEpC,OAAOlB,YAAY,CAACkB,QAAQ,IAAI,CAAC,gCAAgC,EAAEA,SAAS;AAC9E;AAEA,OAAO,SAASC,2BAA2BD,OAAO;IAChD,MAAME,iBAAiB;QACrBd,OAAO;YACLe,MAAM;YACNC,aAAa;YACbC,OAAO;YACPC,UAAU;gBACR;oBAAEH,MAAM;oBAASC,aAAa;gBAAqB;gBACnD;oBAAED,MAAM;oBAAQC,aAAa;gBAAyB;gBACtD;oBAAED,MAAM;oBAAQC,aAAa;gBAAqB;gBAClD;oBAAED,MAAM;oBAAaC,aAAa;gBAAgB;gBAClD;oBAAED,MAAM;oBAAaC,aAAa;gBAA2B;gBAC7D;oBAAED,MAAM;oBAAaC,aAAa;gBAAuB;aAC1D;YACDG,SAAS;gBACP;oBACEC,OAAO;oBACPJ,aAAa;oBACbK,aAAa;wBACX;wBACA;wBACA;wBACA;wBACA;wBACA;wBACA;wBACA;qBACD;gBACH;gBACA;oBACED,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;gBACf;aACD;YACDM,UAAU;gBACR;gBACA;gBACA;gBACA;aACD;QACH;QACApB,OAAO;YACLa,MAAM;YACNC,aAAa;YACbC,OAAO;YACPC,UAAU;gBACR;oBAAEH,MAAM;oBAAQC,aAAa;gBAA6C;gBAC1E;oBAAED,MAAM;oBAAaC,aAAa;gBAAoC;gBACtE;oBAAED,MAAM;oBAAOC,aAAa;gBAA+B;gBAC3D;oBAAED,MAAM;oBAAeC,aAAa;gBAA0C;gBAC9E;oBAAED,MAAM;oBAAYC,aAAa;gBAAsC;gBACvE;oBAAED,MAAM;oBAASC,aAAa;gBAAiC;aAChE;YACDG,SAAS;gBACP;oBACEC,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;oBACbK,aAAa;wBAAC;wBAAY;wBAAQ;qBAAO;gBAC3C;gBACA;oBACED,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;gBACf;aACD;YACDM,UAAU;gBACR;gBACA;gBACA;gBACA;aACD;QACH;QACArB,QAAQ;YACNc,MAAM;YACNC,aAAa;YACbC,OAAO;YACPC,UAAU;gBACR;oBAAEH,MAAM;oBAASC,aAAa;gBAAuB;gBACrD;oBAAED,MAAM;oBAASC,aAAa;gBAA2B;gBACzD;oBAAED,MAAM;oBAAQC,aAAa;gBAAyB;gBACtD;oBAAED,MAAM;oBAAUC,aAAa;gBAAwB;gBACvD;oBAAED,MAAM;oBAAUC,aAAa;gBAA0B;gBACzD;oBAAED,MAAM;oBAASC,aAAa;gBAAyB;aACxD;YACDG,SAAS;gBACP;oBACEC,OAAO;oBACPJ,aAAa;oBACbO,cAAc;gBAChB;gBACA;oBACEH,OAAO;oBACPJ,aAAa;gBACf;gBACA;oBACEI,OAAO;oBACPJ,aAAa;oBACbK,aAAa;wBAAC;wBAAQ;qBAAO;gBAC/B;gBACA;oBACED,OAAO;oBACPJ,aAAa;gBACf;aACD;YACDM,UAAU;gBACR;gBACA;gBACA;gBACA;aACD;QACH;IACF;IAEA,MAAME,SAASV,cAAc,CAACF,QAAQ;IACtC,IAAI,CAACY,QAAQ;QACX,OAAOjC,cAAckC,WAAW,CAC9B,CAAC,iBAAiB,EAAEb,SAAS,EAC7B,eACA;IAEJ;IAEA,OAAOrB,cAAcmC,UAAU,CAACF;AAClC;AAEA,OAAO,SAASG,YAAYC,QAAQ,KAAK;IAEvC,IAAI,CAACA,OAAO;QACV,OAAOnC;IACT;IAGA,MAAMoC,WAAW;QACfd,MAAM;QACNC,aAAa;QACbC,OAAO,CAAC;;yBAEa,CAAC;QACtBC,UAAU;YACR;gBACEH,MAAM;gBACNC,aAAa;gBACbc,SAAS;oBAAC;iBAAK;YACjB;YACA;gBACEf,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;YACA;gBACED,MAAM;gBACNC,aAAa;YACf;SACD;QACDe,eAAe;YACb;gBACEX,OAAO;gBACPJ,aAAa;gBACbO,cAAc;YAChB;YACA;gBACEH,OAAO;gBACPJ,aAAa;YACf;YACA;gBACEI,OAAO;gBACPJ,aAAa;YACf;YACA;gBACEI,OAAO;gBACPJ,aAAa;YACf;YACA;gBACEI,OAAO;gBACPJ,aAAa;YACf;YACA;gBACEI,OAAO;gBACPJ,aAAa;YACf;YACA;gBACEI,OAAO;gBACPJ,aAAa;YACf;SACD;QACDM,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IAEA,OAAO/B,cAAcmC,UAAU,CAACG;AAClC"}