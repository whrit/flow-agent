{"version":3,"sources":["../../../src/cli/command-registry.js"],"sourcesContent":["// command-registry.js - Extensible command registration system\nimport process from 'process';\nimport { initCommand } from './simple-commands/init/index.js';\nimport { memoryCommand } from './simple-commands/memory.js';\nimport { memoryConsolidationCommand } from './simple-commands/memory-consolidation.js';\nimport { sparcCommand } from './simple-commands/sparc.js';\nimport { agentCommand } from './simple-commands/agent.js';\nimport { taskCommand } from './simple-commands/task.js';\nimport { configCommand } from './simple-commands/config.js';\nimport { statusCommand } from './simple-commands/status.js';\nimport { mcpCommand } from './simple-commands/mcp.js';\nimport { monitorCommand } from './simple-commands/monitor.js';\nimport { startCommand } from './simple-commands/start.js';\nimport { swarmCommand } from './simple-commands/swarm.js';\nimport { batchManagerCommand } from './simple-commands/batch-manager.js';\nimport { githubCommand } from './simple-commands/github.js';\nimport { trainingAction } from './simple-commands/training.js';\nimport { analysisAction } from './simple-commands/analysis.js';\nimport { automationAction } from './simple-commands/automation.js';\nimport { coordinationAction } from './simple-commands/coordination.js';\nimport { hooksAction } from './simple-commands/hooks.js';\nimport { hookSafetyCommand } from './simple-commands/hook-safety.js';\nimport { hiveMindCommand } from './simple-commands/hive-mind.js';\nimport { HelpFormatter } from './help-formatter.js';\nimport hiveMindOptimizeCommand from './simple-commands/hive-mind-optimize.js';\nimport { neuralCommand } from './simple-commands/neural.js';\nimport { goalCommand } from './simple-commands/goal.js';\nimport {\n  showUnifiedMetrics,\n  fixTaskAttribution,\n} from './simple-commands/swarm-metrics-integration.js';\nimport { migrateHooksCommand, migrateHooksCommandConfig } from './simple-commands/migrate-hooks.js';\nimport {\n  fixHookVariablesCommand,\n  fixHookVariablesCommandConfig,\n} from './simple-commands/fix-hook-variables.js';\nimport { \n  initializePerformanceTracking,\n  trackCommandExecution \n} from './simple-commands/performance-hooks.js';\n// Maestro commands integrated with clean implementation\n// Note: Maestro TypeScript commands now integrated directly in ./commands/maestro.ts\n// Note: TypeScript imports commented out for Node.js compatibility\n// import { ruvSwarmAction } from './commands/ruv-swarm.ts';\n// import { configIntegrationAction } from './commands/config-integration.ts';\n\n// Command registry for extensible CLI\nexport const commandRegistry = new Map();\n\n// Register core commands\nexport function registerCoreCommands() {\n  commandRegistry.set('init', {\n    handler: initCommand,\n    description: 'Initialize Claude Code integration files and SPARC development environment',\n    usage: 'init [--force] [--minimal] [--sparc]',\n    examples: [\n      'npx claude-flow@latest init --sparc  # Recommended: Full SPARC setup',\n      'init --sparc                         # Initialize with SPARC modes',\n      'init --force --minimal               # Minimal setup, overwrite existing',\n      'init --sparc --force                 # Force SPARC setup',\n    ],\n    details: `\nThe --sparc flag creates a complete development environment:\n  • .roomodes file containing 17 specialized SPARC modes\n  • CLAUDE.md for AI-readable project instructions\n  • Pre-configured modes: architect, code, tdd, debug, security, and more\n  • Ready for TDD workflows and automated code generation\n  \nFirst-time users should run: npx claude-flow@latest init --sparc`,\n  });\n\n  commandRegistry.set('start', {\n    handler: startCommand,\n    description: 'Start the Claude-Flow orchestration system',\n    usage: 'start [--daemon] [--port <port>] [--verbose] [--ui] [--web]',\n    examples: [\n      'start                    # Start in interactive mode',\n      'start --daemon           # Start as background daemon',\n      'start --port 8080        # Use custom MCP port',\n      'start --verbose          # Show detailed system activity',\n      'start --ui               # Launch terminal-based UI',\n      'start --web              # Launch web-based UI',\n    ],\n  });\n\n  // Add start-ui as a convenient alias for launching the UI\n  commandRegistry.set('start-ui', {\n    handler: async (args, flags) => {\n      // Import and use the direct UI launcher\n      const { launchUI } = await import('./simple-commands/start-ui.js');\n      // Pass the full raw arguments from process.argv\n      const fullArgs = process.argv.slice(3); // Skip node, script, and command\n      return launchUI(fullArgs);\n    },\n    description: 'Start the UI interface (web UI by default)',\n    usage: 'start-ui [--port <port>] [--terminal]',\n    examples: [\n      'start-ui                 # Launch web-based UI (default)',\n      'start-ui --port 3000     # Use custom port',\n      'start-ui --terminal      # Launch terminal-based UI instead',\n    ],\n  });\n\n  commandRegistry.set('memory', {\n    handler: memoryCommand,\n    description: 'Memory management operations',\n    usage: 'memory <subcommand> [options]',\n    examples: [\n      'memory store key \"value\"',\n      'memory query search_term',\n      'memory stats',\n      'memory export backup.json',\n    ],\n  });\n\n  commandRegistry.set('memory-consolidate', {\n    handler: memoryConsolidationCommand,\n    description: 'Consolidate fragmented memory stores into unified database',\n    usage: 'memory-consolidate <command> [options]',\n    examples: [\n      'memory-consolidate scan                # Scan for all memory stores',\n      'memory-consolidate plan                # Create consolidation plan',\n      'memory-consolidate execute --force     # Execute consolidation',\n      'memory-consolidate report              # Generate report',\n    ],\n    details: `\nMemory Consolidation Features:\n  • Discovers all memory storage locations (JSON & SQLite)\n  • Creates automatic backups before consolidation\n  • Merges all stores into unified SQLite database\n  • Optimizes with indices for better performance\n  • Maintains backward compatibility\n  \nBenefits:\n  • Single source of truth for all memory data\n  • Improved query performance with indices\n  • Reduced disk fragmentation\n  • Easier backup and restore\n  • Cross-session persistence`,\n  });\n\n  commandRegistry.set('sparc', {\n    handler: sparcCommand,\n    description: 'SPARC development mode operations',\n    usage: 'sparc [subcommand] [options]',\n    examples: [\n      'sparc \"orchestrate full app development\"  # Default: sparc orchestrator',\n      'sparc modes                               # List available modes',\n      'sparc run code \"implement feature\"        # Run specific mode',\n      'sparc tdd \"feature description\"           # TDD workflow',\n      'sparc info architect                      # Mode details',\n    ],\n  });\n\n  // Note: Maestro commands are now handled by TypeScript module\n  // See src/cli/commands/maestro.ts for the clean implementation\n  commandRegistry.set('maestro', {\n    handler: () => {\n      console.log('⚠️  Maestro commands have been moved to TypeScript.');\n      console.log('Please use: npx claude-flow maestro help');\n      console.log('Or import from: ./commands/maestro.js after compilation');\n    },\n    description: 'Maestro: Specs-Driven Development with Hive Mind Integration',\n    usage: 'maestro <subcommand> [options]',\n    examples: [\n      'maestro create-spec my-feature --request \"Implement user auth\"',\n      'maestro generate-design my-feature',\n      'maestro generate-tasks my-feature',\n      'maestro implement-task my-feature 1',\n      'maestro approve-phase my-feature',\n      'maestro status my-feature --detailed',\n      'maestro init-steering api-design',\n      'maestro help',\n    ],\n  });\n\n  commandRegistry.set('agent', {\n    handler: agentCommand,\n    description: 'Manage AI agents and hierarchies',\n    usage: 'agent <subcommand> [options]',\n    examples: [\n      'agent spawn researcher --name \"DataBot\"',\n      'agent list --verbose',\n      'agent hierarchy create enterprise',\n      'agent ecosystem status',\n    ],\n  });\n\n  commandRegistry.set('task', {\n    handler: taskCommand,\n    description: 'Manage tasks and workflows',\n    usage: 'task <subcommand> [options]',\n    examples: [\n      'task create research \"Market analysis\"',\n      'task list --filter running',\n      'task workflow examples/dev-flow.json',\n      'task coordination status',\n    ],\n  });\n\n  commandRegistry.set('config', {\n    handler: configCommand,\n    description: 'Manage system configuration',\n    usage: 'config <subcommand> [options]',\n    examples: [\n      'config init',\n      'config set terminal.poolSize 15',\n      'config get orchestrator.maxConcurrentTasks',\n      'config validate',\n    ],\n  });\n\n  commandRegistry.set('status', {\n    handler: statusCommand,\n    description: 'Show system status and health',\n    usage: 'status [--verbose] [--json]',\n    examples: ['status', 'status --verbose', 'status --json'],\n  });\n\n  commandRegistry.set('mcp', {\n    handler: mcpCommand,\n    description: 'Manage MCP server and tools',\n    usage: 'mcp <subcommand> [options]',\n    examples: ['mcp status', 'mcp start --port 8080', 'mcp tools --verbose', 'mcp auth setup'],\n  });\n\n  commandRegistry.set('monitor', {\n    handler: monitorCommand,\n    description: 'Real-time system monitoring',\n    usage: 'monitor [--watch] [--interval <ms>]',\n    examples: [\n      'monitor',\n      'monitor --watch',\n      'monitor --interval 1000 --watch',\n      'monitor --format json',\n    ],\n  });\n\n  commandRegistry.set('swarm', {\n    handler: swarmCommand,\n    description: 'Swarm-based AI agent coordination',\n    usage: 'swarm <objective> [options]',\n    examples: [\n      'swarm \"Build a REST API\"',\n      'swarm \"Research cloud architecture\" --strategy research',\n      'swarm \"Analyze data\" --max-agents 3 --parallel',\n      'swarm \"Development task\" --ui --monitor --background',\n    ],\n  });\n\n  commandRegistry.set('hive-mind', {\n    handler: hiveMindCommand,\n    description: '🧠 Advanced Hive Mind swarm intelligence with collective decision-making',\n    usage: 'hive-mind <subcommand> [options]',\n    examples: [\n      'hive-mind init                          # Initialize hive mind system',\n      'hive-mind spawn \"Build microservices\"   # Create swarm with objective',\n      'hive-mind wizard                        # Interactive setup wizard',\n      'hive-mind status                        # View active swarms',\n      'hive-mind consensus                     # View consensus decisions',\n      'hive-mind metrics                       # Performance analytics',\n    ],\n    customHelp: true, // Use command's own help function\n    details: `\nHive Mind System Features:\n  • Queen-led coordination with specialized worker agents\n  • Collective memory and knowledge sharing\n  • Consensus building for critical decisions  \n  • Auto-scaling based on workload\n  • Parallel task execution with work stealing\n  • Real-time monitoring and metrics\n  • SQLite-backed persistence\n  • MCP tool integration for 87+ operations\n\nQueen Types:\n  • Strategic - Long-term planning and optimization\n  • Tactical - Task prioritization and rapid response\n  • Adaptive - Learning and strategy evolution\n\nWorker Types:\n  • Researcher, Coder, Analyst, Tester\n  • Architect, Reviewer, Optimizer, Documenter\n\nUse 'hive-mind wizard' for interactive setup or 'hive-mind help' for full documentation.`,\n  });\n\n  commandRegistry.set('hive-mind-optimize', {\n    handler: hiveMindOptimizeCommand,\n    description: '🔧 Optimize hive mind database for better performance',\n    usage: 'hive-mind-optimize [options]',\n    examples: [\n      'hive-mind-optimize                      # Interactive optimization wizard',\n      'hive-mind-optimize --auto               # Auto-optimize with defaults',\n      'hive-mind-optimize --report             # Generate optimization report',\n      'hive-mind-optimize --clean-memory --memory-days 60',\n      'hive-mind-optimize --auto --vacuum --archive-tasks',\n    ],\n    details: `\nHive Mind Database Optimization Features:\n  • Safe, backward-compatible optimizations\n  • Performance indexes for 50% faster queries\n  • Memory cleanup and archiving\n  • Task archival for space management\n  • Behavioral pattern tracking\n  • Database integrity checking\n  \nOptimization Levels:\n  • v1.0 → v1.1: Basic performance indexes\n  • v1.1 → v1.2: Advanced query optimization\n  • v1.2 → v1.3: Performance tracking tables\n  • v1.3 → v1.4: Memory optimization features\n  • v1.4 → v1.5: Behavioral analysis tracking\n\nSafety Features:\n  • Automatic backups before major operations\n  • All changes are backward-compatible\n  • Existing data is always preserved\n  • Rollback capability on errors`,\n  });\n\n  commandRegistry.set('swarm-metrics', {\n    handler: async (args, flags) => {\n      const subcommand = args[0];\n      if (subcommand === 'fix') {\n        return await fixTaskAttribution();\n      } else {\n        return await showUnifiedMetrics();\n      }\n    },\n    description: 'Unified swarm metrics and task attribution diagnostics',\n    usage: 'swarm-metrics [fix] [options]',\n    examples: [\n      'swarm-metrics                    # Show unified metrics from all swarm systems',\n      'swarm-metrics fix                # Fix task attribution issues between systems',\n    ],\n    details: `\nSwarm Metrics Integration Features:\n  • Unified view of hive-mind and ruv-swarm metrics\n  • Task attribution diagnosis and repair\n  • Cross-system swarm performance comparison\n  • Database integration status checking\n  • Automatic sample task creation for empty swarms\n\nThis command helps resolve issues where:\n  • Overall task statistics show correctly but per-swarm shows 0/0\n  • Multiple swarm systems are not properly integrated\n  • Task assignments are missing or incorrectly attributed\n\nUse 'swarm-metrics fix' to automatically repair attribution issues.`,\n  });\n\n  commandRegistry.set('batch', {\n    handler: batchManagerCommand,\n    description: 'Batch operation management and configuration utilities',\n    usage: 'batch <command> [options]',\n    examples: [\n      'batch create-config my-batch.json',\n      'batch create-config --interactive',\n      'batch validate-config my-batch.json',\n      'batch estimate my-batch.json',\n      'batch list-templates',\n      'batch list-environments',\n    ],\n    details: `\nBatch operations support:\n  • Multiple project initialization with templates\n  • Environment-specific configurations (dev, staging, prod)\n  • Parallel processing with resource management\n  • Progress tracking and detailed reporting\n  • Configuration validation and estimation tools\n  \nUse with init command:\n  claude-flow init --batch-init project1,project2,project3\n  claude-flow init --config batch-config.json --parallel`,\n  });\n\n  commandRegistry.set('github', {\n    handler: githubCommand,\n    description: 'GitHub workflow automation with 6 specialized modes',\n    usage: 'github <mode> <objective> [options]',\n    examples: [\n      'github pr-manager \"create feature PR with automated testing\"',\n      'github gh-coordinator \"setup CI/CD pipeline\" --auto-approve',\n      'github release-manager \"prepare v2.0.0 release\"',\n      'github repo-architect \"optimize repository structure\"',\n      'github issue-tracker \"analyze project roadmap issues\"',\n      'github sync-coordinator \"sync package versions across repos\"',\n    ],\n    details: `\nGitHub automation modes:\n  • gh-coordinator: GitHub workflow orchestration and coordination\n  • pr-manager: Pull request management with multi-reviewer coordination\n  • issue-tracker: Issue management and project coordination\n  • release-manager: Release coordination and deployment pipelines\n  • repo-architect: Repository structure optimization\n  • sync-coordinator: Multi-package synchronization and version alignment\n  \nAdvanced features:\n  • Multi-reviewer coordination with automated scheduling\n  • Intelligent issue categorization and assignment\n  • Automated testing integration and quality gates\n  • Release pipeline orchestration with rollback capabilities`,\n  });\n\n  commandRegistry.set('training', {\n    handler: trainingAction,\n    description: 'Neural pattern learning and model updates',\n    usage: 'training <command> [options]',\n    examples: [\n      'training neural-train --data recent --model task-predictor',\n      'training pattern-learn --operation \"file-creation\" --outcome \"success\"',\n      'training model-update --agent-type coordinator --operation-result \"efficient\"',\n    ],\n    details: `\nNeural training commands:\n  • neural-train: Train neural patterns from operations\n  • pattern-learn: Learn from specific operation outcomes\n  • model-update: Update agent models with new insights\n  \nImproves task selection accuracy, agent performance prediction, and coordination efficiency.`,\n  });\n\n  commandRegistry.set('analysis', {\n    handler: analysisAction,\n    description: 'Performance and usage analytics',\n    usage: 'analysis <command> [options]',\n    examples: [\n      'analysis bottleneck-detect --scope system',\n      'analysis performance-report --timeframe 7d --format detailed',\n      'analysis token-usage --breakdown --cost-analysis',\n    ],\n    details: `\nAnalysis commands:\n  • bottleneck-detect: Detect performance bottlenecks in the system\n  • performance-report: Generate comprehensive performance reports\n  • token-usage: Analyze token consumption and costs\n  \nHelps with performance optimization, cost management, and resource allocation.`,\n  });\n\n  commandRegistry.set('automation', {\n    handler: automationAction,\n    description: 'Intelligent agent and workflow management with MLE-STAR and Claude integration',\n    usage: 'automation <command> [options]',\n    examples: [\n      'automation auto-agent --task-complexity enterprise --swarm-id swarm-123',\n      'automation smart-spawn --requirement \"web-development\" --max-agents 8',\n      'automation workflow-select --project-type api --priority speed',\n      'automation run-workflow my-workflow.json --claude --non-interactive',\n      'automation mle-star --dataset data/train.csv --target price --claude',\n    ],\n    details: `\nAutomation commands:\n  • auto-agent: Automatically spawn optimal agents based on task complexity\n  • smart-spawn: Intelligently spawn agents based on specific requirements\n  • workflow-select: Select and configure optimal workflows for project types\n  • run-workflow: Execute workflows from JSON/YAML files with Claude integration\n  • mle-star: Run MLE-STAR Machine Learning Engineering workflow (flagship)\n  \nNew features:\n  • Claude CLI integration for actual execution\n  • MLE-STAR methodology for ML engineering\n  • Non-interactive mode for CI/CD integration\n  • Comprehensive workflow templates\n  \nProvides optimal resource allocation, intelligent agent selection, and complete automation workflows.`,\n  });\n\n  commandRegistry.set('coordination', {\n    handler: coordinationAction,\n    description: 'Swarm and agent orchestration',\n    usage: 'coordination <command> [options]',\n    examples: [\n      'coordination swarm-init --topology hierarchical --max-agents 8',\n      'coordination agent-spawn --type developer --name \"api-dev\" --swarm-id swarm-123',\n      'coordination task-orchestrate --task \"Build REST API\" --strategy parallel',\n    ],\n    details: `\nCoordination commands:\n  • swarm-init: Initialize swarm coordination infrastructure\n  • agent-spawn: Spawn and coordinate new agents\n  • task-orchestrate: Orchestrate task execution across agents\n  \nEnables intelligent task distribution, agent synchronization, and shared memory coordination.`,\n  });\n\n  commandRegistry.set('hooks', {\n    handler: hooksAction,\n    description: 'Lifecycle event management',\n    usage: 'hooks <command> [options]',\n    examples: [\n      'hooks pre-task --description \"Build API\" --task-id task-123',\n      'hooks post-task --task-id task-123 --analyze-performance --generate-insights',\n      'hooks session-end --export-metrics --generate-summary',\n    ],\n    details: `\nHooks commands:\n  • pre-task: Execute before task begins (preparation & setup)\n  • post-task: Execute after task completion (analysis & cleanup)\n  • pre-edit: Execute before file modifications (backup & validation)\n  • post-edit: Execute after file modifications (tracking & coordination)\n  • session-end: Execute at session termination (cleanup & export)\n  \nEnables automated preparation & cleanup, performance tracking, and coordination synchronization.`,\n  });\n\n  commandRegistry.set('hook-safety', {\n    handler: hookSafetyCommand,\n    description: '🚨 Critical hook safety system - Prevent infinite loops & financial damage',\n    usage: 'hook-safety <command> [options]',\n    examples: [\n      'hook-safety validate                           # Check for dangerous hook configurations',\n      'hook-safety validate --config ~/.claude/settings.json',\n      'hook-safety status                             # View safety status and context',\n      'hook-safety reset                              # Reset circuit breakers',\n      'hook-safety safe-mode                          # Enable safe mode (skip all hooks)',\n    ],\n    details: `\n🚨 CRITICAL: Stop hooks calling 'claude' commands create INFINITE LOOPS that can:\n  • Bypass API rate limits\n  • Cost thousands of dollars per day  \n  • Make your system unresponsive\n\nHook Safety commands:\n  • validate: Check Claude Code settings for dangerous patterns\n  • status: Show current safety status and execution context\n  • reset: Reset circuit breakers and execution counters  \n  • safe-mode: Enable/disable safe mode (skips all hooks)\n\nSAFE ALTERNATIVES:\n  • Use PostToolUse hooks instead of Stop hooks\n  • Implement flag-based update patterns\n  • Use 'claude --skip-hooks' for manual updates\n  • Create conditional execution scripts\n\nFor more information: https://github.com/ruvnet/claude-flow/issues/166`,\n  });\n\n  commandRegistry.set('migrate-hooks', migrateHooksCommandConfig);\n\n  commandRegistry.set('fix-hook-variables', {\n    handler: fixHookVariablesCommand,\n    ...fixHookVariablesCommandConfig,\n  });\n\n  // Verification system commands\n  commandRegistry.set('verify', {\n    handler: async (args, flags) => {\n      try {\n        const { verificationCommand } = await import('./simple-commands/verification.js');\n        return await verificationCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading verification module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '🔍 Verification and truth enforcement system',\n    usage: 'verify <subcommand> [options]',\n    examples: [\n      'verify status                    # Show verification system status',\n      'verify check --taskId task-123   # Run verification checks',\n      'verify validate --taskId task-456 # Validate task results',\n      'verify config                    # Manage verification config',\n      'verify cleanup --force           # Clean up old verification data',\n    ],\n    details: `\nVerification system commands:\n  • status: Show current system status and health\n  • check: Run verification checks on tasks\n  • validate: Validate task completion and results\n  • config: Manage verification configuration\n  • cleanup: Clean up old verification data\n  • pre-task: Execute pre-task verification\n  • post-task: Execute post-task validation\n  • integration: Run integration tests\n  • truth: Execute truth telemetry checks\n  • rollback: Trigger rollback if needed\n\nTruth enforcement features:\n  • 0.95 minimum truth threshold\n  • Cross-agent integration testing\n  • Automated rollback on failures\n  • Cryptographic verification\n  • Byzantine fault tolerance`,\n  });\n\n  commandRegistry.set('truth', {\n    handler: async (args, flags) => {\n      try {\n        const { truthCommand } = await import('./simple-commands/verification.js');\n        return await truthCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading verification module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '🎯 Truth telemetry and accuracy scoring',\n    usage: 'truth [options]',\n    examples: [\n      'truth                            # Show current truth scores',\n      'truth --taskId task-123          # Check truth for specific task',\n      'truth --threshold 0.95           # Set minimum truth threshold',\n      'truth --report                   # Generate truth report',\n    ],\n    details: `\nTruth scoring system:\n  • Real-time truth metrics collection\n  • Agent performance scoring\n  • System-wide truth accuracy tracking\n  • Automated alerting for threshold violations\n  • Dashboard data export functionality\n\nTarget metrics:\n  • >95% truth accuracy rate\n  • <10% human intervention rate\n  • >90% integration success rate\n  • <5% automated rollback frequency`,\n  });\n\n  commandRegistry.set('neural', {\n    handler: neuralCommand,\n    description: '🧠 Neural module commands for SAFLA self-learning systems',\n    usage: 'neural <command> [options]',\n    examples: [\n      'neural init                      # Initialize neural module',\n      'neural init --force              # Force overwrite existing',\n      'neural init --target ./agents    # Custom location',\n    ],\n    details: `\nNeural Module Features:\n  • Self-Aware Feedback Loop Algorithm (SAFLA)\n  • 4-tier memory system (Vector, Episodic, Semantic, Working)\n  • 172,000+ ops/sec processing with WASM optimization\n  • 60% memory compression while maintaining recall\n  • Cross-session learning and persistence\n  • Distributed neural training with MCP integration`,\n  });\n\n  commandRegistry.set('goal', {\n    handler: goalCommand,\n    description: '🎯 Goal module commands for GOAP intelligent planning',\n    usage: 'goal <command> [options]',\n    examples: [\n      'goal init                        # Initialize goal module',\n      'goal init --force                # Force overwrite existing',\n      'goal init --target ./agents      # Custom location',\n    ],\n    details: `\nGoal Module Features:\n  • Goal-Oriented Action Planning (GOAP) algorithm\n  • A* pathfinding for optimal plan generation\n  • OODA loop execution monitoring\n  • Adaptive replanning on failures\n  • Mixed LLM + code execution\n  • Cost-optimized action sequences`,\n  });\n\n  commandRegistry.set('pair', {\n    handler: async (args, flags) => {\n      try {\n        const pairCommand = (await import('./simple-commands/pair.js')).default;\n        return await pairCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading pair module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '👥 Interactive pair programming with AI assistance',\n    usage: 'pair [options]',\n    examples: [\n      'pair --start                     # Start pair programming session',\n      'pair --start --mode driver       # You write, AI assists',\n      'pair --start --verify --test     # Enable verification and testing',\n      'pair --status                    # Show session status',\n      'pair --end                       # End current session',\n    ],\n    details: `\nPair programming features:\n  • Three modes: driver, navigator, switch\n  • Real-time code assistance\n  • Optional verification and testing\n  • Session persistence\n  • Background execution support`,\n  });\n\n  commandRegistry.set('verify-train', {\n    handler: async (args, flags) => {\n      try {\n        const { verificationTrainingCommand } = await import('./simple-commands/verification-training-integration.js');\n        return await verificationTrainingCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading verification-training module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '🧠 Verification-Training integration for continuous improvement',\n    usage: 'verify-train <command> [options]',\n    examples: [\n      'verify-train status              # Show training status',\n      'verify-train feed                # Feed verification data to training',\n      'verify-train predict coder       # Predict verification outcome',\n      'verify-train recommend           # Get agent recommendations',\n      'verify-train train               # Trigger neural training',\n    ],\n    details: `\nVerification-Training Integration:\n  • Feeds verification results to training system\n  • Learns from agent performance over time\n  • Predicts verification outcomes\n  • Recommends best agents for tasks\n  • Improves reliability through continuous learning`,\n  });\n\n  commandRegistry.set('train-pipeline', {\n    handler: async (args, flags) => {\n      try {\n        // Always use real execution - no more simulation\n        const { trainingPipelineCommand } = await import('./simple-commands/training-pipeline.js');\n        return await trainingPipelineCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading training-pipeline module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '🚀 Real training pipeline with actual code execution and learning',\n    usage: 'train-pipeline <command> [options]',\n    examples: [\n      'train-pipeline run               # Run training with real code',\n      'train-pipeline run --complexity hard --iterations 5',\n      'train-pipeline generate          # Generate real training tasks',\n      'train-pipeline validate          # Validate current performance',\n      'train-pipeline status            # Show pipeline status with real metrics',\n    ],\n    details: `\nReal Training Pipeline Features:\n  • Creates actual code files and tests\n  • Runs real npm test commands\n  • Learns from actual test results\n  • Validates improvements with real metrics\n  • Applies learned optimizations to production\n  \nPipeline Stages:\n  1. Generate real code tasks (easy/medium/hard)\n  2. Execute with different strategies using npm\n  3. Learn from real test results\n  4. Validate actual improvements\n  5. Apply to production configuration\n  \nOptions:\n  --complexity <level> Task complexity (easy/medium/hard)\n  --iterations <n>     Number of training iterations`,\n  });\n\n  commandRegistry.set('stream-chain', {\n    handler: async (args, flags) => {\n      try {\n        const { streamChainCommand } = await import('./simple-commands/stream-chain.js');\n        return await streamChainCommand(args, flags);\n      } catch (error) {\n        console.error('❌ Error loading stream-chain module:', error.message);\n        console.log('Error details:', error);\n      }\n    },\n    description: '🔗 Connect multiple Claude instances via stream-json for chained workflows',\n    usage: 'stream-chain <subcommand> [options]',\n    examples: [\n      'stream-chain run \"analyze\" \"design\" \"implement\"  # Custom chain',\n      'stream-chain demo                                 # Run demo chain', \n      'stream-chain pipeline analysis                    # Run analysis pipeline',\n      'stream-chain test                                 # Test stream connection',\n      'stream-chain help                                 # Show detailed help',\n    ],\n    details: `\n📚 SUBCOMMANDS\n    run <p1> <p2> [...]  Execute custom chain (min 2 prompts)\n    demo                 Run 3-step demo chain\n    pipeline <type>      Run predefined pipeline (analysis/refactor/test/optimize)\n    test                 Test stream connection\n    help                 Show comprehensive documentation\n\n⚙️  OPTIONS\n    --verbose            Show detailed execution info\n    --timeout <seconds>  Timeout per step (default: 30)\n    --debug              Enable debug mode\n\n🔄 STREAM CHAINING\n    Chains multiple Claude Code calls with context preservation:\n    • Step 1 outputs stream-json → Step 2 receives context → Step 3...\n    • 100% context preservation between steps\n    • Real execution with Claude Code (not simulated)\n\n🚀 PIPELINES\n    analysis  - Analyze → Identify issues → Generate report\n    refactor  - Find opportunities → Create plan → Apply changes\n    test      - Analyze coverage → Design cases → Generate tests\n    optimize  - Profile code → Find bottlenecks → Apply optimizations\n\n⚡ PERFORMANCE\n    • Latency: ~10-30s per step\n    • Context: Full preservation\n    • Streaming: No intermediate files\n\n📖 For full documentation: stream-chain help`,\n  });\n\n  commandRegistry.set('hive', {\n    handler: async (args, flags) => {\n      try {\n        // Try to load the hive command module\n        const { hiveAction } = await import('./commands/hive.js');\n        return hiveAction({ args, flags, command: 'hive' });\n      } catch (error) {\n        // Fallback to simple implementation if module not found\n        console.log('🐝 Hive Mind - Advanced Multi-Agent Coordination');\n        console.log('');\n        console.log('The Hive Mind system provides:');\n        console.log('  • Consensus-based decision making');\n        console.log('  • Distributed task orchestration');\n        console.log('  • Quality-driven execution');\n        console.log('  • Real-time swarm monitoring');\n        console.log('');\n        console.log('Usage: hive <objective> [options]');\n        console.log('');\n        console.log('For full functionality, ensure the hive module is properly built.');\n      }\n    },\n    description: 'Hive Mind - Advanced multi-agent swarm with consensus',\n    usage: 'hive <objective> [options]',\n    examples: [\n      'hive \"Build microservices architecture\"',\n      'hive \"Optimize database performance\" --consensus unanimous',\n      'hive \"Develop ML pipeline\" --topology mesh --monitor',\n      'hive \"Create REST API\" --sparc --max-agents 8',\n      'hive \"Research cloud patterns\" --background --quality-threshold 0.9',\n    ],\n    details: `\nHive Mind features:\n  • 👑 Queen-led orchestration with specialized agents\n  • 🗳️ Consensus mechanisms (quorum, unanimous, weighted, leader)\n  • 🏗️ Multiple topologies (hierarchical, mesh, ring, star)\n  • 📊 Real-time monitoring dashboard\n  • 🧪 SPARC methodology integration\n  • 💾 Distributed memory and knowledge sharing\n  \nAgent types:\n  • Queen: Orchestrator and decision maker\n  • Architect: System design and planning  \n  • Worker: Implementation and execution\n  • Scout: Research and exploration\n  • Guardian: Quality and validation\n  \nOptions:\n  --topology <type>         Swarm topology (default: hierarchical)\n  --consensus <type>        Decision mechanism (default: quorum)\n  --max-agents <n>          Maximum agents (default: 8)\n  --quality-threshold <n>   Min quality 0-1 (default: 0.8)\n  --sparc                   Use SPARC methodology\n  --monitor                 Real-time monitoring\n  --background              Run in background`,\n  });\n\n  // Temporarily commented out for Node.js compatibility\n  /*\n  commandRegistry.set('ruv-swarm', {\n    handler: ruvSwarmAction,\n    description: 'Advanced AI swarm coordination with neural capabilities',\n    usage: 'ruv-swarm <command> [options]',\n    examples: [\n      'ruv-swarm init --topology mesh --max-agents 8',\n      'ruv-swarm spawn researcher --name \"AI Researcher\"',\n      'ruv-swarm orchestrate \"Build a REST API\"',\n      'ruv-swarm neural train --iterations 20',\n      'ruv-swarm benchmark --type swarm',\n      'ruv-swarm config show',\n      'ruv-swarm status --verbose'\n    ],\n    details: `\nAdvanced swarm coordination features:\n  • 84.8% SWE-Bench solve rate\n  • 32.3% token reduction through coordination\n  • 2.8-4.4x speed improvement via parallel execution\n  • 27+ neural models for cognitive approaches\n  • Persistent memory across sessions\n  • Automatic topology optimization\n  \nCommands:\n  init        - Initialize swarm with specified topology\n  status      - Get current swarm status and metrics\n  spawn       - Spawn specialized agents (researcher, coder, analyst, etc.)\n  orchestrate - Coordinate complex tasks across agents\n  neural      - Neural pattern training and management\n  benchmark   - Performance testing and optimization\n  config      - Configuration management\n  memory      - Memory usage and coordination data`\n  });\n  */\n\n  // Additional ruv-swarm coordination commands - temporarily commented out\n  /*\n  commandRegistry.set('swarm-init', {\n    handler: async (args, flags) => {\n      const { ruvSwarmAction } = await import('./commands/ruv-swarm.js');\n      return ruvSwarmAction({ args: ['init', ...args], flags });\n    },\n    description: 'Quick swarm initialization with topology selection',\n    usage: 'swarm-init [--topology <type>] [--max-agents <n>] [--strategy <type>]',\n    examples: [\n      'swarm-init --topology mesh --max-agents 8',\n      'swarm-init --topology hierarchical --strategy specialized',\n      'swarm-init --topology star --max-agents 5 --strategy balanced'\n    ]\n  });\n\n  commandRegistry.set('neural-spawn', {\n    handler: async (args, flags) => {\n      const { ruvSwarmAction } = await import('./commands/ruv-swarm.js');\n      return ruvSwarmAction({ args: ['spawn', ...args], flags });\n    },\n    description: 'Spawn neural agents with cognitive capabilities',\n    usage: 'neural-spawn <type> [--name <name>] [--capabilities <list>]',\n    examples: [\n      'neural-spawn researcher --name \"Data Analyst\"',\n      'neural-spawn coder --capabilities \"typescript,react,api\"',\n      'neural-spawn coordinator --name \"Project Manager\"'\n    ]\n  });\n\n  commandRegistry.set('memory-coordinate', {\n    handler: async (args, flags) => {\n      const { ruvSwarmAction } = await import('./commands/ruv-swarm.js');\n      return ruvSwarmAction({ args: ['memory', ...args], flags });\n    },\n    description: 'Coordinate memory across swarm agents',\n    usage: 'memory-coordinate [--detail <level>] [--sync] [--compress]',\n    examples: [\n      'memory-coordinate --detail summary',\n      'memory-coordinate --detail detailed --sync',\n      'memory-coordinate --compress --sync'\n    ]\n  });\n\n  commandRegistry.set('config-integration', {\n    handler: configIntegrationAction,\n    description: 'Enhanced configuration management with ruv-swarm integration',\n    usage: 'config-integration <command> [options]',\n    examples: [\n      'config-integration setup --enable-ruv-swarm',\n      'config-integration preset development',\n      'config-integration sync --force',\n      'config-integration status --verbose',\n      'config-integration export my-config.json',\n      'config-integration validate --fix'\n    ],\n    details: `\nAdvanced configuration management features:\n  • Unified configuration across Claude-Flow and ruv-swarm\n  • Configuration presets for different environments\n  • Automatic synchronization between config systems\n  • Import/export capabilities with validation\n  • Real-time status monitoring and validation\n  \nPresets:\n  development  - Hierarchical topology, specialized strategy, 8 agents\n  research     - Mesh topology, adaptive strategy, 12 agents  \n  production   - Star topology, balanced strategy, 6 agents\n  \nCommands:\n  setup        - Initialize ruv-swarm integration\n  sync         - Synchronize configurations\n  status       - Show integration status\n  validate     - Validate all configurations\n  preset       - Apply configuration preset\n  export       - Export unified configuration\n  import       - Import and apply configuration`\n  });\n  */\n}\n\n// Register a new command\nexport function registerCommand(name, command) {\n  if (commandRegistry.has(name)) {\n    console.warn(`Command '${name}' already exists and will be overwritten`);\n  }\n\n  commandRegistry.set(name, {\n    handler: command.handler,\n    description: command.description || 'No description available',\n    usage: command.usage || `${name} [options]`,\n    examples: command.examples || [],\n    hidden: command.hidden || false,\n  });\n}\n\n// Get command handler\nexport function getCommand(name) {\n  return commandRegistry.get(name);\n}\n\n// List all registered commands\nexport function listCommands(includeHidden = false) {\n  const commands = [];\n  for (const [name, command] of commandRegistry.entries()) {\n    if (includeHidden || !command.hidden) {\n      commands.push({\n        name,\n        ...command,\n      });\n    }\n  }\n  return commands.sort((a, b) => a.name.localeCompare(b.name));\n}\n\n// Check if command exists\nexport function hasCommand(name) {\n  return commandRegistry.has(name);\n}\n\n// Execute a command\nexport async function executeCommand(name, subArgs, flags) {\n  const command = commandRegistry.get(name);\n  if (!command) {\n    throw new Error(`Unknown command: ${name}`);\n  }\n\n  try {\n    // Track command execution for performance metrics\n    await trackCommandExecution(name, command.handler, subArgs, flags);\n  } catch (err) {\n    throw new Error(`Command '${name}' failed: ${err.message}`);\n  }\n}\n\n// Helper to show command help\nexport function showCommandHelp(name) {\n  const command = commandRegistry.get(name);\n  if (!command) {\n    console.log(\n      HelpFormatter.formatError(\n        `Unknown command: ${name}`,\n        'claude-flow',\n        'claude-flow <command> [options]',\n      ),\n    );\n    return;\n  }\n\n  // If command has custom help, call it with help flag\n  if (command.customHelp) {\n    command.handler(['--help'], { help: true });\n    return;\n  }\n\n  // Convert command info to standardized format\n  const helpInfo = {\n    name: `claude-flow ${name}`,\n    description: HelpFormatter.stripFormatting(command.description),\n    usage: `claude-flow ${command.usage}`,\n    details: command.details, // Pass through the details section\n  };\n\n  // Parse examples\n  if (command.examples && command.examples.length > 0) {\n    helpInfo.examples = command.examples.map((ex) => {\n      if (ex.startsWith('npx')) {\n        return ex;\n      }\n      return `claude-flow ${ex}`;\n    });\n  }\n\n  // Parse options from details if available\n  if (command.details) {\n    const optionsMatch = command.details.match(/Options:([\\s\\S]*?)(?=\\n\\n|$)/);\n    if (optionsMatch) {\n      const optionsText = optionsMatch[1];\n      const options = [];\n      const optionLines = optionsText.split('\\n').filter((line) => line.trim());\n\n      for (const line of optionLines) {\n        const match = line.match(/^\\s*(--.+?)\\s{2,}(.+)$/);\n        if (match) {\n          let [_, flags, description] = match;\n          // Check for default value in description\n          const defaultMatch = description.match(/\\(default: (.+?)\\)/);\n          const option = {\n            flags: flags.trim(),\n            description: description.replace(/\\(default: .+?\\)/, '').trim(),\n          };\n          if (defaultMatch) {\n            option.defaultValue = defaultMatch[1];\n          }\n          options.push(option);\n        }\n      }\n\n      if (options.length > 0) {\n        helpInfo.options = options;\n      }\n    }\n  }\n\n  console.log(HelpFormatter.formatHelp(helpInfo));\n}\n\n// Helper to show all commands\nexport function showAllCommands() {\n  const commands = listCommands();\n\n  console.log('Available commands:');\n  console.log();\n\n  for (const command of commands) {\n    console.log(`  ${command.name.padEnd(12)} ${command.description}`);\n  }\n\n  console.log();\n  console.log('Use \"claude-flow help <command>\" for detailed usage information');\n}\n\n// Initialize the command registry\nregisterCoreCommands();\n\n// Initialize performance tracking\ninitializePerformanceTracking().catch(err => {\n  // Performance tracking is optional, don't fail if it errors\n  console.error('Failed to initialize performance tracking:', err.message);\n});\n"],"names":["process","initCommand","memoryCommand","memoryConsolidationCommand","sparcCommand","agentCommand","taskCommand","configCommand","statusCommand","mcpCommand","monitorCommand","startCommand","swarmCommand","batchManagerCommand","githubCommand","trainingAction","analysisAction","automationAction","coordinationAction","hooksAction","hookSafetyCommand","hiveMindCommand","HelpFormatter","hiveMindOptimizeCommand","neuralCommand","goalCommand","showUnifiedMetrics","fixTaskAttribution","migrateHooksCommandConfig","fixHookVariablesCommand","fixHookVariablesCommandConfig","initializePerformanceTracking","trackCommandExecution","commandRegistry","Map","registerCoreCommands","set","handler","description","usage","examples","details","args","flags","launchUI","fullArgs","argv","slice","console","log","customHelp","subcommand","verificationCommand","error","message","truthCommand","pairCommand","default","verificationTrainingCommand","trainingPipelineCommand","streamChainCommand","hiveAction","command","registerCommand","name","has","warn","hidden","getCommand","get","listCommands","includeHidden","commands","entries","push","sort","a","b","localeCompare","hasCommand","executeCommand","subArgs","Error","err","showCommandHelp","formatError","help","helpInfo","stripFormatting","length","map","ex","startsWith","optionsMatch","match","optionsText","options","optionLines","split","filter","line","trim","_","defaultMatch","option","replace","defaultValue","formatHelp","showAllCommands","padEnd","catch"],"mappings":"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"}