{"version":3,"sources":["../../../src/modes/SparcInit.ts"],"sourcesContent":["/**\n * SparcInit - SPARC methodology initialization mode\n * Sets up Test-Driven Development with SPARC workflow\n */\n\nimport { IInitMode, InitConfig, InitResult } from '../types/interfaces.js';\n\nexport class SparcInit implements IInitMode {\n  getDescription(): string {\n    return 'SPARC (Specification, Pseudocode, Architecture, Refinement, Completion) initialization with TDD workflow';\n  }\n\n  getRequiredComponents(): string[] {\n    return ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry', 'MCPIntegrator'];\n  }\n\n  validate(): boolean {\n    return true; // SPARC mode is always valid\n  }\n\n  async initialize(config: InitConfig): Promise<InitResult> {\n    const components: string[] = [];\n\n    try {\n      // Basic initialization\n      if (config.configManager) {\n        components.push('ConfigManager');\n      }\n\n      if (config.databaseManager) {\n        await config.databaseManager.initialize();\n        components.push('DatabaseManager');\n      }\n\n      // Use hierarchical topology for SPARC workflow stages\n      if (config.topologyManager) {\n        await config.topologyManager.configure('hierarchical', []);\n        components.push('TopologyManager');\n      }\n\n      if (config.agentRegistry) {\n        await config.agentRegistry.initialize();\n        components.push('AgentRegistry');\n      }\n\n      // Spawn SPARC-specific agents\n      if (config.agentRegistry) {\n        // SPARC Coordinator (orchestrates the entire SPARC workflow)\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['sparc-coordination', 'workflow-management', 'tdd-orchestration'],\n          metadata: {\n            role: 'sparc-coordinator',\n            phase: 'all',\n            authority: 'high'\n          }\n        });\n\n        // Specification Agent\n        await config.agentRegistry.spawn('analyst', {\n          capabilities: ['requirement-analysis', 'specification-writing', 'user-story-creation'],\n          metadata: {\n            role: 'specification-agent',\n            phase: 'specification',\n            workflow: 'sparc'\n          }\n        });\n\n        // Pseudocode Agent\n        await config.agentRegistry.spawn('researcher', {\n          capabilities: ['algorithm-design', 'pseudocode-creation', 'logic-planning'],\n          metadata: {\n            role: 'pseudocode-agent',\n            phase: 'pseudocode',\n            workflow: 'sparc'\n          }\n        });\n\n        // Architecture Agent\n        await config.agentRegistry.spawn('reviewer', {\n          capabilities: ['system-architecture', 'design-patterns', 'component-design'],\n          metadata: {\n            role: 'architecture-agent',\n            phase: 'architecture',\n            workflow: 'sparc'\n          }\n        });\n\n        // Refinement Agent (TDD focus)\n        await config.agentRegistry.spawn('coder', {\n          capabilities: ['test-driven-development', 'unit-testing', 'refactoring', 'implementation'],\n          metadata: {\n            role: 'refinement-agent',\n            phase: 'refinement',\n            workflow: 'sparc'\n          }\n        });\n\n        // Completion Agent\n        await config.agentRegistry.spawn('tester', {\n          capabilities: ['integration-testing', 'validation', 'quality-assurance', 'documentation'],\n          metadata: {\n            role: 'completion-agent',\n            phase: 'completion',\n            workflow: 'sparc'\n          }\n        });\n\n        components.push('SparcAgents');\n      }\n\n      // Initialize SPARC MCP integration\n      if (config.mcpIntegrator) {\n        await config.mcpIntegrator.initialize();\n\n        // Test SPARC-related MCP functions\n        const sparcStatus = await config.mcpIntegrator.executeCommand({\n          tool: 'claude-flow',\n          function: 'sparc_mode',\n          parameters: { mode: 'dev', task_description: 'Initialize SPARC workflow' }\n        });\n\n        if (sparcStatus.success) {\n          components.push('SparcMCP');\n        }\n      }\n\n      // Set up SPARC workflow memory structures\n      if (config.databaseManager) {\n        await config.databaseManager.store('sparc-config', {\n          initialized: true,\n          mode: 'sparc',\n          phases: ['specification', 'pseudocode', 'architecture', 'refinement', 'completion'],\n          tddEnabled: true,\n          workflowActive: false,\n          currentPhase: null,\n          timestamp: new Date().toISOString()\n        }, 'sparc');\n\n        // Initialize phase tracking\n        const phases = ['specification', 'pseudocode', 'architecture', 'refinement', 'completion'];\n        for (const phase of phases) {\n          await config.databaseManager.store(`phase-${phase}`, {\n            name: phase,\n            status: 'pending',\n            agent: null,\n            artifacts: [],\n            dependencies: this.getPhaseDependencies(phase)\n          }, 'sparc');\n        }\n\n        // Initialize TDD tracking\n        await config.databaseManager.store('tdd-status', {\n          testSuites: [],\n          coverage: 0,\n          redGreenRefactor: {\n            red: [],\n            green: [],\n            refactor: []\n          }\n        }, 'sparc');\n\n        components.push('SparcMemory');\n      }\n\n      // Set up SPARC workflow templates\n      if (config.databaseManager) {\n        await config.databaseManager.store('workflow-templates', {\n          'feature-development': {\n            phases: phases.map(phase => ({\n              name: phase,\n              description: this.getPhaseDescription(phase),\n              estimatedDuration: this.getPhaseEstimatedDuration(phase),\n              deliverables: this.getPhaseDeliverables(phase)\n            }))\n          }\n        }, 'sparc');\n\n        components.push('SparcTemplates');\n      }\n\n      return {\n        success: true,\n        mode: 'sparc',\n        components,\n        topology: 'hierarchical',\n        message: 'SPARC workflow initialization completed successfully - TDD methodology active',\n        metadata: {\n          sparcPhases: 5,\n          tddEnabled: true,\n          agentSpecialization: true,\n          workflowOrchestration: true,\n          testDrivenDevelopment: true\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        mode: 'sparc',\n        components,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'SPARC initialization failed'\n      };\n    }\n  }\n\n  private getPhaseDependencies(phase: string): string[] {\n    const dependencies: Record<string, string[]> = {\n      'specification': [],\n      'pseudocode': ['specification'],\n      'architecture': ['specification', 'pseudocode'],\n      'refinement': ['specification', 'pseudocode', 'architecture'],\n      'completion': ['specification', 'pseudocode', 'architecture', 'refinement']\n    };\n\n    return dependencies[phase] || [];\n  }\n\n  private getPhaseDescription(phase: string): string {\n    const descriptions: Record<string, string> = {\n      'specification': 'Analyze requirements and create detailed specifications',\n      'pseudocode': 'Design algorithms and create pseudocode representations',\n      'architecture': 'Design system architecture and component structure',\n      'refinement': 'Implement code using Test-Driven Development methodology',\n      'completion': 'Integration testing, validation, and documentation'\n    };\n\n    return descriptions[phase] || 'Unknown phase';\n  }\n\n  private getPhaseEstimatedDuration(phase: string): number {\n    const durations: Record<string, number> = {\n      'specification': 1800, // 30 minutes\n      'pseudocode': 1200,    // 20 minutes\n      'architecture': 2400,  // 40 minutes\n      'refinement': 3600,    // 60 minutes (main implementation)\n      'completion': 1800     // 30 minutes\n    };\n\n    return durations[phase] || 1800;\n  }\n\n  private getPhaseDeliverables(phase: string): string[] {\n    const deliverables: Record<string, string[]> = {\n      'specification': ['Requirements document', 'User stories', 'Acceptance criteria'],\n      'pseudocode': ['Algorithm pseudocode', 'Logic flow diagrams', 'Data structures'],\n      'architecture': ['System architecture', 'Component diagrams', 'API specifications'],\n      'refinement': ['Test suites', 'Implementation code', 'Refactored code'],\n      'completion': ['Integration tests', 'Documentation', 'Deployment artifacts']\n    };\n\n    return deliverables[phase] || [];\n  }\n}"],"names":["SparcInit","getDescription","getRequiredComponents","validate","initialize","config","components","configManager","push","databaseManager","topologyManager","configure","agentRegistry","spawn","capabilities","metadata","role","phase","authority","workflow","mcpIntegrator","sparcStatus","executeCommand","tool","function","parameters","mode","task_description","success","store","initialized","phases","tddEnabled","workflowActive","currentPhase","timestamp","Date","toISOString","name","status","agent","artifacts","dependencies","getPhaseDependencies","testSuites","coverage","redGreenRefactor","red","green","refactor","map","description","getPhaseDescription","estimatedDuration","getPhaseEstimatedDuration","deliverables","getPhaseDeliverables","topology","message","sparcPhases","agentSpecialization","workflowOrchestration","testDrivenDevelopment","error","Error","String","descriptions","durations"],"mappings":"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"}