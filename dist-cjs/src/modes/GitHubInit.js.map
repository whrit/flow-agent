{"version":3,"sources":["../../../src/modes/GitHubInit.ts"],"sourcesContent":["/**\n * GitHubInit - GitHub integration initialization mode\n * Sets up GitHub integration with repository management and workflows\n */\n\nimport { IInitMode, InitConfig, InitResult } from '../types/interfaces.js';\n\nexport class GitHubInit implements IInitMode {\n  getDescription(): string {\n    return 'GitHub integration initialization with repository management, PR automation, and workflow coordination';\n  }\n\n  getRequiredComponents(): string[] {\n    return ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry', 'MCPIntegrator'];\n  }\n\n  validate(): boolean {\n    // Check if GitHub token is available\n    return !!(process.env.GITHUB_TOKEN || process.env.GH_TOKEN);\n  }\n\n  async initialize(config: InitConfig): Promise<InitResult> {\n    const components: string[] = [];\n\n    try {\n      // Validate GitHub configuration\n      if (!this.validate()) {\n        throw new Error('GitHub token not found. Set GITHUB_TOKEN or GH_TOKEN environment variable.');\n      }\n\n      // Basic initialization\n      if (config.configManager) {\n        components.push('ConfigManager');\n      }\n\n      if (config.databaseManager) {\n        await config.databaseManager.initialize();\n        components.push('DatabaseManager');\n      }\n\n      // Use hierarchical topology for GitHub workflows\n      if (config.topologyManager) {\n        await config.topologyManager.configure('hierarchical', []);\n        components.push('TopologyManager');\n      }\n\n      if (config.agentRegistry) {\n        await config.agentRegistry.initialize();\n        components.push('AgentRegistry');\n      }\n\n      // Spawn GitHub-specific agents\n      if (config.agentRegistry) {\n        // PR management agent\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['github-pr', 'code-review', 'workflow-management'],\n          metadata: { specialization: 'github-pr-manager' }\n        });\n\n        // Repository analysis agent\n        await config.agentRegistry.spawn('analyst', {\n          capabilities: ['repository-analysis', 'code-quality', 'security-audit'],\n          metadata: { specialization: 'repo-analyzer' }\n        });\n\n        // Issue tracking agent\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['issue-tracking', 'project-management', 'triage'],\n          metadata: { specialization: 'issue-manager' }\n        });\n\n        // Release coordination agent\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['release-management', 'versioning', 'deployment'],\n          metadata: { specialization: 'release-coordinator' }\n        });\n\n        // Code review agent\n        await config.agentRegistry.spawn('reviewer', {\n          capabilities: ['code-review', 'security-check', 'best-practices'],\n          metadata: { specialization: 'code-reviewer' }\n        });\n\n        components.push('GitHubAgents');\n      }\n\n      // Initialize GitHub MCP integration\n      if (config.mcpIntegrator) {\n        await config.mcpIntegrator.initialize();\n\n        // Test GitHub MCP functions\n        const githubStatus = await config.mcpIntegrator.executeCommand({\n          tool: 'claude-flow',\n          function: 'github_repo_analyze',\n          parameters: { repo: 'test/repo', analysis_type: 'code_quality' }\n        });\n\n        if (githubStatus.success) {\n          components.push('GitHubMCP');\n        }\n      }\n\n      // Set up GitHub-specific memory namespace\n      if (config.databaseManager) {\n        await config.databaseManager.store('github-config', {\n          initialized: true,\n          mode: 'github',\n          features: ['pr-automation', 'issue-tracking', 'code-review', 'release-management'],\n          timestamp: new Date().toISOString()\n        }, 'github');\n        components.push('GitHubMemory');\n      }\n\n      return {\n        success: true,\n        mode: 'github',\n        components,\n        topology: 'hierarchical',\n        message: 'GitHub integration initialization completed successfully',\n        metadata: {\n          githubIntegration: true,\n          prAutomation: true,\n          codeReview: true,\n          issueTracking: true,\n          releaseManagement: true\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        mode: 'github',\n        components,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'GitHub initialization failed'\n      };\n    }\n  }\n}"],"names":["GitHubInit","getDescription","getRequiredComponents","validate","process","env","GITHUB_TOKEN","GH_TOKEN","initialize","config","components","Error","configManager","push","databaseManager","topologyManager","configure","agentRegistry","spawn","capabilities","metadata","specialization","mcpIntegrator","githubStatus","executeCommand","tool","function","parameters","repo","analysis_type","success","store","initialized","mode","features","timestamp","Date","toISOString","topology","message","githubIntegration","prAutomation","codeReview","issueTracking","releaseManagement","error","String"],"mappings":"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"}