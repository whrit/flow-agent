{"version":3,"sources":["../../../src/modes/StandardInit.ts"],"sourcesContent":["/**\n * StandardInit - Standard initialization mode\n * Basic initialization with minimal configuration\n */\n\nimport { IInitMode, InitConfig, InitResult } from '../types/interfaces.js';\n\nexport class StandardInit implements IInitMode {\n  getDescription(): string {\n    return 'Standard initialization mode with basic agent coordination and mesh topology';\n  }\n\n  getRequiredComponents(): string[] {\n    return ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry'];\n  }\n\n  validate(): boolean {\n    return true; // Standard mode is always valid\n  }\n\n  async initialize(config: InitConfig): Promise<InitResult> {\n    const components: string[] = [];\n\n    try {\n      // Set up basic configuration\n      if (config.configManager) {\n        components.push('ConfigManager');\n      }\n\n      // Initialize database\n      if (config.databaseManager) {\n        await config.databaseManager.initialize();\n        components.push('DatabaseManager');\n      }\n\n      // Configure mesh topology (default)\n      if (config.topologyManager) {\n        await config.topologyManager.configure('mesh', []);\n        components.push('TopologyManager');\n      }\n\n      // Initialize agent registry\n      if (config.agentRegistry) {\n        await config.agentRegistry.initialize();\n        components.push('AgentRegistry');\n      }\n\n      // Spawn default agents\n      if (config.agentRegistry) {\n        await config.agentRegistry.spawn('coordinator', { capabilities: ['coordination', 'task-management'] });\n        await config.agentRegistry.spawn('researcher', { capabilities: ['research', 'analysis'] });\n        await config.agentRegistry.spawn('coder', { capabilities: ['programming', 'debugging'] });\n        components.push('DefaultAgents');\n      }\n\n      return {\n        success: true,\n        mode: 'standard',\n        components,\n        topology: 'mesh',\n        message: 'Standard initialization completed successfully'\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        mode: 'standard',\n        components,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'Standard initialization failed'\n      };\n    }\n  }\n}"],"names":["StandardInit","getDescription","getRequiredComponents","validate","initialize","config","components","configManager","push","databaseManager","topologyManager","configure","agentRegistry","spawn","capabilities","success","mode","topology","message","error","Error","String"],"mappings":"AAOA,OAAO,MAAMA;IACXC,iBAAyB;QACvB,OAAO;IACT;IAEAC,wBAAkC;QAChC,OAAO;YAAC;YAAiB;YAAmB;YAAmB;SAAgB;IACjF;IAEAC,WAAoB;QAClB,OAAO;IACT;IAEA,MAAMC,WAAWC,MAAkB,EAAuB;QACxD,MAAMC,aAAuB,EAAE;QAE/B,IAAI;YAEF,IAAID,OAAOE,aAAa,EAAE;gBACxBD,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOI,eAAe,EAAE;gBAC1B,MAAMJ,OAAOI,eAAe,CAACL,UAAU;gBACvCE,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOK,eAAe,EAAE;gBAC1B,MAAML,OAAOK,eAAe,CAACC,SAAS,CAAC,QAAQ,EAAE;gBACjDL,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOO,aAAa,EAAE;gBACxB,MAAMP,OAAOO,aAAa,CAACR,UAAU;gBACrCE,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOO,aAAa,EAAE;gBACxB,MAAMP,OAAOO,aAAa,CAACC,KAAK,CAAC,eAAe;oBAAEC,cAAc;wBAAC;wBAAgB;qBAAkB;gBAAC;gBACpG,MAAMT,OAAOO,aAAa,CAACC,KAAK,CAAC,cAAc;oBAAEC,cAAc;wBAAC;wBAAY;qBAAW;gBAAC;gBACxF,MAAMT,OAAOO,aAAa,CAACC,KAAK,CAAC,SAAS;oBAAEC,cAAc;wBAAC;wBAAe;qBAAY;gBAAC;gBACvFR,WAAWE,IAAI,CAAC;YAClB;YAEA,OAAO;gBACLO,SAAS;gBACTC,MAAM;gBACNV;gBACAW,UAAU;gBACVC,SAAS;YACX;QAEF,EAAE,OAAOC,OAAO;YACd,OAAO;gBACLJ,SAAS;gBACTC,MAAM;gBACNV;gBACAa,OAAOA,iBAAiBC,QAAQD,MAAMD,OAAO,GAAGG,OAAOF;gBACvDD,SAAS;YACX;QACF;IACF;AACF"}