{"version":3,"sources":["../../../src/modes/HiveMindInit.ts"],"sourcesContent":["/**\n * HiveMindInit - Hive Mind initialization mode\n * Sets up collective intelligence with Queen-Worker coordination\n */\n\nimport { IInitMode, InitConfig, InitResult } from '../types/interfaces.js';\n\nexport class HiveMindInit implements IInitMode {\n  getDescription(): string {\n    return 'Hive Mind initialization with collective intelligence, Queen-Worker coordination, and adaptive learning';\n  }\n\n  getRequiredComponents(): string[] {\n    return ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry', 'HiveMindCore', 'ConsensusEngine'];\n  }\n\n  validate(): boolean {\n    return true; // Hive Mind mode is always valid\n  }\n\n  async initialize(config: InitConfig): Promise<InitResult> {\n    const components: string[] = [];\n\n    try {\n      // Basic initialization\n      if (config.configManager) {\n        components.push('ConfigManager');\n      }\n\n      if (config.databaseManager) {\n        await config.databaseManager.initialize();\n        components.push('DatabaseManager');\n      }\n\n      // Use mesh topology for maximum connectivity in hive mind\n      if (config.topologyManager) {\n        await config.topologyManager.configure('mesh', []);\n        components.push('TopologyManager');\n      }\n\n      if (config.agentRegistry) {\n        await config.agentRegistry.initialize();\n        components.push('AgentRegistry');\n      }\n\n      // Initialize consensus engine with proof-of-learning\n      if (config.consensusEngine) {\n        await config.consensusEngine.setAlgorithm('proof-of-learning');\n        components.push('ConsensusEngine');\n      }\n\n      // Spawn Queen and specialized worker agents\n      if (config.agentRegistry) {\n        // Queen agent (strategic coordinator)\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['strategic-planning', 'objective-setting', 'delegation', 'adaptation'],\n          metadata: {\n            role: 'queen',\n            authority: 'high',\n            specialization: 'collective-intelligence'\n          }\n        });\n\n        // Research workers\n        for (let i = 0; i < 2; i++) {\n          await config.agentRegistry.spawn('researcher', {\n            capabilities: ['research', 'analysis', 'data-gathering', 'pattern-recognition'],\n            metadata: {\n              role: 'worker',\n              specialization: 'research',\n              pool: 'research-pool'\n            }\n          });\n        }\n\n        // Development workers\n        for (let i = 0; i < 2; i++) {\n          await config.agentRegistry.spawn('coder', {\n            capabilities: ['programming', 'debugging', 'refactoring', 'architecture'],\n            metadata: {\n              role: 'worker',\n              specialization: 'development',\n              pool: 'development-pool'\n            }\n          });\n        }\n\n        // Testing workers\n        await config.agentRegistry.spawn('tester', {\n          capabilities: ['testing', 'quality-assurance', 'validation', 'performance-testing'],\n          metadata: {\n            role: 'worker',\n            specialization: 'testing',\n            pool: 'testing-pool'\n          }\n        });\n\n        // Optimization workers\n        await config.agentRegistry.spawn('optimizer', {\n          capabilities: ['performance-optimization', 'resource-management', 'bottleneck-analysis'],\n          metadata: {\n            role: 'worker',\n            specialization: 'optimization',\n            pool: 'optimization-pool'\n          }\n        });\n\n        components.push('HiveMindAgents');\n      }\n\n      // Initialize Hive Mind Core\n      if (config.hiveMindCore) {\n        await config.hiveMindCore.initialize();\n        components.push('HiveMindCore');\n      }\n\n      // Set up collective intelligence memory structures\n      if (config.databaseManager) {\n        await config.databaseManager.store('hive-mind-config', {\n          initialized: true,\n          mode: 'hive-mind',\n          queenEnabled: true,\n          workerPools: ['research', 'development', 'testing', 'optimization'],\n          consensusAlgorithm: 'proof-of-learning',\n          adaptationRate: 0.1,\n          timestamp: new Date().toISOString()\n        }, 'hive-mind');\n\n        // Initialize objective tracking\n        await config.databaseManager.store('objectives', {\n          active: [],\n          completed: [],\n          strategies: {}\n        }, 'hive-mind');\n\n        components.push('HiveMindMemory');\n      }\n\n      // Set up initial collective objective\n      if (config.hiveMindCore) {\n        const initialObjective = await config.hiveMindCore.setObjective({\n          description: 'Establish collective intelligence coordination',\n          goals: [\n            { description: 'Optimize inter-agent communication', metric: 'latency', target: 100, weight: 0.3 },\n            { description: 'Maximize task success rate', metric: 'success_rate', target: 0.95, weight: 0.4 },\n            { description: 'Efficient resource utilization', metric: 'efficiency', target: 0.8, weight: 0.3 }\n          ],\n          constraints: [\n            { type: 'resource', description: 'Maximum 8 concurrent agents', value: 8 },\n            { type: 'time', description: 'Continuous operation', value: 'ongoing' }\n          ],\n          priority: 'high'\n        });\n\n        components.push('InitialObjective');\n      }\n\n      return {\n        success: true,\n        mode: 'hive-mind',\n        components,\n        topology: 'mesh',\n        message: 'Hive Mind initialization completed successfully - Collective intelligence active',\n        metadata: {\n          queenEnabled: true,\n          workerPools: 4,\n          totalAgents: 7,\n          consensusAlgorithm: 'proof-of-learning',\n          collectiveIntelligence: true,\n          adaptiveLearning: true\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        mode: 'hive-mind',\n        components,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'Hive Mind initialization failed'\n      };\n    }\n  }\n}"],"names":["HiveMindInit","getDescription","getRequiredComponents","validate","initialize","config","components","configManager","push","databaseManager","topologyManager","configure","agentRegistry","consensusEngine","setAlgorithm","spawn","capabilities","metadata","role","authority","specialization","i","pool","hiveMindCore","store","initialized","mode","queenEnabled","workerPools","consensusAlgorithm","adaptationRate","timestamp","Date","toISOString","active","completed","strategies","initialObjective","setObjective","description","goals","metric","target","weight","constraints","type","value","priority","success","topology","message","totalAgents","collectiveIntelligence","adaptiveLearning","error","Error","String"],"mappings":"AAOA,OAAO,MAAMA;IACXC,iBAAyB;QACvB,OAAO;IACT;IAEAC,wBAAkC;QAChC,OAAO;YAAC;YAAiB;YAAmB;YAAmB;YAAiB;YAAgB;SAAkB;IACpH;IAEAC,WAAoB;QAClB,OAAO;IACT;IAEA,MAAMC,WAAWC,MAAkB,EAAuB;QACxD,MAAMC,aAAuB,EAAE;QAE/B,IAAI;YAEF,IAAID,OAAOE,aAAa,EAAE;gBACxBD,WAAWE,IAAI,CAAC;YAClB;YAEA,IAAIH,OAAOI,eAAe,EAAE;gBAC1B,MAAMJ,OAAOI,eAAe,CAACL,UAAU;gBACvCE,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOK,eAAe,EAAE;gBAC1B,MAAML,OAAOK,eAAe,CAACC,SAAS,CAAC,QAAQ,EAAE;gBACjDL,WAAWE,IAAI,CAAC;YAClB;YAEA,IAAIH,OAAOO,aAAa,EAAE;gBACxB,MAAMP,OAAOO,aAAa,CAACR,UAAU;gBACrCE,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOQ,eAAe,EAAE;gBAC1B,MAAMR,OAAOQ,eAAe,CAACC,YAAY,CAAC;gBAC1CR,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOO,aAAa,EAAE;gBAExB,MAAMP,OAAOO,aAAa,CAACG,KAAK,CAAC,eAAe;oBAC9CC,cAAc;wBAAC;wBAAsB;wBAAqB;wBAAc;qBAAa;oBACrFC,UAAU;wBACRC,MAAM;wBACNC,WAAW;wBACXC,gBAAgB;oBAClB;gBACF;gBAGA,IAAK,IAAIC,IAAI,GAAGA,IAAI,GAAGA,IAAK;oBAC1B,MAAMhB,OAAOO,aAAa,CAACG,KAAK,CAAC,cAAc;wBAC7CC,cAAc;4BAAC;4BAAY;4BAAY;4BAAkB;yBAAsB;wBAC/EC,UAAU;4BACRC,MAAM;4BACNE,gBAAgB;4BAChBE,MAAM;wBACR;oBACF;gBACF;gBAGA,IAAK,IAAID,IAAI,GAAGA,IAAI,GAAGA,IAAK;oBAC1B,MAAMhB,OAAOO,aAAa,CAACG,KAAK,CAAC,SAAS;wBACxCC,cAAc;4BAAC;4BAAe;4BAAa;4BAAe;yBAAe;wBACzEC,UAAU;4BACRC,MAAM;4BACNE,gBAAgB;4BAChBE,MAAM;wBACR;oBACF;gBACF;gBAGA,MAAMjB,OAAOO,aAAa,CAACG,KAAK,CAAC,UAAU;oBACzCC,cAAc;wBAAC;wBAAW;wBAAqB;wBAAc;qBAAsB;oBACnFC,UAAU;wBACRC,MAAM;wBACNE,gBAAgB;wBAChBE,MAAM;oBACR;gBACF;gBAGA,MAAMjB,OAAOO,aAAa,CAACG,KAAK,CAAC,aAAa;oBAC5CC,cAAc;wBAAC;wBAA4B;wBAAuB;qBAAsB;oBACxFC,UAAU;wBACRC,MAAM;wBACNE,gBAAgB;wBAChBE,MAAM;oBACR;gBACF;gBAEAhB,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOkB,YAAY,EAAE;gBACvB,MAAMlB,OAAOkB,YAAY,CAACnB,UAAU;gBACpCE,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOI,eAAe,EAAE;gBAC1B,MAAMJ,OAAOI,eAAe,CAACe,KAAK,CAAC,oBAAoB;oBACrDC,aAAa;oBACbC,MAAM;oBACNC,cAAc;oBACdC,aAAa;wBAAC;wBAAY;wBAAe;wBAAW;qBAAe;oBACnEC,oBAAoB;oBACpBC,gBAAgB;oBAChBC,WAAW,IAAIC,OAAOC,WAAW;gBACnC,GAAG;gBAGH,MAAM5B,OAAOI,eAAe,CAACe,KAAK,CAAC,cAAc;oBAC/CU,QAAQ,EAAE;oBACVC,WAAW,EAAE;oBACbC,YAAY,CAAC;gBACf,GAAG;gBAEH9B,WAAWE,IAAI,CAAC;YAClB;YAGA,IAAIH,OAAOkB,YAAY,EAAE;gBACvB,MAAMc,mBAAmB,MAAMhC,OAAOkB,YAAY,CAACe,YAAY,CAAC;oBAC9DC,aAAa;oBACbC,OAAO;wBACL;4BAAED,aAAa;4BAAsCE,QAAQ;4BAAWC,QAAQ;4BAAKC,QAAQ;wBAAI;wBACjG;4BAAEJ,aAAa;4BAA8BE,QAAQ;4BAAgBC,QAAQ;4BAAMC,QAAQ;wBAAI;wBAC/F;4BAAEJ,aAAa;4BAAkCE,QAAQ;4BAAcC,QAAQ;4BAAKC,QAAQ;wBAAI;qBACjG;oBACDC,aAAa;wBACX;4BAAEC,MAAM;4BAAYN,aAAa;4BAA+BO,OAAO;wBAAE;wBACzE;4BAAED,MAAM;4BAAQN,aAAa;4BAAwBO,OAAO;wBAAU;qBACvE;oBACDC,UAAU;gBACZ;gBAEAzC,WAAWE,IAAI,CAAC;YAClB;YAEA,OAAO;gBACLwC,SAAS;gBACTtB,MAAM;gBACNpB;gBACA2C,UAAU;gBACVC,SAAS;gBACTjC,UAAU;oBACRU,cAAc;oBACdC,aAAa;oBACbuB,aAAa;oBACbtB,oBAAoB;oBACpBuB,wBAAwB;oBACxBC,kBAAkB;gBACpB;YACF;QAEF,EAAE,OAAOC,OAAO;YACd,OAAO;gBACLN,SAAS;gBACTtB,MAAM;gBACNpB;gBACAgD,OAAOA,iBAAiBC,QAAQD,MAAMJ,OAAO,GAAGM,OAAOF;gBACvDJ,SAAS;YACX;QACF;IACF;AACF"}