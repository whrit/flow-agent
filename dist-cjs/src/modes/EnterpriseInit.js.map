{"version":3,"sources":["../../../src/modes/EnterpriseInit.ts"],"sourcesContent":["/**\n * EnterpriseInit - Enterprise initialization mode\n * Sets up enterprise-grade features with security, compliance, and scalability\n */\n\nimport { IInitMode, InitConfig, InitResult } from '../types/interfaces.js';\n\nexport class EnterpriseInit implements IInitMode {\n  getDescription(): string {\n    return 'Enterprise initialization with authentication, encryption, audit trails, and compliance features';\n  }\n\n  getRequiredComponents(): string[] {\n    return ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry', 'ConsensusEngine', 'MetricsCollector', 'MCPIntegrator'];\n  }\n\n  validate(): boolean {\n    // Check for enterprise requirements\n    const hasSecurityConfig = !!(process.env.ENTERPRISE_SECRET_KEY || process.env.ENCRYPTION_KEY);\n    const hasAuditConfig = !!(process.env.AUDIT_ENABLED || process.env.COMPLIANCE_MODE);\n\n    return hasSecurityConfig || hasAuditConfig; // At least one enterprise feature\n  }\n\n  async initialize(config: InitConfig): Promise<InitResult> {\n    const components: string[] = [];\n\n    try {\n      // Basic initialization\n      if (config.configManager) {\n        components.push('ConfigManager');\n      }\n\n      if (config.databaseManager) {\n        await config.databaseManager.initialize();\n        components.push('DatabaseManager');\n      }\n\n      // Use star topology for enterprise (centralized control)\n      if (config.topologyManager) {\n        await config.topologyManager.configure('star', []);\n        components.push('TopologyManager');\n      }\n\n      if (config.agentRegistry) {\n        await config.agentRegistry.initialize();\n        components.push('AgentRegistry');\n      }\n\n      // Initialize Byzantine consensus for enterprise security\n      if (config.consensusEngine) {\n        await config.consensusEngine.setAlgorithm('byzantine');\n        components.push('ConsensusEngine');\n      }\n\n      // Spawn enterprise-specific agents\n      if (config.agentRegistry) {\n        // Security Manager\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['security-management', 'authentication', 'authorization', 'encryption'],\n          metadata: {\n            role: 'security-manager',\n            clearanceLevel: 'high',\n            specialization: 'security',\n            enterpriseAgent: true\n          }\n        });\n\n        // Compliance Officer\n        await config.agentRegistry.spawn('reviewer', {\n          capabilities: ['compliance-checking', 'audit-trail', 'regulatory-compliance', 'policy-enforcement'],\n          metadata: {\n            role: 'compliance-officer',\n            clearanceLevel: 'high',\n            specialization: 'compliance',\n            enterpriseAgent: true\n          }\n        });\n\n        // Resource Manager\n        await config.agentRegistry.spawn('optimizer', {\n          capabilities: ['resource-allocation', 'capacity-planning', 'cost-optimization', 'scaling'],\n          metadata: {\n            role: 'resource-manager',\n            clearanceLevel: 'medium',\n            specialization: 'resource-management',\n            enterpriseAgent: true\n          }\n        });\n\n        // Audit Agent\n        await config.agentRegistry.spawn('analyst', {\n          capabilities: ['audit-logging', 'security-monitoring', 'anomaly-detection', 'forensics'],\n          metadata: {\n            role: 'audit-agent',\n            clearanceLevel: 'high',\n            specialization: 'audit',\n            enterpriseAgent: true\n          }\n        });\n\n        // Enterprise Coordinator\n        await config.agentRegistry.spawn('coordinator', {\n          capabilities: ['enterprise-orchestration', 'workflow-management', 'integration', 'governance'],\n          metadata: {\n            role: 'enterprise-coordinator',\n            clearanceLevel: 'high',\n            specialization: 'enterprise-orchestration',\n            enterpriseAgent: true,\n            authority: 'enterprise'\n          }\n        });\n\n        components.push('EnterpriseAgents');\n      }\n\n      // Initialize enterprise MCP integration\n      if (config.mcpIntegrator) {\n        await config.mcpIntegrator.initialize();\n\n        // Test enterprise MCP functions\n        const enterpriseStatus = await config.mcpIntegrator.executeCommand({\n          tool: 'flow-nexus',\n          function: 'auth_init',\n          parameters: { mode: 'service' }\n        });\n\n        if (enterpriseStatus.success) {\n          components.push('EnterpriseMCP');\n        }\n      }\n\n      // Set up enterprise memory structures\n      if (config.databaseManager) {\n        await config.databaseManager.store('enterprise-config', {\n          initialized: true,\n          mode: 'enterprise',\n          securityLevel: 'high',\n          encryptionEnabled: true,\n          auditEnabled: true,\n          complianceMode: process.env.COMPLIANCE_MODE || 'standard',\n          features: [\n            'authentication',\n            'authorization',\n            'encryption',\n            'audit-trail',\n            'compliance',\n            'monitoring',\n            'governance'\n          ],\n          timestamp: new Date().toISOString()\n        }, 'enterprise');\n\n        // Initialize security policies\n        await config.databaseManager.store('security-policies', {\n          authentication: {\n            required: true,\n            method: 'multi-factor',\n            sessionTimeout: 3600,\n            passwordPolicy: {\n              minLength: 12,\n              requireSpecialChars: true,\n              requireNumbers: true,\n              maxAge: 90\n            }\n          },\n          authorization: {\n            model: 'role-based',\n            principle: 'least-privilege',\n            roles: ['admin', 'operator', 'viewer', 'auditor']\n          },\n          encryption: {\n            algorithm: 'AES-256',\n            keyRotation: 'monthly',\n            transitEncryption: true,\n            restEncryption: true\n          }\n        }, 'enterprise');\n\n        // Initialize audit configuration\n        await config.databaseManager.store('audit-config', {\n          enabled: true,\n          logLevel: 'comprehensive',\n          retention: '7-years',\n          compliance: ['SOX', 'GDPR', 'HIPAA'],\n          monitoring: {\n            realTime: true,\n            alerting: true,\n            anomalyDetection: true\n          }\n        }, 'enterprise');\n\n        // Initialize compliance frameworks\n        await config.databaseManager.store('compliance-frameworks', {\n          'SOX': {\n            requirements: ['financial-controls', 'audit-trails', 'segregation-of-duties'],\n            monitoring: true,\n            reporting: 'quarterly'\n          },\n          'GDPR': {\n            requirements: ['data-protection', 'privacy-by-design', 'right-to-deletion'],\n            monitoring: true,\n            reporting: 'incident-based'\n          },\n          'HIPAA': {\n            requirements: ['data-encryption', 'access-controls', 'audit-logs'],\n            monitoring: true,\n            reporting: 'annual'\n          }\n        }, 'enterprise');\n\n        components.push('EnterpriseMemory');\n      }\n\n      // Initialize enterprise metrics and monitoring\n      if (config.metricsCollector) {\n        await config.metricsCollector.initialize();\n\n        // Record enterprise initialization metrics\n        await config.metricsCollector.recordSystemMetrics({\n          cpuUsage: 35, // Lower due to security overhead\n          memoryUsage: 75, // Higher due to enterprise features\n          diskUsage: 45,\n          networkLatency: 20, // Higher due to encryption\n          activeConnections: 8\n        });\n\n        // Set up enterprise-specific metrics\n        await config.metricsCollector.recordAgentMetrics('security-manager', {\n          tasksCompleted: 0,\n          successRate: 1.0,\n          averageResponseTime: 500, // Security checks take time\n          resourceUtilization: {\n            memory: 512,\n            cpu: 2,\n            storage: 200,\n            network: 20\n          }\n        });\n\n        components.push('EnterpriseMetrics');\n      }\n\n      // Set up enterprise governance\n      if (config.databaseManager) {\n        await config.databaseManager.store('governance-rules', {\n          dataGovernance: {\n            classification: ['public', 'internal', 'confidential', 'restricted'],\n            retention: { default: '7-years', financial: '10-years' },\n            access: 'role-based'\n          },\n          operationalGovernance: {\n            approvalWorkflows: true,\n            changeManagement: true,\n            incidentResponse: true\n          },\n          riskManagement: {\n            riskAssessment: 'quarterly',\n            threatModeling: true,\n            vulnerabilityScanning: true\n          }\n        }, 'enterprise');\n\n        components.push('EnterpriseGovernance');\n      }\n\n      return {\n        success: true,\n        mode: 'enterprise',\n        components,\n        topology: 'star',\n        message: 'Enterprise initialization completed successfully - Security and compliance active',\n        metadata: {\n          securityLevel: 'high',\n          encryptionEnabled: true,\n          auditEnabled: true,\n          complianceFrameworks: ['SOX', 'GDPR', 'HIPAA'],\n          authenticationRequired: true,\n          governanceActive: true,\n          enterpriseFeatures: components.length\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        mode: 'enterprise',\n        components,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'Enterprise initialization failed'\n      };\n    }\n  }\n}"],"names":["EnterpriseInit","getDescription","getRequiredComponents","validate","hasSecurityConfig","process","env","ENTERPRISE_SECRET_KEY","ENCRYPTION_KEY","hasAuditConfig","AUDIT_ENABLED","COMPLIANCE_MODE","initialize","config","components","configManager","push","databaseManager","topologyManager","configure","agentRegistry","consensusEngine","setAlgorithm","spawn","capabilities","metadata","role","clearanceLevel","specialization","enterpriseAgent","authority","mcpIntegrator","enterpriseStatus","executeCommand","tool","function","parameters","mode","success","store","initialized","securityLevel","encryptionEnabled","auditEnabled","complianceMode","features","timestamp","Date","toISOString","authentication","required","method","sessionTimeout","passwordPolicy","minLength","requireSpecialChars","requireNumbers","maxAge","authorization","model","principle","roles","encryption","algorithm","keyRotation","transitEncryption","restEncryption","enabled","logLevel","retention","compliance","monitoring","realTime","alerting","anomalyDetection","requirements","reporting","metricsCollector","recordSystemMetrics","cpuUsage","memoryUsage","diskUsage","networkLatency","activeConnections","recordAgentMetrics","tasksCompleted","successRate","averageResponseTime","resourceUtilization","memory","cpu","storage","network","dataGovernance","classification","default","financial","access","operationalGovernance","approvalWorkflows","changeManagement","incidentResponse","riskManagement","riskAssessment","threatModeling","vulnerabilityScanning","topology","message","complianceFrameworks","authenticationRequired","governanceActive","enterpriseFeatures","length","error","Error","String"],"mappings":"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"}