{"version":3,"sources":["../../../src/integration/types.ts"],"sourcesContent":["/**\n * Integration Types for Claude Flow v2.0.0\n */\n\nexport interface IntegrationConfig {\n  // Core configuration\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\n  environment?: 'development' | 'production' | 'testing';\n\n  // Component-specific configuration\n  orchestrator?: {\n    maxConcurrency?: number;\n    timeout?: number;\n  };\n\n  agents?: {\n    maxAgents?: number;\n    defaultStrategy?: string;\n  };\n\n  swarm?: {\n    topology?: 'centralized' | 'distributed' | 'hierarchical' | 'mesh';\n    maxDepth?: number;\n    enablePersistence?: boolean;\n  };\n\n  memory?: {\n    backend?: 'memory' | 'file' | 'redis';\n    ttl?: number;\n    maxSize?: number;\n  };\n\n  monitoring?: {\n    enabled?: boolean;\n    metrics?: boolean;\n    realTime?: boolean;\n  };\n\n  mcp?: {\n    port?: number;\n    host?: string;\n    enableAuth?: boolean;\n  };\n}\n\nexport interface ComponentStatus {\n  component: string;\n  status: 'healthy' | 'unhealthy' | 'warning';\n  message: string;\n  timestamp: number;\n  lastHealthCheck: number;\n  metrics?: Record<string, any>;\n}\n\nexport interface SystemHealth {\n  overall: 'healthy' | 'unhealthy' | 'warning';\n  components: Record<string, ComponentStatus>;\n  metrics: {\n    totalComponents: number;\n    healthyComponents: number;\n    unhealthyComponents: number;\n    warningComponents: number;\n    uptime: number;\n  };\n  timestamp: number;\n}\n\nexport interface IntegrationEvent {\n  type: string;\n  component: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface HealthCheckResult {\n  component: string;\n  healthy: boolean;\n  message?: string;\n  metrics?: Record<string, any>;\n  timestamp: number;\n}\n\nexport interface ComponentDependency {\n  component: string;\n  depends: string[];\n  optional?: boolean;\n}\n\nexport interface InitializationPhase {\n  phase: number;\n  name: string;\n  description: string;\n  components: string[];\n  dependencies?: string[];\n  timeout?: number;\n}\n\nexport interface SystemMetrics {\n  cpu: number;\n  memory: number;\n  network: number;\n  disk: number;\n  activeAgents: number;\n  activeTasks: number;\n  queuedTasks: number;\n  completedTasks: number;\n  errorCount: number;\n  uptime: number;\n  timestamp: number;\n}\n\nexport interface ComponentInterface {\n  initialize(): Promise<void>;\n  shutdown(): Promise<void>;\n  getStatus(): ComponentStatus;\n  healthCheck(): Promise<HealthCheckResult>;\n}\n\nexport interface WiringConfig {\n  source: string;\n  target: string;\n  relationship: 'uses' | 'depends' | 'observes' | 'controls';\n  bidirectional?: boolean;\n}\n\nexport interface FallbackConfig {\n  component: string;\n  fallback: string;\n  condition: string;\n  timeout?: number;\n}\n\nexport interface EdgeCaseHandler {\n  scenario: string;\n  handler: string;\n  priority: number;\n  timeout?: number;\n}\n"],"names":[],"mappings":"AAoIA,WAKC"}