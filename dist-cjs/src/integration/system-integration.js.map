{"version":3,"sources":["../../../src/integration/system-integration.ts"],"sourcesContent":["/**\n * Claude Flow v2.0.0 System Integration\n * Comprehensive integration manager for all system components\n */\n\nimport { EventBus } from '../core/event-bus.js';\nimport { Logger } from '../core/logger.js';\nimport type { ConfigManager } from '../config/config-manager.js';\nimport { MemoryManager } from '../memory/manager.js';\nimport type { MemoryConfig } from '../utils/types.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { TaskEngine } from '../task/engine.js';\nimport { RealTimeMonitor } from '../monitoring/real-time-monitor.js';\nimport { McpServer } from '../mcp/server.js';\nimport { getErrorMessage } from '../utils/error-handler.js';\nimport type { IntegrationConfig, SystemHealth, ComponentStatus } from './types.js';\n\nexport class SystemIntegration {\n  private static instance: SystemIntegration;\n  private eventBus: EventBus;\n  private logger: Logger;\n  private orchestrator: any | null = null;\n  private configManager: any | null = null;\n  private memoryManager: any | null = null;\n  private agentManager: any | null = null;\n  private swarmCoordinator: any | null = null;\n  private taskEngine: any | null = null;\n  private monitor: any | null = null;\n  private mcpServer: any | null = null;\n  private initialized = false;\n  private componentStatuses: Map<string, ComponentStatus> = new Map();\n\n  private constructor() {\n    this.eventBus = EventBus.getInstance();\n    this.logger = new Logger({ level: 'info', format: 'text', destination: 'console' });\n\n    // Initialize configManager safely\n    try {\n      // Dynamic import for ConfigManager if available\n      this.configManager = {\n        getInstance: () => ({ load: async () => {}, get: () => null, set: () => {} }),\n      };\n    } catch (error) {\n      this.logger.warn('ConfigManager not available, using mock');\n      this.configManager = { load: async () => {}, get: () => null, set: () => {} };\n    }\n\n    this.setupEventHandlers();\n  }\n\n  static getInstance(): SystemIntegration {\n    if (!SystemIntegration.instance) {\n      SystemIntegration.instance = new SystemIntegration();\n    }\n    return SystemIntegration.instance;\n  }\n\n  /**\n   * Initialize all system components in proper order\n   */\n  async initialize(config?: IntegrationConfig): Promise<void> {\n    if (this.initialized) {\n      this.logger.warn('System already initialized');\n      return;\n    }\n\n    this.logger.info('üöÄ Starting Claude Flow v2.0.0 System Integration');\n\n    try {\n      // Phase 1: Core Infrastructure\n      await this.initializeCore(config);\n\n      // Phase 2: Memory and Configuration\n      await this.initializeMemoryAndConfig();\n\n      // Phase 3: Agents and Coordination\n      await this.initializeAgentsAndCoordination();\n\n      // Phase 4: Task Management\n      await this.initializeTaskManagement();\n\n      // Phase 5: Monitoring and MCP\n      await this.initializeMonitoringAndMcp();\n\n      // Phase 6: Cross-component wiring\n      await this.wireComponents();\n\n      this.initialized = true;\n      this.logger.info('‚úÖ Claude Flow v2.0.0 System Integration Complete');\n\n      // Emit system ready event\n      this.eventBus.emit('system:ready', {\n        timestamp: Date.now(),\n        components: Array.from(this.componentStatuses.keys()),\n        health: await this.getSystemHealth(),\n      });\n    } catch (error) {\n      this.logger.error('‚ùå System Integration Failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize core infrastructure components\n   */\n  private async initializeCore(config?: IntegrationConfig): Promise<void> {\n    this.logger.info('üîß Phase 1: Initializing Core Infrastructure');\n\n    try {\n      // Initialize configuration\n      if (this.configManager && typeof this.configManager.load === 'function') {\n        await this.configManager.load();\n        this.updateComponentStatus('config', 'healthy', 'Configuration loaded');\n      } else {\n        this.updateComponentStatus('config', 'warning', 'Configuration manager not available');\n      }\n\n      // Try to initialize orchestrator if available\n      try {\n        const { Orchestrator } = await import('../core/orchestrator-fixed.js');\n        this.orchestrator = new Orchestrator(this.configManager, this.eventBus, this.logger);\n        if (typeof this.orchestrator.initialize === 'function') {\n          await this.orchestrator.initialize();\n        }\n        this.updateComponentStatus('orchestrator', 'healthy', 'Orchestrator initialized');\n      } catch (error) {\n        this.logger.warn('Orchestrator not available:', getErrorMessage(error));\n        this.updateComponentStatus('orchestrator', 'warning', 'Orchestrator not available');\n      }\n\n      this.logger.info('‚úÖ Core Infrastructure Ready');\n    } catch (error) {\n      this.logger.error('Core initialization failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize memory and configuration management\n   */\n  private async initializeMemoryAndConfig(): Promise<void> {\n    this.logger.info('üß† Phase 2: Initializing Memory and Configuration');\n\n    try {\n      // Initialize memory manager\n      try {\n        const { MemoryManager } = await import('../memory/manager.js');\n\n        // Create default memory configuration\n        const memoryConfig: MemoryConfig = {\n          backend: 'sqlite',\n          cacheSizeMB: 50,\n          syncInterval: 30000, // 30 seconds\n          conflictResolution: 'last-write',\n          retentionDays: 30,\n          sqlitePath: './.swarm/memory.db',\n        };\n\n        // Initialize MemoryManager with required parameters\n        this.memoryManager = new MemoryManager(memoryConfig, this.eventBus, this.logger);\n\n        if (typeof this.memoryManager.initialize === 'function') {\n          await this.memoryManager.initialize();\n        }\n        this.updateComponentStatus(\n          'memory',\n          'healthy',\n          'Memory manager initialized with SQLite backend',\n        );\n        this.logger.info('Memory manager initialized successfully', {\n          backend: memoryConfig.backend,\n          cacheSizeMB: memoryConfig.cacheSizeMB,\n          sqlitePath: memoryConfig.sqlitePath,\n        });\n      } catch (error) {\n        this.logger.warn('Memory manager initialization failed:', getErrorMessage(error));\n        this.updateComponentStatus('memory', 'warning', 'Memory manager not available');\n      }\n\n      this.logger.info('‚úÖ Memory and Configuration Ready');\n    } catch (error) {\n      this.logger.error('Memory initialization failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize agents and coordination systems\n   */\n  private async initializeAgentsAndCoordination(): Promise<void> {\n    this.logger.info('ü§ñ Phase 3: Initializing Agents and Coordination');\n\n    try {\n      // Initialize agent manager\n      try {\n        const { AgentManager } = await import('../agents/agent-manager.js');\n        this.agentManager = new AgentManager(this.eventBus, this.logger);\n        if (typeof this.agentManager.initialize === 'function') {\n          await this.agentManager.initialize();\n        }\n        this.updateComponentStatus('agents', 'healthy', 'Agent manager initialized');\n      } catch (error) {\n        this.logger.warn('Agent manager not available, using mock:', getErrorMessage(error));\n        const { MockAgentManager } = await import('./mock-components.js');\n        this.agentManager = new MockAgentManager(this.eventBus, this.logger);\n        await this.agentManager.initialize();\n        this.updateComponentStatus('agents', 'warning', 'Using mock agent manager');\n      }\n\n      // Initialize swarm coordinator\n      try {\n        const { SwarmCoordinator } = await import('../coordination/swarm-coordinator.js');\n        this.swarmCoordinator = new SwarmCoordinator(\n          this.eventBus,\n          this.logger,\n          this.memoryManager!,\n        );\n        if (typeof this.swarmCoordinator.initialize === 'function') {\n          await this.swarmCoordinator.initialize();\n        }\n        this.updateComponentStatus('swarm', 'healthy', 'Swarm coordinator initialized');\n      } catch (error) {\n        this.logger.warn('Swarm coordinator not available, using mock:', getErrorMessage(error));\n        const { MockSwarmCoordinator } = await import('./mock-components.js');\n        this.swarmCoordinator = new MockSwarmCoordinator(\n          this.eventBus,\n          this.logger,\n          this.memoryManager!,\n        );\n        await this.swarmCoordinator.initialize();\n        this.updateComponentStatus('swarm', 'warning', 'Using mock swarm coordinator');\n      }\n\n      this.logger.info('‚úÖ Agents and Coordination Ready');\n    } catch (error) {\n      this.logger.error('Agents and coordination initialization failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize task management system\n   */\n  private async initializeTaskManagement(): Promise<void> {\n    this.logger.info('üìã Phase 4: Initializing Task Management');\n\n    try {\n      // Initialize task engine\n      try {\n        const { TaskEngine } = await import('../task/engine.js');\n        this.taskEngine = new TaskEngine(this.eventBus, this.logger, this.memoryManager!);\n        if (typeof this.taskEngine.initialize === 'function') {\n          await this.taskEngine.initialize();\n        }\n        this.updateComponentStatus('tasks', 'healthy', 'Task engine initialized');\n      } catch (error) {\n        this.logger.warn('Task engine not available, using mock:', getErrorMessage(error));\n        const { MockTaskEngine } = await import('./mock-components.js');\n        this.taskEngine = new MockTaskEngine(this.eventBus, this.logger, this.memoryManager!);\n        await this.taskEngine.initialize();\n        this.updateComponentStatus('tasks', 'warning', 'Using mock task engine');\n      }\n\n      this.logger.info('‚úÖ Task Management Ready');\n    } catch (error) {\n      this.logger.error('Task management initialization failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize monitoring and MCP systems\n   */\n  private async initializeMonitoringAndMcp(): Promise<void> {\n    this.logger.info('üìä Phase 5: Initializing Monitoring and MCP');\n\n    try {\n      // Initialize real-time monitor\n      try {\n        const { RealTimeMonitor } = await import('../monitoring/real-time-monitor.js');\n        this.monitor = new RealTimeMonitor(this.eventBus, this.logger);\n        if (typeof this.monitor.initialize === 'function') {\n          await this.monitor.initialize();\n        }\n        this.updateComponentStatus('monitor', 'healthy', 'Real-time monitor initialized');\n      } catch (error) {\n        this.logger.warn('Real-time monitor not available, using mock:', getErrorMessage(error));\n        const { MockRealTimeMonitor } = await import('./mock-components.js');\n        this.monitor = new MockRealTimeMonitor(this.eventBus, this.logger);\n        await this.monitor.initialize();\n        this.updateComponentStatus('monitor', 'warning', 'Using mock monitor');\n      }\n\n      // Initialize MCP server\n      try {\n        const { McpServer } = await import('../mcp/server.js');\n        this.mcpServer = new McpServer(this.eventBus, this.logger);\n        if (typeof this.mcpServer.initialize === 'function') {\n          await this.mcpServer.initialize();\n        }\n        this.updateComponentStatus('mcp', 'healthy', 'MCP server initialized');\n      } catch (error) {\n        this.logger.warn('MCP server not available, using mock:', getErrorMessage(error));\n        const { MockMcpServer } = await import('./mock-components.js');\n        this.mcpServer = new MockMcpServer(this.eventBus, this.logger);\n        await this.mcpServer.initialize();\n        this.updateComponentStatus('mcp', 'warning', 'Using mock MCP server');\n      }\n\n      this.logger.info('‚úÖ Monitoring and MCP Ready');\n    } catch (error) {\n      this.logger.error('Monitoring and MCP initialization failed:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Wire all components together for proper communication\n   */\n  private async wireComponents(): Promise<void> {\n    this.logger.info('üîó Phase 6: Wiring Components');\n\n    // Wire orchestrator to agents\n    if (this.orchestrator && this.agentManager) {\n      this.orchestrator.setAgentManager(this.agentManager);\n      this.agentManager.setOrchestrator(this.orchestrator);\n    }\n\n    // Wire swarm coordinator to agents and tasks\n    if (this.swarmCoordinator && this.agentManager && this.taskEngine) {\n      this.swarmCoordinator.setAgentManager(this.agentManager);\n      this.swarmCoordinator.setTaskEngine(this.taskEngine);\n      this.taskEngine.setSwarmCoordinator(this.swarmCoordinator);\n    }\n\n    // Wire monitor to all components\n    if (this.monitor) {\n      this.monitor.attachToOrchestrator(this.orchestrator!);\n      this.monitor.attachToAgentManager(this.agentManager!);\n      this.monitor.attachToSwarmCoordinator(this.swarmCoordinator!);\n      this.monitor.attachToTaskEngine(this.taskEngine!);\n    }\n\n    // Wire MCP server to core components\n    if (this.mcpServer) {\n      this.mcpServer.attachToOrchestrator(this.orchestrator!);\n      this.mcpServer.attachToAgentManager(this.agentManager!);\n      this.mcpServer.attachToSwarmCoordinator(this.swarmCoordinator!);\n      this.mcpServer.attachToTaskEngine(this.taskEngine!);\n      this.mcpServer.attachToMemoryManager(this.memoryManager!);\n    }\n\n    this.logger.info('‚úÖ Component Wiring Complete');\n  }\n\n  /**\n   * Setup event handlers for cross-component communication\n   */\n  private setupEventHandlers(): void {\n    // System health monitoring\n    this.eventBus.on('component:status', (event) => {\n      this.updateComponentStatus(event.component, event.status, event.message);\n    });\n\n    // Error handling\n    this.eventBus.on('system:error', (event) => {\n      this.logger.error(`System Error in ${event.component}:`, event.error);\n      this.updateComponentStatus(event.component, 'unhealthy', event.error.message);\n    });\n\n    // Performance monitoring\n    this.eventBus.on('performance:metric', (event) => {\n      this.logger.debug(`Performance Metric: ${event.metric} = ${event.value}`);\n    });\n  }\n\n  /**\n   * Update component status\n   */\n  private updateComponentStatus(\n    component: string,\n    status: 'healthy' | 'unhealthy' | 'warning',\n    message?: string,\n  ): void {\n    const statusInfo: ComponentStatus = {\n      component,\n      status,\n      message: message || '',\n      timestamp: Date.now(),\n      lastHealthCheck: Date.now(),\n    };\n\n    this.componentStatuses.set(component, statusInfo);\n\n    // Emit status update\n    this.eventBus.emit('component:status:updated', statusInfo);\n  }\n\n  /**\n   * Get system health status\n   */\n  async getSystemHealth(): Promise<SystemHealth> {\n    const components = Array.from(this.componentStatuses.values());\n    const healthyComponents = components.filter((c) => c.status === 'healthy').length;\n    const unhealthyComponents = components.filter((c) => c.status === 'unhealthy').length;\n    const warningComponents = components.filter((c) => c.status === 'warning').length;\n\n    let overallStatus: 'healthy' | 'unhealthy' | 'warning' = 'healthy';\n    if (unhealthyComponents > 0) {\n      overallStatus = 'unhealthy';\n    } else if (warningComponents > 0) {\n      overallStatus = 'warning';\n    }\n\n    return {\n      overall: overallStatus,\n      components: Object.fromEntries(this.componentStatuses),\n      metrics: {\n        totalComponents: components.length,\n        healthyComponents,\n        unhealthyComponents,\n        warningComponents,\n        uptime: Date.now() - (this.initialized ? Date.now() : 0),\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Get specific component\n   */\n  getComponent<T>(name: string): T | null {\n    switch (name) {\n      case 'orchestrator':\n        return this.orchestrator as T;\n      case 'configManager':\n        return this.configManager as T;\n      case 'memoryManager':\n        return this.memoryManager as T;\n      case 'agentManager':\n        return this.agentManager as T;\n      case 'swarmCoordinator':\n        return this.swarmCoordinator as T;\n      case 'taskEngine':\n        return this.taskEngine as T;\n      case 'monitor':\n        return this.monitor as T;\n      case 'mcpServer':\n        return this.mcpServer as T;\n      case 'eventBus':\n        return this.eventBus as T;\n      case 'logger':\n        return this.logger as T;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Shutdown all components gracefully\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('üõë Shutting down Claude Flow v2.0.0');\n\n    // Shutdown in reverse order\n    if (this.mcpServer) {\n      await this.mcpServer.shutdown();\n    }\n\n    if (this.monitor) {\n      await this.monitor.shutdown();\n    }\n\n    if (this.taskEngine) {\n      await this.taskEngine.shutdown();\n    }\n\n    if (this.swarmCoordinator) {\n      await this.swarmCoordinator.shutdown();\n    }\n\n    if (this.agentManager) {\n      await this.agentManager.shutdown();\n    }\n\n    if (this.memoryManager) {\n      await this.memoryManager.shutdown();\n    }\n\n    if (this.orchestrator) {\n      await this.orchestrator.shutdown();\n    }\n\n    this.initialized = false;\n    this.logger.info('‚úÖ Claude Flow v2.0.0 Shutdown Complete');\n  }\n\n  /**\n   * Check if system is ready\n   */\n  isReady(): boolean {\n    return this.initialized;\n  }\n\n  /**\n   * Get initialization status\n   */\n  getInitializationStatus(): {\n    initialized: boolean;\n    components: string[];\n    health: SystemHealth | null;\n  } {\n    return {\n      initialized: this.initialized,\n      components: Array.from(this.componentStatuses.keys()),\n      health: this.initialized ? null : null, // Will be populated after initialization\n    };\n  }\n}\n\n// Export singleton instance\nexport const systemIntegration = SystemIntegration.getInstance();\n"],"names":["EventBus","Logger","getErrorMessage","SystemIntegration","instance","eventBus","logger","orchestrator","configManager","memoryManager","agentManager","swarmCoordinator","taskEngine","monitor","mcpServer","initialized","componentStatuses","Map","getInstance","level","format","destination","load","get","set","error","warn","setupEventHandlers","initialize","config","info","initializeCore","initializeMemoryAndConfig","initializeAgentsAndCoordination","initializeTaskManagement","initializeMonitoringAndMcp","wireComponents","emit","timestamp","Date","now","components","Array","from","keys","health","getSystemHealth","updateComponentStatus","Orchestrator","MemoryManager","memoryConfig","backend","cacheSizeMB","syncInterval","conflictResolution","retentionDays","sqlitePath","AgentManager","MockAgentManager","SwarmCoordinator","MockSwarmCoordinator","TaskEngine","MockTaskEngine","RealTimeMonitor","MockRealTimeMonitor","McpServer","MockMcpServer","setAgentManager","setOrchestrator","setTaskEngine","setSwarmCoordinator","attachToOrchestrator","attachToAgentManager","attachToSwarmCoordinator","attachToTaskEngine","attachToMemoryManager","on","event","component","status","message","debug","metric","value","statusInfo","lastHealthCheck","values","healthyComponents","filter","c","length","unhealthyComponents","warningComponents","overallStatus","overall","Object","fromEntries","metrics","totalComponents","uptime","getComponent","name","shutdown","isReady","getInitializationStatus","systemIntegration"],"mappings":"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"}