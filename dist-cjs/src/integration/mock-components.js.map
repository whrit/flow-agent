{"version":3,"sources":["../../../src/integration/mock-components.ts"],"sourcesContent":["/**\n * Mock Components for System Integration Testing\n * These are lightweight mocks for missing components during development\n */\n\nimport { EventBus } from '../core/event-bus.js';\nimport { Logger } from '../core/logger.js';\n\nexport class MockConfigManager {\n  private config: Record<string, any> = {};\n\n  static getInstance(): MockConfigManager {\n    return new MockConfigManager();\n  }\n\n  async load(): Promise<void> {\n    // Mock configuration loading\n    this.config = {\n      agents: { maxAgents: 10 },\n      swarm: { topology: 'mesh' },\n      memory: { backend: 'memory' },\n    };\n  }\n\n  get(path: string): any {\n    const keys = path.split('.');\n    let value = this.config;\n    for (const key of keys) {\n      value = value?.[key];\n      if (value === undefined) break;\n    }\n    return value;\n  }\n\n  set(path: string, value: any): void {\n    const keys = path.split('.');\n    let obj = this.config;\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n    obj[keys[keys.length - 1]] = value;\n  }\n\n  async initialize(): Promise<void> {\n    await this.load();\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'configManager',\n      healthy: true,\n      message: 'Mock config manager healthy',\n      timestamp: Date.now(),\n    });\n  }\n}\n\nexport class MockMemoryManager {\n  private storage: Map<string, any> = new Map();\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  async get(key: string): Promise<any> {\n    return this.storage.get(key) || null;\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    this.storage.set(key, value);\n  }\n\n  async delete(key: string): Promise<boolean> {\n    return this.storage.delete(key);\n  }\n\n  async keys(pattern?: string): Promise<string[]> {\n    const allKeys = Array.from(this.storage.keys());\n    if (!pattern) return allKeys;\n\n    // Simple pattern matching\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n    return allKeys.filter((key) => regex.test(key));\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'memoryManager',\n      healthy: true,\n      message: 'Mock memory manager healthy',\n      timestamp: Date.now(),\n    });\n  }\n\n  getMetrics(): Promise<any> {\n    return Promise.resolve({\n      storageSize: this.storage.size,\n      memoryUsage: process.memoryUsage().heapUsed,\n    });\n  }\n}\n\nexport class MockAgentManager {\n  private agents: Map<string, any> = new Map();\n\n  constructor(\n    private eventBus: EventBus,\n    private logger: Logger,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  async spawnAgent(type: string, config: any): Promise<string> {\n    const agentId = `mock-agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    this.agents.set(agentId, {\n      id: agentId,\n      type,\n      config,\n      status: 'active',\n      createdAt: new Date(),\n    });\n    return agentId;\n  }\n\n  async terminateAgent(agentId: string): Promise<void> {\n    this.agents.delete(agentId);\n  }\n\n  async listAgents(): Promise<any[]> {\n    return Array.from(this.agents.values());\n  }\n\n  async getAgent(agentId: string): Promise<any> {\n    return this.agents.get(agentId) || null;\n  }\n\n  async sendMessage(message: any): Promise<any> {\n    // Mock message sending\n    return { success: true, id: `msg-${Date.now()}` };\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'agentManager',\n      healthy: true,\n      message: 'Mock agent manager healthy',\n      timestamp: Date.now(),\n    });\n  }\n\n  getMetrics(): Promise<any> {\n    return Promise.resolve({\n      activeAgents: this.agents.size,\n      totalAgents: this.agents.size,\n    });\n  }\n}\n\nexport class MockSwarmCoordinator {\n  private swarms: Map<string, any> = new Map();\n\n  constructor(\n    private eventBus: EventBus,\n    private logger: Logger,\n    private memoryManager: MockMemoryManager,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  async createSwarm(config: any): Promise<string> {\n    const swarmId = `mock-swarm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    this.swarms.set(swarmId, {\n      id: swarmId,\n      config,\n      status: 'active',\n      agents: [],\n      createdAt: new Date(),\n    });\n    return swarmId;\n  }\n\n  async getSwarmStatus(swarmId: string): Promise<any> {\n    const swarm = this.swarms.get(swarmId);\n    return swarm || null;\n  }\n\n  async spawnAgentInSwarm(swarmId: string, agentConfig: any): Promise<string> {\n    const agentId = `mock-swarm-agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const swarm = this.swarms.get(swarmId);\n    if (swarm) {\n      swarm.agents.push(agentId);\n    }\n    return agentId;\n  }\n\n  async getSwarmAgents(swarmId: string): Promise<string[]> {\n    const swarm = this.swarms.get(swarmId);\n    return swarm?.agents || [];\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'swarmCoordinator',\n      healthy: true,\n      message: 'Mock swarm coordinator healthy',\n      timestamp: Date.now(),\n    });\n  }\n\n  getMetrics(): Promise<any> {\n    return Promise.resolve({\n      activeSwarms: this.swarms.size,\n      totalAgents: Array.from(this.swarms.values()).reduce(\n        (sum, swarm) => sum + swarm.agents.length,\n        0,\n      ),\n    });\n  }\n}\n\nexport class MockTaskEngine {\n  private tasks: Map<string, any> = new Map();\n\n  constructor(\n    private eventBus: EventBus,\n    private logger: Logger,\n    private memoryManager: MockMemoryManager,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  async createTask(taskConfig: any): Promise<string> {\n    const taskId = `mock-task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    this.tasks.set(taskId, {\n      id: taskId,\n      ...taskConfig,\n      status: 'pending',\n      createdAt: new Date(),\n    });\n    return taskId;\n  }\n\n  async getTaskStatus(taskId: string): Promise<any> {\n    return this.tasks.get(taskId) || null;\n  }\n\n  async getActiveTasks(swarmId?: string): Promise<any[]> {\n    const allTasks = Array.from(this.tasks.values());\n    return swarmId\n      ? allTasks.filter((task) => task.swarmId === swarmId && task.status === 'active')\n      : allTasks.filter((task) => task.status === 'active');\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'taskEngine',\n      healthy: true,\n      message: 'Mock task engine healthy',\n      timestamp: Date.now(),\n    });\n  }\n\n  getMetrics(): Promise<any> {\n    const tasks = Array.from(this.tasks.values());\n    return Promise.resolve({\n      totalTasks: tasks.length,\n      activeTasks: tasks.filter((t) => t.status === 'active').length,\n      queuedTasks: tasks.filter((t) => t.status === 'pending').length,\n      completedTasks: tasks.filter((t) => t.status === 'completed').length,\n    });\n  }\n}\n\nexport class MockRealTimeMonitor {\n  constructor(\n    private eventBus: EventBus,\n    private logger: Logger,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  attachToOrchestrator(orchestrator: any): void {\n    // Mock attachment\n  }\n\n  attachToAgentManager(agentManager: any): void {\n    // Mock attachment\n  }\n\n  attachToSwarmCoordinator(swarmCoordinator: any): void {\n    // Mock attachment\n  }\n\n  attachToTaskEngine(taskEngine: any): void {\n    // Mock attachment\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'monitor',\n      healthy: true,\n      message: 'Mock monitor healthy',\n      timestamp: Date.now(),\n    });\n  }\n}\n\nexport class MockMcpServer {\n  constructor(\n    private eventBus: EventBus,\n    private logger: Logger,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  attachToOrchestrator(orchestrator: any): void {\n    // Mock attachment\n  }\n\n  attachToAgentManager(agentManager: any): void {\n    // Mock attachment\n  }\n\n  attachToSwarmCoordinator(swarmCoordinator: any): void {\n    // Mock attachment\n  }\n\n  attachToTaskEngine(taskEngine: any): void {\n    // Mock attachment\n  }\n\n  attachToMemoryManager(memoryManager: any): void {\n    // Mock attachment\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'mcpServer',\n      healthy: true,\n      message: 'Mock MCP server healthy',\n      timestamp: Date.now(),\n    });\n  }\n}\n\nexport class MockOrchestrator {\n  constructor(\n    private configManager: any,\n    private eventBus: EventBus,\n    private logger: Logger,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Mock initialization\n  }\n\n  async shutdown(): Promise<void> {\n    // Mock shutdown\n  }\n\n  setAgentManager(agentManager: any): void {\n    // Mock setter\n  }\n\n  healthCheck(): Promise<any> {\n    return Promise.resolve({\n      component: 'orchestrator',\n      healthy: true,\n      message: 'Mock orchestrator healthy',\n      timestamp: Date.now(),\n    });\n  }\n}\n"],"names":["MockConfigManager","config","getInstance","load","agents","maxAgents","swarm","topology","memory","backend","get","path","keys","split","value","key","undefined","set","obj","i","length","initialize","shutdown","healthCheck","Promise","resolve","component","healthy","message","timestamp","Date","now","MockMemoryManager","storage","Map","delete","pattern","allKeys","Array","from","regex","RegExp","replace","filter","test","getMetrics","storageSize","size","memoryUsage","process","heapUsed","MockAgentManager","eventBus","logger","spawnAgent","type","agentId","Math","random","toString","substr","id","status","createdAt","terminateAgent","listAgents","values","getAgent","sendMessage","success","activeAgents","totalAgents","MockSwarmCoordinator","swarms","memoryManager","createSwarm","swarmId","getSwarmStatus","spawnAgentInSwarm","agentConfig","push","getSwarmAgents","activeSwarms","reduce","sum","MockTaskEngine","tasks","createTask","taskConfig","taskId","getTaskStatus","getActiveTasks","allTasks","task","totalTasks","activeTasks","t","queuedTasks","completedTasks","MockRealTimeMonitor","attachToOrchestrator","orchestrator","attachToAgentManager","agentManager","attachToSwarmCoordinator","swarmCoordinator","attachToTaskEngine","taskEngine","MockMcpServer","attachToMemoryManager","MockOrchestrator","configManager","setAgentManager"],"mappings":"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"}