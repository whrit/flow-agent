{"version":3,"sources":["../../../src/utils/npx-isolated-cache.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * NPX Isolated Cache\n *\n * Provides isolated NPX cache directories per process to prevent\n * concurrent cache conflicts when multiple claude-flow instances\n * run simultaneously.\n *\n * This simple solution gives each process its own cache directory,\n * eliminating ENOTEMPTY errors without the complexity of locks.\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Track cache directories for cleanup\nconst cacheDirectories = new Set();\nlet cleanupRegistered = false;\n\n/**\n * Creates an isolated NPX cache environment\n * @returns {Object} Environment variables with isolated cache\n */\nexport function createIsolatedCache() {\n  // Create unique cache directory for this process\n  const timestamp = Date.now();\n  const pid = process.pid;\n  const random = Math.random().toString(36).substring(2, 8);\n  const cacheName = `claude-flow-${pid}-${timestamp}-${random}`;\n  const cacheDir = path.join(os.tmpdir(), '.npm-cache', cacheName);\n\n  // Track for cleanup\n  cacheDirectories.add(cacheDir);\n\n  // Register cleanup on first use\n  if (!cleanupRegistered) {\n    registerCleanup();\n    cleanupRegistered = true;\n  }\n\n  // Return environment with isolated cache\n  // Use Deno.env if available (Deno environment), otherwise use process.env (Node.js environment)\n  const baseEnv = typeof Deno !== 'undefined' && Deno.env ? Deno.env.toObject() : process.env;\n\n  return {\n    ...baseEnv,\n    NPM_CONFIG_CACHE: cacheDir,\n    // Also set npm cache for older npm versions\n    npm_config_cache: cacheDir,\n  };\n}\n\n/**\n * Gets environment variables for isolated NPX execution\n * @param {Object} additionalEnv - Additional environment variables\n * @returns {Object} Merged environment with isolated cache\n */\nexport function getIsolatedNpxEnv(additionalEnv = {}) {\n  const isolatedEnv = createIsolatedCache();\n  return {\n    ...isolatedEnv,\n    ...additionalEnv,\n  };\n}\n\n/**\n * Cleans up cache directories\n */\nasync function cleanupCaches() {\n  const cleanupPromises = Array.from(cacheDirectories).map(async (cacheDir) => {\n    try {\n      await fs.rm(cacheDir, { recursive: true, force: true });\n    } catch (error) {\n      // Ignore errors during cleanup - cache might already be gone\n      if (error.code !== 'ENOENT') {\n        console.debug(`Failed to cleanup cache ${cacheDir}:`, error.message);\n      }\n    }\n  });\n\n  await Promise.all(cleanupPromises);\n  cacheDirectories.clear();\n}\n\n/**\n * Registers cleanup handlers\n */\nfunction registerCleanup() {\n  // Cleanup on normal exit\n  process.on('exit', () => {\n    // Attempt synchronous cleanup on exit\n    for (const cacheDir of cacheDirectories) {\n      try {\n        require('fs').rmSync(cacheDir, { recursive: true, force: true });\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n  });\n\n  // Cleanup on signals\n  const signals = ['SIGINT', 'SIGTERM', 'SIGUSR1', 'SIGUSR2'];\n  signals.forEach((signal) => {\n    process.on(signal, async () => {\n      await cleanupCaches();\n      process.exit();\n    });\n  });\n\n  // Cleanup on uncaught exceptions\n  process.on('uncaughtException', async (error) => {\n    console.error('Uncaught exception:', error);\n    await cleanupCaches();\n    process.exit(1);\n  });\n\n  // Cleanup on unhandled rejections\n  process.on('unhandledRejection', async (reason, promise) => {\n    console.error('Unhandled rejection at:', promise, 'reason:', reason);\n    await cleanupCaches();\n    process.exit(1);\n  });\n}\n\n/**\n * Manually cleanup all caches (useful for testing)\n */\nexport async function cleanupAllCaches() {\n  await cleanupCaches();\n}\n\n// For direct CLI usage\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const command = process.argv[2];\n\n  if (command === 'test') {\n    console.log('Testing isolated cache creation...');\n    const env = createIsolatedCache();\n    console.log('Cache directory:', env.NPM_CONFIG_CACHE);\n    console.log('Environment configured successfully');\n\n    // Cleanup\n    await cleanupAllCaches();\n    console.log('Cleanup completed');\n  } else {\n    console.log('NPX Isolated Cache Utility');\n    console.log('Usage: node npx-isolated-cache.js test');\n  }\n}\n"],"names":["promises","fs","path","os","fileURLToPath","dirname","__filename","url","__dirname","cacheDirectories","Set","cleanupRegistered","createIsolatedCache","timestamp","Date","now","pid","process","random","Math","toString","substring","cacheName","cacheDir","join","tmpdir","add","registerCleanup","baseEnv","Deno","env","toObject","NPM_CONFIG_CACHE","npm_config_cache","getIsolatedNpxEnv","additionalEnv","isolatedEnv","cleanupCaches","cleanupPromises","Array","from","map","rm","recursive","force","error","code","console","debug","message","Promise","all","clear","on","require","rmSync","signals","forEach","signal","exit","reason","promise","cleanupAllCaches","argv","command","log"],"mappings":"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"}