{"version":3,"sources":["../../../src/utils/formatters.ts"],"sourcesContent":["/**\n * Utility functions for formatting data display\n */\n\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`;\n  if (ms < 60000) return `${Math.round(ms / 1000)}s`;\n  if (ms < 3600000) return `${Math.round(ms / 60000)}m`;\n  if (ms < 86400000) return `${Math.round(ms / 3600000)}h`;\n  return `${Math.round(ms / 86400000)}d`;\n}\n\nexport function formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\nexport function formatPercentage(value: number, decimals: number = 1): string {\n  return `${(value * 100).toFixed(decimals)}%`;\n}\n\nexport function formatNumber(num: number): string {\n  return num.toLocaleString();\n}\n\nexport function formatRelativeTime(date: Date): string {\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n\n  if (diff < 60000) return 'just now';\n  if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n  if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n  return `${Math.floor(diff / 86400000)}d ago`;\n}\n\nexport function formatUptime(startTime: Date): string {\n  const uptime = Date.now() - startTime.getTime();\n  return formatDuration(uptime);\n}\n\nexport function formatRate(rate: number): string {\n  if (rate < 1) return `${(rate * 1000).toFixed(1)}/s`;\n  if (rate < 60) return `${rate.toFixed(1)}/s`;\n  return `${(rate / 60).toFixed(1)}/min`;\n}\n\nexport function truncate(str: string, length: number): string {\n  if (str.length <= length) return str;\n  return str.substring(0, length - 3) + '...';\n}\n\nexport function formatStatus(status: string): string {\n  return status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();\n}\n\nexport function formatHealth(health: number): string {\n  const percentage = Math.round(health * 100);\n  let emoji = 'ðŸŸ¢';\n\n  if (health < 0.3) emoji = 'ðŸ”´';\n  else if (health < 0.7) emoji = 'ðŸŸ¡';\n\n  return `${emoji} ${percentage}%`;\n}\n\nexport function formatMetric(value: number, unit: string): string {\n  if (value < 1000) return `${value.toFixed(1)} ${unit}`;\n  if (value < 1000000) return `${(value / 1000).toFixed(1)}K ${unit}`;\n  return `${(value / 1000000).toFixed(1)}M ${unit}`;\n}\n"],"names":["formatDuration","ms","Math","round","formatBytes","bytes","k","sizes","i","floor","log","parseFloat","pow","toFixed","formatPercentage","value","decimals","formatNumber","num","toLocaleString","formatRelativeTime","date","now","Date","diff","getTime","formatUptime","startTime","uptime","formatRate","rate","truncate","str","length","substring","formatStatus","status","charAt","toUpperCase","slice","toLowerCase","formatHealth","health","percentage","emoji","formatMetric","unit"],"mappings":"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"}