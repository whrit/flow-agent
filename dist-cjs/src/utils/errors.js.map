{"version":3,"sources":["../../../src/utils/errors.ts"],"sourcesContent":["/**\n * Custom error types for Claude-Flow\n */\n\n/**\n * Base error class for all Claude-Flow errors\n */\nexport class ClaudeFlowError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly details?: unknown,\n  ) {\n    super(message);\n    this.name = 'ClaudeFlowError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      details: this.details,\n      stack: this.stack,\n    };\n  }\n}\n\n/**\n * Terminal-related errors\n */\nexport class TerminalError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'TERMINAL_ERROR', details);\n    this.name = 'TerminalError';\n  }\n}\n\nexport class TerminalSpawnError extends TerminalError {\n  override readonly code = 'TERMINAL_SPAWN_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\nexport class TerminalCommandError extends TerminalError {\n  override readonly code = 'TERMINAL_COMMAND_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\n/**\n * Memory-related errors\n */\nexport class MemoryError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'MEMORY_ERROR', details);\n    this.name = 'MemoryError';\n  }\n}\n\nexport class MemoryBackendError extends MemoryError {\n  override readonly code = 'MEMORY_BACKEND_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\nexport class MemoryConflictError extends MemoryError {\n  override readonly code = 'MEMORY_CONFLICT_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\n/**\n * Coordination-related errors\n */\nexport class CoordinationError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'COORDINATION_ERROR', details);\n    this.name = 'CoordinationError';\n  }\n}\n\nexport class DeadlockError extends CoordinationError {\n  override readonly code = 'DEADLOCK_ERROR';\n\n  constructor(\n    message: string,\n    public readonly agents: string[],\n    public readonly resources: string[],\n  ) {\n    super(message, { agents, resources });\n  }\n}\n\nexport class ResourceLockError extends CoordinationError {\n  override readonly code = 'RESOURCE_LOCK_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\n/**\n * MCP-related errors\n */\nexport class MCPError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'MCP_ERROR', details);\n    this.name = 'MCPError';\n  }\n}\n\nexport class MCPTransportError extends MCPError {\n  override readonly code = 'MCP_TRANSPORT_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\nexport class MCPMethodNotFoundError extends MCPError {\n  override readonly code = 'MCP_METHOD_NOT_FOUND';\n\n  constructor(method: string) {\n    super(`Method not found: ${method}`, { method });\n  }\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'CONFIG_ERROR', details);\n    this.name = 'ConfigError';\n  }\n}\n\nexport class ValidationError extends ConfigError {\n  override readonly code = 'VALIDATION_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\n/**\n * Task-related errors\n */\nexport class TaskError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'TASK_ERROR', details);\n    this.name = 'TaskError';\n  }\n}\n\nexport class TaskTimeoutError extends TaskError {\n  override readonly code = 'TASK_TIMEOUT_ERROR';\n\n  constructor(taskId: string, timeout: number) {\n    super(`Task ${taskId} timed out after ${timeout}ms`, { taskId, timeout });\n  }\n}\n\nexport class TaskDependencyError extends TaskError {\n  override readonly code = 'TASK_DEPENDENCY_ERROR';\n\n  constructor(taskId: string, dependencies: string[]) {\n    super(`Task ${taskId} has unmet dependencies`, { taskId, dependencies });\n  }\n}\n\n/**\n * System errors\n */\nexport class SystemError extends ClaudeFlowError {\n  constructor(message: string, details?: unknown) {\n    super(message, 'SYSTEM_ERROR', details);\n    this.name = 'SystemError';\n  }\n}\n\nexport class InitializationError extends SystemError {\n  override readonly code = 'INITIALIZATION_ERROR';\n\n  constructor(componentOrMessage: string, details?: unknown) {\n    // If the message already contains the word \"initialize\", use it as-is\n    const message = componentOrMessage.includes('initialize')\n      ? componentOrMessage\n      : `Failed to initialize ${componentOrMessage}`;\n    super(\n      message,\n      details ? { component: componentOrMessage, ...details } : { component: componentOrMessage },\n    );\n  }\n}\n\nexport class ShutdownError extends SystemError {\n  override readonly code = 'SHUTDOWN_ERROR';\n\n  constructor(message: string, details?: unknown) {\n    super(message, details);\n  }\n}\n\n/**\n * Error utilities\n */\nexport function isClaudeFlowError(error: unknown): error is ClaudeFlowError {\n  return error instanceof ClaudeFlowError;\n}\n\nexport function formatError(error: unknown): string {\n  if (error instanceof Error) {\n    return `${error.name}: ${error.message}`;\n  }\n  return String(error);\n}\n\nexport function getErrorDetails(error: unknown): unknown {\n  if (isClaudeFlowError(error)) {\n    return error.details;\n  }\n  return undefined;\n}\n"],"names":["ClaudeFlowError","Error","message","code","details","name","captureStackTrace","toJSON","stack","TerminalError","TerminalSpawnError","TerminalCommandError","MemoryError","MemoryBackendError","MemoryConflictError","CoordinationError","DeadlockError","agents","resources","ResourceLockError","MCPError","MCPTransportError","MCPMethodNotFoundError","method","ConfigError","ValidationError","TaskError","TaskTimeoutError","taskId","timeout","TaskDependencyError","dependencies","SystemError","InitializationError","componentOrMessage","includes","component","ShutdownError","isClaudeFlowError","error","formatError","String","getErrorDetails","undefined"],"mappings":"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"}