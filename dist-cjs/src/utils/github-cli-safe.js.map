{"version":3,"sources":["../../../src/utils/github-cli-safe.js"],"sourcesContent":["/**\n * DEPRECATED: Use github-cli-safety-wrapper.js instead\n * This file is maintained for backward compatibility only\n * \n * Safe GitHub CLI command execution utilities\n * Prevents shell injection and timeout issues with special characters\n */\n\nimport { \n  GitHubCliSafe, \n  githubCli, \n  safeGhCommand as newSafeGhCommand \n} from './github-cli-safety-wrapper.js';\n\n/**\n * @deprecated Use GitHubCliSafe class from github-cli-safety-wrapper.js\n * Execute GitHub CLI command with safe body content handling\n * @param {string} command - The gh command (e.g., 'issue comment')\n * @param {string} target - Target (issue/PR number or repo)\n * @param {string} body - Body content that may contain special characters\n * @param {Object} options - Additional options\n * @returns {Promise<string>} - Command output\n */\nexport async function safeGhCommand(command, target, body, options = {}) {\n  console.warn('safeGhCommand is deprecated. Use GitHubCliSafe from github-cli-safety-wrapper.js');\n  \n  try {\n    const result = await newSafeGhCommand(command, target, body, options);\n    return result.stdout;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * @deprecated This function is deprecated and will be removed\n * Execute command with timeout and proper cleanup\n * @param {string} command - Command to execute\n * @param {string[]} args - Command arguments\n * @param {number} timeout - Timeout in milliseconds\n * @returns {Promise<string>} - Command output\n */\nfunction executeWithTimeout(command, args, timeout) {\n  console.warn('executeWithTimeout is deprecated. Use GitHubCliSafe.executeWithTimeout instead');\n  \n  // Forward to new implementation via GitHubCliSafe\n  const ghSafe = new GitHubCliSafe({ timeout });\n  return ghSafe.executeWithTimeout(command.replace('gh ', ''), args.slice(1), { timeout });\n}\n\n/**\n * @deprecated Use gh object from github-cli-safety-wrapper.js\n * Safe methods for common GitHub CLI operations\n */\nexport const gh = {\n  /**\n   * @deprecated Use githubCli.addIssueComment instead\n   * Create issue comment safely\n   * @param {number|string} issue - Issue number\n   * @param {string} body - Comment body\n   * @param {Object} options - Additional options\n   */\n  async issueComment(issue, body, options = {}) {\n    console.warn('gh.issueComment is deprecated. Use githubCli.addIssueComment instead');\n    const result = await githubCli.addIssueComment(issue, body, options);\n    return result.stdout;\n  },\n  \n  /**\n   * @deprecated Use githubCli.addPRComment instead\n   * Create PR comment safely\n   * @param {number|string} pr - PR number\n   * @param {string} body - Comment body\n   * @param {Object} options - Additional options\n   */\n  async prComment(pr, body, options = {}) {\n    console.warn('gh.prComment is deprecated. Use githubCli.addPRComment instead');\n    const result = await githubCli.addPRComment(pr, body, options);\n    return result.stdout;\n  },\n  \n  /**\n   * @deprecated Use githubCli.createIssue instead\n   * Create issue safely\n   * @param {Object} params - Issue parameters\n   */\n  async createIssue({ title, body, labels = [], assignees = [] }) {\n    console.warn('gh.createIssue is deprecated. Use githubCli.createIssue instead');\n    const result = await githubCli.createIssue({ title, body, labels, assignees });\n    return result.stdout;\n  },\n  \n  /**\n   * @deprecated Use githubCli.createPR instead\n   * Create PR safely\n   * @param {Object} params - PR parameters\n   */\n  async createPR({ title, body, base = 'main', head, draft = false }) {\n    console.warn('gh.createPR is deprecated. Use githubCli.createPR instead');\n    const result = await githubCli.createPR({ title, body, base, head, draft });\n    return result.stdout;\n  }\n};\n\n/**\n * Example usage:\n * \n * import { gh } from './github-cli-safe.js';\n * \n * // Safe issue comment with special characters\n * await gh.issueComment(123, 'Code: `npm install` and $(echo test)');\n * \n * // Safe PR creation with complex body\n * await gh.createPR({\n *   title: 'Fix: Handle special characters',\n *   body: 'This fixes issues with `backticks` and .claude/agents/ paths',\n *   base: 'main'\n * });\n */"],"names":["GitHubCliSafe","githubCli","safeGhCommand","newSafeGhCommand","command","target","body","options","console","warn","result","stdout","error","executeWithTimeout","args","timeout","ghSafe","replace","slice","gh","issueComment","issue","addIssueComment","prComment","pr","addPRComment","createIssue","title","labels","assignees","createPR","base","head","draft"],"mappings":"AAQA,SACEA,aAAa,EACbC,SAAS,EACTC,iBAAiBC,gBAAgB,QAC5B,iCAAiC;AAWxC,OAAO,eAAeD,cAAcE,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC;IACrEC,QAAQC,IAAI,CAAC;IAEb,IAAI;QACF,MAAMC,SAAS,MAAMP,iBAAiBC,SAASC,QAAQC,MAAMC;QAC7D,OAAOG,OAAOC,MAAM;IACtB,EAAE,OAAOC,OAAO;QACd,MAAMA;IACR;AACF;AAUA,SAASC,mBAAmBT,OAAO,EAAEU,IAAI,EAAEC,OAAO;IAChDP,QAAQC,IAAI,CAAC;IAGb,MAAMO,SAAS,IAAIhB,cAAc;QAAEe;IAAQ;IAC3C,OAAOC,OAAOH,kBAAkB,CAACT,QAAQa,OAAO,CAAC,OAAO,KAAKH,KAAKI,KAAK,CAAC,IAAI;QAAEH;IAAQ;AACxF;AAMA,OAAO,MAAMI,KAAK;IAQhB,MAAMC,cAAaC,KAAK,EAAEf,IAAI,EAAEC,UAAU,CAAC,CAAC;QAC1CC,QAAQC,IAAI,CAAC;QACb,MAAMC,SAAS,MAAMT,UAAUqB,eAAe,CAACD,OAAOf,MAAMC;QAC5D,OAAOG,OAAOC,MAAM;IACtB;IASA,MAAMY,WAAUC,EAAE,EAAElB,IAAI,EAAEC,UAAU,CAAC,CAAC;QACpCC,QAAQC,IAAI,CAAC;QACb,MAAMC,SAAS,MAAMT,UAAUwB,YAAY,CAACD,IAAIlB,MAAMC;QACtD,OAAOG,OAAOC,MAAM;IACtB;IAOA,MAAMe,aAAY,EAAEC,KAAK,EAAErB,IAAI,EAAEsB,SAAS,EAAE,EAAEC,YAAY,EAAE,EAAE;QAC5DrB,QAAQC,IAAI,CAAC;QACb,MAAMC,SAAS,MAAMT,UAAUyB,WAAW,CAAC;YAAEC;YAAOrB;YAAMsB;YAAQC;QAAU;QAC5E,OAAOnB,OAAOC,MAAM;IACtB;IAOA,MAAMmB,UAAS,EAAEH,KAAK,EAAErB,IAAI,EAAEyB,OAAO,MAAM,EAAEC,IAAI,EAAEC,QAAQ,KAAK,EAAE;QAChEzB,QAAQC,IAAI,CAAC;QACb,MAAMC,SAAS,MAAMT,UAAU6B,QAAQ,CAAC;YAAEH;YAAOrB;YAAMyB;YAAMC;YAAMC;QAAM;QACzE,OAAOvB,OAAOC,MAAM;IACtB;AACF,EAAE"}