{"version":3,"sources":["../../../src/utils/github-cli-safety-wrapper.js"],"sourcesContent":["/**\n * GitHub CLI Safety Wrapper - Production-Ready Implementation\n * \n * Comprehensive wrapper around GitHub CLI commands with:\n * - Injection attack prevention\n * - Timeout handling with graceful cleanup\n * - Process management and recovery\n * - Input validation and sanitization\n * - Rate limiting protection\n * - Comprehensive error handling\n * - Retry logic with exponential backoff\n * - Secure temp file handling\n * - Logging and monitoring\n * \n * @version 2.0.0\n * @license MIT\n */\n\nimport { promises as fs } from 'fs';\nimport { tmpdir } from 'os';\nimport { join, resolve } from 'path';\nimport { randomBytes, createHash } from 'crypto';\nimport { spawn, execSync } from 'child_process';\nimport { performance } from 'perf_hooks';\n\n/**\n * Configuration constants\n */\nconst CONFIG = {\n  DEFAULT_TIMEOUT: 30000,          // 30 seconds\n  MAX_TIMEOUT: 300000,             // 5 minutes\n  MAX_RETRIES: 3,\n  RETRY_BASE_DELAY: 1000,          // 1 second\n  MAX_BODY_SIZE: 1024 * 1024,      // 1MB\n  RATE_LIMIT_WINDOW: 60000,        // 1 minute\n  MAX_REQUESTS_PER_WINDOW: 50,\n  TEMP_FILE_PREFIX: 'gh-safe-',\n  ALLOWED_COMMANDS: [\n    'auth', 'repo', 'issue', 'pr', 'release', 'gist', 'run', 'workflow', \n    'api', 'browse', 'config', 'extension', 'gpg-key', 'label', 'project',\n    'secret', 'ssh-key', 'status', 'variable', 'cache', 'codespace'\n  ],\n  DANGEROUS_PATTERNS: [\n    /\\$\\([^)]*\\)/g,                // Command substitution $(...)\n    /`[^`]*`/g,                    // Backtick execution\n    /&&|\\|\\||;|&/g,                // Command chaining\n    /<\\(/g,                        // Process substitution\n    />\\s*\\/dev\\/null/g,            // Output redirection\n    /\\|\\s*sh/g,                    // Pipe to shell\n    /eval\\s*\\(/g,                  // eval() calls\n    /exec\\s*\\(/g,                  // exec() calls\n  ]\n};\n\n/**\n * Custom error classes for better error handling\n */\nclass GitHubCliError extends Error {\n  constructor(message, code = 'GITHUB_CLI_ERROR', details = {}) {\n    super(message);\n    this.name = 'GitHubCliError';\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date().toISOString();\n  }\n}\n\nclass GitHubCliTimeoutError extends GitHubCliError {\n  constructor(timeout, command) {\n    super(`Command timed out after ${timeout}ms: ${command}`, 'TIMEOUT', { timeout, command });\n    this.name = 'GitHubCliTimeoutError';\n  }\n}\n\nclass GitHubCliValidationError extends GitHubCliError {\n  constructor(message, field, value) {\n    super(message, 'VALIDATION_ERROR', { field, value });\n    this.name = 'GitHubCliValidationError';\n  }\n}\n\nclass GitHubCliRateLimitError extends GitHubCliError {\n  constructor(message) {\n    super(message, 'RATE_LIMIT_ERROR');\n    this.name = 'GitHubCliRateLimitError';\n  }\n}\n\n/**\n * Rate limiter to prevent API abuse\n */\nclass RateLimiter {\n  constructor(maxRequests = CONFIG.MAX_REQUESTS_PER_WINDOW, windowMs = CONFIG.RATE_LIMIT_WINDOW) {\n    this.maxRequests = maxRequests;\n    this.windowMs = windowMs;\n    this.requests = [];\n  }\n\n  async checkLimit() {\n    const now = Date.now();\n    this.requests = this.requests.filter(time => now - time < this.windowMs);\n    \n    if (this.requests.length >= this.maxRequests) {\n      const oldestRequest = Math.min(...this.requests);\n      const resetTime = oldestRequest + this.windowMs;\n      const waitTime = resetTime - now;\n      \n      throw new GitHubCliRateLimitError(\n        `Rate limit exceeded. Try again in ${Math.ceil(waitTime / 1000)} seconds`\n      );\n    }\n    \n    this.requests.push(now);\n  }\n}\n\n/**\n * Main GitHub CLI Safety Wrapper Class\n */\nexport class GitHubCliSafe {\n  constructor(options = {}) {\n    this.options = {\n      timeout: options.timeout || CONFIG.DEFAULT_TIMEOUT,\n      maxRetries: options.maxRetries || CONFIG.MAX_RETRIES,\n      retryDelay: options.retryDelay || CONFIG.RETRY_BASE_DELAY,\n      enableRateLimit: options.enableRateLimit !== false,\n      enableLogging: options.enableLogging !== false,\n      tempDir: options.tempDir || tmpdir(),\n      ...options\n    };\n    \n    this.rateLimiter = new RateLimiter();\n    this.activeProcesses = new Map();\n    this.stats = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      timeoutRequests: 0,\n      retriedRequests: 0\n    };\n  }\n\n  /**\n   * Input validation and sanitization\n   */\n  validateCommand(command) {\n    if (typeof command !== 'string' || !command.trim()) {\n      throw new GitHubCliValidationError('Command must be a non-empty string', 'command', command);\n    }\n\n    const parts = command.trim().split(' ');\n    const mainCommand = parts[0];\n    \n    if (!CONFIG.ALLOWED_COMMANDS.includes(mainCommand)) {\n      throw new GitHubCliValidationError(\n        `Command '${mainCommand}' is not allowed`, \n        'command', \n        mainCommand\n      );\n    }\n\n    return command;\n  }\n\n  sanitizeInput(input) {\n    if (typeof input !== 'string') {\n      input = String(input);\n    }\n\n    // Check for dangerous patterns\n    for (const pattern of CONFIG.DANGEROUS_PATTERNS) {\n      if (pattern.test(input)) {\n        throw new GitHubCliValidationError(\n          `Input contains potentially dangerous pattern: ${pattern}`,\n          'input',\n          input\n        );\n      }\n    }\n\n    return input;\n  }\n\n  validateBodySize(body) {\n    if (Buffer.byteLength(body, 'utf8') > CONFIG.MAX_BODY_SIZE) {\n      throw new GitHubCliValidationError(\n        `Body size exceeds maximum allowed size of ${CONFIG.MAX_BODY_SIZE} bytes`,\n        'body',\n        body.length\n      );\n    }\n  }\n\n  /**\n   * Secure temporary file handling\n   */\n  async createSecureTempFile(content, suffix = '.tmp') {\n    const filename = `${CONFIG.TEMP_FILE_PREFIX}${randomBytes(16).toString('hex')}${suffix}`;\n    const filepath = resolve(this.options.tempDir, filename);\n    \n    // Validate content size\n    this.validateBodySize(content);\n    \n    // Create file with restricted permissions (600 - owner read/write only)\n    await fs.writeFile(filepath, content, { mode: 0o600 });\n    \n    return filepath;\n  }\n\n  async cleanupTempFile(filepath) {\n    try {\n      await fs.unlink(filepath);\n    } catch (error) {\n      if (this.options.enableLogging) {\n        console.warn(`Failed to cleanup temp file ${filepath}:`, error.message);\n      }\n    }\n  }\n\n  /**\n   * Process management with timeout and cleanup\n   */\n  async executeWithTimeout(command, args, options = {}) {\n    const timeout = Math.min(options.timeout || this.options.timeout, CONFIG.MAX_TIMEOUT);\n    const processId = randomBytes(8).toString('hex');\n    \n    return new Promise((resolve, reject) => {\n      const startTime = performance.now();\n      \n      const child = spawn('gh', args, {\n        stdio: ['ignore', 'pipe', 'pipe'],\n        shell: false, // Critical: prevent shell injection\n        env: { ...process.env, ...options.env },\n        cwd: options.cwd || process.cwd()\n      });\n\n      this.activeProcesses.set(processId, child);\n      \n      let stdout = '';\n      let stderr = '';\n      let isTimedOut = false;\n      let isResolved = false;\n\n      // Timeout handler\n      const timer = setTimeout(() => {\n        if (!isResolved) {\n          isTimedOut = true;\n          this.killProcess(child, processId);\n          this.stats.timeoutRequests++;\n          reject(new GitHubCliTimeoutError(timeout, `gh ${args.join(' ')}`));\n        }\n      }, timeout);\n\n      // Data handlers\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      // Process completion handler\n      child.on('close', (code, signal) => {\n        if (isResolved) return;\n        \n        isResolved = true;\n        clearTimeout(timer);\n        this.activeProcesses.delete(processId);\n        \n        const duration = performance.now() - startTime;\n        \n        if (isTimedOut) {\n          return; // Already handled by timeout\n        }\n\n        if (signal === 'SIGKILL' || signal === 'SIGTERM') {\n          reject(new GitHubCliError(\n            `Process terminated by signal ${signal}`,\n            'PROCESS_TERMINATED',\n            { signal, code, duration }\n          ));\n          return;\n        }\n\n        if (code !== 0) {\n          this.stats.failedRequests++;\n          reject(new GitHubCliError(\n            `Command failed with exit code ${code}: ${stderr || 'No error details'}`,\n            'COMMAND_FAILED',\n            { code, stderr, stdout, duration, command: `gh ${args.join(' ')}` }\n          ));\n          return;\n        }\n\n        this.stats.successfulRequests++;\n        resolve({\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n          code,\n          duration,\n          command: `gh ${args.join(' ')}`\n        });\n      });\n\n      // Error handler\n      child.on('error', (error) => {\n        if (isResolved) return;\n        \n        isResolved = true;\n        clearTimeout(timer);\n        this.activeProcesses.delete(processId);\n        this.stats.failedRequests++;\n        \n        reject(new GitHubCliError(\n          `Process error: ${error.message}`,\n          'PROCESS_ERROR',\n          { originalError: error }\n        ));\n      });\n    });\n  }\n\n  killProcess(child, processId) {\n    try {\n      // Graceful termination first\n      child.kill('SIGTERM');\n      \n      // Force kill after 5 seconds if still running\n      setTimeout(() => {\n        if (this.activeProcesses.has(processId)) {\n          child.kill('SIGKILL');\n          this.activeProcesses.delete(processId);\n        }\n      }, 5000);\n    } catch (error) {\n      if (this.options.enableLogging) {\n        console.warn(`Failed to kill process ${processId}:`, error.message);\n      }\n    }\n  }\n\n  /**\n   * Retry logic with exponential backoff\n   */\n  async withRetry(operation, maxRetries = this.options.maxRetries) {\n    let lastError;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        if (attempt > 0) {\n          this.stats.retriedRequests++;\n          const delay = this.options.retryDelay * Math.pow(2, attempt - 1);\n          await this.sleep(delay);\n        }\n        \n        return await operation();\n      } catch (error) {\n        lastError = error;\n        \n        // Don't retry on validation errors or rate limits\n        if (error instanceof GitHubCliValidationError || \n            error instanceof GitHubCliRateLimitError) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          break;\n        }\n        \n        if (this.options.enableLogging) {\n          console.warn(`Attempt ${attempt + 1} failed, retrying:`, error.message);\n        }\n      }\n    }\n    \n    throw lastError;\n  }\n\n  async sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Core execution method with all safety features\n   */\n  async execute(command, options = {}) {\n    this.stats.totalRequests++;\n    \n    // Rate limiting check\n    if (this.options.enableRateLimit) {\n      await this.rateLimiter.checkLimit();\n    }\n    \n    // Validate and sanitize command\n    const validatedCommand = this.validateCommand(command);\n    const args = validatedCommand.split(' ');\n    \n    // Handle body content if provided\n    let tempFile = null;\n    try {\n      if (options.body) {\n        const sanitizedBody = this.sanitizeInput(options.body);\n        tempFile = await this.createSecureTempFile(sanitizedBody);\n        args.push('--body-file', tempFile);\n      }\n      \n      // Add other options\n      if (options.title) {\n        args.push('--title', this.sanitizeInput(options.title));\n      }\n      \n      if (options.labels && Array.isArray(options.labels)) {\n        const sanitizedLabels = options.labels.map(label => this.sanitizeInput(label));\n        args.push('--label', sanitizedLabels.join(','));\n      }\n      \n      if (options.assignees && Array.isArray(options.assignees)) {\n        const sanitizedAssignees = options.assignees.map(assignee => this.sanitizeInput(assignee));\n        args.push('--assignee', sanitizedAssignees.join(','));\n      }\n      \n      // Add any additional flags\n      if (options.flags) {\n        for (const [flag, value] of Object.entries(options.flags)) {\n          args.push(`--${flag}`);\n          if (value !== true) {\n            args.push(this.sanitizeInput(String(value)));\n          }\n        }\n      }\n      \n      // Execute with retry logic\n      return await this.withRetry(async () => {\n        return await this.executeWithTimeout(validatedCommand, args.slice(1), options);\n      });\n      \n    } finally {\n      // Always cleanup temp file\n      if (tempFile) {\n        await this.cleanupTempFile(tempFile);\n      }\n    }\n  }\n\n  /**\n   * High-level methods for common GitHub operations\n   */\n  async createIssue({ title, body, labels = [], assignees = [], ...options }) {\n    return await this.execute('issue create', {\n      title,\n      body,\n      labels,\n      assignees,\n      ...options\n    });\n  }\n\n  async createPR({ title, body, base = 'main', head, draft = false, ...options }) {\n    const flags = { base };\n    if (head) flags.head = head;\n    if (draft) flags.draft = true;\n    \n    return await this.execute('pr create', {\n      title,\n      body,\n      flags,\n      ...options\n    });\n  }\n\n  async addIssueComment(issueNumber, body, options = {}) {\n    return await this.execute(`issue comment ${issueNumber}`, {\n      body,\n      ...options\n    });\n  }\n\n  async addPRComment(prNumber, body, options = {}) {\n    return await this.execute(`pr comment ${prNumber}`, {\n      body,\n      ...options\n    });\n  }\n\n  async createRelease({ tag, title, body, prerelease = false, draft = false, ...options }) {\n    const flags = { tag };\n    if (prerelease) flags.prerelease = true;\n    if (draft) flags.draft = true;\n    \n    return await this.execute('release create', {\n      title,\n      body,\n      flags,\n      ...options\n    });\n  }\n\n  /**\n   * Utility methods\n   */\n  async checkGitHubCli() {\n    try {\n      execSync('gh --version', { stdio: 'ignore' });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async checkAuthentication() {\n    try {\n      const result = await this.execute('auth status');\n      return result.code === 0;\n    } catch {\n      return false;\n    }\n  }\n\n  getStats() {\n    return { ...this.stats };\n  }\n\n  getActiveProcessCount() {\n    return this.activeProcesses.size;\n  }\n\n  async cleanup() {\n    // Kill all active processes\n    for (const [processId, child] of this.activeProcesses) {\n      this.killProcess(child, processId);\n    }\n    this.activeProcesses.clear();\n  }\n}\n\n/**\n * Factory function for creating configured instances\n */\nexport function createGitHubCliSafe(options = {}) {\n  return new GitHubCliSafe(options);\n}\n\n/**\n * Default singleton instance\n */\nexport const githubCli = new GitHubCliSafe();\n\n/**\n * Legacy compatibility functions\n */\nexport async function safeGhCommand(command, target, body, options = {}) {\n  return await githubCli.execute(`${command} ${target}`, { body, ...options });\n}\n\nexport const gh = {\n  async issueComment(issue, body, options = {}) {\n    return await githubCli.addIssueComment(issue, body, options);\n  },\n  \n  async prComment(pr, body, options = {}) {\n    return await githubCli.addPRComment(pr, body, options);\n  },\n  \n  async createIssue(params) {\n    return await githubCli.createIssue(params);\n  },\n  \n  async createPR(params) {\n    return await githubCli.createPR(params);\n  }\n};\n\n/**\n * Process cleanup on exit\n */\nprocess.on('SIGINT', async () => {\n  await githubCli.cleanup();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  await githubCli.cleanup();\n  process.exit(0);\n});\n\nexport default GitHubCliSafe;"],"names":["promises","fs","tmpdir","resolve","randomBytes","spawn","execSync","performance","CONFIG","DEFAULT_TIMEOUT","MAX_TIMEOUT","MAX_RETRIES","RETRY_BASE_DELAY","MAX_BODY_SIZE","RATE_LIMIT_WINDOW","MAX_REQUESTS_PER_WINDOW","TEMP_FILE_PREFIX","ALLOWED_COMMANDS","DANGEROUS_PATTERNS","GitHubCliError","Error","message","code","details","name","timestamp","Date","toISOString","GitHubCliTimeoutError","timeout","command","GitHubCliValidationError","field","value","GitHubCliRateLimitError","RateLimiter","maxRequests","windowMs","requests","checkLimit","now","filter","time","length","oldestRequest","Math","min","resetTime","waitTime","ceil","push","GitHubCliSafe","options","maxRetries","retryDelay","enableRateLimit","enableLogging","tempDir","rateLimiter","activeProcesses","Map","stats","totalRequests","successfulRequests","failedRequests","timeoutRequests","retriedRequests","validateCommand","trim","parts","split","mainCommand","includes","sanitizeInput","input","String","pattern","test","validateBodySize","body","Buffer","byteLength","createSecureTempFile","content","suffix","filename","toString","filepath","writeFile","mode","cleanupTempFile","unlink","error","console","warn","executeWithTimeout","args","processId","Promise","reject","startTime","child","stdio","shell","env","process","cwd","set","stdout","stderr","isTimedOut","isResolved","timer","setTimeout","killProcess","join","on","data","signal","clearTimeout","delete","duration","originalError","kill","has","withRetry","operation","lastError","attempt","delay","pow","sleep","ms","execute","validatedCommand","tempFile","sanitizedBody","title","labels","Array","isArray","sanitizedLabels","map","label","assignees","sanitizedAssignees","assignee","flags","flag","Object","entries","slice","createIssue","createPR","base","head","draft","addIssueComment","issueNumber","addPRComment","prNumber","createRelease","tag","prerelease","checkGitHubCli","checkAuthentication","result","getStats","getActiveProcessCount","size","cleanup","clear","createGitHubCliSafe","githubCli","safeGhCommand","target","gh","issueComment","issue","prComment","pr","params","exit"],"mappings":"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"}