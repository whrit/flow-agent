{"version":3,"sources":["../../../src/utils/types.ts"],"sourcesContent":["/**\n * Core type definitions for Claude-Flow\n */\n\n// Configuration interface\nexport interface Config {\n  env: 'development' | 'production' | 'test';\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n  enableMetrics?: boolean;\n  orchestrator?: {\n    dataDir?: string;\n    maxAgents?: number;\n    taskTimeout?: number;\n    persistSessions?: boolean;\n    shutdownTimeout?: number;\n    maxConcurrentAgents?: number;\n  };\n  logging?: LoggingConfig;\n  terminal?: {\n    shell?: string;\n    timeout?: number;\n    maxSessions?: number;\n  };\n  memory?: {\n    backend?: 'sqlite' | 'memory';\n    ttl?: number;\n    maxEntries?: number;\n  };\n  coordination?: {\n    enabled?: boolean;\n    maxConnections?: number;\n  };\n  mcp?: {\n    enabled?: boolean;\n    port?: number;\n  };\n  database?: {\n    url: string;\n    poolSize?: number;\n  };\n  redis?: {\n    url: string;\n    keyPrefix?: string;\n  };\n  api?: {\n    port: number;\n    host: string;\n    cors?: {\n      origin: string[];\n      credentials: boolean;\n    };\n  };\n  agents?: {\n    maxConcurrent: number;\n    timeout: number;\n  };\n  security?: {\n    jwtSecret: string;\n    encryptionKey: string;\n  };\n}\n\n// Logging configuration interface\nexport interface LoggingConfig {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  format: 'text' | 'json';\n  destination: 'console' | 'file' | 'both';\n  file?: {\n    path: string;\n    maxSize: number;\n    maxFiles: number;\n  };\n  enableTimestamps?: boolean;\n  enableContext?: boolean;\n}\n\n// Import orchestrator metrics type\nexport interface OrchestratorMetrics {\n  uptime: number;\n  totalAgents: number;\n  activeAgents: number;\n  totalTasks: number;\n  completedTasks: number;\n  failedTasks: number;\n  queuedTasks: number;\n  avgTaskDuration: number;\n  memoryUsage: {\n    rss: number;\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    arrayBuffers: number;\n  };\n  cpuUsage: {\n    user: number;\n    system: number;\n  };\n  timestamp: Date;\n}\n\n// Agent-related types\nexport interface AgentProfile {\n  id: string;\n  name: string;\n  type: 'coordinator' | 'researcher' | 'implementer' | 'analyst' | 'custom';\n  capabilities: string[];\n  systemPrompt?: string;\n  maxConcurrentTasks: number;\n  priority?: number;\n  environment?: Record<string, string>;\n  workingDirectory?: string;\n  shell?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface AgentSession {\n  id: string;\n  agentId: string;\n  terminalId: string;\n  startTime: Date;\n  endTime?: Date;\n  status: 'active' | 'idle' | 'terminated' | 'error';\n  lastActivity: Date;\n  memoryBankId: string;\n}\n\n// Task-related types\nexport interface Task {\n  id: string;\n  type: string;\n  description: string;\n  priority: number;\n  dependencies: string[];\n  assignedAgent?: string;\n  status: TaskStatus;\n  input: Record<string, unknown>;\n  output?: Record<string, unknown>;\n  error?: Error;\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  metadata?: Record<string, unknown>;\n}\n\nexport type TaskStatus =\n  | 'pending'\n  | 'queued'\n  | 'assigned'\n  | 'running'\n  | 'completed'\n  | 'failed'\n  | 'cancelled';\n\n// Memory-related types\nexport interface MemoryEntry {\n  id: string;\n  agentId: string;\n  sessionId: string;\n  type: 'observation' | 'insight' | 'decision' | 'artifact' | 'error';\n  content: string;\n  context: Record<string, unknown>;\n  timestamp: Date;\n  tags: string[];\n  version: number;\n  parentId?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface MemoryQuery {\n  agentId?: string;\n  sessionId?: string;\n  type?: MemoryEntry['type'];\n  tags?: string[];\n  startTime?: Date;\n  endTime?: Date;\n  search?: string;\n  limit?: number;\n  offset?: number;\n  namespace?: string;\n}\n\n// Event-related types\nexport enum SystemEvents {\n  // Agent events\n  AGENT_SPAWNED = 'agent:spawned',\n  AGENT_TERMINATED = 'agent:terminated',\n  AGENT_ERROR = 'agent:error',\n  AGENT_IDLE = 'agent:idle',\n  AGENT_ACTIVE = 'agent:active',\n\n  // Task events\n  TASK_CREATED = 'task:created',\n  TASK_ASSIGNED = 'task:assigned',\n  TASK_STARTED = 'task:started',\n  TASK_COMPLETED = 'task:completed',\n  TASK_FAILED = 'task:failed',\n  TASK_CANCELLED = 'task:cancelled',\n\n  // Memory events\n  MEMORY_CREATED = 'memory:created',\n  MEMORY_UPDATED = 'memory:updated',\n  MEMORY_DELETED = 'memory:deleted',\n  MEMORY_SYNCED = 'memory:synced',\n\n  // System events\n  SYSTEM_READY = 'system:ready',\n  SYSTEM_SHUTDOWN = 'system:shutdown',\n  SYSTEM_ERROR = 'system:error',\n  SYSTEM_HEALTHCHECK = 'system:healthcheck',\n\n  // Coordination events\n  RESOURCE_ACQUIRED = 'resource:acquired',\n  RESOURCE_RELEASED = 'resource:released',\n  DEADLOCK_DETECTED = 'deadlock:detected',\n  MESSAGE_SENT = 'message:sent',\n  MESSAGE_RECEIVED = 'message:received',\n}\n\nexport interface EventMap extends Record<string, unknown> {\n  [SystemEvents.AGENT_SPAWNED]: { agentId: string; profile: AgentProfile; sessionId: string };\n  [SystemEvents.AGENT_TERMINATED]: { agentId: string; reason: string };\n  [SystemEvents.AGENT_ERROR]: { agentId: string; error: Error };\n  [SystemEvents.AGENT_IDLE]: { agentId: string };\n  [SystemEvents.AGENT_ACTIVE]: { agentId: string; taskId: string };\n\n  [SystemEvents.TASK_CREATED]: { task: Task };\n  [SystemEvents.TASK_ASSIGNED]: { taskId: string; agentId: string };\n  [SystemEvents.TASK_STARTED]: { taskId: string; agentId: string };\n  [SystemEvents.TASK_COMPLETED]: { taskId: string; result: unknown };\n  [SystemEvents.TASK_FAILED]: { taskId: string; error: Error };\n  [SystemEvents.TASK_CANCELLED]: { taskId: string; reason: string };\n\n  [SystemEvents.MEMORY_CREATED]: { entry: MemoryEntry };\n  [SystemEvents.MEMORY_UPDATED]: { entry: MemoryEntry; previousVersion: number };\n  [SystemEvents.MEMORY_DELETED]: { entryId: string };\n  [SystemEvents.MEMORY_SYNCED]: { entries: MemoryEntry[] };\n\n  [SystemEvents.SYSTEM_READY]: { timestamp: Date };\n  [SystemEvents.SYSTEM_SHUTDOWN]: { reason: string };\n  [SystemEvents.SYSTEM_ERROR]: { error: Error; component: string };\n  [SystemEvents.SYSTEM_HEALTHCHECK]: { status: HealthStatus };\n\n  [SystemEvents.RESOURCE_ACQUIRED]: { resourceId: string; agentId: string };\n  [SystemEvents.RESOURCE_RELEASED]: { resourceId: string; agentId: string };\n  [SystemEvents.DEADLOCK_DETECTED]: { agents: string[]; resources: string[] };\n  [SystemEvents.MESSAGE_SENT]: { from: string; to: string; message: Message };\n  [SystemEvents.MESSAGE_RECEIVED]: { from: string; to: string; message: Message };\n\n  // Additional events\n  'metrics:collected': OrchestratorMetrics;\n}\n\n// Configuration types\nexport interface Config {\n  orchestrator: OrchestratorConfig;\n  terminal: TerminalConfig;\n  memory: MemoryConfig;\n  coordination: CoordinationConfig;\n  mcp: MCPConfig;\n  logging: LoggingConfig;\n  credentials?: CredentialsConfig;\n  security?: SecurityConfig;\n}\n\nexport interface OrchestratorConfig {\n  maxConcurrentAgents: number;\n  taskQueueSize: number;\n  healthCheckInterval: number;\n  shutdownTimeout: number;\n  maintenanceInterval?: number;\n  metricsInterval?: number;\n  persistSessions?: boolean;\n  dataDir?: string;\n  sessionRetentionMs?: number;\n  taskHistoryRetentionMs?: number;\n  taskMaxRetries?: number;\n}\n\nexport interface TerminalConfig {\n  type: 'vscode' | 'native' | 'auto';\n  poolSize: number;\n  recycleAfter: number;\n  healthCheckInterval: number;\n  commandTimeout: number;\n}\n\nexport interface MemoryConfig {\n  backend: 'sqlite' | 'markdown' | 'hybrid';\n  cacheSizeMB: number;\n  syncInterval: number;\n  conflictResolution: 'last-write' | 'crdt' | 'manual';\n  retentionDays: number;\n  sqlitePath?: string;\n  markdownDir?: string;\n}\n\nexport interface CoordinationConfig {\n  maxRetries: number;\n  retryDelay: number;\n  deadlockDetection: boolean;\n  resourceTimeout: number;\n  messageTimeout: number;\n}\n\nexport interface MCPConfig {\n  transport: 'stdio' | 'http' | 'websocket';\n  host?: string;\n  port?: number;\n  tlsEnabled?: boolean;\n  authToken?: string;\n  auth?: MCPAuthConfig;\n  loadBalancer?: MCPLoadBalancerConfig;\n  sessionTimeout?: number;\n  maxSessions?: number;\n  enableMetrics?: boolean;\n  corsEnabled?: boolean;\n  corsOrigins?: string[];\n}\n\nexport interface LoggingConfig {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  format: 'json' | 'text';\n  destination: 'console' | 'file' | 'both';\n  filePath?: string;\n  maxFileSize?: number;\n  maxFiles?: number;\n}\n\n// Health and monitoring types\nexport interface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  components: Record<string, ComponentHealth>;\n  timestamp: Date;\n}\n\nexport interface ComponentHealth {\n  name: string;\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  lastCheck: Date;\n  error?: string;\n  metrics?: Record<string, number>;\n}\n\n// Message passing types\nexport interface Message {\n  id: string;\n  type: string;\n  payload: unknown;\n  timestamp: Date;\n  priority: number;\n  expiry?: Date;\n}\n\n// Resource management types\nexport interface Resource {\n  id: string;\n  type: string;\n  owner?: string;\n  locked: boolean;\n  lockedBy?: string;\n  lockedAt?: Date;\n  metadata?: Record<string, unknown>;\n}\n\n// MCP types - Full protocol compliance\nexport interface MCPProtocolVersion {\n  major: number;\n  minor: number;\n  patch: number;\n}\n\nexport interface MCPCapabilities {\n  logging?: {\n    level?: 'debug' | 'info' | 'warn' | 'error';\n  };\n  prompts?: {\n    listChanged?: boolean;\n  };\n  resources?: {\n    listChanged?: boolean;\n    subscribe?: boolean;\n  };\n  tools?: {\n    listChanged?: boolean;\n  };\n  sampling?: Record<string, unknown>;\n}\n\nexport interface MCPInitializeParams {\n  protocolVersion: MCPProtocolVersion;\n  capabilities: MCPCapabilities;\n  clientInfo: {\n    name: string;\n    version: string;\n  };\n}\n\nexport interface MCPInitializeResult {\n  protocolVersion: MCPProtocolVersion;\n  capabilities: MCPCapabilities;\n  serverInfo: {\n    name: string;\n    version: string;\n  };\n  instructions?: string;\n}\n\nexport interface MCPTool {\n  name: string;\n  description: string;\n  inputSchema: Record<string, unknown>;\n  handler: (input: unknown, context?: MCPContext) => Promise<unknown>;\n}\n\nexport interface MCPPrompt {\n  name: string;\n  description?: string;\n  arguments?: Array<{\n    name: string;\n    description?: string;\n    required?: boolean;\n  }>;\n}\n\nexport interface MCPResource {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n}\n\nexport interface MCPRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: string;\n  params?: unknown;\n}\n\nexport interface MCPResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result?: unknown;\n  error?: MCPError;\n}\n\nexport interface MCPNotification {\n  jsonrpc: '2.0';\n  method: string;\n  params?: unknown;\n}\n\nexport interface MCPError {\n  code: number;\n  message: string;\n  data?: unknown;\n}\n\nexport interface MCPToolCall {\n  name: string;\n  arguments?: Record<string, unknown>;\n}\n\nexport interface MCPToolResult {\n  content: Array<{\n    type: 'text' | 'image' | 'resource';\n    text?: string;\n    data?: string;\n    mimeType?: string;\n  }>;\n  isError?: boolean;\n}\n\nexport interface MCPLogEntry {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  data?: unknown;\n  logger?: string;\n}\n\nexport interface MCPSession {\n  id: string;\n  clientInfo: {\n    name: string;\n    version: string;\n  };\n  protocolVersion: MCPProtocolVersion;\n  capabilities: MCPCapabilities;\n  isInitialized: boolean;\n  createdAt: Date;\n  lastActivity: Date;\n  transport: 'stdio' | 'http' | 'websocket';\n  authenticated: boolean;\n  authData?: {\n    token?: string;\n    user?: string;\n    permissions?: string[];\n  };\n}\n\nexport interface MCPAuthConfig {\n  enabled: boolean;\n  method: 'token' | 'basic' | 'oauth';\n  tokens?: string[];\n  users?: Array<{\n    username: string;\n    password: string;\n    permissions: string[];\n    roles?: string[];\n  }>;\n  jwtSecret?: string;\n  sessionTimeout?: number;\n}\n\nexport interface MCPLoadBalancerConfig {\n  enabled: boolean;\n  strategy: 'round-robin' | 'least-connections' | 'weighted';\n  maxRequestsPerSecond: number;\n  healthCheckInterval: number;\n  circuitBreakerThreshold: number;\n}\n\nexport interface MCPMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  activeSessions: number;\n  toolInvocations: Record<string, number>;\n  errors: Record<string, number>;\n  lastReset: Date;\n}\n\n// Interface declarations for dependency injection\nexport interface ILogger {\n  debug(message: string, meta?: unknown): void;\n  info(message: string, meta?: unknown): void;\n  warn(message: string, meta?: unknown): void;\n  error(message: string, error?: unknown): void;\n  configure(config: LoggingConfig): Promise<void>;\n}\n\nexport interface IEventBus {\n  emit(event: string, data?: unknown): void;\n  on(event: string, handler: (data: unknown) => void): void;\n  off(event: string, handler: (data: unknown) => void): void;\n  once(event: string, handler: (data: unknown) => void): void;\n}\n\n// Terminal types\nexport interface Terminal {\n  id: string;\n  pid?: number;\n  type: 'vscode' | 'native';\n  status: 'active' | 'idle' | 'dead';\n}\n\nexport interface TerminalCommand {\n  command: string;\n  args?: string[];\n  env?: Record<string, string>;\n  cwd?: string;\n  timeout?: number;\n}\n\nexport interface MCPContext {\n  sessionId: string;\n  agentId?: string;\n  logger: ILogger;\n}\n\n// Additional configuration interfaces\nexport interface CredentialsConfig {\n  apiKey?: string;\n  token?: string;\n  password?: string;\n  secret?: string;\n  [key: string]: string | undefined;\n}\n\nexport interface SecurityConfig {\n  encryptionEnabled: boolean;\n  auditLogging: boolean;\n  maskSensitiveValues: boolean;\n  allowEnvironmentOverrides: boolean;\n}\n"],"names":["SystemEvents"],"mappings":"AAsLA,OAAO,IAAA,AAAKA,sCAAAA;;;;;;;;;;;;;;;;;;;;;;;;;WAAAA;MAkCX"}