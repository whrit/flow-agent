{"version":3,"sources":["../../../src/utils/error-handler.ts"],"sourcesContent":["/**\n * Utility for proper error handling in TypeScript\n */\n\nimport {\n  getErrorMessage as getErrorMsg,\n  getErrorStack as getErrorStk,\n  isError as isErr,\n} from './type-guards.js';\n\nexport class AppError extends Error {\n  constructor(\n    message: string,\n    public code?: string,\n    public statusCode?: number,\n  ) {\n    super(message);\n    this.name = 'AppError';\n    Object.setPrototypeOf(this, AppError.prototype);\n  }\n}\n\n// Re-export from type-guards for backward compatibility\nexport const isError = isErr;\nexport const getErrorMessage = getErrorMsg;\nexport const getErrorStack = getErrorStk;\n\nexport function handleError(error: unknown, context?: string): never {\n  const message = getErrorMessage(error);\n  const stack = getErrorStack(error);\n\n  console.error(`Error${context ? ` in ${context}` : ''}: ${message}`);\n  if (stack && process.env.NODE_ENV === 'development') {\n    console.error('Stack trace:', stack);\n  }\n\n  process.exit(1);\n}\n"],"names":["getErrorMessage","getErrorMsg","getErrorStack","getErrorStk","isError","isErr","AppError","Error","message","code","statusCode","name","Object","setPrototypeOf","prototype","handleError","error","context","stack","console","process","env","NODE_ENV","exit"],"mappings":"AAIA,SACEA,mBAAmBC,WAAW,EAC9BC,iBAAiBC,WAAW,EAC5BC,WAAWC,KAAK,QACX,mBAAmB;AAE1B,OAAO,MAAMC,iBAAiBC;;;IAC5B,YACEC,OAAe,EACf,AAAOC,IAAa,EACpB,AAAOC,UAAmB,CAC1B;QACA,KAAK,CAACF,eAHCC,OAAAA,WACAC,aAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;QACZC,OAAOC,cAAc,CAAC,IAAI,EAAEP,SAASQ,SAAS;IAChD;AACF;AAGA,OAAO,MAAMV,UAAUC,MAAM;AAC7B,OAAO,MAAML,kBAAkBC,YAAY;AAC3C,OAAO,MAAMC,gBAAgBC,YAAY;AAEzC,OAAO,SAASY,YAAYC,KAAc,EAAEC,OAAgB;IAC1D,MAAMT,UAAUR,gBAAgBgB;IAChC,MAAME,QAAQhB,cAAcc;IAE5BG,QAAQH,KAAK,CAAC,CAAC,KAAK,EAAEC,UAAU,CAAC,IAAI,EAAEA,SAAS,GAAG,GAAG,EAAE,EAAET,SAAS;IACnE,IAAIU,SAASE,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QACnDH,QAAQH,KAAK,CAAC,gBAAgBE;IAChC;IAEAE,QAAQG,IAAI,CAAC;AACf"}