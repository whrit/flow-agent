{"version":3,"sources":["../../../src/utils/project-root.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\n/**\n * Find the project root directory by looking for marker files\n * Starting from the current directory and traversing up\n * @param {string} startDir - Starting directory (defaults to process.cwd())\n * @returns {string} - The project root directory path\n */\nexport function findProjectRoot(startDir = process.cwd()) {\n  let currentDir = path.resolve(startDir);\n  const root = path.parse(currentDir).root;\n  \n  // First, look for the main claude-flow project root\n  let searchDir = currentDir;\n  while (searchDir !== root) {\n    const packageJsonPath = path.join(searchDir, 'package.json');\n    if (fs.existsSync(packageJsonPath)) {\n      try {\n        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n        // Check if this is the main claude-flow package\n        if (packageJson.name === 'claude-flow' || \n            packageJson.name === '@anthropic/claude-flow') {\n          // Also verify it has the expected structure\n          if (fs.existsSync(path.join(searchDir, 'bin/claude-flow')) ||\n              fs.existsSync(path.join(searchDir, 'src/cli')) ||\n              fs.existsSync(path.join(searchDir, 'src/memory'))) {\n            return searchDir;\n          }\n        }\n      } catch (e) {\n        // Continue searching if we can't parse package.json\n      }\n    }\n    \n    // Check for .git directory (strong indicator of project root)\n    if (fs.existsSync(path.join(searchDir, '.git'))) {\n      // If we find .git and it has claude-flow structure, use it\n      if (fs.existsSync(path.join(searchDir, 'bin/claude-flow')) ||\n          fs.existsSync(path.join(searchDir, '.claude-flow')) ||\n          fs.existsSync(path.join(searchDir, 'CLAUDE.md'))) {\n        return searchDir;\n      }\n    }\n    \n    // Move up one directory\n    const parentDir = path.dirname(searchDir);\n    if (parentDir === searchDir) {\n      break;\n    }\n    searchDir = parentDir;\n  }\n  \n  // Fallback: look for any .claude-flow or .swarm directory going up\n  searchDir = currentDir;\n  while (searchDir !== root) {\n    if (fs.existsSync(path.join(searchDir, '.claude-flow')) ||\n        fs.existsSync(path.join(searchDir, '.swarm'))) {\n      // Additional check for main project markers\n      if (fs.existsSync(path.join(searchDir, 'CLAUDE.md')) ||\n          fs.existsSync(path.join(searchDir, 'bin/claude-flow'))) {\n        return searchDir;\n      }\n    }\n    \n    const parentDir = path.dirname(searchDir);\n    if (parentDir === searchDir) {\n      break;\n    }\n    searchDir = parentDir;\n  }\n  \n  // Final fallback to process.cwd()\n  return process.cwd();\n}\n\n/**\n * Get the .claude-flow directory path relative to project root\n * @param {string} startDir - Starting directory for search\n * @returns {string} - Path to .claude-flow directory\n */\nexport function getClaudeFlowDir(startDir) {\n  const root = findProjectRoot(startDir);\n  return path.join(root, '.claude-flow');\n}\n\n/**\n * Get the .swarm directory path relative to project root\n * @param {string} startDir - Starting directory for search\n * @returns {string} - Path to .swarm directory\n */\nexport function getSwarmDir(startDir) {\n  const root = findProjectRoot(startDir);\n  return path.join(root, '.swarm');\n}\n\n/**\n * Get the .hive-mind directory path relative to project root\n * @param {string} startDir - Starting directory for search\n * @returns {string} - Path to .hive-mind directory\n */\nexport function getHiveMindDir(startDir) {\n  const root = findProjectRoot(startDir);\n  return path.join(root, '.hive-mind');\n}\n\n// Cached project root to avoid repeated filesystem lookups\nlet cachedProjectRoot = null;\n\n/**\n * Get cached project root or find it\n * @returns {string} - The project root directory path\n */\nexport function getProjectRoot() {\n  if (!cachedProjectRoot) {\n    cachedProjectRoot = findProjectRoot();\n  }\n  return cachedProjectRoot;\n}\n\n/**\n * Clear the cached project root (useful for testing)\n */\nexport function clearProjectRootCache() {\n  cachedProjectRoot = null;\n}"],"names":["path","fs","findProjectRoot","startDir","process","cwd","currentDir","resolve","root","parse","searchDir","packageJsonPath","join","existsSync","packageJson","JSON","readFileSync","name","e","parentDir","dirname","getClaudeFlowDir","getSwarmDir","getHiveMindDir","cachedProjectRoot","getProjectRoot","clearProjectRootCache"],"mappings":"AAAA,OAAOA,UAAU,OAAO;AACxB,OAAOC,QAAQ,KAAK;AAQpB,OAAO,SAASC,gBAAgBC,WAAWC,QAAQC,GAAG,EAAE;IACtD,IAAIC,aAAaN,KAAKO,OAAO,CAACJ;IAC9B,MAAMK,OAAOR,KAAKS,KAAK,CAACH,YAAYE,IAAI;IAGxC,IAAIE,YAAYJ;IAChB,MAAOI,cAAcF,KAAM;QACzB,MAAMG,kBAAkBX,KAAKY,IAAI,CAACF,WAAW;QAC7C,IAAIT,GAAGY,UAAU,CAACF,kBAAkB;YAClC,IAAI;gBACF,MAAMG,cAAcC,KAAKN,KAAK,CAACR,GAAGe,YAAY,CAACL,iBAAiB;gBAEhE,IAAIG,YAAYG,IAAI,KAAK,iBACrBH,YAAYG,IAAI,KAAK,0BAA0B;oBAEjD,IAAIhB,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,uBACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,eACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,gBAAgB;wBACrD,OAAOA;oBACT;gBACF;YACF,EAAE,OAAOQ,GAAG,CAEZ;QACF;QAGA,IAAIjB,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,UAAU;YAE/C,IAAIT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,uBACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,oBACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,eAAe;gBACpD,OAAOA;YACT;QACF;QAGA,MAAMS,YAAYnB,KAAKoB,OAAO,CAACV;QAC/B,IAAIS,cAAcT,WAAW;YAC3B;QACF;QACAA,YAAYS;IACd;IAGAT,YAAYJ;IACZ,MAAOI,cAAcF,KAAM;QACzB,IAAIP,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,oBACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,YAAY;YAEjD,IAAIT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,iBACnCT,GAAGY,UAAU,CAACb,KAAKY,IAAI,CAACF,WAAW,qBAAqB;gBAC1D,OAAOA;YACT;QACF;QAEA,MAAMS,YAAYnB,KAAKoB,OAAO,CAACV;QAC/B,IAAIS,cAAcT,WAAW;YAC3B;QACF;QACAA,YAAYS;IACd;IAGA,OAAOf,QAAQC,GAAG;AACpB;AAOA,OAAO,SAASgB,iBAAiBlB,QAAQ;IACvC,MAAMK,OAAON,gBAAgBC;IAC7B,OAAOH,KAAKY,IAAI,CAACJ,MAAM;AACzB;AAOA,OAAO,SAASc,YAAYnB,QAAQ;IAClC,MAAMK,OAAON,gBAAgBC;IAC7B,OAAOH,KAAKY,IAAI,CAACJ,MAAM;AACzB;AAOA,OAAO,SAASe,eAAepB,QAAQ;IACrC,MAAMK,OAAON,gBAAgBC;IAC7B,OAAOH,KAAKY,IAAI,CAACJ,MAAM;AACzB;AAGA,IAAIgB,oBAAoB;AAMxB,OAAO,SAASC;IACd,IAAI,CAACD,mBAAmB;QACtBA,oBAAoBtB;IACtB;IACA,OAAOsB;AACT;AAKA,OAAO,SAASE;IACdF,oBAAoB;AACtB"}