{"version":3,"sources":["../../../../src/utils/__tests__/github-cli-safety-wrapper.test.js"],"sourcesContent":["/**\n * Test suite for GitHub CLI Safety Wrapper\n * \n * Tests all security features, error handling, and functionality\n */\n\nimport { jest } from '@jest/globals';\nimport { \n  GitHubCliSafe, \n  createGitHubCliSafe, \n  githubCli,\n  GitHubCliError,\n  GitHubCliTimeoutError,\n  GitHubCliValidationError,\n  GitHubCliRateLimitError\n} from '../github-cli-safety-wrapper.js';\nimport { spawn } from 'child_process';\nimport { promises as fs } from 'fs';\n\n// Mock child_process and fs\njest.mock('child_process');\njest.mock('fs', () => ({\n  promises: {\n    writeFile: jest.fn(),\n    unlink: jest.fn(),\n  }\n}));\n\ndescribe('GitHubCliSafe', () => {\n  let ghSafe;\n  let mockSpawn;\n  let mockChild;\n\n  beforeEach(() => {\n    ghSafe = new GitHubCliSafe({\n      timeout: 5000,\n      enableRateLimit: false,\n      enableLogging: false\n    });\n\n    mockChild = {\n      kill: jest.fn(),\n      on: jest.fn(),\n      stdout: { on: jest.fn() },\n      stderr: { on: jest.fn() }\n    };\n\n    mockSpawn = spawn.mockReturnValue(mockChild);\n    fs.writeFile.mockResolvedValue();\n    fs.unlink.mockResolvedValue();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Input Validation', () => {\n    test('should validate allowed commands', () => {\n      expect(() => ghSafe.validateCommand('issue create')).not.toThrow();\n      expect(() => ghSafe.validateCommand('pr comment')).not.toThrow();\n      \n      expect(() => ghSafe.validateCommand('rm -rf /')).toThrow(GitHubCliValidationError);\n      expect(() => ghSafe.validateCommand('maliciouscommand')).toThrow(GitHubCliValidationError);\n    });\n\n    test('should reject empty or invalid commands', () => {\n      expect(() => ghSafe.validateCommand('')).toThrow(GitHubCliValidationError);\n      expect(() => ghSafe.validateCommand(null)).toThrow(GitHubCliValidationError);\n      expect(() => ghSafe.validateCommand(undefined)).toThrow(GitHubCliValidationError);\n    });\n\n    test('should sanitize dangerous input patterns', () => {\n      const dangerousInputs = [\n        '$(rm -rf /)',\n        '`rm -rf /`',\n        'test && rm -rf /',\n        'test || rm -rf /',\n        'test; rm -rf /',\n        'test <(echo malicious)',\n        'test > /dev/null',\n        'test | sh',\n        'eval(\"malicious\")',\n        'exec(\"malicious\")'\n      ];\n\n      dangerousInputs.forEach(input => {\n        expect(() => ghSafe.sanitizeInput(input)).toThrow(GitHubCliValidationError);\n      });\n    });\n\n    test('should allow safe input', () => {\n      const safeInputs = [\n        'This is a normal comment',\n        'Code example: console.log(\"hello\")',\n        'File path: /src/components/Button.jsx',\n        'Numbers: 123, versions: v1.2.3',\n        'Special chars: @#$%^&*()_+-=[]{}|;:,.<>?'\n      ];\n\n      safeInputs.forEach(input => {\n        expect(() => ghSafe.sanitizeInput(input)).not.toThrow();\n      });\n    });\n\n    test('should validate body size limits', () => {\n      const largeBody = 'x'.repeat(1024 * 1024 + 1); // > 1MB\n      expect(() => ghSafe.validateBodySize(largeBody)).toThrow(GitHubCliValidationError);\n      \n      const normalBody = 'x'.repeat(1000);\n      expect(() => ghSafe.validateBodySize(normalBody)).not.toThrow();\n    });\n  });\n\n  describe('Process Management', () => {\n    test('should spawn process with correct arguments', async () => {\n      const mockProcess = setupMockProcess(0, 'success', '');\n      \n      await ghSafe.execute('issue create', {\n        title: 'Test Issue',\n        body: 'Test body'\n      });\n\n      expect(spawn).toHaveBeenCalledWith('gh', \n        expect.arrayContaining(['issue', 'create', '--title', 'Test Issue']),\n        expect.objectContaining({\n          stdio: ['ignore', 'pipe', 'pipe'],\n          shell: false\n        })\n      );\n    });\n\n    test('should handle process timeout', async () => {\n      setupMockProcess(null, '', '', true); // Never completes\n\n      await expect(\n        ghSafe.execute('issue create', { title: 'Test' })\n      ).rejects.toThrow(GitHubCliTimeoutError);\n    });\n\n    test('should handle process failure', async () => {\n      setupMockProcess(1, '', 'Command failed');\n\n      await expect(\n        ghSafe.execute('issue create', { title: 'Test' })\n      ).rejects.toThrow(GitHubCliError);\n    });\n\n    test('should cleanup processes on timeout', async () => {\n      setupMockProcess(null, '', '', true); // Never completes\n\n      try {\n        await ghSafe.execute('issue create', { title: 'Test' });\n      } catch (error) {\n        expect(mockChild.kill).toHaveBeenCalledWith('SIGTERM');\n      }\n    });\n  });\n\n  describe('Retry Logic', () => {\n    test('should retry on transient failures', async () => {\n      let attemptCount = 0;\n      const operation = jest.fn(() => {\n        attemptCount++;\n        if (attemptCount < 3) {\n          throw new GitHubCliError('Transient error');\n        }\n        return { success: true };\n      });\n\n      const result = await ghSafe.withRetry(operation, 3);\n      expect(result.success).toBe(true);\n      expect(operation).toHaveBeenCalledTimes(3);\n    });\n\n    test('should not retry validation errors', async () => {\n      const operation = jest.fn(() => {\n        throw new GitHubCliValidationError('Invalid input');\n      });\n\n      await expect(ghSafe.withRetry(operation, 3)).rejects.toThrow(GitHubCliValidationError);\n      expect(operation).toHaveBeenCalledTimes(1);\n    });\n\n    test('should not retry rate limit errors', async () => {\n      const operation = jest.fn(() => {\n        throw new GitHubCliRateLimitError('Rate limited');\n      });\n\n      await expect(ghSafe.withRetry(operation, 3)).rejects.toThrow(GitHubCliRateLimitError);\n      expect(operation).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    test('should enforce rate limits', async () => {\n      const rateLimitedGh = new GitHubCliSafe({\n        enableRateLimit: true,\n        maxRequestsPerWindow: 2,\n        rateLimitWindow: 1000\n      });\n\n      // Mock successful executions\n      setupMockProcess(0, 'success', '');\n\n      // First two requests should succeed\n      await rateLimitedGh.execute('auth status');\n      await rateLimitedGh.execute('auth status');\n\n      // Third request should be rate limited\n      await expect(\n        rateLimitedGh.execute('auth status')\n      ).rejects.toThrow(GitHubCliRateLimitError);\n    });\n  });\n\n  describe('Temp File Handling', () => {\n    test('should create secure temp files for body content', async () => {\n      setupMockProcess(0, 'success', '');\n\n      await ghSafe.execute('issue create', {\n        title: 'Test',\n        body: 'Test body'\n      });\n\n      expect(fs.writeFile).toHaveBeenCalledWith(\n        expect.stringMatching(/gh-safe-.*\\.tmp$/),\n        'Test body',\n        { mode: 0o600 }\n      );\n    });\n\n    test('should cleanup temp files even on error', async () => {\n      setupMockProcess(1, '', 'Error');\n\n      try {\n        await ghSafe.execute('issue create', {\n          title: 'Test',\n          body: 'Test body'\n        });\n      } catch (error) {\n        // Expected to fail\n      }\n\n      expect(fs.unlink).toHaveBeenCalled();\n    });\n  });\n\n  describe('High-level Operations', () => {\n    beforeEach(() => {\n      setupMockProcess(0, 'Issue created successfully', '');\n    });\n\n    test('should create issue with proper arguments', async () => {\n      await ghSafe.createIssue({\n        title: 'Bug Report',\n        body: 'Found a bug',\n        labels: ['bug', 'high-priority'],\n        assignees: ['user1', 'user2']\n      });\n\n      expect(spawn).toHaveBeenCalledWith('gh', \n        expect.arrayContaining([\n          'issue', 'create',\n          '--title', 'Bug Report',\n          '--body-file', expect.stringMatching(/gh-safe-.*\\.tmp$/),\n          '--label', 'bug,high-priority',\n          '--assignee', 'user1,user2'\n        ]),\n        expect.any(Object)\n      );\n    });\n\n    test('should create PR with proper arguments', async () => {\n      await ghSafe.createPR({\n        title: 'Feature: Add new component',\n        body: 'Adds new component',\n        base: 'develop',\n        head: 'feature/new-component',\n        draft: true\n      });\n\n      expect(spawn).toHaveBeenCalledWith('gh',\n        expect.arrayContaining([\n          'pr', 'create',\n          '--title', 'Feature: Add new component',\n          '--body-file', expect.stringMatching(/gh-safe-.*\\.tmp$/),\n          '--base', 'develop',\n          '--head', 'feature/new-component',\n          '--draft'\n        ]),\n        expect.any(Object)\n      );\n    });\n\n    test('should add issue comment', async () => {\n      await ghSafe.addIssueComment(123, 'This is a comment');\n\n      expect(spawn).toHaveBeenCalledWith('gh',\n        expect.arrayContaining([\n          'issue', 'comment', '123',\n          '--body-file', expect.stringMatching(/gh-safe-.*\\.tmp$/)\n        ]),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('Utility Methods', () => {\n    test('should check GitHub CLI availability', async () => {\n      // Mock execSync for version check\n      const { execSync } = require('child_process');\n      jest.spyOn(require('child_process'), 'execSync').mockImplementation(() => 'gh version 2.0.0');\n\n      const isAvailable = await ghSafe.checkGitHubCli();\n      expect(isAvailable).toBe(true);\n    });\n\n    test('should get stats', () => {\n      const stats = ghSafe.getStats();\n      expect(stats).toHaveProperty('totalRequests');\n      expect(stats).toHaveProperty('successfulRequests');\n      expect(stats).toHaveProperty('failedRequests');\n    });\n\n    test('should cleanup active processes', async () => {\n      ghSafe.activeProcesses.set('test-process', mockChild);\n      \n      await ghSafe.cleanup();\n      \n      expect(mockChild.kill).toHaveBeenCalledWith('SIGTERM');\n      expect(ghSafe.activeProcesses.size).toBe(0);\n    });\n  });\n\n  describe('Factory Function', () => {\n    test('should create configured instance', () => {\n      const instance = createGitHubCliSafe({\n        timeout: 10000,\n        maxRetries: 5\n      });\n\n      expect(instance).toBeInstanceOf(GitHubCliSafe);\n      expect(instance.options.timeout).toBe(10000);\n      expect(instance.options.maxRetries).toBe(5);\n    });\n  });\n\n  describe('Singleton Instance', () => {\n    test('should provide default singleton', () => {\n      expect(githubCli).toBeInstanceOf(GitHubCliSafe);\n    });\n  });\n\n  // Helper function to setup mock process behavior\n  function setupMockProcess(exitCode, stdout = '', stderr = '', neverComplete = false) {\n    let closeCallback, errorCallback;\n    let stdoutCallback, stderrCallback;\n\n    mockChild.on.mockImplementation((event, callback) => {\n      if (event === 'close') closeCallback = callback;\n      if (event === 'error') errorCallback = callback;\n    });\n\n    mockChild.stdout.on.mockImplementation((event, callback) => {\n      if (event === 'data') stdoutCallback = callback;\n    });\n\n    mockChild.stderr.on.mockImplementation((event, callback) => {\n      if (event === 'data') stderrCallback = callback;\n    });\n\n    // Simulate process execution\n    if (!neverComplete) {\n      setTimeout(() => {\n        if (stdoutCallback && stdout) stdoutCallback(Buffer.from(stdout));\n        if (stderrCallback && stderr) stderrCallback(Buffer.from(stderr));\n        if (closeCallback) closeCallback(exitCode);\n      }, 10);\n    }\n  }\n});\n\ndescribe('Error Classes', () => {\n  test('GitHubCliError should contain proper details', () => {\n    const error = new GitHubCliError('Test error', 'TEST_CODE', { test: true });\n    \n    expect(error.name).toBe('GitHubCliError');\n    expect(error.code).toBe('TEST_CODE');\n    expect(error.details).toEqual({ test: true });\n    expect(error.timestamp).toBeDefined();\n  });\n\n  test('GitHubCliTimeoutError should extend GitHubCliError', () => {\n    const error = new GitHubCliTimeoutError(5000, 'gh issue create');\n    \n    expect(error).toBeInstanceOf(GitHubCliError);\n    expect(error.name).toBe('GitHubCliTimeoutError');\n    expect(error.code).toBe('TIMEOUT');\n  });\n\n  test('GitHubCliValidationError should contain field info', () => {\n    const error = new GitHubCliValidationError('Invalid field', 'testField', 'testValue');\n    \n    expect(error.name).toBe('GitHubCliValidationError');\n    expect(error.details.field).toBe('testField');\n    expect(error.details.value).toBe('testValue');\n  });\n});"],"names":["jest","GitHubCliSafe","createGitHubCliSafe","githubCli","GitHubCliError","GitHubCliTimeoutError","GitHubCliValidationError","GitHubCliRateLimitError","spawn","promises","fs","mock","writeFile","fn","unlink","describe","ghSafe","mockSpawn","mockChild","beforeEach","timeout","enableRateLimit","enableLogging","kill","on","stdout","stderr","mockReturnValue","mockResolvedValue","afterEach","clearAllMocks","test","expect","validateCommand","not","toThrow","undefined","dangerousInputs","forEach","input","sanitizeInput","safeInputs","largeBody","repeat","validateBodySize","normalBody","mockProcess","setupMockProcess","execute","title","body","toHaveBeenCalledWith","arrayContaining","objectContaining","stdio","shell","rejects","error","attemptCount","operation","success","result","withRetry","toBe","toHaveBeenCalledTimes","rateLimitedGh","maxRequestsPerWindow","rateLimitWindow","stringMatching","mode","toHaveBeenCalled","createIssue","labels","assignees","any","Object","createPR","base","head","draft","addIssueComment","execSync","require","spyOn","mockImplementation","isAvailable","checkGitHubCli","stats","getStats","toHaveProperty","activeProcesses","set","cleanup","size","instance","maxRetries","toBeInstanceOf","options","exitCode","neverComplete","closeCallback","errorCallback","stdoutCallback","stderrCallback","event","callback","setTimeout","Buffer","from","name","code","details","toEqual","timestamp","toBeDefined","field","value"],"mappings":"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"}