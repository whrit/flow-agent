{"version":3,"sources":["../../../src/utils/type-guards.ts"],"sourcesContent":["/**\n * Type guard utility functions for safe type checking\n */\n\n/**\n * Check if a value is an object (non-null and typeof object)\n */\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null;\n}\n\n/**\n * Check if a value is an Error instance or has error-like properties\n */\nexport function isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n\n/**\n * Check if a value has a message property (error-like)\n */\nexport function hasMessage(value: unknown): value is { message: string } {\n  return isObject(value) && 'message' in value && typeof value.message === 'string';\n}\n\n/**\n * Check if a value has a stack property (error-like)\n */\nexport function hasStack(value: unknown): value is { stack: string } {\n  return isObject(value) && 'stack' in value && typeof value.stack === 'string';\n}\n\n/**\n * Check if a value is an error-like object\n */\nexport function isErrorLike(value: unknown): value is { message: string; stack?: string } {\n  return hasMessage(value);\n}\n\n/**\n * Check if a value has a code property\n */\nexport function hasCode(value: unknown): value is { code: string | number } {\n  return (\n    isObject(value) &&\n    'code' in value &&\n    (typeof value.code === 'string' || typeof value.code === 'number')\n  );\n}\n\n/**\n * Check if a value has an agentId property\n */\nexport function hasAgentId(value: unknown): value is { agentId: { id: string } } {\n  return (\n    isObject(value) &&\n    'agentId' in value &&\n    isObject(value.agentId) &&\n    'id' in value.agentId &&\n    typeof value.agentId.id === 'string'\n  );\n}\n\n/**\n * Check if a value has a pid property (process-like)\n */\nexport function hasPid(value: unknown): value is { pid: number } {\n  return isObject(value) && 'pid' in value && typeof value.pid === 'number';\n}\n\n/**\n * Safely get error message from unknown value\n */\nexport function getErrorMessage(error: unknown): string {\n  if (typeof error === 'string') {\n    return error;\n  }\n  if (isError(error)) {\n    return error.message;\n  }\n  if (hasMessage(error)) {\n    return error.message;\n  }\n  return String(error);\n}\n\n/**\n * Safely get error stack from unknown value\n */\nexport function getErrorStack(error: unknown): string | undefined {\n  if (isError(error)) {\n    return error.stack;\n  }\n  if (hasStack(error)) {\n    return error.stack;\n  }\n  return undefined;\n}\n\n/**\n * Type guard for checking if value is a string\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\n/**\n * Type guard for checking if value is a number\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Type guard for checking if value is a boolean\n */\nexport function isBoolean(value: unknown): value is boolean {\n  return typeof value === 'boolean';\n}\n\n/**\n * Type guard for checking if value is an array\n */\nexport function isArray<T = unknown>(value: unknown): value is T[] {\n  return Array.isArray(value);\n}\n\n/**\n * Type guard for checking if value is a function\n */\nexport function isFunction(value: unknown): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n\n/**\n * Type guard for checking if value is null or undefined\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/**\n * Type guard for checking if value is defined (not null or undefined)\n */\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value !== null && value !== undefined;\n}\n\n/**\n * Type guard for agent load update event data\n */\nexport function hasAgentLoad(value: unknown): value is { agentId: { id: string }; load: number } {\n  return (\n    isObject(value) &&\n    'agentId' in value &&\n    isObject(value.agentId) &&\n    'id' in value.agentId &&\n    typeof value.agentId.id === 'string' &&\n    'load' in value &&\n    typeof value.load === 'number'\n  );\n}\n\n/**\n * Type guard for task event data\n */\nexport function hasAgentTask(value: unknown): value is { agentId: { id: string }; task: unknown } {\n  return (\n    isObject(value) &&\n    'agentId' in value &&\n    isObject(value.agentId) &&\n    'id' in value.agentId &&\n    typeof value.agentId.id === 'string' &&\n    'task' in value\n  );\n}\n\n/**\n * Type guard for work stealing event data\n */\nexport function hasWorkStealingData(value: unknown): value is {\n  sourceAgent: { id: string };\n  targetAgent: { id: string };\n  taskCount: number;\n} {\n  return (\n    isObject(value) &&\n    'sourceAgent' in value &&\n    isObject(value.sourceAgent) &&\n    'id' in value.sourceAgent &&\n    typeof value.sourceAgent.id === 'string' &&\n    'targetAgent' in value &&\n    isObject(value.targetAgent) &&\n    'id' in value.targetAgent &&\n    typeof value.targetAgent.id === 'string' &&\n    'taskCount' in value &&\n    typeof value.taskCount === 'number'\n  );\n}\n"],"names":["isObject","value","isError","Error","hasMessage","message","hasStack","stack","isErrorLike","hasCode","code","hasAgentId","agentId","id","hasPid","pid","getErrorMessage","error","String","getErrorStack","undefined","isString","isNumber","isNaN","isBoolean","isArray","Array","isFunction","isNullOrUndefined","isDefined","hasAgentLoad","load","hasAgentTask","hasWorkStealingData","sourceAgent","targetAgent","taskCount"],"mappings":"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"}