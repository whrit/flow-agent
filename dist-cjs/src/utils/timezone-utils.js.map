{"version":3,"sources":["../../../src/utils/timezone-utils.js"],"sourcesContent":["/**\n * Timezone utilities for Claude Flow\n * Provides consistent timezone handling across the application\n */\n\n/**\n * Get current timestamp in user's local timezone\n * @returns {string} Formatted timestamp in local timezone\n */\nexport function getLocalTimestamp() {\n  const now = new Date();\n  return now.toLocaleString(undefined, {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZoneName: 'short',\n  });\n}\n\n/**\n * Get current timestamp in ISO format but with timezone offset\n * @returns {string} ISO timestamp with timezone\n */\nexport function getLocalISOTimestamp() {\n  const now = new Date();\n  const timezoneOffset = -now.getTimezoneOffset();\n  const offsetHours = Math.floor(Math.abs(timezoneOffset) / 60);\n  const offsetMinutes = Math.abs(timezoneOffset) % 60;\n  const offsetSign = timezoneOffset >= 0 ? '+' : '-';\n\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  const seconds = String(now.getSeconds()).padStart(2, '0');\n\n  const offsetHoursStr = String(offsetHours).padStart(2, '0');\n  const offsetMinutesStr = String(offsetMinutes).padStart(2, '0');\n\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}${offsetSign}${offsetHoursStr}:${offsetMinutesStr}`;\n}\n\n/**\n * Convert UTC timestamp to local time display\n * @param {string|Date} timestamp - UTC timestamp\n * @returns {string} Formatted local timestamp\n */\nexport function convertToLocalTime(timestamp) {\n  const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n\n  if (isNaN(date.getTime())) {\n    return 'Invalid Date';\n  }\n\n  return date.toLocaleString(undefined, {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZoneName: 'short',\n  });\n}\n\n/**\n * Get relative time description (e.g., \"2 hours ago\")\n * @param {string|Date} timestamp - Timestamp to compare\n * @returns {string} Relative time description\n */\nexport function getRelativeTime(timestamp) {\n  const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n\n  if (isNaN(date.getTime())) {\n    return 'Invalid Date';\n  }\n\n  const diffSeconds = Math.floor(diffMs / 1000);\n  const diffMinutes = Math.floor(diffSeconds / 60);\n  const diffHours = Math.floor(diffMinutes / 60);\n  const diffDays = Math.floor(diffHours / 24);\n\n  if (diffSeconds < 60) {\n    return 'just now';\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n  } else if (diffHours < 24) {\n    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n  } else if (diffDays < 7) {\n    return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\n/**\n * Format timestamp for display with both absolute and relative time\n * @param {string|Date} timestamp - Timestamp to format\n * @returns {object} Object with formatted times\n */\nexport function formatTimestampForDisplay(timestamp) {\n  const localTime = convertToLocalTime(timestamp);\n  const relativeTime = getRelativeTime(timestamp);\n\n  return {\n    absolute: localTime,\n    relative: relativeTime,\n    display: `${localTime} (${relativeTime})`,\n  };\n}\n\n/**\n * Get user's timezone information\n * @returns {object} Timezone information\n */\nexport function getTimezoneInfo() {\n  const date = new Date();\n  const formatter = new Intl.DateTimeFormat(undefined, { timeZoneName: 'long' });\n  const parts = formatter.formatToParts(date);\n  const timeZoneName = parts.find((part) => part.type === 'timeZoneName')?.value;\n\n  return {\n    name: timeZoneName || 'Unknown',\n    abbreviation: date.toLocaleString(undefined, { timeZoneName: 'short' }).split(' ').pop(),\n    offset: -date.getTimezoneOffset() / 60,\n    offsetString: date.toTimeString().split(' ')[1],\n  };\n}\n"],"names":["getLocalTimestamp","now","Date","toLocaleString","undefined","year","month","day","hour","minute","second","timeZoneName","getLocalISOTimestamp","timezoneOffset","getTimezoneOffset","offsetHours","Math","floor","abs","offsetMinutes","offsetSign","getFullYear","String","getMonth","padStart","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","offsetHoursStr","offsetMinutesStr","convertToLocalTime","timestamp","date","isNaN","getTime","getRelativeTime","diffMs","diffSeconds","diffMinutes","diffHours","diffDays","toLocaleDateString","formatTimestampForDisplay","localTime","relativeTime","absolute","relative","display","getTimezoneInfo","formatter","Intl","DateTimeFormat","parts","formatToParts","find","part","type","value","name","abbreviation","split","pop","offset","offsetString","toTimeString"],"mappings":"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"}