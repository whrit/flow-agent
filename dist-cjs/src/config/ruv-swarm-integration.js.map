{"version":3,"sources":["../../../src/config/ruv-swarm-integration.ts"],"sourcesContent":["/**\n * ruv-swarm integration helper for Claude Code configuration\n *\n * This module bridges the main claude-flow configuration with\n * ruv-swarm specific settings and provides utility functions\n * for seamless integration.\n */\n\nimport { configManager, ConfigManager } from './config-manager.js';\nimport { getRuvSwarmConfigManager, RuvSwarmConfigManager } from './ruv-swarm-config.js';\n// import { createLogger } from '../core/logger.js';\n\n// Create logger for integration\n// const logger = createLogger('ruv-swarm-integration');\n\n/**\n * Integration manager that synchronizes configurations\n */\nexport class RuvSwarmIntegration {\n  private configManager: ConfigManager;\n  private ruvSwarmManager: RuvSwarmConfigManager;\n\n  constructor(configManager: ConfigManager, ruvSwarmManager: RuvSwarmConfigManager) {\n    this.configManager = configManager;\n    this.ruvSwarmManager = ruvSwarmManager;\n  }\n\n  /**\n   * Synchronize main config with ruv-swarm config\n   */\n  syncConfiguration(): void {\n    const mainConfig = this.configManager.getRuvSwarmConfig();\n    const ruvSwarmConfig = this.ruvSwarmManager.getConfig();\n\n    // Update ruv-swarm config from main config\n    if (mainConfig.enabled) {\n      this.ruvSwarmManager.updateSwarmConfig({\n        defaultTopology: mainConfig.defaultTopology,\n        maxAgents: mainConfig.maxAgents,\n        defaultStrategy: mainConfig.defaultStrategy,\n        enableHooks: mainConfig.enableHooks,\n      });\n\n      this.ruvSwarmManager.updateIntegrationConfig({\n        enableMCPTools: true,\n        enableCLICommands: true,\n        enableHooks: mainConfig.enableHooks,\n      });\n\n      this.ruvSwarmManager.updateMemoryConfig({\n        enablePersistence: mainConfig.enablePersistence,\n      });\n\n      this.ruvSwarmManager.updateNeuralConfig({\n        enableTraining: mainConfig.enableNeuralTraining,\n      });\n    }\n\n    // logger.debug('Configuration synchronized between main and ruv-swarm configs');\n  }\n\n  /**\n   * Get unified command arguments for ruv-swarm CLI\n   */\n  getUnifiedCommandArgs(): string[] {\n    const mainArgs = this.configManager.getRuvSwarmArgs();\n    const ruvSwarmArgs = this.ruvSwarmManager.getCommandArgs();\n\n    // Main config takes precedence, then ruv-swarm specific\n    const unified = [...mainArgs];\n\n    // Add ruv-swarm specific args that aren't in main config\n    for (let i = 0; i < ruvSwarmArgs.length; i += 2) {\n      const flag = ruvSwarmArgs[i];\n      const value = ruvSwarmArgs[i + 1];\n\n      // Skip if already set by main config\n      if (!unified.includes(flag)) {\n        unified.push(flag, value);\n      }\n    }\n\n    return unified;\n  }\n\n  /**\n   * Initialize ruv-swarm integration\n   */\n  async initialize(): Promise<{ success: boolean; message: string }> {\n    try {\n      // Check if ruv-swarm is enabled in main config\n      if (!this.configManager.isRuvSwarmEnabled()) {\n        return {\n          success: false,\n          message: 'ruv-swarm is disabled in main configuration',\n        };\n      }\n\n      // Sync configurations\n      this.syncConfiguration();\n\n      // Validate configurations\n      const mainValidation = this.validateMainConfig();\n      if (!mainValidation.valid) {\n        return {\n          success: false,\n          message: `Main config validation failed: ${mainValidation.errors.join(', ')}`,\n        };\n      }\n\n      const ruvSwarmValidation = this.ruvSwarmManager.validateConfig();\n      if (!ruvSwarmValidation.valid) {\n        return {\n          success: false,\n          message: `ruv-swarm config validation failed: ${ruvSwarmValidation.errors.join(', ')}`,\n        };\n      }\n\n      // logger.info('ruv-swarm integration initialized successfully');\n\n      return {\n        success: true,\n        message: 'ruv-swarm integration initialized and configured',\n      };\n    } catch (error) {\n      const message = `Failed to initialize ruv-swarm integration: ${(error as Error).message}`;\n      // logger.error(message, { error });\n\n      return {\n        success: false,\n        message,\n      };\n    }\n  }\n\n  /**\n   * Validate main configuration for ruv-swarm compatibility\n   */\n  private validateMainConfig(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    const ruvSwarmConfig = this.configManager.getRuvSwarmConfig();\n\n    // Check required fields\n    if (!ruvSwarmConfig.defaultTopology) {\n      errors.push('ruvSwarm.defaultTopology is required');\n    }\n\n    if (ruvSwarmConfig.maxAgents <= 0) {\n      errors.push('ruvSwarm.maxAgents must be greater than 0');\n    }\n\n    if (!ruvSwarmConfig.defaultStrategy) {\n      errors.push('ruvSwarm.defaultStrategy is required');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Get current integration status\n   */\n  getStatus(): {\n    enabled: boolean;\n    mainConfig: any;\n    ruvSwarmConfig: any;\n    synchronized: boolean;\n  } {\n    const mainConfig = this.configManager.getRuvSwarmConfig();\n    const ruvSwarmConfig = this.ruvSwarmManager.getConfig();\n\n    return {\n      enabled: mainConfig.enabled,\n      mainConfig,\n      ruvSwarmConfig,\n      synchronized: this.isConfigurationSynchronized(),\n    };\n  }\n\n  /**\n   * Check if configurations are synchronized\n   */\n  private isConfigurationSynchronized(): boolean {\n    const mainConfig = this.configManager.getRuvSwarmConfig();\n    const ruvSwarmConfig = this.ruvSwarmManager.getConfig();\n\n    return (\n      ruvSwarmConfig.swarm.defaultTopology === mainConfig.defaultTopology &&\n      ruvSwarmConfig.swarm.maxAgents === mainConfig.maxAgents &&\n      ruvSwarmConfig.swarm.defaultStrategy === mainConfig.defaultStrategy &&\n      ruvSwarmConfig.swarm.enableHooks === mainConfig.enableHooks &&\n      ruvSwarmConfig.memory.enablePersistence === mainConfig.enablePersistence &&\n      ruvSwarmConfig.neural.enableTraining === mainConfig.enableNeuralTraining\n    );\n  }\n\n  /**\n   * Update configuration and sync\n   */\n  updateConfiguration(updates: {\n    main?: Partial<Parameters<ConfigManager['setRuvSwarmConfig']>[0]>;\n    ruvSwarm?: Partial<Parameters<RuvSwarmConfigManager['updateConfig']>[0]>;\n  }): void {\n    if (updates.main) {\n      this.configManager.setRuvSwarmConfig(updates.main);\n    }\n\n    if (updates.ruvSwarm) {\n      this.ruvSwarmManager.updateConfig(updates.ruvSwarm);\n    }\n\n    // Re-sync after updates\n    this.syncConfiguration();\n  }\n}\n\n/**\n * Create singleton integration instance\n */\nlet integrationInstance: RuvSwarmIntegration | null = null;\n\nexport function getRuvSwarmIntegration(): RuvSwarmIntegration {\n  if (!integrationInstance) {\n    const ruvSwarmManager = getRuvSwarmConfigManager(logger);\n    integrationInstance = new RuvSwarmIntegration(configManager, ruvSwarmManager);\n  }\n  return integrationInstance;\n}\n\n/**\n * Initialize ruv-swarm integration with claude-flow\n */\nexport async function initializeRuvSwarmIntegration(): Promise<{\n  success: boolean;\n  message: string;\n}> {\n  const integration = getRuvSwarmIntegration();\n  return integration.initialize();\n}\n\n/**\n * Helper functions for CLI commands\n */\nexport class RuvSwarmConfigHelpers {\n  /**\n   * Quick setup for development environment\n   */\n  static setupDevelopmentConfig(): void {\n    const integration = getRuvSwarmIntegration();\n\n    integration.updateConfiguration({\n      main: {\n        enabled: true,\n        defaultTopology: 'hierarchical',\n        maxAgents: 8,\n        defaultStrategy: 'specialized',\n        autoInit: true,\n        enableHooks: true,\n        enablePersistence: true,\n        enableNeuralTraining: true,\n      },\n    });\n\n    // logger.info('Development configuration applied');\n  }\n\n  /**\n   * Quick setup for research environment\n   */\n  static setupResearchConfig(): void {\n    const integration = getRuvSwarmIntegration();\n\n    integration.updateConfiguration({\n      main: {\n        enabled: true,\n        defaultTopology: 'mesh',\n        maxAgents: 12,\n        defaultStrategy: 'adaptive',\n        autoInit: true,\n        enableHooks: true,\n        enablePersistence: true,\n        enableNeuralTraining: true,\n      },\n    });\n\n    // logger.info('Research configuration applied');\n  }\n\n  /**\n   * Quick setup for production environment\n   */\n  static setupProductionConfig(): void {\n    const integration = getRuvSwarmIntegration();\n\n    integration.updateConfiguration({\n      main: {\n        enabled: true,\n        defaultTopology: 'star',\n        maxAgents: 6,\n        defaultStrategy: 'balanced',\n        autoInit: false,\n        enableHooks: true,\n        enablePersistence: true,\n        enableNeuralTraining: false,\n      },\n    });\n\n    // logger.info('Production configuration applied');\n  }\n\n  /**\n   * Get configuration for specific use case\n   */\n  static getConfigForUseCase(useCase: 'development' | 'research' | 'production'): any {\n    const integration = getRuvSwarmIntegration();\n\n    switch (useCase) {\n      case 'development':\n        return {\n          topology: 'hierarchical',\n          maxAgents: 8,\n          strategy: 'specialized',\n          features: ['hooks', 'persistence', 'neural-training'],\n        };\n\n      case 'research':\n        return {\n          topology: 'mesh',\n          maxAgents: 12,\n          strategy: 'adaptive',\n          features: ['hooks', 'persistence', 'neural-training', 'advanced-metrics'],\n        };\n\n      case 'production':\n        return {\n          topology: 'star',\n          maxAgents: 6,\n          strategy: 'balanced',\n          features: ['hooks', 'persistence'],\n        };\n\n      default:\n        return integration.getStatus().mainConfig;\n    }\n  }\n}\n\nexport default {\n  RuvSwarmIntegration,\n  getRuvSwarmIntegration,\n  initializeRuvSwarmIntegration,\n  RuvSwarmConfigHelpers,\n};\n"],"names":["configManager","getRuvSwarmConfigManager","RuvSwarmIntegration","ruvSwarmManager","syncConfiguration","mainConfig","getRuvSwarmConfig","ruvSwarmConfig","getConfig","enabled","updateSwarmConfig","defaultTopology","maxAgents","defaultStrategy","enableHooks","updateIntegrationConfig","enableMCPTools","enableCLICommands","updateMemoryConfig","enablePersistence","updateNeuralConfig","enableTraining","enableNeuralTraining","getUnifiedCommandArgs","mainArgs","getRuvSwarmArgs","ruvSwarmArgs","getCommandArgs","unified","i","length","flag","value","includes","push","initialize","isRuvSwarmEnabled","success","message","mainValidation","validateMainConfig","valid","errors","join","ruvSwarmValidation","validateConfig","error","getStatus","synchronized","isConfigurationSynchronized","swarm","memory","neural","updateConfiguration","updates","main","setRuvSwarmConfig","ruvSwarm","updateConfig","integrationInstance","getRuvSwarmIntegration","logger","initializeRuvSwarmIntegration","integration","RuvSwarmConfigHelpers","setupDevelopmentConfig","autoInit","setupResearchConfig","setupProductionConfig","getConfigForUseCase","useCase","topology","strategy","features"],"mappings":"AAQA,SAASA,aAAa,QAAuB,sBAAsB;AACnE,SAASC,wBAAwB,QAA+B,wBAAwB;AASxF,OAAO,MAAMC;IACHF,cAA6B;IAC7BG,gBAAuC;IAE/C,YAAYH,aAA4B,EAAEG,eAAsC,CAAE;QAChF,IAAI,CAACH,aAAa,GAAGA;QACrB,IAAI,CAACG,eAAe,GAAGA;IACzB;IAKAC,oBAA0B;QACxB,MAAMC,aAAa,IAAI,CAACL,aAAa,CAACM,iBAAiB;QACvD,MAAMC,iBAAiB,IAAI,CAACJ,eAAe,CAACK,SAAS;QAGrD,IAAIH,WAAWI,OAAO,EAAE;YACtB,IAAI,CAACN,eAAe,CAACO,iBAAiB,CAAC;gBACrCC,iBAAiBN,WAAWM,eAAe;gBAC3CC,WAAWP,WAAWO,SAAS;gBAC/BC,iBAAiBR,WAAWQ,eAAe;gBAC3CC,aAAaT,WAAWS,WAAW;YACrC;YAEA,IAAI,CAACX,eAAe,CAACY,uBAAuB,CAAC;gBAC3CC,gBAAgB;gBAChBC,mBAAmB;gBACnBH,aAAaT,WAAWS,WAAW;YACrC;YAEA,IAAI,CAACX,eAAe,CAACe,kBAAkB,CAAC;gBACtCC,mBAAmBd,WAAWc,iBAAiB;YACjD;YAEA,IAAI,CAAChB,eAAe,CAACiB,kBAAkB,CAAC;gBACtCC,gBAAgBhB,WAAWiB,oBAAoB;YACjD;QACF;IAGF;IAKAC,wBAAkC;QAChC,MAAMC,WAAW,IAAI,CAACxB,aAAa,CAACyB,eAAe;QACnD,MAAMC,eAAe,IAAI,CAACvB,eAAe,CAACwB,cAAc;QAGxD,MAAMC,UAAU;eAAIJ;SAAS;QAG7B,IAAK,IAAIK,IAAI,GAAGA,IAAIH,aAAaI,MAAM,EAAED,KAAK,EAAG;YAC/C,MAAME,OAAOL,YAAY,CAACG,EAAE;YAC5B,MAAMG,QAAQN,YAAY,CAACG,IAAI,EAAE;YAGjC,IAAI,CAACD,QAAQK,QAAQ,CAACF,OAAO;gBAC3BH,QAAQM,IAAI,CAACH,MAAMC;YACrB;QACF;QAEA,OAAOJ;IACT;IAKA,MAAMO,aAA6D;QACjE,IAAI;YAEF,IAAI,CAAC,IAAI,CAACnC,aAAa,CAACoC,iBAAiB,IAAI;gBAC3C,OAAO;oBACLC,SAAS;oBACTC,SAAS;gBACX;YACF;YAGA,IAAI,CAAClC,iBAAiB;YAGtB,MAAMmC,iBAAiB,IAAI,CAACC,kBAAkB;YAC9C,IAAI,CAACD,eAAeE,KAAK,EAAE;gBACzB,OAAO;oBACLJ,SAAS;oBACTC,SAAS,CAAC,+BAA+B,EAAEC,eAAeG,MAAM,CAACC,IAAI,CAAC,OAAO;gBAC/E;YACF;YAEA,MAAMC,qBAAqB,IAAI,CAACzC,eAAe,CAAC0C,cAAc;YAC9D,IAAI,CAACD,mBAAmBH,KAAK,EAAE;gBAC7B,OAAO;oBACLJ,SAAS;oBACTC,SAAS,CAAC,oCAAoC,EAAEM,mBAAmBF,MAAM,CAACC,IAAI,CAAC,OAAO;gBACxF;YACF;YAIA,OAAO;gBACLN,SAAS;gBACTC,SAAS;YACX;QACF,EAAE,OAAOQ,OAAO;YACd,MAAMR,UAAU,CAAC,4CAA4C,EAAE,AAACQ,MAAgBR,OAAO,EAAE;YAGzF,OAAO;gBACLD,SAAS;gBACTC;YACF;QACF;IACF;IAKQE,qBAA2D;QACjE,MAAME,SAAmB,EAAE;QAC3B,MAAMnC,iBAAiB,IAAI,CAACP,aAAa,CAACM,iBAAiB;QAG3D,IAAI,CAACC,eAAeI,eAAe,EAAE;YACnC+B,OAAOR,IAAI,CAAC;QACd;QAEA,IAAI3B,eAAeK,SAAS,IAAI,GAAG;YACjC8B,OAAOR,IAAI,CAAC;QACd;QAEA,IAAI,CAAC3B,eAAeM,eAAe,EAAE;YACnC6B,OAAOR,IAAI,CAAC;QACd;QAEA,OAAO;YACLO,OAAOC,OAAOZ,MAAM,KAAK;YACzBY;QACF;IACF;IAKAK,YAKE;QACA,MAAM1C,aAAa,IAAI,CAACL,aAAa,CAACM,iBAAiB;QACvD,MAAMC,iBAAiB,IAAI,CAACJ,eAAe,CAACK,SAAS;QAErD,OAAO;YACLC,SAASJ,WAAWI,OAAO;YAC3BJ;YACAE;YACAyC,cAAc,IAAI,CAACC,2BAA2B;QAChD;IACF;IAKQA,8BAAuC;QAC7C,MAAM5C,aAAa,IAAI,CAACL,aAAa,CAACM,iBAAiB;QACvD,MAAMC,iBAAiB,IAAI,CAACJ,eAAe,CAACK,SAAS;QAErD,OACED,eAAe2C,KAAK,CAACvC,eAAe,KAAKN,WAAWM,eAAe,IACnEJ,eAAe2C,KAAK,CAACtC,SAAS,KAAKP,WAAWO,SAAS,IACvDL,eAAe2C,KAAK,CAACrC,eAAe,KAAKR,WAAWQ,eAAe,IACnEN,eAAe2C,KAAK,CAACpC,WAAW,KAAKT,WAAWS,WAAW,IAC3DP,eAAe4C,MAAM,CAAChC,iBAAiB,KAAKd,WAAWc,iBAAiB,IACxEZ,eAAe6C,MAAM,CAAC/B,cAAc,KAAKhB,WAAWiB,oBAAoB;IAE5E;IAKA+B,oBAAoBC,OAGnB,EAAQ;QACP,IAAIA,QAAQC,IAAI,EAAE;YAChB,IAAI,CAACvD,aAAa,CAACwD,iBAAiB,CAACF,QAAQC,IAAI;QACnD;QAEA,IAAID,QAAQG,QAAQ,EAAE;YACpB,IAAI,CAACtD,eAAe,CAACuD,YAAY,CAACJ,QAAQG,QAAQ;QACpD;QAGA,IAAI,CAACrD,iBAAiB;IACxB;AACF;AAKA,IAAIuD,sBAAkD;AAEtD,OAAO,SAASC;IACd,IAAI,CAACD,qBAAqB;QACxB,MAAMxD,kBAAkBF,yBAAyB4D;QACjDF,sBAAsB,IAAIzD,oBAAoBF,eAAeG;IAC/D;IACA,OAAOwD;AACT;AAKA,OAAO,eAAeG;IAIpB,MAAMC,cAAcH;IACpB,OAAOG,YAAY5B,UAAU;AAC/B;AAKA,OAAO,MAAM6B;IAIX,OAAOC,yBAA+B;QACpC,MAAMF,cAAcH;QAEpBG,YAAYV,mBAAmB,CAAC;YAC9BE,MAAM;gBACJ9C,SAAS;gBACTE,iBAAiB;gBACjBC,WAAW;gBACXC,iBAAiB;gBACjBqD,UAAU;gBACVpD,aAAa;gBACbK,mBAAmB;gBACnBG,sBAAsB;YACxB;QACF;IAGF;IAKA,OAAO6C,sBAA4B;QACjC,MAAMJ,cAAcH;QAEpBG,YAAYV,mBAAmB,CAAC;YAC9BE,MAAM;gBACJ9C,SAAS;gBACTE,iBAAiB;gBACjBC,WAAW;gBACXC,iBAAiB;gBACjBqD,UAAU;gBACVpD,aAAa;gBACbK,mBAAmB;gBACnBG,sBAAsB;YACxB;QACF;IAGF;IAKA,OAAO8C,wBAA8B;QACnC,MAAML,cAAcH;QAEpBG,YAAYV,mBAAmB,CAAC;YAC9BE,MAAM;gBACJ9C,SAAS;gBACTE,iBAAiB;gBACjBC,WAAW;gBACXC,iBAAiB;gBACjBqD,UAAU;gBACVpD,aAAa;gBACbK,mBAAmB;gBACnBG,sBAAsB;YACxB;QACF;IAGF;IAKA,OAAO+C,oBAAoBC,OAAkD,EAAO;QAClF,MAAMP,cAAcH;QAEpB,OAAQU;YACN,KAAK;gBACH,OAAO;oBACLC,UAAU;oBACV3D,WAAW;oBACX4D,UAAU;oBACVC,UAAU;wBAAC;wBAAS;wBAAe;qBAAkB;gBACvD;YAEF,KAAK;gBACH,OAAO;oBACLF,UAAU;oBACV3D,WAAW;oBACX4D,UAAU;oBACVC,UAAU;wBAAC;wBAAS;wBAAe;wBAAmB;qBAAmB;gBAC3E;YAEF,KAAK;gBACH,OAAO;oBACLF,UAAU;oBACV3D,WAAW;oBACX4D,UAAU;oBACVC,UAAU;wBAAC;wBAAS;qBAAc;gBACpC;YAEF;gBACE,OAAOV,YAAYhB,SAAS,GAAG1C,UAAU;QAC7C;IACF;AACF;AAEA,eAAe;IACbH;IACA0D;IACAE;IACAE;AACF,EAAE"}