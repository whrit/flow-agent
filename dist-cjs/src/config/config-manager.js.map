{"version":3,"sources":["../../../src/config/config-manager.ts"],"sourcesContent":["/**\n * Node.js-compatible Configuration management for Claude-Flow\n */\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nexport interface Config {\n  orchestrator: {\n    maxConcurrentAgents: number;\n    taskQueueSize: number;\n    healthCheckInterval: number;\n    shutdownTimeout: number;\n  };\n  terminal: {\n    type: 'auto' | 'vscode' | 'native';\n    poolSize: number;\n    recycleAfter: number;\n    healthCheckInterval: number;\n    commandTimeout: number;\n  };\n  memory: {\n    backend: 'sqlite' | 'markdown' | 'hybrid';\n    cacheSizeMB: number;\n    syncInterval: number;\n    conflictResolution: 'crdt' | 'timestamp' | 'manual';\n    retentionDays: number;\n  };\n  coordination: {\n    maxRetries: number;\n    retryDelay: number;\n    deadlockDetection: boolean;\n    resourceTimeout: number;\n    messageTimeout: number;\n  };\n  mcp: {\n    transport: 'stdio' | 'http' | 'websocket';\n    port: number;\n    tlsEnabled: boolean;\n  };\n  logging: {\n    level: 'debug' | 'info' | 'warn' | 'error';\n    format: 'json' | 'text';\n    destination: 'console' | 'file';\n  };\n  ruvSwarm: {\n    enabled: boolean;\n    defaultTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n    maxAgents: number;\n    defaultStrategy: 'balanced' | 'specialized' | 'adaptive';\n    autoInit: boolean;\n    enableHooks: boolean;\n    enablePersistence: boolean;\n    enableNeuralTraining: boolean;\n    configPath?: string;\n  };\n  claude?: {\n    apiKey?: string;\n    model?:\n      | 'claude-3-opus-20240229'\n      | 'claude-3-sonnet-20240229'\n      | 'claude-3-haiku-20240307'\n      | 'claude-2.1'\n      | 'claude-2.0'\n      | 'claude-instant-1.2';\n    temperature?: number;\n    maxTokens?: number;\n    topP?: number;\n    topK?: number;\n    systemPrompt?: string;\n    timeout?: number;\n    retryAttempts?: number;\n    retryDelay?: number;\n  };\n}\n\n/**\n * Default configuration values\n */\nconst DEFAULT_CONFIG: Config = {\n  orchestrator: {\n    maxConcurrentAgents: 10,\n    taskQueueSize: 100,\n    healthCheckInterval: 30000,\n    shutdownTimeout: 30000,\n  },\n  terminal: {\n    type: 'auto',\n    poolSize: 5,\n    recycleAfter: 10,\n    healthCheckInterval: 60000,\n    commandTimeout: 300000,\n  },\n  memory: {\n    backend: 'hybrid',\n    cacheSizeMB: 100,\n    syncInterval: 5000,\n    conflictResolution: 'crdt',\n    retentionDays: 30,\n  },\n  coordination: {\n    maxRetries: 3,\n    retryDelay: 1000,\n    deadlockDetection: true,\n    resourceTimeout: 60000,\n    messageTimeout: 30000,\n  },\n  mcp: {\n    transport: 'stdio',\n    port: 3000,\n    tlsEnabled: false,\n  },\n  logging: {\n    level: 'info',\n    format: 'json',\n    destination: 'console',\n  },\n  ruvSwarm: {\n    enabled: true,\n    defaultTopology: 'mesh',\n    maxAgents: 8,\n    defaultStrategy: 'adaptive',\n    autoInit: true,\n    enableHooks: true,\n    enablePersistence: true,\n    enableNeuralTraining: true,\n    configPath: '.claude/ruv-swarm-config.json',\n  },\n  claude: {\n    model: 'claude-3-sonnet-20240229',\n    temperature: 0.7,\n    maxTokens: 4096,\n    topP: 1,\n    timeout: 60000,\n    retryAttempts: 3,\n    retryDelay: 1000,\n  },\n};\n\n/**\n * Configuration validation error\n */\nexport class ConfigError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ConfigError';\n  }\n}\n\n/**\n * Configuration manager for Node.js\n */\nexport class ConfigManager {\n  private static instance: ConfigManager;\n  private config: Config;\n  private configPath?: string;\n  private userConfigDir: string;\n\n  private constructor() {\n    this.config = this.deepClone(DEFAULT_CONFIG);\n    this.userConfigDir = path.join(os.homedir(), '.claude-flow');\n  }\n\n  /**\n   * Gets the singleton instance\n   */\n  static getInstance(): ConfigManager {\n    if (!ConfigManager.instance) {\n      ConfigManager.instance = new ConfigManager();\n    }\n    return ConfigManager.instance;\n  }\n\n  /**\n   * Initialize configuration from file or create default\n   */\n  async init(configPath = 'claude-flow.config.json'): Promise<void> {\n    try {\n      await this.load(configPath);\n      console.log(`✅ Configuration loaded from: ${configPath}`);\n    } catch (error) {\n      // Create default config file if it doesn't exist\n      await this.createDefaultConfig(configPath);\n      console.log(`✅ Default configuration created: ${configPath}`);\n    }\n  }\n\n  /**\n   * Creates a default configuration file\n   */\n  async createDefaultConfig(configPath: string): Promise<void> {\n    const config = this.deepClone(DEFAULT_CONFIG);\n    const content = JSON.stringify(config, null, 2);\n    await fs.writeFile(configPath, content, 'utf8');\n    this.configPath = configPath;\n  }\n\n  /**\n   * Loads configuration from file\n   */\n  async load(configPath?: string): Promise<Config> {\n    if (configPath) {\n      this.configPath = configPath;\n    }\n\n    if (!this.configPath) {\n      throw new ConfigError('No configuration file path specified');\n    }\n\n    try {\n      const content = await fs.readFile(this.configPath, 'utf8');\n      const fileConfig = JSON.parse(content) as Partial<Config>;\n\n      // Merge with defaults\n      this.config = this.deepMerge(DEFAULT_CONFIG, fileConfig);\n\n      // Load environment variables\n      this.loadFromEnv();\n\n      // Validate\n      this.validate(this.config);\n\n      return this.config;\n    } catch (error) {\n      if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n        throw new ConfigError(`Configuration file not found: ${this.configPath}`);\n      }\n      throw new ConfigError(`Failed to load configuration: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Shows current configuration\n   */\n  show(): Config {\n    return this.deepClone(this.config);\n  }\n\n  /**\n   * Gets a configuration value by path\n   */\n  get(path: string): any {\n    const keys = path.split('.');\n    let current: any = this.config;\n\n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return undefined;\n      }\n    }\n\n    return current;\n  }\n\n  /**\n   * Sets a configuration value by path\n   */\n  set(path: string, value: any): void {\n    const keys = path.split('.');\n    let current: any = this.config;\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!(key in current)) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    const lastKey = keys[keys.length - 1];\n    current[lastKey] = value;\n\n    // Validate after setting\n    this.validate(this.config);\n  }\n\n  /**\n   * Saves current configuration to file\n   */\n  async save(configPath?: string): Promise<void> {\n    const savePath = configPath || this.configPath;\n    if (!savePath) {\n      throw new ConfigError('No configuration file path specified');\n    }\n\n    const content = JSON.stringify(this.config, null, 2);\n    await fs.writeFile(savePath, content, 'utf8');\n  }\n\n  /**\n   * Validates the configuration\n   */\n  validate(config: Config): void {\n    // Orchestrator validation\n    if (\n      config.orchestrator.maxConcurrentAgents < 1 ||\n      config.orchestrator.maxConcurrentAgents > 100\n    ) {\n      throw new ConfigError('orchestrator.maxConcurrentAgents must be between 1 and 100');\n    }\n    if (config.orchestrator.taskQueueSize < 1 || config.orchestrator.taskQueueSize > 10000) {\n      throw new ConfigError('orchestrator.taskQueueSize must be between 1 and 10000');\n    }\n\n    // Terminal validation\n    if (!['auto', 'vscode', 'native'].includes(config.terminal.type)) {\n      throw new ConfigError('terminal.type must be one of: auto, vscode, native');\n    }\n    if (config.terminal.poolSize < 1 || config.terminal.poolSize > 50) {\n      throw new ConfigError('terminal.poolSize must be between 1 and 50');\n    }\n\n    // Memory validation\n    if (!['sqlite', 'markdown', 'hybrid'].includes(config.memory.backend)) {\n      throw new ConfigError('memory.backend must be one of: sqlite, markdown, hybrid');\n    }\n    if (config.memory.cacheSizeMB < 1 || config.memory.cacheSizeMB > 10000) {\n      throw new ConfigError('memory.cacheSizeMB must be between 1 and 10000');\n    }\n\n    // Coordination validation\n    if (config.coordination.maxRetries < 0 || config.coordination.maxRetries > 100) {\n      throw new ConfigError('coordination.maxRetries must be between 0 and 100');\n    }\n\n    // MCP validation\n    if (!['stdio', 'http', 'websocket'].includes(config.mcp.transport)) {\n      throw new ConfigError('mcp.transport must be one of: stdio, http, websocket');\n    }\n    if (config.mcp.port < 1 || config.mcp.port > 65535) {\n      throw new ConfigError('mcp.port must be between 1 and 65535');\n    }\n\n    // Logging validation\n    if (!['debug', 'info', 'warn', 'error'].includes(config.logging.level)) {\n      throw new ConfigError('logging.level must be one of: debug, info, warn, error');\n    }\n    if (!['json', 'text'].includes(config.logging.format)) {\n      throw new ConfigError('logging.format must be one of: json, text');\n    }\n    if (!['console', 'file'].includes(config.logging.destination)) {\n      throw new ConfigError('logging.destination must be one of: console, file');\n    }\n\n    // ruv-swarm validation\n    if (!['mesh', 'hierarchical', 'ring', 'star'].includes(config.ruvSwarm.defaultTopology)) {\n      throw new ConfigError(\n        'ruvSwarm.defaultTopology must be one of: mesh, hierarchical, ring, star',\n      );\n    }\n    if (config.ruvSwarm.maxAgents < 1 || config.ruvSwarm.maxAgents > 100) {\n      throw new ConfigError('ruvSwarm.maxAgents must be between 1 and 100');\n    }\n    if (!['balanced', 'specialized', 'adaptive'].includes(config.ruvSwarm.defaultStrategy)) {\n      throw new ConfigError(\n        'ruvSwarm.defaultStrategy must be one of: balanced, specialized, adaptive',\n      );\n    }\n\n    // Claude API validation\n    if (config.claude) {\n      if (config.claude.model) {\n        const validModels = [\n          'claude-3-opus-20240229',\n          'claude-3-sonnet-20240229',\n          'claude-3-haiku-20240307',\n          'claude-2.1',\n          'claude-2.0',\n          'claude-instant-1.2',\n        ];\n        if (!validModels.includes(config.claude.model)) {\n          throw new ConfigError(`claude.model must be one of: ${validModels.join(', ')}`);\n        }\n      }\n      if (config.claude.temperature !== undefined) {\n        if (config.claude.temperature < 0 || config.claude.temperature > 1) {\n          throw new ConfigError('claude.temperature must be between 0 and 1');\n        }\n      }\n      if (config.claude.maxTokens !== undefined) {\n        if (config.claude.maxTokens < 1 || config.claude.maxTokens > 100000) {\n          throw new ConfigError('claude.maxTokens must be between 1 and 100000');\n        }\n      }\n      if (config.claude.topP !== undefined) {\n        if (config.claude.topP < 0 || config.claude.topP > 1) {\n          throw new ConfigError('claude.topP must be between 0 and 1');\n        }\n      }\n    }\n  }\n\n  /**\n   * Loads configuration from environment variables\n   */\n  private loadFromEnv(): void {\n    // Orchestrator settings\n    const maxAgents = process.env.CLAUDE_FLOW_MAX_AGENTS;\n    if (maxAgents) {\n      this.config.orchestrator.maxConcurrentAgents = parseInt(maxAgents, 10);\n    }\n\n    // Terminal settings\n    const terminalType = process.env.CLAUDE_FLOW_TERMINAL_TYPE;\n    if (terminalType === 'vscode' || terminalType === 'native' || terminalType === 'auto') {\n      this.config.terminal.type = terminalType;\n    }\n\n    // Memory settings\n    const memoryBackend = process.env.CLAUDE_FLOW_MEMORY_BACKEND;\n    if (memoryBackend === 'sqlite' || memoryBackend === 'markdown' || memoryBackend === 'hybrid') {\n      this.config.memory.backend = memoryBackend;\n    }\n\n    // MCP settings\n    const mcpTransport = process.env.CLAUDE_FLOW_MCP_TRANSPORT;\n    if (mcpTransport === 'stdio' || mcpTransport === 'http' || mcpTransport === 'websocket') {\n      this.config.mcp.transport = mcpTransport;\n    }\n\n    const mcpPort = process.env.CLAUDE_FLOW_MCP_PORT;\n    if (mcpPort) {\n      this.config.mcp.port = parseInt(mcpPort, 10);\n    }\n\n    // Logging settings\n    const logLevel = process.env.CLAUDE_FLOW_LOG_LEVEL;\n    if (\n      logLevel === 'debug' ||\n      logLevel === 'info' ||\n      logLevel === 'warn' ||\n      logLevel === 'error'\n    ) {\n      this.config.logging.level = logLevel;\n    }\n\n    // ruv-swarm settings\n    const ruvSwarmEnabled = process.env.CLAUDE_FLOW_RUV_SWARM_ENABLED;\n    if (ruvSwarmEnabled === 'true' || ruvSwarmEnabled === 'false') {\n      this.config.ruvSwarm.enabled = ruvSwarmEnabled === 'true';\n    }\n\n    const ruvSwarmTopology = process.env.CLAUDE_FLOW_RUV_SWARM_TOPOLOGY;\n    if (\n      ruvSwarmTopology === 'mesh' ||\n      ruvSwarmTopology === 'hierarchical' ||\n      ruvSwarmTopology === 'ring' ||\n      ruvSwarmTopology === 'star'\n    ) {\n      this.config.ruvSwarm.defaultTopology = ruvSwarmTopology;\n    }\n\n    const ruvSwarmMaxAgents = process.env.CLAUDE_FLOW_RUV_SWARM_MAX_AGENTS;\n    if (ruvSwarmMaxAgents) {\n      this.config.ruvSwarm.maxAgents = parseInt(ruvSwarmMaxAgents, 10);\n    }\n\n    // Claude API settings\n    if (!this.config.claude) {\n      this.config.claude = {};\n    }\n\n    const claudeApiKey = process.env.ANTHROPIC_API_KEY;\n    if (claudeApiKey) {\n      this.config.claude.apiKey = claudeApiKey;\n    }\n\n    const claudeModel = process.env.CLAUDE_MODEL;\n    if (claudeModel) {\n      this.config.claude.model = claudeModel as any;\n    }\n\n    const claudeTemperature = process.env.CLAUDE_TEMPERATURE;\n    if (claudeTemperature) {\n      this.config.claude.temperature = parseFloat(claudeTemperature);\n    }\n\n    const claudeMaxTokens = process.env.CLAUDE_MAX_TOKENS;\n    if (claudeMaxTokens) {\n      this.config.claude.maxTokens = parseInt(claudeMaxTokens, 10);\n    }\n\n    const claudeTopP = process.env.CLAUDE_TOP_P;\n    if (claudeTopP) {\n      this.config.claude.topP = parseFloat(claudeTopP);\n    }\n\n    const claudeTopK = process.env.CLAUDE_TOP_K;\n    if (claudeTopK) {\n      this.config.claude.topK = parseInt(claudeTopK, 10);\n    }\n\n    const claudeSystemPrompt = process.env.CLAUDE_SYSTEM_PROMPT;\n    if (claudeSystemPrompt) {\n      this.config.claude.systemPrompt = claudeSystemPrompt;\n    }\n  }\n\n  /**\n   * Deep clone helper\n   */\n  private deepClone<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  /**\n   * Get ruv-swarm specific configuration\n   */\n  getRuvSwarmConfig() {\n    return this.deepClone(this.config.ruvSwarm);\n  }\n\n  /**\n   * Get available configuration templates\n   */\n  getAvailableTemplates(): string[] {\n    return ['default', 'development', 'production', 'testing'];\n  }\n\n  /**\n   * Create a configuration template\n   */\n  createTemplate(name: string, config: any): void {\n    // Implementation for creating templates\n    console.log(`Creating template: ${name}`, config);\n  }\n\n  /**\n   * Get format parsers\n   */\n  getFormatParsers(): Record<string, any> {\n    return {\n      json: { extension: '.json', parse: JSON.parse, stringify: JSON.stringify },\n      yaml: {\n        extension: '.yaml',\n        parse: (content: string) => content,\n        stringify: (obj: any) => JSON.stringify(obj),\n      },\n    };\n  }\n\n  /**\n   * Validate configuration file\n   */\n  validateFile(path: string): boolean {\n    try {\n      // Basic validation - file exists and is valid JSON\n      require('fs').readFileSync(path, 'utf8');\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get path history\n   */\n  getPathHistory(): any[] {\n    return []; // Mock implementation\n  }\n\n  /**\n   * Get change history\n   */\n  getChangeHistory(): any[] {\n    return []; // Mock implementation\n  }\n\n  /**\n   * Backup configuration\n   */\n  async backup(path: string): Promise<void> {\n    const backupPath = `${path}.backup.${Date.now()}`;\n    const content = JSON.stringify(this.config, null, 2);\n    await fs.writeFile(backupPath, content, 'utf8');\n    console.log(`Configuration backed up to: ${backupPath}`);\n  }\n\n  /**\n   * Restore configuration from backup\n   */\n  async restore(path: string): Promise<void> {\n    const content = await fs.readFile(path, 'utf8');\n    this.config = JSON.parse(content);\n    console.log(`Configuration restored from: ${path}`);\n  }\n\n  /**\n   * Update ruv-swarm configuration\n   */\n  setRuvSwarmConfig(updates: Partial<Config['ruvSwarm']>): void {\n    this.config.ruvSwarm = { ...this.config.ruvSwarm, ...updates };\n    this.validate(this.config);\n  }\n\n  /**\n   * Check if ruv-swarm is enabled\n   */\n  isRuvSwarmEnabled(): boolean {\n    return this.config.ruvSwarm.enabled;\n  }\n\n  /**\n   * Generate ruv-swarm command arguments from configuration\n   */\n  getRuvSwarmArgs(): string[] {\n    const args: string[] = [];\n    const config = this.config.ruvSwarm;\n\n    if (!config.enabled) {\n      return args;\n    }\n\n    args.push('--topology', config.defaultTopology);\n    args.push('--max-agents', String(config.maxAgents));\n    args.push('--strategy', config.defaultStrategy);\n\n    if (config.enableHooks) {\n      args.push('--enable-hooks');\n    }\n\n    if (config.enablePersistence) {\n      args.push('--enable-persistence');\n    }\n\n    if (config.enableNeuralTraining) {\n      args.push('--enable-training');\n    }\n\n    if (config.configPath) {\n      args.push('--config-path', config.configPath);\n    }\n\n    return args;\n  }\n\n  /**\n   * Get Claude API configuration\n   */\n  getClaudeConfig() {\n    return this.deepClone(this.config.claude || {});\n  }\n\n  /**\n   * Update Claude API configuration\n   */\n  setClaudeConfig(updates: Partial<Config['claude']>): void {\n    if (!this.config.claude) {\n      this.config.claude = {};\n    }\n    this.config.claude = { ...this.config.claude, ...updates };\n    this.validate(this.config);\n  }\n\n  /**\n   * Check if Claude API is configured\n   */\n  isClaudeAPIConfigured(): boolean {\n    return !!(this.config.claude?.apiKey || process.env.ANTHROPIC_API_KEY);\n  }\n\n  /**\n   * Deep merge helper\n   */\n  private deepMerge(target: Config, source: Partial<Config>): Config {\n    const result = this.deepClone(target);\n\n    if (source.orchestrator) {\n      result.orchestrator = { ...result.orchestrator, ...source.orchestrator };\n    }\n    if (source.terminal) {\n      result.terminal = { ...result.terminal, ...source.terminal };\n    }\n    if (source.memory) {\n      result.memory = { ...result.memory, ...source.memory };\n    }\n    if (source.coordination) {\n      result.coordination = { ...result.coordination, ...source.coordination };\n    }\n    if (source.mcp) {\n      result.mcp = { ...result.mcp, ...source.mcp };\n    }\n    if (source.logging) {\n      result.logging = { ...result.logging, ...source.logging };\n    }\n    if (source.ruvSwarm) {\n      result.ruvSwarm = { ...result.ruvSwarm, ...source.ruvSwarm };\n    }\n    if (source.claude) {\n      result.claude = { ...result.claude, ...source.claude };\n    }\n\n    return result;\n  }\n}\n\n// Export singleton instance\nexport const configManager = ConfigManager.getInstance();\n"],"names":["promises","fs","path","os","DEFAULT_CONFIG","orchestrator","maxConcurrentAgents","taskQueueSize","healthCheckInterval","shutdownTimeout","terminal","type","poolSize","recycleAfter","commandTimeout","memory","backend","cacheSizeMB","syncInterval","conflictResolution","retentionDays","coordination","maxRetries","retryDelay","deadlockDetection","resourceTimeout","messageTimeout","mcp","transport","port","tlsEnabled","logging","level","format","destination","ruvSwarm","enabled","defaultTopology","maxAgents","defaultStrategy","autoInit","enableHooks","enablePersistence","enableNeuralTraining","configPath","claude","model","temperature","maxTokens","topP","timeout","retryAttempts","ConfigError","Error","message","name","ConfigManager","instance","config","userConfigDir","deepClone","join","homedir","getInstance","init","load","console","log","error","createDefaultConfig","content","JSON","stringify","writeFile","readFile","fileConfig","parse","deepMerge","loadFromEnv","validate","code","show","get","keys","split","current","key","undefined","set","value","i","length","lastKey","save","savePath","includes","validModels","process","env","CLAUDE_FLOW_MAX_AGENTS","parseInt","terminalType","CLAUDE_FLOW_TERMINAL_TYPE","memoryBackend","CLAUDE_FLOW_MEMORY_BACKEND","mcpTransport","CLAUDE_FLOW_MCP_TRANSPORT","mcpPort","CLAUDE_FLOW_MCP_PORT","logLevel","CLAUDE_FLOW_LOG_LEVEL","ruvSwarmEnabled","CLAUDE_FLOW_RUV_SWARM_ENABLED","ruvSwarmTopology","CLAUDE_FLOW_RUV_SWARM_TOPOLOGY","ruvSwarmMaxAgents","CLAUDE_FLOW_RUV_SWARM_MAX_AGENTS","claudeApiKey","ANTHROPIC_API_KEY","apiKey","claudeModel","CLAUDE_MODEL","claudeTemperature","CLAUDE_TEMPERATURE","parseFloat","claudeMaxTokens","CLAUDE_MAX_TOKENS","claudeTopP","CLAUDE_TOP_P","claudeTopK","CLAUDE_TOP_K","topK","claudeSystemPrompt","CLAUDE_SYSTEM_PROMPT","systemPrompt","obj","getRuvSwarmConfig","getAvailableTemplates","createTemplate","getFormatParsers","json","extension","yaml","validateFile","require","readFileSync","getPathHistory","getChangeHistory","backup","backupPath","Date","now","restore","setRuvSwarmConfig","updates","isRuvSwarmEnabled","getRuvSwarmArgs","args","push","String","getClaudeConfig","setClaudeConfig","isClaudeAPIConfigured","target","source","result","configManager"],"mappings":"AAIA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AACpC,OAAOC,UAAU,OAAO;AACxB,OAAOC,QAAQ,KAAK;AA0EpB,MAAMC,iBAAyB;IAC7BC,cAAc;QACZC,qBAAqB;QACrBC,eAAe;QACfC,qBAAqB;QACrBC,iBAAiB;IACnB;IACAC,UAAU;QACRC,MAAM;QACNC,UAAU;QACVC,cAAc;QACdL,qBAAqB;QACrBM,gBAAgB;IAClB;IACAC,QAAQ;QACNC,SAAS;QACTC,aAAa;QACbC,cAAc;QACdC,oBAAoB;QACpBC,eAAe;IACjB;IACAC,cAAc;QACZC,YAAY;QACZC,YAAY;QACZC,mBAAmB;QACnBC,iBAAiB;QACjBC,gBAAgB;IAClB;IACAC,KAAK;QACHC,WAAW;QACXC,MAAM;QACNC,YAAY;IACd;IACAC,SAAS;QACPC,OAAO;QACPC,QAAQ;QACRC,aAAa;IACf;IACAC,UAAU;QACRC,SAAS;QACTC,iBAAiB;QACjBC,WAAW;QACXC,iBAAiB;QACjBC,UAAU;QACVC,aAAa;QACbC,mBAAmB;QACnBC,sBAAsB;QACtBC,YAAY;IACd;IACAC,QAAQ;QACNC,OAAO;QACPC,aAAa;QACbC,WAAW;QACXC,MAAM;QACNC,SAAS;QACTC,eAAe;QACf5B,YAAY;IACd;AACF;AAKA,OAAO,MAAM6B,oBAAoBC;IAC/B,YAAYC,OAAe,CAAE;QAC3B,KAAK,CAACA;QACN,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAKA,OAAO,MAAMC;IACX,OAAeC,SAAwB;IAC/BC,OAAe;IACfd,WAAoB;IACpBe,cAAsB;IAE9B,aAAsB;QACpB,IAAI,CAACD,MAAM,GAAG,IAAI,CAACE,SAAS,CAACxD;QAC7B,IAAI,CAACuD,aAAa,GAAGzD,KAAK2D,IAAI,CAAC1D,GAAG2D,OAAO,IAAI;IAC/C;IAKA,OAAOC,cAA6B;QAClC,IAAI,CAACP,cAAcC,QAAQ,EAAE;YAC3BD,cAAcC,QAAQ,GAAG,IAAID;QAC/B;QACA,OAAOA,cAAcC,QAAQ;IAC/B;IAKA,MAAMO,KAAKpB,aAAa,yBAAyB,EAAiB;QAChE,IAAI;YACF,MAAM,IAAI,CAACqB,IAAI,CAACrB;YAChBsB,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEvB,YAAY;QAC1D,EAAE,OAAOwB,OAAO;YAEd,MAAM,IAAI,CAACC,mBAAmB,CAACzB;YAC/BsB,QAAQC,GAAG,CAAC,CAAC,iCAAiC,EAAEvB,YAAY;QAC9D;IACF;IAKA,MAAMyB,oBAAoBzB,UAAkB,EAAiB;QAC3D,MAAMc,SAAS,IAAI,CAACE,SAAS,CAACxD;QAC9B,MAAMkE,UAAUC,KAAKC,SAAS,CAACd,QAAQ,MAAM;QAC7C,MAAMzD,GAAGwE,SAAS,CAAC7B,YAAY0B,SAAS;QACxC,IAAI,CAAC1B,UAAU,GAAGA;IACpB;IAKA,MAAMqB,KAAKrB,UAAmB,EAAmB;QAC/C,IAAIA,YAAY;YACd,IAAI,CAACA,UAAU,GAAGA;QACpB;QAEA,IAAI,CAAC,IAAI,CAACA,UAAU,EAAE;YACpB,MAAM,IAAIQ,YAAY;QACxB;QAEA,IAAI;YACF,MAAMkB,UAAU,MAAMrE,GAAGyE,QAAQ,CAAC,IAAI,CAAC9B,UAAU,EAAE;YACnD,MAAM+B,aAAaJ,KAAKK,KAAK,CAACN;YAG9B,IAAI,CAACZ,MAAM,GAAG,IAAI,CAACmB,SAAS,CAACzE,gBAAgBuE;YAG7C,IAAI,CAACG,WAAW;YAGhB,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACrB,MAAM;YAEzB,OAAO,IAAI,CAACA,MAAM;QACpB,EAAE,OAAOU,OAAO;YACd,IAAI,AAACA,MAAgCY,IAAI,KAAK,UAAU;gBACtD,MAAM,IAAI5B,YAAY,CAAC,8BAA8B,EAAE,IAAI,CAACR,UAAU,EAAE;YAC1E;YACA,MAAM,IAAIQ,YAAY,CAAC,8BAA8B,EAAE,AAACgB,MAAgBd,OAAO,EAAE;QACnF;IACF;IAKA2B,OAAe;QACb,OAAO,IAAI,CAACrB,SAAS,CAAC,IAAI,CAACF,MAAM;IACnC;IAKAwB,IAAIhF,IAAY,EAAO;QACrB,MAAMiF,OAAOjF,KAAKkF,KAAK,CAAC;QACxB,IAAIC,UAAe,IAAI,CAAC3B,MAAM;QAE9B,KAAK,MAAM4B,OAAOH,KAAM;YACtB,IAAIE,WAAW,OAAOA,YAAY,YAAYC,OAAOD,SAAS;gBAC5DA,UAAUA,OAAO,CAACC,IAAI;YACxB,OAAO;gBACL,OAAOC;YACT;QACF;QAEA,OAAOF;IACT;IAKAG,IAAItF,IAAY,EAAEuF,KAAU,EAAQ;QAClC,MAAMN,OAAOjF,KAAKkF,KAAK,CAAC;QACxB,IAAIC,UAAe,IAAI,CAAC3B,MAAM;QAE9B,IAAK,IAAIgC,IAAI,GAAGA,IAAIP,KAAKQ,MAAM,GAAG,GAAGD,IAAK;YACxC,MAAMJ,MAAMH,IAAI,CAACO,EAAE;YACnB,IAAI,CAAEJ,CAAAA,OAAOD,OAAM,GAAI;gBACrBA,OAAO,CAACC,IAAI,GAAG,CAAC;YAClB;YACAD,UAAUA,OAAO,CAACC,IAAI;QACxB;QAEA,MAAMM,UAAUT,IAAI,CAACA,KAAKQ,MAAM,GAAG,EAAE;QACrCN,OAAO,CAACO,QAAQ,GAAGH;QAGnB,IAAI,CAACV,QAAQ,CAAC,IAAI,CAACrB,MAAM;IAC3B;IAKA,MAAMmC,KAAKjD,UAAmB,EAAiB;QAC7C,MAAMkD,WAAWlD,cAAc,IAAI,CAACA,UAAU;QAC9C,IAAI,CAACkD,UAAU;YACb,MAAM,IAAI1C,YAAY;QACxB;QAEA,MAAMkB,UAAUC,KAAKC,SAAS,CAAC,IAAI,CAACd,MAAM,EAAE,MAAM;QAClD,MAAMzD,GAAGwE,SAAS,CAACqB,UAAUxB,SAAS;IACxC;IAKAS,SAASrB,MAAc,EAAQ;QAE7B,IACEA,OAAOrD,YAAY,CAACC,mBAAmB,GAAG,KAC1CoD,OAAOrD,YAAY,CAACC,mBAAmB,GAAG,KAC1C;YACA,MAAM,IAAI8C,YAAY;QACxB;QACA,IAAIM,OAAOrD,YAAY,CAACE,aAAa,GAAG,KAAKmD,OAAOrD,YAAY,CAACE,aAAa,GAAG,OAAO;YACtF,MAAM,IAAI6C,YAAY;QACxB;QAGA,IAAI,CAAC;YAAC;YAAQ;YAAU;SAAS,CAAC2C,QAAQ,CAACrC,OAAOhD,QAAQ,CAACC,IAAI,GAAG;YAChE,MAAM,IAAIyC,YAAY;QACxB;QACA,IAAIM,OAAOhD,QAAQ,CAACE,QAAQ,GAAG,KAAK8C,OAAOhD,QAAQ,CAACE,QAAQ,GAAG,IAAI;YACjE,MAAM,IAAIwC,YAAY;QACxB;QAGA,IAAI,CAAC;YAAC;YAAU;YAAY;SAAS,CAAC2C,QAAQ,CAACrC,OAAO3C,MAAM,CAACC,OAAO,GAAG;YACrE,MAAM,IAAIoC,YAAY;QACxB;QACA,IAAIM,OAAO3C,MAAM,CAACE,WAAW,GAAG,KAAKyC,OAAO3C,MAAM,CAACE,WAAW,GAAG,OAAO;YACtE,MAAM,IAAImC,YAAY;QACxB;QAGA,IAAIM,OAAOrC,YAAY,CAACC,UAAU,GAAG,KAAKoC,OAAOrC,YAAY,CAACC,UAAU,GAAG,KAAK;YAC9E,MAAM,IAAI8B,YAAY;QACxB;QAGA,IAAI,CAAC;YAAC;YAAS;YAAQ;SAAY,CAAC2C,QAAQ,CAACrC,OAAO/B,GAAG,CAACC,SAAS,GAAG;YAClE,MAAM,IAAIwB,YAAY;QACxB;QACA,IAAIM,OAAO/B,GAAG,CAACE,IAAI,GAAG,KAAK6B,OAAO/B,GAAG,CAACE,IAAI,GAAG,OAAO;YAClD,MAAM,IAAIuB,YAAY;QACxB;QAGA,IAAI,CAAC;YAAC;YAAS;YAAQ;YAAQ;SAAQ,CAAC2C,QAAQ,CAACrC,OAAO3B,OAAO,CAACC,KAAK,GAAG;YACtE,MAAM,IAAIoB,YAAY;QACxB;QACA,IAAI,CAAC;YAAC;YAAQ;SAAO,CAAC2C,QAAQ,CAACrC,OAAO3B,OAAO,CAACE,MAAM,GAAG;YACrD,MAAM,IAAImB,YAAY;QACxB;QACA,IAAI,CAAC;YAAC;YAAW;SAAO,CAAC2C,QAAQ,CAACrC,OAAO3B,OAAO,CAACG,WAAW,GAAG;YAC7D,MAAM,IAAIkB,YAAY;QACxB;QAGA,IAAI,CAAC;YAAC;YAAQ;YAAgB;YAAQ;SAAO,CAAC2C,QAAQ,CAACrC,OAAOvB,QAAQ,CAACE,eAAe,GAAG;YACvF,MAAM,IAAIe,YACR;QAEJ;QACA,IAAIM,OAAOvB,QAAQ,CAACG,SAAS,GAAG,KAAKoB,OAAOvB,QAAQ,CAACG,SAAS,GAAG,KAAK;YACpE,MAAM,IAAIc,YAAY;QACxB;QACA,IAAI,CAAC;YAAC;YAAY;YAAe;SAAW,CAAC2C,QAAQ,CAACrC,OAAOvB,QAAQ,CAACI,eAAe,GAAG;YACtF,MAAM,IAAIa,YACR;QAEJ;QAGA,IAAIM,OAAOb,MAAM,EAAE;YACjB,IAAIa,OAAOb,MAAM,CAACC,KAAK,EAAE;gBACvB,MAAMkD,cAAc;oBAClB;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD;gBACD,IAAI,CAACA,YAAYD,QAAQ,CAACrC,OAAOb,MAAM,CAACC,KAAK,GAAG;oBAC9C,MAAM,IAAIM,YAAY,CAAC,6BAA6B,EAAE4C,YAAYnC,IAAI,CAAC,OAAO;gBAChF;YACF;YACA,IAAIH,OAAOb,MAAM,CAACE,WAAW,KAAKwC,WAAW;gBAC3C,IAAI7B,OAAOb,MAAM,CAACE,WAAW,GAAG,KAAKW,OAAOb,MAAM,CAACE,WAAW,GAAG,GAAG;oBAClE,MAAM,IAAIK,YAAY;gBACxB;YACF;YACA,IAAIM,OAAOb,MAAM,CAACG,SAAS,KAAKuC,WAAW;gBACzC,IAAI7B,OAAOb,MAAM,CAACG,SAAS,GAAG,KAAKU,OAAOb,MAAM,CAACG,SAAS,GAAG,QAAQ;oBACnE,MAAM,IAAII,YAAY;gBACxB;YACF;YACA,IAAIM,OAAOb,MAAM,CAACI,IAAI,KAAKsC,WAAW;gBACpC,IAAI7B,OAAOb,MAAM,CAACI,IAAI,GAAG,KAAKS,OAAOb,MAAM,CAACI,IAAI,GAAG,GAAG;oBACpD,MAAM,IAAIG,YAAY;gBACxB;YACF;QACF;IACF;IAKQ0B,cAAoB;QAE1B,MAAMxC,YAAY2D,QAAQC,GAAG,CAACC,sBAAsB;QACpD,IAAI7D,WAAW;YACb,IAAI,CAACoB,MAAM,CAACrD,YAAY,CAACC,mBAAmB,GAAG8F,SAAS9D,WAAW;QACrE;QAGA,MAAM+D,eAAeJ,QAAQC,GAAG,CAACI,yBAAyB;QAC1D,IAAID,iBAAiB,YAAYA,iBAAiB,YAAYA,iBAAiB,QAAQ;YACrF,IAAI,CAAC3C,MAAM,CAAChD,QAAQ,CAACC,IAAI,GAAG0F;QAC9B;QAGA,MAAME,gBAAgBN,QAAQC,GAAG,CAACM,0BAA0B;QAC5D,IAAID,kBAAkB,YAAYA,kBAAkB,cAAcA,kBAAkB,UAAU;YAC5F,IAAI,CAAC7C,MAAM,CAAC3C,MAAM,CAACC,OAAO,GAAGuF;QAC/B;QAGA,MAAME,eAAeR,QAAQC,GAAG,CAACQ,yBAAyB;QAC1D,IAAID,iBAAiB,WAAWA,iBAAiB,UAAUA,iBAAiB,aAAa;YACvF,IAAI,CAAC/C,MAAM,CAAC/B,GAAG,CAACC,SAAS,GAAG6E;QAC9B;QAEA,MAAME,UAAUV,QAAQC,GAAG,CAACU,oBAAoB;QAChD,IAAID,SAAS;YACX,IAAI,CAACjD,MAAM,CAAC/B,GAAG,CAACE,IAAI,GAAGuE,SAASO,SAAS;QAC3C;QAGA,MAAME,WAAWZ,QAAQC,GAAG,CAACY,qBAAqB;QAClD,IACED,aAAa,WACbA,aAAa,UACbA,aAAa,UACbA,aAAa,SACb;YACA,IAAI,CAACnD,MAAM,CAAC3B,OAAO,CAACC,KAAK,GAAG6E;QAC9B;QAGA,MAAME,kBAAkBd,QAAQC,GAAG,CAACc,6BAA6B;QACjE,IAAID,oBAAoB,UAAUA,oBAAoB,SAAS;YAC7D,IAAI,CAACrD,MAAM,CAACvB,QAAQ,CAACC,OAAO,GAAG2E,oBAAoB;QACrD;QAEA,MAAME,mBAAmBhB,QAAQC,GAAG,CAACgB,8BAA8B;QACnE,IACED,qBAAqB,UACrBA,qBAAqB,kBACrBA,qBAAqB,UACrBA,qBAAqB,QACrB;YACA,IAAI,CAACvD,MAAM,CAACvB,QAAQ,CAACE,eAAe,GAAG4E;QACzC;QAEA,MAAME,oBAAoBlB,QAAQC,GAAG,CAACkB,gCAAgC;QACtE,IAAID,mBAAmB;YACrB,IAAI,CAACzD,MAAM,CAACvB,QAAQ,CAACG,SAAS,GAAG8D,SAASe,mBAAmB;QAC/D;QAGA,IAAI,CAAC,IAAI,CAACzD,MAAM,CAACb,MAAM,EAAE;YACvB,IAAI,CAACa,MAAM,CAACb,MAAM,GAAG,CAAC;QACxB;QAEA,MAAMwE,eAAepB,QAAQC,GAAG,CAACoB,iBAAiB;QAClD,IAAID,cAAc;YAChB,IAAI,CAAC3D,MAAM,CAACb,MAAM,CAAC0E,MAAM,GAAGF;QAC9B;QAEA,MAAMG,cAAcvB,QAAQC,GAAG,CAACuB,YAAY;QAC5C,IAAID,aAAa;YACf,IAAI,CAAC9D,MAAM,CAACb,MAAM,CAACC,KAAK,GAAG0E;QAC7B;QAEA,MAAME,oBAAoBzB,QAAQC,GAAG,CAACyB,kBAAkB;QACxD,IAAID,mBAAmB;YACrB,IAAI,CAAChE,MAAM,CAACb,MAAM,CAACE,WAAW,GAAG6E,WAAWF;QAC9C;QAEA,MAAMG,kBAAkB5B,QAAQC,GAAG,CAAC4B,iBAAiB;QACrD,IAAID,iBAAiB;YACnB,IAAI,CAACnE,MAAM,CAACb,MAAM,CAACG,SAAS,GAAGoD,SAASyB,iBAAiB;QAC3D;QAEA,MAAME,aAAa9B,QAAQC,GAAG,CAAC8B,YAAY;QAC3C,IAAID,YAAY;YACd,IAAI,CAACrE,MAAM,CAACb,MAAM,CAACI,IAAI,GAAG2E,WAAWG;QACvC;QAEA,MAAME,aAAahC,QAAQC,GAAG,CAACgC,YAAY;QAC3C,IAAID,YAAY;YACd,IAAI,CAACvE,MAAM,CAACb,MAAM,CAACsF,IAAI,GAAG/B,SAAS6B,YAAY;QACjD;QAEA,MAAMG,qBAAqBnC,QAAQC,GAAG,CAACmC,oBAAoB;QAC3D,IAAID,oBAAoB;YACtB,IAAI,CAAC1E,MAAM,CAACb,MAAM,CAACyF,YAAY,GAAGF;QACpC;IACF;IAKQxE,UAAa2E,GAAM,EAAK;QAC9B,OAAOhE,KAAKK,KAAK,CAACL,KAAKC,SAAS,CAAC+D;IACnC;IAKAC,oBAAoB;QAClB,OAAO,IAAI,CAAC5E,SAAS,CAAC,IAAI,CAACF,MAAM,CAACvB,QAAQ;IAC5C;IAKAsG,wBAAkC;QAChC,OAAO;YAAC;YAAW;YAAe;YAAc;SAAU;IAC5D;IAKAC,eAAenF,IAAY,EAAEG,MAAW,EAAQ;QAE9CQ,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEZ,MAAM,EAAEG;IAC5C;IAKAiF,mBAAwC;QACtC,OAAO;YACLC,MAAM;gBAAEC,WAAW;gBAASjE,OAAOL,KAAKK,KAAK;gBAAEJ,WAAWD,KAAKC,SAAS;YAAC;YACzEsE,MAAM;gBACJD,WAAW;gBACXjE,OAAO,CAACN,UAAoBA;gBAC5BE,WAAW,CAAC+D,MAAahE,KAAKC,SAAS,CAAC+D;YAC1C;QACF;IACF;IAKAQ,aAAa7I,IAAY,EAAW;QAClC,IAAI;YAEF8I,QAAQ,MAAMC,YAAY,CAAC/I,MAAM;YACjC,OAAO;QACT,EAAE,OAAM;YACN,OAAO;QACT;IACF;IAKAgJ,iBAAwB;QACtB,OAAO,EAAE;IACX;IAKAC,mBAA0B;QACxB,OAAO,EAAE;IACX;IAKA,MAAMC,OAAOlJ,IAAY,EAAiB;QACxC,MAAMmJ,aAAa,GAAGnJ,KAAK,QAAQ,EAAEoJ,KAAKC,GAAG,IAAI;QACjD,MAAMjF,UAAUC,KAAKC,SAAS,CAAC,IAAI,CAACd,MAAM,EAAE,MAAM;QAClD,MAAMzD,GAAGwE,SAAS,CAAC4E,YAAY/E,SAAS;QACxCJ,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAEkF,YAAY;IACzD;IAKA,MAAMG,QAAQtJ,IAAY,EAAiB;QACzC,MAAMoE,UAAU,MAAMrE,GAAGyE,QAAQ,CAACxE,MAAM;QACxC,IAAI,CAACwD,MAAM,GAAGa,KAAKK,KAAK,CAACN;QACzBJ,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEjE,MAAM;IACpD;IAKAuJ,kBAAkBC,OAAoC,EAAQ;QAC5D,IAAI,CAAChG,MAAM,CAACvB,QAAQ,GAAG;YAAE,GAAG,IAAI,CAACuB,MAAM,CAACvB,QAAQ;YAAE,GAAGuH,OAAO;QAAC;QAC7D,IAAI,CAAC3E,QAAQ,CAAC,IAAI,CAACrB,MAAM;IAC3B;IAKAiG,oBAA6B;QAC3B,OAAO,IAAI,CAACjG,MAAM,CAACvB,QAAQ,CAACC,OAAO;IACrC;IAKAwH,kBAA4B;QAC1B,MAAMC,OAAiB,EAAE;QACzB,MAAMnG,SAAS,IAAI,CAACA,MAAM,CAACvB,QAAQ;QAEnC,IAAI,CAACuB,OAAOtB,OAAO,EAAE;YACnB,OAAOyH;QACT;QAEAA,KAAKC,IAAI,CAAC,cAAcpG,OAAOrB,eAAe;QAC9CwH,KAAKC,IAAI,CAAC,gBAAgBC,OAAOrG,OAAOpB,SAAS;QACjDuH,KAAKC,IAAI,CAAC,cAAcpG,OAAOnB,eAAe;QAE9C,IAAImB,OAAOjB,WAAW,EAAE;YACtBoH,KAAKC,IAAI,CAAC;QACZ;QAEA,IAAIpG,OAAOhB,iBAAiB,EAAE;YAC5BmH,KAAKC,IAAI,CAAC;QACZ;QAEA,IAAIpG,OAAOf,oBAAoB,EAAE;YAC/BkH,KAAKC,IAAI,CAAC;QACZ;QAEA,IAAIpG,OAAOd,UAAU,EAAE;YACrBiH,KAAKC,IAAI,CAAC,iBAAiBpG,OAAOd,UAAU;QAC9C;QAEA,OAAOiH;IACT;IAKAG,kBAAkB;QAChB,OAAO,IAAI,CAACpG,SAAS,CAAC,IAAI,CAACF,MAAM,CAACb,MAAM,IAAI,CAAC;IAC/C;IAKAoH,gBAAgBP,OAAkC,EAAQ;QACxD,IAAI,CAAC,IAAI,CAAChG,MAAM,CAACb,MAAM,EAAE;YACvB,IAAI,CAACa,MAAM,CAACb,MAAM,GAAG,CAAC;QACxB;QACA,IAAI,CAACa,MAAM,CAACb,MAAM,GAAG;YAAE,GAAG,IAAI,CAACa,MAAM,CAACb,MAAM;YAAE,GAAG6G,OAAO;QAAC;QACzD,IAAI,CAAC3E,QAAQ,CAAC,IAAI,CAACrB,MAAM;IAC3B;IAKAwG,wBAAiC;QAC/B,OAAO,CAAC,CAAE,CAAA,IAAI,CAACxG,MAAM,CAACb,MAAM,EAAE0E,UAAUtB,QAAQC,GAAG,CAACoB,iBAAiB,AAAD;IACtE;IAKQzC,UAAUsF,MAAc,EAAEC,MAAuB,EAAU;QACjE,MAAMC,SAAS,IAAI,CAACzG,SAAS,CAACuG;QAE9B,IAAIC,OAAO/J,YAAY,EAAE;YACvBgK,OAAOhK,YAAY,GAAG;gBAAE,GAAGgK,OAAOhK,YAAY;gBAAE,GAAG+J,OAAO/J,YAAY;YAAC;QACzE;QACA,IAAI+J,OAAO1J,QAAQ,EAAE;YACnB2J,OAAO3J,QAAQ,GAAG;gBAAE,GAAG2J,OAAO3J,QAAQ;gBAAE,GAAG0J,OAAO1J,QAAQ;YAAC;QAC7D;QACA,IAAI0J,OAAOrJ,MAAM,EAAE;YACjBsJ,OAAOtJ,MAAM,GAAG;gBAAE,GAAGsJ,OAAOtJ,MAAM;gBAAE,GAAGqJ,OAAOrJ,MAAM;YAAC;QACvD;QACA,IAAIqJ,OAAO/I,YAAY,EAAE;YACvBgJ,OAAOhJ,YAAY,GAAG;gBAAE,GAAGgJ,OAAOhJ,YAAY;gBAAE,GAAG+I,OAAO/I,YAAY;YAAC;QACzE;QACA,IAAI+I,OAAOzI,GAAG,EAAE;YACd0I,OAAO1I,GAAG,GAAG;gBAAE,GAAG0I,OAAO1I,GAAG;gBAAE,GAAGyI,OAAOzI,GAAG;YAAC;QAC9C;QACA,IAAIyI,OAAOrI,OAAO,EAAE;YAClBsI,OAAOtI,OAAO,GAAG;gBAAE,GAAGsI,OAAOtI,OAAO;gBAAE,GAAGqI,OAAOrI,OAAO;YAAC;QAC1D;QACA,IAAIqI,OAAOjI,QAAQ,EAAE;YACnBkI,OAAOlI,QAAQ,GAAG;gBAAE,GAAGkI,OAAOlI,QAAQ;gBAAE,GAAGiI,OAAOjI,QAAQ;YAAC;QAC7D;QACA,IAAIiI,OAAOvH,MAAM,EAAE;YACjBwH,OAAOxH,MAAM,GAAG;gBAAE,GAAGwH,OAAOxH,MAAM;gBAAE,GAAGuH,OAAOvH,MAAM;YAAC;QACvD;QAEA,OAAOwH;IACT;AACF;AAGA,OAAO,MAAMC,gBAAgB9G,cAAcO,WAAW,GAAG"}