{"version":3,"sources":["../../../src/config/ruv-swarm-config.ts"],"sourcesContent":["/**\n * ruv-swarm configuration management for Claude Code integration\n *\n * This module handles configuration settings for ruv-swarm integration,\n * including topology preferences, agent limits, and coordination patterns.\n */\n\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport type { ILogger } from '../core/logger.js';\nimport { deepMerge } from '../utils/helpers.js';\n\n/**\n * ruv-swarm integration configuration\n */\nexport interface RuvSwarmConfig {\n  // Core swarm settings\n  swarm: {\n    defaultTopology: 'mesh' | 'hierarchical' | 'ring' | 'star';\n    maxAgents: number;\n    defaultStrategy: 'balanced' | 'specialized' | 'adaptive';\n    autoInit: boolean;\n    enableHooks: boolean;\n  };\n\n  // Agent configuration\n  agents: {\n    defaultCapabilities: string[];\n    spawnTimeout: number;\n    heartbeatInterval: number;\n    maxRetries: number;\n  };\n\n  // Task orchestration\n  tasks: {\n    defaultStrategy: 'parallel' | 'sequential' | 'adaptive';\n    defaultPriority: 'low' | 'medium' | 'high' | 'critical';\n    timeout: number;\n    enableMonitoring: boolean;\n  };\n\n  // Memory and persistence\n  memory: {\n    enablePersistence: boolean;\n    compressionLevel: number;\n    ttl: number;\n    maxSize: number;\n  };\n\n  // Neural capabilities\n  neural: {\n    enableTraining: boolean;\n    patterns: string[];\n    learningRate: number;\n    trainingIterations: number;\n  };\n\n  // Performance monitoring\n  monitoring: {\n    enableMetrics: boolean;\n    metricsInterval: number;\n    enableAlerts: boolean;\n    alertThresholds: {\n      cpu: number;\n      memory: number;\n      taskFailureRate: number;\n    };\n  };\n\n  // Integration settings\n  integration: {\n    enableMCPTools: boolean;\n    enableCLICommands: boolean;\n    enableHooks: boolean;\n    workingDirectory?: string;\n    sessionTimeout: number;\n  };\n}\n\n/**\n * Default ruv-swarm configuration\n */\nexport const defaultRuvSwarmConfig: RuvSwarmConfig = {\n  swarm: {\n    defaultTopology: 'mesh',\n    maxAgents: 8,\n    defaultStrategy: 'adaptive',\n    autoInit: true,\n    enableHooks: true,\n  },\n\n  agents: {\n    defaultCapabilities: ['filesystem', 'search', 'memory', 'coordination'],\n    spawnTimeout: 30000,\n    heartbeatInterval: 5000,\n    maxRetries: 3,\n  },\n\n  tasks: {\n    defaultStrategy: 'adaptive',\n    defaultPriority: 'medium',\n    timeout: 300000, // 5 minutes\n    enableMonitoring: true,\n  },\n\n  memory: {\n    enablePersistence: true,\n    compressionLevel: 6,\n    ttl: 86400000, // 24 hours\n    maxSize: 100 * 1024 * 1024, // 100MB\n  },\n\n  neural: {\n    enableTraining: true,\n    patterns: ['convergent', 'divergent', 'lateral', 'systems'],\n    learningRate: 0.1,\n    trainingIterations: 10,\n  },\n\n  monitoring: {\n    enableMetrics: true,\n    metricsInterval: 10000,\n    enableAlerts: true,\n    alertThresholds: {\n      cpu: 80,\n      memory: 85,\n      taskFailureRate: 20,\n    },\n  },\n\n  integration: {\n    enableMCPTools: true,\n    enableCLICommands: true,\n    enableHooks: true,\n    sessionTimeout: 3600000, // 1 hour\n  },\n};\n\n/**\n * ruv-swarm configuration manager\n */\nexport class RuvSwarmConfigManager {\n  private config: RuvSwarmConfig;\n  private configPath: string;\n\n  constructor(\n    private logger: ILogger,\n    configPath?: string,\n  ) {\n    this.configPath = configPath || join(process.cwd(), '.claude', 'ruv-swarm-config.json');\n    this.config = this.loadConfig();\n  }\n\n  /**\n   * Load configuration from file or use defaults\n   */\n  private loadConfig(): RuvSwarmConfig {\n    try {\n      if (existsSync(this.configPath)) {\n        const configData = readFileSync(this.configPath, 'utf-8');\n        const userConfig = JSON.parse(configData) as Partial<RuvSwarmConfig>;\n\n        // Merge with defaults\n        const mergedConfig = deepMerge(defaultRuvSwarmConfig, userConfig);\n\n        this.logger.debug('Loaded ruv-swarm config from file', {\n          path: this.configPath,\n          config: mergedConfig,\n        });\n\n        return mergedConfig;\n      }\n    } catch (error) {\n      this.logger.warn('Failed to load ruv-swarm config, using defaults', {\n        error:\n          error instanceof Error ? (error instanceof Error ? error.message : String(error)) : error,\n      });\n    }\n\n    this.logger.debug('Using default ruv-swarm config');\n    return { ...defaultRuvSwarmConfig };\n  }\n\n  /**\n   * Save configuration to file\n   */\n  saveConfig(): void {\n    try {\n      const configDir = join(this.configPath, '..');\n\n      // Ensure config directory exists\n      if (!existsSync(configDir)) {\n        const fs = require('fs');\n        fs.mkdirSync(configDir, { recursive: true });\n      }\n\n      writeFileSync(this.configPath, JSON.stringify(this.config, null, 2), 'utf-8');\n\n      this.logger.debug('Saved ruv-swarm config to file', { path: this.configPath });\n    } catch (error) {\n      this.logger.error('Failed to save ruv-swarm config', {\n        error:\n          error instanceof Error ? (error instanceof Error ? error.message : String(error)) : error,\n      });\n    }\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): RuvSwarmConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(updates: Partial<RuvSwarmConfig>): void {\n    this.config = deepMerge(this.config, updates);\n    this.saveConfig();\n\n    this.logger.info('Updated ruv-swarm config', { updates });\n  }\n\n  /**\n   * Reset configuration to defaults\n   */\n  resetConfig(): void {\n    this.config = { ...defaultRuvSwarmConfig };\n    this.saveConfig();\n\n    this.logger.info('Reset ruv-swarm config to defaults');\n  }\n\n  /**\n   * Get specific configuration section\n   */\n  getSwarmConfig() {\n    return this.config.swarm;\n  }\n  getAgentsConfig() {\n    return this.config.agents;\n  }\n  getTasksConfig() {\n    return this.config.tasks;\n  }\n  getMemoryConfig() {\n    return this.config.memory;\n  }\n  getNeuralConfig() {\n    return this.config.neural;\n  }\n  getMonitoringConfig() {\n    return this.config.monitoring;\n  }\n  getIntegrationConfig() {\n    return this.config.integration;\n  }\n\n  /**\n   * Update specific configuration section\n   */\n  updateSwarmConfig(updates: Partial<RuvSwarmConfig['swarm']>): void {\n    this.updateConfig({ swarm: { ...this.config.swarm, ...updates } });\n  }\n\n  updateAgentsConfig(updates: Partial<RuvSwarmConfig['agents']>): void {\n    this.updateConfig({ agents: { ...this.config.agents, ...updates } });\n  }\n\n  updateTasksConfig(updates: Partial<RuvSwarmConfig['tasks']>): void {\n    this.updateConfig({ tasks: { ...this.config.tasks, ...updates } });\n  }\n\n  updateMemoryConfig(updates: Partial<RuvSwarmConfig['memory']>): void {\n    this.updateConfig({ memory: { ...this.config.memory, ...updates } });\n  }\n\n  updateNeuralConfig(updates: Partial<RuvSwarmConfig['neural']>): void {\n    this.updateConfig({ neural: { ...this.config.neural, ...updates } });\n  }\n\n  updateMonitoringConfig(updates: Partial<RuvSwarmConfig['monitoring']>): void {\n    this.updateConfig({ monitoring: { ...this.config.monitoring, ...updates } });\n  }\n\n  updateIntegrationConfig(updates: Partial<RuvSwarmConfig['integration']>): void {\n    this.updateConfig({ integration: { ...this.config.integration, ...updates } });\n  }\n\n  /**\n   * Validate configuration\n   */\n  validateConfig(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Validate swarm settings\n    if (this.config.swarm.maxAgents < 1 || this.config.swarm.maxAgents > 100) {\n      errors.push('swarm.maxAgents must be between 1 and 100');\n    }\n\n    // Validate agent settings\n    if (this.config.agents.spawnTimeout < 1000) {\n      errors.push('agents.spawnTimeout must be at least 1000ms');\n    }\n\n    if (this.config.agents.heartbeatInterval < 1000) {\n      errors.push('agents.heartbeatInterval must be at least 1000ms');\n    }\n\n    // Validate task settings\n    if (this.config.tasks.timeout < 10000) {\n      errors.push('tasks.timeout must be at least 10000ms');\n    }\n\n    // Validate memory settings\n    if (this.config.memory.maxSize < 1024 * 1024) {\n      // 1MB minimum\n      errors.push('memory.maxSize must be at least 1MB');\n    }\n\n    if (this.config.memory.compressionLevel < 0 || this.config.memory.compressionLevel > 9) {\n      errors.push('memory.compressionLevel must be between 0 and 9');\n    }\n\n    // Validate neural settings\n    if (this.config.neural.learningRate <= 0 || this.config.neural.learningRate > 1) {\n      errors.push('neural.learningRate must be between 0 and 1');\n    }\n\n    if (this.config.neural.trainingIterations < 1) {\n      errors.push('neural.trainingIterations must be at least 1');\n    }\n\n    // Validate monitoring settings\n    const { alertThresholds } = this.config.monitoring;\n    if (alertThresholds.cpu < 0 || alertThresholds.cpu > 100) {\n      errors.push('monitoring.alertThresholds.cpu must be between 0 and 100');\n    }\n\n    if (alertThresholds.memory < 0 || alertThresholds.memory > 100) {\n      errors.push('monitoring.alertThresholds.memory must be between 0 and 100');\n    }\n\n    if (alertThresholds.taskFailureRate < 0 || alertThresholds.taskFailureRate > 100) {\n      errors.push('monitoring.alertThresholds.taskFailureRate must be between 0 and 100');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Get configuration as command-line arguments for ruv-swarm\n   */\n  getCommandArgs(): string[] {\n    const args: string[] = [];\n\n    // Add swarm configuration\n    args.push('--topology', this.config.swarm.defaultTopology);\n    args.push('--max-agents', String(this.config.swarm.maxAgents));\n    args.push('--strategy', this.config.swarm.defaultStrategy);\n\n    if (this.config.swarm.enableHooks) {\n      args.push('--enable-hooks');\n    }\n\n    // Add task configuration\n    args.push('--task-strategy', this.config.tasks.defaultStrategy);\n    args.push('--task-priority', this.config.tasks.defaultPriority);\n    args.push('--task-timeout', String(this.config.tasks.timeout));\n\n    if (this.config.tasks.enableMonitoring) {\n      args.push('--enable-monitoring');\n    }\n\n    // Add memory configuration\n    if (this.config.memory.enablePersistence) {\n      args.push('--enable-persistence');\n      args.push('--compression-level', String(this.config.memory.compressionLevel));\n      args.push('--memory-ttl', String(this.config.memory.ttl));\n    }\n\n    // Add neural configuration\n    if (this.config.neural.enableTraining) {\n      args.push('--enable-training');\n      args.push('--learning-rate', String(this.config.neural.learningRate));\n      args.push('--training-iterations', String(this.config.neural.trainingIterations));\n    }\n\n    return args;\n  }\n}\n\n/**\n * Create or get singleton instance of ruv-swarm config manager\n */\nlet configManagerInstance: RuvSwarmConfigManager | null = null;\n\nexport function getRuvSwarmConfigManager(\n  logger: ILogger,\n  configPath?: string,\n): RuvSwarmConfigManager {\n  if (!configManagerInstance) {\n    configManagerInstance = new RuvSwarmConfigManager(logger, configPath);\n  }\n  return configManagerInstance;\n}\n\nexport default {\n  RuvSwarmConfigManager,\n  getRuvSwarmConfigManager,\n  defaultRuvSwarmConfig,\n};\n"],"names":["readFileSync","writeFileSync","existsSync","join","deepMerge","defaultRuvSwarmConfig","swarm","defaultTopology","maxAgents","defaultStrategy","autoInit","enableHooks","agents","defaultCapabilities","spawnTimeout","heartbeatInterval","maxRetries","tasks","defaultPriority","timeout","enableMonitoring","memory","enablePersistence","compressionLevel","ttl","maxSize","neural","enableTraining","patterns","learningRate","trainingIterations","monitoring","enableMetrics","metricsInterval","enableAlerts","alertThresholds","cpu","taskFailureRate","integration","enableMCPTools","enableCLICommands","sessionTimeout","RuvSwarmConfigManager","config","configPath","logger","process","cwd","loadConfig","configData","userConfig","JSON","parse","mergedConfig","debug","path","error","warn","Error","message","String","saveConfig","configDir","fs","require","mkdirSync","recursive","stringify","getConfig","updateConfig","updates","info","resetConfig","getSwarmConfig","getAgentsConfig","getTasksConfig","getMemoryConfig","getNeuralConfig","getMonitoringConfig","getIntegrationConfig","updateSwarmConfig","updateAgentsConfig","updateTasksConfig","updateMemoryConfig","updateNeuralConfig","updateMonitoringConfig","updateIntegrationConfig","validateConfig","errors","push","valid","length","getCommandArgs","args","configManagerInstance","getRuvSwarmConfigManager"],"mappings":"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"}