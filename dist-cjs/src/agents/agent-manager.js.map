{"version":3,"sources":["../../../src/agents/agent-manager.ts"],"sourcesContent":["/**\n * Comprehensive agent management system\n */\n\nimport { EventEmitter } from 'node:events';\nimport { spawn, ChildProcess } from 'node:child_process';\nimport type { ILogger } from '../core/logger.js';\nimport type { IEventBus } from '../core/event-bus.js';\nimport type {\n  AgentId,\n  AgentType,\n  AgentStatus,\n  AgentState,\n  AgentCapabilities,\n  AgentConfig,\n  AgentEnvironment,\n  AgentMetrics,\n  AgentError,\n} from '../swarm/types.js';\nimport type { DistributedMemorySystem } from '../memory/distributed-memory.js';\nimport { generateId } from '../utils/helpers.js';\n\nexport interface AgentManagerConfig {\n  maxAgents: number;\n  defaultTimeout: number;\n  heartbeatInterval: number;\n  healthCheckInterval: number;\n  autoRestart: boolean;\n  resourceLimits: {\n    memory: number;\n    cpu: number;\n    disk: number;\n  };\n  agentDefaults: {\n    autonomyLevel: number;\n    learningEnabled: boolean;\n    adaptationEnabled: boolean;\n  };\n  environmentDefaults: {\n    runtime: 'deno' | 'node' | 'claude' | 'browser';\n    workingDirectory: string;\n    tempDirectory: string;\n    logDirectory: string;\n  };\n}\n\nexport interface AgentTemplate {\n  name: string;\n  type: AgentType;\n  capabilities: AgentCapabilities;\n  config: Partial<AgentConfig>;\n  environment: Partial<AgentEnvironment>;\n  startupScript?: string;\n  dependencies?: string[];\n}\n\nexport interface AgentCluster {\n  id: string;\n  name: string;\n  agents: AgentId[];\n  coordinator: AgentId;\n  strategy: 'round-robin' | 'load-based' | 'capability-based';\n  maxSize: number;\n  autoScale: boolean;\n}\n\nexport interface AgentPool {\n  id: string;\n  name: string;\n  type: AgentType;\n  minSize: number;\n  maxSize: number;\n  currentSize: number;\n  availableAgents: AgentId[];\n  busyAgents: AgentId[];\n  template: AgentTemplate;\n  autoScale: boolean;\n  scaleUpThreshold: number;\n  scaleDownThreshold: number;\n}\n\nexport interface ScalingPolicy {\n  name: string;\n  enabled: boolean;\n  rules: ScalingRule[];\n  cooldownPeriod: number;\n  maxScaleOperations: number;\n}\n\nexport interface ScalingRule {\n  metric: string;\n  threshold: number;\n  comparison: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  action: 'scale-up' | 'scale-down';\n  amount: number;\n  conditions?: string[];\n}\n\nexport interface AgentHealth {\n  agentId: string;\n  overall: number; // 0-1 health score\n  components: {\n    responsiveness: number;\n    performance: number;\n    reliability: number;\n    resourceUsage: number;\n  };\n  issues: HealthIssue[];\n  lastCheck: Date;\n  trend: 'improving' | 'stable' | 'degrading';\n}\n\nexport interface HealthIssue {\n  type: 'performance' | 'reliability' | 'resource' | 'communication';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n  recommendedAction?: string;\n}\n\n/**\n * Comprehensive agent lifecycle and resource management\n */\nexport class AgentManager extends EventEmitter {\n  private logger: ILogger;\n  private eventBus: IEventBus;\n  private memory: DistributedMemorySystem;\n  private config: AgentManagerConfig;\n\n  // Agent tracking\n  private agents = new Map<string, AgentState>();\n  private processes = new Map<string, ChildProcess>();\n  private templates = new Map<string, AgentTemplate>();\n  private clusters = new Map<string, AgentCluster>();\n  private pools = new Map<string, AgentPool>();\n\n  // Health monitoring\n  private healthChecks = new Map<string, AgentHealth>();\n  private healthInterval?: NodeJS.Timeout;\n  private heartbeatInterval?: NodeJS.Timeout;\n\n  // Scaling and policies\n  private scalingPolicies = new Map<string, ScalingPolicy>();\n  private scalingOperations = new Map<string, { timestamp: Date; type: string }>();\n\n  // Resource tracking\n  private resourceUsage = new Map<string, { cpu: number; memory: number; disk: number }>();\n  private performanceHistory = new Map<string, Array<{ timestamp: Date; metrics: AgentMetrics }>>();\n\n  constructor(\n    config: Partial<AgentManagerConfig>,\n    logger: ILogger,\n    eventBus: IEventBus,\n    memory: DistributedMemorySystem,\n  ) {\n    super();\n    this.logger = logger;\n    this.eventBus = eventBus;\n    this.memory = memory;\n\n    this.config = {\n      maxAgents: 50,\n      defaultTimeout: 30000,\n      heartbeatInterval: 10000,\n      healthCheckInterval: 30000,\n      autoRestart: true,\n      resourceLimits: {\n        memory: 512 * 1024 * 1024, // 512MB\n        cpu: 1.0,\n        disk: 1024 * 1024 * 1024, // 1GB\n      },\n      agentDefaults: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n      },\n      environmentDefaults: {\n        runtime: 'deno',\n        workingDirectory: './agents',\n        tempDirectory: './tmp',\n        logDirectory: './logs',\n      },\n      ...config,\n    };\n\n    this.setupEventHandlers();\n    this.initializeDefaultTemplates();\n  }\n\n  private setupEventHandlers(): void {\n    this.eventBus.on('agent:heartbeat', (data: unknown) => {\n      const heartbeatData = data as { agentId: string; timestamp: Date; metrics?: AgentMetrics };\n      this.handleHeartbeat(heartbeatData);\n    });\n\n    this.eventBus.on('agent:error', (data: unknown) => {\n      const errorData = data as { agentId: string; error: AgentError };\n      this.handleAgentError(errorData);\n    });\n\n    this.eventBus.on('task:assigned', (data: unknown) => {\n      const taskData = data as { agentId: string };\n      this.updateAgentWorkload(taskData.agentId, 1);\n    });\n\n    this.eventBus.on('task:completed', (data: unknown) => {\n      const completedData = data as { agentId: string; metrics?: AgentMetrics };\n      this.updateAgentWorkload(completedData.agentId, -1);\n      if (completedData.metrics) {\n        this.updateAgentMetrics(completedData.agentId, completedData.metrics);\n      }\n    });\n\n    this.eventBus.on('resource:usage', (data: unknown) => {\n      const resourceData = data as {\n        agentId: string;\n        usage: { cpu: number; memory: number; disk: number };\n      };\n      this.updateResourceUsage(resourceData.agentId, resourceData.usage);\n    });\n  }\n\n  private initializeDefaultTemplates(): void {\n    // Research agent template\n    this.templates.set('researcher', {\n      name: 'Research Agent',\n      type: 'researcher',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['research', 'analysis', 'information-gathering'],\n        tools: ['web-search', 'document-analysis', 'data-extraction'],\n        maxConcurrentTasks: 5,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 5,\n        timeoutThreshold: 600000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['web-access', 'file-read'],\n        trustedAgents: [],\n        expertise: { research: 0.9, analysis: 0.8, documentation: 0.7 },\n        preferences: { verbose: true, detailed: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/researcher',\n        tempDirectory: './tmp/researcher',\n        logDirectory: './logs/researcher',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['web-search', 'document-reader', 'data-extractor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-researcher.ts',\n    });\n\n    // Developer agent template\n    this.templates.set('coder', {\n      name: 'Developer Agent',\n      type: 'coder',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // Add more templates...\n    this.initializeSpecializedTemplates();\n  }\n\n  private initializeSpecializedTemplates(): void {\n    // Analyzer template\n    this.templates.set('analyst', {\n      name: 'Analyzer Agent',\n      type: 'analyst',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['python', 'r', 'sql'],\n        frameworks: ['pandas', 'numpy', 'matplotlib'],\n        domains: ['data-analysis', 'statistics', 'visualization'],\n        tools: ['data-processor', 'chart-generator', 'statistical-analyzer'],\n        maxConcurrentTasks: 4,\n        maxMemoryUsage: 1024 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.9,\n        speed: 0.75,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 4,\n        timeoutThreshold: 900000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'data-access'],\n        trustedAgents: [],\n        expertise: { analysis: 0.95, visualization: 0.8, statistics: 0.85 },\n        preferences: { outputFormat: 'detailed', includeCharts: true },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/analyzer',\n        tempDirectory: './tmp/analyzer',\n        logDirectory: './logs/analyzer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['data-processor', 'chart-gen', 'stats-calc'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-analyzer.ts',\n    });\n\n    // Requirements Engineer Agent Template\n    this.templates.set('requirements-engineer', {\n      name: 'Requirements Engineer Agent',\n      type: 'requirements-engineer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: true,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['requirements-engineering', 'user-stories', 'ears-notation'],\n        tools: ['document-writer', 'nlp-processor', 'web-search'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { requirements: 0.95, documentation: 0.9, analysis: 0.8 },\n        preferences: { format: 'markdown', style: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/requirements-engineer',\n        tempDirectory: './tmp/requirements-engineer',\n        logDirectory: './logs/requirements-engineer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'nlp-processor'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-requirements-engineer.ts',\n    });\n\n    // Design Architect Agent Template\n    this.templates.set('design-architect', {\n      name: 'Design Architect Agent',\n      type: 'design-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: [],\n        domains: ['software-architecture', 'system-design', 'data-modeling'],\n        tools: ['diagram-generator', 'code-analyzer', 'api-designer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 600000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { architecture: 0.95, design: 0.9, modeling: 0.85 },\n        preferences: { diagramFormat: 'mermaid', detailLevel: 'high' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/design-architect',\n        tempDirectory: './tmp/design-architect',\n        logDirectory: './logs/design-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['diagram-gen', 'code-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-design-architect.ts',\n    });\n\n    // Task Planner Agent Template\n    this.templates.set('task-planner', {\n      name: 'Task Planner Agent',\n      type: 'task-planner',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['project-management', 'task-breakdown', 'agile-planning'],\n        tools: ['task-scheduler', 'dependency-analyzer'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.85,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 20,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { planning: 0.95, 'task-management': 0.9, optimization: 0.8 },\n        preferences: { outputFormat: 'markdown-checkbox', granularity: 'fine' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/task-planner',\n        tempDirectory: './tmp/task-planner',\n        logDirectory: './logs/task-planner',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['task-scheduler', 'dependency-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-task-planner.ts',\n    });\n\n    // Developer Agent Template (already exists, but ensure it's aligned)\n    this.templates.set('developer', {\n      name: 'Developer Agent',\n      type: 'developer',\n      capabilities: {\n        codeGeneration: true,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['deno', 'node', 'react', 'svelte'],\n        domains: ['web-development', 'backend', 'api-design'],\n        tools: ['git', 'editor', 'debugger', 'linter', 'formatter'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 1200000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.6,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 1200000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write', 'terminal-access', 'git-access'],\n        trustedAgents: [],\n        expertise: { coding: 0.95, testing: 0.8, debugging: 0.9 },\n        preferences: { codeStyle: 'functional', testFramework: 'deno-test' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/developer',\n        tempDirectory: './tmp/developer',\n        logDirectory: './logs/developer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['git', 'deno', 'editor', 'debugger'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-developer.ts',\n    });\n\n    // System Architect Agent Template  \n    this.templates.set('system-architect', {\n      name: 'System Architect Agent',\n      type: 'system-architect',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['microservices', 'distributed-systems'],\n        domains: ['system-architecture', 'scalability', 'performance', 'distributed-systems'],\n        tools: ['architecture-analyzer', 'system-modeler', 'performance-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 512 * 1024 * 1024,\n        maxExecutionTime: 900000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 900000,\n        reportingInterval: 60000,\n        heartbeatInterval: 15000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { 'system-architecture': 0.95, scalability: 0.9, performance: 0.85 },\n        preferences: { scope: 'system-wide', focusArea: 'architecture' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/system-architect',\n        tempDirectory: './tmp/system-architect',\n        logDirectory: './logs/system-architect',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['architecture-analyzer', 'system-modeler'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-system-architect.ts',\n    });\n\n    // Tester Agent Template\n    this.templates.set('tester', {\n      name: 'Testing Agent',\n      type: 'tester',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: true,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: true,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: ['typescript', 'javascript', 'python'],\n        frameworks: ['deno-test', 'jest', 'vitest', 'cypress'],\n        domains: ['testing', 'quality-assurance', 'test-automation'],\n        tools: ['test-runner', 'coverage-analyzer', 'test-generator'],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 600000,\n        reliability: 0.9,\n        speed: 0.8,\n        quality: 0.9,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 15,\n        maxConcurrentTasks: 3,\n        timeoutThreshold: 600000,\n        reportingInterval: 45000,\n        heartbeatInterval: 12000,\n        permissions: ['file-read', 'file-write', 'terminal-access'],\n        trustedAgents: [],\n        expertise: { testing: 0.9, 'quality-assurance': 0.85, automation: 0.8 },\n        preferences: { testFramework: 'deno-test', coverage: 'comprehensive' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/tester',\n        tempDirectory: './tmp/tester',\n        logDirectory: './logs/tester',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['test-runner', 'coverage-tool', 'test-gen'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-tester.ts',\n    });\n\n    // Code Reviewer Agent Template\n    this.templates.set('reviewer', {\n      name: 'Code Review Agent',\n      type: 'reviewer',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: false,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: ['typescript', 'javascript', 'python', 'rust'],\n        frameworks: ['static-analysis', 'code-quality'],\n        domains: ['code-review', 'quality-assurance', 'best-practices'],\n        tools: ['static-analyzer', 'code-quality-checker', 'security-scanner'],\n        maxConcurrentTasks: 2,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 450000,\n        reliability: 0.95,\n        speed: 0.8,\n        quality: 0.95,\n      },\n      config: {\n        autonomyLevel: 0.8,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 12,\n        maxConcurrentTasks: 2,\n        timeoutThreshold: 450000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read'],\n        trustedAgents: [],\n        expertise: { 'code-review': 0.95, 'quality-assurance': 0.9, security: 0.8 },\n        preferences: { style: 'thorough', focus: 'quality-and-security' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/reviewer',\n        tempDirectory: './tmp/reviewer',\n        logDirectory: './logs/reviewer',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['static-analyzer', 'quality-checker'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-reviewer.ts',\n    });\n\n    // Steering Author Agent Template\n    this.templates.set('steering-author', {\n      name: 'Steering Author Agent',\n      type: 'steering-author',\n      capabilities: {\n        codeGeneration: false,\n        codeReview: true,\n        testing: false,\n        documentation: true,\n        research: true,\n        analysis: true,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: false,\n        languages: [],\n        frameworks: [],\n        domains: ['documentation', 'knowledge-management', 'governance'],\n        tools: ['document-writer', 'content-analyzer'],\n        maxConcurrentTasks: 1,\n        maxMemoryUsage: 256 * 1024 * 1024,\n        maxExecutionTime: 300000,\n        reliability: 0.95,\n        speed: 0.7,\n        quality: 0.98,\n      },\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 5,\n        maxConcurrentTasks: 1,\n        timeoutThreshold: 300000,\n        reportingInterval: 30000,\n        heartbeatInterval: 10000,\n        permissions: ['file-read', 'file-write'],\n        trustedAgents: [],\n        expertise: { documentation: 0.98, governance: 0.9, 'content-creation': 0.85 },\n        preferences: { style: 'concise', tone: 'formal' },\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.40.0',\n        workingDirectory: './agents/steering-author',\n        tempDirectory: './tmp/steering-author',\n        logDirectory: './logs/steering-author',\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: ['document-writer', 'content-analyzer'],\n        toolConfigs: {},\n      },\n      startupScript: './scripts/start-steering-author.ts',\n    });\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing agent manager', {\n      maxAgents: this.config.maxAgents,\n      templates: this.templates.size,\n    });\n\n    // Start health monitoring\n    this.startHealthMonitoring();\n\n    // Start heartbeat monitoring\n    this.startHeartbeatMonitoring();\n\n    // Initialize default scaling policies\n    this.initializeScalingPolicies();\n\n    this.emit('agent-manager:initialized');\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down agent manager');\n\n    // Stop monitoring\n    if (this.healthInterval) clearInterval(this.healthInterval);\n    if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);\n\n    // Gracefully shutdown all agents\n    const shutdownPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.stopAgent(agentId, 'shutdown'),\n    );\n\n    await Promise.all(shutdownPromises);\n\n    this.emit('agent-manager:shutdown');\n  }\n\n  // === AGENT LIFECYCLE ===\n\n  async createAgent(\n    templateName: string,\n    overrides: {\n      name?: string;\n      config?: Partial<AgentConfig>;\n      environment?: Partial<AgentEnvironment>;\n    } = {},\n  ): Promise<string> {\n    if (this.agents.size >= this.config.maxAgents) {\n      throw new Error('Maximum agent limit reached');\n    }\n\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const agentId = generateId('agent');\n    const swarmId = 'default'; // Could be parameterized\n\n    const agent: AgentState = {\n      id: { id: agentId, swarmId, type: template.type, instance: 1 },\n      name: overrides.name || `${template.name}-${agentId.slice(-8)}`,\n      type: template.type,\n      status: 'initializing',\n      capabilities: { ...template.capabilities },\n      metrics: this.createDefaultMetrics(),\n      workload: 0,\n      health: 1.0,\n      config: {\n        autonomyLevel: template.config.autonomyLevel ?? this.config.agentDefaults.autonomyLevel,\n        learningEnabled:\n          template.config.learningEnabled ?? this.config.agentDefaults.learningEnabled,\n        adaptationEnabled:\n          template.config.adaptationEnabled ?? this.config.agentDefaults.adaptationEnabled,\n        maxTasksPerHour: template.config.maxTasksPerHour ?? 10,\n        maxConcurrentTasks: template.config.maxConcurrentTasks ?? 3,\n        timeoutThreshold: template.config.timeoutThreshold ?? 300000,\n        reportingInterval: template.config.reportingInterval ?? 30000,\n        heartbeatInterval: template.config.heartbeatInterval ?? 10000,\n        permissions: template.config.permissions ?? [],\n        trustedAgents: template.config.trustedAgents ?? [],\n        expertise: template.config.expertise ?? {},\n        preferences: template.config.preferences ?? {},\n        ...overrides.config,\n      },\n      environment: {\n        runtime: template.environment.runtime ?? this.config.environmentDefaults.runtime,\n        version: template.environment.version ?? '1.40.0',\n        workingDirectory:\n          template.environment.workingDirectory ?? this.config.environmentDefaults.workingDirectory,\n        tempDirectory:\n          template.environment.tempDirectory ?? this.config.environmentDefaults.tempDirectory,\n        logDirectory:\n          template.environment.logDirectory ?? this.config.environmentDefaults.logDirectory,\n        apiEndpoints: template.environment.apiEndpoints ?? {},\n        credentials: template.environment.credentials ?? {},\n        availableTools: template.environment.availableTools ?? [],\n        toolConfigs: template.environment.toolConfigs ?? {},\n        ...overrides.environment,\n      },\n      endpoints: [],\n      lastHeartbeat: new Date(),\n      taskHistory: [],\n      errorHistory: [],\n      childAgents: [],\n      collaborators: [],\n    };\n\n    this.agents.set(agentId, agent);\n    this.healthChecks.set(agentId, this.createDefaultHealth(agentId));\n\n    this.logger.info('Created agent', {\n      agentId,\n      name: agent.name,\n      type: agent.type,\n      template: templateName,\n    });\n\n    this.emit('agent:created', { agent });\n\n    // Store in memory for persistence\n    await this.memory.store(`agent:${agentId}`, agent, {\n      type: 'agent-state',\n      tags: [agent.type, 'active'],\n      partition: 'state',\n    });\n\n    return agentId;\n  }\n\n  async startAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status !== 'initializing' && agent.status !== 'offline') {\n      throw new Error(`Agent ${agentId} cannot be started from status ${agent.status}`);\n    }\n\n    try {\n      agent.status = 'initializing';\n      this.updateAgentStatus(agentId, 'initializing');\n\n      // Spawn agent process\n      const process = await this.spawnAgentProcess(agent);\n      this.processes.set(agentId, process);\n\n      // Wait for agent to signal ready\n      await this.waitForAgentReady(agentId, this.config.defaultTimeout);\n\n      agent.status = 'idle';\n      this.updateAgentStatus(agentId, 'idle');\n\n      this.logger.info('Started agent', { agentId, name: agent.name });\n      this.emit('agent:started', { agent });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      agent.status = 'error';\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'startup_failed',\n        message: errorMessage,\n        context: { agentId },\n        severity: 'critical',\n        resolved: false,\n      });\n\n      this.logger.error('Failed to start agent', { agentId, error });\n      throw error;\n    }\n  }\n\n  async stopAgent(agentId: string, reason: string = 'user_request'): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status === 'offline' || agent.status === 'terminated') {\n      return; // Already stopped\n    }\n\n    try {\n      agent.status = 'terminating';\n      this.updateAgentStatus(agentId, 'terminating');\n\n      // Send graceful shutdown signal\n      const process = this.processes.get(agentId);\n      if (process && !process.killed) {\n        process.kill('SIGTERM');\n\n        // Force kill after timeout\n        setTimeout(() => {\n          if (process && !process.killed) {\n            process.kill('SIGKILL');\n          }\n        }, this.config.defaultTimeout);\n      }\n\n      // Wait for process to exit\n      await this.waitForProcessExit(agentId, this.config.defaultTimeout);\n\n      agent.status = 'terminated';\n      this.updateAgentStatus(agentId, 'terminated');\n\n      // Cleanup\n      this.processes.delete(agentId);\n\n      this.logger.info('Stopped agent', { agentId, reason });\n      this.emit('agent:stopped', { agent, reason });\n    } catch (error) {\n      this.logger.error('Failed to stop agent gracefully', { agentId, error });\n      // Force cleanup\n      this.processes.delete(agentId);\n      agent.status = 'terminated';\n    }\n  }\n\n  async restartAgent(agentId: string, reason: string = 'restart_requested'): Promise<void> {\n    this.logger.info('Restarting agent', { agentId, reason });\n\n    await this.stopAgent(agentId, `restart:${reason}`);\n    await this.startAgent(agentId);\n\n    this.emit('agent:restarted', { agentId, reason });\n  }\n\n  async removeAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    // Stop agent if running\n    if (agent.status !== 'terminated' && agent.status !== 'offline') {\n      await this.stopAgent(agentId, 'removal');\n    }\n\n    // Remove from all data structures\n    this.agents.delete(agentId);\n    this.healthChecks.delete(agentId);\n    this.resourceUsage.delete(agentId);\n    this.performanceHistory.delete(agentId);\n\n    // Remove from pools and clusters\n    this.removeAgentFromPoolsAndClusters(agentId);\n\n    // Remove from memory\n    await this.memory.deleteEntry(`agent:${agentId}`);\n\n    this.logger.info('Removed agent', { agentId });\n    this.emit('agent:removed', { agentId });\n  }\n\n  // === AGENT POOLS ===\n\n  async createAgentPool(\n    name: string,\n    templateName: string,\n    config: {\n      minSize: number;\n      maxSize: number;\n      autoScale?: boolean;\n      scaleUpThreshold?: number;\n      scaleDownThreshold?: number;\n    },\n  ): Promise<string> {\n    const template = this.templates.get(templateName);\n    if (!template) {\n      throw new Error(`Template ${templateName} not found`);\n    }\n\n    const poolId = generateId('pool');\n    const pool: AgentPool = {\n      id: poolId,\n      name,\n      type: template.type,\n      minSize: config.minSize,\n      maxSize: config.maxSize,\n      currentSize: 0,\n      availableAgents: [],\n      busyAgents: [],\n      template,\n      autoScale: config.autoScale || false,\n      scaleUpThreshold: config.scaleUpThreshold || 0.8,\n      scaleDownThreshold: config.scaleDownThreshold || 0.3,\n    };\n\n    this.pools.set(poolId, pool);\n\n    // Create minimum agents\n    for (let i = 0; i < config.minSize; i++) {\n      const agentId = await this.createAgent(templateName, {\n        name: `${name}-${i + 1}`,\n      });\n      await this.startAgent(agentId);\n      pool.availableAgents.push({\n        id: agentId,\n        swarmId: 'default',\n        type: template.type,\n        instance: i + 1,\n      });\n      pool.currentSize++;\n    }\n\n    this.logger.info('Created agent pool', { poolId, name, minSize: config.minSize });\n    this.emit('pool:created', { pool });\n\n    return poolId;\n  }\n\n  async scalePool(poolId: string, targetSize: number): Promise<void> {\n    const pool = this.pools.get(poolId);\n    if (!pool) {\n      throw new Error(`Pool ${poolId} not found`);\n    }\n\n    if (targetSize < pool.minSize || targetSize > pool.maxSize) {\n      throw new Error(\n        `Target size ${targetSize} outside pool limits [${pool.minSize}, ${pool.maxSize}]`,\n      );\n    }\n\n    const currentSize = pool.currentSize;\n    const delta = targetSize - currentSize;\n\n    if (delta > 0) {\n      // Scale up\n      for (let i = 0; i < delta; i++) {\n        const agentId = await this.createAgent(pool.template.name, {\n          name: `${pool.name}-${currentSize + i + 1}`,\n        });\n        await this.startAgent(agentId);\n        pool.availableAgents.push({\n          id: agentId,\n          swarmId: 'default',\n          type: pool.type,\n          instance: currentSize + i + 1,\n        });\n      }\n    } else if (delta < 0) {\n      // Scale down\n      const agentsToRemove = pool.availableAgents.slice(0, Math.abs(delta));\n      for (const agentId of agentsToRemove) {\n        await this.removeAgent(agentId.id);\n        pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId.id);\n      }\n    }\n\n    pool.currentSize = targetSize;\n\n    this.logger.info('Scaled pool', { poolId, fromSize: currentSize, toSize: targetSize });\n    this.emit('pool:scaled', { pool, fromSize: currentSize, toSize: targetSize });\n  }\n\n  // === HEALTH MONITORING ===\n\n  private startHealthMonitoring(): void {\n    this.healthInterval = setInterval(() => {\n      this.performHealthChecks();\n    }, this.config.healthCheckInterval);\n\n    this.logger.info('Started health monitoring', {\n      interval: this.config.healthCheckInterval,\n    });\n  }\n\n  private startHeartbeatMonitoring(): void {\n    this.heartbeatInterval = setInterval(() => {\n      this.checkHeartbeats();\n    }, this.config.heartbeatInterval);\n\n    this.logger.info('Started heartbeat monitoring', {\n      interval: this.config.heartbeatInterval,\n    });\n  }\n\n  private async performHealthChecks(): Promise<void> {\n    const healthPromises = Array.from(this.agents.keys()).map((agentId) =>\n      this.checkAgentHealth(agentId),\n    );\n\n    await Promise.allSettled(healthPromises);\n  }\n\n  private async checkAgentHealth(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const health = this.healthChecks.get(agentId);\n    if (!health) return;\n    const now = new Date();\n\n    try {\n      // Check responsiveness\n      const responsiveness = await this.checkResponsiveness(agentId);\n      health.components.responsiveness = responsiveness;\n\n      // Check performance\n      const performance = this.calculatePerformanceScore(agentId);\n      health.components.performance = performance;\n\n      // Check reliability\n      const reliability = this.calculateReliabilityScore(agentId);\n      health.components.reliability = reliability;\n\n      // Check resource usage\n      const resourceScore = this.calculateResourceScore(agentId);\n      health.components.resourceUsage = resourceScore;\n\n      // Calculate overall health\n      const overall = (responsiveness + performance + reliability + resourceScore) / 4;\n      health.overall = overall;\n      health.lastCheck = now;\n\n      // Update agent health\n      agent.health = overall;\n\n      // Check for issues\n      this.detectHealthIssues(agentId, health);\n\n      // Auto-restart if critically unhealthy\n      if (overall < 0.3 && this.config.autoRestart) {\n        this.logger.warn('Agent critically unhealthy, restarting', { agentId, health: overall });\n        await this.restartAgent(agentId, 'health_critical');\n      }\n    } catch (error) {\n      this.logger.error('Health check failed', { agentId, error });\n      health.overall = 0;\n      health.lastCheck = now;\n    }\n  }\n\n  private async checkResponsiveness(agentId: string): Promise<number> {\n    // Send ping and measure response time\n\n    try {\n      // This would send an actual ping to the agent\n      // For now, simulate based on last heartbeat\n      const agent = this.agents.get(agentId);\n      if (!agent) return 0;\n      const timeSinceHeartbeat = Date.now() - agent.lastHeartbeat.getTime();\n\n      if (timeSinceHeartbeat > this.config.heartbeatInterval * 3) {\n        return 0; // Unresponsive\n      } else if (timeSinceHeartbeat > this.config.heartbeatInterval * 2) {\n        return 0.5; // Slow\n      } else {\n        return 1.0; // Responsive\n      }\n    } catch (error) {\n      return 0; // Failed to respond\n    }\n  }\n\n  private calculatePerformanceScore(agentId: string): number {\n    const history = this.performanceHistory.get(agentId) || [];\n    if (history.length === 0) return 1.0;\n\n    // Calculate average task completion time vs expected\n    const recent = history.slice(-10); // Last 10 entries\n    const avgTime =\n      recent.reduce((sum, entry) => sum + entry.metrics.averageExecutionTime, 0) / recent.length;\n\n    // Normalize based on expected performance (simplified)\n    const expectedTime = 60000; // 1 minute baseline\n    return Math.max(0, Math.min(1, expectedTime / avgTime));\n  }\n\n  private calculateReliabilityScore(agentId: string): number {\n    const agent = this.agents.get(agentId);\n    if (!agent) return 0;\n    const totalTasks = agent.metrics.tasksCompleted + agent.metrics.tasksFailed;\n\n    if (totalTasks === 0) return 1.0;\n\n    return agent.metrics.tasksCompleted / totalTasks;\n  }\n\n  private calculateResourceScore(agentId: string): number {\n    const usage = this.resourceUsage.get(agentId);\n    if (!usage) return 1.0;\n\n    const limits = this.config.resourceLimits;\n    const memoryScore = 1 - usage.memory / limits.memory;\n    const cpuScore = 1 - usage.cpu / limits.cpu;\n    const diskScore = 1 - usage.disk / limits.disk;\n\n    return Math.max(0, (memoryScore + cpuScore + diskScore) / 3);\n  }\n\n  private detectHealthIssues(agentId: string, health: AgentHealth): void {\n    const issues: HealthIssue[] = [];\n\n    if (health.components.responsiveness < 0.5) {\n      issues.push({\n        type: 'communication',\n        severity: health.components.responsiveness < 0.2 ? 'critical' : 'high',\n        message: 'Agent is not responding to heartbeats',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Restart agent or check network connectivity',\n      });\n    }\n\n    if (health.components.performance < 0.6) {\n      issues.push({\n        type: 'performance',\n        severity: health.components.performance < 0.3 ? 'high' : 'medium',\n        message: 'Agent performance is below expected levels',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Check resource allocation or agent configuration',\n      });\n    }\n\n    if (health.components.resourceUsage < 0.4) {\n      issues.push({\n        type: 'resource',\n        severity: health.components.resourceUsage < 0.2 ? 'critical' : 'high',\n        message: 'Agent resource usage is critically high',\n        timestamp: new Date(),\n        resolved: false,\n        recommendedAction: 'Increase resource limits or reduce workload',\n      });\n    }\n\n    health.issues = issues;\n  }\n\n  private checkHeartbeats(): void {\n    const now = Date.now();\n    const timeout = this.config.heartbeatInterval * 3;\n\n    for (const [agentId, agent] of Array.from(this.agents.entries())) {\n      const timeSinceHeartbeat = now - agent.lastHeartbeat.getTime();\n\n      if (\n        timeSinceHeartbeat > timeout &&\n        agent.status !== 'offline' &&\n        agent.status !== 'terminated'\n      ) {\n        this.logger.warn('Agent heartbeat timeout', { agentId, timeSinceHeartbeat });\n\n        agent.status = 'error';\n        this.addAgentError(agentId, {\n          timestamp: new Date(),\n          type: 'heartbeat_timeout',\n          message: 'Agent failed to send heartbeat within timeout period',\n          context: { timeout, timeSinceHeartbeat },\n          severity: 'high',\n          resolved: false,\n        });\n\n        this.emit('agent:heartbeat-timeout', { agentId, timeSinceHeartbeat });\n\n        // Auto-restart if enabled\n        if (this.config.autoRestart) {\n          this.restartAgent(agentId, 'heartbeat_timeout').catch((error) => {\n            this.logger.error('Failed to auto-restart agent', { agentId, error });\n          });\n        }\n      }\n    }\n  }\n\n  // === UTILITY METHODS ===\n\n  private async spawnAgentProcess(agent: AgentState): Promise<ChildProcess> {\n    const env: NodeJS.ProcessEnv = {\n      ...process.env,\n      AGENT_ID: agent.id.id,\n      AGENT_TYPE: agent.type,\n      AGENT_NAME: agent.name,\n      WORKING_DIR: agent.environment.workingDirectory,\n      LOG_DIR: agent.environment.logDirectory,\n    };\n\n    const args = [\n      'run',\n      '--allow-all',\n      agent.environment.availableTools[0] || './agents/generic-agent.ts',\n      '--config',\n      JSON.stringify(agent.config),\n    ];\n\n    const childProcess = spawn(agent.environment.runtime, args, {\n      env,\n      stdio: ['pipe', 'pipe', 'pipe'],\n      cwd: agent.environment.workingDirectory,\n    });\n\n    // Handle process events\n    childProcess.on('exit', (code: number | null) => {\n      this.handleProcessExit(agent.id.id, code);\n    });\n\n    childProcess.on('error', (error: Error) => {\n      this.handleProcessError(agent.id.id, error);\n    });\n\n    return childProcess;\n  }\n\n  private async waitForAgentReady(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error(`Agent ${agentId} startup timeout`));\n      }, timeout);\n\n      const handler = (data: unknown) => {\n        const readyData = data as { agentId: string };\n        if (readyData.agentId === agentId) {\n          clearTimeout(timer);\n          this.eventBus.off('agent:ready', handler);\n          resolve();\n        }\n      };\n\n      this.eventBus.on('agent:ready', handler);\n    });\n  }\n\n  private async waitForProcessExit(agentId: string, timeout: number): Promise<void> {\n    return new Promise((resolve) => {\n      const process = this.processes.get(agentId);\n      if (!process || process.killed) {\n        resolve();\n        return;\n      }\n\n      const timer = setTimeout(() => {\n        resolve(); // Timeout, continue anyway\n      }, timeout);\n\n      process.on('exit', () => {\n        clearTimeout(timer);\n        resolve();\n      });\n    });\n  }\n\n  private handleProcessExit(agentId: string, code: number | null): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    this.logger.info('Agent process exited', { agentId, exitCode: code });\n\n    if (code !== 0 && code !== null) {\n      this.addAgentError(agentId, {\n        timestamp: new Date(),\n        type: 'process_exit',\n        message: `Agent process exited with code ${code}`,\n        context: { exitCode: code },\n        severity: 'high',\n        resolved: false,\n      });\n    }\n\n    agent.status = 'offline';\n    this.emit('agent:process-exit', { agentId, exitCode: code });\n  }\n\n  private handleProcessError(agentId: string, error: Error): void {\n    this.logger.error('Agent process error', { agentId, error });\n\n    this.addAgentError(agentId, {\n      timestamp: new Date(),\n      type: 'process_error',\n      message: error instanceof Error ? error.message : String(error),\n      context: { error: error.toString() },\n      severity: 'critical',\n      resolved: false,\n    });\n\n    this.emit('agent:process-error', { agentId, error });\n  }\n\n  private handleHeartbeat(data: {\n    agentId: string;\n    timestamp: Date;\n    metrics?: AgentMetrics;\n  }): void {\n    const agent = this.agents.get(data.agentId);\n    if (!agent) return;\n\n    agent.lastHeartbeat = data.timestamp;\n\n    if (data.metrics) {\n      this.updateAgentMetrics(data.agentId, data.metrics);\n    }\n\n    // Update health if agent was previously unresponsive\n    if (agent.status === 'error') {\n      agent.status = 'idle';\n      this.updateAgentStatus(data.agentId, 'idle');\n    }\n  }\n\n  private handleAgentError(data: { agentId: string; error: AgentError }): void {\n    this.addAgentError(data.agentId, data.error);\n\n    const agent = this.agents.get(data.agentId);\n    if (agent && data.error.severity === 'critical') {\n      agent.status = 'error';\n      this.updateAgentStatus(data.agentId, 'error');\n    }\n  }\n\n  private updateAgentStatus(agentId: string, status: AgentStatus): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    const oldStatus = agent.status;\n    agent.status = status;\n\n    this.emit('agent:status-changed', { agentId, from: oldStatus, to: status });\n  }\n\n  private updateAgentWorkload(agentId: string, delta: number): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.workload = Math.max(0, agent.workload + delta);\n  }\n\n  private updateAgentMetrics(agentId: string, metrics: AgentMetrics): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.metrics = { ...agent.metrics, ...metrics };\n\n    // Store performance history\n    const history = this.performanceHistory.get(agentId) || [];\n    history.push({ timestamp: new Date(), metrics: { ...metrics } });\n\n    // Keep only last 100 entries\n    if (history.length > 100) {\n      history.shift();\n    }\n\n    this.performanceHistory.set(agentId, history);\n  }\n\n  private updateResourceUsage(\n    agentId: string,\n    usage: { cpu: number; memory: number; disk: number },\n  ): void {\n    this.resourceUsage.set(agentId, usage);\n  }\n\n  private addAgentError(agentId: string, error: AgentError): void {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.errorHistory.push(error);\n\n    // Keep only last 50 errors\n    if (agent.errorHistory.length > 50) {\n      agent.errorHistory.shift();\n    }\n  }\n\n  private createDefaultMetrics(): AgentMetrics {\n    return {\n      tasksCompleted: 0,\n      tasksFailed: 0,\n      averageExecutionTime: 0,\n      successRate: 1.0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      diskUsage: 0,\n      networkUsage: 0,\n      codeQuality: 0.8,\n      testCoverage: 0,\n      bugRate: 0,\n      userSatisfaction: 0.8,\n      totalUptime: 0,\n      lastActivity: new Date(),\n      responseTime: 0,\n    };\n  }\n\n  private createDefaultHealth(agentId: string): AgentHealth {\n    return {\n      agentId,\n      overall: 1.0,\n      components: {\n        responsiveness: 1.0,\n        performance: 1.0,\n        reliability: 1.0,\n        resourceUsage: 1.0,\n      },\n      issues: [],\n      lastCheck: new Date(),\n      trend: 'stable',\n    };\n  }\n\n  private removeAgentFromPoolsAndClusters(agentId: string): void {\n    // Remove from pools\n    for (const pool of Array.from(this.pools.values())) {\n      pool.availableAgents = pool.availableAgents.filter((a) => a.id !== agentId);\n      pool.busyAgents = pool.busyAgents.filter((a) => a.id !== agentId);\n      pool.currentSize = pool.availableAgents.length + pool.busyAgents.length;\n    }\n\n    // Remove from clusters\n    for (const cluster of Array.from(this.clusters.values())) {\n      cluster.agents = cluster.agents.filter((a) => a.id !== agentId);\n    }\n  }\n\n  private initializeScalingPolicies(): void {\n    // Default auto-scaling policy\n    const defaultPolicy: ScalingPolicy = {\n      name: 'default-autoscale',\n      enabled: true,\n      cooldownPeriod: 300000, // 5 minutes\n      maxScaleOperations: 10,\n      rules: [\n        {\n          metric: 'pool-utilization',\n          threshold: 0.8,\n          comparison: 'gt',\n          action: 'scale-up',\n          amount: 1,\n        },\n        {\n          metric: 'pool-utilization',\n          threshold: 0.3,\n          comparison: 'lt',\n          action: 'scale-down',\n          amount: 1,\n        },\n      ],\n    };\n\n    this.scalingPolicies.set('default', defaultPolicy);\n  }\n\n  // === PUBLIC API ===\n\n  getAgent(agentId: string): AgentState | undefined {\n    return this.agents.get(agentId);\n  }\n\n  getAllAgents(): AgentState[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgentsByType(type: AgentType): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.type === type);\n  }\n\n  getAgentsByStatus(status: AgentStatus): AgentState[] {\n    return Array.from(this.agents.values()).filter((agent) => agent.status === status);\n  }\n\n  getAgentHealth(agentId: string): AgentHealth | undefined {\n    return this.healthChecks.get(agentId);\n  }\n\n  getPool(poolId: string): AgentPool | undefined {\n    return this.pools.get(poolId);\n  }\n\n  getAllPools(): AgentPool[] {\n    return Array.from(this.pools.values());\n  }\n\n  getAgentTemplates(): AgentTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  getSystemStats(): {\n    totalAgents: number;\n    activeAgents: number;\n    healthyAgents: number;\n    pools: number;\n    clusters: number;\n    averageHealth: number;\n    resourceUtilization: { cpu: number; memory: number; disk: number };\n  } {\n    const agents = Array.from(this.agents.values());\n    const healthChecks = Array.from(this.healthChecks.values());\n\n    const healthyAgents = healthChecks.filter((h) => h.overall > 0.7).length;\n    const averageHealth =\n      healthChecks.reduce((sum, h) => sum + h.overall, 0) / healthChecks.length || 1;\n\n    const resourceUsages = Array.from(this.resourceUsage.values());\n    const avgCpu = resourceUsages.reduce((sum, r) => sum + r.cpu, 0) / resourceUsages.length || 0;\n    const avgMemory =\n      resourceUsages.reduce((sum, r) => sum + r.memory, 0) / resourceUsages.length || 0;\n    const avgDisk = resourceUsages.reduce((sum, r) => sum + r.disk, 0) / resourceUsages.length || 0;\n\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === 'idle' || a.status === 'busy').length,\n      healthyAgents,\n      pools: this.pools.size,\n      clusters: this.clusters.size,\n      averageHealth,\n      resourceUtilization: {\n        cpu: avgCpu,\n        memory: avgMemory,\n        disk: avgDisk,\n      },\n    };\n  }\n}\n"],"names":["EventEmitter","spawn","generateId","AgentManager","logger","eventBus","memory","config","agents","Map","processes","templates","clusters","pools","healthChecks","healthInterval","heartbeatInterval","scalingPolicies","scalingOperations","resourceUsage","performanceHistory","maxAgents","defaultTimeout","healthCheckInterval","autoRestart","resourceLimits","cpu","disk","agentDefaults","autonomyLevel","learningEnabled","adaptationEnabled","environmentDefaults","runtime","workingDirectory","tempDirectory","logDirectory","setupEventHandlers","initializeDefaultTemplates","on","data","heartbeatData","handleHeartbeat","errorData","handleAgentError","taskData","updateAgentWorkload","agentId","completedData","metrics","updateAgentMetrics","resourceData","updateResourceUsage","usage","set","name","type","capabilities","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","maxExecutionTime","reliability","speed","quality","maxTasksPerHour","timeoutThreshold","reportingInterval","permissions","trustedAgents","expertise","preferences","verbose","detailed","environment","version","apiEndpoints","credentials","availableTools","toolConfigs","startupScript","coding","debugging","codeStyle","testFramework","initializeSpecializedTemplates","visualization","statistics","outputFormat","includeCharts","requirements","format","style","architecture","design","modeling","diagramFormat","detailLevel","planning","optimization","granularity","scalability","performance","scope","focusArea","automation","coverage","security","focus","governance","tone","initialize","info","size","startHealthMonitoring","startHeartbeatMonitoring","initializeScalingPolicies","emit","shutdown","clearInterval","shutdownPromises","Array","from","keys","map","stopAgent","Promise","all","createAgent","templateName","overrides","Error","template","get","swarmId","agent","id","instance","slice","status","createDefaultMetrics","workload","health","endpoints","lastHeartbeat","Date","taskHistory","errorHistory","childAgents","collaborators","createDefaultHealth","store","tags","partition","startAgent","updateAgentStatus","process","spawnAgentProcess","waitForAgentReady","error","errorMessage","message","String","addAgentError","timestamp","context","severity","resolved","reason","killed","kill","setTimeout","waitForProcessExit","delete","restartAgent","removeAgent","removeAgentFromPoolsAndClusters","deleteEntry","createAgentPool","poolId","pool","minSize","maxSize","currentSize","availableAgents","busyAgents","autoScale","scaleUpThreshold","scaleDownThreshold","i","push","scalePool","targetSize","delta","agentsToRemove","Math","abs","filter","a","fromSize","toSize","setInterval","performHealthChecks","interval","checkHeartbeats","healthPromises","checkAgentHealth","allSettled","now","responsiveness","checkResponsiveness","components","calculatePerformanceScore","calculateReliabilityScore","resourceScore","calculateResourceScore","overall","lastCheck","detectHealthIssues","warn","timeSinceHeartbeat","getTime","history","length","recent","avgTime","reduce","sum","entry","averageExecutionTime","expectedTime","max","min","totalTasks","tasksCompleted","tasksFailed","limits","memoryScore","cpuScore","diskScore","issues","recommendedAction","timeout","entries","catch","env","AGENT_ID","AGENT_TYPE","AGENT_NAME","WORKING_DIR","LOG_DIR","args","JSON","stringify","childProcess","stdio","cwd","code","handleProcessExit","handleProcessError","resolve","reject","timer","handler","readyData","clearTimeout","off","exitCode","toString","oldStatus","to","shift","successRate","cpuUsage","memoryUsage","diskUsage","networkUsage","codeQuality","testCoverage","bugRate","userSatisfaction","totalUptime","lastActivity","responseTime","trend","values","cluster","defaultPolicy","enabled","cooldownPeriod","maxScaleOperations","rules","metric","threshold","comparison","action","amount","getAgent","getAllAgents","getAgentsByType","getAgentsByStatus","getAgentHealth","getPool","getAllPools","getAgentTemplates","getSystemStats","healthyAgents","h","averageHealth","resourceUsages","avgCpu","r","avgMemory","avgDisk","totalAgents","activeAgents","resourceUtilization"],"mappings":"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"}