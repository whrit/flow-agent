{"version":3,"sources":["../../../src/swarm/prompt-cli.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from '../commander-fix.js';\nimport * as path from 'path';\nimport { copyPrompts, copyPromptsEnhanced } from './prompt-copier-enhanced.js';\nimport {\n  PromptConfigManager,\n  PromptPathResolver,\n  PromptValidator,\n  createProgressBar,\n  formatFileSize,\n  formatDuration,\n} from './prompt-utils.js';\nimport { logger } from '../core/logger.js';\n\nconst program = new Command();\n\nprogram\n  .name('prompt-copier')\n  .description('Robust prompt copying mechanism for Claude-Flow')\n  .version('1.0.0');\n\nprogram\n  .command('copy')\n  .description('Copy prompts from source to destination')\n  .option('-s, --source <path>', 'Source directory')\n  .option('-d, --destination <path>', 'Destination directory')\n  .option('-p, --profile <name>', 'Configuration profile to use')\n  .option('--no-backup', 'Disable backup creation')\n  .option('--no-verify', 'Disable file verification')\n  .option('--no-parallel', 'Disable parallel processing')\n  .option('--workers <number>', 'Number of worker threads', parseInt)\n  .option(\n    '--conflict <strategy>',\n    'Conflict resolution strategy',\n    /^(skip|overwrite|backup|merge)$/,\n  )\n  .option('--include <patterns>', 'Include patterns (comma-separated)')\n  .option('--exclude <patterns>', 'Exclude patterns (comma-separated)')\n  .option('--dry-run', 'Show what would be copied without actually copying')\n  .option('--enhanced', 'Use enhanced copier with worker threads')\n  .action(async (options) => {\n    try {\n      const configManager = new PromptConfigManager();\n      const config = await configManager.loadConfig();\n\n      let copyOptions;\n\n      if (options.profile) {\n        const profileOptions = configManager.getProfile(options.profile);\n        copyOptions = {\n          source: options.source || config.sourceDirectories[0],\n          destination: options.destination || config.destinationDirectory,\n          ...profileOptions,\n        };\n      } else {\n        copyOptions = {\n          source: options.source || config.sourceDirectories[0],\n          destination: options.destination || config.destinationDirectory,\n          backup: options.backup,\n          verify: options.verify,\n          parallel: options.parallel,\n          maxWorkers: options.workers || config.defaultOptions.maxWorkers,\n          conflictResolution: options.conflict || config.defaultOptions.conflictResolution,\n          includePatterns: options.include\n            ? options.include.split(',')\n            : config.defaultOptions.includePatterns,\n          excludePatterns: options.exclude\n            ? options.exclude.split(',')\n            : config.defaultOptions.excludePatterns,\n          dryRun: options.dryRun,\n        };\n      }\n\n      // Create progress bar\n      let progressBar: ReturnType<typeof createProgressBar> | null = null;\n\n      copyOptions.progressCallback = (progress) => {\n        if (!progressBar) {\n          progressBar = createProgressBar(progress.total);\n        }\n        progressBar.update(progress.completed);\n\n        if (progress.completed === progress.total) {\n          progressBar.complete();\n        }\n      };\n\n      console.log('Starting prompt copy operation...');\n      console.log(`Source: ${copyOptions.source}`);\n      console.log(`Destination: ${copyOptions.destination}`);\n      console.log(`Options: ${JSON.stringify(copyOptions, null, 2)}`);\n\n      const copyFunction = options.enhanced ? copyPromptsEnhanced : copyPrompts;\n      const result = await copyFunction(copyOptions);\n\n      console.log('\\n=== Copy Results ===');\n      console.log(`Success: ${result.success ? '‚úÖ' : '‚ùå'}`);\n      console.log(`Total files: ${result.totalFiles}`);\n      console.log(`Copied: ${result.copiedFiles}`);\n      console.log(`Failed: ${result.failedFiles}`);\n      console.log(`Skipped: ${result.skippedFiles}`);\n      console.log(`Duration: ${formatDuration(result.duration)}`);\n\n      if (result.backupLocation) {\n        console.log(`Backup manifest: ${result.backupLocation}`);\n      }\n\n      if (result.errors.length > 0) {\n        console.log('\\n=== Errors ===');\n        result.errors.forEach((error) => {\n          console.log(`‚ùå ${error.file}: ${error.error} (${error.phase})`);\n        });\n      }\n    } catch (error) {\n      console.error('Copy operation failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('discover')\n  .description('Discover prompt directories in the current project')\n  .option('-b, --base <path>', 'Base path to search from', process.cwd())\n  .action(async (options) => {\n    try {\n      const resolver = new PromptPathResolver(options.base);\n      const directories = await resolver.discoverPromptDirectories();\n\n      console.log('Discovered prompt directories:');\n      directories.forEach((dir) => {\n        console.log(`  üìÅ ${dir}`);\n      });\n\n      if (directories.length === 0) {\n        console.log('  No prompt directories found');\n      }\n    } catch (error) {\n      console.error('Discovery failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('validate <path>')\n  .description('Validate prompt files')\n  .option('--recursive', 'Validate recursively')\n  .action(async (filePath, options) => {\n    try {\n      const stats = await require('fs').promises.stat(filePath);\n      const files: string[] = [];\n\n      if (stats.isFile()) {\n        files.push(filePath);\n      } else if (stats.isDirectory()) {\n        // Scan directory for prompt files\n        const scanDir = async (dir: string) => {\n          const entries = await require('fs').promises.readdir(dir, { withFileTypes: true });\n\n          for (const entry of entries) {\n            const fullPath = path.join(dir, entry.name);\n\n            if (\n              entry.isFile() &&\n              (entry.name.endsWith('.md') ||\n                entry.name.endsWith('.txt') ||\n                entry.name.endsWith('.prompt'))\n            ) {\n              files.push(fullPath);\n            } else if (entry.isDirectory() && options.recursive) {\n              await scanDir(fullPath);\n            }\n          }\n        };\n\n        await scanDir(filePath);\n      }\n\n      console.log(`Validating ${files.length} files...`);\n\n      let validFiles = 0;\n      let invalidFiles = 0;\n\n      for (const file of files) {\n        const result = await PromptValidator.validatePromptFile(file);\n\n        if (result.valid) {\n          validFiles++;\n          console.log(`‚úÖ ${file}`);\n        } else {\n          invalidFiles++;\n          console.log(`‚ùå ${file}`);\n          result.issues.forEach((issue) => {\n            console.log(`   - ${issue}`);\n          });\n        }\n\n        if (result.metadata && Object.keys(result.metadata).length > 0) {\n          console.log(`   Metadata: ${JSON.stringify(result.metadata)}`);\n        }\n      }\n\n      console.log(`\\nValidation complete: ${validFiles} valid, ${invalidFiles} invalid`);\n    } catch (error) {\n      console.error('Validation failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('config')\n  .description('Manage configuration')\n  .option('--init', 'Initialize default configuration')\n  .option('--show', 'Show current configuration')\n  .option('--profiles', 'List available profiles')\n  .action(async (options) => {\n    try {\n      const configManager = new PromptConfigManager();\n\n      if (options.init) {\n        await configManager.saveConfig();\n        console.log('‚úÖ Configuration initialized');\n      } else if (options.show) {\n        const config = await configManager.loadConfig();\n        console.log(JSON.stringify(config, null, 2));\n      } else if (options.profiles) {\n        const config = await configManager.loadConfig();\n        const profiles = configManager.listProfiles();\n\n        console.log('Available profiles:');\n        profiles.forEach((profile) => {\n          console.log(`  üìã ${profile}`);\n          const profileOptions = configManager.getProfile(profile);\n          Object.entries(profileOptions).forEach(([key, value]) => {\n            console.log(`     ${key}: ${JSON.stringify(value)}`);\n          });\n        });\n      } else {\n        console.log('Use --init, --show, or --profiles');\n      }\n    } catch (error) {\n      console.error('Configuration operation failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('rollback <manifest>')\n  .description('Rollback from backup')\n  .action(async (manifestPath) => {\n    try {\n      const { PromptCopier } = await import('./prompt-copier.js');\n      const copier = new PromptCopier({\n        source: '',\n        destination: '',\n      });\n\n      await copier.restoreFromBackup(manifestPath);\n      console.log('‚úÖ Rollback completed');\n    } catch (error) {\n      console.error('Rollback failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('sync')\n  .description('Synchronize prompts between directories')\n  .option('-s, --source <path>', 'Source directory')\n  .option('-d, --destination <path>', 'Destination directory')\n  .option('--bidirectional', 'Enable bidirectional sync')\n  .option('--delete', 'Delete files not present in source')\n  .action(async (options) => {\n    try {\n      // This would implement incremental sync functionality\n      console.log('Sync functionality not yet implemented');\n      console.log('Options:', options);\n    } catch (error) {\n      console.error('Sync failed:', error);\n      process.exit(1);\n    }\n  });\n\n// Handle uncaught errors\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught exception:', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason) => {\n  console.error('Unhandled rejection:', reason);\n  process.exit(1);\n});\n\nif (require.main === module) {\n  program.parse();\n}\n\nexport { program };\n"],"names":["Command","path","copyPrompts","copyPromptsEnhanced","PromptConfigManager","PromptPathResolver","PromptValidator","createProgressBar","formatDuration","program","name","description","version","command","option","parseInt","action","options","configManager","config","loadConfig","copyOptions","profile","profileOptions","getProfile","source","sourceDirectories","destination","destinationDirectory","backup","verify","parallel","maxWorkers","workers","defaultOptions","conflictResolution","conflict","includePatterns","include","split","excludePatterns","exclude","dryRun","progressBar","progressCallback","progress","total","update","completed","complete","console","log","JSON","stringify","copyFunction","enhanced","result","success","totalFiles","copiedFiles","failedFiles","skippedFiles","duration","backupLocation","errors","length","forEach","error","file","phase","process","exit","cwd","resolver","base","directories","discoverPromptDirectories","dir","filePath","stats","require","promises","stat","files","isFile","push","isDirectory","scanDir","entries","readdir","withFileTypes","entry","fullPath","join","endsWith","recursive","validFiles","invalidFiles","validatePromptFile","valid","issues","issue","metadata","Object","keys","init","saveConfig","show","profiles","listProfiles","key","value","manifestPath","PromptCopier","copier","restoreFromBackup","on","reason","main","module","parse"],"mappings":"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"}