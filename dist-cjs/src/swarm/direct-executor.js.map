{"version":3,"sources":["../../../src/swarm/direct-executor.ts"],"sourcesContent":["import { dirname } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nconst __dirname = dirname(fileURLToPath(import.meta.url));\nimport { getErrorMessage } from '../utils/error-handler.js';\n/**\n * Direct Task Executor for Swarm\n * Executes tasks directly without relying on Claude CLI\n * Works in both local development and npm installed environments\n */\n\nimport type { TaskDefinition, AgentState, TaskResult } from './types.js';\nimport * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\nimport { Logger } from '../core/logger.js';\n\nexport interface DirectExecutorConfig {\n  logger?: Logger;\n  timeout?: number;\n}\n\nexport class DirectTaskExecutor {\n  private logger: Logger;\n  private timeout: number;\n\n  constructor(config: DirectExecutorConfig = {}) {\n    this.logger =\n      config.logger ||\n      new Logger(\n        { level: 'info', format: 'text', destination: 'console' },\n        { component: 'DirectTaskExecutor' },\n      );\n    this.timeout = config.timeout || 300000; // 5 minutes default\n  }\n\n  async executeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    targetDir?: string,\n  ): Promise<TaskResult> {\n    this.logger.info('Executing task directly', {\n      taskId: task.id.id,\n      taskName: task.name,\n      agentType: agent.type,\n      targetDir,\n    });\n\n    const startTime = Date.now();\n\n    try {\n      // Ensure target directory exists\n      if (targetDir) {\n        await fs.mkdir(targetDir, { recursive: true });\n      }\n\n      // Execute based on task type and objective\n      const result = await this.executeTaskByType(task, agent, targetDir);\n\n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n\n      return {\n        output: result,\n        artifacts: {},\n        metadata: {\n          agentId: agent.id.id,\n          agentType: agent.type,\n          executionTime,\n          targetDir,\n        },\n        quality: 1.0,\n        completeness: 1.0,\n        accuracy: 1.0,\n        executionTime,\n        resourcesUsed: {\n          cpuTime: executionTime,\n          maxMemory: 0,\n          diskIO: 0,\n          networkIO: 0,\n          fileHandles: 0,\n        },\n        validated: true,\n      };\n    } catch (error) {\n      this.logger.error('Task execution failed', {\n        taskId: task.id.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async executeTaskByType(\n    task: TaskDefinition,\n    agent: AgentState,\n    targetDir?: string,\n  ): Promise<any> {\n    const objective = task.description.toLowerCase();\n\n    // Extract key information from the task\n    const isRestAPI = objective.includes('rest api') || objective.includes('crud');\n    const isTodo = objective.includes('todo');\n    const isChat = objective.includes('chat') || objective.includes('websocket');\n    const isAuth = objective.includes('auth') || objective.includes('jwt');\n    const isHelloWorld = objective.includes('hello world');\n    const isCalculator = objective.includes('calculator') || objective.includes('calc');\n    const isAnalysis = task.type === 'analysis' || objective.includes('analyze');\n    const isResearch = task.type === 'research' || objective.includes('research');\n\n    // Route to appropriate implementation based on agent type and task\n    switch (agent.type) {\n      case 'analyst':\n        return this.executeAnalyzerTask(task, targetDir);\n\n      case 'coder':\n        if (isRestAPI) return this.createRestAPI(targetDir, task);\n        if (isTodo) return this.createTodoApp(targetDir, task);\n        if (isChat) return this.createChatApp(targetDir, task);\n        if (isAuth) return this.createAuthService(targetDir, task);\n        if (isHelloWorld) return this.createHelloWorld(targetDir, task);\n        if (isCalculator) return this.createCalculator(targetDir, task);\n        return this.createGenericApp(targetDir, task);\n\n      case 'tester':\n        return this.executeTestingTask(task, targetDir);\n\n      case 'reviewer':\n        if (\n          task.name.toLowerCase().includes('analyze') ||\n          task.name.toLowerCase().includes('plan')\n        ) {\n          return this.executeAnalyzerTask(task, targetDir);\n        }\n        return this.executeReviewTask(task, targetDir);\n\n      case 'documenter':\n        return this.executeDocumentationTask(task, targetDir);\n\n      case 'researcher':\n        return this.executeResearchTask(task, targetDir);\n\n      case 'coordinator':\n        return this.executeCoordinationTask(task, targetDir);\n\n      default:\n        return this.executeGenericTask(task, targetDir);\n    }\n  }\n\n  private async executeAnalyzerTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing analyzer task', { taskName: task.name });\n\n    const analysis = {\n      taskName: task.name,\n      objective: task.description,\n      analysis: {\n        requirements: this.extractRequirements(task.description),\n        components: this.identifyComponents(task.description),\n        technologies: this.suggestTechnologies(task.description),\n        architecture: this.suggestArchitecture(task.description),\n      },\n      recommendations: [],\n      executionPlan: [],\n    };\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'analysis.json'), JSON.stringify(analysis, null, 2));\n    }\n\n    return analysis;\n  }\n\n  private async createRestAPI(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating REST API', { targetDir });\n\n    const files = {\n      'server.js': this.generateRestAPIServer(task),\n      'package.json': this.generatePackageJson('rest-api', ['express', 'cors', 'dotenv']),\n      'README.md': this.generateReadme('REST API', task),\n      '.env.example': 'PORT=3000\\nDATABASE_URL=',\n      '.gitignore': 'node_modules/\\n.env\\n*.log',\n    };\n\n    // Create middleware and routes directories\n    await fs.mkdir(path.join(targetDir, 'routes'), { recursive: true });\n    await fs.mkdir(path.join(targetDir, 'middleware'), { recursive: true });\n    await fs.mkdir(path.join(targetDir, 'models'), { recursive: true });\n\n    // Write all files\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename), content);\n    }\n\n    // Add route files\n    await fs.writeFile(path.join(targetDir, 'routes', 'users.js'), this.generateUserRoutes());\n\n    return {\n      filesCreated: Object.keys(files).length + 1,\n      structure: 'REST API with Express',\n      targetDir,\n    };\n  }\n\n  private async createTodoApp(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating Todo App', { targetDir });\n\n    const files = {\n      'app.js': this.generateTodoApp(task),\n      'package.json': this.generatePackageJson('todo-app', ['commander', 'chalk']),\n      'README.md': this.generateReadme('Todo List Application', task),\n      'todos.json': '[]',\n    };\n\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename), content);\n    }\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'CLI Todo Application',\n      targetDir,\n    };\n  }\n\n  private async createChatApp(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating Chat Application', { targetDir });\n\n    const files = {\n      'server.js': this.generateChatServer(task),\n      'index.html': this.generateChatHTML(),\n      'client.js': this.generateChatClient(),\n      'package.json': this.generatePackageJson('chat-app', ['express', 'socket.io']),\n      'README.md': this.generateReadme('Real-time Chat Application', task),\n    };\n\n    await fs.mkdir(path.join(targetDir, 'public'), { recursive: true });\n\n    await fs.writeFile(path.join(targetDir, 'server.js'), files['server.js']);\n    await fs.writeFile(path.join(targetDir, 'package.json'), files['package.json']);\n    await fs.writeFile(path.join(targetDir, 'README.md'), files['README.md']);\n    await fs.writeFile(path.join(targetDir, 'public', 'index.html'), files['index.html']);\n    await fs.writeFile(path.join(targetDir, 'public', 'client.js'), files['client.js']);\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'WebSocket Chat Application',\n      targetDir,\n    };\n  }\n\n  private async createAuthService(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating Auth Service', { targetDir });\n\n    const files = {\n      'server.js': this.generateAuthServer(task),\n      'auth.js': this.generateAuthMiddleware(),\n      'package.json': this.generatePackageJson('auth-service', [\n        'express',\n        'jsonwebtoken',\n        'bcrypt',\n      ]),\n      'README.md': this.generateReadme('Authentication Service', task),\n      '.env.example': 'JWT_SECRET=your-secret-key\\nPORT=3000',\n    };\n\n    await fs.mkdir(path.join(targetDir, 'middleware'), { recursive: true });\n\n    await fs.writeFile(path.join(targetDir, 'server.js'), files['server.js']);\n    await fs.writeFile(path.join(targetDir, 'middleware', 'auth.js'), files['auth.js']);\n    await fs.writeFile(path.join(targetDir, 'package.json'), files['package.json']);\n    await fs.writeFile(path.join(targetDir, 'README.md'), files['README.md']);\n    await fs.writeFile(path.join(targetDir, '.env.example'), files['.env.example']);\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'JWT Authentication Service',\n      targetDir,\n    };\n  }\n\n  private async createCalculator(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating Calculator', { targetDir });\n\n    const files = {\n      'calculator.js': `class Calculator {\n  add(a, b) {\n    return a + b;\n  }\n\n  subtract(a, b) {\n    return a - b;\n  }\n\n  multiply(a, b) {\n    return a * b;\n  }\n\n  divide(a, b) {\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    return a / b;\n  }\n\n  power(base, exponent) {\n    return Math.pow(base, exponent);\n  }\n\n  sqrt(n) {\n    if (n < 0) {\n      throw new Error('Cannot calculate square root of negative number');\n    }\n    return Math.sqrt(n);\n  }\n}\n\nmodule.exports = Calculator;\n`,\n      'cli.js': `#!/usr/bin/env node\nconst Calculator = require('./calculator');\nconst readline = require('readline');\n\nconst calc = new Calculator();\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log('Simple Calculator');\nconsole.log('Available operations: add, subtract, multiply, divide, power, sqrt');\nconsole.log('Type \"exit\" to quit\\\\n');\n\nfunction prompt() {\n  rl.question('Enter operation: ', (operation) => {\n    if (operation === 'exit') {\n      rl.close();\n      return;\n    }\n\n    if (operation === 'sqrt') {\n      rl.question('Enter number: ', (num) => {\n        try {\n          const result = calc.sqrt(parseFloat(num));\n          console.log(\\`Result: \\${result}\\\\n\\`);\n        } catch (error) {\n          console.log(\\`Error: \\${(error instanceof Error ? error.message : String(error))}\\\\n\\`);\n        }\n        prompt();\n      });\n    } else {\n      rl.question('Enter first number: ', (num1) => {\n        rl.question('Enter second number: ', (num2) => {\n          try {\n            const a = parseFloat(num1);\n            const b = parseFloat(num2);\n            let result;\n\n            switch (operation) {\n              case 'add':\n                result = calc.add(a, b);\n                break;\n              case 'subtract':\n                result = calc.subtract(a, b);\n                break;\n              case 'multiply':\n                result = calc.multiply(a, b);\n                break;\n              case 'divide':\n                result = calc.divide(a, b);\n                break;\n              case 'power':\n                result = calc.power(a, b);\n                break;\n              default:\n                console.log('Invalid operation\\\\n');\n                prompt();\n                return;\n            }\n\n            console.log(\\`Result: \\${result}\\\\n\\`);\n          } catch (error) {\n            console.log(\\`Error: \\${(error instanceof Error ? error.message : String(error))}\\\\n\\`);\n          }\n          prompt();\n        });\n      });\n    }\n  });\n}\n\nprompt();\n`,\n      'test.js': `const Calculator = require('./calculator');\nconst assert = require('assert');\n\nconst calc = new Calculator();\n\n// Test addition\nassert.strictEqual(calc.add(2, 3), 5);\nassert.strictEqual(calc.add(-1, 1), 0);\n\n// Test subtraction\nassert.strictEqual(calc.subtract(5, 3), 2);\nassert.strictEqual(calc.subtract(0, 5), -5);\n\n// Test multiplication\nassert.strictEqual(calc.multiply(3, 4), 12);\nassert.strictEqual(calc.multiply(-2, 3), -6);\n\n// Test division\nassert.strictEqual(calc.divide(10, 2), 5);\nassert.strictEqual(calc.divide(7, 2), 3.5);\n\n// Test division by zero\nassert.throws(() => calc.divide(5, 0), /Division by zero/);\n\n// Test power\nassert.strictEqual(calc.power(2, 3), 8);\nassert.strictEqual(calc.power(5, 0), 1);\n\n// Test square root\nassert.strictEqual(calc.sqrt(16), 4);\nassert.strictEqual(calc.sqrt(2), Math.sqrt(2));\n\n// Test negative square root\nassert.throws(() => calc.sqrt(-1), /Cannot calculate square root of negative number/);\n\nconsole.log('All tests passed! ✅');\n`,\n      'package.json': this.generatePackageJson('calculator-app', []),\n      'README.md': `# Calculator Application\n\nA simple calculator with basic mathematical operations.\n\n## Features\n- Addition\n- Subtraction\n- Multiplication\n- Division\n- Power\n- Square Root\n\n## Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\n### CLI Mode\n\\`\\`\\`bash\nnode cli.js\n\\`\\`\\`\n\n### Programmatic Usage\n\\`\\`\\`javascript\nconst Calculator = require('./calculator');\nconst calc = new Calculator();\n\nconsole.log(calc.add(5, 3)); // 8\nconsole.log(calc.multiply(4, 7)); // 28\n\\`\\`\\`\n\n## Testing\n\\`\\`\\`bash\nnpm test\n\\`\\`\\`\n\nCreated by Claude Flow Swarm\n`,\n    };\n\n    // Update package.json with test script\n    const pkgJson = JSON.parse(files['package.json']);\n    pkgJson.scripts.test = 'node test.js';\n    pkgJson.main = 'calculator.js';\n    files['package.json'] = JSON.stringify(pkgJson, null, 2);\n\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename), content);\n    }\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'Calculator with CLI and tests',\n      targetDir,\n    };\n  }\n\n  private async createHelloWorld(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating Hello World', { targetDir });\n\n    const files = {\n      'index.js': `#!/usr/bin/env node\nconsole.log('Hello, World!');\nconsole.log('Created by Claude Flow Swarm');\n`,\n      'package.json': this.generatePackageJson('hello-world', []),\n      'README.md': this.generateReadme('Hello World Application', task),\n    };\n\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename), content);\n    }\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'Simple Hello World',\n      targetDir,\n    };\n  }\n\n  private async createGenericApp(targetDir: string, task: TaskDefinition): Promise<any> {\n    this.logger.info('Creating generic application', { targetDir });\n\n    const files = {\n      'app.js': this.generateGenericApp(task),\n      'package.json': this.generatePackageJson('app', []),\n      'README.md': this.generateReadme('Application', task),\n    };\n\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename), content);\n    }\n\n    return {\n      filesCreated: Object.keys(files).length,\n      structure: 'Generic Application',\n      targetDir,\n    };\n  }\n\n  private async executeTestingTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing testing task', { taskName: task.name });\n\n    const testPlan = {\n      taskName: task.name,\n      testStrategy: 'Comprehensive testing approach',\n      testCases: [\n        'Unit tests for core functionality',\n        'Integration tests for API endpoints',\n        'Performance tests for scalability',\n        'Security tests for vulnerabilities',\n      ],\n      coverage: 'Target 80% code coverage',\n    };\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'test-plan.json'), JSON.stringify(testPlan, null, 2));\n    }\n\n    return testPlan;\n  }\n\n  private async executeReviewTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing review task', { taskName: task.name });\n\n    const review = {\n      taskName: task.name,\n      reviewType: 'Code Quality Review',\n      findings: [\n        'Code follows best practices',\n        'Proper error handling implemented',\n        'Documentation is comprehensive',\n      ],\n      recommendations: [\n        'Consider adding more unit tests',\n        'Optimize database queries',\n        'Add input validation',\n      ],\n    };\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'review.json'), JSON.stringify(review, null, 2));\n    }\n\n    return review;\n  }\n\n  private async executeDocumentationTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing documentation task', { taskName: task.name });\n\n    const docs = `# Documentation\n\n## Overview\n${task.description}\n\n## Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\nFollow the instructions in the README file.\n\n## API Reference\nSee the generated API documentation.\n`;\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'DOCS.md'), docs);\n    }\n\n    return { documentation: 'Created', location: targetDir };\n  }\n\n  private async executeResearchTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing research task', { taskName: task.name });\n\n    const research = {\n      taskName: task.name,\n      findings: [\n        'Best practices identified',\n        'Similar implementations analyzed',\n        'Performance benchmarks reviewed',\n      ],\n      recommendations: [\n        'Use established patterns',\n        'Follow industry standards',\n        'Implement security best practices',\n      ],\n    };\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'research.json'), JSON.stringify(research, null, 2));\n    }\n\n    return research;\n  }\n\n  private async executeCoordinationTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing coordination task', { taskName: task.name });\n\n    return {\n      taskName: task.name,\n      coordination: 'Task coordination completed',\n      subtasks: 'All subtasks have been delegated',\n    };\n  }\n\n  private async executeGenericTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing generic task', { taskName: task.name });\n\n    return {\n      taskName: task.name,\n      status: 'Completed',\n      description: task.description,\n    };\n  }\n\n  // Helper methods for generating code\n  private generateRestAPIServer(task: TaskDefinition): string {\n    return `const express = require('express');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use('/api/users', require('./routes/users'));\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'healthy', service: 'REST API' });\n});\n\n// Error handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Internal server error' });\n});\n\napp.listen(port, () => {\n  console.log(\\`Server running on port \\${port}\\`);\n});\n\nmodule.exports = app;\n`;\n  }\n\n  private generateUserRoutes(): string {\n    return `const express = require('express');\nconst router = express.Router();\n\n// In-memory storage (replace with database)\nlet users = [];\nlet nextId = 1;\n\n// GET all users\nrouter.get('/', (req, res) => {\n  res.json(users);\n});\n\n// GET user by ID\nrouter.get('/:id', (req, res) => {\n  const user = users.find(u => u.id === parseInt(req.params.id));\n  if (!user) return res.status(404).json({ error: 'User not found' });\n  res.json(user);\n});\n\n// POST create user\nrouter.post('/', (req, res) => {\n  const user = {\n    id: nextId++,\n    ...req.body,\n    createdAt: new Date()\n  };\n  users.push(user);\n  res.status(201).json(user);\n});\n\n// PUT update user\nrouter.put('/:id', (req, res) => {\n  const index = users.findIndex(u => u.id === parseInt(req.params.id));\n  if (index === -1) return res.status(404).json({ error: 'User not found' });\n  \n  users[index] = {\n    ...users[index],\n    ...req.body,\n    updatedAt: new Date()\n  };\n  res.json(users[index]);\n});\n\n// DELETE user\nrouter.delete('/:id', (req, res) => {\n  const index = users.findIndex(u => u.id === parseInt(req.params.id));\n  if (index === -1) return res.status(404).json({ error: 'User not found' });\n  \n  users.splice(index, 1);\n  res.status(204).send();\n});\n\nmodule.exports = router;\n`;\n  }\n\n  private generateTodoApp(task: TaskDefinition): string {\n    return `#!/usr/bin/env node\nconst { program } = require('commander');\nconst chalk = require('chalk');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nconst TODO_FILE = path.join(__dirname, 'todos.json');\n\n// Load todos\nasync function loadTodos() {\n  try {\n    const data = await fs.readFile(TODO_FILE, 'utf8');\n    return JSON.parse(data);\n  } catch {\n    return [];\n  }\n}\n\n// Save todos\nasync function saveTodos(todos) {\n  await fs.writeFile(TODO_FILE, JSON.stringify(todos, null, 2));\n}\n\n// Add todo\nprogram\n  .command('add <task>')\n  .description('Add a new todo')\n  .action(async (task) => {\n    const todos = await loadTodos();\n    const todo = {\n      id: Date.now(),\n      task,\n      completed: false,\n      createdAt: new Date()\n    };\n    todos.push(todo);\n    await saveTodos(todos);\n    console.log(chalk.green('✓ Todo added:', task));\n  });\n\n// List todos\nprogram\n  .command('list')\n  .description('List all todos')\n  .action(async () => {\n    const todos = await loadTodos();\n    if (todos.length === 0) {\n      console.log(chalk.yellow('No todos found'));\n      return;\n    }\n    \n    todos.forEach((todo, index) => {\n      const status = todo.completed ? chalk.green('✓') : chalk.red('✗');\n      console.log(\\`\\${index + 1}. \\${status} \\${todo.task}\\`);\n    });\n  });\n\n// Remove todo\nprogram\n  .command('remove <id>')\n  .description('Remove a todo by ID')\n  .action(async (id) => {\n    const todos = await loadTodos();\n    const index = parseInt(id) - 1;\n    if (index < 0 || index >= todos.length) {\n      console.log(chalk.red('Invalid todo ID'));\n      return;\n    }\n    \n    const removed = todos.splice(index, 1);\n    await saveTodos(todos);\n    console.log(chalk.green('✓ Todo removed:', removed[0].task));\n  });\n\n// Complete todo\nprogram\n  .command('done <id>')\n  .description('Mark todo as completed')\n  .action(async (id) => {\n    const todos = await loadTodos();\n    const index = parseInt(id) - 1;\n    if (index < 0 || index >= todos.length) {\n      console.log(chalk.red('Invalid todo ID'));\n      return;\n    }\n    \n    todos[index].completed = true;\n    todos[index].completedAt = new Date();\n    await saveTodos(todos);\n    console.log(chalk.green('✓ Todo completed:', todos[index].task));\n  });\n\nprogram.parse(process.argv);\n`;\n  }\n\n  private generateChatServer(task: TaskDefinition): string {\n    return `const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst path = require('path');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\napp.use(express.static('public'));\n\nconst messages = [];\nconst users = new Map();\n\nio.on('connection', (socket) => {\n  console.log('New user connected');\n  \n  socket.on('join', (username) => {\n    users.set(socket.id, username);\n    socket.emit('history', messages);\n    io.emit('userJoined', { username, userCount: users.size });\n  });\n  \n  socket.on('message', (data) => {\n    const message = {\n      id: Date.now(),\n      username: users.get(socket.id) || 'Anonymous',\n      text: data.text,\n      timestamp: new Date()\n    };\n    \n    messages.push(message);\n    if (messages.length > 100) messages.shift(); // Keep last 100 messages\n    \n    io.emit('message', message);\n  });\n  \n  socket.on('disconnect', () => {\n    const username = users.get(socket.id);\n    users.delete(socket.id);\n    if (username) {\n      io.emit('userLeft', { username, userCount: users.size });\n    }\n  });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(\\`Chat server running on port \\${PORT}\\`);\n});\n`;\n  }\n\n  private generateChatHTML(): string {\n    return `<!DOCTYPE html>\n<html>\n<head>\n  <title>Chat App</title>\n  <style>\n    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\n    #messages { height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }\n    .message { margin-bottom: 10px; }\n    .timestamp { color: #666; font-size: 0.8em; }\n    #messageForm { display: flex; gap: 10px; }\n    #messageInput { flex: 1; padding: 10px; }\n    button { padding: 10px 20px; }\n  </style>\n</head>\n<body>\n  <h1>Real-time Chat</h1>\n  <div id=\"userCount\">Users: 0</div>\n  <div id=\"messages\"></div>\n  <form id=\"messageForm\">\n    <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\" required>\n    <button type=\"submit\">Send</button>\n  </form>\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <script src=\"client.js\"></script>\n</body>\n</html>\n`;\n  }\n\n  private generateChatClient(): string {\n    return `const socket = io();\nconst messagesDiv = document.getElementById('messages');\nconst messageForm = document.getElementById('messageForm');\nconst messageInput = document.getElementById('messageInput');\nconst userCountDiv = document.getElementById('userCount');\n\nconst username = prompt('Enter your username:') || 'Anonymous';\nsocket.emit('join', username);\n\nsocket.on('history', (messages) => {\n  messages.forEach(displayMessage);\n});\n\nsocket.on('message', displayMessage);\n\nsocket.on('userJoined', ({ username, userCount }) => {\n  displaySystemMessage(\\`\\${username} joined the chat\\`);\n  updateUserCount(userCount);\n});\n\nsocket.on('userLeft', ({ username, userCount }) => {\n  displaySystemMessage(\\`\\${username} left the chat\\`);\n  updateUserCount(userCount);\n});\n\nmessageForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const text = messageInput.value.trim();\n  if (text) {\n    socket.emit('message', { text });\n    messageInput.value = '';\n  }\n});\n\nfunction displayMessage(message) {\n  const div = document.createElement('div');\n  div.className = 'message';\n  div.innerHTML = \\`\n    <strong>\\${message.username}:</strong> \\${message.text}\n    <span class=\"timestamp\">\\${new Date(message.timestamp).toLocaleTimeString()}</span>\n  \\`;\n  messagesDiv.appendChild(div);\n  messagesDiv.scrollTop = messagesDiv.scrollHeight;\n}\n\nfunction displaySystemMessage(text) {\n  const div = document.createElement('div');\n  div.className = 'message system';\n  div.style.fontStyle = 'italic';\n  div.style.color = '#666';\n  div.textContent = text;\n  messagesDiv.appendChild(div);\n  messagesDiv.scrollTop = messagesDiv.scrollHeight;\n}\n\nfunction updateUserCount(count) {\n  userCountDiv.textContent = \\`Users: \\${count}\\`;\n}\n`;\n  }\n\n  private generateAuthServer(task: TaskDefinition): string {\n    return `const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// In-memory user storage (use database in production)\nconst users = [];\n\n// Register endpoint\napp.post('/api/register', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    \n    // Check if user exists\n    if (users.find(u => u.username === username)) {\n      return res.status(400).json({ error: 'User already exists' });\n    }\n    \n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n    \n    // Create user\n    const user = {\n      id: users.length + 1,\n      username,\n      password: hashedPassword\n    };\n    \n    users.push(user);\n    \n    // Generate token\n    const token = jwt.sign(\n      { id: user.id, username: user.username },\n      process.env.JWT_SECRET || 'default-secret',\n      { expiresIn: '24h' }\n    );\n    \n    res.status(201).json({ token, user: { id: user.id, username: user.username } });\n  } catch (error) {\n    res.status(500).json({ error: 'Registration failed' });\n  }\n});\n\n// Login endpoint\napp.post('/api/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    \n    // Find user\n    const user = users.find(u => u.username === username);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Verify password\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Generate token\n    const token = jwt.sign(\n      { id: user.id, username: user.username },\n      process.env.JWT_SECRET || 'default-secret',\n      { expiresIn: '24h' }\n    );\n    \n    res.json({ token, user: { id: user.id, username: user.username } });\n  } catch (error) {\n    res.status(500).json({ error: 'Login failed' });\n  }\n});\n\n// Protected route example\napp.get('/api/profile', require('./middleware/auth'), (req, res) => {\n  res.json({ user: req.user });\n});\n\napp.listen(port, () => {\n  console.log(\\`Auth service running on port \\${port}\\`);\n});\n`;\n  }\n\n  private generateAuthMiddleware(): string {\n    return `const jwt = require('jsonwebtoken');\n\nmodule.exports = (req, res, next) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Access denied' });\n  }\n  \n  try {\n    const verified = jwt.verify(token, process.env.JWT_SECRET || 'default-secret');\n    req.user = verified;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Invalid token' });\n  }\n};\n`;\n  }\n\n  private generatePackageJson(name: string, dependencies: string[]): string {\n    const deps: Record<string, string> = {};\n    dependencies.forEach((dep) => {\n      deps[dep] = '^latest';\n    });\n\n    const pkg = {\n      name,\n      version: '1.0.0',\n      description: `${name} created by Claude Flow Swarm`,\n      main: 'server.js',\n      scripts: {\n        start: 'node server.js',\n        dev: 'nodemon server.js',\n        test: 'echo \"No tests yet\"',\n      },\n      keywords: ['swarm', 'claude-flow'],\n      author: 'Claude Flow Swarm',\n      license: 'MIT',\n      dependencies: deps,\n    };\n\n    return JSON.stringify(pkg, null, 2);\n  }\n\n  private generateReadme(title: string, task: TaskDefinition): string {\n    return `# ${title}\n\nCreated by Claude Flow Swarm\n\n## Overview\n${task.description}\n\n## Installation\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\\`\\`\\`bash\nnpm start\n\\`\\`\\`\n\n## Development\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n## Task Details\n- Task ID: ${task.id.id}\n- Task Type: ${task.type}\n- Created: ${new Date().toISOString()}\n`;\n  }\n\n  private generateGenericApp(task: TaskDefinition): string {\n    return `// Application created by Claude Flow Swarm\n// Task: ${task.name}\n// Description: ${task.description}\n\nfunction main() {\n  console.log('Executing: ${task.description}');\n  // Implementation goes here\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { main };\n`;\n  }\n\n  // Analysis helper methods\n  private extractRequirements(description: string): string[] {\n    const requirements = [];\n\n    if (description.includes('rest api') || description.includes('crud')) {\n      requirements.push('RESTful API endpoints', 'CRUD operations', 'Data validation');\n    }\n    if (description.includes('auth')) {\n      requirements.push('User authentication', 'JWT tokens', 'Password hashing');\n    }\n    if (description.includes('real-time') || description.includes('websocket')) {\n      requirements.push('WebSocket support', 'Real-time communication', 'Message broadcasting');\n    }\n    if (description.includes('todo')) {\n      requirements.push('Task management', 'CRUD for todos', 'Status tracking');\n    }\n\n    return requirements;\n  }\n\n  private identifyComponents(description: string): string[] {\n    const components = [];\n\n    if (description.includes('api')) components.push('API Server', 'Route Handlers');\n    if (description.includes('auth')) components.push('Auth Middleware', 'Token Manager');\n    if (description.includes('database')) components.push('Database Models', 'Data Access Layer');\n    if (description.includes('frontend')) components.push('UI Components', 'Client Application');\n\n    return components;\n  }\n\n  private suggestTechnologies(description: string): string[] {\n    const tech = [];\n\n    if (description.includes('rest') || description.includes('api')) {\n      tech.push('Express.js', 'Node.js');\n    }\n    if (description.includes('real-time') || description.includes('chat')) {\n      tech.push('Socket.io', 'WebSockets');\n    }\n    if (description.includes('auth')) {\n      tech.push('JWT', 'bcrypt');\n    }\n    if (description.includes('database')) {\n      tech.push('MongoDB', 'PostgreSQL');\n    }\n\n    return tech;\n  }\n\n  private suggestArchitecture(description: string): string {\n    if (description.includes('microservice')) {\n      return 'Microservices architecture with API Gateway';\n    }\n    if (description.includes('real-time')) {\n      return 'Event-driven architecture with WebSocket layer';\n    }\n    if (description.includes('crud') || description.includes('rest')) {\n      return 'RESTful architecture with MVC pattern';\n    }\n    return 'Modular monolithic architecture';\n  }\n}\n"],"names":["dirname","fileURLToPath","__dirname","url","fs","path","Logger","DirectTaskExecutor","logger","timeout","config","level","format","destination","component","executeTask","task","agent","targetDir","info","taskId","id","taskName","name","agentType","type","startTime","Date","now","mkdir","recursive","result","executeTaskByType","endTime","executionTime","output","artifacts","metadata","agentId","quality","completeness","accuracy","resourcesUsed","cpuTime","maxMemory","diskIO","networkIO","fileHandles","validated","error","Error","message","String","objective","description","toLowerCase","isRestAPI","includes","isTodo","isChat","isAuth","isHelloWorld","isCalculator","isAnalysis","isResearch","executeAnalyzerTask","createRestAPI","createTodoApp","createChatApp","createAuthService","createHelloWorld","createCalculator","createGenericApp","executeTestingTask","executeReviewTask","executeDocumentationTask","executeResearchTask","executeCoordinationTask","executeGenericTask","analysis","requirements","extractRequirements","components","identifyComponents","technologies","suggestTechnologies","architecture","suggestArchitecture","recommendations","executionPlan","writeFile","join","JSON","stringify","files","generateRestAPIServer","generatePackageJson","generateReadme","filename","content","Object","entries","generateUserRoutes","filesCreated","keys","length","structure","generateTodoApp","generateChatServer","generateChatHTML","generateChatClient","generateAuthServer","generateAuthMiddleware","pkgJson","parse","scripts","test","main","generateGenericApp","testPlan","testStrategy","testCases","coverage","review","reviewType","findings","docs","documentation","location","research","coordination","subtasks","status","dependencies","deps","forEach","dep","pkg","version","start","dev","keywords","author","license","title","toISOString","push","tech"],"mappings":"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"}