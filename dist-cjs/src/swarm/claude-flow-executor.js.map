{"version":3,"sources":["../../../src/swarm/claude-flow-executor.ts"],"sourcesContent":["/**\n * Claude Flow SPARC Executor\n * Executes tasks using the full claude-flow SPARC system in non-interactive mode\n */\n\nimport type { TaskDefinition, AgentState, TaskResult } from './types.js';\nimport { Logger } from '../core/logger.js';\nimport * as path from 'node:path';\nimport { spawn } from 'node:child_process';\nimport { getClaudeFlowBin } from '../utils/paths.js';\n\nexport interface ClaudeFlowExecutorConfig {\n  logger?: Logger;\n  claudeFlowPath?: string;\n  enableSparc?: boolean;\n  verbose?: boolean;\n  timeoutMinutes?: number;\n}\n\nexport class ClaudeFlowExecutor {\n  private logger: Logger;\n  private claudeFlowPath: string;\n  private enableSparc: boolean;\n  private verbose: boolean;\n  private timeoutMinutes: number;\n\n  constructor(config: ClaudeFlowExecutorConfig = {}) {\n    this.logger =\n      config.logger ||\n      new Logger(\n        { level: 'info', format: 'text', destination: 'console' },\n        { component: 'ClaudeFlowExecutor' },\n      );\n    this.claudeFlowPath = config.claudeFlowPath || getClaudeFlowBin();\n    this.enableSparc = config.enableSparc ?? true;\n    this.verbose = config.verbose ?? false;\n    this.timeoutMinutes = config.timeoutMinutes ?? 59;\n  }\n\n  async executeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    targetDir?: string,\n  ): Promise<TaskResult> {\n    this.logger.info('Executing task with Claude Flow SPARC', {\n      taskId: task.id.id,\n      taskName: task.name,\n      agentType: agent.type,\n      targetDir,\n    });\n\n    const startTime = Date.now();\n\n    try {\n      // Determine the SPARC mode based on task type and agent type\n      const sparcMode = this.determineSparcMode(task, agent);\n\n      // Build the command\n      const command = this.buildSparcCommand(task, sparcMode, targetDir);\n\n      this.logger.info('Executing SPARC command', {\n        mode: sparcMode,\n        command: command.join(' '),\n      });\n\n      // Execute the command\n      const result = await this.executeCommand(command);\n\n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n\n      return {\n        output: result.output,\n        artifacts: result.artifacts || {},\n        metadata: {\n          executionTime,\n          sparcMode,\n          command: command.join(' '),\n          exitCode: result.exitCode,\n          quality: 0.95,\n          completeness: 0.9,\n        },\n        error: result.error,\n      };\n    } catch (error) {\n      this.logger.error('Failed to execute Claude Flow SPARC command', {\n        error: error instanceof Error ? error.message : String(error),\n        taskId: task.id.id,\n      });\n\n      return {\n        output: '',\n        artifacts: {},\n        metadata: {\n          executionTime: Date.now() - startTime,\n          quality: 0,\n          completeness: 0,\n        },\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  private determineSparcMode(task: TaskDefinition, agent: AgentState): string {\n    // Map task types and agent types to SPARC modes\n    const modeMap = {\n      // Task type mappings\n      coding: 'code',\n      testing: 'tdd',\n      analysis: 'spec-pseudocode',\n      documentation: 'docs-writer',\n      research: 'spec-pseudocode',\n      review: 'refinement-optimization-mode',\n      deployment: 'devops',\n      optimization: 'refinement-optimization-mode',\n      integration: 'integration',\n\n      // Agent type overrides\n      coder: 'code',\n      tester: 'tdd',\n      analyst: 'spec-pseudocode',\n      documenter: 'docs-writer',\n      reviewer: 'refinement-optimization-mode',\n      researcher: 'spec-pseudocode',\n      coordinator: 'architect',\n    };\n\n    // Check for specific keywords in task description\n    const description = task.description.toLowerCase();\n    if (description.includes('architecture') || description.includes('design')) {\n      return 'architect';\n    }\n    if (description.includes('security')) {\n      return 'security-review';\n    }\n    if (description.includes('debug')) {\n      return 'debug';\n    }\n    if (description.includes('test')) {\n      return 'tdd';\n    }\n    if (description.includes('document')) {\n      return 'docs-writer';\n    }\n    if (description.includes('integrate')) {\n      return 'integration';\n    }\n\n    // Use agent type first, then task type\n    return modeMap[agent.type] || modeMap[task.type] || 'code';\n  }\n\n  private buildSparcCommand(task: TaskDefinition, mode: string, targetDir?: string): string[] {\n    const command = [\n      this.claudeFlowPath,\n      'sparc',\n      'run',\n      mode,\n      `\"${this.formatTaskDescription(task)}\"`,\n    ];\n\n    // Add options\n    if (targetDir) {\n      command.push('--target-dir', targetDir);\n    }\n\n    if (this.verbose) {\n      command.push('--verbose');\n    }\n\n    // Add non-interactive flag\n    command.push('--non-interactive');\n\n    // Add auto-confirm flag\n    command.push('--yes');\n\n    return command;\n  }\n\n  private formatTaskDescription(task: TaskDefinition): string {\n    // Format the task description for SPARC command\n    let description = task.description;\n\n    // If the task has specific instructions, include them\n    if (task.instructions && task.instructions !== task.description) {\n      description = `${task.description}. ${task.instructions}`;\n    }\n\n    // Add context if available\n    if (task.context?.targetDir) {\n      description += ` in ${task.context.targetDir}`;\n    }\n\n    return description.replace(/\"/g, '\\\\\"');\n  }\n\n  private async executeCommand(command: string[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const [cmd, ...args] = command;\n\n      const proc = spawn(cmd, args, {\n        shell: true,\n        env: {\n          ...process.env,\n          CLAUDE_FLOW_NON_INTERACTIVE: 'true',\n          CLAUDE_FLOW_AUTO_CONFIRM: 'true',\n        },\n      });\n\n      let stdout = '';\n      let stderr = '';\n      const artifacts: Record<string, any> = {};\n\n      proc.stdout.on('data', (data) => {\n        const chunk = data.toString();\n        stdout += chunk;\n\n        // Parse artifacts from output\n        const artifactMatch = chunk.match(/Created file: (.+)/g);\n        if (artifactMatch) {\n          artifactMatch.forEach((match) => {\n            const filePath = match.replace('Created file: ', '').trim();\n            artifacts[filePath] = true;\n          });\n        }\n      });\n\n      proc.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      proc.on('close', (code) => {\n        clearTimeout(timeoutId); // Clear timeout when process completes\n        if (code === 0) {\n          resolve({\n            output: stdout,\n            artifacts,\n            exitCode: code,\n            error: null,\n          });\n        } else {\n          resolve({\n            output: stdout,\n            artifacts,\n            exitCode: code,\n            error: stderr || `Command exited with code ${code}`,\n          });\n        }\n      });\n\n      proc.on('error', (err) => {\n        reject(err);\n      });\n\n      // Handle timeout - configurable for SPARC operations\n      const timeoutMs = this.timeoutMinutes * 60 * 1000;\n      const timeoutId = setTimeout(() => {\n        proc.kill('SIGTERM');\n        reject(new Error('Command execution timeout'));\n      }, timeoutMs);\n    });\n  }\n}\n\n// Export for use in swarm coordinator\nexport default ClaudeFlowExecutor;\n"],"names":["Logger","spawn","getClaudeFlowBin","ClaudeFlowExecutor","logger","claudeFlowPath","enableSparc","verbose","timeoutMinutes","config","level","format","destination","component","executeTask","task","agent","targetDir","info","taskId","id","taskName","name","agentType","type","startTime","Date","now","sparcMode","determineSparcMode","command","buildSparcCommand","mode","join","result","executeCommand","endTime","executionTime","output","artifacts","metadata","exitCode","quality","completeness","error","Error","message","String","modeMap","coding","testing","analysis","documentation","research","review","deployment","optimization","integration","coder","tester","analyst","documenter","reviewer","researcher","coordinator","description","toLowerCase","includes","formatTaskDescription","push","instructions","context","replace","Promise","resolve","reject","cmd","args","proc","shell","env","process","CLAUDE_FLOW_NON_INTERACTIVE","CLAUDE_FLOW_AUTO_CONFIRM","stdout","stderr","on","data","chunk","toString","artifactMatch","match","forEach","filePath","trim","code","clearTimeout","timeoutId","err","timeoutMs","setTimeout","kill"],"mappings":"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"}