{"version":3,"sources":["../../../src/swarm/types.ts"],"sourcesContent":["/**\n * Comprehensive types and interfaces for the swarm system\n */\n\nimport { EventEmitter } from 'node:events';\n\n// ===== CORE SWARM TYPES =====\n\nexport interface SwarmId {\n  id: string;\n  timestamp: number;\n  namespace: string;\n}\n\nexport interface AgentId {\n  id: string;\n  swarmId: string;\n  type: AgentType;\n  instance: number;\n}\n\nexport interface TaskId {\n  id: string;\n  swarmId: string;\n  sequence: number;\n  priority: number;\n}\n\n// ===== AGENT TYPES =====\n\nexport type AgentType =\n  | 'coordinator' // Orchestrates and manages other agents\n  | 'researcher' // Performs research and data gathering\n  | 'coder' // Writes and maintains code\n  | 'analyst' // Analyzes data and generates insights\n  | 'architect' // Designs system architecture and solutions\n  | 'tester' // Tests and validates functionality\n  | 'reviewer' // Reviews and validates work\n  | 'optimizer' // Optimizes performance and efficiency\n  | 'documenter' // Creates and maintains documentation\n  | 'monitor' // Monitors system health and performance\n  | 'specialist' // Domain-specific specialized agent\n  // Maestro-specific agent types\n  | 'design-architect' // UI/UX and component design\n  | 'system-architect' // System-level architecture design\n  | 'task-planner' // Project management and task breakdown\n  | 'developer' // Full-stack development and implementation\n  | 'requirements-engineer' // Requirements analysis and documentation\n  | 'steering-author'; // Governance and steering documentation\n\nexport type AgentStatus =\n  | 'initializing' // Agent is starting up\n  | 'idle' // Available for tasks\n  | 'busy' // Currently executing task\n  | 'paused' // Temporarily unavailable\n  | 'error' // In error state\n  | 'offline' // Not available\n  | 'terminating' // Shutting down\n  | 'terminated'; // Shut down\n\nexport interface AgentCapabilities {\n  // Core capabilities\n  codeGeneration: boolean;\n  codeReview: boolean;\n  testing: boolean;\n  documentation: boolean;\n  research: boolean;\n  analysis: boolean;\n\n  // Communication capabilities\n  webSearch: boolean;\n  apiIntegration: boolean;\n  fileSystem: boolean;\n  terminalAccess: boolean;\n\n  // Specialized capabilities\n  languages: string[]; // Programming languages\n  frameworks: string[]; // Frameworks and libraries\n  domains: string[]; // Domain expertise\n  tools: string[]; // Available tools\n\n  // Resource limits\n  maxConcurrentTasks: number;\n  maxMemoryUsage: number;\n  maxExecutionTime: number;\n\n  // Performance characteristics\n  reliability: number; // 0-1 reliability score\n  speed: number; // Relative speed rating\n  quality: number; // Quality rating\n}\n\nexport interface AgentMetrics {\n  // Performance metrics\n  tasksCompleted: number;\n  tasksFailed: number;\n  averageExecutionTime: number;\n  successRate: number;\n\n  // Resource usage\n  cpuUsage: number;\n  memoryUsage: number;\n  diskUsage: number;\n  networkUsage: number;\n\n  // Quality metrics\n  codeQuality: number;\n  testCoverage: number;\n  bugRate: number;\n  userSatisfaction: number;\n\n  // Time tracking\n  totalUptime: number;\n  lastActivity: Date;\n  responseTime: number;\n}\n\nexport interface AgentState {\n  id: AgentId;\n  name: string;\n  type: AgentType;\n  status: AgentStatus;\n  capabilities: AgentCapabilities;\n  metrics: AgentMetrics;\n\n  // Current state\n  currentTask?: TaskId;\n  workload: number; // 0-1 current workload\n  health: number; // 0-1 health score\n\n  // Configuration\n  config: AgentConfig;\n  environment: AgentEnvironment;\n\n  // Communication\n  endpoints: string[];\n  lastHeartbeat: Date;\n\n  // History\n  taskHistory: TaskId[];\n  errorHistory: AgentError[];\n\n  // Relationships\n  parentAgent?: AgentId;\n  childAgents: AgentId[];\n  collaborators: AgentId[];\n}\n\nexport interface AgentConfig {\n  // Behavior settings\n  autonomyLevel: number; // 0-1 how autonomous the agent is\n  learningEnabled: boolean;\n  adaptationEnabled: boolean;\n\n  // Resource limits\n  maxTasksPerHour: number;\n  maxConcurrentTasks: number;\n  timeoutThreshold: number;\n\n  // Communication settings\n  reportingInterval: number;\n  heartbeatInterval: number;\n\n  // Security settings\n  permissions: string[];\n  trustedAgents: AgentId[];\n\n  // Specialization\n  expertise: Record<string, number>;\n  preferences: Record<string, any>;\n}\n\nexport interface AgentEnvironment {\n  // Runtime environment\n  runtime: 'deno' | 'node' | 'claude' | 'browser';\n  version: string;\n\n  // Available resources\n  workingDirectory: string;\n  tempDirectory: string;\n  logDirectory: string;\n\n  // Network configuration\n  apiEndpoints: Record<string, string>;\n  credentials: Record<string, string>;\n\n  // Tool access\n  availableTools: string[];\n  toolConfigs: Record<string, any>;\n}\n\nexport interface AgentError {\n  timestamp: Date;\n  type: string;\n  message: string;\n  stack?: string;\n  context: Record<string, any>;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  resolved: boolean;\n}\n\n// ===== TASK TYPES =====\n\nexport type TaskType =\n  | 'research' // Information gathering and research\n  | 'analysis' // Data analysis and insights\n  | 'coding' // Code generation and modification\n  | 'testing' // Test creation and execution\n  | 'review' // Code and content review\n  | 'documentation' // Documentation creation\n  | 'deployment' // Deployment and operations\n  | 'monitoring' // System monitoring\n  | 'coordination' // Cross-agent coordination\n  | 'communication' // External communication\n  | 'maintenance' // System maintenance\n  | 'optimization' // Performance optimization\n  | 'validation' // Validation and verification\n  | 'integration' // System integration\n  | 'custom' // Custom task type\n  // Analyst-specific task types\n  | 'data-analysis'\n  | 'performance-analysis'\n  | 'statistical-analysis'\n  | 'visualization'\n  | 'predictive-modeling'\n  | 'anomaly-detection'\n  | 'trend-analysis'\n  | 'business-intelligence'\n  | 'quality-analysis'\n  | 'system-design'\n  | 'architecture-review'\n  | 'api-design'\n  | 'cloud-architecture'\n  | 'microservices-design'\n  | 'security-architecture'\n  | 'scalability-design'\n  | 'database-architecture'\n  | 'code-generation'\n  | 'code-review'\n  | 'refactoring'\n  | 'debugging'\n  | 'api-development'\n  | 'database-design'\n  | 'performance-optimization'\n  | 'task-orchestration'\n  | 'progress-tracking'\n  | 'resource-allocation'\n  | 'workflow-management'\n  | 'team-coordination'\n  | 'status-reporting'\n  | 'fact-check'\n  | 'literature-review'\n  | 'market-analysis'\n  | 'unit-testing'\n  | 'integration-testing'\n  | 'e2e-testing'\n  | 'performance-testing'\n  | 'security-testing'\n  | 'api-testing'\n  | 'test-automation'\n  | 'test-analysis';\n\nexport type TaskStatus =\n  | 'created' // Task has been created\n  | 'queued' // Waiting for assignment\n  | 'assigned' // Assigned to an agent\n  | 'running' // Currently being executed\n  | 'paused' // Temporarily paused\n  | 'completed' // Successfully completed\n  | 'failed' // Failed with error\n  | 'cancelled' // Cancelled by user/system\n  | 'timeout' // Timed out\n  | 'retrying' // Being retried\n  | 'blocked'; // Blocked by dependencies\n\nexport type TaskPriority =\n  | 'critical' // Must be done immediately\n  | 'high' // Important, do soon\n  | 'normal' // Standard priority\n  | 'low' // Can be delayed\n  | 'background'; // Run when resources available\n\nexport interface TaskRequirements {\n  // Agent requirements\n  agentType?: AgentType;\n  capabilities: string[];\n  minReliability?: number;\n\n  // Resource requirements\n  estimatedDuration?: number;\n  maxDuration?: number;\n  memoryRequired?: number;\n  cpuRequired?: number;\n\n  // Environment requirements\n  tools: string[];\n  permissions: string[];\n  environment?: Record<string, any>;\n\n  // Quality requirements\n  reviewRequired?: boolean;\n  testingRequired?: boolean;\n  documentationRequired?: boolean;\n}\n\nexport interface TaskConstraints {\n  // Time constraints\n  deadline?: Date;\n  startAfter?: Date;\n  maxRetries?: number;\n  maxTokens?: number;\n  timeoutAfter?: number;\n\n  // Resource constraints\n  maxCost?: number;\n  exclusiveAccess?: string[];\n\n  // Dependency constraints\n  dependencies: TaskId[];\n  dependents: TaskId[];\n  conflicts: TaskId[];\n\n  // Agent constraints\n  preferredAgents?: AgentId[];\n  excludedAgents?: AgentId[];\n  requiresHuman?: boolean;\n}\n\nexport interface TaskResult {\n  // Result data\n  output: any;\n  artifacts: Record<string, any>;\n  metadata: Record<string, any>;\n\n  // Quality metrics\n  quality: number;\n  completeness: number;\n  accuracy: number;\n\n  // Performance metrics\n  executionTime: number;\n  resourcesUsed: Record<string, number>;\n\n  // Validation\n  validated: boolean;\n  validationResults?: any;\n\n  // Follow-up\n  recommendations?: string[];\n  nextSteps?: string[];\n}\n\nexport interface TaskDefinition {\n  id: TaskId;\n  type: TaskType;\n  name: string;\n  description: string;\n\n  // Task specification\n  requirements: TaskRequirements;\n  constraints: TaskConstraints;\n  priority: TaskPriority;\n\n  // Input/Output\n  input: any;\n  expectedOutput?: any;\n\n  // Execution details\n  instructions: string;\n  context: Record<string, any>;\n  parameters?: Record<string, any>;\n  examples?: any[];\n\n  // Tracking\n  status: TaskStatus;\n  createdAt: Date;\n  updatedAt: Date;\n\n  // Assignment\n  assignedTo?: AgentId;\n  assignedAt?: Date;\n\n  // Execution\n  startedAt?: Date;\n  completedAt?: Date;\n  result?: TaskResult;\n  error?: TaskError;\n\n  // History\n  attempts: TaskAttempt[];\n  statusHistory: TaskStatusChange[];\n}\n\nexport interface TaskAttempt {\n  attemptNumber: number;\n  agent: AgentId;\n  startedAt: Date;\n  completedAt?: Date;\n  status: TaskStatus;\n  result?: TaskResult;\n  error?: TaskError;\n  resourcesUsed: Record<string, number>;\n}\n\nexport interface TaskStatusChange {\n  timestamp: Date;\n  from: TaskStatus;\n  to: TaskStatus;\n  reason: string;\n  triggeredBy: AgentId | 'system' | 'user';\n}\n\nexport interface TaskError {\n  type: string;\n  message: string;\n  code?: string;\n  stack?: string;\n  context: Record<string, any>;\n  recoverable: boolean;\n  retryable: boolean;\n}\n\n// ===== SWARM TYPES =====\n\nexport type SwarmMode =\n  | 'centralized' // Single coordinator manages all\n  | 'distributed' // Multiple coordinators\n  | 'hierarchical' // Tree structure of coordinators\n  | 'mesh' // Peer-to-peer coordination\n  | 'hybrid'; // Mixed coordination strategies\n\nexport type SwarmStrategy =\n  | 'auto' // Automatically determine approach\n  | 'research' // Research-focused strategy\n  | 'development' // Development-focused strategy\n  | 'analysis' // Analysis-focused strategy\n  | 'testing' // Testing-focused strategy\n  | 'optimization' // Performance optimization\n  | 'maintenance' // System maintenance\n  | 'custom'; // Custom strategy\n\nexport interface SwarmObjective {\n  id: string;\n  name: string;\n  description: string;\n\n  // Strategy\n  strategy: SwarmStrategy;\n  mode: SwarmMode;\n\n  // Requirements\n  requirements: SwarmRequirements;\n  constraints: SwarmConstraints;\n\n  // Decomposition\n  tasks: TaskDefinition[];\n  dependencies: TaskDependency[];\n\n  // Execution\n  status: SwarmStatus;\n  progress: SwarmProgress;\n\n  // Timeline\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  deadline?: Date;\n\n  // Results\n  results?: SwarmResults;\n  metrics: SwarmMetrics;\n}\n\nexport interface SwarmRequirements {\n  // Agent requirements\n  minAgents: number;\n  maxAgents: number;\n  agentTypes: AgentType[];\n\n  // Resource requirements\n  estimatedDuration: number;\n  maxDuration: number;\n  resourceBudget?: Record<string, number>;\n\n  // Quality requirements\n  qualityThreshold: number;\n  reviewCoverage: number;\n  testCoverage: number;\n\n  // Performance requirements\n  throughputTarget?: number;\n  latencyTarget?: number;\n  reliabilityTarget: number;\n}\n\nexport interface SwarmConstraints {\n  // Time constraints\n  deadline?: Date;\n  milestones: SwarmMilestone[];\n\n  // Resource constraints\n  maxCost?: number;\n  resourceLimits: Record<string, number>;\n\n  // Quality constraints\n  minQuality: number;\n  requiredApprovals: string[];\n\n  // Operational constraints\n  allowedFailures: number;\n  recoveryTime: number;\n  maintenanceWindows?: TimeWindow[];\n}\n\nexport interface SwarmMilestone {\n  id: string;\n  name: string;\n  description: string;\n  deadline: Date;\n  requirements: string[];\n  dependencies: string[];\n  completed: boolean;\n  completedAt?: Date;\n}\n\nexport interface TimeWindow {\n  start: Date;\n  end: Date;\n  type: 'maintenance' | 'blackout' | 'preferred';\n  description: string;\n}\n\nexport type SwarmStatus =\n  | 'planning' // Decomposing objectives into tasks\n  | 'initializing' // Setting up agents and resources\n  | 'executing' // Running tasks\n  | 'paused' // Temporarily paused\n  | 'completed' // Successfully completed\n  | 'failed' // Failed to complete\n  | 'cancelled' // Cancelled by user\n  | 'recovering' // Recovering from failure\n  | 'optimizing'; // Optimizing performance\n\nexport interface SwarmProgress {\n  // Task progress\n  totalTasks: number;\n  completedTasks: number;\n  failedTasks: number;\n  runningTasks: number;\n\n  // Time progress\n  estimatedCompletion: Date;\n  timeRemaining: number;\n  percentComplete: number;\n\n  // Quality progress\n  averageQuality: number;\n  passedReviews: number;\n  passedTests: number;\n\n  // Resource usage\n  resourceUtilization: Record<string, number>;\n  costSpent: number;\n\n  // Agent utilization\n  activeAgents: number;\n  idleAgents: number;\n  busyAgents: number;\n}\n\nexport interface SwarmResults {\n  // Primary outputs\n  outputs: Record<string, any>;\n  artifacts: Record<string, any>;\n  reports: Record<string, any>;\n\n  // Quality metrics\n  overallQuality: number;\n  qualityByTask: Record<string, number>;\n\n  // Performance metrics\n  totalExecutionTime: number;\n  resourcesUsed: Record<string, number>;\n  efficiency: number;\n\n  // Success metrics\n  objectivesMet: string[];\n  objectivesFailed: string[];\n\n  // Recommendations\n  improvements: string[];\n  nextActions: string[];\n}\n\nexport interface SwarmMetrics {\n  // Performance metrics\n  throughput: number;\n  latency: number;\n  efficiency: number;\n  reliability: number;\n\n  // Quality metrics\n  averageQuality: number;\n  defectRate: number;\n  reworkRate: number;\n\n  // Resource metrics\n  resourceUtilization: Record<string, number>;\n  costEfficiency: number;\n\n  // Agent metrics\n  agentUtilization: number;\n  agentSatisfaction: number;\n  collaborationEffectiveness: number;\n\n  // Timeline metrics\n  scheduleVariance: number;\n  deadlineAdherence: number;\n}\n\n// ===== COORDINATION TYPES =====\n\nexport interface TaskDependency {\n  task: TaskId;\n  dependsOn: TaskId;\n  type: DependencyType;\n  constraint?: string;\n}\n\nexport type DependencyType =\n  | 'finish-start' // Must finish before next starts\n  | 'start-start' // Must start before next starts\n  | 'finish-finish' // Must finish before next finishes\n  | 'start-finish' // Must start before next finishes\n  | 'resource' // Shares a resource\n  | 'data' // Data dependency\n  | 'approval'; // Requires approval\n\nexport interface CoordinationStrategy {\n  name: string;\n  description: string;\n\n  // Agent selection\n  agentSelection: AgentSelectionStrategy;\n\n  // Task scheduling\n  taskScheduling: TaskSchedulingStrategy;\n\n  // Load balancing\n  loadBalancing: LoadBalancingStrategy;\n\n  // Fault tolerance\n  faultTolerance: FaultToleranceStrategy;\n\n  // Communication\n  communication: CommunicationStrategy;\n}\n\nexport type AgentSelectionStrategy =\n  | 'capability-based' // Select based on capabilities\n  | 'load-based' // Select based on current load\n  | 'performance-based' // Select based on performance history\n  | 'random' // Random selection\n  | 'round-robin' // Round-robin selection\n  | 'affinity-based' // Prefer agents with domain affinity\n  | 'cost-based' // Select based on cost\n  | 'hybrid'; // Combination of strategies\n\nexport type TaskSchedulingStrategy =\n  | 'fifo' // First in, first out\n  | 'priority' // Priority-based scheduling\n  | 'deadline' // Earliest deadline first\n  | 'shortest-job' // Shortest job first\n  | 'critical-path' // Critical path method\n  | 'resource-aware' // Consider resource availability\n  | 'adaptive'; // Adaptive scheduling\n\nexport type LoadBalancingStrategy =\n  | 'work-stealing' // Agents steal work from busy agents\n  | 'work-sharing' // Work is proactively shared\n  | 'centralized' // Central dispatcher\n  | 'distributed' // Distributed load balancing\n  | 'predictive' // Predict and prevent overload\n  | 'reactive'; // React to overload conditions\n\nexport type FaultToleranceStrategy =\n  | 'retry' // Retry failed tasks\n  | 'redundancy' // Redundant execution\n  | 'checkpoint' // Checkpoint and recovery\n  | 'circuit-breaker' // Circuit breaker pattern\n  | 'bulkhead' // Isolate failures\n  | 'timeout' // Timeout protection\n  | 'graceful-degradation'; // Degrade gracefully\n\nexport type CommunicationStrategy =\n  | 'direct' // Direct agent-to-agent\n  | 'broadcast' // Broadcast to all\n  | 'publish-subscribe' // Pub/sub messaging\n  | 'request-response' // Request/response\n  | 'event-driven' // Event-driven communication\n  | 'gossip' // Gossip protocol\n  | 'hierarchical'; // Hierarchical communication\n\n// ===== MEMORY TYPES =====\n\nexport interface SwarmMemory {\n  // Memory organization\n  namespace: string;\n  partitions: MemoryPartition[];\n\n  // Access control\n  permissions: MemoryPermissions;\n\n  // Persistence\n  persistent: boolean;\n  backupEnabled: boolean;\n\n  // Synchronization\n  distributed: boolean;\n  consistency: ConsistencyLevel;\n\n  // Performance\n  cacheEnabled: boolean;\n  compressionEnabled: boolean;\n}\n\nexport interface MemoryPartition {\n  id: string;\n  name: string;\n  type: MemoryType;\n\n  // Data\n  entries: MemoryEntry[];\n\n  // Configuration\n  maxSize: number;\n  ttl?: number;\n\n  // Access patterns\n  readOnly: boolean;\n  shared: boolean;\n\n  // Performance\n  indexed: boolean;\n  compressed: boolean;\n}\n\nexport type MemoryType =\n  | 'knowledge' // Knowledge base\n  | 'state' // Agent state\n  | 'cache' // Temporary cache\n  | 'logs' // Log entries\n  | 'results' // Task results\n  | 'communication' // Communication history\n  | 'configuration' // Configuration data\n  | 'metrics'; // Performance metrics\n\nexport interface MemoryEntry {\n  id: string;\n  key: string;\n  value: any;\n\n  // Metadata\n  type: string;\n  tags: string[];\n\n  // Ownership\n  owner: AgentId;\n  accessLevel: AccessLevel;\n\n  // Lifecycle\n  createdAt: Date;\n  updatedAt: Date;\n  expiresAt?: Date;\n\n  // Versioning\n  version: number;\n  previousVersions?: MemoryEntry[];\n\n  // Relationships\n  references: string[];\n  dependencies: string[];\n}\n\nexport type AccessLevel =\n  | 'private' // Only owner can access\n  | 'team' // Team members can access\n  | 'swarm' // All swarm agents can access\n  | 'public' // Publicly accessible\n  | 'system'; // System-level access\n\nexport interface MemoryPermissions {\n  read: AccessLevel;\n  write: AccessLevel;\n  delete: AccessLevel;\n  share: AccessLevel;\n}\n\nexport type ConsistencyLevel =\n  | 'strong' // Strong consistency\n  | 'eventual' // Eventual consistency\n  | 'weak' // Weak consistency\n  | 'session'; // Session consistency\n\n// ===== MONITORING TYPES =====\n\nexport interface MonitoringConfig {\n  // Collection settings\n  metricsEnabled: boolean;\n  loggingEnabled: boolean;\n  tracingEnabled: boolean;\n\n  // Collection intervals\n  metricsInterval: number;\n  heartbeatInterval: number;\n  healthCheckInterval: number;\n\n  // Retention settings\n  retentionPeriod: number;\n  maxLogSize: number;\n  maxMetricPoints: number;\n\n  // Alerting\n  alertingEnabled: boolean;\n  alertThresholds: Record<string, number>;\n\n  // Export settings\n  exportEnabled: boolean;\n  exportFormat: string;\n  exportDestination: string;\n}\n\nexport interface SystemMetrics {\n  timestamp: Date;\n\n  // System metrics\n  cpuUsage: number;\n  memoryUsage: number;\n  diskUsage: number;\n  networkUsage: number;\n\n  // Swarm metrics\n  activeSwarms: number;\n  totalAgents: number;\n  activeAgents: number;\n  totalTasks: number;\n  runningTasks: number;\n\n  // Performance metrics\n  throughput: number;\n  latency: number;\n  errorRate: number;\n  successRate: number;\n\n  // Resource metrics\n  resourceUtilization: Record<string, number>;\n  queueLengths: Record<string, number>;\n}\n\nexport interface Alert {\n  id: string;\n  timestamp: Date;\n  level: AlertLevel;\n  type: AlertType;\n  message: string;\n\n  // Context\n  source: string;\n  context: Record<string, any>;\n\n  // Handling\n  acknowledged: boolean;\n  resolved: boolean;\n  assignedTo?: string;\n\n  // Escalation\n  escalationLevel: number;\n  escalatedAt?: Date;\n}\n\nexport type AlertLevel =\n  | 'info' // Informational\n  | 'warning' // Warning condition\n  | 'error' // Error condition\n  | 'critical'; // Critical condition\n\nexport type AlertType =\n  | 'system' // System-level alert\n  | 'performance' // Performance issue\n  | 'resource' // Resource issue\n  | 'security' // Security issue\n  | 'agent' // Agent-specific issue\n  | 'task' // Task-specific issue\n  | 'swarm' // Swarm-level issue\n  | 'custom'; // Custom alert type\n\n// ===== EVENT TYPES =====\n\nexport interface SwarmEvent {\n  id: string;\n  timestamp: Date;\n  type: EventType;\n  source: string;\n\n  // Event data\n  data: Record<string, any>;\n\n  // Routing\n  targets?: string[];\n  broadcast: boolean;\n\n  // Processing\n  processed: boolean;\n  processedAt?: Date;\n\n  // Correlation\n  correlationId?: string;\n  causationId?: string;\n}\n\nexport type EventType =\n  // Swarm events\n  | 'swarm.created'\n  | 'swarm.started'\n  | 'swarm.paused'\n  | 'swarm.resumed'\n  | 'swarm.completed'\n  | 'swarm.failed'\n  | 'swarm.cancelled'\n\n  // Agent events\n  | 'agent.created'\n  | 'agent.started'\n  | 'agent.stopped'\n  | 'agent.error'\n  | 'agent.heartbeat'\n\n  // Task events\n  | 'task.created'\n  | 'task.assigned'\n  | 'task.started'\n  | 'task.paused'\n  | 'task.resumed'\n  | 'task.completed'\n  | 'task.failed'\n  | 'task.cancelled'\n  | 'task.retried'\n\n  // Coordination events\n  | 'coordination.load_balanced'\n  | 'coordination.work_stolen'\n  | 'coordination.agent_selected'\n  | 'coordination.dependency_resolved'\n\n  // System events\n  | 'system.startup'\n  | 'system.shutdown'\n  | 'system.resource_limit'\n  | 'system.performance_degradation'\n\n  // Custom events\n  | 'custom.user_defined';\n\n// ===== INTERFACE EXTENSIONS =====\n\nexport interface SwarmEventEmitter extends EventEmitter {\n  // Event emission\n  emitSwarmEvent(event: SwarmEvent): boolean;\n  emitSwarmEvents(events: SwarmEvent[]): boolean;\n\n  // Event handling\n  onSwarmEvent(type: EventType, handler: (event: SwarmEvent) => void): this;\n  offSwarmEvent(type: EventType, handler: (event: SwarmEvent) => void): this;\n\n  // Event filtering\n  filterEvents(predicate: (event: SwarmEvent) => boolean): SwarmEvent[];\n\n  // Event correlation\n  correlateEvents(correlationId: string): SwarmEvent[];\n}\n\n// ===== UTILITY TYPES =====\n\nexport interface SwarmConfig {\n  // Basic configuration\n  name: string;\n  description: string;\n  version: string;\n\n  // Operational settings\n  mode: SwarmMode;\n  strategy: SwarmStrategy;\n  coordinationStrategy: CoordinationStrategy;\n\n  // Resource limits\n  maxAgents: number;\n  maxTasks: number;\n  maxDuration: number;\n  taskTimeoutMinutes?: number;\n  resourceLimits: Record<string, number>;\n\n  // Quality settings\n  qualityThreshold: number;\n  reviewRequired: boolean;\n  testingRequired: boolean;\n\n  // Monitoring settings\n  monitoring: MonitoringConfig;\n\n  // Memory settings\n  memory: SwarmMemory;\n\n  // Security settings\n  security: SecurityConfig;\n\n  // Performance settings\n  performance: PerformanceConfig;\n}\n\nexport interface SecurityConfig {\n  authenticationRequired: boolean;\n  authorizationRequired: boolean;\n  encryptionEnabled: boolean;\n\n  // Access control\n  defaultPermissions: string[];\n  adminRoles: string[];\n\n  // Audit\n  auditEnabled: boolean;\n  auditLevel: string;\n\n  // Validation\n  inputValidation: boolean;\n  outputSanitization: boolean;\n}\n\nexport interface PerformanceConfig {\n  // Concurrency\n  maxConcurrency: number;\n  defaultTimeout: number;\n\n  // Caching\n  cacheEnabled: boolean;\n  cacheSize: number;\n  cacheTtl: number;\n\n  // Optimization\n  optimizationEnabled: boolean;\n  adaptiveScheduling: boolean;\n  predictiveLoading: boolean;\n\n  // Resource management\n  resourcePooling: boolean;\n  connectionPooling: boolean;\n  memoryPooling: boolean;\n}\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n\n  // Context\n  validatedAt: Date;\n  validator: string;\n  context: Record<string, any>;\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n  severity: 'error' | 'critical';\n}\n\nexport interface ValidationWarning {\n  field: string;\n  message: string;\n  code: string;\n  recommendation: string;\n}\n\n// ===== TYPE GUARDS =====\n\nexport function isAgentId(obj: any): obj is AgentId {\n  return obj && typeof obj.id === 'string' && typeof obj.swarmId === 'string';\n}\n\nexport function isTaskId(obj: any): obj is TaskId {\n  return obj && typeof obj.id === 'string' && typeof obj.swarmId === 'string';\n}\n\nexport function isSwarmEvent(obj: any): obj is SwarmEvent {\n  return obj && typeof obj.id === 'string' && typeof obj.type === 'string';\n}\n\nexport function isTaskDefinition(obj: any): obj is TaskDefinition {\n  return obj && isTaskId(obj.id) && typeof obj.type === 'string';\n}\n\nexport function isAgentState(obj: any): obj is AgentState {\n  return obj && isAgentId(obj.id) && typeof obj.status === 'string';\n}\n\n// ===== CONSTANTS =====\n\nexport const SWARM_CONSTANTS = {\n  // Timeouts\n  DEFAULT_TASK_TIMEOUT: 5 * 60 * 1000, // 5 minutes\n  DEFAULT_AGENT_TIMEOUT: 30 * 1000, // 30 seconds\n  DEFAULT_HEARTBEAT_INTERVAL: 10 * 1000, // 10 seconds\n\n  // Limits\n  MAX_AGENTS_PER_SWARM: 100,\n  MAX_TASKS_PER_AGENT: 10,\n  MAX_RETRIES: 3,\n\n  // Quality thresholds\n  MIN_QUALITY_THRESHOLD: 0.7,\n  DEFAULT_QUALITY_THRESHOLD: 0.8,\n  HIGH_QUALITY_THRESHOLD: 0.9,\n\n  // Performance targets\n  DEFAULT_THROUGHPUT_TARGET: 10, // tasks per minute\n  DEFAULT_LATENCY_TARGET: 1000, // milliseconds\n  DEFAULT_RELIABILITY_TARGET: 0.95, // 95%\n\n  // Resource limits\n  DEFAULT_MEMORY_LIMIT: 512 * 1024 * 1024, // 512MB\n  DEFAULT_CPU_LIMIT: 1.0, // 1 CPU core\n  DEFAULT_DISK_LIMIT: 1024 * 1024 * 1024, // 1GB\n} as const;\n\n// ===== EXPORTS =====\n\nexport default {\n  // Type exports are handled by TypeScript\n  SWARM_CONSTANTS,\n\n  // Utility functions\n  isAgentId,\n  isTaskId,\n  isSwarmEvent,\n  isTaskDefinition,\n  isAgentState,\n};\n"],"names":["isAgentId","obj","id","swarmId","isTaskId","isSwarmEvent","type","isTaskDefinition","isAgentState","status","SWARM_CONSTANTS","DEFAULT_TASK_TIMEOUT","DEFAULT_AGENT_TIMEOUT","DEFAULT_HEARTBEAT_INTERVAL","MAX_AGENTS_PER_SWARM","MAX_TASKS_PER_AGENT","MAX_RETRIES","MIN_QUALITY_THRESHOLD","DEFAULT_QUALITY_THRESHOLD","HIGH_QUALITY_THRESHOLD","DEFAULT_THROUGHPUT_TARGET","DEFAULT_LATENCY_TARGET","DEFAULT_RELIABILITY_TARGET","DEFAULT_MEMORY_LIMIT","DEFAULT_CPU_LIMIT","DEFAULT_DISK_LIMIT"],"mappings":"AA6jCA,OAAO,SAASA,UAAUC,GAAQ;IAChC,OAAOA,OAAO,OAAOA,IAAIC,EAAE,KAAK,YAAY,OAAOD,IAAIE,OAAO,KAAK;AACrE;AAEA,OAAO,SAASC,SAASH,GAAQ;IAC/B,OAAOA,OAAO,OAAOA,IAAIC,EAAE,KAAK,YAAY,OAAOD,IAAIE,OAAO,KAAK;AACrE;AAEA,OAAO,SAASE,aAAaJ,GAAQ;IACnC,OAAOA,OAAO,OAAOA,IAAIC,EAAE,KAAK,YAAY,OAAOD,IAAIK,IAAI,KAAK;AAClE;AAEA,OAAO,SAASC,iBAAiBN,GAAQ;IACvC,OAAOA,OAAOG,SAASH,IAAIC,EAAE,KAAK,OAAOD,IAAIK,IAAI,KAAK;AACxD;AAEA,OAAO,SAASE,aAAaP,GAAQ;IACnC,OAAOA,OAAOD,UAAUC,IAAIC,EAAE,KAAK,OAAOD,IAAIQ,MAAM,KAAK;AAC3D;AAIA,OAAO,MAAMC,kBAAkB;IAE7BC,sBAAsB,IAAI,KAAK;IAC/BC,uBAAuB,KAAK;IAC5BC,4BAA4B,KAAK;IAGjCC,sBAAsB;IACtBC,qBAAqB;IACrBC,aAAa;IAGbC,uBAAuB;IACvBC,2BAA2B;IAC3BC,wBAAwB;IAGxBC,2BAA2B;IAC3BC,wBAAwB;IACxBC,4BAA4B;IAG5BC,sBAAsB,MAAM,OAAO;IACnCC,mBAAmB;IACnBC,oBAAoB,OAAO,OAAO;AACpC,EAAW;AAIX,eAAe;IAEbf;IAGAV;IACAI;IACAC;IACAE;IACAC;AACF,EAAE"}