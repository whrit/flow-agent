{"version":3,"sources":["../../../src/swarm/executor-sdk.ts"],"sourcesContent":["/**\n * Task Executor SDK Implementation\n * Claude-Flow v2.5-alpha.130\n *\n * Replaces custom retry logic with SDK-based execution\n */\n\nimport { spawn, ChildProcess } from 'node:child_process';\nimport { EventEmitter } from 'node:events';\nimport * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\nimport chalk from 'chalk';\nimport { Logger } from '../core/logger.js';\nimport { generateId } from '../utils/helpers.js';\nimport { ClaudeFlowSDKAdapter } from '../sdk/sdk-config.js';\nimport { ClaudeClientV25 } from '../api/claude-client-v2.5.js';\nimport {\n  TaskDefinition,\n  AgentState,\n  TaskResult,\n  SwarmEvent,\n  EventType,\n  SWARM_CONSTANTS,\n} from './types.js';\n\nexport interface ExecutionConfig {\n  apiKey?: string;\n  maxRetries?: number;\n  timeout?: number;\n  swarmMode?: boolean;\n  checkpointInterval?: number;\n}\n\nexport interface ExecutionResult {\n  success: boolean;\n  output: any;\n  errors: string[];\n  executionTime: number;\n  tokensUsed: number;\n  retryCount?: number;\n  checkpointId?: string;\n}\n\n/**\n * Task Executor using SDK for retry and error handling\n */\nexport class TaskExecutorSDK extends EventEmitter {\n  private logger: Logger;\n  private claudeClient: ClaudeClientV25;\n  private sdkAdapter: ClaudeFlowSDKAdapter;\n  private config: ExecutionConfig;\n  private executionStats: Map<string, any> = new Map();\n\n  constructor(config: ExecutionConfig = {}) {\n    super();\n    this.config = {\n      apiKey: config.apiKey || process.env.ANTHROPIC_API_KEY,\n      maxRetries: config.maxRetries || 3,\n      timeout: config.timeout || 60000,\n      swarmMode: config.swarmMode !== false,\n      checkpointInterval: config.checkpointInterval || 30000\n    };\n\n    this.logger = new Logger('TaskExecutorSDK');\n\n    // Initialize SDK adapter\n    this.sdkAdapter = new ClaudeFlowSDKAdapter({\n      apiKey: this.config.apiKey,\n      maxRetries: this.config.maxRetries,\n      timeout: this.config.timeout,\n      swarmMode: this.config.swarmMode,\n      checkpointInterval: this.config.checkpointInterval\n    });\n\n    // Initialize Claude client with SDK\n    this.claudeClient = new ClaudeClientV25({\n      apiKey: this.config.apiKey!,\n      retryAttempts: this.config.maxRetries,\n      timeout: this.config.timeout,\n      enableSwarmMode: this.config.swarmMode\n    }, this.logger);\n\n    this.logger.info('Task Executor SDK initialized', {\n      swarmMode: this.config.swarmMode,\n      maxRetries: this.config.maxRetries\n    });\n  }\n\n  /**\n   * Execute task with SDK-based retry handling\n   */\n  async executeTask(\n    task: TaskDefinition,\n    agent: AgentState\n  ): Promise<ExecutionResult> {\n    const executionId = generateId('exec');\n    const startTime = Date.now();\n\n    this.logger.info(`Executing task ${task.id} with agent ${agent.id}`, {\n      taskType: task.type,\n      agentType: agent.type\n    });\n\n    try {\n      // Emit start event\n      this.emit('task:start', {\n        executionId,\n        taskId: task.id,\n        agentId: agent.id\n      });\n\n      // Build the prompt for Claude\n      const prompt = this.buildPrompt(task, agent);\n\n      // Make request using SDK (retry is automatic)\n      const response = await this.claudeClient.makeRequest({\n        model: 'claude-3-sonnet-20240229',\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        system: this.getSystemPrompt(agent),\n        max_tokens: 4000,\n        temperature: 0.7\n      });\n\n      // Extract and process the response\n      const output = this.processResponse(response);\n\n      // Calculate execution metrics\n      const executionTime = Date.now() - startTime;\n      const tokensUsed = response.usage.input_tokens + response.usage.output_tokens;\n\n      // Store execution stats\n      this.executionStats.set(executionId, {\n        taskId: task.id,\n        agentId: agent.id,\n        executionTime,\n        tokensUsed,\n        timestamp: Date.now()\n      });\n\n      // Emit success event\n      this.emit('task:complete', {\n        executionId,\n        taskId: task.id,\n        agentId: agent.id,\n        result: output\n      });\n\n      return {\n        success: true,\n        output,\n        errors: [],\n        executionTime,\n        tokensUsed,\n        retryCount: 0 // SDK handles retry internally\n      };\n\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n\n      this.logger.error(`Task execution failed for ${task.id}`, {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        taskId: task.id,\n        agentId: agent.id\n      });\n\n      // Emit failure event\n      this.emit('task:error', {\n        executionId,\n        taskId: task.id,\n        agentId: agent.id,\n        error\n      });\n\n      return {\n        success: false,\n        output: null,\n        errors: [error instanceof Error ? error.message : 'Unknown error'],\n        executionTime,\n        tokensUsed: 0\n      };\n    }\n  }\n\n  /**\n   * Execute task with streaming response\n   */\n  async executeStreamingTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    onChunk?: (chunk: string) => void\n  ): Promise<ExecutionResult> {\n    const executionId = generateId('stream-exec');\n    const startTime = Date.now();\n\n    this.logger.info(`Executing streaming task ${task.id}`, {\n      taskType: task.type,\n      agentId: agent.id\n    });\n\n    try {\n      const prompt = this.buildPrompt(task, agent);\n      let fullOutput = '';\n\n      // Make streaming request\n      const response = await this.claudeClient.makeStreamingRequest(\n        {\n          model: 'claude-3-sonnet-20240229',\n          messages: [{ role: 'user', content: prompt }],\n          system: this.getSystemPrompt(agent),\n          max_tokens: 4000,\n          temperature: 0.7,\n          stream: true\n        },\n        (chunk) => {\n          if (chunk.type === 'content_block_delta' && chunk.delta?.text) {\n            fullOutput += chunk.delta.text;\n            onChunk?.(chunk.delta.text);\n          }\n        }\n      );\n\n      const executionTime = Date.now() - startTime;\n      const tokensUsed = response.usage.input_tokens + response.usage.output_tokens;\n\n      return {\n        success: true,\n        output: fullOutput,\n        errors: [],\n        executionTime,\n        tokensUsed\n      };\n\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      return {\n        success: false,\n        output: null,\n        errors: [error instanceof Error ? error.message : 'Unknown error'],\n        executionTime,\n        tokensUsed: 0\n      };\n    }\n  }\n\n  /**\n   * Execute Claude CLI task (backward compatibility)\n   */\n  async executeClaudeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    options?: { interactive?: boolean }\n  ): Promise<ExecutionResult> {\n    // For Claude CLI tasks, we still need to spawn a process\n    // But we can use the SDK for the API calls\n    if (options?.interactive) {\n      return this.executeInteractiveCLI(task, agent);\n    }\n\n    // For non-interactive, use SDK-based execution\n    return this.executeTask(task, agent);\n  }\n\n  /**\n   * Execute interactive CLI (legacy support)\n   */\n  private async executeInteractiveCLI(\n    task: TaskDefinition,\n    agent: AgentState\n  ): Promise<ExecutionResult> {\n    const startTime = Date.now();\n\n    return new Promise((resolve) => {\n      const args = ['--no-visual', task.description];\n      const claudeProcess = spawn('claude', args, {\n        stdio: 'pipe',\n        env: { ...process.env }\n      });\n\n      let output = '';\n      let errorOutput = '';\n\n      claudeProcess.stdout?.on('data', (data) => {\n        output += data.toString();\n      });\n\n      claudeProcess.stderr?.on('data', (data) => {\n        errorOutput += data.toString();\n      });\n\n      claudeProcess.on('close', (code) => {\n        const executionTime = Date.now() - startTime;\n        resolve({\n          success: code === 0,\n          output: output || errorOutput,\n          errors: code !== 0 ? [errorOutput] : [],\n          executionTime,\n          tokensUsed: 0\n        });\n      });\n\n      claudeProcess.on('error', (error) => {\n        const executionTime = Date.now() - startTime;\n        resolve({\n          success: false,\n          output: null,\n          errors: [error.message],\n          executionTime,\n          tokensUsed: 0\n        });\n      });\n    });\n  }\n\n  /**\n   * Build prompt for task execution\n   */\n  private buildPrompt(task: TaskDefinition, agent: AgentState): string {\n    const agentContext = `\nYou are an AI agent with the following capabilities:\n- Type: ${agent.type}\n- Capabilities: ${agent.capabilities.join(', ')}\n- Status: ${agent.status}\n`;\n\n    const taskContext = `\nTask: ${task.description}\nType: ${task.type}\nPriority: ${task.priority || 'medium'}\n${task.dependencies?.length ? `Dependencies: ${task.dependencies.join(', ')}` : ''}\n`;\n\n    return `${agentContext}\\n\\n${taskContext}\\n\\nPlease complete this task and provide a detailed response.`;\n  }\n\n  /**\n   * Get system prompt for agent\n   */\n  private getSystemPrompt(agent: AgentState): string {\n    const prompts: Record<string, string> = {\n      'researcher': 'You are a research specialist. Analyze information thoroughly and provide comprehensive insights.',\n      'coder': 'You are a coding expert. Write clean, efficient, and well-documented code.',\n      'analyst': 'You are a data analyst. Analyze patterns, metrics, and provide actionable insights.',\n      'optimizer': 'You are an optimization specialist. Identify inefficiencies and suggest improvements.',\n      'coordinator': 'You are a coordination expert. Organize tasks, manage dependencies, and ensure smooth execution.'\n    };\n\n    return prompts[agent.type] || 'You are a helpful AI assistant. Complete tasks accurately and efficiently.';\n  }\n\n  /**\n   * Process Claude's response\n   */\n  private processResponse(response: any): any {\n    if (!response.content || response.content.length === 0) {\n      return null;\n    }\n\n    // Extract text content\n    const textContent = response.content\n      .filter((block: any) => block.type === 'text')\n      .map((block: any) => block.text)\n      .join('\\n');\n\n    return {\n      text: textContent,\n      model: response.model,\n      tokensUsed: response.usage,\n      stopReason: response.stop_reason\n    };\n  }\n\n  /**\n   * Get execution statistics\n   */\n  getExecutionStats(): Map<string, any> {\n    return new Map(this.executionStats);\n  }\n\n  /**\n   * Clear execution statistics\n   */\n  clearExecutionStats(): void {\n    this.executionStats.clear();\n  }\n\n  /**\n   * Get health status\n   */\n  async getHealthStatus(): Promise<any> {\n    const health = await this.claudeClient.checkHealth();\n    return {\n      ...health,\n      executorStats: {\n        totalExecutions: this.executionStats.size,\n        swarmMode: this.config.swarmMode\n      }\n    };\n  }\n}\n\n// Export for backward compatibility\nexport { TaskExecutorSDK as TaskExecutor };"],"names":["spawn","EventEmitter","Logger","generateId","ClaudeFlowSDKAdapter","ClaudeClientV25","TaskExecutorSDK","logger","claudeClient","sdkAdapter","config","executionStats","Map","apiKey","process","env","ANTHROPIC_API_KEY","maxRetries","timeout","swarmMode","checkpointInterval","retryAttempts","enableSwarmMode","info","executeTask","task","agent","executionId","startTime","Date","now","id","taskType","type","agentType","emit","taskId","agentId","prompt","buildPrompt","response","makeRequest","model","messages","role","content","system","getSystemPrompt","max_tokens","temperature","output","processResponse","executionTime","tokensUsed","usage","input_tokens","output_tokens","set","timestamp","result","success","errors","retryCount","error","Error","message","executeStreamingTask","onChunk","fullOutput","makeStreamingRequest","stream","chunk","delta","text","executeClaudeTask","options","interactive","executeInteractiveCLI","Promise","resolve","args","description","claudeProcess","stdio","errorOutput","stdout","on","data","toString","stderr","code","agentContext","capabilities","join","status","taskContext","priority","dependencies","length","prompts","textContent","filter","block","map","stopReason","stop_reason","getExecutionStats","clearExecutionStats","clear","getHealthStatus","health","checkHealth","executorStats","totalExecutions","size","TaskExecutor"],"mappings":"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"}