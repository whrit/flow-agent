{"version":3,"sources":["../../../src/swarm/coordinator.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { promises as fs } from 'node:fs';\nimport { Logger } from '../core/logger.js';\nimport { generateId } from '../utils/helpers.js';\nimport {\n  SwarmId,\n  AgentId,\n  TaskId,\n  AgentState,\n  TaskDefinition,\n  SwarmObjective,\n  SwarmConfig,\n  SwarmStatus,\n  SwarmProgress,\n  SwarmResults,\n  SwarmMetrics,\n  SwarmMode,\n  SwarmStrategy,\n  AgentType,\n  TaskType,\n  TaskStatus,\n  TaskPriority,\n  SwarmEvent,\n  EventType,\n  SwarmEventEmitter,\n  ValidationResult,\n  SWARM_CONSTANTS,\n} from './types.js';\nimport { AutoStrategy } from './strategies/auto.js';\nimport { getClaudeFlowRoot, getClaudeFlowBin } from '../utils/paths.js';\nimport { SwarmJsonOutputAggregator } from './json-output-aggregator.js';\n\nexport class SwarmCoordinator extends EventEmitter implements SwarmEventEmitter {\n  private logger: Logger;\n  private config: SwarmConfig;\n  private swarmId: SwarmId;\n\n  // Core state management\n  private agents: Map<string, AgentState> = new Map();\n  private tasks: Map<string, TaskDefinition> = new Map();\n  private objectives: Map<string, SwarmObjective> = new Map();\n\n  // Execution state\n  private _isRunning: boolean = false;\n  private status: SwarmStatus = 'planning';\n  private startTime?: Date;\n  private endTime?: Date;\n\n  // Performance tracking\n  private metrics: SwarmMetrics;\n  private events: SwarmEvent[] = [];\n  private lastHeartbeat: Date = new Date();\n\n  // JSON output aggregation (optional)\n  private jsonOutputAggregator?: SwarmJsonOutputAggregator;\n\n  // Background processes\n  private heartbeatTimer?: NodeJS.Timeout;\n  private monitoringTimer?: NodeJS.Timeout;\n  private cleanupTimer?: NodeJS.Timeout;\n  private executionIntervals?: Map<string, NodeJS.Timeout>;\n\n  // Strategy instances\n  private autoStrategy: AutoStrategy;\n\n  constructor(config: Partial<SwarmConfig> = {}) {\n    super();\n\n    // Configure logger based on config or default to quiet mode\n    const logLevel = (config as any).logging?.level || 'error';\n    const logFormat = (config as any).logging?.format || 'text';\n    const logDestination = (config as any).logging?.destination || 'console';\n\n    this.logger = new Logger(\n      { level: logLevel, format: logFormat, destination: logDestination },\n      { component: 'SwarmCoordinator' },\n    );\n    this.swarmId = this.generateSwarmId();\n\n    // Initialize configuration with defaults\n    this.config = this.mergeWithDefaults(config);\n\n    // Initialize metrics\n    this.metrics = this.initializeMetrics();\n\n    // Initialize strategy instances\n    this.autoStrategy = new AutoStrategy(config);\n\n    // Setup event handlers\n    this.setupEventHandlers();\n\n    this.logger.info('SwarmCoordinator initialized', {\n      swarmId: this.swarmId.id,\n      mode: this.config.mode,\n      strategy: this.config.strategy,\n    });\n  }\n\n  // ===== LIFECYCLE MANAGEMENT =====\n\n  async initialize(): Promise<void> {\n    if (this._isRunning) {\n      throw new Error('Swarm coordinator already running');\n    }\n\n    this.logger.info('Initializing swarm coordinator...');\n    this.status = 'initializing';\n\n    try {\n      // Validate configuration\n      const validation = await this.validateConfiguration();\n      if (!validation.valid) {\n        throw new Error(\n          `Configuration validation failed: ${validation.errors.map((e) => e.message).join(', ')}`,\n        );\n      }\n\n      // Initialize subsystems\n      await this.initializeSubsystems();\n\n      // Start background processes\n      this.startBackgroundProcesses();\n\n      this._isRunning = true;\n      this.startTime = new Date();\n      this.status = 'executing';\n\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'swarm.started',\n        source: this.swarmId.id,\n        data: { swarmId: this.swarmId },\n        broadcast: true,\n        processed: false,\n      });\n\n      this.logger.info('Swarm coordinator initialized successfully');\n    } catch (error) {\n      this.status = 'failed';\n      this.logger.error('Failed to initialize swarm coordinator', { error });\n      throw error;\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    if (!this._isRunning) {\n      return;\n    }\n\n    this.logger.info('Shutting down swarm coordinator...');\n    this.status = 'paused';\n\n    try {\n      // Stop background processes\n      this.stopBackgroundProcesses();\n\n      // Gracefully stop all agents\n      await this.stopAllAgents();\n\n      // Complete any running tasks\n      await this.completeRunningTasks();\n\n      // Save final state\n      await this.saveState();\n\n      this._isRunning = false;\n      this.endTime = new Date();\n      this.status = 'completed';\n\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'swarm.completed',\n        source: this.swarmId.id,\n        data: {\n          swarmId: this.swarmId,\n          metrics: this.metrics,\n          duration: this.endTime.getTime() - (this.startTime?.getTime() || 0),\n        },\n        broadcast: true,\n        processed: false,\n      });\n\n      this.logger.info('Swarm coordinator shut down successfully');\n    } catch (error) {\n      this.logger.error('Error during swarm coordinator shutdown', { error });\n      throw error;\n    }\n  }\n\n  async pause(): Promise<void> {\n    if (!this._isRunning || this.status === 'paused') {\n      return;\n    }\n\n    this.logger.info('Pausing swarm coordinator...');\n    this.status = 'paused';\n\n    // Pause all agents\n    for (const agent of this.agents.values()) {\n      if (agent.status === 'busy') {\n        await this.pauseAgent(agent.id);\n      }\n    }\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'swarm.paused',\n      source: this.swarmId.id,\n      data: { swarmId: this.swarmId },\n      broadcast: true,\n      processed: false,\n    });\n  }\n\n  async resume(): Promise<void> {\n    if (!this._isRunning || this.status !== 'paused') {\n      return;\n    }\n\n    this.logger.info('Resuming swarm coordinator...');\n    this.status = 'executing';\n\n    // Resume all paused agents\n    for (const agent of this.agents.values()) {\n      if (agent.status === 'paused') {\n        await this.resumeAgent(agent.id);\n      }\n    }\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'swarm.resumed',\n      source: this.swarmId.id,\n      data: { swarmId: this.swarmId },\n      broadcast: true,\n      processed: false,\n    });\n  }\n\n  // ===== OBJECTIVE MANAGEMENT =====\n\n  async createObjective(\n    name: string,\n    description: string,\n    strategy: SwarmStrategy = 'auto',\n    requirements: Partial<SwarmObjective['requirements']> = {},\n  ): Promise<string> {\n    const objectiveId = generateId('objective');\n\n    const objective: SwarmObjective = {\n      id: objectiveId,\n      name,\n      description,\n      strategy,\n      mode: this.config.mode,\n      requirements: {\n        minAgents: 1,\n        maxAgents: this.config.maxAgents,\n        agentTypes: this.determineRequiredAgentTypes(strategy),\n        estimatedDuration: 60 * 60 * 1000, // 1 hour default\n        maxDuration: 4 * 60 * 60 * 1000, // 4 hours default\n        qualityThreshold: this.config.qualityThreshold,\n        reviewCoverage: 0.8,\n        testCoverage: 0.7,\n        reliabilityTarget: 0.95,\n        ...requirements,\n      },\n      constraints: {\n        minQuality: this.config.qualityThreshold,\n        requiredApprovals: [],\n        allowedFailures: Math.floor(this.config.maxAgents * 0.1),\n        recoveryTime: 5 * 60 * 1000, // 5 minutes\n        milestones: [],\n      },\n      tasks: [],\n      dependencies: [],\n      status: 'planning',\n      progress: this.initializeProgress(),\n      createdAt: new Date(),\n      metrics: this.initializeMetrics(),\n    };\n\n    // Decompose objective into tasks using optimized AUTO strategy\n    if (objective.strategy === 'auto') {\n      const decompositionResult = await this.autoStrategy.decomposeObjective(objective);\n      objective.tasks = decompositionResult.tasks;\n      objective.dependencies = this.convertDependenciesToTaskDependencies(\n        decompositionResult.dependencies,\n      );\n    } else {\n      objective.tasks = await this.decomposeObjective(objective);\n      objective.dependencies = this.analyzeDependencies(objective.tasks);\n    }\n\n    this.objectives.set(objectiveId, objective);\n\n    this.logger.info('Created objective', {\n      objectiveId,\n      name,\n      strategy,\n      taskCount: objective.tasks.length,\n    });\n\n    return objectiveId;\n  }\n\n  async executeObjective(objectiveId: string): Promise<void> {\n    const objective = this.objectives.get(objectiveId);\n    if (!objective) {\n      throw new Error(`Objective not found: ${objectiveId}`);\n    }\n\n    if (objective.status !== 'planning') {\n      throw new Error(`Objective already ${objective.status}`);\n    }\n\n    this.logger.info('Executing objective', { objectiveId, name: objective.name });\n    objective.status = 'executing';\n    objective.startedAt = new Date();\n\n    try {\n      // Ensure we have required agents\n      await this.ensureRequiredAgents(objective);\n\n      // Schedule initial tasks\n      await this.scheduleInitialTasks(objective);\n\n      // Start task execution loop\n      this.startTaskExecutionLoop(objective);\n    } catch (error) {\n      objective.status = 'failed';\n      this.logger.error('Failed to execute objective', { objectiveId, error });\n      throw error;\n    }\n  }\n\n  // ===== AGENT MANAGEMENT =====\n\n  async registerAgent(\n    name: string,\n    type: AgentType,\n    capabilities: Partial<AgentState['capabilities']> = {},\n  ): Promise<string> {\n    const agentId: AgentId = {\n      id: generateId('agent'),\n      swarmId: this.swarmId.id,\n      type,\n      instance: this.getNextInstanceNumber(type),\n    };\n\n    const agentState: AgentState = {\n      id: agentId,\n      name,\n      type,\n      status: 'initializing',\n      capabilities: {\n        // Default capabilities\n        codeGeneration: false,\n        codeReview: false,\n        testing: false,\n        documentation: false,\n        research: false,\n        analysis: false,\n        webSearch: false,\n        apiIntegration: false,\n        fileSystem: true,\n        terminalAccess: true,\n        languages: [],\n        frameworks: [],\n        domains: [],\n        tools: [],\n        maxConcurrentTasks: 3,\n        maxMemoryUsage: SWARM_CONSTANTS.DEFAULT_MEMORY_LIMIT,\n        maxExecutionTime: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        reliability: 0.8,\n        speed: 1.0,\n        quality: 0.8,\n        ...capabilities,\n      },\n      metrics: {\n        tasksCompleted: 0,\n        tasksFailed: 0,\n        averageExecutionTime: 0,\n        successRate: 0,\n        cpuUsage: 0,\n        memoryUsage: 0,\n        diskUsage: 0,\n        networkUsage: 0,\n        codeQuality: 0,\n        testCoverage: 0,\n        bugRate: 0,\n        userSatisfaction: 0,\n        totalUptime: 0,\n        lastActivity: new Date(),\n        responseTime: 0,\n      },\n      workload: 0,\n      health: 1.0,\n      config: {\n        autonomyLevel: 0.7,\n        learningEnabled: true,\n        adaptationEnabled: true,\n        maxTasksPerHour: 10,\n        maxConcurrentTasks: capabilities.maxConcurrentTasks || 3,\n        timeoutThreshold: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        reportingInterval: 30000,\n        heartbeatInterval: SWARM_CONSTANTS.DEFAULT_HEARTBEAT_INTERVAL,\n        permissions: this.getDefaultPermissions(type),\n        trustedAgents: [],\n        expertise: {},\n        preferences: {},\n      },\n      environment: {\n        runtime: 'deno',\n        version: '1.0.0',\n        workingDirectory: `/tmp/swarm/${this.swarmId.id}/agents/${agentId.id}`,\n        tempDirectory: `/tmp/swarm/${this.swarmId.id}/agents/${agentId.id}/temp`,\n        logDirectory: `/tmp/swarm/${this.swarmId.id}/agents/${agentId.id}/logs`,\n        apiEndpoints: {},\n        credentials: {},\n        availableTools: [],\n        toolConfigs: {},\n      },\n      endpoints: [],\n      lastHeartbeat: new Date(),\n      taskHistory: [],\n      errorHistory: [],\n      childAgents: [],\n      collaborators: [],\n    };\n\n    this.agents.set(agentId.id, agentState);\n\n    // Track agent in JSON output if enabled\n    this.trackAgentInJsonOutput(agentState);\n\n    // Initialize agent capabilities based on type\n    await this.initializeAgentCapabilities(agentState);\n\n    // Start agent\n    await this.startAgent(agentId.id);\n\n    this.logger.info('Registered agent', {\n      agentId: agentId.id,\n      name,\n      type,\n      capabilities: Object.keys(capabilities),\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'agent.created',\n      source: agentId.id,\n      data: { agent: agentState },\n      broadcast: false,\n      processed: false,\n    });\n\n    return agentId.id;\n  }\n\n  async unregisterAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      return;\n    }\n\n    this.logger.info('Unregistering agent', { agentId, name: agent.name });\n\n    // Stop agent gracefully\n    await this.stopAgent(agentId);\n\n    // Reassign any active tasks\n    if (agent.currentTask) {\n      await this.reassignTask(agent.currentTask.id);\n    }\n\n    // Remove from agents map\n    this.agents.delete(agentId);\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'agent.stopped',\n      source: agentId,\n      data: { agentId },\n      broadcast: false,\n      processed: false,\n    });\n  }\n\n  async startAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status !== 'initializing' && agent.status !== 'offline') {\n      return;\n    }\n\n    this.logger.info('Starting agent', { agentId, name: agent.name });\n\n    try {\n      // Initialize agent environment\n      await this.initializeAgentEnvironment(agent);\n\n      // Start agent heartbeat\n      this.startAgentHeartbeat(agent);\n\n      agent.status = 'idle';\n      agent.lastHeartbeat = new Date();\n\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'agent.started',\n        source: agentId,\n        data: { agent },\n        broadcast: false,\n        processed: false,\n      });\n    } catch (error) {\n      agent.status = 'error';\n      agent.errorHistory.push({\n        timestamp: new Date(),\n        type: 'startup_error',\n        message: error instanceof Error ? error.message : String(error),\n        stack: error.stack,\n        context: { agentId },\n        severity: 'high',\n        resolved: false,\n      });\n\n      this.logger.error('Failed to start agent', { agentId, error });\n      throw error;\n    }\n  }\n\n  async stopAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      return;\n    }\n\n    if (agent.status === 'offline' || agent.status === 'terminated') {\n      return;\n    }\n\n    this.logger.info('Stopping agent', { agentId, name: agent.name });\n\n    agent.status = 'terminating';\n\n    try {\n      // Cancel current task if any\n      if (agent.currentTask) {\n        await this.cancelTask(agent.currentTask.id, 'Agent stopping');\n      }\n\n      // Stop heartbeat\n      this.stopAgentHeartbeat(agent);\n\n      // Cleanup agent environment\n      await this.cleanupAgentEnvironment(agent);\n\n      agent.status = 'terminated';\n    } catch (error) {\n      agent.status = 'error';\n      this.logger.error('Error stopping agent', { agentId, error });\n    }\n  }\n\n  async pauseAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent || agent.status !== 'busy') {\n      return;\n    }\n\n    agent.status = 'paused';\n    this.logger.info('Paused agent', { agentId });\n  }\n\n  async resumeAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent || agent.status !== 'paused') {\n      return;\n    }\n\n    agent.status = 'busy';\n    this.logger.info('Resumed agent', { agentId });\n  }\n\n  // ===== TASK MANAGEMENT =====\n\n  async createTask(\n    type: TaskType,\n    name: string,\n    description: string,\n    instructions: string,\n    options: Partial<TaskDefinition> = {},\n  ): Promise<string> {\n    const taskId: TaskId = {\n      id: generateId('task'),\n      swarmId: this.swarmId.id,\n      sequence: this.tasks.size + 1,\n      priority: 1,\n    };\n\n    const task: TaskDefinition = {\n      id: taskId,\n      type,\n      name,\n      description,\n      instructions,\n      requirements: {\n        capabilities: this.getRequiredCapabilities(type),\n        tools: this.getRequiredTools(type),\n        permissions: this.getRequiredPermissions(type),\n        ...options.requirements,\n      },\n      constraints: {\n        dependencies: [],\n        dependents: [],\n        conflicts: [],\n        maxRetries: SWARM_CONSTANTS.MAX_RETRIES,\n        timeoutAfter: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        ...options.constraints,\n      },\n      priority: 'normal',\n      input: options.input || {},\n      context: options.context || {},\n      examples: options.examples || [],\n      status: 'created',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      attempts: [],\n      statusHistory: [\n        {\n          timestamp: new Date(),\n          from: 'created' as TaskStatus,\n          to: 'created' as TaskStatus,\n          reason: 'Task created',\n          triggeredBy: 'system',\n        },\n      ],\n      ...options,\n    };\n\n    this.tasks.set(taskId.id, task);\n\n    // Track task in JSON output if enabled\n    this.trackTaskInJsonOutput(task);\n\n    this.logger.info('Created task', {\n      taskId: taskId.id,\n      type,\n      name,\n      priority: task.priority,\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'task.created',\n      source: this.swarmId.id,\n      data: { task },\n      broadcast: false,\n      processed: false,\n    });\n\n    return taskId.id;\n  }\n\n  async assignTask(taskId: string, agentId?: string): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    if (task.status !== 'created' && task.status !== 'queued') {\n      throw new Error(`Task cannot be assigned, current status: ${task.status}`);\n    }\n\n    // Select agent if not specified\n    if (!agentId) {\n      agentId = await this.selectAgentForTask(task);\n      if (!agentId) {\n        throw new Error('No suitable agent available for task');\n      }\n    }\n\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status !== 'idle') {\n      throw new Error(`Agent not available: ${agent.status}`);\n    }\n\n    // Assign task\n    task.assignedTo = agent.id;\n    task.assignedAt = new Date();\n    task.status = 'assigned';\n\n    agent.currentTask = task.id;\n    agent.status = 'busy';\n\n    // Update status history\n    task.statusHistory.push({\n      timestamp: new Date(),\n      from: task.statusHistory[task.statusHistory.length - 1].to,\n      to: 'assigned',\n      reason: `Assigned to agent ${agent.name}`,\n      triggeredBy: 'system',\n    });\n\n    this.logger.info('Assigned task', {\n      taskId,\n      agentId,\n      agentName: agent.name,\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'task.assigned',\n      source: agentId,\n      data: { task, agent },\n      broadcast: false,\n      processed: false,\n    });\n\n    // Start task execution\n    await this.startTaskExecution(task);\n  }\n\n  async startTaskExecution(task: TaskDefinition): Promise<void> {\n    if (!task.assignedTo) {\n      throw new Error('Task not assigned to any agent');\n    }\n\n    const agent = this.agents.get(task.assignedTo.id);\n    if (!agent) {\n      throw new Error(`Agent not found: ${task.assignedTo.id}`);\n    }\n\n    this.logger.info('Starting task execution', {\n      taskId: task.id.id,\n      agentId: agent.id.id,\n    });\n\n    task.status = 'running';\n    task.startedAt = new Date();\n\n    // Create attempt record\n    const attempt = {\n      attemptNumber: task.attempts.length + 1,\n      agent: agent.id,\n      startedAt: new Date(),\n      status: 'running' as TaskStatus,\n      resourcesUsed: {},\n    };\n    task.attempts.push(attempt);\n\n    // Update status history\n    task.statusHistory.push({\n      timestamp: new Date(),\n      from: 'assigned',\n      to: 'running',\n      reason: 'Task execution started',\n      triggeredBy: agent.id,\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'task.started',\n      source: agent.id.id,\n      data: { task, agent, attempt },\n      broadcast: false,\n      processed: false,\n    });\n\n    try {\n      // Execute task (this would spawn actual Claude process)\n      const result = await this.executeTaskWithAgent(task, agent);\n      await this.completeTask(task.id.id, result);\n    } catch (error) {\n      await this.failTask(task.id.id, error);\n    }\n  }\n\n  async completeTask(taskId: string, result: any): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    const agent = task.assignedTo ? this.agents.get(task.assignedTo.id) : null;\n    if (!agent) {\n      throw new Error('Task not assigned to any agent');\n    }\n\n    this.logger.info('Completing task', { taskId, agentId: agent.id.id });\n\n    task.status = 'completed';\n    task.completedAt = new Date();\n    task.result = {\n      output: result,\n      artifacts: {},\n      metadata: {},\n      quality: this.assessTaskQuality(task, result),\n      completeness: 1.0,\n      accuracy: 1.0,\n      executionTime: task.completedAt.getTime() - (task.startedAt?.getTime() || 0),\n      resourcesUsed: {},\n      validated: false,\n    };\n\n    // Update attempt\n    const currentAttempt = task.attempts[task.attempts.length - 1];\n    if (currentAttempt) {\n      currentAttempt.completedAt = new Date();\n      currentAttempt.status = 'completed';\n      currentAttempt.result = task.result;\n    }\n\n    // Update agent state\n    agent.status = 'idle';\n    agent.currentTask = undefined;\n    agent.metrics.tasksCompleted++;\n    agent.metrics.lastActivity = new Date();\n    agent.taskHistory.push(task.id);\n\n    // Update agent metrics\n    this.updateAgentMetrics(agent, task);\n\n    // Update status history\n    task.statusHistory.push({\n      timestamp: new Date(),\n      from: 'running',\n      to: 'completed',\n      reason: 'Task completed successfully',\n      triggeredBy: agent.id,\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'task.completed',\n      source: agent.id.id,\n      data: { task, agent, result: task.result },\n      broadcast: false,\n      processed: false,\n    });\n\n    // Check for dependent tasks\n    await this.processDependentTasks(task);\n  }\n\n  async failTask(taskId: string, error: any): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    const agent = task.assignedTo ? this.agents.get(task.assignedTo.id) : null;\n    if (!agent) {\n      throw new Error('Task not assigned to any agent');\n    }\n\n    this.logger.warn('Task failed', {\n      taskId,\n      agentId: agent.id.id,\n      error: error instanceof Error ? error.message : String(error),\n    });\n\n    task.error = {\n      type: error.constructor.name,\n      message: error instanceof Error ? error.message : String(error),\n      code: error.code,\n      stack: error.stack,\n      context: { taskId, agentId: agent.id.id },\n      recoverable: this.isRecoverableError(error),\n      retryable: this.isRetryableError(error),\n    };\n\n    // Update attempt\n    const currentAttempt = task.attempts[task.attempts.length - 1];\n    if (currentAttempt) {\n      currentAttempt.completedAt = new Date();\n      currentAttempt.status = 'failed';\n      currentAttempt.error = task.error;\n    }\n\n    // Update agent state\n    agent.status = 'idle';\n    agent.currentTask = undefined;\n    agent.metrics.tasksFailed++;\n    agent.metrics.lastActivity = new Date();\n\n    // Add to error history\n    agent.errorHistory.push({\n      timestamp: new Date(),\n      type: 'task_failure',\n      message: error instanceof Error ? error.message : String(error),\n      stack: error.stack,\n      context: { taskId },\n      severity: 'medium',\n      resolved: false,\n    });\n\n    // Determine if we should retry\n    const shouldRetry =\n      task.error.retryable &&\n      task.attempts.length < (task.constraints.maxRetries || SWARM_CONSTANTS.MAX_RETRIES);\n\n    if (shouldRetry) {\n      task.status = 'retrying';\n      task.assignedTo = undefined;\n\n      // Update status history\n      task.statusHistory.push({\n        timestamp: new Date(),\n        from: 'running',\n        to: 'retrying',\n        reason: `Task failed, will retry: ${error instanceof Error ? error.message : String(error)}`,\n        triggeredBy: agent.id,\n      });\n\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'task.retried',\n        source: agent.id.id,\n        data: { task, error: task.error, attempt: task.attempts.length },\n        broadcast: false,\n        processed: false,\n      });\n\n      // Schedule retry with exponential backoff\n      const retryDelay = Math.pow(2, task.attempts.length) * 1000;\n      setTimeout(() => {\n        this.assignTask(taskId).catch((retryError) => {\n          this.logger.error('Failed to retry task', { taskId, retryError });\n        });\n      }, retryDelay);\n    } else {\n      task.status = 'failed';\n      task.completedAt = new Date();\n\n      // Update status history\n      task.statusHistory.push({\n        timestamp: new Date(),\n        from: 'running',\n        to: 'failed',\n        reason: `Task failed permanently: ${error instanceof Error ? error.message : String(error)}`,\n        triggeredBy: agent.id,\n      });\n\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'task.failed',\n        source: agent.id.id,\n        data: { task, error: task.error },\n        broadcast: false,\n        processed: false,\n      });\n\n      // Handle failure cascade\n      await this.handleTaskFailureCascade(task);\n    }\n  }\n\n  async cancelTask(taskId: string, reason: string): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    const agent = task.assignedTo ? this.agents.get(task.assignedTo.id) : null;\n\n    this.logger.info('Cancelling task', { taskId, reason });\n\n    task.status = 'cancelled';\n    task.completedAt = new Date();\n\n    if (agent) {\n      agent.status = 'idle';\n      agent.currentTask = undefined;\n    }\n\n    // Update status history\n    task.statusHistory.push({\n      timestamp: new Date(),\n      from: task.statusHistory[task.statusHistory.length - 1].to,\n      to: 'cancelled',\n      reason: `Task cancelled: ${reason}`,\n      triggeredBy: 'system',\n    });\n\n    this.emitSwarmEvent({\n      id: generateId('event'),\n      timestamp: new Date(),\n      type: 'task.cancelled',\n      source: this.swarmId.id,\n      data: { task, reason },\n      broadcast: false,\n      processed: false,\n    });\n  }\n\n  // ===== ADVANCED FEATURES =====\n\n  async selectAgentForTask(task: TaskDefinition): Promise<string | null> {\n    const availableAgents = Array.from(this.agents.values()).filter(\n      (agent) => agent.status === 'idle' && this.agentCanHandleTask(agent, task),\n    );\n\n    if (availableAgents.length === 0) {\n      return null;\n    }\n\n    // Score agents based on multiple criteria\n    const scoredAgents = availableAgents.map((agent) => ({\n      agent,\n      score: this.calculateAgentScore(agent, task),\n    }));\n\n    // Sort by score (highest first)\n    scoredAgents.sort((a, b) => b.score - a.score);\n\n    return scoredAgents[0].agent.id.id;\n  }\n\n  private calculateAgentScore(agent: AgentState, task: TaskDefinition): number {\n    let score = 0;\n\n    // Capability match (40% weight)\n    const capabilityMatch = this.calculateCapabilityMatch(agent, task);\n    score += capabilityMatch * 0.4;\n\n    // Performance history (30% weight)\n    const performanceScore = agent.metrics.successRate * agent.capabilities.reliability;\n    score += performanceScore * 0.3;\n\n    // Current workload (20% weight)\n    const workloadScore = 1 - agent.workload;\n    score += workloadScore * 0.2;\n\n    // Quality rating (10% weight)\n    score += agent.capabilities.quality * 0.1;\n\n    return score;\n  }\n\n  private calculateCapabilityMatch(agent: AgentState, task: TaskDefinition): number {\n    const requiredCapabilities = task.requirements.capabilities;\n    let matches = 0;\n    let total = requiredCapabilities.length;\n\n    for (const capability of requiredCapabilities) {\n      if (this.agentHasCapability(agent, capability)) {\n        matches++;\n      }\n    }\n\n    return total > 0 ? matches / total : 1.0;\n  }\n\n  private agentHasCapability(agent: AgentState, capability: string): boolean {\n    const caps = agent.capabilities;\n\n    switch (capability) {\n      case 'code-generation':\n        return caps.codeGeneration;\n      case 'code-review':\n        return caps.codeReview;\n      case 'testing':\n        return caps.testing;\n      case 'documentation':\n        return caps.documentation;\n      case 'research':\n        return caps.research;\n      case 'analysis':\n        return caps.analysis;\n      case 'web-search':\n        return caps.webSearch;\n      case 'api-integration':\n        return caps.apiIntegration;\n      case 'file-system':\n        return caps.fileSystem;\n      case 'terminal-access':\n        return caps.terminalAccess;\n      case 'validation':\n        return caps.testing; // Validation is part of testing capability\n      default:\n        return (\n          caps.domains.includes(capability) ||\n          caps.languages.includes(capability) ||\n          caps.frameworks.includes(capability) ||\n          caps.tools.includes(capability)\n        );\n    }\n  }\n\n  private agentCanHandleTask(agent: AgentState, task: TaskDefinition): boolean {\n    // Check if agent type is suitable\n    if (task.requirements.agentType && agent.type !== task.requirements.agentType) {\n      return false;\n    }\n\n    // Check if agent has required capabilities\n    for (const capability of task.requirements.capabilities) {\n      if (!this.agentHasCapability(agent, capability)) {\n        return false;\n      }\n    }\n\n    // Check reliability requirement\n    if (\n      task.requirements.minReliability &&\n      agent.capabilities.reliability < task.requirements.minReliability\n    ) {\n      return false;\n    }\n\n    // Check if agent has capacity\n    if (agent.workload >= 1.0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // ===== HELPER METHODS =====\n\n  private generateSwarmId(): SwarmId {\n    return {\n      id: generateId('swarm'),\n      timestamp: Date.now(),\n      namespace: 'default',\n    };\n  }\n\n  private mergeWithDefaults(config: Partial<SwarmConfig>): SwarmConfig {\n    return {\n      name: 'Unnamed Swarm',\n      description: 'Auto-generated swarm',\n      version: '1.0.0',\n      mode: 'centralized',\n      strategy: 'auto',\n      coordinationStrategy: {\n        name: 'default',\n        description: 'Default coordination strategy',\n        agentSelection: 'capability-based',\n        taskScheduling: 'priority',\n        loadBalancing: 'work-stealing',\n        faultTolerance: 'retry',\n        communication: 'event-driven',\n      },\n      maxAgents: 10,\n      maxTasks: 100,\n      maxDuration: 4 * 60 * 60 * 1000, // 4 hours\n      resourceLimits: {\n        memory: SWARM_CONSTANTS.DEFAULT_MEMORY_LIMIT,\n        cpu: SWARM_CONSTANTS.DEFAULT_CPU_LIMIT,\n        disk: SWARM_CONSTANTS.DEFAULT_DISK_LIMIT,\n      },\n      qualityThreshold: SWARM_CONSTANTS.DEFAULT_QUALITY_THRESHOLD,\n      reviewRequired: true,\n      testingRequired: true,\n      monitoring: {\n        metricsEnabled: true,\n        loggingEnabled: true,\n        tracingEnabled: false,\n        metricsInterval: 10000,\n        heartbeatInterval: SWARM_CONSTANTS.DEFAULT_HEARTBEAT_INTERVAL,\n        healthCheckInterval: 30000,\n        retentionPeriod: 24 * 60 * 60 * 1000, // 24 hours\n        maxLogSize: 100 * 1024 * 1024, // 100MB\n        maxMetricPoints: 10000,\n        alertingEnabled: true,\n        alertThresholds: {\n          errorRate: 0.1,\n          responseTime: 5000,\n          memoryUsage: 0.8,\n          cpuUsage: 0.8,\n        },\n        exportEnabled: false,\n        exportFormat: 'json',\n        exportDestination: '/tmp/swarm-metrics',\n      },\n      memory: {\n        namespace: 'default',\n        partitions: [],\n        permissions: {\n          read: 'swarm',\n          write: 'team',\n          delete: 'private',\n          share: 'team',\n        },\n        persistent: true,\n        backupEnabled: true,\n        distributed: false,\n        consistency: 'eventual',\n        cacheEnabled: true,\n        compressionEnabled: false,\n      },\n      security: {\n        authenticationRequired: false,\n        authorizationRequired: false,\n        encryptionEnabled: false,\n        defaultPermissions: ['read', 'write'],\n        adminRoles: ['admin', 'coordinator'],\n        auditEnabled: true,\n        auditLevel: 'info',\n        inputValidation: true,\n        outputSanitization: true,\n      },\n      performance: {\n        maxConcurrency: 10,\n        defaultTimeout: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        cacheEnabled: true,\n        cacheSize: 100,\n        cacheTtl: 3600000, // 1 hour\n        optimizationEnabled: true,\n        adaptiveScheduling: true,\n        predictiveLoading: false,\n        resourcePooling: true,\n        connectionPooling: true,\n        memoryPooling: false,\n      },\n      ...config,\n    };\n  }\n\n  private initializeMetrics(): SwarmMetrics {\n    return {\n      throughput: 0,\n      latency: 0,\n      efficiency: 0,\n      reliability: 0,\n      averageQuality: 0,\n      defectRate: 0,\n      reworkRate: 0,\n      resourceUtilization: {},\n      costEfficiency: 0,\n      agentUtilization: 0,\n      agentSatisfaction: 0,\n      collaborationEffectiveness: 0,\n      scheduleVariance: 0,\n      deadlineAdherence: 0,\n    };\n  }\n\n  private initializeProgress(): SwarmProgress {\n    return {\n      totalTasks: 0,\n      completedTasks: 0,\n      failedTasks: 0,\n      runningTasks: 0,\n      estimatedCompletion: new Date(),\n      timeRemaining: 0,\n      percentComplete: 0,\n      averageQuality: 0,\n      passedReviews: 0,\n      passedTests: 0,\n      resourceUtilization: {},\n      costSpent: 0,\n      activeAgents: 0,\n      idleAgents: 0,\n      busyAgents: 0,\n    };\n  }\n\n  // ===== EVENT HANDLING =====\n\n  private setupEventHandlers(): void {\n    // Handle agent heartbeats\n    this.on('agent.heartbeat', (data: any) => {\n      const agent = this.agents.get(data.agentId);\n      if (agent) {\n        agent.lastHeartbeat = new Date();\n        agent.health = data.health || 1.0;\n        agent.metrics = { ...agent.metrics, ...data.metrics };\n      }\n    });\n\n    // Handle task completion events\n    this.on('task.completed', (data: any) => {\n      this.updateSwarmMetrics();\n      this.checkObjectiveCompletion();\n    });\n\n    // Handle task failure events\n    this.on('task.failed', (data: any) => {\n      this.updateSwarmMetrics();\n      this.checkObjectiveFailure(data.task);\n    });\n\n    // Handle agent errors\n    this.on('agent.error', (data: any) => {\n      this.handleAgentError(data.agentId, data.error);\n    });\n  }\n\n  // ===== SWARM EVENT EMITTER IMPLEMENTATION =====\n\n  emitSwarmEvent(event: SwarmEvent): boolean {\n    this.events.push(event);\n\n    // Limit event history\n    if (this.events.length > 1000) {\n      this.events = this.events.slice(-500);\n    }\n\n    return this.emit(event.type, event);\n  }\n\n  emitSwarmEvents(events: SwarmEvent[]): boolean {\n    let success = true;\n    for (const event of events) {\n      if (!this.emitSwarmEvent(event)) {\n        success = false;\n      }\n    }\n    return success;\n  }\n\n  onSwarmEvent(type: EventType, handler: (event: SwarmEvent) => void): this {\n    return this.on(type, handler);\n  }\n\n  offSwarmEvent(type: EventType, handler: (event: SwarmEvent) => void): this {\n    return this.off(type, handler);\n  }\n\n  filterEvents(predicate: (event: SwarmEvent) => boolean): SwarmEvent[] {\n    return this.events.filter(predicate);\n  }\n\n  correlateEvents(correlationId: string): SwarmEvent[] {\n    return this.events.filter((event) => event.correlationId === correlationId);\n  }\n\n  // ===== PUBLIC API METHODS =====\n\n  getSwarmId(): SwarmId {\n    return this.swarmId;\n  }\n\n  getStatus(): SwarmStatus {\n    return this.status;\n  }\n\n  getAgents(): AgentState[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgent(agentId: string): AgentState | undefined {\n    return this.agents.get(agentId);\n  }\n\n  getTasks(): TaskDefinition[] {\n    return Array.from(this.tasks.values());\n  }\n\n  getTask(taskId: string): TaskDefinition | undefined {\n    return this.tasks.get(taskId);\n  }\n\n  getObjectives(): SwarmObjective[] {\n    return Array.from(this.objectives.values());\n  }\n\n  getObjective(objectiveId: string): SwarmObjective | undefined {\n    return this.objectives.get(objectiveId);\n  }\n\n  getMetrics(): SwarmMetrics {\n    return { ...this.metrics };\n  }\n\n  getEvents(): SwarmEvent[] {\n    return [...this.events];\n  }\n\n  isRunning(): boolean {\n    return this._isRunning;\n  }\n\n  getUptime(): number {\n    if (!this.startTime) return 0;\n    const endTime = this.endTime || new Date();\n    return endTime.getTime() - this.startTime.getTime();\n  }\n\n  getSwarmStatus(): {\n    status: SwarmStatus;\n    objectives: number;\n    tasks: { completed: number; failed: number; total: number };\n    agents: { total: number };\n  } {\n    const tasks = Array.from(this.tasks.values());\n    const completedTasks = tasks.filter((t) => t.status === 'completed').length;\n    const failedTasks = tasks.filter((t) => t.status === 'failed').length;\n\n    return {\n      status: this.status,\n      objectives: this.objectives.size,\n      tasks: {\n        completed: completedTasks,\n        failed: failedTasks,\n        total: tasks.length,\n      },\n      agents: {\n        total: this.agents.size,\n      },\n    };\n  }\n\n  // ===== STUB METHODS (TO BE IMPLEMENTED) =====\n\n  private async validateConfiguration(): Promise<ValidationResult> {\n    // Implementation needed\n    return {\n      valid: true,\n      errors: [],\n      warnings: [],\n      validatedAt: new Date(),\n      validator: 'SwarmCoordinator',\n      context: {},\n    };\n  }\n\n  private async initializeSubsystems(): Promise<void> {\n    // Implementation needed\n  }\n\n  private startBackgroundProcesses(): void {\n    // Start heartbeat monitoring\n    this.heartbeatTimer = setInterval(() => {\n      this.processHeartbeats();\n    }, this.config.monitoring.heartbeatInterval);\n\n    // Start performance monitoring\n    this.monitoringTimer = setInterval(() => {\n      this.updateSwarmMetrics();\n    }, this.config.monitoring.metricsInterval);\n\n    // Start cleanup process\n    this.cleanupTimer = setInterval(() => {\n      this.performCleanup();\n    }, 60000); // Every minute\n  }\n\n  private stopBackgroundProcesses(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = undefined;\n    }\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n    }\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n    }\n    // Stop all execution intervals\n    if (this.executionIntervals) {\n      for (const [objectiveId, interval] of this.executionIntervals) {\n        clearInterval(interval);\n      }\n      this.executionIntervals.clear();\n    }\n  }\n\n  private async stopAllAgents(): Promise<void> {\n    const stopPromises = Array.from(this.agents.keys()).map((agentId) => this.stopAgent(agentId));\n    await Promise.allSettled(stopPromises);\n  }\n\n  private async completeRunningTasks(): Promise<void> {\n    const runningTasks = Array.from(this.tasks.values()).filter(\n      (task) => task.status === 'running',\n    );\n\n    // Wait for tasks to complete or timeout\n    const timeout = 30000; // 30 seconds\n    const deadline = Date.now() + timeout;\n\n    while (runningTasks.some((task) => task.status === 'running') && Date.now() < deadline) {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    // Cancel any remaining running tasks\n    for (const task of runningTasks) {\n      if (task.status === 'running') {\n        await this.cancelTask(task.id.id, 'Swarm shutdown');\n      }\n    }\n  }\n\n  private async saveState(): Promise<void> {\n    // Implementation needed - save swarm state to persistence layer\n  }\n\n  private determineRequiredAgentTypes(strategy: SwarmStrategy): AgentType[] {\n    switch (strategy) {\n      case 'research':\n        return ['researcher', 'analyst'];\n      case 'development':\n        return ['coder', 'tester', 'reviewer'];\n      case 'analysis':\n        return ['analyst', 'researcher'];\n      case 'testing':\n        return ['tester', 'coder'];\n      case 'optimization':\n        return ['analyst', 'coder'];\n      case 'maintenance':\n        return ['coder', 'monitor'];\n      default:\n        return ['coordinator', 'coder', 'analyst'];\n    }\n  }\n\n  private getAgentTypeInstructions(agentType: string): string {\n    switch (agentType) {\n      case 'coder':\n        return '- Focus on implementation, code quality, and best practices\\n- Create clean, maintainable code\\n- Consider architecture and design patterns';\n      case 'tester':\n        return '- Focus on testing, edge cases, and quality assurance\\n- Create comprehensive test suites\\n- Identify potential bugs and issues';\n      case 'analyst':\n        return '- Focus on analysis, research, and understanding\\n- Break down complex problems\\n- Provide insights and recommendations';\n      case 'researcher':\n        return '- Focus on gathering information and best practices\\n- Research existing solutions and patterns\\n- Document findings and recommendations';\n      case 'reviewer':\n        return '- Focus on code review and quality checks\\n- Identify improvements and optimizations\\n- Ensure standards compliance';\n      case 'coordinator':\n        return '- Focus on coordination and integration\\n- Ensure all parts work together\\n- Manage dependencies and interfaces';\n      case 'monitor':\n        return '- Focus on monitoring and observability\\n- Set up logging and metrics\\n- Ensure system health tracking';\n      default:\n        return '- Execute the task to the best of your ability\\n- Follow best practices for your domain';\n    }\n  }\n\n  private getAgentCapabilities(agentType: string): string[] {\n    switch (agentType) {\n      case 'coder':\n        return ['code-generation', 'file-system', 'debugging'];\n      case 'tester':\n        return ['testing', 'code-generation', 'analysis'];\n      case 'analyst':\n        return ['analysis', 'documentation', 'research'];\n      case 'researcher':\n        return ['research', 'documentation', 'analysis'];\n      case 'reviewer':\n        return ['code-review', 'analysis', 'documentation'];\n      case 'coordinator':\n        return ['coordination', 'analysis', 'documentation'];\n      case 'monitor':\n        return ['monitoring', 'analysis', 'documentation'];\n      default:\n        return ['analysis', 'documentation'];\n    }\n  }\n\n  private async decomposeObjective(objective: SwarmObjective): Promise<TaskDefinition[]> {\n    // Decompose objective into tasks with clear instructions for Claude\n    this.logger.info('Decomposing objective', {\n      objectiveId: objective.id,\n      description: objective.description,\n    });\n\n    const tasks: TaskDefinition[] = [];\n\n    // Extract target directory from objective\n    const targetDirMatch = objective.description.match(\n      /(?:in|to|at)\\s+([^\\s]+\\/[^\\s]+)|([^\\s]+\\/[^\\s]+)$/,\n    );\n    const targetDir = targetDirMatch ? targetDirMatch[1] || targetDirMatch[2] : null;\n    const targetPath = targetDir\n      ? targetDir.startsWith('/')\n        ? targetDir\n        : `${getClaudeFlowRoot()}/${targetDir}`\n      : null;\n\n    // Check if objective requests \"each agent\" or \"each agent type\" for parallel execution\n    const eachAgentPattern = /\\beach\\s+agent(?:\\s+type)?\\b/i;\n    const requestsParallelAgents = eachAgentPattern.test(objective.description);\n\n    // Create tasks with specific prompts for Claude\n    if (requestsParallelAgents && this.config.mode === 'parallel') {\n      // Create parallel tasks for each agent type\n      const agentTypes = this.determineRequiredAgentTypes(objective.strategy);\n      this.logger.info('Creating parallel tasks for each agent type', {\n        agentTypes,\n        mode: this.config.mode,\n      });\n\n      for (const agentType of agentTypes) {\n        const taskId = this.createTaskForObjective(`${agentType}-task`, agentType as TaskType, {\n          title: `${agentType.charAt(0).toUpperCase() + agentType.slice(1)} Agent Task`,\n          description: `${agentType} agent executing: ${objective.description}`,\n          instructions: `You are a ${agentType} agent. Please execute the following task from your perspective:\n\n${objective.description}\n\n${targetPath ? `Target Directory: ${targetPath}` : ''}\n\nAs a ${agentType} agent, focus on aspects relevant to your role:\n${this.getAgentTypeInstructions(agentType)}\n\nWork independently but be aware that other agents are working on this same objective from their perspectives.`,\n          priority: 'high' as TaskPriority,\n          estimatedDuration: 10 * 60 * 1000,\n          requiredCapabilities: this.getAgentCapabilities(agentType),\n        });\n        tasks.push(taskId);\n      }\n    } else if (objective.strategy === 'development') {\n      // Task 1: Analyze and Plan\n      const task1 = this.createTaskForObjective('analyze-requirements', 'analysis', {\n        title: 'Analyze Requirements and Plan Implementation',\n        description: `Analyze the requirements and create a plan for: ${objective.description}`,\n        instructions: `Please analyze the following request and create a detailed implementation plan:\n\nRequest: ${objective.description}\n\nTarget Directory: ${targetPath || 'Not specified - determine appropriate location'}\n\nYour analysis should include:\n1. Understanding of what needs to be built\n2. Technology choices and rationale\n3. Project structure and file organization\n4. Key components and their responsibilities\n5. Any external dependencies needed\n\nPlease provide a clear, structured plan that the next tasks can follow.`,\n        priority: 'high' as TaskPriority,\n        estimatedDuration: 5 * 60 * 1000,\n        requiredCapabilities: ['analysis', 'documentation'],\n      });\n      tasks.push(task1);\n\n      // Task 2: Implementation\n      const task2 = this.createTaskForObjective('create-implementation', 'coding', {\n        title: 'Implement the Solution',\n        description: `Create the implementation for: ${objective.description}`,\n        instructions: `Please implement the following request:\n\nRequest: ${objective.description}\n\nTarget Directory: ${targetPath || 'Create in an appropriate location'}\n\nBased on the analysis from the previous task, please:\n1. Create all necessary files and directories\n2. Implement the core functionality as requested\n3. Ensure the code is well-structured and follows best practices\n4. Include appropriate error handling\n5. Add any necessary configuration files (package.json, requirements.txt, etc.)\n\nFocus on creating a working implementation that matches the user's request exactly.`,\n        priority: 'high' as TaskPriority,\n        estimatedDuration: 10 * 60 * 1000,\n        requiredCapabilities: ['code-generation', 'file-system'],\n        dependencies: [task1.id.id],\n      });\n      tasks.push(task2);\n\n      // Task 3: Testing\n      const task3 = this.createTaskForObjective('write-tests', 'testing', {\n        title: 'Create Tests',\n        description: `Write tests for the implementation`,\n        instructions: `Please create comprehensive tests for the implementation created in the previous task.\n\nTarget Directory: ${targetPath || 'Use the same directory as the implementation'}\n\nCreate appropriate test files that:\n1. Test the main functionality\n2. Cover edge cases\n3. Ensure the implementation works as expected\n4. Use appropriate testing frameworks for the technology stack\n5. Include both unit tests and integration tests where applicable`,\n        priority: 'medium' as TaskPriority,\n        estimatedDuration: 5 * 60 * 1000,\n        requiredCapabilities: ['testing', 'code-generation'],\n        dependencies: [task2.id.id],\n      });\n      tasks.push(task3);\n\n      // Task 4: Documentation\n      const task4 = this.createTaskForObjective('create-documentation', 'documentation', {\n        title: 'Create Documentation',\n        description: `Document the implementation`,\n        instructions: `Please create comprehensive documentation for the implemented solution.\n\nTarget Directory: ${targetPath || 'Use the same directory as the implementation'}\n\nCreate documentation that includes:\n1. README.md with project overview, setup instructions, and usage examples\n2. API documentation (if applicable)\n3. Configuration options\n4. Architecture overview\n5. Deployment instructions (if applicable)\n6. Any other relevant documentation\n\nMake sure the documentation is clear, complete, and helps users understand and use the implementation.`,\n        priority: 'medium' as TaskPriority,\n        estimatedDuration: 5 * 60 * 1000,\n        requiredCapabilities: ['documentation'],\n        dependencies: [task2.id.id],\n      });\n      tasks.push(task4);\n    } else {\n      // For other strategies, create a comprehensive single task\n      tasks.push(\n        this.createTaskForObjective('execute-objective', 'generic', {\n          title: 'Execute Objective',\n          description: objective.description,\n          instructions: `Please complete the following request:\n\n${objective.description}\n\n${targetPath ? `Target Directory: ${targetPath}` : ''}\n\nPlease analyze what is being requested and implement it appropriately. This may involve:\n- Creating files and directories\n- Writing code\n- Setting up configurations\n- Creating documentation\n- Any other tasks necessary to fulfill the request\n\nEnsure your implementation is complete, well-structured, and follows best practices.`,\n          priority: 'high' as TaskPriority,\n          estimatedDuration: 15 * 60 * 1000,\n          requiredCapabilities: ['code-generation', 'file-system', 'documentation'],\n        }),\n      );\n    }\n\n    this.logger.info('Objective decomposed', {\n      objectiveId: objective.id,\n      taskCount: tasks.length,\n    });\n\n    return tasks;\n  }\n\n  private createTaskForObjective(id: string, type: TaskType, params: any): TaskDefinition {\n    const taskId: TaskId = {\n      id: generateId('task'),\n      swarmId: this.swarmId.id,\n      sequence: this.tasks.size + 1,\n      priority: 1,\n    };\n\n    return {\n      id: taskId,\n      type,\n      name: params.title,\n      description: params.description,\n      instructions: params.description,\n      requirements: {\n        capabilities: params.requiredCapabilities || [],\n        tools: this.getRequiredTools(type),\n        permissions: this.getRequiredPermissions(type),\n      },\n      constraints: {\n        dependencies: params.dependencies || [],\n        dependents: [],\n        conflicts: [],\n        maxRetries: SWARM_CONSTANTS.MAX_RETRIES,\n        timeoutAfter: params.estimatedDuration || SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n      },\n      priority: params.priority || 'medium',\n      input: {\n        description: params.description,\n        objective: params.description,\n      },\n      context: {\n        objectiveId: id,\n        targetDir: params.targetDir,\n      },\n      examples: [],\n      status: 'created',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      attempts: [],\n      statusHistory: [\n        {\n          timestamp: new Date(),\n          from: 'created' as TaskStatus,\n          to: 'created' as TaskStatus,\n          reason: 'Task created',\n          triggeredBy: 'system',\n        },\n      ],\n    };\n  }\n\n  private analyzeDependencies(tasks: TaskDefinition[]): any[] {\n    // Implementation needed - analyze task dependencies\n    return [];\n  }\n\n  private convertDependenciesToTaskDependencies(dependencies: Map<string, string[]>): any[] {\n    // Convert decomposition dependencies to task dependencies format\n    const result: any[] = [];\n    dependencies.forEach((deps, taskId) => {\n      deps.forEach((dependsOn) => {\n        result.push({\n          taskId,\n          dependsOn,\n          type: 'sequential',\n        });\n      });\n    });\n    return result;\n  }\n\n  private async ensureRequiredAgents(objective: SwarmObjective): Promise<void> {\n    // Implementation needed - ensure required agents are available\n  }\n\n  private async scheduleInitialTasks(objective: SwarmObjective): Promise<void> {\n    this.logger.info('Scheduling initial tasks for objective', {\n      objectiveId: objective.id,\n      taskCount: objective.tasks.length,\n    });\n\n    // Extract target directory from objective description\n    const targetDirPatterns = [\n      /in\\s+([^\\s]+\\/?)$/i,\n      /(?:in|to|at)\\s+([^\\s]+\\/[^\\s]+)/i,\n      /([^\\s]+\\/[^\\s]+)$/,\n      /examples\\/[^\\s]+/i,\n    ];\n\n    let objectiveTargetDir = null;\n    for (const pattern of targetDirPatterns) {\n      const match = objective.description.match(pattern);\n      if (match) {\n        objectiveTargetDir = match[1] || match[0];\n        break;\n      }\n    }\n\n    // Add all tasks to the tasks map\n    for (const task of objective.tasks) {\n      task.context.objectiveId = objective.id;\n      // Propagate target directory to all tasks\n      if (objectiveTargetDir && !task.context.targetDir) {\n        task.context.targetDir = objectiveTargetDir;\n      }\n      this.tasks.set(task.id.id, task);\n\n      // Track task in JSON output if enabled\n      this.trackTaskInJsonOutput(task);\n    }\n\n    // Find tasks with no dependencies and queue them\n    const initialTasks = objective.tasks.filter(\n      (task) => !task.constraints.dependencies || task.constraints.dependencies.length === 0,\n    );\n\n    this.logger.info('Found initial tasks without dependencies', {\n      count: initialTasks.length,\n      tasks: initialTasks.map((t) => ({ id: t.id.id, name: t.name })),\n    });\n\n    // Queue initial tasks for execution\n    for (const task of initialTasks) {\n      task.status = 'queued';\n      task.updatedAt = new Date();\n\n      // Update status history\n      task.statusHistory.push({\n        timestamp: new Date(),\n        from: 'created' as TaskStatus,\n        to: 'queued' as TaskStatus,\n        reason: 'Task queued for execution',\n        triggeredBy: 'system',\n      });\n\n      // Emit task queued event\n      this.emitSwarmEvent({\n        id: generateId('event'),\n        timestamp: new Date(),\n        type: 'task.queued',\n        source: this.swarmId.id,\n        data: { task },\n        broadcast: false,\n        processed: false,\n      });\n    }\n\n    // Update objective progress\n    objective.progress.totalTasks = objective.tasks.length;\n    objective.progress.runningTasks = 0;\n    objective.progress.completedTasks = 0;\n    objective.progress.failedTasks = 0;\n  }\n\n  private startTaskExecutionLoop(objective: SwarmObjective): void {\n    this.logger.info('Starting task execution loop for objective', {\n      objectiveId: objective.id,\n    });\n\n    // Create an interval to process queued tasks\n    const executionInterval = setInterval(async () => {\n      try {\n        // Check if objective is still executing\n        if (objective.status !== 'executing') {\n          clearInterval(executionInterval);\n          return;\n        }\n\n        // Find queued tasks\n        const queuedTasks = Array.from(this.tasks.values()).filter(\n          (task) => task.context?.objectiveId === objective.id && task.status === 'queued',\n        );\n\n        // Find idle agents\n        const idleAgents = Array.from(this.agents.values()).filter(\n          (agent) => agent.status === 'idle',\n        );\n\n        if (queuedTasks.length > 0 && idleAgents.length > 0) {\n          this.logger.debug('Processing queued tasks', {\n            queuedTasks: queuedTasks.length,\n            idleAgents: idleAgents.length,\n          });\n        }\n\n        // Assign tasks to idle agents\n        for (const task of queuedTasks) {\n          if (idleAgents.length === 0) break;\n\n          // Find suitable agent\n          const suitableAgents = idleAgents.filter((agent) => this.agentCanHandleTask(agent, task));\n\n          if (suitableAgents.length > 0) {\n            // Assign to first suitable agent\n            await this.assignTask(task.id.id, suitableAgents[0].id.id);\n\n            // Remove agent from idle list\n            const agentIndex = idleAgents.findIndex((a) => a.id.id === suitableAgents[0].id.id);\n            if (agentIndex >= 0) {\n              idleAgents.splice(agentIndex, 1);\n            }\n          }\n        }\n\n        // Check for completed tasks and process dependencies\n        const completedTasks = Array.from(this.tasks.values()).filter(\n          (task) => task.context?.objectiveId === objective.id && task.status === 'completed',\n        );\n\n        // Find tasks that can now be queued (dependencies met)\n        const pendingTasks = Array.from(this.tasks.values()).filter(\n          (task) =>\n            task.context?.objectiveId === objective.id &&\n            task.status === 'created' &&\n            this.taskDependenciesMet(task, completedTasks),\n        );\n\n        // Queue tasks with met dependencies\n        for (const task of pendingTasks) {\n          task.status = 'queued';\n          task.updatedAt = new Date();\n\n          task.statusHistory.push({\n            timestamp: new Date(),\n            from: 'created' as TaskStatus,\n            to: 'queued' as TaskStatus,\n            reason: 'Dependencies met, task queued',\n            triggeredBy: 'system',\n          });\n\n          this.emitSwarmEvent({\n            id: generateId('event'),\n            timestamp: new Date(),\n            type: 'task.queued',\n            source: this.swarmId.id,\n            data: { task },\n            broadcast: false,\n            processed: false,\n          });\n        }\n\n        // Check for stuck/timed out tasks\n        const runningTasks = Array.from(this.tasks.values()).filter(\n          (task) => task.context?.objectiveId === objective.id && task.status === 'running',\n        );\n\n        const now = Date.now();\n        for (const task of runningTasks) {\n          if (task.startedAt) {\n            const runtime = now - task.startedAt.getTime();\n            const timeout = task.constraints?.timeoutAfter || SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT;\n\n            if (runtime > timeout) {\n              this.logger.warn('Task timed out', {\n                taskId: task.id.id,\n                runtime: Math.round(runtime / 1000),\n                timeout: Math.round(timeout / 1000),\n              });\n\n              // Mark task as failed due to timeout\n              task.status = 'failed';\n              task.completedAt = new Date();\n              task.error = {\n                type: 'TimeoutError',\n                message: `Task exceeded timeout of ${timeout}ms`,\n                code: 'TASK_TIMEOUT',\n                context: { taskId: task.id.id, runtime },\n                recoverable: true,\n                retryable: true,\n              };\n\n              // Update agent state if assigned\n              if (task.assignedTo) {\n                const agent = this.agents.get(task.assignedTo.id);\n                if (agent) {\n                  agent.status = 'idle';\n                  agent.currentTask = undefined;\n                  agent.metrics.tasksFailed++;\n                }\n              }\n\n              // Emit timeout event\n              this.emitSwarmEvent({\n                id: generateId('event'),\n                timestamp: new Date(),\n                type: 'task.failed',\n                source: this.swarmId.id,\n                data: { task, reason: 'timeout' },\n                broadcast: false,\n                processed: false,\n              });\n            }\n          }\n        }\n\n        // Update objective progress\n        const allTasks = Array.from(this.tasks.values()).filter(\n          (task) => task.context?.objectiveId === objective.id,\n        );\n\n        objective.progress.totalTasks = allTasks.length;\n        objective.progress.completedTasks = allTasks.filter((t) => t.status === 'completed').length;\n        objective.progress.failedTasks = allTasks.filter((t) => t.status === 'failed').length;\n        objective.progress.runningTasks = allTasks.filter((t) => t.status === 'running').length;\n        objective.progress.percentComplete =\n          objective.progress.totalTasks > 0\n            ? (objective.progress.completedTasks / objective.progress.totalTasks) * 100\n            : 0;\n\n        // Check if objective is complete\n        if (\n          objective.progress.completedTasks + objective.progress.failedTasks ===\n          objective.progress.totalTasks\n        ) {\n          objective.status = objective.progress.failedTasks === 0 ? 'completed' : 'failed';\n          objective.completedAt = new Date();\n          clearInterval(executionInterval);\n\n          this.logger.info('Objective completed', {\n            objectiveId: objective.id,\n            status: objective.status,\n            completedTasks: objective.progress.completedTasks,\n            failedTasks: objective.progress.failedTasks,\n          });\n\n          this.emitSwarmEvent({\n            id: generateId('event'),\n            timestamp: new Date(),\n            type: objective.status === 'completed' ? 'objective.completed' : 'objective.failed',\n            source: this.swarmId.id,\n            data: { objective },\n            broadcast: true,\n            processed: false,\n          });\n        }\n      } catch (error) {\n        this.logger.error('Error in task execution loop', { error });\n      }\n    }, 2000); // Check every 2 seconds\n\n    // Store interval reference for cleanup\n    if (!this.executionIntervals) {\n      this.executionIntervals = new Map();\n    }\n    this.executionIntervals.set(objective.id, executionInterval);\n  }\n\n  private taskDependenciesMet(task: TaskDefinition, completedTasks: TaskDefinition[]): boolean {\n    if (!task.constraints.dependencies || task.constraints.dependencies.length === 0) {\n      return true;\n    }\n\n    const completedTaskIds = completedTasks.map((t) => t.id.id);\n    return task.constraints.dependencies.every((dep) => {\n      // Handle both string and TaskId object dependencies\n      const depId = typeof dep === 'string' ? dep : dep.id;\n      return completedTaskIds.includes(depId);\n    });\n  }\n\n  private getNextInstanceNumber(type: AgentType): number {\n    const agentsOfType = Array.from(this.agents.values()).filter((agent) => agent.type === type);\n    return agentsOfType.length + 1;\n  }\n\n  private getDefaultPermissions(type: AgentType): string[] {\n    switch (type) {\n      case 'coordinator':\n        return ['read', 'write', 'execute', 'admin'];\n      case 'coder':\n        return ['read', 'write', 'execute'];\n      case 'tester':\n        return ['read', 'execute'];\n      case 'reviewer':\n        return ['read', 'write'];\n      default:\n        return ['read'];\n    }\n  }\n\n  private async initializeAgentCapabilities(agent: AgentState): Promise<void> {\n    // Set capabilities based on agent type\n    switch (agent.type) {\n      case 'coordinator':\n        agent.capabilities.codeGeneration = false;\n        agent.capabilities.codeReview = true;\n        agent.capabilities.testing = false;\n        agent.capabilities.documentation = true;\n        agent.capabilities.research = true;\n        agent.capabilities.analysis = true;\n        break;\n      case 'coder':\n        agent.capabilities.codeGeneration = true;\n        agent.capabilities.codeReview = true;\n        agent.capabilities.testing = true;\n        agent.capabilities.documentation = true;\n        break;\n      case 'researcher':\n        agent.capabilities.research = true;\n        agent.capabilities.analysis = true;\n        agent.capabilities.webSearch = true;\n        agent.capabilities.documentation = true;\n        break;\n      case 'analyst':\n        agent.capabilities.analysis = true;\n        agent.capabilities.research = true;\n        agent.capabilities.documentation = true;\n        break;\n      case 'reviewer':\n        agent.capabilities.codeReview = true;\n        agent.capabilities.testing = true;\n        agent.capabilities.documentation = true;\n        break;\n      case 'tester':\n        agent.capabilities.testing = true;\n        agent.capabilities.codeReview = true;\n        break;\n    }\n  }\n\n  private async initializeAgentEnvironment(agent: AgentState): Promise<void> {\n    // Implementation needed - setup agent environment\n  }\n\n  private startAgentHeartbeat(agent: AgentState): void {\n    // Implementation needed - start agent heartbeat\n  }\n\n  private stopAgentHeartbeat(agent: AgentState): void {\n    // Implementation needed - stop agent heartbeat\n  }\n\n  private async cleanupAgentEnvironment(agent: AgentState): Promise<void> {\n    // Implementation needed - cleanup agent environment\n  }\n\n  private getRequiredCapabilities(type: TaskType): string[] {\n    switch (type) {\n      case 'coding':\n        return ['code-generation', 'file-system'];\n      case 'testing':\n        return ['testing', 'code-review'];\n      case 'research':\n        return ['research', 'web-search'];\n      case 'analysis':\n        return ['analysis', 'documentation'];\n      case 'review':\n        return ['code-review', 'documentation'];\n      case 'documentation':\n        return ['documentation'];\n      default:\n        return [];\n    }\n  }\n\n  private getRequiredTools(type: TaskType): string[] {\n    switch (type) {\n      case 'coding':\n        return ['editor', 'compiler', 'debugger'];\n      case 'testing':\n        return ['test-runner', 'coverage-tool'];\n      case 'research':\n        return ['web-browser', 'search-engine'];\n      case 'analysis':\n        return ['data-tools', 'visualization'];\n      default:\n        return [];\n    }\n  }\n\n  private getRequiredPermissions(type: TaskType): string[] {\n    switch (type) {\n      case 'coding':\n        return ['read', 'write', 'execute'];\n      case 'testing':\n        return ['read', 'execute'];\n      case 'research':\n        return ['read', 'network'];\n      default:\n        return ['read'];\n    }\n  }\n\n  private async executeTaskWithAgent(task: TaskDefinition, agent: AgentState): Promise<any> {\n    this.logger.info('Executing task with agent', {\n      taskId: task.id.id,\n      taskName: task.name,\n      agentId: agent.id.id,\n      agentName: agent.name,\n    });\n\n    // Extract target directory from task\n    const targetDir = this.extractTargetDirectory(task);\n\n    try {\n      // Use Claude Flow executor for full SPARC system in non-interactive mode\n      const { ClaudeFlowExecutor } = await import('./claude-flow-executor.ts');\n      const executor = new ClaudeFlowExecutor({\n        logger: this.logger,\n        claudeFlowPath: getClaudeFlowBin(),\n        enableSparc: true,\n        verbose: this.config.logging?.level === 'debug',\n        timeoutMinutes: this.config.taskTimeoutMinutes,\n      });\n\n      const result = await executor.executeTask(task, agent, targetDir);\n\n      this.logger.info('Task execution completed', {\n        taskId: task.id.id,\n        success: true,\n        outputLength: JSON.stringify(result).length,\n      });\n\n      return result;\n    } catch (error) {\n      this.logger.error('Task execution failed', {\n        taskId: task.id.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private createExecutionPrompt(task: TaskDefinition): string {\n    // Create a prompt that Claude will understand\n    let prompt = `# Swarm Task Execution\\n\\n`;\n    prompt += `## Task: ${task.name}\\n\\n`;\n    prompt += `${task.instructions || task.description}\\n\\n`;\n\n    // Add working directory information if available\n    const targetDir = this.extractTargetDirectory(task);\n    if (targetDir) {\n      prompt += `## Working Directory\\n`;\n      prompt += `Please create all files in: ${targetDir}\\n\\n`;\n    }\n\n    if (task.input && Object.keys(task.input).length > 0) {\n      prompt += `## Additional Input\\n`;\n      prompt += `${JSON.stringify(task.input, null, 2)}\\n\\n`;\n    }\n\n    if (task.context && Object.keys(task.context).length > 0) {\n      prompt += `## Context\\n`;\n      prompt += `${JSON.stringify(task.context, null, 2)}\\n\\n`;\n    }\n\n    // Add execution guidelines\n    prompt += `## Guidelines\\n`;\n    prompt += `- Focus on completing this specific task\\n`;\n    prompt += `- Create all necessary files and directories\\n`;\n    prompt += `- Follow best practices for the technology being used\\n`;\n    prompt += `- Ensure the implementation is complete and functional\\n`;\n\n    return prompt;\n  }\n\n  private extractTargetDirectory(task: TaskDefinition): string | null {\n    // Try multiple patterns to find the target directory\n    const patterns = [\n      /in\\s+([^\\s]+\\/?)$/i, // \"in examples/dir\" at end\n      /(?:in|to|at)\\s+([^\\s]+\\/[^\\s]+)/i, // \"in examples/gradio\" anywhere\n      /([^\\s]+\\/[^\\s]+)$/, // \"examples/gradio\" at end\n      /examples\\/[^\\s]+/i, // specifically match examples/ paths\n    ];\n\n    let targetDir = null;\n\n    // First check task description and input\n    for (const pattern of patterns) {\n      const descMatch = task.description.match(pattern);\n      const inputMatch = task.input?.objective?.match(pattern);\n      if (descMatch || inputMatch) {\n        targetDir = (descMatch || inputMatch)[descMatch ? 1 : 0];\n        break;\n      }\n    }\n\n    // If not found and task has context with targetDir, use that\n    if (!targetDir && task.context?.targetDir) {\n      targetDir = task.context.targetDir;\n    }\n\n    // If still not found, check objective description from context\n    if (!targetDir && task.context?.objectiveId) {\n      const objective = this.objectives.get(task.context.objectiveId);\n      if (objective) {\n        for (const pattern of patterns) {\n          const match = objective.description.match(pattern);\n          if (match) {\n            targetDir = match[1] || match[0];\n            break;\n          }\n        }\n      }\n    }\n\n    if (targetDir) {\n      // Clean up the target directory\n      targetDir = targetDir.replace(/\\s+.*$/, '');\n      // Resolve relative to current directory\n      if (!targetDir.startsWith('/')) {\n        targetDir = `${getClaudeFlowRoot()}/${targetDir}`;\n      }\n    }\n\n    return targetDir;\n  }\n\n  private async executeClaudeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    prompt: string,\n    targetDir: string | null,\n  ): Promise<any> {\n    // Create unique instance ID for this execution\n    const instanceId = `swarm-${this.swarmId.id}-${task.id.id}-${Date.now()}`;\n\n    // Build Claude arguments for non-interactive execution\n    const claudeArgs = [prompt];\n\n    // Always skip permissions for swarm automation\n    claudeArgs.push('--dangerously-skip-permissions');\n\n    // Add non-interactive flags for automation\n    claudeArgs.push('-p'); // Print mode\n    claudeArgs.push('--output-format', 'stream-json');\n    claudeArgs.push('--verbose'); // Required when using stream-json with -p\n\n    // Set working directory if specified\n    if (targetDir) {\n      // Ensure directory exists\n      await Deno.mkdir(targetDir, { recursive: true });\n\n      // Add directory context to prompt\n      const enhancedPrompt = `${prompt}\\n\\n## Important: Working Directory\\nPlease ensure all files are created in: ${targetDir}`;\n      claudeArgs[0] = enhancedPrompt;\n    }\n\n    try {\n      // Check if claude command exists\n      const checkCommand = new Deno.Command('which', {\n        args: ['claude'],\n        stdout: 'piped',\n        stderr: 'piped',\n      });\n      const checkResult = await checkCommand.output();\n      if (!checkResult.success) {\n        throw new Error('Claude CLI not found. Please ensure claude is installed and in PATH.');\n      }\n\n      // Execute Claude with the prompt\n      const command = new Deno.Command('claude', {\n        args: claudeArgs,\n        cwd: targetDir || process.cwd(),\n        env: {\n          ...Deno.env.toObject(),\n          CLAUDE_INSTANCE_ID: instanceId,\n          CLAUDE_SWARM_MODE: 'true',\n          CLAUDE_SWARM_ID: this.swarmId.id,\n          CLAUDE_TASK_ID: task.id.id,\n          CLAUDE_AGENT_ID: agent.id.id,\n          CLAUDE_WORKING_DIRECTORY: targetDir || process.cwd(),\n          CLAUDE_FLOW_MEMORY_ENABLED: 'true',\n          CLAUDE_FLOW_MEMORY_NAMESPACE: `swarm-${this.swarmId.id}`,\n        },\n        stdin: 'null',\n        stdout: 'piped',\n        stderr: 'piped',\n      });\n\n      this.logger.info('Spawning Claude agent for task', {\n        taskId: task.id.id,\n        agentId: agent.id.id,\n        instanceId,\n        targetDir,\n      });\n\n      const child = command.spawn();\n      const { code, stdout, stderr } = await child.output();\n\n      if (code === 0) {\n        const output = new TextDecoder().decode(stdout);\n        this.logger.info('Claude agent completed task successfully', {\n          taskId: task.id.id,\n          outputLength: output.length,\n        });\n\n        return {\n          success: true,\n          output,\n          instanceId,\n          targetDir,\n        };\n      } else {\n        const errorOutput = new TextDecoder().decode(stderr);\n        this.logger.error(`Claude agent failed with code ${code}`, {\n          taskId: task.id.id,\n          error: errorOutput,\n        });\n        throw new Error(`Claude execution failed: ${errorOutput}`);\n      }\n    } catch (error) {\n      this.logger.error('Failed to execute Claude agent', {\n        taskId: task.id.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private determineToolsForTask(task: TaskDefinition, agent: AgentState): string[] {\n    const tools = new Set<string>();\n\n    // Basic tools for all tasks\n    tools.add('View');\n    tools.add('Edit');\n    tools.add('Bash');\n\n    // Add tools based on task type\n    switch (task.type) {\n      case 'coding':\n        tools.add('Create');\n        tools.add('Write');\n        tools.add('MultiEdit');\n        tools.add('Test');\n        break;\n      case 'testing':\n        tools.add('Test');\n        tools.add('View');\n        break;\n      case 'documentation':\n        tools.add('Write');\n        tools.add('Create');\n        break;\n      case 'analysis':\n        tools.add('Analyze');\n        tools.add('Search');\n        break;\n      case 'research':\n        tools.add('WebSearch');\n        tools.add('Search');\n        break;\n    }\n\n    // Add tools based on agent capabilities\n    if (agent.capabilities.fileSystem) {\n      tools.add('FileSystem');\n    }\n    if (agent.capabilities.terminalAccess) {\n      tools.add('Terminal');\n    }\n    if (agent.capabilities.webSearch) {\n      tools.add('WebSearch');\n    }\n    if (agent.capabilities.apiIntegration) {\n      tools.add('API');\n    }\n\n    return Array.from(tools);\n  }\n\n  private async simulateTaskExecution(\n    task: TaskDefinition,\n    agent: AgentState,\n    prompt: string,\n  ): Promise<any> {\n    // Simulate different task types with actual file operations\n    // Check if task has a target directory in the description or context\n    let workDir = `/tmp/swarm/${this.swarmId.id}/work`;\n\n    // Extract target directory from task description or input\n    // Try multiple patterns to find the target directory\n    const patterns = [\n      /in\\s+([^\\s]+\\/?)$/i, // \"in examples/dir\" at end\n      /(?:in|to|at)\\s+([^\\s]+\\/[^\\s]+)/i, // \"in examples/gradio\" anywhere\n      /([^\\s]+\\/[^\\s]+)$/, // \"examples/gradio\" at end\n      /examples\\/[^\\s]+/i, // specifically match examples/ paths\n    ];\n\n    let targetDir = null;\n    for (const pattern of patterns) {\n      const descMatch = task.description.match(pattern);\n      const inputMatch = task.input?.objective?.match(pattern);\n      if (descMatch || inputMatch) {\n        targetDir = (descMatch || inputMatch)[descMatch ? 1 : 0];\n        break;\n      }\n    }\n\n    if (targetDir) {\n      // Clean up the target directory (remove trailing words if needed)\n      targetDir = targetDir.replace(/\\s+.*$/, '');\n      // Use absolute path or resolve relative to current directory\n      workDir = targetDir.startsWith('/') ? targetDir : `${getClaudeFlowRoot()}/${targetDir}`;\n\n      this.logger.debug('Extracted target directory', {\n        original: task.description,\n        targetDir,\n        workDir,\n      });\n    }\n\n    try {\n      // Ensure work directory exists\n      await Deno.mkdir(workDir, { recursive: true });\n\n      switch (task.type) {\n        case 'coding':\n          return await this.executeCodeGenerationTask(task, workDir, agent);\n\n        case 'analysis':\n          return await this.executeAnalysisTask(task, workDir, agent);\n\n        case 'documentation':\n          return await this.executeDocumentationTask(task, workDir, agent);\n\n        case 'testing':\n          return await this.executeTestingTask(task, workDir, agent);\n\n        default:\n          return await this.executeGenericTask(task, workDir, agent);\n      }\n    } catch (error) {\n      throw new Error(\n        `Task execution failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  private async executeCodeGenerationTask(\n    task: TaskDefinition,\n    workDir: string,\n    agent: AgentState,\n  ): Promise<any> {\n    this.logger.info('Executing code generation task', { taskId: task.id.id });\n\n    // Detect technology from description\n    const description = task.description.toLowerCase();\n    const isGradio = description.includes('gradio');\n    const isPython =\n      isGradio ||\n      description.includes('python') ||\n      description.includes('fastapi') ||\n      description.includes('django');\n    const isHelloWorld = description.includes('hello') && description.includes('world');\n    const isRestAPI = description.includes('rest api') || description.includes('api');\n\n    if (isGradio) {\n      // Create a Gradio application\n      return await this.createGradioApp(task, workDir);\n    } else if (isPython && isRestAPI) {\n      // Create a Python REST API (FastAPI)\n      return await this.createPythonRestAPI(task, workDir);\n    } else if (isRestAPI) {\n      // Create a REST API application\n      const projectName = 'rest-api';\n      const projectDir = `${workDir}/${projectName}`;\n      await Deno.mkdir(projectDir, { recursive: true });\n\n      // Create main API file\n      const apiCode = `const express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'healthy',\n    service: 'REST API',\n    swarmId: '${this.swarmId.id}',\n    created: '${new Date().toISOString()}'\n  });\n});\n\n// Sample endpoints\napp.get('/api/v1/items', (req, res) => {\n  res.json({\n    items: [\n      { id: 1, name: 'Item 1', description: 'First item' },\n      { id: 2, name: 'Item 2', description: 'Second item' }\n    ],\n    total: 2\n  });\n});\n\napp.get('/api/v1/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  res.json({\n    id,\n    name: \\`Item \\${id}\\`,\n    description: \\`Description for item \\${id}\\`\n  });\n});\n\napp.post('/api/v1/items', (req, res) => {\n  const newItem = {\n    id: Date.now(),\n    ...req.body,\n    createdAt: new Date().toISOString()\n  };\n  res.status(201).json(newItem);\n});\n\napp.put('/api/v1/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  const updatedItem = {\n    id,\n    ...req.body,\n    updatedAt: new Date().toISOString()\n  };\n  res.json(updatedItem);\n});\n\napp.delete('/api/v1/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  res.json({ message: \\`Item \\${id} deleted successfully\\` });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Internal server error' });\n});\n\n// Start server\napp.listen(port, () => {\n  console.log(\\`REST API server running on port \\${port}\\`);\n  console.log('Created by Claude Flow Swarm');\n});\n\nmodule.exports = app;\n`;\n\n      await fs.writeFile(`${projectDir}/server.js`, apiCode);\n\n      // Create package.json\n      const packageJson = {\n        name: projectName,\n        version: '1.0.0',\n        description: 'REST API created by Claude Flow Swarm',\n        main: 'server.js',\n        scripts: {\n          start: 'node server.js',\n          dev: 'nodemon server.js',\n          test: 'jest',\n        },\n        keywords: ['rest', 'api', 'swarm', 'claude-flow'],\n        author: 'Claude Flow Swarm',\n        license: 'MIT',\n        dependencies: {\n          express: '^4.18.2',\n        },\n        devDependencies: {\n          nodemon: '^3.0.1',\n          jest: '^29.7.0',\n          supertest: '^6.3.3',\n        },\n        swarmMetadata: {\n          swarmId: this.swarmId.id,\n          taskId: task.id.id,\n          agentId: agent.id.id,\n          created: new Date().toISOString(),\n        },\n      };\n\n      await fs.writeFile(`${projectDir}/package.json`, JSON.stringify(packageJson, null, 2));\n\n      // Create README\n      const readme = `# REST API\n\nThis REST API was created by the Claude Flow Swarm system.\n\n## Swarm Details\n- Swarm ID: ${this.swarmId.id}\n- Task: ${task.name}\n- Agent: ${agent.name}\n- Generated: ${new Date().toISOString()}\n\n## Installation\n\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Usage\n\nStart the server:\n\\`\\`\\`bash\nnpm start\n\\`\\`\\`\n\nDevelopment mode with auto-reload:\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n## API Endpoints\n\n- \\`GET /health\\` - Health check\n- \\`GET /api/v1/items\\` - Get all items\n- \\`GET /api/v1/items/:id\\` - Get item by ID\n- \\`POST /api/v1/items\\` - Create new item\n- \\`PUT /api/v1/items/:id\\` - Update item\n- \\`DELETE /api/v1/items/:id\\` - Delete item\n\n## Description\n${task.description}\n\n---\nCreated by Claude Flow Swarm\n`;\n\n      await fs.writeFile(`${projectDir}/README.md`, readme);\n\n      // Create .gitignore\n      const gitignore = `node_modules/\n.env\n*.log\n.DS_Store\ncoverage/\n`;\n\n      await fs.writeFile(`${projectDir}/.gitignore`, gitignore);\n\n      return {\n        success: true,\n        output: {\n          message: 'REST API created successfully',\n          location: projectDir,\n          files: ['server.js', 'package.json', 'README.md', '.gitignore'],\n        },\n        artifacts: {\n          mainFile: `${projectDir}/server.js`,\n          packageFile: `${projectDir}/package.json`,\n          readmeFile: `${projectDir}/README.md`,\n        },\n      };\n    } else if (isHelloWorld) {\n      // Create a simple hello world application\n      const projectDir = `${workDir}/hello-world`;\n      await Deno.mkdir(projectDir, { recursive: true });\n\n      // Create main application file\n      const mainCode = `#!/usr/bin/env node\n\n// Hello World Application\n// Generated by Claude Flow Swarm\n\nconsole.log('Hello, World!');\nconsole.log('This application was created by the Claude Flow Swarm system.');\nconsole.log('Swarm ID: ${this.swarmId.id}');\nconsole.log('Task: ${task.name}');\nconsole.log('Generated at: ${new Date().toISOString()}');\n\n// Export for testing\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { message: 'Hello, World!' };\n}\n`;\n\n      await fs.writeFile(`${projectDir}/index.js`, mainCode);\n\n      // Create package.json\n      const packageJson = {\n        name: 'hello-world',\n        version: '1.0.0',\n        description: 'Hello World application created by Claude Flow Swarm',\n        main: 'index.js',\n        scripts: {\n          start: 'node index.js',\n          test: 'node test.js',\n        },\n        keywords: ['hello-world', 'swarm', 'claude-flow'],\n        author: 'Claude Flow Swarm',\n        license: 'MIT',\n      };\n\n      await fs.writeFile(`${projectDir}/package.json`, JSON.stringify(packageJson, null, 2));\n\n      // Create README\n      const readme = `# Hello World\n\nThis application was created by the Claude Flow Swarm system.\n\n## Swarm Details\n- Swarm ID: ${this.swarmId.id}\n- Task: ${task.name}\n- Generated: ${new Date().toISOString()}\n\n## Usage\n\n\\`\\`\\`bash\nnpm start\n\\`\\`\\`\n\n## Description\n${task.description}\n`;\n\n      await fs.writeFile(`${projectDir}/README.md`, readme);\n\n      return {\n        success: true,\n        output: {\n          message: 'Hello World application created successfully',\n          location: projectDir,\n          files: ['index.js', 'package.json', 'README.md'],\n        },\n        artifacts: {\n          mainFile: `${projectDir}/index.js`,\n          packageFile: `${projectDir}/package.json`,\n          readmeFile: `${projectDir}/README.md`,\n        },\n      };\n    }\n\n    // For other code generation tasks, create a basic structure\n    const projectDir = `${workDir}/generated-code`;\n    await Deno.mkdir(projectDir, { recursive: true });\n\n    const code = `// Generated code for: ${task.name}\n// ${task.description}\n\nfunction main() {\n  console.log('Executing task: ${task.name}');\n  // Implementation would go here\n}\n\nmain();\n`;\n\n    await fs.writeFile(`${projectDir}/main.js`, code);\n\n    return {\n      success: true,\n      output: {\n        message: 'Code generated successfully',\n        location: projectDir,\n        files: ['main.js'],\n      },\n    };\n  }\n\n  private async executeAnalysisTask(\n    task: TaskDefinition,\n    workDir: string,\n    agent: AgentState,\n  ): Promise<any> {\n    this.logger.info('Executing analysis task', { taskId: task.id.id });\n\n    const analysisDir = `${workDir}/analysis`;\n    await Deno.mkdir(analysisDir, { recursive: true });\n\n    const analysis = {\n      task: task.name,\n      description: task.description,\n      timestamp: new Date().toISOString(),\n      findings: [\n        'Analysis point 1: Task objectives are clear',\n        'Analysis point 2: Resources are allocated',\n        'Analysis point 3: Implementation path is defined',\n      ],\n      recommendations: [\n        'Proceed with implementation',\n        'Monitor progress regularly',\n        'Adjust resources as needed',\n      ],\n    };\n\n    await fs.writeFile(`${analysisDir}/analysis-report.json`, JSON.stringify(analysis, null, 2));\n\n    return {\n      success: true,\n      output: analysis,\n      artifacts: {\n        report: `${analysisDir}/analysis-report.json`,\n      },\n    };\n  }\n\n  private async executeDocumentationTask(\n    task: TaskDefinition,\n    workDir: string,\n    agent: AgentState,\n  ): Promise<any> {\n    this.logger.info('Executing documentation task', { taskId: task.id.id });\n\n    const docsDir = `${workDir}/docs`;\n    await Deno.mkdir(docsDir, { recursive: true });\n\n    const documentation = `# ${task.name}\n\n${task.description}\n\n## Overview\nThis documentation was generated by the Claude Flow Swarm system.\n\n## Details\n- Task ID: ${task.id.id}\n- Generated: ${new Date().toISOString()}\n- Swarm ID: ${this.swarmId.id}\n\n## Instructions\n${task.instructions}\n\n## Implementation Notes\n- This is an automated documentation generated by the swarm\n- Further details would be added based on actual implementation\n`;\n\n    await fs.writeFile(`${docsDir}/documentation.md`, documentation);\n\n    return {\n      success: true,\n      output: {\n        message: 'Documentation created successfully',\n        location: docsDir,\n        files: ['documentation.md'],\n      },\n      artifacts: {\n        documentation: `${docsDir}/documentation.md`,\n      },\n    };\n  }\n\n  private async executeTestingTask(\n    task: TaskDefinition,\n    workDir: string,\n    agent: AgentState,\n  ): Promise<any> {\n    this.logger.info('Executing testing task', { taskId: task.id.id });\n\n    const testDir = `${workDir}/tests`;\n    await Deno.mkdir(testDir, { recursive: true });\n\n    const testCode = `// Test suite for: ${task.name}\n// ${task.description}\n\nconst assert = require('assert');\n\ndescribe('${task.name}', () => {\n  it('should pass basic test', () => {\n    assert.strictEqual(1 + 1, 2);\n  });\n  \n  it('should validate implementation', () => {\n    // Test implementation would go here\n    assert.ok(true, 'Implementation validated');\n  });\n});\n\nconsole.log('Tests completed for: ${task.name}');\n`;\n\n    await fs.writeFile(`${testDir}/test.js`, testCode);\n\n    return {\n      success: true,\n      output: {\n        message: 'Test suite created successfully',\n        location: testDir,\n        files: ['test.js'],\n        testsPassed: 2,\n        testsFailed: 0,\n      },\n      artifacts: {\n        testFile: `${testDir}/test.js`,\n      },\n    };\n  }\n\n  private async executeGenericTask(\n    task: TaskDefinition,\n    workDir: string,\n    agent: AgentState,\n  ): Promise<any> {\n    this.logger.info('Executing generic task', { taskId: task.id.id });\n\n    const outputDir = `${workDir}/output`;\n    await Deno.mkdir(outputDir, { recursive: true });\n\n    const output = {\n      task: task.name,\n      type: task.type,\n      description: task.description,\n      status: 'completed',\n      timestamp: new Date().toISOString(),\n      result: 'Task executed successfully',\n    };\n\n    await fs.writeFile(`${outputDir}/result.json`, JSON.stringify(output, null, 2));\n\n    return {\n      success: true,\n      output,\n      artifacts: {\n        result: `${outputDir}/result.json`,\n      },\n    };\n  }\n\n  private assessTaskQuality(task: TaskDefinition, result: any): number {\n    // Implementation needed - assess task quality\n    return 0.8;\n  }\n\n  private updateAgentMetrics(agent: AgentState, task: TaskDefinition): void {\n    // Update agent performance metrics\n    const executionTime = task.completedAt!.getTime() - (task.startedAt?.getTime() || 0);\n\n    agent.metrics.averageExecutionTime =\n      (agent.metrics.averageExecutionTime * agent.metrics.tasksCompleted + executionTime) /\n      (agent.metrics.tasksCompleted + 1);\n\n    agent.metrics.successRate =\n      agent.metrics.tasksCompleted / (agent.metrics.tasksCompleted + agent.metrics.tasksFailed);\n  }\n\n  private async processDependentTasks(task: TaskDefinition): Promise<void> {\n    // Implementation needed - process tasks that depend on this one\n  }\n\n  private isRecoverableError(error: any): boolean {\n    // Implementation needed - determine if error is recoverable\n    return true;\n  }\n\n  private isRetryableError(error: any): boolean {\n    // Implementation needed - determine if error is retryable\n    return true;\n  }\n\n  private async handleTaskFailureCascade(task: TaskDefinition): Promise<void> {\n    // Implementation needed - handle failure cascade\n  }\n\n  private async reassignTask(taskId: string): Promise<void> {\n    // Implementation needed - reassign task to different agent\n  }\n\n  private processHeartbeats(): void {\n    const now = new Date();\n    const timeout = this.config.monitoring.heartbeatInterval * 10; // Increased multiplier for long-running Claude tasks\n\n    for (const agent of this.agents.values()) {\n      if (agent.status === 'offline' || agent.status === 'terminated') {\n        continue;\n      }\n\n      const timeSinceHeartbeat = now.getTime() - agent.lastHeartbeat.getTime();\n      if (timeSinceHeartbeat > timeout) {\n        this.logger.warn('Agent heartbeat timeout', {\n          agentId: agent.id.id,\n          timeSinceHeartbeat,\n        });\n        agent.status = 'error';\n        agent.health = 0;\n      }\n    }\n  }\n\n  private updateSwarmMetrics(): void {\n    // Implementation needed - update swarm-level metrics\n  }\n\n  private performCleanup(): void {\n    // Implementation needed - perform periodic cleanup\n  }\n\n  private checkObjectiveCompletion(): void {\n    // Implementation needed - check if objectives are complete\n  }\n\n  private checkObjectiveFailure(task: TaskDefinition): void {\n    // Implementation needed - check if objective has failed\n  }\n\n  private handleAgentError(agentId: string, error: any): void {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      agent.status = 'error';\n      agent.health = 0;\n      this.logger.error('Agent error', { agentId, error });\n\n      // Track error in JSON output if enabled\n      if (this.jsonOutputAggregator) {\n        this.jsonOutputAggregator.addAgentError(\n          agentId,\n          error instanceof Error ? error.message : String(error),\n        );\n      }\n    }\n  }\n\n  // ===== JSON OUTPUT METHODS =====\n\n  /**\n   * Enable JSON output collection for non-interactive mode\n   */\n  enableJsonOutput(objective: string): void {\n    if (!this.jsonOutputAggregator) {\n      this.jsonOutputAggregator = new SwarmJsonOutputAggregator(\n        this.swarmId.id,\n        objective,\n        this.config,\n      );\n      this.logger.info('JSON output aggregation enabled', { swarmId: this.swarmId.id });\n    }\n  }\n\n  /**\n   * Get the final JSON output for the swarm\n   */\n  getJsonOutput(\n    status: 'completed' | 'failed' | 'timeout' | 'cancelled' = 'completed',\n  ): string | null {\n    if (!this.jsonOutputAggregator) {\n      return null;\n    }\n    return this.jsonOutputAggregator.getJsonOutput(status);\n  }\n\n  /**\n   * Save JSON output to file\n   */\n  async saveJsonOutput(\n    filePath: string,\n    status: 'completed' | 'failed' | 'timeout' | 'cancelled' = 'completed',\n  ): Promise<void> {\n    if (!this.jsonOutputAggregator) {\n      throw new Error('JSON output aggregation not enabled');\n    }\n    await this.jsonOutputAggregator.saveToFile(filePath, status);\n  }\n\n  /**\n   * Track agent activity in JSON output\n   */\n  private trackAgentInJsonOutput(agent: AgentState): void {\n    if (this.jsonOutputAggregator) {\n      this.jsonOutputAggregator.addAgent(agent);\n    }\n  }\n\n  /**\n   * Track task activity in JSON output\n   */\n  private trackTaskInJsonOutput(task: TaskDefinition): void {\n    if (this.jsonOutputAggregator) {\n      this.jsonOutputAggregator.addTask(task);\n    }\n  }\n\n  /**\n   * Add output to JSON aggregator\n   */\n  private addOutputToJsonAggregator(agentId: string, output: string): void {\n    if (this.jsonOutputAggregator) {\n      this.jsonOutputAggregator.addAgentOutput(agentId, output);\n    }\n  }\n\n  /**\n   * Add insight to JSON aggregator\n   */\n  addInsight(insight: string): void {\n    if (this.jsonOutputAggregator) {\n      this.jsonOutputAggregator.addInsight(insight);\n    }\n  }\n\n  /**\n   * Add artifact to JSON aggregator\n   */\n  addArtifact(key: string, artifact: any): void {\n    if (this.jsonOutputAggregator) {\n      this.jsonOutputAggregator.addArtifact(key, artifact);\n    }\n  }\n}\n"],"names":["EventEmitter","promises","fs","Logger","generateId","SWARM_CONSTANTS","AutoStrategy","getClaudeFlowRoot","getClaudeFlowBin","SwarmJsonOutputAggregator","SwarmCoordinator","logger","config","swarmId","agents","Map","tasks","objectives","_isRunning","status","startTime","endTime","metrics","events","lastHeartbeat","Date","jsonOutputAggregator","heartbeatTimer","monitoringTimer","cleanupTimer","executionIntervals","autoStrategy","logLevel","logging","level","logFormat","format","logDestination","destination","component","generateSwarmId","mergeWithDefaults","initializeMetrics","setupEventHandlers","info","id","mode","strategy","initialize","Error","validation","validateConfiguration","valid","errors","map","e","message","join","initializeSubsystems","startBackgroundProcesses","emitSwarmEvent","timestamp","type","source","data","broadcast","processed","error","shutdown","stopBackgroundProcesses","stopAllAgents","completeRunningTasks","saveState","duration","getTime","pause","agent","values","pauseAgent","resume","resumeAgent","createObjective","name","description","requirements","objectiveId","objective","minAgents","maxAgents","agentTypes","determineRequiredAgentTypes","estimatedDuration","maxDuration","qualityThreshold","reviewCoverage","testCoverage","reliabilityTarget","constraints","minQuality","requiredApprovals","allowedFailures","Math","floor","recoveryTime","milestones","dependencies","progress","initializeProgress","createdAt","decompositionResult","decomposeObjective","convertDependenciesToTaskDependencies","analyzeDependencies","set","taskCount","length","executeObjective","get","startedAt","ensureRequiredAgents","scheduleInitialTasks","startTaskExecutionLoop","registerAgent","capabilities","agentId","instance","getNextInstanceNumber","agentState","codeGeneration","codeReview","testing","documentation","research","analysis","webSearch","apiIntegration","fileSystem","terminalAccess","languages","frameworks","domains","tools","maxConcurrentTasks","maxMemoryUsage","DEFAULT_MEMORY_LIMIT","maxExecutionTime","DEFAULT_TASK_TIMEOUT","reliability","speed","quality","tasksCompleted","tasksFailed","averageExecutionTime","successRate","cpuUsage","memoryUsage","diskUsage","networkUsage","codeQuality","bugRate","userSatisfaction","totalUptime","lastActivity","responseTime","workload","health","autonomyLevel","learningEnabled","adaptationEnabled","maxTasksPerHour","timeoutThreshold","reportingInterval","heartbeatInterval","DEFAULT_HEARTBEAT_INTERVAL","permissions","getDefaultPermissions","trustedAgents","expertise","preferences","environment","runtime","version","workingDirectory","tempDirectory","logDirectory","apiEndpoints","credentials","availableTools","toolConfigs","endpoints","taskHistory","errorHistory","childAgents","collaborators","trackAgentInJsonOutput","initializeAgentCapabilities","startAgent","Object","keys","unregisterAgent","stopAgent","currentTask","reassignTask","delete","initializeAgentEnvironment","startAgentHeartbeat","push","String","stack","context","severity","resolved","cancelTask","stopAgentHeartbeat","cleanupAgentEnvironment","createTask","instructions","options","taskId","sequence","size","priority","task","getRequiredCapabilities","getRequiredTools","getRequiredPermissions","dependents","conflicts","maxRetries","MAX_RETRIES","timeoutAfter","input","examples","updatedAt","attempts","statusHistory","from","to","reason","triggeredBy","trackTaskInJsonOutput","assignTask","selectAgentForTask","assignedTo","assignedAt","agentName","startTaskExecution","attempt","attemptNumber","resourcesUsed","result","executeTaskWithAgent","completeTask","failTask","completedAt","output","artifacts","metadata","assessTaskQuality","completeness","accuracy","executionTime","validated","currentAttempt","undefined","updateAgentMetrics","processDependentTasks","warn","code","recoverable","isRecoverableError","retryable","isRetryableError","shouldRetry","retryDelay","pow","setTimeout","catch","retryError","handleTaskFailureCascade","availableAgents","Array","filter","agentCanHandleTask","scoredAgents","score","calculateAgentScore","sort","a","b","capabilityMatch","calculateCapabilityMatch","performanceScore","workloadScore","requiredCapabilities","matches","total","capability","agentHasCapability","caps","includes","agentType","minReliability","now","namespace","coordinationStrategy","agentSelection","taskScheduling","loadBalancing","faultTolerance","communication","maxTasks","resourceLimits","memory","cpu","DEFAULT_CPU_LIMIT","disk","DEFAULT_DISK_LIMIT","DEFAULT_QUALITY_THRESHOLD","reviewRequired","testingRequired","monitoring","metricsEnabled","loggingEnabled","tracingEnabled","metricsInterval","healthCheckInterval","retentionPeriod","maxLogSize","maxMetricPoints","alertingEnabled","alertThresholds","errorRate","exportEnabled","exportFormat","exportDestination","partitions","read","write","share","persistent","backupEnabled","distributed","consistency","cacheEnabled","compressionEnabled","security","authenticationRequired","authorizationRequired","encryptionEnabled","defaultPermissions","adminRoles","auditEnabled","auditLevel","inputValidation","outputSanitization","performance","maxConcurrency","defaultTimeout","cacheSize","cacheTtl","optimizationEnabled","adaptiveScheduling","predictiveLoading","resourcePooling","connectionPooling","memoryPooling","throughput","latency","efficiency","averageQuality","defectRate","reworkRate","resourceUtilization","costEfficiency","agentUtilization","agentSatisfaction","collaborationEffectiveness","scheduleVariance","deadlineAdherence","totalTasks","completedTasks","failedTasks","runningTasks","estimatedCompletion","timeRemaining","percentComplete","passedReviews","passedTests","costSpent","activeAgents","idleAgents","busyAgents","on","updateSwarmMetrics","checkObjectiveCompletion","checkObjectiveFailure","handleAgentError","event","slice","emit","emitSwarmEvents","success","onSwarmEvent","handler","offSwarmEvent","off","filterEvents","predicate","correlateEvents","correlationId","getSwarmId","getStatus","getAgents","getAgent","getTasks","getTask","getObjectives","getObjective","getMetrics","getEvents","isRunning","getUptime","getSwarmStatus","t","completed","failed","warnings","validatedAt","validator","setInterval","processHeartbeats","performCleanup","clearInterval","interval","clear","stopPromises","Promise","allSettled","timeout","deadline","some","resolve","getAgentTypeInstructions","getAgentCapabilities","targetDirMatch","match","targetDir","targetPath","startsWith","eachAgentPattern","requestsParallelAgents","test","createTaskForObjective","title","charAt","toUpperCase","task1","task2","task3","task4","params","forEach","deps","dependsOn","targetDirPatterns","objectiveTargetDir","pattern","initialTasks","count","executionInterval","queuedTasks","debug","suitableAgents","agentIndex","findIndex","splice","pendingTasks","taskDependenciesMet","round","allTasks","completedTaskIds","every","dep","depId","agentsOfType","taskName","extractTargetDirectory","ClaudeFlowExecutor","executor","claudeFlowPath","enableSparc","verbose","timeoutMinutes","taskTimeoutMinutes","executeTask","outputLength","JSON","stringify","createExecutionPrompt","prompt","patterns","descMatch","inputMatch","replace","executeClaudeTask","instanceId","claudeArgs","Deno","mkdir","recursive","enhancedPrompt","checkCommand","Command","args","stdout","stderr","checkResult","command","cwd","process","env","toObject","CLAUDE_INSTANCE_ID","CLAUDE_SWARM_MODE","CLAUDE_SWARM_ID","CLAUDE_TASK_ID","CLAUDE_AGENT_ID","CLAUDE_WORKING_DIRECTORY","CLAUDE_FLOW_MEMORY_ENABLED","CLAUDE_FLOW_MEMORY_NAMESPACE","stdin","child","spawn","TextDecoder","decode","errorOutput","determineToolsForTask","Set","add","simulateTaskExecution","workDir","original","executeCodeGenerationTask","executeAnalysisTask","executeDocumentationTask","executeTestingTask","executeGenericTask","toLowerCase","isGradio","isPython","isHelloWorld","isRestAPI","createGradioApp","createPythonRestAPI","projectName","projectDir","apiCode","toISOString","writeFile","packageJson","main","scripts","start","dev","keywords","author","license","express","devDependencies","nodemon","jest","supertest","swarmMetadata","created","readme","gitignore","location","files","mainFile","packageFile","readmeFile","mainCode","analysisDir","findings","recommendations","report","docsDir","testDir","testCode","testsPassed","testsFailed","testFile","outputDir","timeSinceHeartbeat","addAgentError","enableJsonOutput","getJsonOutput","saveJsonOutput","filePath","saveToFile","addAgent","addTask","addOutputToJsonAggregator","addAgentOutput","addInsight","insight","addArtifact","key","artifact"],"mappings":"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"}