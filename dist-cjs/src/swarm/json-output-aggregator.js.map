{"version":3,"sources":["../../../src/swarm/json-output-aggregator.ts"],"sourcesContent":["/**\n * JSON Output Aggregator for Non-Interactive Swarm Execution\n * Collects and formats swarm results into a comprehensive JSON structure\n */\n\nimport { EventEmitter } from 'events';\nimport { promises as fs } from 'node:fs';\nimport { generateId } from '../utils/helpers.js';\nimport { Logger } from '../core/logger.js';\nimport type {\n  SwarmId,\n  AgentId,\n  TaskId,\n  AgentState,\n  TaskDefinition,\n  SwarmResults,\n  SwarmMetrics,\n  TaskResult,\n} from './types.js';\n\nexport interface SwarmOutputAggregate {\n  swarmId: string;\n  objective: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  status: 'completed' | 'failed' | 'timeout' | 'cancelled';\n  summary: {\n    totalAgents: number;\n    totalTasks: number;\n    completedTasks: number;\n    failedTasks: number;\n    successRate: number;\n  };\n  agents: AgentOutputData[];\n  tasks: TaskOutputData[];\n  results: {\n    artifacts: Record<string, any>;\n    outputs: string[];\n    errors: string[];\n    insights: string[];\n  };\n  metrics: SwarmMetrics;\n  metadata: {\n    strategy: string;\n    mode: string;\n    configuration: Record<string, any>;\n    version: string;\n  };\n}\n\nexport interface AgentOutputData {\n  agentId: string;\n  name: string;\n  type: string;\n  status: string;\n  startTime: string;\n  endTime?: string;\n  duration?: number;\n  tasksCompleted: number;\n  outputs: string[];\n  errors: string[];\n  metrics: {\n    tokensUsed?: number;\n    memoryAccess: number;\n    operationsPerformed: number;\n  };\n}\n\nexport interface TaskOutputData {\n  taskId: string;\n  name: string;\n  type: string;\n  status: string;\n  assignedAgent?: string;\n  startTime: string;\n  endTime?: string;\n  duration?: number;\n  priority: string;\n  output?: string;\n  result?: TaskResult;\n  artifacts?: Record<string, any>;\n  error?: string;\n}\n\nexport class SwarmJsonOutputAggregator extends EventEmitter {\n  private logger: Logger;\n  private swarmId: string;\n  private objective: string;\n  private startTime: Date;\n  private endTime?: Date;\n  private configuration: Record<string, any>;\n\n  // Data collection\n  private agents: Map<string, AgentOutputData> = new Map();\n  private tasks: Map<string, TaskOutputData> = new Map();\n  private outputs: string[] = [];\n  private errors: string[] = [];\n  private insights: string[] = [];\n  private artifacts: Record<string, any> = {};\n  private metrics: SwarmMetrics = this.initializeMetrics();\n\n  constructor(swarmId: string, objective: string, configuration: Record<string, any> = {}) {\n    super();\n    this.swarmId = swarmId;\n    this.objective = objective;\n    this.configuration = configuration;\n    this.startTime = new Date();\n\n    this.logger = new Logger(\n      { level: 'info', format: 'json', destination: 'console' },\n      { component: 'SwarmJsonAggregator' },\n    );\n\n    this.logger.info('JSON output aggregator initialized', {\n      swarmId,\n      objective,\n      timestamp: this.startTime.toISOString(),\n    });\n  }\n\n  // Agent tracking methods\n  addAgent(agent: AgentState): void {\n    // Handle null/undefined agent IDs gracefully\n    if (!agent || !agent.id) {\n      this.logger.warn('Attempted to add agent with null/undefined ID, skipping');\n      return;\n    }\n\n    const agentIdStr = typeof agent.id === 'string' ? agent.id : agent.id.id;\n    const agentData: AgentOutputData = {\n      agentId: agentIdStr,\n      name: agent.name || agentIdStr,\n      type: agent.type,\n      status: agent.status,\n      startTime: new Date().toISOString(),\n      tasksCompleted: 0,\n      outputs: [],\n      errors: [],\n      metrics: {\n        memoryAccess: 0,\n        operationsPerformed: 0,\n      },\n    };\n\n    this.agents.set(agentIdStr, agentData);\n    this.logger.debug('Agent added to output tracking', { agentId: agentIdStr });\n  }\n\n  updateAgent(agentId: string, updates: Partial<AgentOutputData>): void {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      Object.assign(agent, updates);\n      this.logger.debug('Agent updated in output tracking', { agentId, updates });\n    }\n  }\n\n  addAgentOutput(agentId: string, output: string): void {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      agent.outputs.push(output);\n      agent.metrics.operationsPerformed++;\n    }\n    this.outputs.push(`[${agentId}] ${output}`);\n  }\n\n  addAgentError(agentId: string, error: string): void {\n    const agent = this.agents.get(agentId);\n    if (agent) {\n      agent.errors.push(error);\n    }\n    this.errors.push(`[${agentId}] ${error}`);\n  }\n\n  // Task tracking methods\n  addTask(task: TaskDefinition): void {\n    // Handle null/undefined task IDs gracefully\n    if (!task || !task.id) {\n      this.logger.warn('Attempted to add task with null/undefined ID, skipping');\n      return;\n    }\n\n    const taskIdStr = typeof task.id === 'string' ? task.id : task.id.id;\n    const taskData: TaskOutputData = {\n      taskId: taskIdStr,\n      name: task.name || taskIdStr,\n      type: task.type,\n      status: task.status,\n      assignedAgent: task.assignedAt\n        ? typeof task.assignedAt === 'string'\n          ? task.assignedAt\n          : task.assignedAt.toString()\n        : undefined,\n      startTime: new Date().toISOString(),\n      priority: task.priority || 'normal',\n    };\n\n    this.tasks.set(taskIdStr, taskData);\n    this.logger.debug('Task added to output tracking', { taskId: taskIdStr });\n  }\n\n  updateTask(taskId: string, updates: Partial<TaskOutputData>): void {\n    const task = this.tasks.get(taskId);\n    if (task) {\n      Object.assign(task, updates);\n      this.logger.debug('Task updated in output tracking', { taskId, updates });\n    }\n  }\n\n  completeTask(taskId: string, result: TaskResult): void {\n    const task = this.tasks.get(taskId);\n    if (task) {\n      task.status = 'completed';\n      task.endTime = new Date().toISOString();\n      task.duration = task.startTime ? Date.now() - new Date(task.startTime).getTime() : 0;\n      task.result = result;\n      task.output = result.output;\n      task.artifacts = result.artifacts;\n\n      // Update agent completion count\n      if (task.assignedAgent) {\n        const agent = this.agents.get(task.assignedAgent);\n        if (agent) {\n          agent.tasksCompleted++;\n        }\n      }\n    }\n  }\n\n  // Global tracking methods\n  addInsight(insight: string): void {\n    this.insights.push(insight);\n    this.logger.debug('Insight added', { insight });\n  }\n\n  addArtifact(key: string, artifact: any): void {\n    this.artifacts[key] = artifact;\n    this.logger.debug('Artifact added', { key });\n  }\n\n  updateMetrics(updates: Partial<SwarmMetrics>): void {\n    Object.assign(this.metrics, updates);\n  }\n\n  // Finalization and output\n  finalize(\n    status: 'completed' | 'failed' | 'timeout' | 'cancelled' = 'completed',\n  ): SwarmOutputAggregate {\n    this.endTime = new Date();\n    const duration = this.endTime.getTime() - this.startTime.getTime();\n\n    // Calculate summary statistics\n    const totalTasks = this.tasks.size;\n    const completedTasks = Array.from(this.tasks.values()).filter(\n      (task) => task.status === 'completed',\n    ).length;\n    const failedTasks = Array.from(this.tasks.values()).filter(\n      (task) => task.status === 'failed',\n    ).length;\n    const successRate = totalTasks > 0 ? completedTasks / totalTasks : 0;\n\n    // Finalize agent data\n    this.agents.forEach((agent) => {\n      if (!agent.endTime) {\n        agent.endTime = this.endTime.toISOString();\n        agent.duration = Date.now() - new Date(agent.startTime).getTime();\n      }\n    });\n\n    const aggregate: SwarmOutputAggregate = {\n      swarmId: this.swarmId,\n      objective: this.objective,\n      startTime: this.startTime.toISOString(),\n      endTime: this.endTime.toISOString(),\n      duration,\n      status,\n      summary: {\n        totalAgents: this.agents.size,\n        totalTasks,\n        completedTasks,\n        failedTasks,\n        successRate,\n      },\n      agents: Array.from(this.agents.values()),\n      tasks: Array.from(this.tasks.values()),\n      results: {\n        artifacts: this.artifacts,\n        outputs: this.outputs,\n        errors: this.errors,\n        insights: this.insights,\n      },\n      metrics: this.metrics,\n      metadata: {\n        strategy: this.configuration.strategy || 'auto',\n        mode: this.configuration.mode || 'centralized',\n        configuration: this.configuration,\n        version: '2.0.0-alpha',\n      },\n    };\n\n    this.logger.info('Swarm output aggregation finalized', {\n      swarmId: this.swarmId,\n      status,\n      duration,\n      summary: aggregate.summary,\n    });\n\n    return aggregate;\n  }\n\n  async saveToFile(\n    filePath: string,\n    status: 'completed' | 'failed' | 'timeout' | 'cancelled' = 'completed',\n  ): Promise<void> {\n    const aggregate = this.finalize(status);\n    const json = JSON.stringify(aggregate, this.circularReplacer(), 2);\n    await fs.writeFile(filePath, json, 'utf8');\n    this.logger.info('Swarm output saved to file', { filePath, size: json.length });\n  }\n\n  getJsonOutput(status: 'completed' | 'failed' | 'timeout' | 'cancelled' = 'completed'): string {\n    const aggregate = this.finalize(status);\n    return JSON.stringify(aggregate, this.circularReplacer(), 2);\n  }\n\n  // Handle circular references in JSON serialization\n  private circularReplacer(): (key: string, value: any) => any {\n    const seen = new WeakSet();\n    return (key: string, value: any) => {\n      if (typeof value === 'object' && value !== null) {\n        if (seen.has(value)) {\n          return '[Circular]';\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  }\n\n  private initializeMetrics(): SwarmMetrics {\n    return {\n      // Performance metrics\n      throughput: 0,\n      latency: 0,\n      efficiency: 0,\n      reliability: 0,\n\n      // Quality metrics\n      averageQuality: 0,\n      defectRate: 0,\n      reworkRate: 0,\n\n      // Resource metrics\n      resourceUtilization: {\n        cpu: 0,\n        memory: 0,\n        disk: 0,\n        network: 0,\n      },\n      costEfficiency: 0,\n\n      // Agent metrics\n      agentUtilization: 0,\n      agentSatisfaction: 0,\n      collaborationEffectiveness: 0,\n\n      // Timeline metrics\n      scheduleVariance: 0,\n      deadlineAdherence: 0,\n    };\n  }\n}\n"],"names":["EventEmitter","promises","fs","Logger","SwarmJsonOutputAggregator","logger","swarmId","objective","startTime","endTime","configuration","agents","Map","tasks","outputs","errors","insights","artifacts","metrics","initializeMetrics","Date","level","format","destination","component","info","timestamp","toISOString","addAgent","agent","id","warn","agentIdStr","agentData","agentId","name","type","status","tasksCompleted","memoryAccess","operationsPerformed","set","debug","updateAgent","updates","get","Object","assign","addAgentOutput","output","push","addAgentError","error","addTask","task","taskIdStr","taskData","taskId","assignedAgent","assignedAt","toString","undefined","priority","updateTask","completeTask","result","duration","now","getTime","addInsight","insight","addArtifact","key","artifact","updateMetrics","finalize","totalTasks","size","completedTasks","Array","from","values","filter","length","failedTasks","successRate","forEach","aggregate","summary","totalAgents","results","metadata","strategy","mode","version","saveToFile","filePath","json","JSON","stringify","circularReplacer","writeFile","getJsonOutput","seen","WeakSet","value","has","add","throughput","latency","efficiency","reliability","averageQuality","defectRate","reworkRate","resourceUtilization","cpu","memory","disk","network","costEfficiency","agentUtilization","agentSatisfaction","collaborationEffectiveness","scheduleVariance","deadlineAdherence"],"mappings":"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"}