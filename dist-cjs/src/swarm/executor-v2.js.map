{"version":3,"sources":["../../../src/swarm/executor-v2.ts"],"sourcesContent":["/**\n * Enhanced Task Executor v2.0 with improved environment handling\n */\n\nimport { spawn, ChildProcess } from 'node:child_process';\nimport { EventEmitter } from 'node:events';\nimport * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\nimport * as os from 'node:os';\nimport chalk from 'chalk';\nimport { Logger } from '../core/logger.js';\nimport { generateId } from '../utils/helpers.js';\nimport {\n  detectExecutionEnvironment,\n  applySmartDefaults,\n} from '../cli/utils/environment-detector.js';\nimport {\n  TaskDefinition,\n  AgentState,\n  TaskResult,\n  SwarmEvent,\n  EventType,\n  SWARM_CONSTANTS,\n} from './types.js';\n\nexport interface ClaudeExecutionOptionsV2 extends ClaudeExecutionOptions {\n  nonInteractive?: boolean;\n  autoApprove?: boolean;\n  promptDefaults?: Record<string, any>;\n  environmentOverride?: Record<string, string>;\n  retryOnInteractiveError?: boolean;\n}\n\nexport class TaskExecutorV2 extends TaskExecutor {\n  private environment = detectExecutionEnvironment();\n\n  constructor(config: Partial<ExecutionConfig> = {}) {\n    super(config);\n\n    // Log environment info on initialization\n    this.logger.info('Task Executor v2.0 initialized', {\n      environment: this.environment.terminalType,\n      interactive: this.environment.isInteractive,\n      recommendations: this.environment.recommendedFlags,\n    });\n  }\n\n  async executeClaudeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    claudeOptions: ClaudeExecutionOptionsV2 = {},\n  ): Promise<ExecutionResult> {\n    // Apply smart defaults based on environment\n    const enhancedOptions = applySmartDefaults(claudeOptions, this.environment);\n\n    // Log if defaults were applied\n    if (enhancedOptions.appliedDefaults.length > 0) {\n      this.logger.info('Applied environment-based defaults', {\n        defaults: enhancedOptions.appliedDefaults,\n        environment: this.environment.terminalType,\n      });\n    }\n\n    try {\n      return await this.executeClaudeWithTimeoutV2(\n        generateId('claude-execution'),\n        task,\n        agent,\n        await this.createExecutionContext(task, agent),\n        enhancedOptions,\n      );\n    } catch (error) {\n      // Handle interactive errors with retry\n      if (this.isInteractiveError(error) && enhancedOptions.retryOnInteractiveError) {\n        this.logger.warn('Interactive error detected, retrying with non-interactive mode', {\n          error: error.message,\n        });\n\n        // Force non-interactive mode and retry\n        enhancedOptions.nonInteractive = true;\n        enhancedOptions.dangerouslySkipPermissions = true;\n\n        return await this.executeClaudeWithTimeoutV2(\n          generateId('claude-execution-retry'),\n          task,\n          agent,\n          await this.createExecutionContext(task, agent),\n          enhancedOptions,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  private async executeClaudeWithTimeoutV2(\n    sessionId: string,\n    task: TaskDefinition,\n    agent: AgentState,\n    context: ExecutionContext,\n    options: ClaudeExecutionOptionsV2,\n  ): Promise<ExecutionResult> {\n    const startTime = Date.now();\n    const timeout = options.timeout || this.config.timeoutMs;\n\n    // Build Claude command with v2 enhancements\n    const command = this.buildClaudeCommandV2(task, agent, options);\n\n    // Create execution environment with enhancements\n    const env = {\n      ...process.env,\n      ...context.environment,\n      ...options.environmentOverride,\n      CLAUDE_TASK_ID: task.id.id,\n      CLAUDE_AGENT_ID: agent.id.id,\n      CLAUDE_SESSION_ID: sessionId,\n      CLAUDE_WORKING_DIR: context.workingDirectory,\n      CLAUDE_NON_INTERACTIVE: options.nonInteractive ? '1' : '0',\n      CLAUDE_AUTO_APPROVE: options.autoApprove ? '1' : '0',\n    };\n\n    // Add prompt defaults if provided\n    if (options.promptDefaults) {\n      env.CLAUDE_PROMPT_DEFAULTS = JSON.stringify(options.promptDefaults);\n    }\n\n    this.logger.debug('Executing Claude command v2', {\n      sessionId,\n      command: command.command,\n      args: command.args,\n      workingDir: context.workingDirectory,\n      nonInteractive: options.nonInteractive,\n      environment: this.environment.terminalType,\n    });\n\n    return new Promise((resolve, reject) => {\n      let outputBuffer = '';\n      let errorBuffer = '';\n      let isTimeout = false;\n      let process: ChildProcess | null = null;\n\n      // Setup timeout\n      const timeoutHandle = setTimeout(() => {\n        isTimeout = true;\n        if (process) {\n          this.logger.warn('Claude execution timeout, killing process', {\n            sessionId,\n            pid: process.pid,\n            timeout,\n          });\n\n          process.kill('SIGTERM');\n          setTimeout(() => {\n            if (process && !process.killed) {\n              process.kill('SIGKILL');\n            }\n          }, this.config.killTimeout);\n        }\n      }, timeout);\n\n      try {\n        // Spawn Claude process with enhanced options\n        process = spawn(command.command, command.args, {\n          cwd: context.workingDirectory,\n          env,\n          stdio: options.nonInteractive ? ['ignore', 'pipe', 'pipe'] : ['pipe', 'pipe', 'pipe'],\n          detached: options.detached || false,\n          // Disable shell to avoid shell-specific issues\n          shell: false,\n        });\n\n        if (!process.pid) {\n          clearTimeout(timeoutHandle);\n          reject(new Error('Failed to spawn Claude process'));\n          return;\n        }\n\n        this.logger.info('Claude process started (v2)', {\n          sessionId,\n          pid: process.pid,\n          command: command.command,\n          mode: options.nonInteractive ? 'non-interactive' : 'interactive',\n        });\n\n        // Handle process output\n        if (process.stdout) {\n          process.stdout.on('data', (data: Buffer) => {\n            const chunk = data.toString();\n            outputBuffer += chunk;\n\n            if (this.config.streamOutput) {\n              this.emit('output', {\n                sessionId,\n                type: 'stdout',\n                data: chunk,\n              });\n            }\n          });\n        }\n\n        if (process.stderr) {\n          process.stderr.on('data', (data: Buffer) => {\n            const chunk = data.toString();\n            errorBuffer += chunk;\n\n            // Check for interactive mode errors\n            if (this.isInteractiveErrorMessage(chunk)) {\n              this.logger.warn('Interactive mode error detected in stderr', {\n                sessionId,\n                error: chunk.trim(),\n              });\n            }\n\n            if (this.config.streamOutput) {\n              this.emit('output', {\n                sessionId,\n                type: 'stderr',\n                data: chunk,\n              });\n            }\n          });\n        }\n\n        // Handle process errors\n        process.on('error', (error: Error) => {\n          clearTimeout(timeoutHandle);\n          this.logger.error('Process error', {\n            sessionId,\n            error: error.message,\n            code: (error as any).code,\n          });\n          reject(error);\n        });\n\n        // Handle process completion\n        process.on('close', async (code: number | null, signal: string | null) => {\n          clearTimeout(timeoutHandle);\n\n          const duration = Date.now() - startTime;\n          const exitCode = code || 0;\n\n          this.logger.info('Claude process completed (v2)', {\n            sessionId,\n            exitCode,\n            signal,\n            duration,\n            isTimeout,\n            hasErrors: errorBuffer.length > 0,\n          });\n\n          try {\n            // Collect resource usage\n            const resourceUsage = await this.collectResourceUsage(sessionId);\n\n            // Collect artifacts\n            const artifacts = await this.collectArtifacts(context);\n\n            const result: ExecutionResult = {\n              success: !isTimeout && exitCode === 0,\n              output: outputBuffer,\n              error: errorBuffer,\n              exitCode,\n              duration,\n              resourcesUsed: resourceUsage,\n              artifacts,\n              metadata: {\n                environment: this.environment.terminalType,\n                nonInteractive: options.nonInteractive || false,\n                appliedDefaults: (options as any).appliedDefaults || [],\n              },\n            };\n\n            if (isTimeout) {\n              reject(new Error(`Execution timed out after ${timeout}ms`));\n            } else if (exitCode !== 0 && this.isInteractiveErrorMessage(errorBuffer)) {\n              reject(new Error(`Interactive mode error: ${errorBuffer.trim()}`));\n            } else {\n              resolve(result);\n            }\n          } catch (collectionError) {\n            this.logger.error('Error collecting execution results', {\n              sessionId,\n              error: collectionError.message,\n            });\n\n            // Still resolve with basic result\n            resolve({\n              success: !isTimeout && exitCode === 0,\n              output: outputBuffer,\n              error: errorBuffer,\n              exitCode,\n              duration,\n              resourcesUsed: this.getDefaultResourceUsage(),\n              artifacts: {},\n              metadata: {},\n            });\n          }\n        });\n      } catch (spawnError) {\n        clearTimeout(timeoutHandle);\n        this.logger.error('Failed to spawn process', {\n          sessionId,\n          error: spawnError.message,\n        });\n        reject(spawnError);\n      }\n    });\n  }\n\n  private buildClaudeCommandV2(\n    task: TaskDefinition,\n    agent: AgentState,\n    options: ClaudeExecutionOptionsV2,\n  ): ClaudeCommand {\n    const args: string[] = [];\n    let input = '';\n\n    // Build prompt\n    const prompt = this.buildClaudePrompt(task, agent);\n\n    if (options.useStdin) {\n      input = prompt;\n    } else {\n      args.push('-p', prompt);\n    }\n\n    // Add tools\n    if (task.requirements.tools.length > 0) {\n      args.push('--allowedTools', task.requirements.tools.join(','));\n    }\n\n    // Add model if specified\n    if (options.model) {\n      args.push('--model', options.model);\n    }\n\n    // Add max tokens if specified\n    if (options.maxTokens) {\n      args.push('--max-tokens', options.maxTokens.toString());\n    }\n\n    // Add temperature if specified\n    if (options.temperature !== undefined) {\n      args.push('--temperature', options.temperature.toString());\n    }\n\n    // Skip permissions check for non-interactive environments\n    if (\n      options.nonInteractive ||\n      options.dangerouslySkipPermissions ||\n      this.environment.recommendedFlags.includes('--dangerously-skip-permissions')\n    ) {\n      args.push('--dangerously-skip-permissions');\n    }\n\n    // Add non-interactive flag if needed\n    if (options.nonInteractive) {\n      args.push('--non-interactive');\n    }\n\n    // Add auto-approve if specified\n    if (options.autoApprove) {\n      args.push('--auto-approve');\n    }\n\n    // Add output format\n    if (options.outputFormat) {\n      args.push('--output-format', options.outputFormat);\n    } else if (options.nonInteractive) {\n      // Default to JSON for non-interactive mode\n      args.push('--output-format', 'json');\n    }\n\n    // Add environment info for debugging\n    args.push(\n      '--metadata',\n      JSON.stringify({\n        environment: this.environment.terminalType,\n        interactive: this.environment.isInteractive,\n        executor: 'v2',\n      }),\n    );\n\n    return {\n      command: options.claudePath || 'claude',\n      args,\n      input,\n    };\n  }\n\n  private isInteractiveError(error: any): boolean {\n    if (!(error instanceof Error)) return false;\n\n    const errorMessage = error.message.toLowerCase();\n    return (\n      errorMessage.includes('raw mode') ||\n      errorMessage.includes('stdin') ||\n      errorMessage.includes('interactive') ||\n      errorMessage.includes('tty') ||\n      errorMessage.includes('terminal')\n    );\n  }\n\n  private isInteractiveErrorMessage(message: string): boolean {\n    const lowerMessage = message.toLowerCase();\n    return (\n      lowerMessage.includes('raw mode is not supported') ||\n      lowerMessage.includes('stdin is not a tty') ||\n      lowerMessage.includes('requires interactive terminal') ||\n      lowerMessage.includes('manual ui agreement needed')\n    );\n  }\n\n  private getDefaultResourceUsage(): ResourceUsage {\n    return {\n      cpuTime: 0,\n      maxMemory: 0,\n      diskIO: 0,\n      networkIO: 0,\n      fileHandles: 0,\n    };\n  }\n}\n\nexport default TaskExecutorV2;\n"],"names":["spawn","generateId","detectExecutionEnvironment","applySmartDefaults","TaskExecutorV2","TaskExecutor","environment","config","logger","info","terminalType","interactive","isInteractive","recommendations","recommendedFlags","executeClaudeTask","task","agent","claudeOptions","enhancedOptions","appliedDefaults","length","defaults","executeClaudeWithTimeoutV2","createExecutionContext","error","isInteractiveError","retryOnInteractiveError","warn","message","nonInteractive","dangerouslySkipPermissions","sessionId","context","options","startTime","Date","now","timeout","timeoutMs","command","buildClaudeCommandV2","env","process","environmentOverride","CLAUDE_TASK_ID","id","CLAUDE_AGENT_ID","CLAUDE_SESSION_ID","CLAUDE_WORKING_DIR","workingDirectory","CLAUDE_NON_INTERACTIVE","CLAUDE_AUTO_APPROVE","autoApprove","promptDefaults","CLAUDE_PROMPT_DEFAULTS","JSON","stringify","debug","args","workingDir","Promise","resolve","reject","outputBuffer","errorBuffer","isTimeout","timeoutHandle","setTimeout","pid","kill","killed","killTimeout","cwd","stdio","detached","shell","clearTimeout","Error","mode","stdout","on","data","chunk","toString","streamOutput","emit","type","stderr","isInteractiveErrorMessage","trim","code","signal","duration","exitCode","hasErrors","resourceUsage","collectResourceUsage","artifacts","collectArtifacts","result","success","output","resourcesUsed","metadata","collectionError","getDefaultResourceUsage","spawnError","input","prompt","buildClaudePrompt","useStdin","push","requirements","tools","join","model","maxTokens","temperature","undefined","includes","outputFormat","executor","claudePath","errorMessage","toLowerCase","lowerMessage","cpuTime","maxMemory","diskIO","networkIO","fileHandles"],"mappings":"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"}