{"version":3,"sources":["../../../../src/swarm/optimizations/ttl-map.ts"],"sourcesContent":["/**\n * TTL Map Implementation\n * Map with time-to-live for automatic entry expiration\n */\n\ninterface TTLItem<T> {\n  value: T;\n  expiry: number;\n  createdAt: number;\n  accessCount: number;\n  lastAccessedAt: number;\n}\n\nexport interface TTLMapOptions {\n  defaultTTL?: number;\n  cleanupInterval?: number;\n  maxSize?: number;\n  onExpire?: <K, V>(key: K, value: V) => void;\n}\n\nexport class TTLMap<K, V> {\n  private items = new Map<K, TTLItem<V>>();\n  private cleanupTimer?: NodeJS.Timeout;\n  private defaultTTL: number;\n  private cleanupInterval: number;\n  private maxSize?: number;\n  private onExpire?: <K, V>(key: K, value: V) => void;\n  private stats = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    expirations: 0,\n  };\n\n  constructor(options: TTLMapOptions = {}) {\n    this.defaultTTL = options.defaultTTL || 3600000; // 1 hour default\n    this.cleanupInterval = options.cleanupInterval || 60000; // 1 minute default\n    this.maxSize = options.maxSize;\n    this.onExpire = options.onExpire;\n\n    this.startCleanup();\n  }\n\n  set(key: K, value: V, ttl?: number): void {\n    const now = Date.now();\n    const expiry = now + (ttl || this.defaultTTL);\n\n    // Check if we need to evict items due to size limit\n    if (this.maxSize && this.items.size >= this.maxSize && !this.items.has(key)) {\n      this.evictLRU();\n    }\n\n    this.items.set(key, {\n      value,\n      expiry,\n      createdAt: now,\n      accessCount: 0,\n      lastAccessedAt: now,\n    });\n  }\n\n  get(key: K): V | undefined {\n    const item = this.items.get(key);\n\n    if (!item) {\n      this.stats.misses++;\n      return undefined;\n    }\n\n    const now = Date.now();\n\n    if (now > item.expiry) {\n      this.items.delete(key);\n      this.stats.expirations++;\n      this.stats.misses++;\n\n      if (this.onExpire) {\n        this.onExpire(key, item.value);\n      }\n\n      return undefined;\n    }\n\n    // Update access stats\n    item.accessCount++;\n    item.lastAccessedAt = now;\n    this.stats.hits++;\n\n    return item.value;\n  }\n\n  has(key: K): boolean {\n    const item = this.items.get(key);\n\n    if (!item) {\n      return false;\n    }\n\n    if (Date.now() > item.expiry) {\n      this.items.delete(key);\n      this.stats.expirations++;\n\n      if (this.onExpire) {\n        this.onExpire(key, item.value);\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  delete(key: K): boolean {\n    return this.items.delete(key);\n  }\n\n  clear(): void {\n    this.items.clear();\n  }\n\n  /**\n   * Update TTL for an existing key\n   */\n  touch(key: K, ttl?: number): boolean {\n    const item = this.items.get(key);\n\n    if (!item || Date.now() > item.expiry) {\n      return false;\n    }\n\n    item.expiry = Date.now() + (ttl || this.defaultTTL);\n    item.lastAccessedAt = Date.now();\n\n    return true;\n  }\n\n  /**\n   * Get remaining TTL for a key\n   */\n  getTTL(key: K): number {\n    const item = this.items.get(key);\n\n    if (!item) {\n      return -1;\n    }\n\n    const remaining = item.expiry - Date.now();\n    return remaining > 0 ? remaining : -1;\n  }\n\n  /**\n   * Get all keys (excluding expired ones)\n   */\n  keys(): K[] {\n    const now = Date.now();\n    const validKeys: K[] = [];\n\n    for (const [key, item] of this.items) {\n      if (now <= item.expiry) {\n        validKeys.push(key);\n      }\n    }\n\n    return validKeys;\n  }\n\n  /**\n   * Get all values (excluding expired ones)\n   */\n  values(): V[] {\n    const now = Date.now();\n    const validValues: V[] = [];\n\n    for (const item of this.items.values()) {\n      if (now <= item.expiry) {\n        validValues.push(item.value);\n      }\n    }\n\n    return validValues;\n  }\n\n  /**\n   * Get all entries (excluding expired ones)\n   */\n  entries(): Array<[K, V]> {\n    const now = Date.now();\n    const validEntries: Array<[K, V]> = [];\n\n    for (const [key, item] of this.items) {\n      if (now <= item.expiry) {\n        validEntries.push([key, item.value]);\n      }\n    }\n\n    return validEntries;\n  }\n\n  /**\n   * Get size (excluding expired items)\n   */\n  get size(): number {\n    this.cleanup(); // Clean up expired items first\n    return this.items.size;\n  }\n\n  private startCleanup(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.cleanupInterval);\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    let cleaned = 0;\n\n    for (const [key, item] of this.items) {\n      if (now > item.expiry) {\n        this.items.delete(key);\n        cleaned++;\n        this.stats.expirations++;\n\n        if (this.onExpire) {\n          this.onExpire(key, item.value);\n        }\n      }\n    }\n\n    if (cleaned > 0) {\n      // Optional: Log cleanup stats\n    }\n  }\n\n  private evictLRU(): void {\n    let lruKey: K | undefined;\n    let lruTime = Infinity;\n\n    // Find least recently used item\n    for (const [key, item] of this.items) {\n      if (item.lastAccessedAt < lruTime) {\n        lruTime = item.lastAccessedAt;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey !== undefined) {\n      this.items.delete(lruKey);\n      this.stats.evictions++;\n    }\n  }\n\n  /**\n   * Stop the cleanup timer\n   */\n  destroy(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n    }\n    this.items.clear();\n  }\n\n  /**\n   * Get statistics about the map\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      size: this.items.size,\n      hitRate: this.stats.hits / (this.stats.hits + this.stats.misses) || 0,\n    };\n  }\n\n  /**\n   * Get detailed information about all items\n   */\n  inspect(): Map<\n    K,\n    {\n      value: V;\n      ttl: number;\n      age: number;\n      accessCount: number;\n      lastAccessed: number;\n    }\n  > {\n    const now = Date.now();\n    const result = new Map();\n\n    for (const [key, item] of this.items) {\n      if (now <= item.expiry) {\n        result.set(key, {\n          value: item.value,\n          ttl: item.expiry - now,\n          age: now - item.createdAt,\n          accessCount: item.accessCount,\n          lastAccessed: now - item.lastAccessedAt,\n        });\n      }\n    }\n\n    return result;\n  }\n}\n"],"names":["TTLMap","items","Map","cleanupTimer","defaultTTL","cleanupInterval","maxSize","onExpire","stats","hits","misses","evictions","expirations","options","startCleanup","set","key","value","ttl","now","Date","expiry","size","has","evictLRU","createdAt","accessCount","lastAccessedAt","get","item","undefined","delete","clear","touch","getTTL","remaining","keys","validKeys","push","values","validValues","entries","validEntries","cleanup","setInterval","cleaned","lruKey","lruTime","Infinity","destroy","clearInterval","getStats","hitRate","inspect","result","age","lastAccessed"],"mappings":"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"}