{"version":3,"sources":["../../../../src/swarm/optimizations/async-file-manager.ts"],"sourcesContent":["/**\n * Async File Manager\n * Handles non-blocking file operations with queuing\n */\n\nimport { promises as fs } from 'node:fs';\nimport { pipeline } from 'node:stream/promises';\nimport { createWriteStream, createReadStream } from 'node:fs';\nimport { Readable } from 'node:stream';\nimport { join, dirname } from 'node:path';\nimport PQueue from 'p-queue';\nimport { Logger } from '../../core/logger.js';\n\nexport interface FileOperationResult {\n  path: string;\n  operation: 'read' | 'write' | 'delete' | 'mkdir';\n  success: boolean;\n  duration: number;\n  size?: number;\n  error?: Error;\n}\n\nexport class AsyncFileManager {\n  private writeQueue: PQueue;\n  private readQueue: PQueue;\n  private logger: Logger;\n  private metrics = {\n    operations: new Map<string, number>(),\n    totalBytes: 0,\n    errors: 0,\n  };\n\n  constructor(\n    private concurrency = {\n      write: 10,\n      read: 20,\n    },\n  ) {\n    this.writeQueue = new PQueue({ concurrency: this.concurrency.write });\n    this.readQueue = new PQueue({ concurrency: this.concurrency.read });\n\n    // Use test-safe logger configuration\n    const loggerConfig =\n      process.env.CLAUDE_FLOW_ENV === 'test'\n        ? { level: 'error' as const, format: 'json' as const, destination: 'console' as const }\n        : { level: 'info' as const, format: 'json' as const, destination: 'console' as const };\n\n    this.logger = new Logger(loggerConfig, { component: 'AsyncFileManager' });\n  }\n\n  async writeFile(path: string, data: string | Buffer): Promise<FileOperationResult> {\n    const start = Date.now();\n\n    return await this.writeQueue.add(async () => {\n      try {\n        // Ensure directory exists\n        await this.ensureDirectory(dirname(path));\n\n        // Use streaming for large files\n        if (data.length > 1024 * 1024) {\n          // > 1MB\n          await this.streamWrite(path, data);\n        } else {\n          await fs.writeFile(path, data, 'utf8');\n        }\n\n        const duration = Date.now() - start;\n        const size = Buffer.byteLength(data);\n\n        this.trackOperation('write', size);\n\n        return {\n          path,\n          operation: 'write' as const,\n          success: true,\n          duration,\n          size,\n        };\n      } catch (error) {\n        this.metrics.errors++;\n        this.logger.error('Failed to write file', { path, error });\n\n        return {\n          path,\n          operation: 'write' as const,\n          success: false,\n          duration: Date.now() - start,\n          error: error as Error,\n        };\n      }\n    });\n  }\n\n  async readFile(path: string): Promise<FileOperationResult & { data?: string }> {\n    const start = Date.now();\n\n    return await this.readQueue.add(async () => {\n      try {\n        const data = await fs.readFile(path, 'utf8');\n        const duration = Date.now() - start;\n        const size = Buffer.byteLength(data);\n\n        this.trackOperation('read', size);\n\n        return {\n          path,\n          operation: 'read' as const,\n          success: true,\n          duration,\n          size,\n          data,\n        };\n      } catch (error) {\n        this.metrics.errors++;\n        this.logger.error('Failed to read file', { path, error });\n\n        return {\n          path,\n          operation: 'read' as const,\n          success: false,\n          duration: Date.now() - start,\n          error: error as Error,\n        };\n      }\n    });\n  }\n\n  async writeJSON(path: string, data: any, pretty = true): Promise<FileOperationResult> {\n    const jsonString = pretty ? JSON.stringify(data, null, 2) : JSON.stringify(data);\n\n    return this.writeFile(path, jsonString);\n  }\n\n  async readJSON(path: string): Promise<FileOperationResult & { data?: any }> {\n    const result = await this.readFile(path);\n\n    if (result.success && result.data) {\n      try {\n        const parsed = JSON.parse(result.data);\n        return { ...result, data: parsed };\n      } catch (error) {\n        return {\n          ...result,\n          success: false,\n          error: new Error('Invalid JSON format'),\n        };\n      }\n    }\n\n    return result;\n  }\n\n  async deleteFile(path: string): Promise<FileOperationResult> {\n    const start = Date.now();\n\n    return this.writeQueue.add(async () => {\n      try {\n        await fs.unlink(path);\n\n        this.trackOperation('delete', 0);\n\n        return {\n          path,\n          operation: 'delete',\n          success: true,\n          duration: Date.now() - start,\n        };\n      } catch (error) {\n        this.metrics.errors++;\n        this.logger.error('Failed to delete file', { path, error });\n\n        return {\n          path,\n          operation: 'delete',\n          success: false,\n          duration: Date.now() - start,\n          error: error as Error,\n        };\n      }\n    });\n  }\n\n  async ensureDirectory(path: string): Promise<FileOperationResult> {\n    const start = Date.now();\n\n    try {\n      await fs.mkdir(path, { recursive: true });\n\n      this.trackOperation('mkdir', 0);\n\n      return {\n        path,\n        operation: 'mkdir',\n        success: true,\n        duration: Date.now() - start,\n      };\n    } catch (error) {\n      this.metrics.errors++;\n      this.logger.error('Failed to create directory', { path, error });\n\n      return {\n        path,\n        operation: 'mkdir',\n        success: false,\n        duration: Date.now() - start,\n        error: error as Error,\n      };\n    }\n  }\n\n  async ensureDirectories(paths: string[]): Promise<FileOperationResult[]> {\n    return Promise.all(paths.map((path) => this.ensureDirectory(path)));\n  }\n\n  private async streamWrite(path: string, data: string | Buffer): Promise<void> {\n    const stream = createWriteStream(path);\n    await pipeline(Readable.from(data), stream);\n  }\n\n  async streamRead(path: string): Promise<NodeJS.ReadableStream> {\n    return createReadStream(path);\n  }\n\n  async copyFile(source: string, destination: string): Promise<FileOperationResult> {\n    const start = Date.now();\n\n    return this.writeQueue.add(async () => {\n      try {\n        await this.ensureDirectory(dirname(destination));\n        await fs.copyFile(source, destination);\n\n        const stats = await fs.stat(destination);\n        this.trackOperation('write', stats.size);\n\n        return {\n          path: destination,\n          operation: 'write',\n          success: true,\n          duration: Date.now() - start,\n          size: stats.size,\n        };\n      } catch (error) {\n        this.metrics.errors++;\n        this.logger.error('Failed to copy file', { source, destination, error });\n\n        return {\n          path: destination,\n          operation: 'write',\n          success: false,\n          duration: Date.now() - start,\n          error: error as Error,\n        };\n      }\n    });\n  }\n\n  async moveFile(source: string, destination: string): Promise<FileOperationResult> {\n    const copyResult = await this.copyFile(source, destination);\n    if (copyResult.success) {\n      await this.deleteFile(source);\n    }\n    return copyResult;\n  }\n\n  private trackOperation(type: string, bytes: number): void {\n    const count = this.metrics.operations.get(type) || 0;\n    this.metrics.operations.set(type, count + 1);\n    this.metrics.totalBytes += bytes;\n  }\n\n  getMetrics() {\n    return {\n      operations: Object.fromEntries(this.metrics.operations),\n      totalBytes: this.metrics.totalBytes,\n      errors: this.metrics.errors,\n      writeQueueSize: this.writeQueue.size,\n      readQueueSize: this.readQueue.size,\n      writeQueuePending: this.writeQueue.pending,\n      readQueuePending: this.readQueue.pending,\n    };\n  }\n\n  async waitForPendingOperations(): Promise<void> {\n    await Promise.all([this.writeQueue.onIdle(), this.readQueue.onIdle()]);\n  }\n\n  clearQueues(): void {\n    this.writeQueue.clear();\n    this.readQueue.clear();\n  }\n}\n"],"names":["promises","fs","pipeline","createWriteStream","createReadStream","Readable","dirname","PQueue","Logger","AsyncFileManager","writeQueue","readQueue","logger","metrics","operations","Map","totalBytes","errors","concurrency","write","read","loggerConfig","process","env","CLAUDE_FLOW_ENV","level","format","destination","component","writeFile","path","data","start","Date","now","add","ensureDirectory","length","streamWrite","duration","size","Buffer","byteLength","trackOperation","operation","success","error","readFile","writeJSON","pretty","jsonString","JSON","stringify","readJSON","result","parsed","parse","Error","deleteFile","unlink","mkdir","recursive","ensureDirectories","paths","Promise","all","map","stream","from","streamRead","copyFile","source","stats","stat","moveFile","copyResult","type","bytes","count","get","set","getMetrics","Object","fromEntries","writeQueueSize","readQueueSize","writeQueuePending","pending","readQueuePending","waitForPendingOperations","onIdle","clearQueues","clear"],"mappings":"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"}