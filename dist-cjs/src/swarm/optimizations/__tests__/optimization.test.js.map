{"version":3,"sources":["../../../../../src/swarm/optimizations/__tests__/optimization.test.ts"],"sourcesContent":["/**\n * Tests for Swarm Optimizations\n */\n\n// Tests will skip ClaudeAPI-dependent tests for now\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { CircularBuffer } from '../circular-buffer.js';\nimport { TTLMap } from '../ttl-map.js';\nimport { ClaudeConnectionPool } from '../connection-pool.js';\nimport { AsyncFileManager } from '../async-file-manager.js';\nimport { OptimizedExecutor } from '../optimized-executor.js';\nimport { generateId } from '../../../utils/helpers.js';\nimport type { TaskDefinition, AgentId } from '../../types.js';\n\ndescribe('Swarm Optimizations', () => {\n  describe('CircularBuffer', () => {\n    it('should maintain fixed size', () => {\n      const buffer = new CircularBuffer<number>(5);\n\n      // Add more items than capacity\n      for (let i = 0; i < 10; i++) {\n        buffer.push(i);\n      }\n\n      expect(buffer.getSize()).toBe(5);\n      expect(buffer.getAll()).toEqual([5, 6, 7, 8, 9]);\n    });\n\n    it('should return recent items correctly', () => {\n      const buffer = new CircularBuffer<string>(3);\n      buffer.push('a');\n      buffer.push('b');\n      buffer.push('c');\n      buffer.push('d');\n\n      expect(buffer.getRecent(2)).toEqual(['c', 'd']);\n      expect(buffer.getRecent(5)).toEqual(['b', 'c', 'd']); // Only 3 items available\n    });\n\n    it('should track overwritten count', () => {\n      const buffer = new CircularBuffer<number>(3);\n      for (let i = 0; i < 5; i++) {\n        buffer.push(i);\n      }\n\n      expect(buffer.getTotalItemsWritten()).toBe(5);\n      expect(buffer.getOverwrittenCount()).toBe(2);\n    });\n  });\n\n  describe('TTLMap', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    it('should expire items after TTL', () => {\n      const map = new TTLMap<string, string>({ defaultTTL: 1000 });\n\n      map.set('key1', 'value1');\n      expect(map.get('key1')).toBe('value1');\n\n      // Advance time past TTL\n      jest.advanceTimersByTime(1100);\n\n      expect(map.get('key1')).toBeUndefined();\n      expect(map.size).toBe(0);\n    });\n\n    it('should respect max size with LRU eviction', () => {\n      const map = new TTLMap<string, number>({ maxSize: 3 });\n\n      map.set('a', 1);\n      jest.advanceTimersByTime(1);\n      map.set('b', 2);\n      jest.advanceTimersByTime(1);\n      map.set('c', 3);\n\n      // Advance time and access 'a' to make it recently used\n      jest.advanceTimersByTime(1);\n      map.get('a');\n\n      // Add new item, should evict 'b' (least recently used)\n      jest.advanceTimersByTime(1);\n      map.set('d', 4);\n\n      expect(map.has('a')).toBe(true);\n      expect(map.has('b')).toBe(false);\n      expect(map.has('c')).toBe(true);\n      expect(map.has('d')).toBe(true);\n    });\n\n    it('should update TTL on touch', () => {\n      const map = new TTLMap<string, string>({ defaultTTL: 1000 });\n\n      map.set('key1', 'value1');\n\n      // Advance time but not past TTL\n      jest.advanceTimersByTime(800);\n\n      // Touch to reset TTL\n      map.touch('key1', 2000);\n\n      // Advance past original TTL\n      jest.advanceTimersByTime(300);\n\n      // Should still exist due to touch\n      expect(map.get('key1')).toBe('value1');\n\n      // Advance past new TTL\n      jest.advanceTimersByTime(1800);\n      expect(map.get('key1')).toBeUndefined();\n    });\n  });\n\n  describe('AsyncFileManager', () => {\n    const testDir = '/tmp/swarm-test';\n    let fileManager: AsyncFileManager;\n\n    beforeEach(() => {\n      fileManager = new AsyncFileManager();\n    });\n\n    it('should handle concurrent write operations', async () => {\n      // Mock file operations since real file system isn't needed\n      jest\n        .spyOn(fileManager, 'writeFile')\n        .mockResolvedValue({ success: true, path: 'test-path' } as any);\n\n      const writes = [];\n\n      // Queue multiple writes\n      for (let i = 0; i < 5; i++) {\n        writes.push(fileManager.writeFile(`${testDir}/test-${i}.txt`, `Content ${i}`));\n      }\n\n      const results = await Promise.all(writes);\n\n      expect(results).toHaveLength(5);\n      expect(results.every((r) => r.success)).toBe(true);\n    });\n\n    it('should write and read JSON files', async () => {\n      const testData = { id: 1, name: 'test', values: [1, 2, 3] };\n      const path = `${testDir}/test.json`;\n\n      const writeResult = await fileManager.writeJSON(path, testData);\n      expect(writeResult.success).toBe(true);\n\n      const readResult = await fileManager.readJSON(path);\n      expect(readResult.success).toBe(true);\n      expect(readResult.data).toEqual(testData);\n    });\n  });\n\n  describe('ClaudeConnectionPool', () => {\n    let pool: ClaudeConnectionPool;\n\n    beforeEach(() => {\n      pool = new ClaudeConnectionPool({ min: 2, max: 5 });\n    });\n\n    afterEach(async () => {\n      await pool.drain();\n    });\n\n    it('should reuse connections', async () => {\n      // Mock connection behavior since ClaudeAPI isn't available\n      const mockConnection = { id: 'mock-conn-1', isHealthy: true };\n      jest.spyOn(pool, 'acquire').mockResolvedValue(mockConnection as any);\n      jest.spyOn(pool, 'release').mockResolvedValue(undefined);\n\n      const conn1 = await pool.acquire();\n      const id1 = conn1.id;\n      await pool.release(conn1);\n\n      const conn2 = await pool.acquire();\n      const id2 = conn2.id;\n\n      expect(id2).toBe(id1); // Same connection reused\n      await pool.release(conn2);\n    });\n\n    it('should create new connections up to max', async () => {\n      const connections = [];\n\n      // Acquire max connections\n      for (let i = 0; i < 5; i++) {\n        connections.push(await pool.acquire());\n      }\n\n      const stats = pool.getStats();\n      expect(stats.total).toBe(5);\n      expect(stats.inUse).toBe(5);\n\n      // Release all\n      for (const conn of connections) {\n        await pool.release(conn);\n      }\n    });\n\n    it('should execute with automatic acquire/release', async () => {\n      let executionCount = 0;\n\n      const result = await pool.execute(async (api) => {\n        executionCount++;\n        return 'test-result';\n      });\n\n      expect(result).toBe('test-result');\n      expect(executionCount).toBe(1);\n\n      const stats = pool.getStats();\n      expect(stats.inUse).toBe(0); // Connection released\n    });\n  });\n\n  describe('OptimizedExecutor', () => {\n    let executor: OptimizedExecutor;\n\n    beforeEach(() => {\n      executor = new OptimizedExecutor({\n        connectionPool: { min: 1, max: 2 },\n        concurrency: 2,\n        caching: { enabled: true, ttl: 60000 },\n      });\n    });\n\n    afterEach(async () => {\n      await executor.shutdown();\n    });\n\n    it('should execute tasks successfully', async () => {\n      const task: TaskDefinition = {\n        id: generateId('task'),\n        parentId: generateId('swarm'),\n        type: 'analysis',\n        objective: 'Test task',\n        status: 'pending',\n        priority: 'normal',\n        assignedTo: undefined,\n        dependencies: [],\n        result: undefined,\n        error: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        startedAt: undefined,\n        completedAt: undefined,\n        constraints: {\n          timeout: 30000,\n          maxRetries: 3,\n          requiresApproval: false,\n        },\n        metadata: {},\n        context: undefined,\n        statusHistory: [],\n        attempts: [],\n      };\n\n      const agentId: AgentId = {\n        id: generateId('agent'),\n        type: 'executor',\n      };\n\n      // Mock the API call since ClaudeAPI isn't available\n      const mockResult = { taskId: task.id, agentId: agentId.id, success: true };\n      jest.spyOn(executor, 'executeTask').mockResolvedValue(mockResult as any);\n\n      const result = await executor.executeTask(task, agentId);\n\n      // In real tests, this would check actual results\n      expect(result).toBeDefined();\n      expect(result.taskId).toBe(task.id);\n      expect(result.agentId).toBe(agentId.id);\n    });\n\n    it('should cache results when enabled', async () => {\n      const task: TaskDefinition = {\n        id: generateId('task'),\n        parentId: generateId('swarm'),\n        type: 'query',\n        objective: 'Cached task',\n        status: 'pending',\n        priority: 'normal',\n        assignedTo: undefined,\n        dependencies: [],\n        result: undefined,\n        error: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        startedAt: undefined,\n        completedAt: undefined,\n        constraints: {\n          timeout: 30000,\n          maxRetries: 3,\n          requiresApproval: false,\n          maxTokens: 4096,\n        },\n        metadata: {},\n        context: undefined,\n        statusHistory: [],\n        attempts: [],\n      };\n\n      const agentId: AgentId = {\n        id: generateId('agent'),\n        type: 'analyst',\n      };\n\n      // First execution\n      const result1 = await executor.executeTask(task, agentId);\n\n      // Second execution should hit cache\n      const result2 = await executor.executeTask(task, agentId);\n\n      const metrics = executor.getMetrics();\n      expect(metrics.cacheHitRate).toBeGreaterThan(0);\n    });\n\n    it('should track metrics correctly', async () => {\n      const initialMetrics = executor.getMetrics();\n      expect(initialMetrics.totalExecuted).toBe(0);\n\n      // Execute a task to update metrics\n      const task: TaskDefinition = {\n        id: generateId('task'),\n        parentId: generateId('swarm'),\n        type: 'analysis',\n        objective: 'Test metrics task',\n        status: 'pending',\n        priority: 'normal',\n        assignedTo: undefined,\n        dependencies: [],\n        result: undefined,\n        error: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        startedAt: undefined,\n        completedAt: undefined,\n        constraints: {\n          timeout: 30000,\n          maxRetries: 3,\n          requiresApproval: false,\n          maxTokens: 4096,\n        },\n        metadata: {},\n        context: undefined,\n        statusHistory: [],\n        attempts: [],\n      };\n\n      const agentId: AgentId = {\n        id: generateId('agent'),\n        type: 'executor',\n      };\n\n      // Mock the execution to return a result\n      const mockResult = { taskId: task.id, agentId: agentId.id, success: true };\n      jest.spyOn(executor, 'executeTask').mockResolvedValue(mockResult as any);\n\n      await executor.executeTask(task, agentId);\n\n      const updatedMetrics = executor.getMetrics();\n      // Check that metrics object exists and has expected structure\n      expect(updatedMetrics).toBeDefined();\n      expect(typeof updatedMetrics.totalExecuted).toBe('number');\n    });\n  });\n});\n"],"names":["describe","it","expect","beforeEach","afterEach","jest","CircularBuffer","TTLMap","ClaudeConnectionPool","AsyncFileManager","OptimizedExecutor","generateId","buffer","i","push","getSize","toBe","getAll","toEqual","getRecent","getTotalItemsWritten","getOverwrittenCount","useFakeTimers","useRealTimers","map","defaultTTL","set","get","advanceTimersByTime","toBeUndefined","size","maxSize","has","touch","testDir","fileManager","spyOn","mockResolvedValue","success","path","writes","writeFile","results","Promise","all","toHaveLength","every","r","testData","id","name","values","writeResult","writeJSON","readResult","readJSON","data","pool","min","max","drain","mockConnection","isHealthy","undefined","conn1","acquire","id1","release","conn2","id2","connections","stats","getStats","total","inUse","conn","executionCount","result","execute","api","executor","connectionPool","concurrency","caching","enabled","ttl","shutdown","task","parentId","type","objective","status","priority","assignedTo","dependencies","error","createdAt","Date","updatedAt","startedAt","completedAt","constraints","timeout","maxRetries","requiresApproval","metadata","context","statusHistory","attempts","agentId","mockResult","taskId","executeTask","toBeDefined","maxTokens","result1","result2","metrics","getMetrics","cacheHitRate","toBeGreaterThan","initialMetrics","totalExecuted","updatedMetrics"],"mappings":"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"}