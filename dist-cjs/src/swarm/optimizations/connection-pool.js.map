{"version":3,"sources":["../../../../src/swarm/optimizations/connection-pool.ts"],"sourcesContent":["/**\n * Connection Pool for Claude API\n * Manages reusable connections to improve performance\n */\n\nimport { EventEmitter } from 'node:events';\nimport { Logger } from '../../core/logger.js';\n// Mock ClaudeAPI for testing when service doesn't exist\nexport class ClaudeAPI {\n  id: string;\n  isHealthy: boolean;\n\n  constructor() {\n    this.id = `mock-api-${Date.now()}`;\n    this.isHealthy = true;\n  }\n\n  async healthCheck(): Promise<boolean> {\n    return this.isHealthy;\n  }\n\n  async complete(options: any): Promise<any> {\n    // Mock response for testing\n    return {\n      content: [{ text: `Mock response for: ${options.messages?.[0]?.content || 'test'}` }],\n      model: options.model || 'claude-3-5-sonnet-20241022',\n      usage: {\n        input_tokens: 10,\n        output_tokens: 20,\n      },\n    };\n  }\n}\n\nexport interface PoolConfig {\n  min: number;\n  max: number;\n  acquireTimeoutMillis: number;\n  idleTimeoutMillis: number;\n  evictionRunIntervalMillis: number;\n  testOnBorrow: boolean;\n}\n\nexport interface PooledConnection {\n  id: string;\n  api: ClaudeAPI;\n  inUse: boolean;\n  createdAt: Date;\n  lastUsedAt: Date;\n  useCount: number;\n}\n\nexport class ClaudeConnectionPool extends EventEmitter {\n  private connections: Map<string, PooledConnection> = new Map();\n  private waitingQueue: Array<{\n    resolve: (conn: PooledConnection) => void;\n    reject: (error: Error) => void;\n    timeout: NodeJS.Timeout;\n  }> = [];\n\n  private config: PoolConfig;\n  private logger: Logger;\n  private evictionTimer?: NodeJS.Timeout;\n  private isShuttingDown = false;\n\n  constructor(config: Partial<PoolConfig> = {}) {\n    super();\n\n    this.config = {\n      min: 2,\n      max: 10,\n      acquireTimeoutMillis: 30000,\n      idleTimeoutMillis: 30000,\n      evictionRunIntervalMillis: 10000,\n      testOnBorrow: true,\n      ...config,\n    };\n\n    this.logger = new Logger(\n      { level: 'info', format: 'json', destination: 'console' },\n      { component: 'ClaudeConnectionPool' },\n    );\n\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Create minimum connections\n    for (let i = 0; i < this.config.min; i++) {\n      await this.createConnection();\n    }\n\n    // Start eviction timer\n    this.evictionTimer = setInterval(() => {\n      this.evictIdleConnections();\n    }, this.config.evictionRunIntervalMillis);\n\n    this.logger.info('Connection pool initialized', {\n      min: this.config.min,\n      max: this.config.max,\n    });\n  }\n\n  private async createConnection(): Promise<PooledConnection> {\n    const id = `conn-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n    const api = new ClaudeAPI();\n\n    const connection: PooledConnection = {\n      id,\n      api,\n      inUse: false,\n      createdAt: new Date(),\n      lastUsedAt: new Date(),\n      useCount: 0,\n    };\n\n    this.connections.set(id, connection);\n    this.emit('connection:created', connection);\n\n    return connection;\n  }\n\n  async acquire(): Promise<PooledConnection> {\n    if (this.isShuttingDown) {\n      throw new Error('Connection pool is shutting down');\n    }\n\n    // Try to find an available connection\n    for (const conn of this.connections.values()) {\n      if (!conn.inUse) {\n        conn.inUse = true;\n        conn.lastUsedAt = new Date();\n        conn.useCount++;\n\n        // Test connection if configured\n        if (this.config.testOnBorrow) {\n          const isHealthy = await this.testConnection(conn);\n          if (!isHealthy) {\n            await this.destroyConnection(conn);\n            continue;\n          }\n        }\n\n        this.emit('connection:acquired', conn);\n        return conn;\n      }\n    }\n\n    // Create new connection if under limit\n    if (this.connections.size < this.config.max) {\n      const conn = await this.createConnection();\n      conn.inUse = true;\n      conn.useCount++;\n      this.emit('connection:acquired', conn);\n      return conn;\n    }\n\n    // Wait for a connection to become available\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        const index = this.waitingQueue.findIndex((item) => item.resolve === resolve);\n        if (index !== -1) {\n          this.waitingQueue.splice(index, 1);\n        }\n        reject(new Error('Connection acquire timeout'));\n      }, this.config.acquireTimeoutMillis);\n\n      this.waitingQueue.push({ resolve, reject, timeout });\n    });\n  }\n\n  async release(connection: PooledConnection): Promise<void> {\n    const conn = this.connections.get(connection.id);\n    if (!conn) {\n      this.logger.warn('Attempted to release unknown connection', { id: connection.id });\n      return;\n    }\n\n    conn.inUse = false;\n    conn.lastUsedAt = new Date();\n\n    this.emit('connection:released', conn);\n\n    // Check if anyone is waiting for a connection\n    if (this.waitingQueue.length > 0) {\n      const waiter = this.waitingQueue.shift();\n      if (waiter) {\n        clearTimeout(waiter.timeout);\n        conn.inUse = true;\n        conn.useCount++;\n        waiter.resolve(conn);\n      }\n    }\n  }\n\n  async execute<T>(fn: (api: ClaudeAPI) => Promise<T>): Promise<T> {\n    const conn = await this.acquire();\n    try {\n      return await fn(conn.api);\n    } finally {\n      await this.release(conn);\n    }\n  }\n\n  private async testConnection(conn: PooledConnection): Promise<boolean> {\n    try {\n      // Simple health check - could be expanded\n      return true;\n    } catch (error) {\n      this.logger.warn('Connection health check failed', {\n        id: conn.id,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return false;\n    }\n  }\n\n  private async destroyConnection(conn: PooledConnection): Promise<void> {\n    this.connections.delete(conn.id);\n    this.emit('connection:destroyed', conn);\n\n    // Ensure minimum connections\n    if (this.connections.size < this.config.min && !this.isShuttingDown) {\n      await this.createConnection();\n    }\n  }\n\n  private evictIdleConnections(): void {\n    const now = Date.now();\n    const idleThreshold = now - this.config.idleTimeoutMillis;\n\n    for (const conn of this.connections.values()) {\n      if (\n        !conn.inUse &&\n        conn.lastUsedAt.getTime() < idleThreshold &&\n        this.connections.size > this.config.min\n      ) {\n        this.destroyConnection(conn);\n      }\n    }\n  }\n\n  async drain(): Promise<void> {\n    this.isShuttingDown = true;\n\n    // Clear eviction timer\n    if (this.evictionTimer) {\n      clearInterval(this.evictionTimer);\n      this.evictionTimer = undefined;\n    }\n\n    // Reject all waiting requests\n    for (const waiter of this.waitingQueue) {\n      clearTimeout(waiter.timeout);\n      waiter.reject(new Error('Connection pool is draining'));\n    }\n    this.waitingQueue = [];\n\n    // Wait for all connections to be released\n    const maxWaitTime = 30000; // 30 seconds\n    const startTime = Date.now();\n\n    while (true) {\n      const inUseCount = Array.from(this.connections.values()).filter((conn) => conn.inUse).length;\n\n      if (inUseCount === 0) break;\n\n      if (Date.now() - startTime > maxWaitTime) {\n        this.logger.warn('Timeout waiting for connections to be released', { inUseCount });\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n\n    // Destroy all connections\n    for (const conn of this.connections.values()) {\n      await this.destroyConnection(conn);\n    }\n\n    this.logger.info('Connection pool drained');\n  }\n\n  getStats() {\n    const connections = Array.from(this.connections.values());\n    return {\n      total: connections.length,\n      inUse: connections.filter((c) => c.inUse).length,\n      idle: connections.filter((c) => !c.inUse).length,\n      waitingQueue: this.waitingQueue.length,\n      totalUseCount: connections.reduce((sum, c) => sum + c.useCount, 0),\n    };\n  }\n}\n"],"names":["EventEmitter","Logger","ClaudeAPI","id","isHealthy","Date","now","healthCheck","complete","options","content","text","messages","model","usage","input_tokens","output_tokens","ClaudeConnectionPool","connections","Map","waitingQueue","config","logger","evictionTimer","isShuttingDown","min","max","acquireTimeoutMillis","idleTimeoutMillis","evictionRunIntervalMillis","testOnBorrow","level","format","destination","component","initialize","i","createConnection","setInterval","evictIdleConnections","info","Math","random","toString","substring","api","connection","inUse","createdAt","lastUsedAt","useCount","set","emit","acquire","Error","conn","values","testConnection","destroyConnection","size","Promise","resolve","reject","timeout","setTimeout","index","findIndex","item","splice","push","release","get","warn","length","waiter","shift","clearTimeout","execute","fn","error","message","delete","idleThreshold","getTime","drain","clearInterval","undefined","maxWaitTime","startTime","inUseCount","Array","from","filter","getStats","total","c","idle","totalUseCount","reduce","sum"],"mappings":"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"}