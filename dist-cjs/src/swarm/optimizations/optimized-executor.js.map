{"version":3,"sources":["../../../../src/swarm/optimizations/optimized-executor.ts"],"sourcesContent":["/**\n * Optimized Task Executor\n * Implements async execution with connection pooling and caching\n */\n\nimport { EventEmitter } from 'node:events';\nimport { Logger } from '../../core/logger.js';\nimport { ClaudeConnectionPool } from './connection-pool.js';\nimport { AsyncFileManager } from './async-file-manager.js';\nimport { TTLMap } from './ttl-map.js';\nimport { CircularBuffer } from './circular-buffer.js';\nimport PQueue from 'p-queue';\nimport type {\n  TaskDefinition,\n  TaskResult,\n  AgentId,\n  TaskStatus,\n  TaskType,\n  TaskPriority,\n} from '../types.js';\n\nexport interface ExecutorConfig {\n  connectionPool?: {\n    min?: number;\n    max?: number;\n  };\n  concurrency?: number;\n  caching?: {\n    enabled?: boolean;\n    ttl?: number;\n    maxSize?: number;\n  };\n  fileOperations?: {\n    outputDir?: string;\n    concurrency?: number;\n  };\n  monitoring?: {\n    metricsInterval?: number;\n    slowTaskThreshold?: number;\n  };\n}\n\nexport interface ExecutionMetrics {\n  totalExecuted: number;\n  totalSucceeded: number;\n  totalFailed: number;\n  avgExecutionTime: number;\n  cacheHitRate: number;\n  queueLength: number;\n  activeExecutions: number;\n}\n\nexport class OptimizedExecutor extends EventEmitter {\n  private logger: Logger;\n  private connectionPool: ClaudeConnectionPool;\n  private fileManager: AsyncFileManager;\n  private executionQueue: PQueue;\n  private resultCache: TTLMap<string, TaskResult>;\n  private executionHistory: CircularBuffer<{\n    taskId: string;\n    duration: number;\n    status: 'success' | 'failed';\n    timestamp: Date;\n  }>;\n\n  private metrics = {\n    totalExecuted: 0,\n    totalSucceeded: 0,\n    totalFailed: 0,\n    totalExecutionTime: 0,\n    cacheHits: 0,\n    cacheMisses: 0,\n  };\n\n  private activeExecutions = new Set<string>();\n\n  constructor(private config: ExecutorConfig = {}) {\n    super();\n\n    // Use test-safe logger configuration\n    const loggerConfig =\n      process.env.CLAUDE_FLOW_ENV === 'test'\n        ? { level: 'error' as const, format: 'json' as const, destination: 'console' as const }\n        : { level: 'info' as const, format: 'json' as const, destination: 'console' as const };\n\n    this.logger = new Logger(loggerConfig, { component: 'OptimizedExecutor' });\n\n    // Initialize connection pool\n    this.connectionPool = new ClaudeConnectionPool({\n      min: config.connectionPool?.min || 2,\n      max: config.connectionPool?.max || 10,\n    });\n\n    // Initialize file manager\n    this.fileManager = new AsyncFileManager({\n      write: config.fileOperations?.concurrency || 10,\n      read: config.fileOperations?.concurrency || 20,\n    });\n\n    // Initialize execution queue\n    this.executionQueue = new PQueue({\n      concurrency: config.concurrency || 10,\n    });\n\n    // Initialize result cache\n    this.resultCache = new TTLMap({\n      defaultTTL: config.caching?.ttl || 3600000, // 1 hour\n      maxSize: config.caching?.maxSize || 1000,\n      onExpire: (key, value) => {\n        this.logger.debug('Cache entry expired', { taskId: key });\n      },\n    });\n\n    // Initialize execution history\n    this.executionHistory = new CircularBuffer(1000);\n\n    // Start monitoring if configured\n    if (config.monitoring?.metricsInterval) {\n      setInterval(() => {\n        this.emitMetrics();\n      }, config.monitoring.metricsInterval);\n    }\n  }\n\n  async executeTask(task: TaskDefinition, agentId: AgentId): Promise<TaskResult> {\n    const startTime = Date.now();\n    const taskKey = this.getTaskCacheKey(task);\n\n    // Check cache if enabled\n    if (this.config.caching?.enabled) {\n      const cached = this.resultCache.get(taskKey);\n      if (cached) {\n        this.metrics.cacheHits++;\n        this.logger.debug('Cache hit for task', { taskId: task.id });\n        return cached;\n      }\n      this.metrics.cacheMisses++;\n    }\n\n    // Add to active executions\n    this.activeExecutions.add(task.id);\n\n    // Queue the execution\n    const result = await this.executionQueue.add(async () => {\n      try {\n        // Execute with connection pool\n        const executionResult = await this.connectionPool.execute(async (api) => {\n          const response = await api.complete({\n            messages: this.buildMessages(task),\n            model: task.metadata?.model || 'claude-3-5-sonnet-20241022',\n            max_tokens: task.constraints.maxTokens || 4096,\n            temperature: task.metadata?.temperature || 0.7,\n          });\n\n          return {\n            success: true,\n            output: response.content[0]?.text || '',\n            usage: {\n              inputTokens: response.usage?.input_tokens || 0,\n              outputTokens: response.usage?.output_tokens || 0,\n            },\n          };\n        });\n\n        // Save result to file asynchronously\n        if (this.config.fileOperations?.outputDir) {\n          const outputPath = `${this.config.fileOperations.outputDir}/${task.id}.json`;\n          await this.fileManager.writeJSON(outputPath, {\n            taskId: task.id,\n            agentId: agentId.id,\n            result: executionResult,\n            timestamp: new Date(),\n          });\n        }\n\n        // Create task result\n        const taskResult: TaskResult = {\n          taskId: task.id,\n          agentId: agentId.id,\n          success: executionResult.success,\n          output: executionResult.output,\n          error: undefined,\n          executionTime: Date.now() - startTime,\n          tokensUsed: executionResult.usage,\n          timestamp: new Date(),\n        };\n\n        // Cache result if enabled\n        if (this.config.caching?.enabled && executionResult.success) {\n          this.resultCache.set(taskKey, taskResult);\n        }\n\n        // Update metrics\n        this.metrics.totalExecuted++;\n        this.metrics.totalSucceeded++;\n        this.metrics.totalExecutionTime += taskResult.executionTime;\n\n        // Record in history\n        this.executionHistory.push({\n          taskId: task.id,\n          duration: taskResult.executionTime,\n          status: 'success',\n          timestamp: new Date(),\n        });\n\n        // Check if slow task\n        if (\n          this.config.monitoring?.slowTaskThreshold &&\n          taskResult.executionTime > this.config.monitoring.slowTaskThreshold\n        ) {\n          this.logger.warn('Slow task detected', {\n            taskId: task.id,\n            duration: taskResult.executionTime,\n            threshold: this.config.monitoring.slowTaskThreshold,\n          });\n        }\n\n        this.emit('task:completed', taskResult);\n        return taskResult;\n      } catch (error) {\n        this.metrics.totalExecuted++;\n        this.metrics.totalFailed++;\n\n        const errorResult: TaskResult = {\n          taskId: task.id,\n          agentId: agentId.id,\n          success: false,\n          output: '',\n          error: {\n            type: error instanceof Error ? error.constructor.name : 'UnknownError',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            code: (error as any).code,\n            stack: error instanceof Error ? error.stack : undefined,\n            context: { taskId: task.id, agentId: agentId.id },\n            recoverable: this.isRecoverableError(error),\n            retryable: this.isRetryableError(error),\n          },\n          executionTime: Date.now() - startTime,\n          timestamp: new Date(),\n        };\n\n        // Record in history\n        this.executionHistory.push({\n          taskId: task.id,\n          duration: errorResult.executionTime,\n          status: 'failed',\n          timestamp: new Date(),\n        });\n\n        this.emit('task:failed', errorResult);\n        throw error;\n      } finally {\n        this.activeExecutions.delete(task.id);\n      }\n    });\n\n    return result;\n  }\n\n  async executeBatch(tasks: TaskDefinition[], agentId: AgentId): Promise<TaskResult[]> {\n    return Promise.all(tasks.map((task) => this.executeTask(task, agentId)));\n  }\n\n  private buildMessages(task: TaskDefinition): any[] {\n    const messages = [];\n\n    // Add system message if needed\n    if (task.metadata?.systemPrompt) {\n      messages.push({\n        role: 'system',\n        content: task.metadata.systemPrompt,\n      });\n    }\n\n    // Add main task objective\n    messages.push({\n      role: 'user',\n      content: task.objective,\n    });\n\n    // Add context if available\n    if (task.context) {\n      if (task.context.previousResults?.length) {\n        messages.push({\n          role: 'assistant',\n          content:\n            'Previous results:\\n' + task.context.previousResults.map((r) => r.output).join('\\n\\n'),\n        });\n      }\n\n      if (task.context.relatedTasks?.length) {\n        messages.push({\n          role: 'user',\n          content:\n            'Related context:\\n' + task.context.relatedTasks.map((t) => t.objective).join('\\n'),\n        });\n      }\n    }\n\n    return messages;\n  }\n\n  private getTaskCacheKey(task: TaskDefinition): string {\n    // Create a cache key based on task properties\n    return `${task.type}-${task.objective}-${JSON.stringify(task.metadata || {})}`;\n  }\n\n  private isRecoverableError(error: any): boolean {\n    if (!error) return false;\n\n    // Network errors are often recoverable\n    if (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT' || error.code === 'ENOTFOUND') {\n      return true;\n    }\n\n    // Rate limit errors are recoverable with backoff\n    if (error.status === 429) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private isRetryableError(error: any): boolean {\n    if (!error) return false;\n\n    // Most recoverable errors are retryable\n    if (this.isRecoverableError(error)) {\n      return true;\n    }\n\n    // Server errors might be temporary\n    if (error.status >= 500 && error.status < 600) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getMetrics(): ExecutionMetrics {\n    const history = this.executionHistory.getAll();\n    const avgExecutionTime =\n      this.metrics.totalExecuted > 0\n        ? this.metrics.totalExecutionTime / this.metrics.totalExecuted\n        : 0;\n\n    const cacheTotal = this.metrics.cacheHits + this.metrics.cacheMisses;\n    const cacheHitRate = cacheTotal > 0 ? this.metrics.cacheHits / cacheTotal : 0;\n\n    return {\n      totalExecuted: this.metrics.totalExecuted,\n      totalSucceeded: this.metrics.totalSucceeded,\n      totalFailed: this.metrics.totalFailed,\n      avgExecutionTime,\n      cacheHitRate,\n      queueLength: this.executionQueue.size,\n      activeExecutions: this.activeExecutions.size,\n    };\n  }\n\n  private emitMetrics(): void {\n    const metrics = this.getMetrics();\n    this.emit('metrics', metrics);\n\n    // Also log if configured\n    this.logger.info('Executor metrics', metrics);\n  }\n\n  async waitForPendingExecutions(): Promise<void> {\n    await this.executionQueue.onIdle();\n    await this.fileManager.waitForPendingOperations();\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down optimized executor');\n\n    // Clear the queue\n    this.executionQueue.clear();\n\n    // Wait for active executions\n    await this.waitForPendingExecutions();\n\n    // Drain connection pool\n    await this.connectionPool.drain();\n\n    // Clear caches\n    this.resultCache.destroy();\n\n    this.logger.info('Optimized executor shut down');\n  }\n\n  /**\n   * Get execution history for analysis\n   */\n  getExecutionHistory() {\n    return this.executionHistory.snapshot();\n  }\n\n  /**\n   * Get connection pool statistics\n   */\n  getConnectionPoolStats() {\n    return this.connectionPool.getStats();\n  }\n\n  /**\n   * Get file manager metrics\n   */\n  getFileManagerMetrics() {\n    return this.fileManager.getMetrics();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return this.resultCache.getStats();\n  }\n}\n"],"names":["EventEmitter","Logger","ClaudeConnectionPool","AsyncFileManager","TTLMap","CircularBuffer","PQueue","OptimizedExecutor","logger","connectionPool","fileManager","executionQueue","resultCache","executionHistory","metrics","totalExecuted","totalSucceeded","totalFailed","totalExecutionTime","cacheHits","cacheMisses","activeExecutions","Set","config","loggerConfig","process","env","CLAUDE_FLOW_ENV","level","format","destination","component","min","max","write","fileOperations","concurrency","read","defaultTTL","caching","ttl","maxSize","onExpire","key","value","debug","taskId","monitoring","metricsInterval","setInterval","emitMetrics","executeTask","task","agentId","startTime","Date","now","taskKey","getTaskCacheKey","enabled","cached","get","id","add","result","executionResult","execute","api","response","complete","messages","buildMessages","model","metadata","max_tokens","constraints","maxTokens","temperature","success","output","content","text","usage","inputTokens","input_tokens","outputTokens","output_tokens","outputDir","outputPath","writeJSON","timestamp","taskResult","error","undefined","executionTime","tokensUsed","set","push","duration","status","slowTaskThreshold","warn","threshold","emit","errorResult","type","Error","name","message","code","stack","context","recoverable","isRecoverableError","retryable","isRetryableError","delete","executeBatch","tasks","Promise","all","map","systemPrompt","role","objective","previousResults","length","r","join","relatedTasks","t","JSON","stringify","getMetrics","history","getAll","avgExecutionTime","cacheTotal","cacheHitRate","queueLength","size","info","waitForPendingExecutions","onIdle","waitForPendingOperations","shutdown","clear","drain","destroy","getExecutionHistory","snapshot","getConnectionPoolStats","getStats","getFileManagerMetrics","getCacheStats"],"mappings":"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"}