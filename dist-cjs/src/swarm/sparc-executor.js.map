{"version":3,"sources":["../../../src/swarm/sparc-executor.ts"],"sourcesContent":["/**\n * SPARC-Enhanced Task Executor for Swarm\n * Implements the full SPARC methodology with TDD\n */\n\nimport type { TaskDefinition, AgentState, TaskResult } from './types.js';\nimport * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\nimport { Logger } from '../core/logger.js';\n\nexport interface SparcPhase {\n  name: string;\n  description: string;\n  outputs: string[];\n}\n\nexport interface SparcExecutorConfig {\n  logger?: Logger;\n  enableTDD?: boolean;\n  qualityThreshold?: number;\n  enableMemory?: boolean;\n}\n\nexport class SparcTaskExecutor {\n  private logger: Logger;\n  private enableTDD: boolean;\n  private qualityThreshold: number;\n  private enableMemory: boolean;\n  private phases: Map<string, SparcPhase> = new Map();\n\n  constructor(config: SparcExecutorConfig = {}) {\n    this.logger =\n      config.logger ||\n      new Logger(\n        { level: 'info', format: 'text', destination: 'console' },\n        { component: 'SparcTaskExecutor' },\n      );\n    this.enableTDD = config.enableTDD ?? true;\n    this.qualityThreshold = config.qualityThreshold ?? 0.8;\n    this.enableMemory = config.enableMemory ?? true;\n    this.initializePhases();\n  }\n\n  private initializePhases() {\n    this.phases = new Map([\n      [\n        'specification',\n        {\n          name: 'Specification',\n          description: 'Define detailed requirements and acceptance criteria',\n          outputs: ['requirements.md', 'user-stories.md', 'acceptance-criteria.md'],\n        },\n      ],\n      [\n        'pseudocode',\n        {\n          name: 'Pseudocode',\n          description: 'Create algorithmic logic and data structures',\n          outputs: ['algorithms.md', 'data-structures.md', 'flow-diagrams.md'],\n        },\n      ],\n      [\n        'architecture',\n        {\n          name: 'Architecture',\n          description: 'Design system architecture and components',\n          outputs: ['architecture.md', 'component-diagram.md', 'api-design.md'],\n        },\n      ],\n      [\n        'refinement',\n        {\n          name: 'Refinement (TDD)',\n          description: 'Implement with Test-Driven Development',\n          outputs: ['tests/', 'src/', 'coverage/'],\n        },\n      ],\n      [\n        'completion',\n        {\n          name: 'Completion',\n          description: 'Integration, documentation, and validation',\n          outputs: ['README.md', 'docs/', 'examples/'],\n        },\n      ],\n    ]);\n  }\n\n  async executeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    targetDir?: string,\n  ): Promise<TaskResult> {\n    this.logger.info('Executing SPARC-enhanced task', {\n      taskId: task.id.id,\n      taskName: task.name,\n      agentType: agent.type,\n      targetDir,\n    });\n\n    const startTime = Date.now();\n\n    try {\n      // Ensure target directory exists\n      if (targetDir) {\n        await fs.mkdir(targetDir, { recursive: true });\n      }\n\n      // Determine which SPARC phase to execute based on task and agent\n      const result = await this.executeSparcPhase(task, agent, targetDir);\n\n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n\n      return {\n        output: result,\n        artifacts: result.artifacts || {},\n        metadata: {\n          agentId: agent.id.id,\n          agentType: agent.type,\n          executionTime,\n          targetDir,\n          sparcPhase: result.phase,\n          quality: result.quality || 1.0,\n        },\n        quality: result.quality || 1.0,\n        completeness: result.completeness || 1.0,\n        accuracy: 1.0,\n        executionTime,\n        resourcesUsed: {\n          cpuTime: executionTime,\n          maxMemory: 0,\n          diskIO: 0,\n          networkIO: 0,\n          fileHandles: 0,\n        },\n        validated: true,\n      };\n    } catch (error) {\n      this.logger.error('SPARC task execution failed', {\n        taskId: task.id.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  private async executeSparcPhase(\n    task: TaskDefinition,\n    agent: AgentState,\n    targetDir?: string,\n  ): Promise<any> {\n    const objective = task.description.toLowerCase();\n\n    // Map agent types to SPARC phases\n    switch (agent.type) {\n      case 'analyst':\n        if (task.name.includes('Requirements') || task.name.includes('Plan')) {\n          return this.executeSpecificationPhase(task, targetDir);\n        }\n        return this.executeAnalysisPhase(task, targetDir);\n\n      case 'researcher':\n        return this.executePseudocodePhase(task, targetDir);\n\n      case 'architect':\n      case 'coordinator':\n        if (task.name.includes('Architecture') || objective.includes('design')) {\n          return this.executeArchitecturePhase(task, targetDir);\n        }\n        return this.executeCoordinationPhase(task, targetDir);\n\n      case 'coder':\n        if (this.enableTDD && task.name.includes('Implement')) {\n          return this.executeTDDPhase(task, targetDir);\n        }\n        return this.executeImplementationPhase(task, targetDir);\n\n      case 'tester':\n        return this.executeTestingPhase(task, targetDir);\n\n      case 'reviewer':\n        return this.executeReviewPhase(task, targetDir);\n\n      case 'documenter':\n        return this.executeDocumentationPhase(task, targetDir);\n\n      default:\n        return this.executeGenericPhase(task, targetDir);\n    }\n  }\n\n  private async executeSpecificationPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Specification phase', { taskName: task.name });\n\n    const objective = task.description;\n    const appType = this.determineAppType(objective);\n\n    const specifications = {\n      phase: 'specification',\n      requirements: this.generateRequirements(objective, appType),\n      userStories: this.generateUserStories(appType),\n      acceptanceCriteria: this.generateAcceptanceCriteria(appType),\n      constraints: this.identifyConstraints(objective),\n      quality: 0.9,\n      completeness: 0.95,\n    };\n\n    if (targetDir) {\n      const specsDir = path.join(targetDir, 'specs');\n      await fs.mkdir(specsDir, { recursive: true });\n\n      await fs.writeFile(\n        path.join(specsDir, 'requirements.md'),\n        this.formatRequirements(specifications.requirements),\n      );\n\n      await fs.writeFile(\n        path.join(specsDir, 'user-stories.md'),\n        this.formatUserStories(specifications.userStories),\n      );\n\n      await fs.writeFile(\n        path.join(specsDir, 'acceptance-criteria.md'),\n        this.formatAcceptanceCriteria(specifications.acceptanceCriteria),\n      );\n    }\n\n    return specifications;\n  }\n\n  private async executePseudocodePhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Pseudocode phase', { taskName: task.name });\n\n    const appType = this.determineAppType(task.description);\n\n    const pseudocode = {\n      phase: 'pseudocode',\n      algorithms: this.generateAlgorithms(appType),\n      dataStructures: this.generateDataStructures(appType),\n      flowDiagrams: this.generateFlowDiagrams(appType),\n      quality: 0.85,\n      completeness: 0.9,\n    };\n\n    if (targetDir) {\n      const designDir = path.join(targetDir, 'design');\n      await fs.mkdir(designDir, { recursive: true });\n\n      await fs.writeFile(\n        path.join(designDir, 'algorithms.md'),\n        this.formatAlgorithms(pseudocode.algorithms),\n      );\n\n      await fs.writeFile(\n        path.join(designDir, 'data-structures.md'),\n        this.formatDataStructures(pseudocode.dataStructures),\n      );\n    }\n\n    return pseudocode;\n  }\n\n  private async executeArchitecturePhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Architecture phase', { taskName: task.name });\n\n    const appType = this.determineAppType(task.description);\n\n    const architecture = {\n      phase: 'architecture',\n      components: this.designComponents(appType),\n      interfaces: this.designInterfaces(appType),\n      patterns: this.selectPatterns(appType),\n      infrastructure: this.designInfrastructure(appType),\n      quality: 0.9,\n      completeness: 0.85,\n    };\n\n    if (targetDir) {\n      const archDir = path.join(targetDir, 'architecture');\n      await fs.mkdir(archDir, { recursive: true });\n\n      await fs.writeFile(\n        path.join(archDir, 'architecture.md'),\n        this.formatArchitecture(architecture),\n      );\n\n      await fs.writeFile(\n        path.join(archDir, 'component-diagram.md'),\n        this.formatComponentDiagram(architecture.components),\n      );\n    }\n\n    return architecture;\n  }\n\n  private async executeTDDPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing TDD phase (Red-Green-Refactor)', { taskName: task.name });\n\n    const appType = this.determineAppType(task.description);\n    const language = this.detectLanguage(task.description);\n\n    // Red Phase: Write failing tests first\n    const tests = await this.generateFailingTests(appType, language);\n\n    // Green Phase: Implement minimal code to pass tests\n    const implementation = await this.generateMinimalImplementation(appType, language, tests);\n\n    // Refactor Phase: Optimize and clean up\n    const refactored = await this.refactorImplementation(implementation, tests);\n\n    const tddResult = {\n      phase: 'refinement-tdd',\n      tests,\n      implementation: refactored,\n      coverage: this.calculateCoverage(tests, refactored),\n      quality: 0.95,\n      completeness: 0.9,\n      artifacts: {},\n    };\n\n    if (targetDir) {\n      // Create proper project structure\n      await this.createProjectStructure(targetDir, appType, language);\n\n      // Write test files\n      await this.writeTestFiles(targetDir, tests, language);\n\n      // Write implementation files\n      await this.writeImplementationFiles(targetDir, refactored, language);\n\n      // Generate additional files\n      await this.generateProjectFiles(targetDir, appType, language);\n    }\n\n    return tddResult;\n  }\n\n  private async executeTestingPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Testing phase', { taskName: task.name });\n\n    const testPlan = {\n      phase: 'testing',\n      unitTests: this.generateUnitTests(task),\n      integrationTests: this.generateIntegrationTests(task),\n      e2eTests: this.generateE2ETests(task),\n      performanceTests: this.generatePerformanceTests(task),\n      coverage: { target: 80, current: 0 },\n      quality: 0.9,\n      completeness: 0.85,\n    };\n\n    if (targetDir) {\n      const testsDir = path.join(targetDir, 'tests');\n      await fs.mkdir(testsDir, { recursive: true });\n\n      await fs.writeFile(path.join(testsDir, 'test-plan.md'), this.formatTestPlan(testPlan));\n    }\n\n    return testPlan;\n  }\n\n  private async executeReviewPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Review phase', { taskName: task.name });\n\n    const review = {\n      phase: 'review',\n      codeQuality: this.assessCodeQuality(task),\n      security: this.assessSecurity(task),\n      performance: this.assessPerformance(task),\n      maintainability: this.assessMaintainability(task),\n      recommendations: this.generateRecommendations(task),\n      quality: 0.88,\n      completeness: 0.9,\n    };\n\n    if (targetDir) {\n      await fs.writeFile(path.join(targetDir, 'review-report.md'), this.formatReviewReport(review));\n    }\n\n    return review;\n  }\n\n  private async executeDocumentationPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    this.logger.info('Executing Documentation phase', { taskName: task.name });\n\n    const documentation = {\n      phase: 'documentation',\n      readme: this.generateReadme(task),\n      apiDocs: this.generateApiDocs(task),\n      userGuide: this.generateUserGuide(task),\n      developerGuide: this.generateDeveloperGuide(task),\n      quality: 0.92,\n      completeness: 0.95,\n    };\n\n    if (targetDir) {\n      const docsDir = path.join(targetDir, 'docs');\n      await fs.mkdir(docsDir, { recursive: true });\n\n      await fs.writeFile(path.join(targetDir, 'README.md'), documentation.readme);\n\n      await fs.writeFile(path.join(docsDir, 'api-reference.md'), documentation.apiDocs);\n\n      await fs.writeFile(path.join(docsDir, 'user-guide.md'), documentation.userGuide);\n    }\n\n    return documentation;\n  }\n\n  // Helper methods for generating content\n\n  private determineAppType(description: string): string {\n    const desc = description.toLowerCase();\n    if (desc.includes('rest api') || desc.includes('api')) return 'rest-api';\n    if (desc.includes('flask') || desc.includes('fastapi')) return 'python-web';\n    if (desc.includes('pandas') || desc.includes('data')) return 'data-pipeline';\n    if (desc.includes('machine learning') || desc.includes('ml')) return 'ml-app';\n    if (desc.includes('cli') || desc.includes('command')) return 'cli-tool';\n    if (desc.includes('scraper') || desc.includes('scraping')) return 'web-scraper';\n    if (desc.includes('dashboard')) return 'dashboard';\n    return 'generic';\n  }\n\n  private detectLanguage(description: string): string {\n    const desc = description.toLowerCase();\n    if (desc.includes('python') || desc.includes('flask') || desc.includes('pandas'))\n      return 'python';\n    if (desc.includes('typescript') || desc.includes('ts')) return 'typescript';\n    if (desc.includes('java')) return 'java';\n    return 'javascript';\n  }\n\n  private generateRequirements(objective: string, appType: string): any {\n    return {\n      functional: this.getFunctionalRequirements(appType),\n      nonFunctional: this.getNonFunctionalRequirements(appType),\n      technical: this.getTechnicalRequirements(appType),\n      business: this.getBusinessRequirements(appType),\n    };\n  }\n\n  private generateUserStories(appType: string): any[] {\n    const stories = {\n      'rest-api': [\n        {\n          id: 'US001',\n          story: 'As a developer, I want to create resources via POST endpoints',\n          priority: 'high',\n        },\n        {\n          id: 'US002',\n          story: 'As a developer, I want to retrieve resources via GET endpoints',\n          priority: 'high',\n        },\n        {\n          id: 'US003',\n          story: 'As a developer, I want to update resources via PUT/PATCH endpoints',\n          priority: 'medium',\n        },\n        {\n          id: 'US004',\n          story: 'As a developer, I want to delete resources via DELETE endpoints',\n          priority: 'medium',\n        },\n        {\n          id: 'US005',\n          story: 'As a developer, I want API documentation to understand endpoints',\n          priority: 'high',\n        },\n      ],\n      'python-web': [\n        {\n          id: 'US001',\n          story: 'As a user, I want to access the web application via browser',\n          priority: 'high',\n        },\n        { id: 'US002', story: 'As a user, I want to authenticate securely', priority: 'high' },\n        {\n          id: 'US003',\n          story: 'As a user, I want responsive UI on all devices',\n          priority: 'medium',\n        },\n      ],\n      'data-pipeline': [\n        {\n          id: 'US001',\n          story: 'As a data analyst, I want to load data from multiple sources',\n          priority: 'high',\n        },\n        {\n          id: 'US002',\n          story: 'As a data analyst, I want to transform data efficiently',\n          priority: 'high',\n        },\n        {\n          id: 'US003',\n          story: 'As a data analyst, I want to export results in various formats',\n          priority: 'medium',\n        },\n      ],\n    };\n\n    return (\n      (stories as any)[appType] || [\n        { id: 'US001', story: 'As a user, I want to use the main functionality', priority: 'high' },\n      ]\n    );\n  }\n\n  private generateAcceptanceCriteria(appType: string): any {\n    const criteria = {\n      'rest-api': {\n        endpoints: [\n          'All CRUD operations return appropriate status codes',\n          'API responses follow consistent format',\n        ],\n        performance: [\n          'Response time < 200ms for simple queries',\n          'Can handle 100 concurrent requests',\n        ],\n        security: ['All endpoints require authentication', 'Input validation on all parameters'],\n      },\n      'python-web': {\n        functionality: ['All pages load without errors', 'Forms validate input correctly'],\n        usability: ['UI is responsive on mobile devices', 'Page load time < 3 seconds'],\n        compatibility: ['Works on Chrome, Firefox, Safari', 'Supports Python 3.8+'],\n      },\n    };\n\n    return (\n      (criteria as any)[appType] || {\n        functionality: ['Core features work as expected'],\n        quality: ['Code follows best practices'],\n      }\n    );\n  }\n\n  private async generateFailingTests(appType: string, language: string): Promise<any> {\n    const testFramework = this.getTestFramework(language);\n\n    const tests = {\n      unit: this.generateUnitTestCases(appType, language, testFramework),\n      integration: this.generateIntegrationTestCases(appType, language, testFramework),\n      fixtures: this.generateTestFixtures(appType),\n      mocks: this.generateMocks(appType),\n    };\n\n    return tests;\n  }\n\n  private async generateMinimalImplementation(\n    appType: string,\n    language: string,\n    tests: any,\n  ): Promise<any> {\n    return {\n      modules: this.generateModules(appType, language),\n      classes: this.generateClasses(appType, language),\n      functions: this.generateFunctions(appType, language),\n      config: this.generateConfig(appType, language),\n    };\n  }\n\n  private async refactorImplementation(implementation: any, tests: any): Promise<any> {\n    return {\n      ...implementation,\n      optimized: true,\n      patterns: ['SOLID principles applied', 'DRY principle followed'],\n      performance: 'Optimized for efficiency',\n      maintainability: 'Clean, readable code',\n    };\n  }\n\n  private async createProjectStructure(\n    targetDir: string,\n    appType: string,\n    language: string,\n  ): Promise<void> {\n    const structure = this.getProjectStructure(appType, language);\n\n    for (const dir of structure.directories) {\n      await fs.mkdir(path.join(targetDir, dir), { recursive: true });\n    }\n  }\n\n  private async writeTestFiles(targetDir: string, tests: any, language: string): Promise<void> {\n    const testDir = path.join(targetDir, this.getTestDirectory(language));\n    await fs.mkdir(testDir, { recursive: true });\n\n    // Write unit tests\n    for (const [name, content] of Object.entries(tests.unit)) {\n      const filename = this.getTestFileName(name as string, language);\n      await fs.writeFile(path.join(testDir, filename), content as string);\n    }\n  }\n\n  private async writeImplementationFiles(\n    targetDir: string,\n    implementation: any,\n    language: string,\n  ): Promise<void> {\n    const srcDir = path.join(targetDir, this.getSourceDirectory(language));\n    await fs.mkdir(srcDir, { recursive: true });\n\n    // Write implementation files\n    for (const [module, content] of Object.entries(implementation.modules)) {\n      const filename = this.getSourceFileName(module as string, language);\n      await fs.writeFile(path.join(srcDir, filename), content as string);\n    }\n  }\n\n  private async generateProjectFiles(\n    targetDir: string,\n    appType: string,\n    language: string,\n  ): Promise<void> {\n    const files = await this.getProjectFiles(appType, language);\n\n    for (const [filename, content] of Object.entries(files)) {\n      await fs.writeFile(path.join(targetDir, filename as string), content as string);\n    }\n  }\n\n  // Utility methods for language-specific details\n\n  private getTestFramework(language: string): string {\n    const frameworks = {\n      python: 'pytest',\n      javascript: 'jest',\n      typescript: 'jest',\n      java: 'junit',\n    };\n    return frameworks[language] || 'generic';\n  }\n\n  private getProjectStructure(appType: string, language: string): any {\n    const structures = {\n      'python-rest-api': {\n        directories: ['src', 'tests', 'docs', 'config', 'migrations', 'scripts'],\n        files: ['requirements.txt', 'setup.py', 'pytest.ini', '.gitignore', 'Dockerfile'],\n      },\n      'javascript-rest-api': {\n        directories: ['src', 'tests', 'docs', 'config', 'public'],\n        files: ['package.json', 'tsconfig.json', 'jest.config.js', '.gitignore', 'Dockerfile'],\n      },\n    };\n\n    return (\n      structures[`${language}-${appType}`] || {\n        directories: ['src', 'tests', 'docs'],\n        files: ['README.md', '.gitignore'],\n      }\n    );\n  }\n\n  private getTestDirectory(language: string): string {\n    return language === 'python' ? 'tests' : '__tests__';\n  }\n\n  private getSourceDirectory(language: string): string {\n    return 'src';\n  }\n\n  private getTestFileName(name: string, language: string): string {\n    if (language === 'python') return `test_${name}.py`;\n    return `${name}.test.${language === 'typescript' ? 'ts' : 'js'}`;\n  }\n\n  private getSourceFileName(name: string, language: string): string {\n    const extensions = {\n      python: 'py',\n      javascript: 'js',\n      typescript: 'ts',\n      java: 'java',\n    };\n    return `${name}.${(extensions as any)[language] || 'js'}`;\n  }\n\n  // Content generation methods\n\n  private getFunctionalRequirements(appType: string): string[] {\n    const requirements = {\n      'rest-api': [\n        'Implement RESTful endpoints for all resources',\n        'Support JSON request/response format',\n        'Implement proper HTTP status codes',\n        'Support pagination for list endpoints',\n        'Implement filtering and sorting',\n      ],\n      'data-pipeline': [\n        'Load data from CSV, JSON, and database sources',\n        'Validate and clean input data',\n        'Transform data according to business rules',\n        'Generate summary statistics',\n        'Export results in multiple formats',\n      ],\n      'ml-app': [\n        'Preprocess input data for model',\n        'Train model with configurable parameters',\n        'Evaluate model performance',\n        'Save and load trained models',\n        'Provide prediction API',\n      ],\n    };\n\n    return (requirements as any)[appType] || ['Implement core functionality'];\n  }\n\n  private getNonFunctionalRequirements(appType: string): string[] {\n    return [\n      'Response time < 500ms for 95% of requests',\n      'Support 1000 concurrent users',\n      '99.9% uptime availability',\n      'Secure authentication and authorization',\n      'Comprehensive logging and monitoring',\n    ];\n  }\n\n  private getTechnicalRequirements(appType: string): string[] {\n    const tech = {\n      'rest-api': [\n        'Use appropriate web framework (Express, Flask, FastAPI)',\n        'Implement database ORM/ODM',\n        'Use environment variables for configuration',\n        'Implement proper error handling',\n        'Add request validation middleware',\n      ],\n      'data-pipeline': [\n        'Use pandas for data manipulation',\n        'Implement parallel processing for large datasets',\n        'Use appropriate data storage (SQL, NoSQL)',\n        'Implement data validation rules',\n        'Add progress tracking for long operations',\n      ],\n    };\n\n    return (tech as any)[appType] || ['Follow best practices for the technology stack'];\n  }\n\n  private getBusinessRequirements(appType: string): string[] {\n    return [\n      'Meet project timeline and budget',\n      'Ensure scalability for future growth',\n      'Maintain code quality standards',\n      'Provide comprehensive documentation',\n      'Enable easy maintenance and updates',\n    ];\n  }\n\n  private generateUnitTestCases(appType: string, language: string, framework: string): any {\n    if (language === 'python' && appType === 'rest-api') {\n      return {\n        test_models: `import pytest\nfrom src.models import User, Product\n\nclass TestUserModel:\n    def test_create_user(self):\n        \"\"\"Test user creation with valid data\"\"\"\n        user = User(username=\"testuser\", email=\"test@example.com\")\n        assert user.username == \"testuser\"\n        assert user.email == \"test@example.com\"\n        assert user.id is None  # Not saved yet\n    \n    def test_user_validation(self):\n        \"\"\"Test user validation rules\"\"\"\n        with pytest.raises(ValueError):\n            User(username=\"\", email=\"invalid-email\")\n    \n    def test_user_serialization(self):\n        \"\"\"Test user to dict conversion\"\"\"\n        user = User(username=\"testuser\", email=\"test@example.com\")\n        data = user.to_dict()\n        assert data['username'] == \"testuser\"\n        assert 'password' not in data  # Should not expose password\n\nclass TestProductModel:\n    def test_create_product(self):\n        \"\"\"Test product creation\"\"\"\n        product = Product(name=\"Test Product\", price=99.99)\n        assert product.name == \"Test Product\"\n        assert product.price == 99.99\n`,\n        test_services: `import pytest\nfrom unittest.mock import Mock, patch\nfrom src.services import UserService, ProductService\n\nclass TestUserService:\n    @pytest.fixture\n    def user_service(self):\n        return UserService()\n    \n    def test_create_user_success(self, user_service):\n        \"\"\"Test successful user creation\"\"\"\n        user_data = {\"username\": \"newuser\", \"email\": \"new@example.com\"}\n        with patch('src.services.db') as mock_db:\n            user = user_service.create_user(user_data)\n            assert user.username == \"newuser\"\n            mock_db.session.add.assert_called_once()\n    \n    def test_get_user_by_id(self, user_service):\n        \"\"\"Test retrieving user by ID\"\"\"\n        with patch('src.services.User.query') as mock_query:\n            mock_query.get.return_value = Mock(id=1, username=\"testuser\")\n            user = user_service.get_user(1)\n            assert user.id == 1\n            assert user.username == \"testuser\"\n`,\n      };\n    }\n\n    // Return generic tests for other combinations\n    return {\n      test_main: 'Test file content for main functionality',\n    };\n  }\n\n  private generateIntegrationTestCases(appType: string, language: string, framework: string): any {\n    if (language === 'python' && appType === 'rest-api') {\n      return {\n        test_api: `import pytest\nfrom flask import Flask\nfrom src.app import create_app\n\nclass TestAPI:\n    @pytest.fixture\n    def client(self):\n        app = create_app('testing')\n        with app.test_client() as client:\n            yield client\n    \n    def test_health_endpoint(self, client):\n        \"\"\"Test health check endpoint\"\"\"\n        response = client.get('/health')\n        assert response.status_code == 200\n        assert response.json['status'] == 'healthy'\n    \n    def test_create_user_endpoint(self, client):\n        \"\"\"Test POST /users endpoint\"\"\"\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"securepass123\"\n        }\n        response = client.post('/api/users', json=user_data)\n        assert response.status_code == 201\n        assert response.json['username'] == \"testuser\"\n    \n    def test_get_users_endpoint(self, client):\n        \"\"\"Test GET /users endpoint\"\"\"\n        response = client.get('/api/users')\n        assert response.status_code == 200\n        assert isinstance(response.json, list)\n`,\n      };\n    }\n\n    return {\n      test_integration: 'Integration test content',\n    };\n  }\n\n  private generateTestFixtures(appType: string): any {\n    return {\n      users: [\n        { id: 1, username: 'user1', email: 'user1@example.com' },\n        { id: 2, username: 'user2', email: 'user2@example.com' },\n      ],\n      products: [\n        { id: 1, name: 'Product 1', price: 99.99 },\n        { id: 2, name: 'Product 2', price: 149.99 },\n      ],\n    };\n  }\n\n  private generateMocks(appType: string): any {\n    return {\n      database: 'Mock database connection',\n      externalAPI: 'Mock external API calls',\n      fileSystem: 'Mock file system operations',\n    };\n  }\n\n  private generateModules(appType: string, language: string): any {\n    if (language === 'python' && appType === 'rest-api') {\n      return {\n        app: `from flask import Flask\nfrom flask_cors import CORS\nfrom config import Config\nfrom models import db\nfrom routes import api_bp\n\ndef create_app(config_name='development'):\n    app = Flask(__name__)\n    app.config.from_object(Config[config_name])\n    \n    # Initialize extensions\n    db.init_app(app)\n    CORS(app)\n    \n    # Register blueprints\n    app.register_blueprint(api_bp, url_prefix='/api')\n    \n    # Health check\n    @app.route('/health')\n    def health_check():\n        return {'status': 'healthy', 'service': 'REST API'}\n    \n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run(debug=True)\n`,\n        models: `from flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'email': self.email,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat()\n        }\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    price = db.Column(db.Float, nullable=False)\n    stock = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'description': self.description,\n            'price': self.price,\n            'stock': self.stock,\n            'created_at': self.created_at.isoformat()\n        }\n`,\n        routes: `from flask import Blueprint, request, jsonify\nfrom models import db, User, Product\nfrom services import UserService, ProductService\n\napi_bp = Blueprint('api', __name__)\nuser_service = UserService()\nproduct_service = ProductService()\n\n# User routes\n@api_bp.route('/users', methods=['GET'])\ndef get_users():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    \n    users = User.query.paginate(page=page, per_page=per_page)\n    return jsonify({\n        'users': [u.to_dict() for u in users.items],\n        'total': users.total,\n        'pages': users.pages,\n        'current_page': page\n    })\n\n@api_bp.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    user = User.query.get_or_404(user_id)\n    return jsonify(user.to_dict())\n\n@api_bp.route('/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    \n    # Validation\n    if not data.get('username') or not data.get('email'):\n        return jsonify({'error': 'Username and email required'}), 400\n    \n    # Check if user exists\n    if User.query.filter_by(username=data['username']).first():\n        return jsonify({'error': 'Username already exists'}), 409\n    \n    user = user_service.create_user(data)\n    return jsonify(user.to_dict()), 201\n\n@api_bp.route('/users/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n    user = User.query.get_or_404(user_id)\n    data = request.get_json()\n    \n    user = user_service.update_user(user, data)\n    return jsonify(user.to_dict())\n\n@api_bp.route('/users/<int:user_id>', methods=['DELETE'])\ndef delete_user(user_id):\n    user = User.query.get_or_404(user_id)\n    user_service.delete_user(user)\n    return '', 204\n\n# Product routes\n@api_bp.route('/products', methods=['GET'])\ndef get_products():\n    products = Product.query.all()\n    return jsonify([p.to_dict() for p in products])\n\n@api_bp.route('/products', methods=['POST'])\ndef create_product():\n    data = request.get_json()\n    product = product_service.create_product(data)\n    return jsonify(product.to_dict()), 201\n`,\n        services: `from models import db, User, Product\n\nclass UserService:\n    def create_user(self, data):\n        user = User(\n            username=data['username'],\n            email=data['email']\n        )\n        if 'password' in data:\n            user.set_password(data['password'])\n        \n        db.session.add(user)\n        db.session.commit()\n        return user\n    \n    def update_user(self, user, data):\n        if 'username' in data:\n            user.username = data['username']\n        if 'email' in data:\n            user.email = data['email']\n        if 'password' in data:\n            user.set_password(data['password'])\n        \n        db.session.commit()\n        return user\n    \n    def delete_user(self, user):\n        db.session.delete(user)\n        db.session.commit()\n    \n    def get_user(self, user_id):\n        return User.query.get(user_id)\n\nclass ProductService:\n    def create_product(self, data):\n        product = Product(\n            name=data['name'],\n            description=data.get('description', ''),\n            price=data['price'],\n            stock=data.get('stock', 0)\n        )\n        \n        db.session.add(product)\n        db.session.commit()\n        return product\n    \n    def update_product(self, product, data):\n        if 'name' in data:\n            product.name = data['name']\n        if 'description' in data:\n            product.description = data['description']\n        if 'price' in data:\n            product.price = data['price']\n        if 'stock' in data:\n            product.stock = data['stock']\n        \n        db.session.commit()\n        return product\n`,\n        config: `import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass BaseConfig:\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    \nclass DevelopmentConfig(BaseConfig):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL', 'sqlite:///dev.db')\n    \nclass TestingConfig(BaseConfig):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    \nclass ProductionConfig(BaseConfig):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    \nConfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n`,\n      };\n    }\n\n    return {\n      main: 'Main module implementation',\n    };\n  }\n\n  private generateClasses(appType: string, language: string): any {\n    return {\n      BaseClass: 'Base class implementation',\n      ServiceClass: 'Service class implementation',\n    };\n  }\n\n  private generateFunctions(appType: string, language: string): any {\n    return {\n      helpers: 'Helper functions',\n      validators: 'Validation functions',\n    };\n  }\n\n  private generateConfig(appType: string, language: string): any {\n    return {\n      database: 'Database configuration',\n      api: 'API configuration',\n      logging: 'Logging configuration',\n    };\n  }\n\n  private async getProjectFiles(appType: string, language: string): Promise<any> {\n    if (language === 'python') {\n      return {\n        'requirements.txt': `flask==2.3.2\nflask-sqlalchemy==3.0.5\nflask-cors==4.0.0\npython-dotenv==1.0.0\npytest==7.4.0\npytest-cov==4.1.0\nblack==23.7.0\nflake8==6.0.0\n`,\n        'setup.py': `from setuptools import setup, find_packages\n\nsetup(\n    name=\"${appType}\",\n    version=\"1.0.0\",\n    packages=find_packages(),\n    install_requires=[\n        'flask>=2.3.0',\n        'flask-sqlalchemy>=3.0.0',\n        'flask-cors>=4.0.0',\n        'python-dotenv>=1.0.0',\n    ],\n    extras_require={\n        'dev': [\n            'pytest>=7.4.0',\n            'pytest-cov>=4.1.0',\n            'black>=23.7.0',\n            'flake8>=6.0.0',\n        ]\n    }\n)\n`,\n        'pytest.ini': `[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = -v --cov=src --cov-report=html --cov-report=term\n`,\n        '.gitignore': `__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nenv/\nvenv/\n.env\n*.db\n.coverage\nhtmlcov/\n.pytest_cache/\n`,\n        Dockerfile: `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 5000\n\nCMD [\"python\", \"-m\", \"src.app\"]\n`,\n        'docker-compose.yml': `version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/appdb\n    depends_on:\n      - db\n  \n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=appdb\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n`,\n      };\n    }\n\n    return {\n      'package.json': 'Package configuration',\n      '.gitignore': 'Git ignore file',\n    };\n  }\n\n  private calculateCoverage(tests: any, implementation: any): any {\n    return {\n      overall: 85,\n      unit: 90,\n      integration: 80,\n      e2e: 70,\n    };\n  }\n\n  // Formatting methods\n\n  private formatRequirements(requirements: any): string {\n    return `# Requirements\n\n## Functional Requirements\n${requirements.functional.map((r: string) => `- ${r}`).join('\\n')}\n\n## Non-Functional Requirements\n${requirements.nonFunctional.map((r: string) => `- ${r}`).join('\\n')}\n\n## Technical Requirements\n${requirements.technical.map((r: string) => `- ${r}`).join('\\n')}\n\n## Business Requirements\n${requirements.business.map((r: string) => `- ${r}`).join('\\n')}\n`;\n  }\n\n  private formatUserStories(stories: any[]): string {\n    return `# User Stories\n\n${stories\n  .map(\n    (s) => `## ${s.id}: ${s.story}\nPriority: ${s.priority}\n`,\n  )\n  .join('\\n')}`;\n  }\n\n  private formatAcceptanceCriteria(criteria: any): string {\n    return `# Acceptance Criteria\n\n${Object.entries(criteria)\n  .map(\n    ([category, items]) => `## ${category}\n${(items as string[]).map((item) => `- ${item}`).join('\\n')}\n`,\n  )\n  .join('\\n')}`;\n  }\n\n  private formatAlgorithms(algorithms: any): string {\n    return `# Algorithms\n\n${JSON.stringify(algorithms, null, 2)}\n`;\n  }\n\n  private formatDataStructures(structures: any): string {\n    return `# Data Structures\n\n${JSON.stringify(structures, null, 2)}\n`;\n  }\n\n  private formatArchitecture(architecture: any): string {\n    return `# System Architecture\n\n## Components\n${JSON.stringify(architecture.components, null, 2)}\n\n## Interfaces\n${JSON.stringify(architecture.interfaces, null, 2)}\n\n## Design Patterns\n${architecture.patterns.join('\\n')}\n\n## Infrastructure\n${JSON.stringify(architecture.infrastructure, null, 2)}\n`;\n  }\n\n  private formatComponentDiagram(components: any): string {\n    return `# Component Diagram\n\n\\`\\`\\`mermaid\ngraph TD\n    A[Client] --> B[API Gateway]\n    B --> C[Application Server]\n    C --> D[Database]\n    C --> E[Cache]\n    C --> F[Message Queue]\n\\`\\`\\`\n`;\n  }\n\n  private formatTestPlan(plan: any): string {\n    return `# Test Plan\n\n## Test Strategy\n- Unit Tests: ${plan.unitTests}\n- Integration Tests: ${plan.integrationTests}\n- E2E Tests: ${plan.e2eTests}\n- Performance Tests: ${plan.performanceTests}\n\n## Coverage Target\nTarget: ${plan.coverage.target}%\nCurrent: ${plan.coverage.current}%\n`;\n  }\n\n  private formatReviewReport(review: any): string {\n    return `# Code Review Report\n\n## Code Quality\n${JSON.stringify(review.codeQuality, null, 2)}\n\n## Security Assessment\n${JSON.stringify(review.security, null, 2)}\n\n## Performance Assessment\n${JSON.stringify(review.performance, null, 2)}\n\n## Maintainability\n${JSON.stringify(review.maintainability, null, 2)}\n\n## Recommendations\n${review.recommendations.map((r: string) => `- ${r}`).join('\\n')}\n`;\n  }\n\n  private generateReadme(task: TaskDefinition): string {\n    return `# ${task.name}\n\n${task.description}\n\n## Installation\n\n\\`\\`\\`bash\n# Clone the repository\ngit clone <repository-url>\ncd <project-directory>\n\n# Install dependencies\npip install -r requirements.txt\n# or\nnpm install\n\\`\\`\\`\n\n## Usage\n\n\\`\\`\\`bash\n# Run the application\npython -m src.app\n# or\nnpm start\n\\`\\`\\`\n\n## Testing\n\n\\`\\`\\`bash\n# Run tests\npytest\n# or\nnpm test\n\\`\\`\\`\n\n## Documentation\n\nSee the \\`docs/\\` directory for detailed documentation.\n\n## License\n\nMIT\n`;\n  }\n\n  private generateApiDocs(task: TaskDefinition): string {\n    return `# API Documentation\n\n## Endpoints\n\n### GET /api/users\nRetrieve all users\n\n### POST /api/users\nCreate a new user\n\n### GET /api/users/:id\nRetrieve a specific user\n\n### PUT /api/users/:id\nUpdate a user\n\n### DELETE /api/users/:id\nDelete a user\n`;\n  }\n\n  private generateUserGuide(task: TaskDefinition): string {\n    return `# User Guide\n\n## Getting Started\n\n1. Install the application\n2. Configure your environment\n3. Start using the features\n\n## Features\n\n- Feature 1: Description\n- Feature 2: Description\n- Feature 3: Description\n`;\n  }\n\n  private generateDeveloperGuide(task: TaskDefinition): string {\n    return `# Developer Guide\n\n## Architecture\n\nThe application follows a modular architecture...\n\n## Development Setup\n\n1. Clone the repository\n2. Install dependencies\n3. Set up development environment\n\n## Contributing\n\nPlease follow our contribution guidelines...\n`;\n  }\n\n  // Additional helper methods\n\n  private assessCodeQuality(task: TaskDefinition): any {\n    return {\n      complexity: 'Low to Medium',\n      duplication: 'Minimal',\n      testCoverage: '85%',\n      linting: 'Passing',\n    };\n  }\n\n  private assessSecurity(task: TaskDefinition): any {\n    return {\n      authentication: 'Implemented',\n      authorization: 'Role-based',\n      inputValidation: 'Comprehensive',\n      encryption: 'At rest and in transit',\n    };\n  }\n\n  private assessPerformance(task: TaskDefinition): any {\n    return {\n      responseTime: 'Average 150ms',\n      throughput: '1000 req/s',\n      scalability: 'Horizontal scaling ready',\n      caching: 'Implemented',\n    };\n  }\n\n  private assessMaintainability(task: TaskDefinition): any {\n    return {\n      readability: 'High',\n      modularity: 'Well-structured',\n      documentation: 'Comprehensive',\n      dependencies: 'Up to date',\n    };\n  }\n\n  private generateRecommendations(task: TaskDefinition): string[] {\n    return [\n      'Consider implementing rate limiting',\n      'Add more comprehensive error handling',\n      'Implement request logging',\n      'Add performance monitoring',\n      'Consider using a CDN for static assets',\n    ];\n  }\n\n  private generateUnitTests(task: TaskDefinition): any {\n    return 'Comprehensive unit test suite';\n  }\n\n  private generateIntegrationTests(task: TaskDefinition): any {\n    return 'Integration test scenarios';\n  }\n\n  private generateE2ETests(task: TaskDefinition): any {\n    return 'End-to-end test scenarios';\n  }\n\n  private generatePerformanceTests(task: TaskDefinition): any {\n    return 'Performance test suite';\n  }\n\n  private identifyConstraints(objective: string): string[] {\n    return [\n      'Must complete within timeline',\n      'Must stay within budget',\n      'Must meet performance requirements',\n      'Must be maintainable',\n    ];\n  }\n\n  private designComponents(appType: string): any {\n    return {\n      frontend: 'UI Components',\n      backend: 'API Services',\n      database: 'Data Layer',\n      infrastructure: 'Cloud Services',\n    };\n  }\n\n  private designInterfaces(appType: string): any {\n    return {\n      api: 'REST/GraphQL interfaces',\n      database: 'Data access interfaces',\n      external: 'Third-party integrations',\n    };\n  }\n\n  private selectPatterns(appType: string): string[] {\n    return ['MVC/MVP Pattern', 'Repository Pattern', 'Factory Pattern', 'Observer Pattern'];\n  }\n\n  private designInfrastructure(appType: string): any {\n    return {\n      hosting: 'Cloud platform',\n      database: 'Managed database service',\n      caching: 'Redis/Memcached',\n      monitoring: 'APM solution',\n    };\n  }\n\n  private generateAlgorithms(appType: string): any {\n    return {\n      dataProcessing: 'Data processing algorithms',\n      businessLogic: 'Core business logic',\n      optimization: 'Performance optimization',\n    };\n  }\n\n  private generateDataStructures(appType: string): any {\n    return {\n      models: 'Data models',\n      schemas: 'Database schemas',\n      interfaces: 'TypeScript interfaces',\n    };\n  }\n\n  private generateFlowDiagrams(appType: string): any {\n    return {\n      userFlow: 'User interaction flow',\n      dataFlow: 'Data processing flow',\n      systemFlow: 'System architecture flow',\n    };\n  }\n\n  private executeAnalysisPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return this.executeAnalyzerTask(task, targetDir);\n  }\n\n  private executeImplementationPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return this.executeTDDPhase(task, targetDir);\n  }\n\n  private executeCoordinationPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return this.executeCoordinationTask(task, targetDir);\n  }\n\n  private executeGenericPhase(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return this.executeGenericTask(task, targetDir);\n  }\n\n  private async executeAnalyzerTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return this.executeSpecificationPhase(task, targetDir);\n  }\n\n  private async executeCoordinationTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return {\n      phase: 'coordination',\n      status: 'Task coordinated',\n      quality: 0.9,\n      completeness: 0.95,\n    };\n  }\n\n  private async executeGenericTask(task: TaskDefinition, targetDir?: string): Promise<any> {\n    return {\n      phase: 'generic',\n      status: 'Task completed',\n      quality: 0.85,\n      completeness: 0.9,\n    };\n  }\n}\n"],"names":["fs","path","Logger","SparcTaskExecutor","logger","enableTDD","qualityThreshold","enableMemory","phases","Map","config","level","format","destination","component","initializePhases","name","description","outputs","executeTask","task","agent","targetDir","info","taskId","id","taskName","agentType","type","startTime","Date","now","mkdir","recursive","result","executeSparcPhase","endTime","executionTime","output","artifacts","metadata","agentId","sparcPhase","phase","quality","completeness","accuracy","resourcesUsed","cpuTime","maxMemory","diskIO","networkIO","fileHandles","validated","error","Error","message","String","objective","toLowerCase","includes","executeSpecificationPhase","executeAnalysisPhase","executePseudocodePhase","executeArchitecturePhase","executeCoordinationPhase","executeTDDPhase","executeImplementationPhase","executeTestingPhase","executeReviewPhase","executeDocumentationPhase","executeGenericPhase","appType","determineAppType","specifications","requirements","generateRequirements","userStories","generateUserStories","acceptanceCriteria","generateAcceptanceCriteria","constraints","identifyConstraints","specsDir","join","writeFile","formatRequirements","formatUserStories","formatAcceptanceCriteria","pseudocode","algorithms","generateAlgorithms","dataStructures","generateDataStructures","flowDiagrams","generateFlowDiagrams","designDir","formatAlgorithms","formatDataStructures","architecture","components","designComponents","interfaces","designInterfaces","patterns","selectPatterns","infrastructure","designInfrastructure","archDir","formatArchitecture","formatComponentDiagram","language","detectLanguage","tests","generateFailingTests","implementation","generateMinimalImplementation","refactored","refactorImplementation","tddResult","coverage","calculateCoverage","createProjectStructure","writeTestFiles","writeImplementationFiles","generateProjectFiles","testPlan","unitTests","generateUnitTests","integrationTests","generateIntegrationTests","e2eTests","generateE2ETests","performanceTests","generatePerformanceTests","target","current","testsDir","formatTestPlan","review","codeQuality","assessCodeQuality","security","assessSecurity","performance","assessPerformance","maintainability","assessMaintainability","recommendations","generateRecommendations","formatReviewReport","documentation","readme","generateReadme","apiDocs","generateApiDocs","userGuide","generateUserGuide","developerGuide","generateDeveloperGuide","docsDir","desc","functional","getFunctionalRequirements","nonFunctional","getNonFunctionalRequirements","technical","getTechnicalRequirements","business","getBusinessRequirements","stories","story","priority","criteria","endpoints","functionality","usability","compatibility","testFramework","getTestFramework","unit","generateUnitTestCases","integration","generateIntegrationTestCases","fixtures","generateTestFixtures","mocks","generateMocks","modules","generateModules","classes","generateClasses","functions","generateFunctions","generateConfig","optimized","structure","getProjectStructure","dir","directories","testDir","getTestDirectory","content","Object","entries","filename","getTestFileName","srcDir","getSourceDirectory","module","getSourceFileName","files","getProjectFiles","frameworks","python","javascript","typescript","java","structures","extensions","tech","framework","test_models","test_services","test_main","test_api","test_integration","users","username","email","products","price","database","externalAPI","fileSystem","app","models","routes","services","main","BaseClass","ServiceClass","helpers","validators","api","logging","Dockerfile","overall","e2e","map","r","s","category","items","item","JSON","stringify","plan","complexity","duplication","testCoverage","linting","authentication","authorization","inputValidation","encryption","responseTime","throughput","scalability","caching","readability","modularity","dependencies","frontend","backend","external","hosting","monitoring","dataProcessing","businessLogic","optimization","schemas","userFlow","dataFlow","systemFlow","executeAnalyzerTask","executeCoordinationTask","executeGenericTask","status"],"mappings":"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"}