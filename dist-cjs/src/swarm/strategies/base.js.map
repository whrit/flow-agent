{"version":3,"sources":["../../../../src/swarm/strategies/base.ts"],"sourcesContent":["/**\n * Base Strategy Interface for Swarm Task Execution\n * Provides the foundation for different task execution strategies\n */\n\nimport type { TaskDefinition, SwarmObjective, AgentState, SwarmConfig } from '../types.js';\n\nexport interface StrategyMetrics {\n  tasksCompleted: number;\n  averageExecutionTime: number;\n  successRate: number;\n  resourceUtilization: number;\n  parallelismEfficiency: number;\n  cacheHitRate: number;\n  predictionAccuracy: number;\n  // Additional metrics\n  queriesExecuted?: number;\n  averageResponseTime?: number;\n  cacheHits?: number;\n  cacheMisses?: number;\n  credibilityScores?: Record<string, number>;\n}\n\nexport interface TaskPattern {\n  pattern: RegExp;\n  type: string;\n  complexity: number;\n  estimatedDuration: number;\n  requiredAgents: number;\n  priority: number;\n}\n\nexport interface DecompositionResult {\n  tasks: TaskDefinition[];\n  dependencies: Map<string, string[]>;\n  estimatedDuration: number;\n  recommendedStrategy: string;\n  complexity: number;\n  batchGroups: TaskBatch[];\n  // Additional properties for caching and memory\n  timestamp: Date;\n  ttl: number;\n  accessCount: number;\n  lastAccessed: Date;\n  data: any;\n  // Resource requirements\n  resourceRequirements?: {\n    memory?: number;\n    cpu?: number;\n    network?: string;\n    storage?: string;\n  };\n}\n\nexport interface TaskBatch {\n  id: string;\n  tasks: TaskDefinition[];\n  canRunInParallel: boolean;\n  estimatedDuration: number;\n  requiredResources: Record<string, number>;\n}\n\nexport interface AgentAllocation {\n  agentId: string;\n  tasks: string[];\n  estimatedWorkload: number;\n  capabilities: string[];\n}\n\nexport abstract class BaseStrategy {\n  protected metrics: StrategyMetrics;\n  protected taskPatterns: TaskPattern[];\n  protected cache: Map<string, DecompositionResult>;\n  protected config: SwarmConfig;\n\n  constructor(config: SwarmConfig) {\n    this.config = config;\n    this.metrics = this.initializeMetrics();\n    this.taskPatterns = this.initializeTaskPatterns();\n    this.cache = new Map();\n  }\n\n  // Abstract methods that must be implemented by concrete strategies\n  abstract decomposeObjective(objective: SwarmObjective): Promise<DecompositionResult>;\n  abstract selectAgentForTask(\n    task: TaskDefinition,\n    availableAgents: AgentState[],\n  ): Promise<string | null>;\n  abstract optimizeTaskSchedule(\n    tasks: TaskDefinition[],\n    agents: AgentState[],\n  ): Promise<AgentAllocation[]>;\n\n  // Common utility methods\n  protected initializeMetrics(): StrategyMetrics {\n    return {\n      tasksCompleted: 0,\n      averageExecutionTime: 0,\n      successRate: 0,\n      resourceUtilization: 0,\n      parallelismEfficiency: 0,\n      cacheHitRate: 0,\n      predictionAccuracy: 0,\n    };\n  }\n\n  protected initializeTaskPatterns(): TaskPattern[] {\n    return [\n      {\n        pattern: /create|build|implement|develop/i,\n        type: 'development',\n        complexity: 3,\n        estimatedDuration: 15 * 60 * 1000,\n        requiredAgents: 2,\n        priority: 2,\n      },\n      {\n        pattern: /test|verify|validate/i,\n        type: 'testing',\n        complexity: 2,\n        estimatedDuration: 8 * 60 * 1000,\n        requiredAgents: 1,\n        priority: 1,\n      },\n      {\n        pattern: /analyze|research|investigate/i,\n        type: 'analysis',\n        complexity: 2,\n        estimatedDuration: 10 * 60 * 1000,\n        requiredAgents: 1,\n        priority: 1,\n      },\n      {\n        pattern: /document|write|explain/i,\n        type: 'documentation',\n        complexity: 1,\n        estimatedDuration: 5 * 60 * 1000,\n        requiredAgents: 1,\n        priority: 0,\n      },\n      {\n        pattern: /optimize|improve|refactor/i,\n        type: 'optimization',\n        complexity: 3,\n        estimatedDuration: 12 * 60 * 1000,\n        requiredAgents: 2,\n        priority: 1,\n      },\n    ];\n  }\n\n  protected detectTaskType(description: string): string {\n    for (const pattern of this.taskPatterns) {\n      if (pattern.pattern.test(description)) {\n        return pattern.type;\n      }\n    }\n    return 'generic';\n  }\n\n  protected estimateComplexity(description: string): number {\n    const pattern = this.taskPatterns.find((p) => p.pattern.test(description));\n    if (pattern) {\n      return pattern.complexity;\n    }\n\n    // Fallback complexity estimation based on description length and keywords\n    let complexity = 1;\n    const words = description.split(' ').length;\n\n    if (words > 50) complexity += 1;\n    if (words > 100) complexity += 1;\n\n    const complexKeywords = ['integrate', 'complex', 'advanced', 'multiple', 'system'];\n    const foundKeywords = complexKeywords.filter((keyword) =>\n      description.toLowerCase().includes(keyword),\n    ).length;\n\n    complexity += foundKeywords;\n\n    return Math.min(complexity, 5); // Cap at 5\n  }\n\n  protected getCacheKey(objective: SwarmObjective): string {\n    return `${objective.strategy}-${objective.description.slice(0, 100)}`;\n  }\n\n  protected updateMetrics(result: DecompositionResult, executionTime: number): void {\n    this.metrics.tasksCompleted += result.tasks.length;\n    this.metrics.averageExecutionTime = (this.metrics.averageExecutionTime + executionTime) / 2;\n  }\n\n  public getMetrics(): StrategyMetrics {\n    return { ...this.metrics };\n  }\n\n  public clearCache(): void {\n    this.cache.clear();\n  }\n}\n"],"names":["BaseStrategy","metrics","taskPatterns","cache","config","initializeMetrics","initializeTaskPatterns","Map","tasksCompleted","averageExecutionTime","successRate","resourceUtilization","parallelismEfficiency","cacheHitRate","predictionAccuracy","pattern","type","complexity","estimatedDuration","requiredAgents","priority","detectTaskType","description","test","estimateComplexity","find","p","words","split","length","complexKeywords","foundKeywords","filter","keyword","toLowerCase","includes","Math","min","getCacheKey","objective","strategy","slice","updateMetrics","result","executionTime","tasks","getMetrics","clearCache","clear"],"mappings":"AAqEA,OAAO,MAAeA;IACVC,QAAyB;IACzBC,aAA4B;IAC5BC,MAAwC;IACxCC,OAAoB;IAE9B,YAAYA,MAAmB,CAAE;QAC/B,IAAI,CAACA,MAAM,GAAGA;QACd,IAAI,CAACH,OAAO,GAAG,IAAI,CAACI,iBAAiB;QACrC,IAAI,CAACH,YAAY,GAAG,IAAI,CAACI,sBAAsB;QAC/C,IAAI,CAACH,KAAK,GAAG,IAAII;IACnB;IAcUF,oBAAqC;QAC7C,OAAO;YACLG,gBAAgB;YAChBC,sBAAsB;YACtBC,aAAa;YACbC,qBAAqB;YACrBC,uBAAuB;YACvBC,cAAc;YACdC,oBAAoB;QACtB;IACF;IAEUR,yBAAwC;QAChD,OAAO;YACL;gBACES,SAAS;gBACTC,MAAM;gBACNC,YAAY;gBACZC,mBAAmB,KAAK,KAAK;gBAC7BC,gBAAgB;gBAChBC,UAAU;YACZ;YACA;gBACEL,SAAS;gBACTC,MAAM;gBACNC,YAAY;gBACZC,mBAAmB,IAAI,KAAK;gBAC5BC,gBAAgB;gBAChBC,UAAU;YACZ;YACA;gBACEL,SAAS;gBACTC,MAAM;gBACNC,YAAY;gBACZC,mBAAmB,KAAK,KAAK;gBAC7BC,gBAAgB;gBAChBC,UAAU;YACZ;YACA;gBACEL,SAAS;gBACTC,MAAM;gBACNC,YAAY;gBACZC,mBAAmB,IAAI,KAAK;gBAC5BC,gBAAgB;gBAChBC,UAAU;YACZ;YACA;gBACEL,SAAS;gBACTC,MAAM;gBACNC,YAAY;gBACZC,mBAAmB,KAAK,KAAK;gBAC7BC,gBAAgB;gBAChBC,UAAU;YACZ;SACD;IACH;IAEUC,eAAeC,WAAmB,EAAU;QACpD,KAAK,MAAMP,WAAW,IAAI,CAACb,YAAY,CAAE;YACvC,IAAIa,QAAQA,OAAO,CAACQ,IAAI,CAACD,cAAc;gBACrC,OAAOP,QAAQC,IAAI;YACrB;QACF;QACA,OAAO;IACT;IAEUQ,mBAAmBF,WAAmB,EAAU;QACxD,MAAMP,UAAU,IAAI,CAACb,YAAY,CAACuB,IAAI,CAAC,CAACC,IAAMA,EAAEX,OAAO,CAACQ,IAAI,CAACD;QAC7D,IAAIP,SAAS;YACX,OAAOA,QAAQE,UAAU;QAC3B;QAGA,IAAIA,aAAa;QACjB,MAAMU,QAAQL,YAAYM,KAAK,CAAC,KAAKC,MAAM;QAE3C,IAAIF,QAAQ,IAAIV,cAAc;QAC9B,IAAIU,QAAQ,KAAKV,cAAc;QAE/B,MAAMa,kBAAkB;YAAC;YAAa;YAAW;YAAY;YAAY;SAAS;QAClF,MAAMC,gBAAgBD,gBAAgBE,MAAM,CAAC,CAACC,UAC5CX,YAAYY,WAAW,GAAGC,QAAQ,CAACF,UACnCJ,MAAM;QAERZ,cAAcc;QAEd,OAAOK,KAAKC,GAAG,CAACpB,YAAY;IAC9B;IAEUqB,YAAYC,SAAyB,EAAU;QACvD,OAAO,GAAGA,UAAUC,QAAQ,CAAC,CAAC,EAAED,UAAUjB,WAAW,CAACmB,KAAK,CAAC,GAAG,MAAM;IACvE;IAEUC,cAAcC,MAA2B,EAAEC,aAAqB,EAAQ;QAChF,IAAI,CAAC3C,OAAO,CAACO,cAAc,IAAImC,OAAOE,KAAK,CAAChB,MAAM;QAClD,IAAI,CAAC5B,OAAO,CAACQ,oBAAoB,GAAG,AAAC,CAAA,IAAI,CAACR,OAAO,CAACQ,oBAAoB,GAAGmC,aAAY,IAAK;IAC5F;IAEOE,aAA8B;QACnC,OAAO;YAAE,GAAG,IAAI,CAAC7C,OAAO;QAAC;IAC3B;IAEO8C,aAAmB;QACxB,IAAI,CAAC5C,KAAK,CAAC6C,KAAK;IAClB;AACF"}