{"version":3,"sources":["../../../../src/swarm/strategies/research.ts"],"sourcesContent":["/**\n * Optimized Research Strategy Implementation\n * Provides intelligent research capabilities with parallel processing,\n * semantic clustering, caching, and progressive refinement\n */\n\nimport { BaseStrategy } from './base.js';\nimport type { DecompositionResult, StrategyMetrics } from './base.js';\nimport { Logger } from '../../core/logger.js';\nimport { generateId } from '../../utils/helpers.js';\nimport {\n  SwarmObjective,\n  TaskDefinition,\n  TaskId,\n  TaskType,\n  TaskPriority,\n  SwarmConfig,\n  SWARM_CONSTANTS,\n} from '../types.js';\n\n// Research-specific interfaces\ninterface ResearchQuery {\n  id: string;\n  query: string;\n  keywords: string[];\n  domains: string[];\n  priority: number;\n  timestamp: Date;\n  sources?: string[];\n  filters?: ResearchFilters;\n}\n\ninterface ResearchFilters {\n  dateRange?: { start: Date; end: Date };\n  sourceTypes?: ('academic' | 'news' | 'blog' | 'documentation' | 'forum')[];\n  languages?: string[];\n  credibilityThreshold?: number;\n  maxResults?: number;\n}\n\ninterface ResearchResult {\n  id: string;\n  queryId: string;\n  url: string;\n  title: string;\n  content: string;\n  summary: string;\n  credibilityScore: number;\n  relevanceScore: number;\n  sourceType: string;\n  publishedDate?: Date;\n  extractedAt: Date;\n  metadata: Record<string, any>;\n  semanticVector?: number[];\n}\n\ninterface ResearchCluster {\n  id: string;\n  topic: string;\n  results: ResearchResult[];\n  centroid: number[];\n  coherenceScore: number;\n  keywords: string[];\n  summary: string;\n}\n\ninterface CacheEntry {\n  key: string;\n  data: any;\n  timestamp: Date;\n  ttl: number;\n  accessCount: number;\n  lastAccessed: Date;\n}\n\ninterface ConnectionPool {\n  active: number;\n  idle: number;\n  max: number;\n  timeout: number;\n  connections: Map<string, any>;\n}\n\ninterface RateLimiter {\n  requests: number;\n  windowStart: Date;\n  windowSize: number;\n  maxRequests: number;\n  backoffMultiplier: number;\n}\n\nexport class ResearchStrategy extends BaseStrategy {\n  private logger: Logger;\n  private researchCache: Map<string, CacheEntry> = new Map();\n  private connectionPool: ConnectionPool;\n  private rateLimiters: Map<string, RateLimiter> = new Map();\n  private semanticModel: any; // Placeholder for semantic analysis\n  private researchQueries: Map<string, ResearchQuery> = new Map();\n  private researchResults: Map<string, ResearchResult> = new Map();\n  private researchClusters: Map<string, ResearchCluster> = new Map();\n\n  // Research-specific metrics extending base metrics\n  private researchMetrics = {\n    queriesExecuted: 0,\n    resultsCollected: 0,\n    cacheHits: 0,\n    cacheMisses: 0,\n    averageResponseTime: 0,\n    credibilityScores: [] as number[],\n    clusteringAccuracy: 0,\n    parallelEfficiency: 0,\n  };\n\n  constructor(config: Partial<SwarmConfig> = {}) {\n    const defaultConfig: SwarmConfig = {\n      name: 'research-strategy',\n      description: 'Research-focused strategy',\n      version: '1.0.0',\n      mode: 'mesh',\n      strategy: 'research',\n      coordinationStrategy: {\n        name: 'research-coordination',\n        description: 'Research-optimized coordination',\n        agentSelection: 'capability-based',\n        taskScheduling: 'priority',\n        loadBalancing: 'work-sharing',\n        faultTolerance: 'retry',\n        communication: 'direct',\n      },\n      maxAgents: 8,\n      maxTasks: 50,\n      maxDuration: 3600000,\n      resourceLimits: {},\n      qualityThreshold: 0.8,\n      reviewRequired: true,\n      testingRequired: false,\n      monitoring: {\n        metricsEnabled: true,\n        loggingEnabled: true,\n        tracingEnabled: false,\n        metricsInterval: 5000,\n        heartbeatInterval: 10000,\n        healthCheckInterval: 30000,\n        retentionPeriod: 86400000,\n        maxLogSize: 1048576,\n        maxMetricPoints: 1000,\n        alertingEnabled: false,\n        alertThresholds: {},\n        exportEnabled: false,\n        exportFormat: 'json',\n        exportDestination: 'file',\n      },\n      memory: {\n        namespace: 'research',\n        partitions: [],\n        permissions: {\n          read: 'swarm',\n          write: 'swarm',\n          delete: 'team',\n          share: 'swarm',\n        },\n        persistent: true,\n        backupEnabled: false,\n        distributed: false,\n        consistency: 'eventual',\n        cacheEnabled: true,\n        compressionEnabled: false,\n      },\n      security: {\n        authenticationRequired: false,\n        authorizationRequired: false,\n        encryptionEnabled: false,\n        defaultPermissions: ['read', 'write'],\n        adminRoles: ['admin'],\n        auditEnabled: false,\n        auditLevel: 'info',\n        inputValidation: true,\n        outputSanitization: true,\n      },\n      performance: {\n        maxConcurrency: 10,\n        defaultTimeout: 300000,\n        cacheEnabled: true,\n        cacheSize: 100,\n        cacheTtl: 3600000,\n        optimizationEnabled: true,\n        adaptiveScheduling: true,\n        predictiveLoading: false,\n        resourcePooling: true,\n        connectionPooling: true,\n        memoryPooling: false,\n      },\n    };\n\n    const mergedConfig = { ...defaultConfig, ...config };\n    super(mergedConfig);\n\n    this.logger = new Logger(\n      { level: 'info', format: 'text', destination: 'console' },\n      { component: 'ResearchStrategy' },\n    );\n\n    // Initialize connection pool\n    this.connectionPool = {\n      active: 0,\n      idle: 0,\n      max: config.performance?.maxConcurrency || 10,\n      timeout: 30000,\n      connections: new Map(),\n    };\n\n    this.logger.info('ResearchStrategy initialized with optimizations', {\n      maxConcurrency: this.connectionPool.max,\n      cacheEnabled: config.performance?.cacheEnabled !== false,\n    });\n  }\n\n  async decomposeObjective(objective: SwarmObjective): Promise<DecompositionResult> {\n    this.logger.info('Decomposing research objective', {\n      objectiveId: objective.id,\n      description: objective.description,\n    });\n\n    const tasks: TaskDefinition[] = [];\n    const dependencies = new Map<string, string[]>();\n\n    // Extract research parameters from objective\n    const researchParams = this.extractResearchParameters(objective.description);\n\n    // Create research query planning task\n    const queryPlanningTask = this.createResearchTask(\n      'query-planning',\n      'research',\n      'Research Query Planning',\n      `Analyze the research objective and create optimized search queries:\n\n${objective.description}\n\nCreate a comprehensive research plan that includes:\n1. Primary and secondary research questions\n2. Key search terms and synonyms\n3. Relevant domains and sources to explore\n4. Research methodology and approach\n5. Quality criteria for evaluating sources\n\nFocus on creating queries that will yield high-quality, credible results.`,\n      {\n        priority: 'high' as TaskPriority,\n        estimatedDuration: 5 * 60 * 1000, // 5 minutes\n        requiredCapabilities: ['research', 'analysis'],\n        researchParams,\n      },\n    );\n    tasks.push(queryPlanningTask);\n\n    // Create parallel web search tasks\n    const webSearchTask = this.createResearchTask(\n      'web-search',\n      'research',\n      'Parallel Web Search Execution',\n      `Execute parallel web searches based on the research plan:\n\n${objective.description}\n\nPerform comprehensive web searches using:\n1. Multiple search engines and sources\n2. Parallel query execution for efficiency\n3. Intelligent source ranking and filtering\n4. Real-time credibility assessment\n5. Deduplication of results\n\nCollect diverse, high-quality sources relevant to the research objective.`,\n      {\n        priority: 'high' as TaskPriority,\n        estimatedDuration: 10 * 60 * 1000, // 10 minutes\n        requiredCapabilities: ['web-search', 'research'],\n        dependencies: [queryPlanningTask.id.id],\n        researchParams,\n      },\n    );\n    tasks.push(webSearchTask);\n    dependencies.set(webSearchTask.id.id, [queryPlanningTask.id.id]);\n\n    // Create data extraction and processing task\n    const dataExtractionTask = this.createResearchTask(\n      'data-extraction',\n      'analysis',\n      'Parallel Data Extraction',\n      `Extract and process data from collected sources:\n\n${objective.description}\n\nProcess the collected sources by:\n1. Extracting key information and insights\n2. Performing semantic analysis and clustering\n3. Identifying patterns and relationships\n4. Assessing information quality and reliability\n5. Creating structured summaries\n\nUse parallel processing for efficient data extraction.`,\n      {\n        priority: 'high' as TaskPriority,\n        estimatedDuration: 8 * 60 * 1000, // 8 minutes\n        requiredCapabilities: ['analysis', 'research'],\n        dependencies: [webSearchTask.id.id],\n        researchParams,\n      },\n    );\n    tasks.push(dataExtractionTask);\n    dependencies.set(dataExtractionTask.id.id, [webSearchTask.id.id]);\n\n    // Create semantic clustering task\n    const clusteringTask = this.createResearchTask(\n      'semantic-clustering',\n      'analysis',\n      'Semantic Clustering and Analysis',\n      `Perform semantic clustering of research findings:\n\n${objective.description}\n\nAnalyze the extracted data by:\n1. Grouping related information using semantic similarity\n2. Identifying key themes and topics\n3. Creating coherent clusters of information\n4. Generating cluster summaries and insights\n5. Mapping relationships between clusters\n\nProvide a structured analysis of the research findings.`,\n      {\n        priority: 'medium' as TaskPriority,\n        estimatedDuration: 6 * 60 * 1000, // 6 minutes\n        requiredCapabilities: ['analysis', 'research'],\n        dependencies: [dataExtractionTask.id.id],\n        researchParams,\n      },\n    );\n    tasks.push(clusteringTask);\n    dependencies.set(clusteringTask.id.id, [dataExtractionTask.id.id]);\n\n    // Create synthesis and reporting task\n    const synthesisTask = this.createResearchTask(\n      'synthesis-reporting',\n      'documentation',\n      'Research Synthesis and Reporting',\n      `Synthesize research findings into comprehensive report:\n\n${objective.description}\n\nCreate a comprehensive research report that includes:\n1. Executive summary of key findings\n2. Detailed analysis of each research cluster\n3. Insights and recommendations\n4. Source credibility assessment\n5. Methodology and limitations\n6. References and citations\n\nEnsure the report is well-structured and actionable.`,\n      {\n        priority: 'medium' as TaskPriority,\n        estimatedDuration: 7 * 60 * 1000, // 7 minutes\n        requiredCapabilities: ['documentation', 'analysis'],\n        dependencies: [clusteringTask.id.id],\n        researchParams,\n      },\n    );\n    tasks.push(synthesisTask);\n    dependencies.set(synthesisTask.id.id, [clusteringTask.id.id]);\n\n    const totalDuration = tasks.reduce(\n      (sum, task) => sum + (task.constraints.timeoutAfter || 0),\n      0,\n    );\n\n    this.logger.info('Research objective decomposed', {\n      objectiveId: objective.id,\n      taskCount: tasks.length,\n      estimatedDuration: totalDuration,\n      parallelTasks: tasks.filter((t) => !dependencies.has(t.id.id)).length,\n    });\n\n    return {\n      tasks,\n      dependencies,\n      estimatedDuration: totalDuration,\n      recommendedStrategy: 'research',\n      complexity: this.estimateComplexity(objective.description),\n      batchGroups: this.createTaskBatches(tasks, dependencies),\n      timestamp: new Date(),\n      ttl: 3600000, // 1 hour\n      accessCount: 0,\n      lastAccessed: new Date(),\n      data: { objectiveId: objective.id, description: objective.description },\n      resourceRequirements: {\n        memory: SWARM_CONSTANTS.DEFAULT_MEMORY_LIMIT * 1.5,\n        cpu: SWARM_CONSTANTS.DEFAULT_CPU_LIMIT * 1.2,\n        network: 'high',\n        storage: 'medium',\n      },\n    };\n  }\n\n  // Research-specific optimizations for task execution\n  async optimizeTaskExecution(task: TaskDefinition, agent: any): Promise<any> {\n    const startTime = Date.now();\n\n    try {\n      // Apply research-specific optimizations based on task type\n      switch (task.type) {\n        case 'research':\n          return await this.executeOptimizedWebSearch(task, agent);\n        case 'analysis':\n          return await this.executeOptimizedDataExtraction(task, agent);\n        default:\n          return await this.executeGenericResearchTask(task, agent);\n      }\n    } finally {\n      const duration = Date.now() - startTime;\n      this.updateResearchMetrics(task.type, duration);\n    }\n  }\n\n  private async executeOptimizedWebSearch(task: TaskDefinition, agent: any): Promise<any> {\n    this.logger.info('Executing optimized web search', { taskId: task.id.id });\n\n    // Check cache first\n    const cacheKey = this.generateCacheKey('web-search', task.description);\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      this.researchMetrics.cacheHits++;\n      return cached;\n    }\n\n    // Execute parallel web searches with rate limiting\n    const queries = this.generateSearchQueries(task.description);\n    const searchPromises = queries.map((query) => this.executeRateLimitedSearch(query, agent));\n\n    const results = await Promise.allSettled(searchPromises);\n    const successfulResults = results\n      .filter((r) => r.status === 'fulfilled')\n      .map((r) => (r as PromiseFulfilledResult<any>).value)\n      .flat();\n\n    // Rank and filter results by credibility\n    const rankedResults = await this.rankResultsByCredibility(successfulResults);\n\n    // Cache results\n    this.setCache(cacheKey, rankedResults, 3600000); // 1 hour TTL\n    this.researchMetrics.cacheMisses++;\n\n    return {\n      results: rankedResults,\n      totalFound: successfulResults.length,\n      queriesExecuted: queries.length,\n      credibilityScores: rankedResults.map((r) => r.credibilityScore),\n    };\n  }\n\n  private async executeOptimizedDataExtraction(task: TaskDefinition, agent: any): Promise<any> {\n    this.logger.info('Executing optimized data extraction', { taskId: task.id.id });\n\n    // Get connection from pool\n    const connection = await this.getPooledConnection();\n\n    try {\n      // Parallel data extraction with deduplication\n      const extractionPromises = this.createParallelExtractionTasks(task, agent);\n      const extractedData = await Promise.all(extractionPromises);\n\n      // Deduplicate results\n      const deduplicatedData = this.deduplicateResults(extractedData.flat());\n\n      return {\n        extractedData: deduplicatedData,\n        totalExtracted: extractedData.flat().length,\n        uniqueResults: deduplicatedData.length,\n        deduplicationRate: 1 - deduplicatedData.length / extractedData.flat().length,\n      };\n    } finally {\n      this.releasePooledConnection(connection);\n    }\n  }\n\n  private async executeOptimizedClustering(task: TaskDefinition, agent: any): Promise<any> {\n    this.logger.info('Executing optimized semantic clustering', { taskId: task.id.id });\n\n    // Implement semantic clustering with caching\n    const data = task.input?.extractedData || [];\n    const cacheKey = this.generateCacheKey('clustering', JSON.stringify(data));\n\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Perform semantic clustering\n    const clusters = await this.performSemanticClustering(data);\n\n    // Cache clustering results\n    this.setCache(cacheKey, clusters, 7200000); // 2 hours TTL\n\n    return {\n      clusters,\n      clusterCount: clusters.length,\n      averageClusterSize: clusters.reduce((sum, c) => sum + c.results.length, 0) / clusters.length,\n      coherenceScore: clusters.reduce((sum, c) => sum + c.coherenceScore, 0) / clusters.length,\n    };\n  }\n\n  private async executeGenericResearchTask(task: TaskDefinition, agent: any): Promise<any> {\n    this.logger.info('Executing generic research task', { taskId: task.id.id });\n\n    // Apply general research optimizations\n    return {\n      status: 'completed',\n      optimizations: ['caching', 'rate-limiting', 'connection-pooling'],\n      executionTime: Date.now(),\n    };\n  }\n\n  // Helper methods for research optimizations\n\n  private extractResearchParameters(description: string): any {\n    return {\n      domains: this.extractDomains(description),\n      keywords: this.extractKeywords(description),\n      timeframe: this.extractTimeframe(description),\n      sourceTypes: this.extractSourceTypes(description),\n    };\n  }\n\n  private extractDomains(description: string): string[] {\n    // Extract relevant domains from description\n    const domains = [];\n    if (description.includes('academic') || description.includes('research'))\n      domains.push('academic');\n    if (description.includes('news') || description.includes('current')) domains.push('news');\n    if (description.includes('technical') || description.includes('documentation'))\n      domains.push('technical');\n    return domains.length > 0 ? domains : ['general'];\n  }\n\n  private extractKeywords(description: string): string[] {\n    // Simple keyword extraction - in production, use NLP\n    return description\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((word) => word.length > 3)\n      .slice(0, 10);\n  }\n\n  private extractTimeframe(description: string): any {\n    // Extract time-related constraints\n    const now = new Date();\n    return {\n      start: new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000), // 1 year ago\n      end: now,\n    };\n  }\n\n  private extractSourceTypes(description: string): string[] {\n    return ['academic', 'news', 'documentation', 'blog'];\n  }\n\n  private generateSearchQueries(description: string): ResearchQuery[] {\n    const baseQuery = description.substring(0, 100);\n    const keywords = this.extractKeywords(description);\n\n    return [\n      {\n        id: generateId('query'),\n        query: baseQuery,\n        keywords: keywords.slice(0, 5),\n        domains: ['general'],\n        priority: 1,\n        timestamp: new Date(),\n      },\n      {\n        id: generateId('query'),\n        query: `${baseQuery} research study`,\n        keywords: [...keywords.slice(0, 3), 'research', 'study'],\n        domains: ['academic'],\n        priority: 2,\n        timestamp: new Date(),\n      },\n      {\n        id: generateId('query'),\n        query: `${baseQuery} best practices`,\n        keywords: [...keywords.slice(0, 3), 'best', 'practices'],\n        domains: ['technical'],\n        priority: 2,\n        timestamp: new Date(),\n      },\n    ];\n  }\n\n  private async executeRateLimitedSearch(\n    query: ResearchQuery,\n    agent: any,\n  ): Promise<ResearchResult[]> {\n    const domain = query.domains[0] || 'general';\n\n    // Check rate limits\n    if (!this.checkRateLimit(domain)) {\n      await this.waitForRateLimit(domain);\n    }\n\n    // Simulate web search with retry logic\n    let attempts = 0;\n    const maxAttempts = 3;\n\n    while (attempts < maxAttempts) {\n      try {\n        // Simulate search execution\n        const results = await this.simulateWebSearch(query);\n        this.updateRateLimit(domain);\n        return results;\n      } catch (error) {\n        attempts++;\n        if (attempts >= maxAttempts) throw error;\n        await this.exponentialBackoff(attempts);\n      }\n    }\n\n    return [];\n  }\n\n  private async simulateWebSearch(query: ResearchQuery): Promise<ResearchResult[]> {\n    // Simulate web search results\n    const resultCount = Math.floor(Math.random() * 10) + 5;\n    const results: ResearchResult[] = [];\n\n    for (let i = 0; i < resultCount; i++) {\n      results.push({\n        id: generateId('result'),\n        queryId: query.id,\n        url: `https://example.com/result-${i}`,\n        title: `Research Result ${i} for ${query.query}`,\n        content: `Content for ${query.query} - result ${i}`,\n        summary: `Summary of result ${i}`,\n        credibilityScore: Math.random() * 0.4 + 0.6, // 0.6-1.0\n        relevanceScore: Math.random() * 0.3 + 0.7, // 0.7-1.0\n        sourceType: query.domains[0] || 'general',\n        extractedAt: new Date(),\n        metadata: { queryKeywords: query.keywords },\n      });\n    }\n\n    return results;\n  }\n\n  private async rankResultsByCredibility(results: ResearchResult[]): Promise<ResearchResult[]> {\n    // Sort by combined credibility and relevance score\n    return results.sort((a, b) => {\n      const scoreA = a.credibilityScore * 0.6 + a.relevanceScore * 0.4;\n      const scoreB = b.credibilityScore * 0.6 + b.relevanceScore * 0.4;\n      return scoreB - scoreA;\n    });\n  }\n\n  private createParallelExtractionTasks(task: TaskDefinition, agent: any): Promise<any>[] {\n    // Create parallel extraction tasks\n    const results = task.input?.results || [];\n    const batchSize = Math.ceil(results.length / this.connectionPool.max);\n    const batches = [];\n\n    for (let i = 0; i < results.length; i += batchSize) {\n      const batch = results.slice(i, i + batchSize);\n      batches.push(this.extractDataFromBatch(batch));\n    }\n\n    return batches;\n  }\n\n  private async extractDataFromBatch(batch: ResearchResult[]): Promise<any[]> {\n    // Simulate parallel data extraction\n    return batch.map((result) => ({\n      id: result.id,\n      extractedData: `Extracted data from ${result.title}`,\n      insights: [`Insight 1 from ${result.title}`, `Insight 2 from ${result.title}`],\n      metadata: result.metadata,\n    }));\n  }\n\n  private deduplicateResults(results: any[]): any[] {\n    const seen = new Set();\n    return results.filter((result) => {\n      const key = result.extractedData || result.id;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  private async performSemanticClustering(data: any[]): Promise<ResearchCluster[]> {\n    // Simulate semantic clustering\n    const clusterCount = Math.min(Math.ceil(data.length / 5), 10);\n    const clusters: ResearchCluster[] = [];\n\n    for (let i = 0; i < clusterCount; i++) {\n      const clusterData = data.slice(i * 5, (i + 1) * 5);\n      clusters.push({\n        id: generateId('cluster'),\n        topic: `Research Topic ${i + 1}`,\n        results: clusterData,\n        centroid: Array(10)\n          .fill(0)\n          .map(() => Math.random()),\n        coherenceScore: Math.random() * 0.3 + 0.7,\n        keywords: [`keyword${i}1`, `keyword${i}2`],\n        summary: `Summary of cluster ${i + 1}`,\n      });\n    }\n\n    return clusters;\n  }\n\n  // Connection pooling methods\n  private async getPooledConnection(): Promise<any> {\n    if (this.connectionPool.active >= this.connectionPool.max) {\n      await this.waitForConnection();\n    }\n\n    this.connectionPool.active++;\n    return { id: generateId('connection'), timestamp: new Date() };\n  }\n\n  private releasePooledConnection(connection: any): void {\n    this.connectionPool.active--;\n    this.connectionPool.idle++;\n  }\n\n  private async waitForConnection(): Promise<void> {\n    return new Promise((resolve) => {\n      const checkConnection = () => {\n        if (this.connectionPool.active < this.connectionPool.max) {\n          resolve();\n        } else {\n          setTimeout(checkConnection, 100);\n        }\n      };\n      checkConnection();\n    });\n  }\n\n  // Rate limiting methods\n  private checkRateLimit(domain: string): boolean {\n    const limiter = this.rateLimiters.get(domain);\n    if (!limiter) {\n      this.rateLimiters.set(domain, {\n        requests: 0,\n        windowStart: new Date(),\n        windowSize: 60000, // 1 minute\n        maxRequests: 10,\n        backoffMultiplier: 1,\n      });\n      return true;\n    }\n\n    const now = new Date();\n    if (now.getTime() - limiter.windowStart.getTime() > limiter.windowSize) {\n      limiter.requests = 0;\n      limiter.windowStart = now;\n    }\n\n    return limiter.requests < limiter.maxRequests;\n  }\n\n  private updateRateLimit(domain: string): void {\n    const limiter = this.rateLimiters.get(domain);\n    if (limiter) {\n      limiter.requests++;\n    }\n  }\n\n  private async waitForRateLimit(domain: string): Promise<void> {\n    const limiter = this.rateLimiters.get(domain);\n    if (!limiter) return;\n\n    const waitTime = limiter.windowSize * limiter.backoffMultiplier;\n    await new Promise((resolve) => setTimeout(resolve, waitTime));\n  }\n\n  private async exponentialBackoff(attempt: number): Promise<void> {\n    const delay = Math.pow(2, attempt) * 1000;\n    await new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n  // Caching methods\n  private generateCacheKey(type: string, data: string): string {\n    return `${type}:${Buffer.from(data).toString('base64').substring(0, 32)}`;\n  }\n\n  private getFromCache(key: string): any | null {\n    const entry = this.researchCache.get(key);\n    if (!entry) return null;\n\n    const now = new Date();\n    if (now.getTime() - entry.timestamp.getTime() > entry.ttl) {\n      this.researchCache.delete(key);\n      return null;\n    }\n\n    entry.accessCount++;\n    entry.lastAccessed = now;\n    return entry.data;\n  }\n\n  private setCache(key: string, data: any, ttl: number): void {\n    this.researchCache.set(key, {\n      key,\n      data,\n      timestamp: new Date(),\n      ttl,\n      accessCount: 0,\n      lastAccessed: new Date(),\n    });\n\n    // Cleanup old entries if cache is too large\n    if (this.researchCache.size > 1000) {\n      this.cleanupCache();\n    }\n  }\n\n  private cleanupCache(): void {\n    const entries = Array.from(this.researchCache.entries());\n    entries.sort((a, b) => a[1].lastAccessed.getTime() - b[1].lastAccessed.getTime());\n\n    // Remove oldest 20% of entries\n    const toRemove = Math.floor(entries.length * 0.2);\n    for (let i = 0; i < toRemove; i++) {\n      this.researchCache.delete(entries[i][0]);\n    }\n  }\n\n  private createResearchTask(\n    id: string,\n    type: TaskType,\n    name: string,\n    instructions: string,\n    options: any = {},\n  ): TaskDefinition {\n    const taskId: TaskId = {\n      id: generateId('task'),\n      swarmId: 'research-swarm',\n      sequence: 1,\n      priority: 1,\n    };\n\n    return {\n      id: taskId,\n      type,\n      name,\n      description: instructions,\n      instructions,\n      requirements: {\n        capabilities: options.requiredCapabilities || ['research'],\n        tools: ['WebFetchTool', 'WebSearch'],\n        permissions: ['read', 'write'],\n      },\n      constraints: {\n        dependencies: options.dependencies || [],\n        dependents: [],\n        conflicts: [],\n        maxRetries: 3,\n        timeoutAfter: options.estimatedDuration || 300000,\n      },\n      priority: options.priority || 'medium',\n      input: options.researchParams || {},\n      context: {},\n      examples: [],\n      status: 'created',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      attempts: [],\n      statusHistory: [\n        {\n          timestamp: new Date(),\n          from: 'created',\n          to: 'created',\n          reason: 'Task created',\n          triggeredBy: 'system',\n        },\n      ],\n    };\n  }\n\n  private updateResearchMetrics(taskType: string, duration: number): void {\n    this.researchMetrics.queriesExecuted++;\n    this.researchMetrics.averageResponseTime =\n      (this.researchMetrics.averageResponseTime + duration) / 2;\n  }\n\n  private createTaskBatches(tasks: TaskDefinition[], dependencies: Map<string, string[]>): any[] {\n    const batches: any[] = [];\n    const processed = new Set<string>();\n    let batchIndex = 0;\n\n    while (processed.size < tasks.length) {\n      const batchTasks = tasks.filter(\n        (task) =>\n          !processed.has(task.id.id) &&\n          task.constraints.dependencies.every((dep) => processed.has(dep.id)),\n      );\n\n      if (batchTasks.length === 0) break; // Prevent infinite loop\n\n      const batch = {\n        id: `research-batch-${batchIndex++}`,\n        tasks: batchTasks,\n        canRunInParallel: batchTasks.length > 1,\n        estimatedDuration: Math.max(...batchTasks.map((t) => t.constraints.timeoutAfter || 0)),\n        requiredResources: {\n          agents: batchTasks.length,\n          memory: batchTasks.length * 512, // MB\n          cpu: batchTasks.length * 0.5, // CPU cores\n        },\n      };\n\n      batches.push(batch);\n      batchTasks.forEach((task) => processed.add(task.id.id));\n    }\n\n    return batches;\n  }\n\n  // Public API for metrics\n  override getMetrics() {\n    const credibilityScoresRecord: Record<string, number> = {};\n    this.researchMetrics.credibilityScores.forEach((score, index) => {\n      credibilityScoresRecord[`result_${index}`] = score;\n    });\n\n    return {\n      ...this.metrics,\n      queriesExecuted: this.researchMetrics.queriesExecuted,\n      averageResponseTime: this.researchMetrics.averageResponseTime,\n      cacheHits: this.researchMetrics.cacheHits,\n      cacheMisses: this.researchMetrics.cacheMisses,\n      credibilityScores: credibilityScoresRecord,\n      cacheHitRate:\n        this.researchMetrics.cacheHits /\n        (this.researchMetrics.cacheHits + this.researchMetrics.cacheMisses || 1),\n      averageCredibilityScore:\n        this.researchMetrics.credibilityScores.length > 0\n          ? this.researchMetrics.credibilityScores.reduce((a, b) => a + b, 0) /\n            this.researchMetrics.credibilityScores.length\n          : 0,\n      connectionPoolUtilization: this.connectionPool.active / this.connectionPool.max,\n      cacheSize: this.researchCache.size,\n    };\n  }\n\n  // Progressive refinement methods\n  async refineResearchScope(\n    objective: SwarmObjective,\n    intermediateResults: any[],\n  ): Promise<SwarmObjective> {\n    this.logger.info('Refining research scope based on intermediate results', {\n      objectiveId: objective.id,\n      resultsCount: intermediateResults.length,\n    });\n\n    // Analyze intermediate results to refine scope\n    const refinedObjective = { ...objective };\n\n    // Update requirements based on findings\n    if (intermediateResults.length > 0) {\n      const avgCredibility =\n        intermediateResults.map((r) => r.credibilityScore || 0.5).reduce((a, b) => a + b, 0) /\n        intermediateResults.length;\n\n      if (avgCredibility < 0.7) {\n        refinedObjective.requirements.qualityThreshold = Math.max(\n          refinedObjective.requirements.qualityThreshold,\n          0.8,\n        );\n      }\n    }\n\n    return refinedObjective;\n  }\n\n  // Implementation of abstract methods from BaseStrategy\n  async selectAgentForTask(task: TaskDefinition, availableAgents: any[]): Promise<string | null> {\n    if (availableAgents.length === 0) return null;\n\n    // Research-specific agent selection logic\n    let bestAgent = null;\n    let bestScore = 0;\n\n    for (const agent of availableAgents) {\n      let score = 0;\n\n      // Check for research capabilities\n      if (agent.capabilities?.research) score += 0.4;\n      if (agent.capabilities?.webSearch) score += 0.3;\n      if (agent.capabilities?.analysis) score += 0.2;\n\n      // Check for specific research task types\n      if (task.type === 'research' && agent.type === 'researcher') score += 0.3;\n      if (task.type === 'analysis' && agent.type === 'analyst') score += 0.3;\n      if (task.type === 'research' && agent.capabilities?.webSearch) score += 0.4;\n\n      // Consider current workload\n      score *= 1 - (agent.workload || 0);\n\n      if (score > bestScore) {\n        bestScore = score;\n        bestAgent = agent;\n      }\n    }\n\n    return bestAgent?.id?.id || null;\n  }\n\n  async optimizeTaskSchedule(tasks: TaskDefinition[], agents: any[]): Promise<any[]> {\n    const allocations: any[] = [];\n\n    // Group tasks by type for optimal allocation\n    const researchTasks = tasks.filter((t) => t.type === 'research');\n    const analysisTasks = tasks.filter((t) => t.type === 'analysis');\n    const otherTasks = tasks.filter((t) => !['research', 'analysis'].includes(t.type as string));\n\n    for (const agent of agents) {\n      const allocation = {\n        agentId: agent.id?.id || agent.id,\n        tasks: [] as string[],\n        estimatedWorkload: 0,\n        capabilities: this.getAgentCapabilitiesList(agent),\n      };\n\n      // Allocate tasks based on agent capabilities\n      if (agent.type === 'researcher' && researchTasks.length > 0) {\n        const task = researchTasks.shift();\n        if (task) {\n          allocation.tasks.push(task.id.id);\n          allocation.estimatedWorkload += 0.3;\n        }\n      }\n\n      if (agent.type === 'analyst' && analysisTasks.length > 0) {\n        const task = analysisTasks.shift();\n        if (task) {\n          allocation.tasks.push(task.id.id);\n          allocation.estimatedWorkload += 0.3;\n        }\n      }\n\n      // Web search tasks are handled as research tasks\n\n      // Allocate remaining tasks\n      if (allocation.tasks.length === 0 && otherTasks.length > 0) {\n        const task = otherTasks.shift();\n        if (task) {\n          allocation.tasks.push(task.id.id);\n          allocation.estimatedWorkload += 0.2;\n        }\n      }\n\n      if (allocation.tasks.length > 0) {\n        allocations.push(allocation);\n      }\n    }\n\n    return allocations;\n  }\n\n  private getAgentCapabilitiesList(agent: any): string[] {\n    const caps: string[] = [];\n    if (agent.capabilities) {\n      if (agent.capabilities.research) caps.push('research');\n      if (agent.capabilities.webSearch) caps.push('web-search');\n      if (agent.capabilities.analysis) caps.push('analysis');\n      if (agent.capabilities.codeGeneration) caps.push('code-generation');\n      if (agent.capabilities.documentation) caps.push('documentation');\n    }\n    return caps;\n  }\n}\n"],"names":["BaseStrategy","Logger","generateId","SWARM_CONSTANTS","ResearchStrategy","logger","researchCache","Map","connectionPool","rateLimiters","semanticModel","researchQueries","researchResults","researchClusters","researchMetrics","queriesExecuted","resultsCollected","cacheHits","cacheMisses","averageResponseTime","credibilityScores","clusteringAccuracy","parallelEfficiency","config","defaultConfig","name","description","version","mode","strategy","coordinationStrategy","agentSelection","taskScheduling","loadBalancing","faultTolerance","communication","maxAgents","maxTasks","maxDuration","resourceLimits","qualityThreshold","reviewRequired","testingRequired","monitoring","metricsEnabled","loggingEnabled","tracingEnabled","metricsInterval","heartbeatInterval","healthCheckInterval","retentionPeriod","maxLogSize","maxMetricPoints","alertingEnabled","alertThresholds","exportEnabled","exportFormat","exportDestination","memory","namespace","partitions","permissions","read","write","delete","share","persistent","backupEnabled","distributed","consistency","cacheEnabled","compressionEnabled","security","authenticationRequired","authorizationRequired","encryptionEnabled","defaultPermissions","adminRoles","auditEnabled","auditLevel","inputValidation","outputSanitization","performance","maxConcurrency","defaultTimeout","cacheSize","cacheTtl","optimizationEnabled","adaptiveScheduling","predictiveLoading","resourcePooling","connectionPooling","memoryPooling","mergedConfig","level","format","destination","component","active","idle","max","timeout","connections","info","decomposeObjective","objective","objectiveId","id","tasks","dependencies","researchParams","extractResearchParameters","queryPlanningTask","createResearchTask","priority","estimatedDuration","requiredCapabilities","push","webSearchTask","set","dataExtractionTask","clusteringTask","synthesisTask","totalDuration","reduce","sum","task","constraints","timeoutAfter","taskCount","length","parallelTasks","filter","t","has","recommendedStrategy","complexity","estimateComplexity","batchGroups","createTaskBatches","timestamp","Date","ttl","accessCount","lastAccessed","data","resourceRequirements","DEFAULT_MEMORY_LIMIT","cpu","DEFAULT_CPU_LIMIT","network","storage","optimizeTaskExecution","agent","startTime","now","type","executeOptimizedWebSearch","executeOptimizedDataExtraction","executeGenericResearchTask","duration","updateResearchMetrics","taskId","cacheKey","generateCacheKey","cached","getFromCache","queries","generateSearchQueries","searchPromises","map","query","executeRateLimitedSearch","results","Promise","allSettled","successfulResults","r","status","value","flat","rankedResults","rankResultsByCredibility","setCache","totalFound","credibilityScore","connection","getPooledConnection","extractionPromises","createParallelExtractionTasks","extractedData","all","deduplicatedData","deduplicateResults","totalExtracted","uniqueResults","deduplicationRate","releasePooledConnection","executeOptimizedClustering","input","JSON","stringify","clusters","performSemanticClustering","clusterCount","averageClusterSize","c","coherenceScore","optimizations","executionTime","domains","extractDomains","keywords","extractKeywords","timeframe","extractTimeframe","sourceTypes","extractSourceTypes","includes","toLowerCase","split","word","slice","start","getTime","end","baseQuery","substring","domain","checkRateLimit","waitForRateLimit","attempts","maxAttempts","simulateWebSearch","updateRateLimit","error","exponentialBackoff","resultCount","Math","floor","random","i","queryId","url","title","content","summary","relevanceScore","sourceType","extractedAt","metadata","queryKeywords","sort","a","b","scoreA","scoreB","batchSize","ceil","batches","batch","extractDataFromBatch","result","insights","seen","Set","key","add","min","clusterData","topic","centroid","Array","fill","waitForConnection","resolve","checkConnection","setTimeout","limiter","get","requests","windowStart","windowSize","maxRequests","backoffMultiplier","waitTime","attempt","delay","pow","Buffer","from","toString","entry","size","cleanupCache","entries","toRemove","instructions","options","swarmId","sequence","requirements","capabilities","tools","dependents","conflicts","maxRetries","context","examples","createdAt","updatedAt","statusHistory","to","reason","triggeredBy","taskType","processed","batchIndex","batchTasks","every","dep","canRunInParallel","requiredResources","agents","forEach","getMetrics","credibilityScoresRecord","score","index","metrics","cacheHitRate","averageCredibilityScore","connectionPoolUtilization","refineResearchScope","intermediateResults","resultsCount","refinedObjective","avgCredibility","selectAgentForTask","availableAgents","bestAgent","bestScore","research","webSearch","analysis","workload","optimizeTaskSchedule","allocations","researchTasks","analysisTasks","otherTasks","allocation","agentId","estimatedWorkload","getAgentCapabilitiesList","shift","caps","codeGeneration","documentation"],"mappings":"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"}