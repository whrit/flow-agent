{"version":3,"sources":["../../../src/swarm/executor.ts"],"sourcesContent":["/**\n * Advanced Task Executor with timeout handling and process management\n */\n\nimport { spawn, ChildProcess } from 'node:child_process';\nimport { EventEmitter } from 'node:events';\nimport * as fs from 'node:fs/promises';\nimport * as path from 'node:path';\nimport * as os from 'node:os';\nimport { Logger } from '../core/logger.js';\nimport { generateId } from '../utils/helpers.js';\nimport {\n  TaskDefinition,\n  AgentState,\n  TaskResult,\n  SwarmEvent,\n  EventType,\n  SWARM_CONSTANTS,\n} from './types.js';\n\nexport interface ExecutionContext {\n  task: TaskDefinition;\n  agent: AgentState;\n  workingDirectory: string;\n  tempDirectory: string;\n  logDirectory: string;\n  environment: Record<string, string>;\n  resources: ExecutionResources;\n}\n\nexport interface ExecutionResources {\n  maxMemory: number;\n  maxCpuTime: number;\n  maxDiskSpace: number;\n  maxNetworkConnections: number;\n  maxFileHandles: number;\n  priority: number;\n}\n\nexport interface ExecutionResult {\n  success: boolean;\n  output: string;\n  error?: string;\n  exitCode: number;\n  duration: number;\n  resourcesUsed: ResourceUsage;\n  artifacts: Record<string, any>;\n  metadata: Record<string, any>;\n}\n\nexport interface ResourceUsage {\n  cpuTime: number;\n  maxMemory: number;\n  diskIO: number;\n  networkIO: number;\n  fileHandles: number;\n}\n\nexport interface ExecutionConfig {\n  timeoutMs: number;\n  retryAttempts: number;\n  killTimeout: number;\n  resourceLimits: ExecutionResources;\n  sandboxed: boolean;\n  logLevel: string;\n  captureOutput: boolean;\n  streamOutput: boolean;\n  enableMetrics: boolean;\n}\n\nexport class TaskExecutor extends EventEmitter {\n  private logger: Logger;\n  private config: ExecutionConfig;\n  private activeExecutions: Map<string, ExecutionSession> = new Map();\n  private resourceMonitor: ResourceMonitor;\n  private processPool: ProcessPool;\n\n  constructor(config: Partial<ExecutionConfig> = {}) {\n    super();\n\n    this.config = this.mergeWithDefaults(config);\n    this.logger = new Logger(\n      { level: this.config.logLevel || 'info', format: 'text', destination: 'console' },\n      { component: 'TaskExecutor' },\n    );\n    this.resourceMonitor = new ResourceMonitor();\n    this.processPool = new ProcessPool(this.config);\n\n    this.setupEventHandlers();\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing task executor...');\n\n    await this.resourceMonitor.initialize();\n    await this.processPool.initialize();\n\n    this.logger.info('Task executor initialized');\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down task executor...');\n\n    // Stop all active executions\n    const stopPromises = Array.from(this.activeExecutions.values()).map((session) =>\n      this.stopExecution(session.id, 'Executor shutdown'),\n    );\n\n    await Promise.allSettled(stopPromises);\n\n    await this.processPool.shutdown();\n    await this.resourceMonitor.shutdown();\n\n    this.logger.info('Task executor shut down');\n  }\n\n  async executeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    options: Partial<ExecutionConfig> = {},\n  ): Promise<ExecutionResult> {\n    const sessionId = generateId('execution');\n    const context = await this.createExecutionContext(task, agent);\n    const config = { ...this.config, ...options };\n\n    this.logger.info('Starting task execution', {\n      sessionId,\n      taskId: task.id.id,\n      agentId: agent.id.id,\n      timeout: config.timeoutMs,\n    });\n\n    const session = new ExecutionSession(sessionId, task, agent, context, config, this.logger);\n\n    this.activeExecutions.set(sessionId, session);\n\n    try {\n      // Setup monitoring\n      this.resourceMonitor.startMonitoring(sessionId, context.resources);\n\n      // Execute with timeout protection\n      const result = await this.executeWithTimeout(session);\n\n      // Cleanup\n      await this.cleanupExecution(session);\n\n      this.logger.info('Task execution completed', {\n        sessionId,\n        success: result.success,\n        duration: result.duration,\n      });\n\n      return result;\n    } catch (error) {\n      this.logger.error('Task execution failed', {\n        sessionId,\n        error: error instanceof Error ? error.message : String(error),\n        stack: error.stack,\n      });\n\n      await this.cleanupExecution(session);\n      throw error;\n    } finally {\n      this.activeExecutions.delete(sessionId);\n      this.resourceMonitor.stopMonitoring(sessionId);\n    }\n  }\n\n  async stopExecution(sessionId: string, reason: string): Promise<void> {\n    const session = this.activeExecutions.get(sessionId);\n    if (!session) {\n      return;\n    }\n\n    this.logger.info('Stopping execution', { sessionId, reason });\n\n    try {\n      await session.stop(reason);\n    } catch (error) {\n      this.logger.error('Error stopping execution', { sessionId, error });\n    }\n  }\n\n  async executeClaudeTask(\n    task: TaskDefinition,\n    agent: AgentState,\n    claudeOptions: ClaudeExecutionOptions = {},\n  ): Promise<ExecutionResult> {\n    const sessionId = generateId('claude-execution');\n    const context = await this.createExecutionContext(task, agent);\n\n    this.logger.info('Starting Claude task execution', {\n      sessionId,\n      taskId: task.id.id,\n      agentId: agent.id.id,\n    });\n\n    try {\n      return await this.executeClaudeWithTimeout(sessionId, task, agent, context, claudeOptions);\n    } catch (error) {\n      this.logger.error('Claude task execution failed', {\n        sessionId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  getActiveExecutions(): ExecutionSession[] {\n    return Array.from(this.activeExecutions.values());\n  }\n\n  getExecutionMetrics(): ExecutionMetrics {\n    return {\n      activeExecutions: this.activeExecutions.size,\n      totalExecutions: this.processPool.getTotalExecutions(),\n      averageDuration: this.processPool.getAverageDuration(),\n      successRate: this.processPool.getSuccessRate(),\n      resourceUtilization: this.resourceMonitor.getUtilization(),\n      errorRate: this.processPool.getErrorRate(),\n    };\n  }\n\n  private async executeWithTimeout(session: ExecutionSession): Promise<ExecutionResult> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.logger.warn('Execution timeout', {\n          sessionId: session.id,\n          timeout: session.config.timeoutMs,\n        });\n\n        session.stop('Timeout').then(() => {\n          reject(new Error(`Execution timed out after ${session.config.timeoutMs}ms`));\n        });\n      }, session.config.timeoutMs);\n\n      session\n        .execute()\n        .then((result) => {\n          clearTimeout(timeout);\n          resolve(result);\n        })\n        .catch((error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n    });\n  }\n\n  private async executeClaudeWithTimeout(\n    sessionId: string,\n    task: TaskDefinition,\n    agent: AgentState,\n    context: ExecutionContext,\n    options: ClaudeExecutionOptions,\n  ): Promise<ExecutionResult> {\n    const startTime = Date.now();\n    const timeout = options.timeout || this.config.timeoutMs;\n\n    // Build Claude command\n    const command = this.buildClaudeCommand(task, agent, options);\n\n    // Create execution environment\n    const env = {\n      ...process.env,\n      ...context.environment,\n      CLAUDE_TASK_ID: task.id.id,\n      CLAUDE_AGENT_ID: agent.id.id,\n      CLAUDE_SESSION_ID: sessionId,\n      CLAUDE_WORKING_DIR: context.workingDirectory,\n    };\n\n    this.logger.debug('Executing Claude command', {\n      sessionId,\n      command: command.command,\n      args: command.args,\n      workingDir: context.workingDirectory,\n    });\n\n    return new Promise((resolve, reject) => {\n      let outputBuffer = '';\n      let errorBuffer = '';\n      let isTimeout = false;\n      let process: ChildProcess | null = null;\n\n      // Setup timeout\n      const timeoutHandle = setTimeout(() => {\n        isTimeout = true;\n        if (process) {\n          this.logger.warn('Claude execution timeout, killing process', {\n            sessionId,\n            pid: process.pid,\n            timeout,\n          });\n\n          // Graceful shutdown first\n          process.kill('SIGTERM');\n\n          // Force kill after grace period\n          setTimeout(() => {\n            if (process && !process.killed) {\n              process.kill('SIGKILL');\n            }\n          }, this.config.killTimeout);\n        }\n      }, timeout);\n\n      try {\n        // Spawn Claude process\n        process = spawn(command.command, command.args, {\n          cwd: context.workingDirectory,\n          env,\n          stdio: ['pipe', 'pipe', 'pipe'],\n          detached: options.detached || false,\n        });\n\n        if (!process.pid) {\n          clearTimeout(timeoutHandle);\n          reject(new Error('Failed to spawn Claude process'));\n          return;\n        }\n\n        this.logger.info('Claude process started', {\n          sessionId,\n          pid: process.pid,\n          command: command.command,\n        });\n\n        // Handle process output\n        if (process.stdout) {\n          process.stdout.on('data', (data: Buffer) => {\n            const chunk = data.toString();\n            outputBuffer += chunk;\n\n            if (this.config.streamOutput) {\n              this.emit('output', {\n                sessionId,\n                type: 'stdout',\n                data: chunk,\n              });\n            }\n          });\n        }\n\n        if (process.stderr) {\n          process.stderr.on('data', (data: Buffer) => {\n            const chunk = data.toString();\n            errorBuffer += chunk;\n\n            if (this.config.streamOutput) {\n              this.emit('output', {\n                sessionId,\n                type: 'stderr',\n                data: chunk,\n              });\n            }\n          });\n        }\n\n        // Handle process completion\n        process.on('close', async (code: number | null, signal: string | null) => {\n          clearTimeout(timeoutHandle);\n\n          const duration = Date.now() - startTime;\n          const exitCode = code || 0;\n\n          this.logger.info('Claude process completed', {\n            sessionId,\n            exitCode,\n            signal,\n            duration,\n            isTimeout,\n          });\n\n          try {\n            // Collect resource usage\n            const resourceUsage = await this.collectResourceUsage(sessionId);\n\n            // Collect artifacts\n            const artifacts = await this.collectArtifacts(context);\n\n            const result: ExecutionResult = {\n              success: !isTimeout && exitCode === 0,\n              output: outputBuffer,\n              error: errorBuffer,\n              exitCode,\n              duration,\n              resourcesUsed: resourceUsage,\n              artifacts,\n              metadata: {\n                sessionId,\n                timeout: isTimeout,\n                signal,\n                command: command.command,\n                args: command.args,\n              },\n            };\n\n            if (isTimeout) {\n              reject(new Error(`Claude execution timed out after ${timeout}ms`));\n            } else if (exitCode !== 0) {\n              reject(\n                new Error(`Claude execution failed with exit code ${exitCode}: ${errorBuffer}`),\n              );\n            } else {\n              resolve(result);\n            }\n          } catch (error) {\n            reject(error);\n          }\n        });\n\n        // Handle process errors\n        process.on('error', (error: Error) => {\n          clearTimeout(timeoutHandle);\n          this.logger.error('Claude process error', {\n            sessionId,\n            error: error instanceof Error ? error.message : String(error),\n          });\n          reject(error);\n        });\n\n        // Send input if provided\n        if (command.input && process.stdin) {\n          process.stdin.write(command.input);\n          process.stdin.end();\n        }\n\n        // If detached, unreference to allow parent to exit\n        if (options.detached) {\n          process.unref();\n        }\n      } catch (error) {\n        clearTimeout(timeoutHandle);\n        reject(error);\n      }\n    });\n  }\n\n  private buildClaudeCommand(\n    task: TaskDefinition,\n    agent: AgentState,\n    options: ClaudeExecutionOptions,\n  ): ClaudeCommand {\n    const args: string[] = [];\n    let input = '';\n\n    // Build prompt\n    const prompt = this.buildClaudePrompt(task, agent);\n\n    if (options.useStdin) {\n      // Send prompt via stdin\n      input = prompt;\n    } else {\n      // Send prompt as argument\n      args.push('-p', prompt);\n    }\n\n    // Add tools\n    if (task.requirements.tools.length > 0) {\n      args.push('--allowedTools', task.requirements.tools.join(','));\n    }\n\n    // Add model if specified\n    if (options.model) {\n      args.push('--model', options.model);\n    }\n\n    // Add max tokens if specified\n    if (options.maxTokens) {\n      args.push('--max-tokens', options.maxTokens.toString());\n    }\n\n    // Add temperature if specified\n    if (options.temperature !== undefined) {\n      args.push('--temperature', options.temperature.toString());\n    }\n\n    // Skip permissions check for swarm execution\n    args.push('--dangerously-skip-permissions');\n\n    // Add output format\n    if (options.outputFormat) {\n      args.push('--output-format', options.outputFormat);\n    }\n\n    return {\n      command: options.claudePath || 'claude',\n      args,\n      input,\n    };\n  }\n\n  private buildClaudePrompt(task: TaskDefinition, agent: AgentState): string {\n    const sections: string[] = [];\n\n    // Agent identification\n    sections.push(`You are ${agent.name}, a ${agent.type} agent in a swarm system.`);\n    sections.push(`Agent ID: ${agent.id.id}`);\n    sections.push(`Swarm ID: ${agent.id.swarmId}`);\n    sections.push('');\n\n    // Task information\n    sections.push(`TASK: ${task.name}`);\n    sections.push(`Type: ${task.type}`);\n    sections.push(`Priority: ${task.priority}`);\n    sections.push('');\n\n    // Task description\n    sections.push('DESCRIPTION:');\n    sections.push(task.description);\n    sections.push('');\n\n    // Task instructions\n    sections.push('INSTRUCTIONS:');\n    sections.push(task.instructions);\n    sections.push('');\n\n    // Context if provided\n    if (Object.keys(task.context).length > 0) {\n      sections.push('CONTEXT:');\n      sections.push(JSON.stringify(task.context, null, 2));\n      sections.push('');\n    }\n\n    // Input data if provided\n    if (task.input && Object.keys(task.input).length > 0) {\n      sections.push('INPUT DATA:');\n      sections.push(JSON.stringify(task.input, null, 2));\n      sections.push('');\n    }\n\n    // Examples if provided\n    if (task.examples && task.examples.length > 0) {\n      sections.push('EXAMPLES:');\n      task.examples.forEach((example, index) => {\n        sections.push(`Example ${index + 1}:`);\n        sections.push(JSON.stringify(example, null, 2));\n        sections.push('');\n      });\n    }\n\n    // Expected output format\n    sections.push('EXPECTED OUTPUT:');\n    if (task.expectedOutput) {\n      sections.push(JSON.stringify(task.expectedOutput, null, 2));\n    } else {\n      sections.push('Provide a structured response with:');\n      sections.push('- Summary of what was accomplished');\n      sections.push('- Any artifacts created (files, data, etc.)');\n      sections.push('- Recommendations or next steps');\n      sections.push('- Any issues encountered');\n    }\n    sections.push('');\n\n    // Quality requirements\n    sections.push('QUALITY REQUIREMENTS:');\n    sections.push(`- Quality threshold: ${task.requirements.minReliability || 0.8}`);\n    if (task.requirements.reviewRequired) {\n      sections.push('- Review required before completion');\n    }\n    if (task.requirements.testingRequired) {\n      sections.push('- Testing required before completion');\n    }\n    if (task.requirements.documentationRequired) {\n      sections.push('- Documentation required');\n    }\n    sections.push('');\n\n    // Capabilities and constraints\n    sections.push('CAPABILITIES:');\n    const capabilities = Object.entries(agent.capabilities)\n      .filter(([key, value]) => typeof value === 'boolean' && value)\n      .map(([key]) => key);\n    sections.push(capabilities.join(', '));\n    sections.push('');\n\n    sections.push('CONSTRAINTS:');\n    sections.push(\n      `- Maximum execution time: ${task.constraints.timeoutAfter || SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT}ms`,\n    );\n    sections.push(\n      `- Maximum retries: ${task.constraints.maxRetries || SWARM_CONSTANTS.MAX_RETRIES}`,\n    );\n    if (task.constraints.deadline) {\n      sections.push(`- Deadline: ${task.constraints.deadline.toISOString()}`);\n    }\n    sections.push('');\n\n    // Final instructions\n    sections.push('EXECUTION GUIDELINES:');\n    sections.push('1. Read and understand the task completely before starting');\n    sections.push('2. Use your capabilities efficiently and effectively');\n    sections.push('3. Provide detailed output about your progress and results');\n    sections.push('4. Handle errors gracefully and report issues clearly');\n    sections.push('5. Ensure your work meets the quality requirements');\n    sections.push('6. When complete, provide a clear summary of what was accomplished');\n    sections.push('');\n\n    sections.push('Begin your task execution now.');\n\n    return sections.join('\\n');\n  }\n\n  private async createExecutionContext(\n    task: TaskDefinition,\n    agent: AgentState,\n  ): Promise<ExecutionContext> {\n    const baseDir = path.join(os.tmpdir(), 'swarm-execution', task.id.id);\n    const workingDir = path.join(baseDir, 'work');\n    const tempDir = path.join(baseDir, 'temp');\n    const logDir = path.join(baseDir, 'logs');\n\n    // Create directories\n    await fs.mkdir(workingDir, { recursive: true });\n    await fs.mkdir(tempDir, { recursive: true });\n    await fs.mkdir(logDir, { recursive: true });\n\n    return {\n      task,\n      agent,\n      workingDirectory: workingDir,\n      tempDirectory: tempDir,\n      logDirectory: logDir,\n      environment: {\n        NODE_ENV: 'production',\n        SWARM_MODE: 'execution',\n        AGENT_TYPE: agent.type,\n        TASK_TYPE: task.type,\n        ...agent.environment.credentials,\n      },\n      resources: {\n        maxMemory: task.requirements.memoryRequired || SWARM_CONSTANTS.DEFAULT_MEMORY_LIMIT,\n        maxCpuTime: task.requirements.maxDuration || SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        maxDiskSpace: 1024 * 1024 * 1024, // 1GB\n        maxNetworkConnections: 10,\n        maxFileHandles: 100,\n        priority: this.getPriorityNumber(task.priority),\n      },\n    };\n  }\n\n  private async cleanupExecution(session: ExecutionSession): Promise<void> {\n    try {\n      await session.cleanup();\n      this.logger.debug('Execution cleanup completed', { sessionId: session.id });\n    } catch (error) {\n      this.logger.warn('Error during execution cleanup', {\n        sessionId: session.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  private async collectResourceUsage(sessionId: string): Promise<ResourceUsage> {\n    return this.resourceMonitor.getUsage(sessionId);\n  }\n\n  private async collectArtifacts(context: ExecutionContext): Promise<Record<string, any>> {\n    const artifacts: Record<string, any> = {};\n\n    try {\n      // Scan working directory for artifacts\n      const files = await this.scanDirectory(context.workingDirectory);\n      artifacts.files = files;\n\n      // Check for specific artifact types\n      artifacts.logs = await this.collectLogs(context.logDirectory);\n      artifacts.outputs = await this.collectOutputs(context.workingDirectory);\n    } catch (error) {\n      this.logger.warn('Error collecting artifacts', {\n        workingDir: context.workingDirectory,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    return artifacts;\n  }\n\n  private async scanDirectory(dirPath: string): Promise<string[]> {\n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n      const files: string[] = [];\n\n      for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        if (entry.isFile()) {\n          files.push(fullPath);\n        } else if (entry.isDirectory()) {\n          const subFiles = await this.scanDirectory(fullPath);\n          files.push(...subFiles);\n        }\n      }\n\n      return files;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async collectLogs(logDir: string): Promise<Record<string, string>> {\n    const logs: Record<string, string> = {};\n\n    try {\n      const files = await fs.readdir(logDir);\n      for (const file of files) {\n        if (file.endsWith('.log')) {\n          const filePath = path.join(logDir, file);\n          const content = await fs.readFile(filePath, 'utf-8');\n          logs[file] = content;\n        }\n      }\n    } catch (error) {\n      // Log directory might not exist\n    }\n\n    return logs;\n  }\n\n  private async collectOutputs(workingDir: string): Promise<Record<string, any>> {\n    const outputs: Record<string, any> = {};\n\n    try {\n      // Look for common output files\n      const outputFiles = ['output.json', 'result.json', 'response.json'];\n\n      for (const fileName of outputFiles) {\n        const filePath = path.join(workingDir, fileName);\n        try {\n          const content = await fs.readFile(filePath, 'utf-8');\n          outputs[fileName] = JSON.parse(content);\n        } catch (error) {\n          // File doesn't exist or isn't valid JSON\n        }\n      }\n    } catch (error) {\n      // Working directory might not exist\n    }\n\n    return outputs;\n  }\n\n  private getPriorityNumber(priority: string): number {\n    switch (priority) {\n      case 'critical':\n        return 0;\n      case 'high':\n        return 1;\n      case 'normal':\n        return 2;\n      case 'low':\n        return 3;\n      case 'background':\n        return 4;\n      default:\n        return 2;\n    }\n  }\n\n  private mergeWithDefaults(config: Partial<ExecutionConfig>): ExecutionConfig {\n    return {\n      timeoutMs: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n      retryAttempts: SWARM_CONSTANTS.MAX_RETRIES,\n      killTimeout: 5000, // 5 seconds\n      resourceLimits: {\n        maxMemory: SWARM_CONSTANTS.DEFAULT_MEMORY_LIMIT,\n        maxCpuTime: SWARM_CONSTANTS.DEFAULT_TASK_TIMEOUT,\n        maxDiskSpace: 1024 * 1024 * 1024, // 1GB\n        maxNetworkConnections: 10,\n        maxFileHandles: 100,\n        priority: 2,\n      },\n      sandboxed: true,\n      logLevel: 'info',\n      captureOutput: true,\n      streamOutput: false,\n      enableMetrics: true,\n      ...config,\n    };\n  }\n\n  private setupEventHandlers(): void {\n    // Handle resource limit violations\n    this.resourceMonitor.on('limit-violation', (data: any) => {\n      this.logger.warn('Resource limit violation', data);\n\n      const session = this.activeExecutions.get(data.sessionId);\n      if (session) {\n        session.stop('Resource limit violation').catch((error) => {\n          this.logger.error('Error stopping session due to resource violation', {\n            sessionId: data.sessionId,\n            error,\n          });\n        });\n      }\n    });\n\n    // Handle process pool events\n    this.processPool.on('process-failed', (data: any) => {\n      this.logger.error('Process failed in pool', data);\n    });\n  }\n}\n\n// ===== SUPPORTING CLASSES =====\n\nclass ExecutionSession {\n  public id: string;\n  public task: TaskDefinition;\n  public agent: AgentState;\n  public context: ExecutionContext;\n  public config: ExecutionConfig;\n  private logger: Logger;\n  private process?: ChildProcess;\n  private startTime?: Date;\n  private endTime?: Date;\n\n  constructor(\n    id: string,\n    task: TaskDefinition,\n    agent: AgentState,\n    context: ExecutionContext,\n    config: ExecutionConfig,\n    logger: Logger,\n  ) {\n    this.id = id;\n    this.task = task;\n    this.agent = agent;\n    this.context = context;\n    this.config = config;\n    this.logger = logger;\n  }\n\n  async execute(): Promise<ExecutionResult> {\n    this.startTime = new Date();\n\n    // Implementation would go here for actual task execution\n    // This is a placeholder that simulates execution\n\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    this.endTime = new Date();\n\n    return {\n      success: true,\n      output: 'Task completed successfully',\n      exitCode: 0,\n      duration: this.endTime.getTime() - this.startTime.getTime(),\n      resourcesUsed: {\n        cpuTime: 1000,\n        maxMemory: 50 * 1024 * 1024,\n        diskIO: 1024,\n        networkIO: 0,\n        fileHandles: 5,\n      },\n      artifacts: {},\n      metadata: {\n        sessionId: this.id,\n        agentId: this.agent.id.id,\n        taskId: this.task.id.id,\n      },\n    };\n  }\n\n  async stop(reason: string): Promise<void> {\n    this.logger.info('Stopping execution session', { sessionId: this.id, reason });\n\n    if (this.process) {\n      this.process.kill('SIGTERM');\n\n      // Force kill after timeout\n      setTimeout(() => {\n        if (this.process && !this.process.killed) {\n          this.process.kill('SIGKILL');\n        }\n      }, 5000);\n    }\n  }\n\n  async cleanup(): Promise<void> {\n    // Cleanup temporary files and resources\n    try {\n      await fs.rm(this.context.tempDirectory, { recursive: true, force: true });\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  }\n}\n\nclass ResourceMonitor extends EventEmitter {\n  private activeMonitors: Map<string, NodeJS.Timeout> = new Map();\n  private usage: Map<string, ResourceUsage> = new Map();\n\n  async initialize(): Promise<void> {\n    // Initialize resource monitoring\n  }\n\n  async shutdown(): Promise<void> {\n    // Stop all monitors\n    for (const [sessionId, timer] of this.activeMonitors) {\n      clearInterval(timer);\n    }\n    this.activeMonitors.clear();\n  }\n\n  startMonitoring(sessionId: string, limits: ExecutionResources): void {\n    const timer = setInterval(() => {\n      this.checkResources(sessionId, limits);\n    }, 1000);\n\n    this.activeMonitors.set(sessionId, timer);\n  }\n\n  stopMonitoring(sessionId: string): void {\n    const timer = this.activeMonitors.get(sessionId);\n    if (timer) {\n      clearInterval(timer);\n      this.activeMonitors.delete(sessionId);\n    }\n  }\n\n  getUsage(sessionId: string): ResourceUsage {\n    return (\n      this.usage.get(sessionId) || {\n        cpuTime: 0,\n        maxMemory: 0,\n        diskIO: 0,\n        networkIO: 0,\n        fileHandles: 0,\n      }\n    );\n  }\n\n  getUtilization(): Record<string, number> {\n    // Return overall system utilization\n    return {\n      cpu: 0.1,\n      memory: 0.2,\n      disk: 0.05,\n      network: 0.01,\n    };\n  }\n\n  private checkResources(sessionId: string, limits: ExecutionResources): void {\n    // Check if any limits are exceeded\n    const usage = this.collectCurrentUsage(sessionId);\n    this.usage.set(sessionId, usage);\n\n    if (usage.maxMemory > limits.maxMemory) {\n      this.emit('limit-violation', {\n        sessionId,\n        type: 'memory',\n        current: usage.maxMemory,\n        limit: limits.maxMemory,\n      });\n    }\n\n    if (usage.cpuTime > limits.maxCpuTime) {\n      this.emit('limit-violation', {\n        sessionId,\n        type: 'cpu',\n        current: usage.cpuTime,\n        limit: limits.maxCpuTime,\n      });\n    }\n  }\n\n  private collectCurrentUsage(sessionId: string): ResourceUsage {\n    // Collect actual resource usage - this would interface with system APIs\n    return {\n      cpuTime: Math.random() * 1000,\n      maxMemory: Math.random() * 100 * 1024 * 1024,\n      diskIO: Math.random() * 1024,\n      networkIO: Math.random() * 1024,\n      fileHandles: Math.floor(Math.random() * 10),\n    };\n  }\n}\n\nclass ProcessPool extends EventEmitter {\n  private config: ExecutionConfig;\n  private totalExecutions = 0;\n  private totalDuration = 0;\n  private successCount = 0;\n  private errorCount = 0;\n\n  constructor(config: ExecutionConfig) {\n    super();\n    this.config = config;\n  }\n\n  async initialize(): Promise<void> {\n    // Initialize process pool\n  }\n\n  async shutdown(): Promise<void> {\n    // Shutdown process pool\n  }\n\n  getTotalExecutions(): number {\n    return this.totalExecutions;\n  }\n\n  getAverageDuration(): number {\n    return this.totalExecutions > 0 ? this.totalDuration / this.totalExecutions : 0;\n  }\n\n  getSuccessRate(): number {\n    return this.totalExecutions > 0 ? this.successCount / this.totalExecutions : 0;\n  }\n\n  getErrorRate(): number {\n    return this.totalExecutions > 0 ? this.errorCount / this.totalExecutions : 0;\n  }\n}\n\n// ===== INTERFACES =====\n\nexport interface ClaudeExecutionOptions {\n  model?: string;\n  maxTokens?: number;\n  temperature?: number;\n  timeout?: number;\n  claudePath?: string;\n  useStdin?: boolean;\n  detached?: boolean;\n  outputFormat?: string;\n}\n\nexport interface ClaudeCommand {\n  command: string;\n  args: string[];\n  input?: string;\n}\n\nexport interface ExecutionMetrics {\n  activeExecutions: number;\n  totalExecutions: number;\n  averageDuration: number;\n  successRate: number;\n  resourceUtilization: Record<string, number>;\n  errorRate: number;\n}\n\nexport default TaskExecutor;\n"],"names":["spawn","EventEmitter","fs","path","os","Logger","generateId","SWARM_CONSTANTS","TaskExecutor","logger","config","activeExecutions","Map","resourceMonitor","processPool","mergeWithDefaults","level","logLevel","format","destination","component","ResourceMonitor","ProcessPool","setupEventHandlers","initialize","info","shutdown","stopPromises","Array","from","values","map","session","stopExecution","id","Promise","allSettled","executeTask","task","agent","options","sessionId","context","createExecutionContext","taskId","agentId","timeout","timeoutMs","ExecutionSession","set","startMonitoring","resources","result","executeWithTimeout","cleanupExecution","success","duration","error","Error","message","String","stack","delete","stopMonitoring","reason","get","stop","executeClaudeTask","claudeOptions","executeClaudeWithTimeout","getActiveExecutions","getExecutionMetrics","size","totalExecutions","getTotalExecutions","averageDuration","getAverageDuration","successRate","getSuccessRate","resourceUtilization","getUtilization","errorRate","getErrorRate","resolve","reject","setTimeout","warn","then","execute","clearTimeout","catch","startTime","Date","now","command","buildClaudeCommand","env","process","environment","CLAUDE_TASK_ID","CLAUDE_AGENT_ID","CLAUDE_SESSION_ID","CLAUDE_WORKING_DIR","workingDirectory","debug","args","workingDir","outputBuffer","errorBuffer","isTimeout","timeoutHandle","pid","kill","killed","killTimeout","cwd","stdio","detached","stdout","on","data","chunk","toString","streamOutput","emit","type","stderr","code","signal","exitCode","resourceUsage","collectResourceUsage","artifacts","collectArtifacts","output","resourcesUsed","metadata","input","stdin","write","end","unref","prompt","buildClaudePrompt","useStdin","push","requirements","tools","length","join","model","maxTokens","temperature","undefined","outputFormat","claudePath","sections","name","swarmId","priority","description","instructions","Object","keys","JSON","stringify","examples","forEach","example","index","expectedOutput","minReliability","reviewRequired","testingRequired","documentationRequired","capabilities","entries","filter","key","value","constraints","timeoutAfter","DEFAULT_TASK_TIMEOUT","maxRetries","MAX_RETRIES","deadline","toISOString","baseDir","tmpdir","tempDir","logDir","mkdir","recursive","tempDirectory","logDirectory","NODE_ENV","SWARM_MODE","AGENT_TYPE","TASK_TYPE","credentials","maxMemory","memoryRequired","DEFAULT_MEMORY_LIMIT","maxCpuTime","maxDuration","maxDiskSpace","maxNetworkConnections","maxFileHandles","getPriorityNumber","cleanup","getUsage","files","scanDirectory","logs","collectLogs","outputs","collectOutputs","dirPath","readdir","withFileTypes","entry","fullPath","isFile","isDirectory","subFiles","file","endsWith","filePath","content","readFile","outputFiles","fileName","parse","retryAttempts","resourceLimits","sandboxed","captureOutput","enableMetrics","endTime","getTime","cpuTime","diskIO","networkIO","fileHandles","rm","force","activeMonitors","usage","timer","clearInterval","clear","limits","setInterval","checkResources","cpu","memory","disk","network","collectCurrentUsage","current","limit","Math","random","floor","totalDuration","successCount","errorCount"],"mappings":"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"}