{"version":3,"sources":["../../../src/swarm/advanced-orchestrator.ts"],"sourcesContent":["/**\n * Advanced Swarm Orchestration Engine\n * \n * This is the core orchestration engine that manages swarm lifecycle,\n * agent coordination, task distribution, and result aggregation.\n * It integrates with existing MCP tools and provides production-ready\n * swarm collaboration capabilities.\n */\n\nimport { EventEmitter } from 'node:events';\nimport { performance } from 'node:perf_hooks';\nimport { Logger } from '../core/logger.js';\nimport { generateId } from '../utils/helpers.js';\nimport { SwarmCoordinator } from '../coordination/swarm-coordinator.js';\nimport { AdvancedTaskScheduler } from '../coordination/advanced-scheduler.js';\nimport { SwarmMonitor } from '../coordination/swarm-monitor.js';\nimport { MemoryManager } from '../memory/manager.js';\nimport TaskExecutor from './executor.js';\nimport {\n  SwarmConfig,\n  SwarmObjective,\n  SwarmAgent,\n  SwarmTask,\n  SwarmId,\n  AgentId,\n  TaskId,\n  SwarmStatus,\n  SwarmProgress,\n  SwarmResults,\n  SwarmMetrics,\n  TaskDefinition,\n  AgentState,\n  AgentCapabilities,\n  TaskResult,\n  SwarmEvent,\n  EventType,\n  SWARM_CONSTANTS,\n} from './types.js';\n\nexport interface AdvancedSwarmConfig extends SwarmConfig {\n  // Advanced features\n  autoScaling: boolean;\n  loadBalancing: boolean;\n  faultTolerance: boolean;\n  realTimeMonitoring: boolean;\n  \n  // Performance settings\n  maxThroughput: number;\n  latencyTarget: number;\n  reliabilityTarget: number;\n  \n  // Integration settings\n  mcpIntegration: boolean;\n  hiveIntegration: boolean;\n  claudeCodeIntegration: boolean;\n  \n  // Neural capabilities\n  neuralProcessing: boolean;\n  learningEnabled: boolean;\n  adaptiveScheduling: boolean;\n}\n\nexport interface SwarmExecutionContext {\n  swarmId: SwarmId;\n  objective: SwarmObjective;\n  agents: Map<string, SwarmAgent>;\n  tasks: Map<string, SwarmTask>;\n  scheduler: AdvancedTaskScheduler;\n  monitor: SwarmMonitor;\n  memoryManager: MemoryManager;\n  taskExecutor: TaskExecutor;\n  startTime: Date;\n  endTime?: Date;\n  metrics: SwarmMetrics;\n}\n\nexport interface SwarmDeploymentOptions {\n  environment: 'development' | 'staging' | 'production';\n  region?: string;\n  resourceLimits?: {\n    maxAgents: number;\n    maxMemory: number;\n    maxCpu: number;\n    maxDisk: number;\n  };\n  networking?: {\n    allowedPorts: number[];\n    firewallRules: string[];\n  };\n  security?: {\n    encryption: boolean;\n    authentication: boolean;\n    auditing: boolean;\n  };\n}\n\nexport class AdvancedSwarmOrchestrator extends EventEmitter {\n  private logger: Logger;\n  private config: AdvancedSwarmConfig;\n  private activeSwarms: Map<string, SwarmExecutionContext> = new Map();\n  private globalMetrics: SwarmMetrics;\n  private coordinator: SwarmCoordinator;\n  private memoryManager: MemoryManager;\n  private isRunning: boolean = false;\n  private healthCheckInterval?: NodeJS.Timeout;\n  private metricsCollectionInterval?: NodeJS.Timeout;\n\n  constructor(config: Partial<AdvancedSwarmConfig> = {}) {\n    super();\n    \n    this.logger = new Logger('AdvancedSwarmOrchestrator');\n    this.config = this.createDefaultConfig(config);\n    \n    // Initialize components\n    this.coordinator = new SwarmCoordinator({\n      maxAgents: this.config.maxAgents,\n      maxConcurrentTasks: this.config.maxConcurrentTasks,\n      taskTimeout: this.config.taskTimeoutMinutes! * 60 * 1000,\n      enableMonitoring: this.config.realTimeMonitoring,\n      coordinationStrategy: this.config.coordinationStrategy.name as any,\n    });\n\n    this.memoryManager = new MemoryManager(\n      {\n        backend: 'sqlite',\n        namespace: 'swarm-orchestrator',\n        cacheSizeMB: 100,\n        syncOnExit: true,\n        maxEntries: 50000,\n        ttlMinutes: 1440, // 24 hours\n      },\n      this.coordinator,\n      this.logger,\n    );\n\n    this.globalMetrics = this.initializeMetrics();\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Initialize the orchestrator and all subsystems\n   */\n  async initialize(): Promise<void> {\n    if (this.isRunning) {\n      this.logger.warn('Orchestrator already running');\n      return;\n    }\n\n    this.logger.info('Initializing advanced swarm orchestrator...');\n    \n    try {\n      // Initialize subsystems\n      await this.coordinator.start();\n      await this.memoryManager.initialize();\n      \n      // Start background processes\n      this.startHealthChecks();\n      this.startMetricsCollection();\n      \n      this.isRunning = true;\n      this.logger.info('Advanced swarm orchestrator initialized successfully');\n      this.emit('orchestrator:initialized');\n      \n    } catch (error) {\n      this.logger.error('Failed to initialize orchestrator', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Shutdown the orchestrator gracefully\n   */\n  async shutdown(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.logger.info('Shutting down advanced swarm orchestrator...');\n    \n    try {\n      // Stop background processes\n      if (this.healthCheckInterval) {\n        clearInterval(this.healthCheckInterval);\n      }\n      if (this.metricsCollectionInterval) {\n        clearInterval(this.metricsCollectionInterval);\n      }\n\n      // Shutdown active swarms gracefully\n      const shutdownPromises = Array.from(this.activeSwarms.keys()).map(\n        swarmId => this.stopSwarm(swarmId, 'Orchestrator shutdown')\n      );\n      await Promise.allSettled(shutdownPromises);\n\n      // Shutdown subsystems\n      await this.coordinator.stop();\n\n      this.isRunning = false;\n      this.logger.info('Advanced swarm orchestrator shut down successfully');\n      this.emit('orchestrator:shutdown');\n      \n    } catch (error) {\n      this.logger.error('Error during orchestrator shutdown', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create and initialize a new swarm for a given objective\n   */\n  async createSwarm(\n    objective: string,\n    strategy: SwarmObjective['strategy'] = 'auto',\n    options: Partial<SwarmDeploymentOptions> = {}\n  ): Promise<string> {\n    const swarmId = generateId('swarm');\n    const swarmObjective: SwarmObjective = {\n      id: swarmId,\n      name: `Swarm-${swarmId}`,\n      description: objective,\n      strategy,\n      mode: this.config.mode,\n      requirements: {\n        minAgents: 1,\n        maxAgents: this.config.maxAgents,\n        agentTypes: this.getRequiredAgentTypes(strategy),\n        estimatedDuration: 3600000, // 1 hour default\n        maxDuration: 7200000, // 2 hours max\n        qualityThreshold: this.config.qualityThreshold,\n        reviewCoverage: 0.8,\n        testCoverage: 0.7,\n        reliabilityTarget: this.config.reliabilityTarget,\n      },\n      constraints: {\n        maxCost: 1000, // Default budget\n        resourceLimits: this.config.resourceLimits,\n        minQuality: this.config.qualityThreshold,\n        requiredApprovals: [],\n        allowedFailures: 2,\n        recoveryTime: 300000, // 5 minutes\n        milestones: [],\n      },\n      tasks: [],\n      dependencies: [],\n      status: 'planning',\n      progress: this.initializeProgress(),\n      createdAt: new Date(),\n      results: undefined,\n      metrics: this.initializeMetrics(),\n    };\n\n    // Create execution context\n    const context: SwarmExecutionContext = {\n      swarmId: { id: swarmId, timestamp: Date.now(), namespace: 'swarm' },\n      objective: swarmObjective,\n      agents: new Map(),\n      tasks: new Map(),\n      scheduler: new AdvancedTaskScheduler({\n        maxConcurrency: this.config.maxConcurrentTasks,\n        enablePrioritization: true,\n        enableLoadBalancing: this.config.loadBalancing,\n        enableWorkStealing: true,\n        schedulingAlgorithm: 'adaptive',\n      }),\n      monitor: new SwarmMonitor({\n        updateInterval: 1000,\n        enableAlerts: true,\n        enableHistory: true,\n        metricsRetention: 86400000, // 24 hours\n      }),\n      memoryManager: this.memoryManager,\n      taskExecutor: new TaskExecutor({\n        timeoutMs: this.config.taskTimeoutMinutes! * 60 * 1000,\n        retryAttempts: this.config.maxRetries,\n        enableMetrics: true,\n        captureOutput: true,\n        streamOutput: this.config.realTimeMonitoring,\n      }),\n      startTime: new Date(),\n      metrics: this.initializeMetrics(),\n    };\n\n    // Initialize subsystems\n    await context.scheduler.initialize();\n    await context.monitor.start();\n    await context.taskExecutor.initialize();\n\n    // Store context\n    this.activeSwarms.set(swarmId, context);\n\n    // Store in memory\n    await this.memoryManager.store({\n      id: `swarm:${swarmId}`,\n      agentId: 'orchestrator',\n      type: 'swarm-definition',\n      content: JSON.stringify(swarmObjective),\n      namespace: 'swarm-orchestrator',\n      timestamp: new Date(),\n      metadata: {\n        type: 'swarm-definition',\n        strategy,\n        status: 'created',\n        agentCount: 0,\n        taskCount: 0,\n      },\n    });\n\n    this.logger.info('Swarm created successfully', {\n      swarmId,\n      objective,\n      strategy,\n      maxAgents: swarmObjective.requirements.maxAgents,\n    });\n\n    this.emit('swarm:created', { swarmId, objective: swarmObjective });\n    return swarmId;\n  }\n\n  /**\n   * Start executing a swarm with automatic task decomposition and agent spawning\n   */\n  async startSwarm(swarmId: string): Promise<void> {\n    const context = this.activeSwarms.get(swarmId);\n    if (!context) {\n      throw new Error(`Swarm not found: ${swarmId}`);\n    }\n\n    if (context.objective.status !== 'planning') {\n      throw new Error(`Swarm ${swarmId} is not in planning state`);\n    }\n\n    this.logger.info('Starting swarm execution', { swarmId });\n\n    try {\n      // Update status\n      context.objective.status = 'initializing';\n      context.objective.startedAt = new Date();\n\n      // Decompose objective into tasks\n      const tasks = await this.decomposeObjective(context.objective);\n      context.objective.tasks = tasks;\n\n      // Store tasks in context\n      tasks.forEach(task => {\n        context.tasks.set(task.id.id, task as SwarmTask);\n      });\n\n      // Spawn required agents\n      const agents = await this.spawnRequiredAgents(context);\n      agents.forEach(agent => {\n        context.agents.set(agent.id, agent);\n      });\n\n      // Start task execution\n      context.objective.status = 'executing';\n      await this.scheduleAndExecuteTasks(context);\n\n      this.logger.info('Swarm started successfully', {\n        swarmId,\n        taskCount: tasks.length,\n        agentCount: agents.length,\n      });\n\n      this.emit('swarm:started', { swarmId, context });\n\n    } catch (error) {\n      context.objective.status = 'failed';\n      this.logger.error('Failed to start swarm', { swarmId, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Stop a running swarm gracefully\n   */\n  async stopSwarm(swarmId: string, reason: string = 'Manual stop'): Promise<void> {\n    const context = this.activeSwarms.get(swarmId);\n    if (!context) {\n      throw new Error(`Swarm not found: ${swarmId}`);\n    }\n\n    this.logger.info('Stopping swarm', { swarmId, reason });\n\n    try {\n      // Update status\n      context.objective.status = 'cancelled';\n      context.endTime = new Date();\n\n      // Stop task executor\n      await context.taskExecutor.shutdown();\n\n      // Stop scheduler\n      await context.scheduler.shutdown();\n\n      // Stop monitor\n      context.monitor.stop();\n\n      // Clean up agents\n      for (const agent of context.agents.values()) {\n        try {\n          await this.terminateAgent(agent.id, reason);\n        } catch (error) {\n          this.logger.warn('Error terminating agent during swarm stop', {\n            agentId: agent.id,\n            error,\n          });\n        }\n      }\n\n      // Store final results\n      await this.storeFinalResults(context);\n\n      this.logger.info('Swarm stopped successfully', { swarmId, reason });\n      this.emit('swarm:stopped', { swarmId, reason, context });\n\n    } catch (error) {\n      this.logger.error('Error stopping swarm', { swarmId, error });\n      throw error;\n    } finally {\n      // Remove from active swarms\n      this.activeSwarms.delete(swarmId);\n    }\n  }\n\n  /**\n   * Get comprehensive status of a swarm\n   */\n  getSwarmStatus(swarmId: string): SwarmExecutionContext | null {\n    return this.activeSwarms.get(swarmId) || null;\n  }\n\n  /**\n   * Get status of all active swarms\n   */\n  getAllSwarmStatuses(): SwarmExecutionContext[] {\n    return Array.from(this.activeSwarms.values());\n  }\n\n  /**\n   * Get comprehensive orchestrator metrics\n   */\n  getOrchestratorMetrics(): {\n    global: SwarmMetrics;\n    swarms: Record<string, SwarmMetrics>;\n    system: {\n      activeSwarms: number;\n      totalAgents: number;\n      totalTasks: number;\n      uptime: number;\n      memoryUsage: number;\n      cpuUsage: number;\n    };\n  } {\n    const swarmMetrics: Record<string, SwarmMetrics> = {};\n    for (const [swarmId, context] of this.activeSwarms) {\n      swarmMetrics[swarmId] = context.metrics;\n    }\n\n    return {\n      global: this.globalMetrics,\n      swarms: swarmMetrics,\n      system: {\n        activeSwarms: this.activeSwarms.size,\n        totalAgents: Array.from(this.activeSwarms.values())\n          .reduce((sum, ctx) => sum + ctx.agents.size, 0),\n        totalTasks: Array.from(this.activeSwarms.values())\n          .reduce((sum, ctx) => sum + ctx.tasks.size, 0),\n        uptime: this.isRunning ? Date.now() - performance.timeOrigin : 0,\n        memoryUsage: process.memoryUsage().heapUsed,\n        cpuUsage: process.cpuUsage().user,\n      },\n    };\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  async performHealthCheck(): Promise<{\n    healthy: boolean;\n    issues: string[];\n    metrics: any;\n    timestamp: Date;\n  }> {\n    const issues: string[] = [];\n    const startTime = performance.now();\n\n    try {\n      // Check orchestrator health\n      if (!this.isRunning) {\n        issues.push('Orchestrator is not running');\n      }\n\n      // Check coordinator health\n      if (!this.coordinator) {\n        issues.push('Coordinator is not initialized');\n      }\n\n      // Check memory manager health\n      try {\n        await this.memoryManager.store({\n          id: 'health-check',\n          agentId: 'orchestrator',\n          type: 'health-check',\n          content: 'Health check test',\n          namespace: 'health',\n          timestamp: new Date(),\n          metadata: { test: true },\n        });\n      } catch (error) {\n        issues.push('Memory manager health check failed');\n      }\n\n      // Check swarm health\n      for (const [swarmId, context] of this.activeSwarms) {\n        if (context.objective.status === 'failed') {\n          issues.push(`Swarm ${swarmId} is in failed state`);\n        }\n\n        // Check for stalled swarms\n        const swarmAge = Date.now() - context.startTime.getTime();\n        if (swarmAge > 3600000 && context.objective.status === 'executing') { // 1 hour\n          issues.push(`Swarm ${swarmId} appears to be stalled`);\n        }\n      }\n\n      const healthy = issues.length === 0;\n      const duration = performance.now() - startTime;\n\n      return {\n        healthy,\n        issues,\n        metrics: {\n          checkDuration: duration,\n          activeSwarms: this.activeSwarms.size,\n          memoryUsage: process.memoryUsage(),\n          cpuUsage: process.cpuUsage(),\n        },\n        timestamp: new Date(),\n      };\n\n    } catch (error) {\n      issues.push(`Health check failed: ${error instanceof Error ? error.message : String(error)}`);\n      return {\n        healthy: false,\n        issues,\n        metrics: {},\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  // Private methods\n\n  private async decomposeObjective(objective: SwarmObjective): Promise<TaskDefinition[]> {\n    const tasks: TaskDefinition[] = [];\n    const baseTaskId = generateId('task');\n\n    switch (objective.strategy) {\n      case 'research':\n        tasks.push(\n          this.createTaskDefinition(`${baseTaskId}-1`, 'research', 'Conduct comprehensive research', 'high', []),\n          this.createTaskDefinition(`${baseTaskId}-2`, 'analysis', 'Analyze research findings', 'high', [`${baseTaskId}-1`]),\n          this.createTaskDefinition(`${baseTaskId}-3`, 'synthesis', 'Synthesize insights and recommendations', 'high', [`${baseTaskId}-2`]),\n          this.createTaskDefinition(`${baseTaskId}-4`, 'documentation', 'Create research documentation', 'medium', [`${baseTaskId}-3`]),\n        );\n        break;\n\n      case 'development':\n        tasks.push(\n          this.createTaskDefinition(`${baseTaskId}-1`, 'system-design', 'Design system architecture', 'high', []),\n          this.createTaskDefinition(`${baseTaskId}-2`, 'code-generation', 'Generate core implementation', 'high', [`${baseTaskId}-1`]),\n          this.createTaskDefinition(`${baseTaskId}-3`, 'unit-testing', 'Create comprehensive tests', 'high', [`${baseTaskId}-2`]),\n          this.createTaskDefinition(`${baseTaskId}-4`, 'integration-testing', 'Perform integration testing', 'high', [`${baseTaskId}-3`]),\n          this.createTaskDefinition(`${baseTaskId}-5`, 'code-review', 'Conduct code review', 'medium', [`${baseTaskId}-4`]),\n          this.createTaskDefinition(`${baseTaskId}-6`, 'documentation', 'Create technical documentation', 'medium', [`${baseTaskId}-5`]),\n        );\n        break;\n\n      case 'analysis':\n        tasks.push(\n          this.createTaskDefinition(`${baseTaskId}-1`, 'data-collection', 'Collect and prepare data', 'high', []),\n          this.createTaskDefinition(`${baseTaskId}-2`, 'data-analysis', 'Perform statistical analysis', 'high', [`${baseTaskId}-1`]),\n          this.createTaskDefinition(`${baseTaskId}-3`, 'visualization', 'Create data visualizations', 'medium', [`${baseTaskId}-2`]),\n          this.createTaskDefinition(`${baseTaskId}-4`, 'reporting', 'Generate analysis report', 'high', [`${baseTaskId}-2`, `${baseTaskId}-3`]),\n        );\n        break;\n\n      default: // auto\n        // Use AI-driven decomposition based on objective description\n        tasks.push(\n          this.createTaskDefinition(`${baseTaskId}-1`, 'exploration', 'Explore and understand requirements', 'high', []),\n          this.createTaskDefinition(`${baseTaskId}-2`, 'planning', 'Create detailed execution plan', 'high', [`${baseTaskId}-1`]),\n          this.createTaskDefinition(`${baseTaskId}-3`, 'execution', 'Execute main tasks', 'high', [`${baseTaskId}-2`]),\n          this.createTaskDefinition(`${baseTaskId}-4`, 'validation', 'Validate and test results', 'high', [`${baseTaskId}-3`]),\n          this.createTaskDefinition(`${baseTaskId}-5`, 'completion', 'Finalize and document outcomes', 'medium', [`${baseTaskId}-4`]),\n        );\n    }\n\n    // Store tasks in memory\n    for (const task of tasks) {\n      await this.memoryManager.store({\n        id: `task:${task.id.id}`,\n        agentId: 'orchestrator',\n        type: 'task-definition',\n        content: JSON.stringify(task),\n        namespace: `swarm:${objective.id}`,\n        timestamp: new Date(),\n        metadata: {\n          type: 'task-definition',\n          taskType: task.type,\n          priority: task.priority,\n          status: task.status,\n        },\n      });\n    }\n\n    return tasks;\n  }\n\n  private createTaskDefinition(\n    id: string,\n    type: string,\n    description: string,\n    priority: 'high' | 'medium' | 'low',\n    dependencies: string[]\n  ): TaskDefinition {\n    return {\n      id: { id, swarmId: '', sequence: 0, priority: this.getPriorityNumber(priority) },\n      type: type as any,\n      name: `Task: ${type}`,\n      description,\n      requirements: {\n        capabilities: [type],\n        tools: ['bash', 'read', 'write', 'edit'],\n        permissions: ['read', 'write', 'execute'],\n        estimatedDuration: 1800000, // 30 minutes\n        maxDuration: 3600000, // 1 hour\n        memoryRequired: 512 * 1024 * 1024, // 512MB\n      },\n      constraints: {\n        dependencies: dependencies.map(depId => ({ id: depId, swarmId: '', sequence: 0, priority: 0 })),\n        dependents: [],\n        conflicts: [],\n        maxRetries: 3,\n        timeoutAfter: 3600000, // 1 hour\n      },\n      priority: priority as any,\n      input: {},\n      instructions: `Execute ${type} task: ${description}`,\n      context: {},\n      status: 'created',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      attempts: [],\n      statusHistory: [],\n    };\n  }\n\n  private async spawnRequiredAgents(context: SwarmExecutionContext): Promise<SwarmAgent[]> {\n    const agents: SwarmAgent[] = [];\n    const requiredTypes = context.objective.requirements.agentTypes;\n\n    for (const agentType of requiredTypes) {\n      const agentId = generateId('agent');\n      \n      const agent: SwarmAgent = {\n        id: agentId,\n        name: `${agentType}-${agentId}`,\n        type: agentType as any,\n        status: 'idle',\n        capabilities: this.getAgentCapabilities(agentType),\n        metrics: {\n          tasksCompleted: 0,\n          tasksFailed: 0,\n          totalDuration: 0,\n          lastActivity: new Date(),\n        },\n      };\n\n      // Register with coordinator\n      await this.coordinator.registerAgent(agent.name, agent.type, agent.capabilities);\n\n      agents.push(agent);\n\n      this.logger.info('Agent spawned', {\n        swarmId: context.swarmId.id,\n        agentId,\n        type: agentType,\n        capabilities: agent.capabilities,\n      });\n    }\n\n    return agents;\n  }\n\n  private async scheduleAndExecuteTasks(context: SwarmExecutionContext): Promise<void> {\n    // Schedule all tasks\n    for (const task of context.tasks.values()) {\n      await context.scheduler.scheduleTask(task as any);\n    }\n\n    // Start execution monitoring\n    this.monitorSwarmExecution(context);\n  }\n\n  private monitorSwarmExecution(context: SwarmExecutionContext): void {\n    const monitorInterval = setInterval(async () => {\n      try {\n        // Update progress\n        this.updateSwarmProgress(context);\n\n        // Check for completion\n        if (this.isSwarmComplete(context)) {\n          clearInterval(monitorInterval);\n          await this.completeSwarm(context);\n        }\n\n        // Check for failure conditions\n        if (this.shouldFailSwarm(context)) {\n          clearInterval(monitorInterval);\n          await this.failSwarm(context, 'Too many failures or timeout');\n        }\n\n      } catch (error) {\n        this.logger.error('Error monitoring swarm execution', {\n          swarmId: context.swarmId.id,\n          error,\n        });\n      }\n    }, 5000); // Check every 5 seconds\n  }\n\n  private updateSwarmProgress(context: SwarmExecutionContext): void {\n    const tasks = Array.from(context.tasks.values());\n    const totalTasks = tasks.length;\n    const completedTasks = tasks.filter(t => t.status === 'completed').length;\n    const failedTasks = tasks.filter(t => t.status === 'failed').length;\n    const runningTasks = tasks.filter(t => t.status === 'running').length;\n\n    context.objective.progress = {\n      totalTasks,\n      completedTasks,\n      failedTasks,\n      runningTasks,\n      percentComplete: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0,\n      estimatedCompletion: this.estimateCompletion(context),\n      timeRemaining: this.calculateTimeRemaining(context),\n      averageQuality: this.calculateAverageQuality(context),\n      passedReviews: 0,\n      passedTests: 0,\n      resourceUtilization: {},\n      costSpent: 0,\n      activeAgents: Array.from(context.agents.values()).filter(a => a.status === 'busy').length,\n      idleAgents: Array.from(context.agents.values()).filter(a => a.status === 'idle').length,\n      busyAgents: Array.from(context.agents.values()).filter(a => a.status === 'busy').length,\n    };\n  }\n\n  private isSwarmComplete(context: SwarmExecutionContext): boolean {\n    const tasks = Array.from(context.tasks.values());\n    return tasks.every(task => task.status === 'completed' || task.status === 'failed');\n  }\n\n  private shouldFailSwarm(context: SwarmExecutionContext): boolean {\n    const tasks = Array.from(context.tasks.values());\n    const failedTasks = tasks.filter(t => t.status === 'failed').length;\n    const totalTasks = tasks.length;\n\n    // Fail if too many tasks failed\n    if (failedTasks > context.objective.constraints.allowedFailures) {\n      return true;\n    }\n\n    // Fail if deadline exceeded\n    if (context.objective.constraints.deadline && new Date() > context.objective.constraints.deadline) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private async completeSwarm(context: SwarmExecutionContext): Promise<void> {\n    context.objective.status = 'completed';\n    context.objective.completedAt = new Date();\n    context.endTime = new Date();\n\n    // Collect results\n    const results = await this.collectSwarmResults(context);\n    context.objective.results = results;\n\n    this.logger.info('Swarm completed successfully', {\n      swarmId: context.swarmId.id,\n      duration: context.endTime.getTime() - context.startTime.getTime(),\n      totalTasks: context.tasks.size,\n      completedTasks: results.objectivesMet.length,\n    });\n\n    this.emit('swarm:completed', { swarmId: context.swarmId.id, context, results });\n  }\n\n  private async failSwarm(context: SwarmExecutionContext, reason: string): Promise<void> {\n    context.objective.status = 'failed';\n    context.endTime = new Date();\n\n    this.logger.error('Swarm failed', {\n      swarmId: context.swarmId.id,\n      reason,\n      duration: context.endTime.getTime() - context.startTime.getTime(),\n    });\n\n    this.emit('swarm:failed', { swarmId: context.swarmId.id, context, reason });\n  }\n\n  private async collectSwarmResults(context: SwarmExecutionContext): Promise<SwarmResults> {\n    const tasks = Array.from(context.tasks.values());\n    const completedTasks = tasks.filter(t => t.status === 'completed');\n    const failedTasks = tasks.filter(t => t.status === 'failed');\n\n    return {\n      outputs: {},\n      artifacts: {},\n      reports: {},\n      overallQuality: this.calculateAverageQuality(context),\n      qualityByTask: {},\n      totalExecutionTime: context.endTime!.getTime() - context.startTime.getTime(),\n      resourcesUsed: {},\n      efficiency: completedTasks.length / tasks.length,\n      objectivesMet: completedTasks.map(t => t.id),\n      objectivesFailed: failedTasks.map(t => t.id),\n      improvements: [],\n      nextActions: [],\n    };\n  }\n\n  private async storeFinalResults(context: SwarmExecutionContext): Promise<void> {\n    await this.memoryManager.store({\n      id: `results:${context.swarmId.id}`,\n      agentId: 'orchestrator',\n      type: 'swarm-results',\n      content: JSON.stringify(context.objective.results),\n      namespace: `swarm:${context.swarmId.id}`,\n      timestamp: new Date(),\n      metadata: {\n        type: 'swarm-results',\n        status: context.objective.status,\n        duration: context.endTime ? context.endTime.getTime() - context.startTime.getTime() : 0,\n        taskCount: context.tasks.size,\n        agentCount: context.agents.size,\n      },\n    });\n  }\n\n  private async terminateAgent(agentId: string, reason: string): Promise<void> {\n    // Implementation would terminate actual agent processes\n    this.logger.info('Agent terminated', { agentId, reason });\n  }\n\n  private getRequiredAgentTypes(strategy: SwarmObjective['strategy']): any[] {\n    switch (strategy) {\n      case 'research':\n        return ['researcher', 'analyst', 'documenter'];\n      case 'development':\n        return ['architect', 'coder', 'tester', 'reviewer'];\n      case 'analysis':\n        return ['analyst', 'researcher', 'documenter'];\n      default:\n        return ['coordinator', 'researcher', 'coder', 'analyst'];\n    }\n  }\n\n  private getAgentCapabilities(agentType: string): string[] {\n    const capabilityMap: Record<string, string[]> = {\n      coordinator: ['coordination', 'planning', 'monitoring'],\n      researcher: ['research', 'data-gathering', 'web-search'],\n      coder: ['code-generation', 'debugging', 'testing'],\n      analyst: ['data-analysis', 'visualization', 'reporting'],\n      architect: ['system-design', 'architecture-review', 'documentation'],\n      tester: ['testing', 'quality-assurance', 'automation'],\n      reviewer: ['code-review', 'quality-review', 'validation'],\n      optimizer: ['performance-optimization', 'resource-optimization'],\n      documenter: ['documentation', 'reporting', 'knowledge-management'],\n      monitor: ['monitoring', 'alerting', 'diagnostics'],\n      specialist: ['domain-expertise', 'specialized-tasks'],\n    };\n\n    return capabilityMap[agentType] || ['general'];\n  }\n\n  private estimateCompletion(context: SwarmExecutionContext): Date {\n    // Simple estimation based on current progress\n    const progress = context.objective.progress.percentComplete;\n    const elapsed = Date.now() - context.startTime.getTime();\n    const totalEstimated = progress > 0 ? (elapsed / progress) * 100 : elapsed * 2;\n    return new Date(context.startTime.getTime() + totalEstimated);\n  }\n\n  private calculateTimeRemaining(context: SwarmExecutionContext): number {\n    return Math.max(0, this.estimateCompletion(context).getTime() - Date.now());\n  }\n\n  private calculateAverageQuality(context: SwarmExecutionContext): number {\n    // Placeholder implementation\n    return 0.85;\n  }\n\n  private getPriorityNumber(priority: string): number {\n    switch (priority) {\n      case 'high': return 1;\n      case 'medium': return 2;\n      case 'low': return 3;\n      default: return 2;\n    }\n  }\n\n  private startHealthChecks(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        const health = await this.performHealthCheck();\n        if (!health.healthy) {\n          this.logger.warn('Health check failed', { issues: health.issues });\n          this.emit('health:warning', health);\n        }\n      } catch (error) {\n        this.logger.error('Health check error', error);\n      }\n    }, 60000); // Every minute\n  }\n\n  private startMetricsCollection(): void {\n    this.metricsCollectionInterval = setInterval(() => {\n      try {\n        this.updateGlobalMetrics();\n      } catch (error) {\n        this.logger.error('Metrics collection error', error);\n      }\n    }, 10000); // Every 10 seconds\n  }\n\n  private updateGlobalMetrics(): void {\n    const swarms = Array.from(this.activeSwarms.values());\n    \n    this.globalMetrics = {\n      throughput: this.calculateGlobalThroughput(swarms),\n      latency: this.calculateGlobalLatency(swarms),\n      efficiency: this.calculateGlobalEfficiency(swarms),\n      reliability: this.calculateGlobalReliability(swarms),\n      averageQuality: this.calculateGlobalQuality(swarms),\n      defectRate: this.calculateGlobalDefectRate(swarms),\n      reworkRate: this.calculateGlobalReworkRate(swarms),\n      resourceUtilization: this.calculateGlobalResourceUtilization(swarms),\n      costEfficiency: this.calculateGlobalCostEfficiency(swarms),\n      agentUtilization: this.calculateGlobalAgentUtilization(swarms),\n      agentSatisfaction: 0.8, // Placeholder\n      collaborationEffectiveness: 0.85, // Placeholder\n      scheduleVariance: this.calculateGlobalScheduleVariance(swarms),\n      deadlineAdherence: this.calculateGlobalDeadlineAdherence(swarms),\n    };\n  }\n\n  private calculateGlobalThroughput(swarms: SwarmExecutionContext[]): number {\n    return swarms.reduce((sum, ctx) => sum + ctx.objective.progress.completedTasks, 0);\n  }\n\n  private calculateGlobalLatency(swarms: SwarmExecutionContext[]): number {\n    // Average task completion time\n    return 1200000; // 20 minutes placeholder\n  }\n\n  private calculateGlobalEfficiency(swarms: SwarmExecutionContext[]): number {\n    const totalTasks = swarms.reduce((sum, ctx) => sum + ctx.objective.progress.totalTasks, 0);\n    const completedTasks = swarms.reduce((sum, ctx) => sum + ctx.objective.progress.completedTasks, 0);\n    return totalTasks > 0 ? completedTasks / totalTasks : 0;\n  }\n\n  private calculateGlobalReliability(swarms: SwarmExecutionContext[]): number {\n    const totalSwarms = swarms.length;\n    const successfulSwarms = swarms.filter(ctx => ctx.objective.status === 'completed').length;\n    return totalSwarms > 0 ? successfulSwarms / totalSwarms : 1;\n  }\n\n  private calculateGlobalQuality(swarms: SwarmExecutionContext[]): number {\n    return swarms.reduce((sum, ctx) => sum + ctx.objective.progress.averageQuality, 0) / Math.max(swarms.length, 1);\n  }\n\n  private calculateGlobalDefectRate(swarms: SwarmExecutionContext[]): number {\n    return 0.05; // Placeholder\n  }\n\n  private calculateGlobalReworkRate(swarms: SwarmExecutionContext[]): number {\n    return 0.1; // Placeholder\n  }\n\n  private calculateGlobalResourceUtilization(swarms: SwarmExecutionContext[]): Record<string, number> {\n    return {\n      cpu: 0.6,\n      memory: 0.7,\n      disk: 0.3,\n      network: 0.2,\n    };\n  }\n\n  private calculateGlobalCostEfficiency(swarms: SwarmExecutionContext[]): number {\n    return 0.8; // Placeholder\n  }\n\n  private calculateGlobalAgentUtilization(swarms: SwarmExecutionContext[]): number {\n    const totalAgents = swarms.reduce((sum, ctx) => sum + ctx.agents.size, 0);\n    const busyAgents = swarms.reduce((sum, ctx) => sum + ctx.objective.progress.busyAgents, 0);\n    return totalAgents > 0 ? busyAgents / totalAgents : 0;\n  }\n\n  private calculateGlobalScheduleVariance(swarms: SwarmExecutionContext[]): number {\n    return 0.1; // Placeholder\n  }\n\n  private calculateGlobalDeadlineAdherence(swarms: SwarmExecutionContext[]): number {\n    return 0.9; // Placeholder\n  }\n\n  private initializeProgress(): SwarmProgress {\n    return {\n      totalTasks: 0,\n      completedTasks: 0,\n      failedTasks: 0,\n      runningTasks: 0,\n      estimatedCompletion: new Date(),\n      timeRemaining: 0,\n      percentComplete: 0,\n      averageQuality: 0,\n      passedReviews: 0,\n      passedTests: 0,\n      resourceUtilization: {},\n      costSpent: 0,\n      activeAgents: 0,\n      idleAgents: 0,\n      busyAgents: 0,\n    };\n  }\n\n  private initializeMetrics(): SwarmMetrics {\n    return {\n      throughput: 0,\n      latency: 0,\n      efficiency: 0,\n      reliability: 1,\n      averageQuality: 0,\n      defectRate: 0,\n      reworkRate: 0,\n      resourceUtilization: {},\n      costEfficiency: 1,\n      agentUtilization: 0,\n      agentSatisfaction: 0,\n      collaborationEffectiveness: 0,\n      scheduleVariance: 0,\n      deadlineAdherence: 1,\n    };\n  }\n\n  private createDefaultConfig(config: Partial<AdvancedSwarmConfig>): AdvancedSwarmConfig {\n    return {\n      name: 'Advanced Swarm',\n      description: 'Advanced swarm orchestration system',\n      version: '1.0.0',\n      mode: 'hybrid',\n      strategy: 'auto',\n      coordinationStrategy: {\n        name: 'adaptive',\n        description: 'Adaptive coordination strategy',\n        agentSelection: 'capability-based',\n        taskScheduling: 'priority',\n        loadBalancing: 'work-stealing',\n        faultTolerance: 'retry',\n        communication: 'event-driven',\n      },\n      maxAgents: 10,\n      maxTasks: 100,\n      maxDuration: 7200000, // 2 hours\n      taskTimeoutMinutes: 30,\n      resourceLimits: {\n        memory: 2048,\n        cpu: 4,\n        disk: 10240,\n        network: 1000,\n      },\n      qualityThreshold: 0.8,\n      reviewRequired: true,\n      testingRequired: true,\n      monitoring: {\n        metricsEnabled: true,\n        loggingEnabled: true,\n        tracingEnabled: true,\n        metricsInterval: 10000,\n        heartbeatInterval: 5000,\n        healthCheckInterval: 60000,\n        retentionPeriod: 86400000,\n        maxLogSize: 100 * 1024 * 1024,\n        maxMetricPoints: 10000,\n        alertingEnabled: true,\n        alertThresholds: {},\n        exportEnabled: false,\n        exportFormat: 'json',\n        exportDestination: '',\n      },\n      memory: {\n        namespace: 'swarm',\n        partitions: [],\n        permissions: {\n          read: 'swarm',\n          write: 'swarm',\n          delete: 'system',\n          share: 'team',\n        },\n        persistent: true,\n        backupEnabled: true,\n        distributed: false,\n        consistency: 'strong',\n        cacheEnabled: true,\n        compressionEnabled: false,\n      },\n      security: {\n        authenticationRequired: false,\n        authorizationRequired: false,\n        encryptionEnabled: false,\n        defaultPermissions: ['read', 'write'],\n        adminRoles: ['admin'],\n        auditEnabled: true,\n        auditLevel: 'info',\n        inputValidation: true,\n        outputSanitization: true,\n      },\n      performance: {\n        maxConcurrency: 10,\n        defaultTimeout: 300000,\n        cacheEnabled: true,\n        cacheSize: 1000,\n        cacheTtl: 3600,\n        optimizationEnabled: true,\n        adaptiveScheduling: true,\n        predictiveLoading: false,\n        resourcePooling: true,\n        connectionPooling: true,\n        memoryPooling: false,\n      },\n      maxRetries: 3,\n      autoScaling: true,\n      loadBalancing: true,\n      faultTolerance: true,\n      realTimeMonitoring: true,\n      maxThroughput: 100,\n      latencyTarget: 1000,\n      reliabilityTarget: 0.95,\n      mcpIntegration: true,\n      hiveIntegration: false,\n      claudeCodeIntegration: true,\n      neuralProcessing: false,\n      learningEnabled: false,\n      adaptiveScheduling: true,\n      ...config,\n    };\n  }\n\n  private setupEventHandlers(): void {\n    // Swarm lifecycle events\n    this.on('swarm:created', (data) => {\n      this.logger.info('Swarm lifecycle event: created', data);\n    });\n\n    this.on('swarm:started', (data) => {\n      this.logger.info('Swarm lifecycle event: started', data);\n    });\n\n    this.on('swarm:completed', (data) => {\n      this.logger.info('Swarm lifecycle event: completed', data);\n    });\n\n    this.on('swarm:failed', (data) => {\n      this.logger.error('Swarm lifecycle event: failed', data);\n    });\n\n    // Health monitoring events\n    this.on('health:warning', (data) => {\n      this.logger.warn('Health warning detected', data);\n    });\n\n    // Coordinator events\n    this.coordinator.on('objective:completed', (objective) => {\n      this.logger.info('Coordinator objective completed', { objectiveId: objective.id });\n    });\n\n    this.coordinator.on('task:completed', (data) => {\n      this.logger.info('Coordinator task completed', data);\n    });\n\n    this.coordinator.on('agent:registered', (agent) => {\n      this.logger.info('Coordinator agent registered', { agentId: agent.id });\n    });\n  }\n}\n\nexport default AdvancedSwarmOrchestrator;"],"names":["EventEmitter","performance","Logger","generateId","SwarmCoordinator","AdvancedTaskScheduler","SwarmMonitor","MemoryManager","TaskExecutor","AdvancedSwarmOrchestrator","logger","config","activeSwarms","Map","globalMetrics","coordinator","memoryManager","isRunning","healthCheckInterval","metricsCollectionInterval","createDefaultConfig","maxAgents","maxConcurrentTasks","taskTimeout","taskTimeoutMinutes","enableMonitoring","realTimeMonitoring","coordinationStrategy","name","backend","namespace","cacheSizeMB","syncOnExit","maxEntries","ttlMinutes","initializeMetrics","setupEventHandlers","initialize","warn","info","start","startHealthChecks","startMetricsCollection","emit","error","shutdown","clearInterval","shutdownPromises","Array","from","keys","map","swarmId","stopSwarm","Promise","allSettled","stop","createSwarm","objective","strategy","options","swarmObjective","id","description","mode","requirements","minAgents","agentTypes","getRequiredAgentTypes","estimatedDuration","maxDuration","qualityThreshold","reviewCoverage","testCoverage","reliabilityTarget","constraints","maxCost","resourceLimits","minQuality","requiredApprovals","allowedFailures","recoveryTime","milestones","tasks","dependencies","status","progress","initializeProgress","createdAt","Date","results","undefined","metrics","context","timestamp","now","agents","scheduler","maxConcurrency","enablePrioritization","enableLoadBalancing","loadBalancing","enableWorkStealing","schedulingAlgorithm","monitor","updateInterval","enableAlerts","enableHistory","metricsRetention","taskExecutor","timeoutMs","retryAttempts","maxRetries","enableMetrics","captureOutput","streamOutput","startTime","set","store","agentId","type","content","JSON","stringify","metadata","agentCount","taskCount","startSwarm","get","Error","startedAt","decomposeObjective","forEach","task","spawnRequiredAgents","agent","scheduleAndExecuteTasks","length","reason","endTime","values","terminateAgent","storeFinalResults","delete","getSwarmStatus","getAllSwarmStatuses","getOrchestratorMetrics","swarmMetrics","global","swarms","system","size","totalAgents","reduce","sum","ctx","totalTasks","uptime","timeOrigin","memoryUsage","process","heapUsed","cpuUsage","user","performHealthCheck","issues","push","test","swarmAge","getTime","healthy","duration","checkDuration","message","String","baseTaskId","createTaskDefinition","taskType","priority","sequence","getPriorityNumber","capabilities","tools","permissions","memoryRequired","depId","dependents","conflicts","timeoutAfter","input","instructions","updatedAt","attempts","statusHistory","requiredTypes","agentType","getAgentCapabilities","tasksCompleted","tasksFailed","totalDuration","lastActivity","registerAgent","scheduleTask","monitorSwarmExecution","monitorInterval","setInterval","updateSwarmProgress","isSwarmComplete","completeSwarm","shouldFailSwarm","failSwarm","completedTasks","filter","t","failedTasks","runningTasks","percentComplete","estimatedCompletion","estimateCompletion","timeRemaining","calculateTimeRemaining","averageQuality","calculateAverageQuality","passedReviews","passedTests","resourceUtilization","costSpent","activeAgents","a","idleAgents","busyAgents","every","deadline","completedAt","collectSwarmResults","objectivesMet","outputs","artifacts","reports","overallQuality","qualityByTask","totalExecutionTime","resourcesUsed","efficiency","objectivesFailed","improvements","nextActions","capabilityMap","researcher","coder","analyst","architect","tester","reviewer","optimizer","documenter","specialist","elapsed","totalEstimated","Math","max","health","updateGlobalMetrics","throughput","calculateGlobalThroughput","latency","calculateGlobalLatency","calculateGlobalEfficiency","reliability","calculateGlobalReliability","calculateGlobalQuality","defectRate","calculateGlobalDefectRate","reworkRate","calculateGlobalReworkRate","calculateGlobalResourceUtilization","costEfficiency","calculateGlobalCostEfficiency","agentUtilization","calculateGlobalAgentUtilization","agentSatisfaction","collaborationEffectiveness","scheduleVariance","calculateGlobalScheduleVariance","deadlineAdherence","calculateGlobalDeadlineAdherence","totalSwarms","successfulSwarms","cpu","memory","disk","network","version","agentSelection","taskScheduling","faultTolerance","communication","maxTasks","reviewRequired","testingRequired","monitoring","metricsEnabled","loggingEnabled","tracingEnabled","metricsInterval","heartbeatInterval","retentionPeriod","maxLogSize","maxMetricPoints","alertingEnabled","alertThresholds","exportEnabled","exportFormat","exportDestination","partitions","read","write","share","persistent","backupEnabled","distributed","consistency","cacheEnabled","compressionEnabled","security","authenticationRequired","authorizationRequired","encryptionEnabled","defaultPermissions","adminRoles","auditEnabled","auditLevel","inputValidation","outputSanitization","defaultTimeout","cacheSize","cacheTtl","optimizationEnabled","adaptiveScheduling","predictiveLoading","resourcePooling","connectionPooling","memoryPooling","autoScaling","maxThroughput","latencyTarget","mcpIntegration","hiveIntegration","claudeCodeIntegration","neuralProcessing","learningEnabled","on","data","objectiveId"],"mappings":"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"}