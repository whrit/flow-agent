{"version":3,"sources":["../../../src/sdk/sdk-config.ts"],"sourcesContent":["/**\n * Claude Agent SDK Configuration Adapter\n * Claude-Flow v2.5-alpha.130\n *\n * This module provides the configuration adapter for integrating\n * the Anthropic SDK as the foundation layer for Claude-Flow.\n */\n\nimport Anthropic from '@anthropic-ai/sdk';\n\nexport interface SDKConfiguration {\n  apiKey?: string;\n  baseURL?: string;\n  maxRetries?: number;\n  timeout?: number;\n  defaultHeaders?: Record<string, string>;\n\n  // Claude-Flow specific extensions\n  swarmMode?: boolean;\n  persistenceEnabled?: boolean;\n  checkpointInterval?: number;\n  memoryNamespace?: string;\n}\n\n/**\n * Claude-Flow SDK Adapter\n * Wraps the Anthropic SDK with Claude-Flow extensions\n */\nexport class ClaudeFlowSDKAdapter {\n  private sdk: Anthropic;\n  private config: SDKConfiguration;\n  private swarmMetadata: Map<string, Record<string, unknown>> = new Map();\n\n  constructor(config: SDKConfiguration = {}) {\n    this.config = {\n      apiKey: config.apiKey || process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY,\n      baseURL: config.baseURL,\n      maxRetries: config.maxRetries || 3,\n      timeout: config.timeout || 60000,\n      defaultHeaders: config.defaultHeaders || {},\n      swarmMode: config.swarmMode !== false,\n      persistenceEnabled: config.persistenceEnabled !== false,\n      checkpointInterval: config.checkpointInterval || 60000,\n      memoryNamespace: config.memoryNamespace || 'claude-flow'\n    };\n\n    // Initialize Anthropic SDK with configuration\n    this.sdk = new Anthropic({\n      apiKey: this.config.apiKey,\n      baseURL: this.config.baseURL,\n      maxRetries: this.config.maxRetries,\n      timeout: this.config.timeout,\n      defaultHeaders: this.config.defaultHeaders\n    });\n  }\n\n  /**\n   * Get the underlying Anthropic SDK instance\n   */\n  getSDK(): Anthropic {\n    return this.sdk;\n  }\n\n  /**\n   * Get the current configuration\n   */\n  getConfig(): SDKConfiguration {\n    return { ...this.config };\n  }\n\n  /**\n   * Create a message with automatic retry handling\n   */\n  async createMessage(params: Anthropic.MessageCreateParams): Promise<Anthropic.Message> {\n    try {\n      // SDK handles retry automatically based on configuration\n      const message = await this.sdk.messages.create(params);\n\n      // Store in swarm metadata if in swarm mode\n      if (this.config.swarmMode && message.id) {\n        this.swarmMetadata.set(message.id, {\n          timestamp: Date.now(),\n          model: params.model,\n          tokensUsed: message.usage\n        });\n      }\n\n      return message;\n    } catch (error) {\n      // Enhanced error handling for swarm mode\n      if (this.config.swarmMode) {\n        console.error('[SDK] Message creation failed in swarm mode:', error);\n        this.logSwarmError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Create a streaming message\n   */\n  async createStreamingMessage(\n    params: Anthropic.MessageCreateParams,\n    options?: { onChunk?: (chunk: any) => void }\n  ): Promise<Anthropic.Message> {\n    const stream = await this.sdk.messages.create({\n      ...params,\n      stream: true\n    });\n\n    let fullMessage: Partial<Anthropic.Message> = {};\n\n    for await (const chunk of stream) {\n      if (options?.onChunk) {\n        options.onChunk(chunk);\n      }\n\n      // Accumulate the message\n      if (chunk.type === 'message_start') {\n        fullMessage = chunk.message;\n      } else if (chunk.type === 'content_block_delta') {\n        // Handle content updates\n      } else if (chunk.type === 'message_delta') {\n        // Handle message updates\n        if (chunk.delta?.stop_reason) {\n          fullMessage.stop_reason = chunk.delta.stop_reason;\n        }\n      }\n    }\n\n    return fullMessage as Anthropic.Message;\n  }\n\n  /**\n   * Check if the SDK is properly configured\n   */\n  async validateConfiguration(): Promise<boolean> {\n    try {\n      // Test the configuration with a minimal request\n      await this.sdk.messages.create({\n        model: 'claude-3-haiku-20240307',\n        max_tokens: 1,\n        messages: [{ role: 'user', content: 'test' }]\n      });\n      return true;\n    } catch (error) {\n      if (error instanceof Anthropic.AuthenticationError) {\n        console.error('[SDK] Invalid API key');\n        return false;\n      }\n      if (error instanceof Anthropic.RateLimitError) {\n        console.warn('[SDK] Rate limit reached but configuration is valid');\n        return true;\n      }\n      console.error('[SDK] Configuration validation failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get swarm metadata for a message\n   */\n  getSwarmMetadata(messageId: string): Record<string, unknown> | undefined {\n    return this.swarmMetadata.get(messageId);\n  }\n\n  /**\n   * Clear swarm metadata\n   */\n  clearSwarmMetadata(): void {\n    this.swarmMetadata.clear();\n  }\n\n  /**\n   * Log error to swarm coordination system\n   */\n  private logSwarmError(error: unknown): void {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorStack = error instanceof Error ? error.stack : undefined;\n    this.swarmMetadata.set(`error-${Date.now()}`, {\n      timestamp: Date.now(),\n      error: errorMessage,\n      stack: errorStack\n    });\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): { totalTokens: number; messageCount: number } {\n    let totalTokens = 0;\n    let messageCount = 0;\n\n    this.swarmMetadata.forEach((metadata) => {\n      if (metadata.tokensUsed) {\n        totalTokens += metadata.tokensUsed.total_tokens || 0;\n        messageCount++;\n      }\n    });\n\n    return { totalTokens, messageCount };\n  }\n}\n\n// Export a singleton instance for convenience\nexport const defaultSDKAdapter = new ClaudeFlowSDKAdapter();"],"names":["Anthropic","ClaudeFlowSDKAdapter","sdk","config","swarmMetadata","Map","apiKey","process","env","ANTHROPIC_API_KEY","CLAUDE_API_KEY","baseURL","maxRetries","timeout","defaultHeaders","swarmMode","persistenceEnabled","checkpointInterval","memoryNamespace","getSDK","getConfig","createMessage","params","message","messages","create","id","set","timestamp","Date","now","model","tokensUsed","usage","error","console","logSwarmError","createStreamingMessage","options","stream","fullMessage","chunk","onChunk","type","delta","stop_reason","validateConfiguration","max_tokens","role","content","AuthenticationError","RateLimitError","warn","getSwarmMetadata","messageId","get","clearSwarmMetadata","clear","errorMessage","Error","String","errorStack","stack","undefined","getUsageStats","totalTokens","messageCount","forEach","metadata","total_tokens","defaultSDKAdapter"],"mappings":"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"}