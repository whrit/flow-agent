{"version":3,"sources":["../../../src/sdk/compatibility-layer.ts"],"sourcesContent":["/**\n * SDK Compatibility Layer\n * Claude-Flow v2.5-alpha.130\n *\n * Maintains backward compatibility while transitioning to SDK\n */\n\nimport { ClaudeFlowSDKAdapter } from './sdk-config.js';\nimport Anthropic from '@anthropic-ai/sdk';\n\n/**\n * Compatibility layer to maintain backward compatibility\n * while transitioning from custom implementations to SDK\n */\nexport class SDKCompatibilityLayer {\n  private adapter: ClaudeFlowSDKAdapter;\n  private legacyMode: boolean = false;\n  private deprecationWarnings: Set<string> = new Set();\n\n  constructor(adapter: ClaudeFlowSDKAdapter) {\n    this.adapter = adapter;\n  }\n\n  /**\n   * Enable legacy mode for full backward compatibility\n   */\n  enableLegacyMode(): void {\n    this.legacyMode = true;\n    console.warn('[Compatibility] Legacy mode enabled. Please migrate to SDK methods.');\n  }\n\n  /**\n   * Wrapper for legacy retry logic that delegates to SDK\n   */\n  async executeWithRetry<T>(\n    fn: () => Promise<T>,\n    options?: {\n      maxRetries?: number;\n      backoffMultiplier?: number;\n      initialDelay?: number;\n    }\n  ): Promise<T> {\n    this.logDeprecation('executeWithRetry', 'SDK handles retry automatically');\n\n    if (this.legacyMode) {\n      // Fallback to legacy implementation if needed\n      return this.legacyRetry(fn, options);\n    }\n\n    // Use SDK's built-in retry by wrapping in a message call\n    try {\n      return await fn();\n    } catch (error) {\n      // SDK will have already retried based on configuration\n      throw error;\n    }\n  }\n\n  /**\n   * Legacy calculateBackoff - now handled by SDK\n   */\n  calculateBackoff(attempt: number): number {\n    this.logDeprecation('calculateBackoff', 'SDK handles backoff automatically');\n\n    if (this.legacyMode) {\n      const baseDelay = 1000;\n      const jitter = Math.random() * 1000;\n      return Math.min(\n        baseDelay * Math.pow(2, attempt - 1) + jitter,\n        30000 // Max 30 seconds\n      );\n    }\n\n    // Return a dummy value since SDK handles this\n    return 0;\n  }\n\n  /**\n   * Legacy persistToDisk - now handled by SDK artifacts\n   */\n  async persistToDisk(key: string, value: unknown): Promise<void> {\n    this.logDeprecation('persistToDisk', 'Use SDK artifacts for persistence');\n\n    if (this.legacyMode) {\n      // Legacy file-based persistence\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const storagePath = '.claude-flow/storage';\n      await fs.mkdir(storagePath, { recursive: true });\n      await fs.writeFile(\n        path.join(storagePath, `${key}.json`),\n        JSON.stringify(value, null, 2)\n      );\n      return;\n    }\n\n    // In SDK mode, this is a no-op as persistence is automatic\n    console.log(`[Compatibility] Persistence for '${key}' is handled automatically by SDK`);\n  }\n\n  /**\n   * Legacy executeValidations - now handled by SDK\n   */\n  async executeValidations(checkpointId: string): Promise<boolean> {\n    this.logDeprecation('executeValidations', 'SDK handles validations automatically');\n\n    if (this.legacyMode) {\n      // Legacy validation logic\n      console.log(`[Compatibility] Running legacy validations for checkpoint ${checkpointId}`);\n      return true;\n    }\n\n    // SDK handles this automatically\n    return true;\n  }\n\n  /**\n   * Map old ClaudeRequest format to SDK format\n   */\n  mapLegacyRequest(legacyRequest: Record<string, unknown>): Anthropic.MessageCreateParams {\n    return {\n      model: this.mapLegacyModel(legacyRequest.model as string),\n      messages: (legacyRequest.messages as Anthropic.MessageParam[]) || [],\n      max_tokens: (legacyRequest.max_tokens as number) || 1024,\n      temperature: legacyRequest.temperature as number | undefined,\n      top_p: legacyRequest.top_p as number | undefined,\n      top_k: legacyRequest.top_k as number | undefined,\n      stop_sequences: legacyRequest.stop_sequences as string[] | undefined,\n      system: legacyRequest.system as string | undefined,\n      metadata: legacyRequest.metadata as Anthropic.Metadata | undefined\n    };\n  }\n\n  /**\n   * Map old model names to SDK model names\n   */\n  private mapLegacyModel(model: string): Anthropic.Model {\n    const modelMap: Record<string, Anthropic.Model> = {\n      'claude-2.1': 'claude-2.1',\n      'claude-2.0': 'claude-2.1', // Map to closest available\n      'claude-instant-1.2': 'claude-instant-1.2',\n      'claude-3-opus-20240229': 'claude-3-opus-20240229',\n      'claude-3-sonnet-20240229': 'claude-3-sonnet-20240229',\n      'claude-3-haiku-20240307': 'claude-3-haiku-20240307'\n    };\n\n    return modelMap[model] || 'claude-3-sonnet-20240229';\n  }\n\n  /**\n   * Map SDK response to legacy format\n   */\n  mapSDKResponse(sdkResponse: Anthropic.Message): Record<string, unknown> {\n    return {\n      id: sdkResponse.id,\n      type: 'message',\n      role: sdkResponse.role,\n      content: sdkResponse.content,\n      model: sdkResponse.model,\n      stop_reason: sdkResponse.stop_reason,\n      stop_sequence: sdkResponse.stop_sequence,\n      usage: sdkResponse.usage\n    };\n  }\n\n  /**\n   * Legacy retry implementation for fallback\n   */\n  private async legacyRetry<T>(\n    fn: () => Promise<T>,\n    options?: {\n      maxRetries?: number;\n      backoffMultiplier?: number;\n      initialDelay?: number;\n    }\n  ): Promise<T> {\n    const maxRetries = options?.maxRetries || 3;\n    const backoffMultiplier = options?.backoffMultiplier || 2;\n    const initialDelay = options?.initialDelay || 1000;\n\n    let lastError: any;\n\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        if (i < maxRetries - 1) {\n          const delay = initialDelay * Math.pow(backoffMultiplier, i);\n          await this.sleep(delay);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Helper sleep function\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Log deprecation warning once per method\n   */\n  private logDeprecation(method: string, suggestion: string): void {\n    if (!this.deprecationWarnings.has(method)) {\n      console.warn(\n        `[Deprecation] '${method}' is deprecated. ${suggestion}. ` +\n        `This will be removed in v3.0.0.`\n      );\n      this.deprecationWarnings.add(method);\n    }\n  }\n\n  /**\n   * Get deprecation report\n   */\n  getDeprecationReport(): string[] {\n    return Array.from(this.deprecationWarnings);\n  }\n\n  /**\n   * Check if running in legacy mode\n   */\n  isLegacyMode(): boolean {\n    return this.legacyMode;\n  }\n}\n\n// Export singleton for convenience\nexport const createCompatibilityLayer = (\n  adapter: ClaudeFlowSDKAdapter\n): SDKCompatibilityLayer => {\n  return new SDKCompatibilityLayer(adapter);\n};"],"names":["SDKCompatibilityLayer","adapter","legacyMode","deprecationWarnings","Set","enableLegacyMode","console","warn","executeWithRetry","fn","options","logDeprecation","legacyRetry","error","calculateBackoff","attempt","baseDelay","jitter","Math","random","min","pow","persistToDisk","key","value","fs","path","storagePath","mkdir","recursive","writeFile","join","JSON","stringify","log","executeValidations","checkpointId","mapLegacyRequest","legacyRequest","model","mapLegacyModel","messages","max_tokens","temperature","top_p","top_k","stop_sequences","system","metadata","modelMap","mapSDKResponse","sdkResponse","id","type","role","content","stop_reason","stop_sequence","usage","maxRetries","backoffMultiplier","initialDelay","lastError","i","delay","sleep","ms","Promise","resolve","setTimeout","method","suggestion","has","add","getDeprecationReport","Array","from","isLegacyMode","createCompatibilityLayer"],"mappings":"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"}