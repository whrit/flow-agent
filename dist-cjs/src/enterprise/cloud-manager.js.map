{"version":3,"sources":["../../../src/enterprise/cloud-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { writeFile, readFile, mkdir, readdir } from 'fs/promises';\nimport { join } from 'path';\nimport { Logger } from '../core/logger.js';\nimport { ConfigManager } from '../core/config.js';\n\nexport interface CloudProvider {\n  id: string;\n  name: string;\n  type: 'aws' | 'gcp' | 'azure' | 'kubernetes' | 'docker' | 'digitalocean' | 'linode' | 'custom';\n  credentials: {\n    accessKey?: string;\n    secretKey?: string;\n    projectId?: string;\n    subscriptionId?: string;\n    token?: string;\n    keyFile?: string;\n    customConfig?: Record<string, any>;\n  };\n  configuration: {\n    defaultRegion: string;\n    availableRegions: string[];\n    services: string[];\n    endpoints: Record<string, string>;\n    features: string[];\n  };\n  status: 'active' | 'inactive' | 'error' | 'maintenance';\n  quotas: {\n    computeInstances: number;\n    storage: number;\n    bandwidth: number;\n    requests: number;\n  };\n  pricing: {\n    currency: string;\n    computePerHour: number;\n    storagePerGB: number;\n    bandwidthPerGB: number;\n    requestsPer1000: number;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CloudResource {\n  id: string;\n  name: string;\n  type: 'compute' | 'storage' | 'network' | 'database' | 'cache' | 'queue' | 'function' | 'custom';\n  providerId: string;\n  region: string;\n  status: 'creating' | 'running' | 'stopped' | 'error' | 'terminated';\n  configuration: {\n    size: string;\n    image?: string;\n    ports?: number[];\n    environment?: Record<string, string>;\n    volumes?: VolumeMount[];\n    networks?: string[];\n    tags: Record<string, string>;\n  };\n  monitoring: {\n    enabled: boolean;\n    metrics: CloudMetric[];\n    alerts: CloudAlert[];\n    healthChecks: HealthCheck[];\n  };\n  security: {\n    encryption: boolean;\n    backups: boolean;\n    accessControl: AccessControl[];\n    vulnerabilityScanning: boolean;\n    complianceFrameworks: string[];\n  };\n  costs: {\n    hourlyRate: number;\n    monthlyEstimate: number;\n    actualSpend: number;\n    lastBillingDate: Date;\n    costBreakdown: Record<string, number>;\n  };\n  performance: {\n    cpu: number;\n    memory: number;\n    storage: number;\n    network: number;\n    uptime: number;\n    availability: number;\n  };\n  metadata: {\n    projectId?: string;\n    environment: string;\n    owner: string;\n    purpose: string;\n    lifecycle: 'temporary' | 'permanent' | 'scheduled';\n    expiryDate?: Date;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  auditLog: CloudAuditEntry[];\n}\n\nexport interface VolumeMount {\n  source: string;\n  destination: string;\n  type: 'bind' | 'volume' | 'tmpfs';\n  readOnly: boolean;\n  size?: string;\n}\n\nexport interface CloudMetric {\n  name: string;\n  type: 'counter' | 'gauge' | 'histogram';\n  value: number;\n  unit: string;\n  timestamp: Date;\n  tags: Record<string, string>;\n}\n\nexport interface CloudAlert {\n  id: string;\n  name: string;\n  condition: string;\n  threshold: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  enabled: boolean;\n  notifications: string[];\n  lastTriggered?: Date;\n}\n\nexport interface HealthCheck {\n  id: string;\n  name: string;\n  type: 'http' | 'tcp' | 'command';\n  configuration: {\n    url?: string;\n    port?: number;\n    command?: string;\n    expectedStatus?: number;\n    timeout: number;\n    interval: number;\n    retries: number;\n  };\n  status: 'healthy' | 'unhealthy' | 'unknown';\n  lastCheck: Date;\n  history: HealthCheckResult[];\n}\n\nexport interface HealthCheckResult {\n  timestamp: Date;\n  status: 'healthy' | 'unhealthy';\n  responseTime: number;\n  details?: string;\n}\n\nexport interface AccessControl {\n  type: 'ip' | 'role' | 'user' | 'group';\n  rule: string;\n  permissions: string[];\n  enabled: boolean;\n}\n\nexport interface CloudAuditEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  resource: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface CloudInfrastructure {\n  id: string;\n  name: string;\n  description: string;\n  projectId: string;\n  environment: string;\n  resources: string[];\n  topology: {\n    networks: NetworkTopology[];\n    loadBalancers: LoadBalancer[];\n    databases: Database[];\n    caches: Cache[];\n    queues: Queue[];\n  };\n  deployment: {\n    strategy: 'manual' | 'terraform' | 'cloudformation' | 'kubernetes' | 'custom';\n    template: string;\n    parameters: Record<string, any>;\n    lastDeployment?: Date;\n    deploymentHistory: DeploymentHistory[];\n  };\n  monitoring: {\n    dashboard: string;\n    alerts: string[];\n    sla: {\n      availability: number;\n      responseTime: number;\n      errorRate: number;\n    };\n  };\n  costs: {\n    budgetLimit: number;\n    currentSpend: number;\n    projectedSpend: number;\n    costAlerts: CostAlert[];\n    optimization: CostOptimization[];\n  };\n  compliance: {\n    frameworks: string[];\n    requirements: ComplianceRequirement[];\n    lastAudit: Date;\n    nextAudit: Date;\n  };\n  backup: {\n    enabled: boolean;\n    schedule: string;\n    retention: string;\n    lastBackup?: Date;\n    backupLocations: string[];\n  };\n  disaster_recovery: {\n    enabled: boolean;\n    rto: number; // Recovery Time Objective in minutes\n    rpo: number; // Recovery Point Objective in minutes\n    strategy: 'active-passive' | 'active-active' | 'pilot-light' | 'warm-standby';\n    testFrequency: string;\n    lastTest?: Date;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NetworkTopology {\n  id: string;\n  name: string;\n  type: 'vpc' | 'subnet' | 'security-group' | 'nat-gateway' | 'internet-gateway';\n  configuration: Record<string, any>;\n  connections: string[];\n}\n\nexport interface LoadBalancer {\n  id: string;\n  name: string;\n  type: 'application' | 'network' | 'classic';\n  configuration: {\n    algorithm: string;\n    healthCheck: string;\n    sslTermination: boolean;\n    targets: string[];\n  };\n}\n\nexport interface Database {\n  id: string;\n  name: string;\n  engine: string;\n  version: string;\n  configuration: {\n    instanceClass: string;\n    storage: number;\n    backup: boolean;\n    multiAZ: boolean;\n    encryption: boolean;\n  };\n}\n\nexport interface Cache {\n  id: string;\n  name: string;\n  engine: string;\n  configuration: {\n    nodeType: string;\n    numNodes: number;\n    evictionPolicy: string;\n  };\n}\n\nexport interface Queue {\n  id: string;\n  name: string;\n  type: 'sqs' | 'rabbitmq' | 'kafka' | 'redis';\n  configuration: {\n    visibility: number;\n    retention: number;\n    dlq: boolean;\n  };\n}\n\nexport interface DeploymentHistory {\n  id: string;\n  timestamp: Date;\n  version: string;\n  changes: string[];\n  status: 'success' | 'failed' | 'partial';\n  duration: number;\n  deployedBy: string;\n}\n\nexport interface CostAlert {\n  id: string;\n  name: string;\n  threshold: number;\n  type: 'absolute' | 'percentage';\n  frequency: 'daily' | 'weekly' | 'monthly';\n  notifications: string[];\n  enabled: boolean;\n}\n\nexport interface CostOptimization {\n  id: string;\n  type:\n    | 'rightsizing'\n    | 'scheduling'\n    | 'reserved-instances'\n    | 'spot-instances'\n    | 'storage-optimization';\n  description: string;\n  potentialSavings: number;\n  implementation: string;\n  effort: 'low' | 'medium' | 'high';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  status: 'identified' | 'planned' | 'implemented' | 'monitoring';\n}\n\nexport interface ComplianceRequirement {\n  id: string;\n  framework: string;\n  requirement: string;\n  status: 'compliant' | 'non-compliant' | 'pending';\n  evidence: string[];\n  remediation?: string;\n  dueDate?: Date;\n}\n\nexport interface CloudMetrics {\n  providers: {\n    total: number;\n    active: number;\n    inactive: number;\n    errors: number;\n  };\n  resources: {\n    total: number;\n    running: number;\n    stopped: number;\n    errors: number;\n    byType: Record<string, number>;\n    byProvider: Record<string, number>;\n    byEnvironment: Record<string, number>;\n  };\n  costs: {\n    totalSpend: number;\n    monthlySpend: number;\n    projectedSpend: number;\n    topSpenders: { resourceId: string; cost: number }[];\n    costByProvider: Record<string, number>;\n    costByEnvironment: Record<string, number>;\n    optimization: {\n      potentialSavings: number;\n      implementedSavings: number;\n      opportunities: number;\n    };\n  };\n  performance: {\n    averageUptime: number;\n    averageResponseTime: number;\n    errorRate: number;\n    availability: number;\n  };\n  security: {\n    vulnerabilities: {\n      critical: number;\n      high: number;\n      medium: number;\n      low: number;\n    };\n    compliance: {\n      compliant: number;\n      nonCompliant: number;\n      pending: number;\n    };\n    encryptionCoverage: number;\n    backupCoverage: number;\n  };\n}\n\nexport class CloudManager extends EventEmitter {\n  private providers: Map<string, CloudProvider> = new Map();\n  private resources: Map<string, CloudResource> = new Map();\n  private infrastructures: Map<string, CloudInfrastructure> = new Map();\n  private cloudPath: string;\n  private logger: Logger;\n  private config: ConfigManager;\n\n  constructor(cloudPath: string = './cloud', logger?: Logger, config?: ConfigManager) {\n    super();\n    this.cloudPath = cloudPath;\n    this.logger = logger || new Logger({ level: 'info', format: 'text', destination: 'console' });\n    this.config = config || ConfigManager.getInstance();\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.cloudPath, { recursive: true });\n      await mkdir(join(this.cloudPath, 'providers'), { recursive: true });\n      await mkdir(join(this.cloudPath, 'resources'), { recursive: true });\n      await mkdir(join(this.cloudPath, 'infrastructures'), { recursive: true });\n      await mkdir(join(this.cloudPath, 'templates'), { recursive: true });\n\n      await this.loadConfigurations();\n      await this.initializeDefaultProviders();\n\n      this.logger.info('Cloud Manager initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Cloud Manager', { error });\n      throw error;\n    }\n  }\n\n  async addProvider(providerData: Partial<CloudProvider>): Promise<CloudProvider> {\n    const provider: CloudProvider = {\n      id: providerData.id || `provider-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: providerData.name || 'Unnamed Provider',\n      type: providerData.type || 'custom',\n      credentials: providerData.credentials || {},\n      configuration: {\n        defaultRegion: 'us-east-1',\n        availableRegions: ['us-east-1', 'us-west-2', 'eu-west-1'],\n        services: [],\n        endpoints: {},\n        features: [],\n        ...providerData.configuration,\n      },\n      status: 'inactive',\n      quotas: {\n        computeInstances: 20,\n        storage: 1000,\n        bandwidth: 1000,\n        requests: 1000000,\n        ...providerData.quotas,\n      },\n      pricing: {\n        currency: 'USD',\n        computePerHour: 0.1,\n        storagePerGB: 0.023,\n        bandwidthPerGB: 0.09,\n        requestsPer1000: 0.0004,\n        ...providerData.pricing,\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Validate credentials\n    try {\n      await this.validateProviderCredentials(provider);\n      provider.status = 'active';\n    } catch (error) {\n      provider.status = 'error';\n      this.logger.warn(`Provider credentials validation failed: ${provider.name}`, { error });\n    }\n\n    this.providers.set(provider.id, provider);\n    await this.saveProvider(provider);\n\n    this.emit('provider:added', provider);\n    this.logger.info(`Cloud provider added: ${provider.name} (${provider.id})`);\n\n    return provider;\n  }\n\n  async createResource(resourceData: {\n    name: string;\n    type: CloudResource['type'];\n    providerId: string;\n    region: string;\n    configuration: Partial<CloudResource['configuration']>;\n    metadata: Partial<CloudResource['metadata']>;\n  }): Promise<CloudResource> {\n    const provider = this.providers.get(resourceData.providerId);\n    if (!provider) {\n      throw new Error(`Provider not found: ${resourceData.providerId}`);\n    }\n\n    if (provider.status !== 'active') {\n      throw new Error(`Provider is not active: ${provider.name}`);\n    }\n\n    const resource: CloudResource = {\n      id: `resource-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: resourceData.name,\n      type: resourceData.type,\n      providerId: resourceData.providerId,\n      region: resourceData.region,\n      status: 'creating',\n      configuration: {\n        size: 'small',\n        ports: [],\n        environment: {},\n        volumes: [],\n        networks: [],\n        tags: {},\n        ...resourceData.configuration,\n      },\n      monitoring: {\n        enabled: true,\n        metrics: [],\n        alerts: [],\n        healthChecks: [],\n      },\n      security: {\n        encryption: true,\n        backups: true,\n        accessControl: [],\n        vulnerabilityScanning: true,\n        complianceFrameworks: [],\n      },\n      costs: {\n        hourlyRate: this.calculateResourceCost(\n          provider,\n          resourceData.type,\n          resourceData.configuration.size || 'small',\n        ),\n        monthlyEstimate: 0,\n        actualSpend: 0,\n        lastBillingDate: new Date(),\n        costBreakdown: {},\n      },\n      performance: {\n        cpu: 0,\n        memory: 0,\n        storage: 0,\n        network: 0,\n        uptime: 100,\n        availability: 100,\n      },\n      metadata: {\n        environment: 'development',\n        owner: 'system',\n        purpose: 'general',\n        lifecycle: 'permanent',\n        ...resourceData.metadata,\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      auditLog: [],\n    };\n\n    // Calculate monthly estimate\n    resource.costs.monthlyEstimate = resource.costs.hourlyRate * 24 * 30;\n\n    this.addAuditEntry(resource, resource.metadata.owner, 'resource_created', 'resource', {\n      resourceId: resource.id,\n      resourceName: resource.name,\n      providerId: resourceData.providerId,\n    });\n\n    this.resources.set(resource.id, resource);\n    await this.saveResource(resource);\n\n    // Start resource creation process\n    await this.provisionResource(resource);\n\n    this.emit('resource:created', resource);\n    this.logger.info(`Cloud resource created: ${resource.name} (${resource.id})`);\n\n    return resource;\n  }\n\n  async createInfrastructure(infrastructureData: {\n    name: string;\n    description: string;\n    projectId: string;\n    environment: string;\n    template: string;\n    parameters: Record<string, any>;\n  }): Promise<CloudInfrastructure> {\n    const infrastructure: CloudInfrastructure = {\n      id: `infra-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: infrastructureData.name,\n      description: infrastructureData.description,\n      projectId: infrastructureData.projectId,\n      environment: infrastructureData.environment,\n      resources: [],\n      topology: {\n        networks: [],\n        loadBalancers: [],\n        databases: [],\n        caches: [],\n        queues: [],\n      },\n      deployment: {\n        strategy: 'terraform',\n        template: infrastructureData.template,\n        parameters: infrastructureData.parameters,\n        deploymentHistory: [],\n      },\n      monitoring: {\n        dashboard: '',\n        alerts: [],\n        sla: {\n          availability: 99.9,\n          responseTime: 200,\n          errorRate: 0.1,\n        },\n      },\n      costs: {\n        budgetLimit: 1000,\n        currentSpend: 0,\n        projectedSpend: 0,\n        costAlerts: [],\n        optimization: [],\n      },\n      compliance: {\n        frameworks: [],\n        requirements: [],\n        lastAudit: new Date(),\n        nextAudit: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n      },\n      backup: {\n        enabled: true,\n        schedule: '0 2 * * *', // Daily at 2 AM\n        retention: '30d',\n        backupLocations: [],\n      },\n      disaster_recovery: {\n        enabled: false,\n        rto: 60, // 1 hour\n        rpo: 15, // 15 minutes\n        strategy: 'active-passive',\n        testFrequency: 'quarterly',\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.infrastructures.set(infrastructure.id, infrastructure);\n    await this.saveInfrastructure(infrastructure);\n\n    this.emit('infrastructure:created', infrastructure);\n    this.logger.info(`Infrastructure created: ${infrastructure.name} (${infrastructure.id})`);\n\n    return infrastructure;\n  }\n\n  async deployInfrastructure(infrastructureId: string, userId: string = 'system'): Promise<void> {\n    const infrastructure = this.infrastructures.get(infrastructureId);\n    if (!infrastructure) {\n      throw new Error(`Infrastructure not found: ${infrastructureId}`);\n    }\n\n    const deploymentId = `deploy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const startTime = new Date();\n\n    try {\n      this.logger.info(`Starting infrastructure deployment: ${infrastructure.name}`);\n      this.emit('infrastructure:deployment_started', { infrastructure, deploymentId });\n\n      // Execute deployment based on strategy\n      await this.executeInfrastructureDeployment(infrastructure);\n\n      const endTime = new Date();\n      const duration = endTime.getTime() - startTime.getTime();\n\n      const deployment: DeploymentHistory = {\n        id: deploymentId,\n        timestamp: startTime,\n        version: `v${Date.now()}`,\n        changes: ['Initial deployment'],\n        status: 'success',\n        duration,\n        deployedBy: userId,\n      };\n\n      infrastructure.deployment.deploymentHistory.push(deployment);\n      infrastructure.deployment.lastDeployment = startTime;\n      infrastructure.updatedAt = new Date();\n\n      await this.saveInfrastructure(infrastructure);\n\n      this.emit('infrastructure:deployment_completed', { infrastructure, deployment });\n      this.logger.info(\n        `Infrastructure deployment completed: ${infrastructure.name} in ${duration}ms`,\n      );\n    } catch (error) {\n      const endTime = new Date();\n      const duration = endTime.getTime() - startTime.getTime();\n\n      const deployment: DeploymentHistory = {\n        id: deploymentId,\n        timestamp: startTime,\n        version: `v${Date.now()}`,\n        changes: ['Failed deployment'],\n        status: 'failed',\n        duration,\n        deployedBy: userId,\n      };\n\n      infrastructure.deployment.deploymentHistory.push(deployment);\n      infrastructure.updatedAt = new Date();\n\n      await this.saveInfrastructure(infrastructure);\n\n      this.emit('infrastructure:deployment_failed', { infrastructure, deployment, error });\n      this.logger.error(`Infrastructure deployment failed: ${infrastructure.name}`, { error });\n\n      throw error;\n    }\n  }\n\n  async optimizeCosts(filters?: {\n    providerId?: string;\n    environment?: string;\n    resourceType?: string;\n  }): Promise<CostOptimization[]> {\n    let resources = Array.from(this.resources.values());\n\n    // Apply filters\n    if (filters) {\n      if (filters.providerId) {\n        resources = resources.filter((r) => r.providerId === filters.providerId);\n      }\n      if (filters.environment) {\n        resources = resources.filter((r) => r.metadata.environment === filters.environment);\n      }\n      if (filters.resourceType) {\n        resources = resources.filter((r) => r.type === filters.resourceType);\n      }\n    }\n\n    const optimizations: CostOptimization[] = [];\n\n    for (const resource of resources) {\n      // Rightsizing opportunities\n      if (resource.performance.cpu < 20 && resource.performance.memory < 30) {\n        optimizations.push({\n          id: `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          type: 'rightsizing',\n          description: `Resource ${resource.name} is underutilized (CPU: ${resource.performance.cpu}%, Memory: ${resource.performance.memory}%). Consider downsizing.`,\n          potentialSavings: resource.costs.monthlyEstimate * 0.3,\n          implementation: 'Downsize instance to smaller type',\n          effort: 'low',\n          priority: 'medium',\n          status: 'identified',\n        });\n      }\n\n      // Scheduling opportunities for non-production\n      if (resource.metadata.environment !== 'production' && resource.status === 'running') {\n        optimizations.push({\n          id: `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          type: 'scheduling',\n          description: `Resource ${resource.name} in ${resource.metadata.environment} environment could be scheduled to run only during business hours.`,\n          potentialSavings: resource.costs.monthlyEstimate * 0.6,\n          implementation: 'Implement auto-scaling schedule (8 AM - 6 PM weekdays)',\n          effort: 'medium',\n          priority: 'high',\n          status: 'identified',\n        });\n      }\n\n      // Storage optimization\n      if (resource.type === 'storage' && resource.performance.storage < 50) {\n        optimizations.push({\n          id: `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          type: 'storage-optimization',\n          description: `Storage resource ${resource.name} is only ${resource.performance.storage}% utilized. Consider reducing allocated storage.`,\n          potentialSavings: resource.costs.monthlyEstimate * 0.25,\n          implementation: 'Reduce storage allocation and implement lifecycle policies',\n          effort: 'low',\n          priority: 'medium',\n          status: 'identified',\n        });\n      }\n    }\n\n    // Sort by potential savings\n    optimizations.sort((a, b) => b.potentialSavings - a.potentialSavings);\n\n    this.logger.info(\n      `Cost optimization analysis completed: ${optimizations.length} opportunities identified`,\n    );\n    this.emit('cost_optimization:analyzed', { optimizations, resourceCount: resources.length });\n\n    return optimizations;\n  }\n\n  async getCloudMetrics(filters?: {\n    providerId?: string;\n    environment?: string;\n    timeRange?: { start: Date; end: Date };\n  }): Promise<CloudMetrics> {\n    let resources = Array.from(this.resources.values());\n    let providers = Array.from(this.providers.values());\n\n    // Apply filters\n    if (filters) {\n      if (filters.providerId) {\n        resources = resources.filter((r) => r.providerId === filters.providerId);\n        providers = providers.filter((p) => p.id === filters.providerId);\n      }\n      if (filters.environment) {\n        resources = resources.filter((r) => r.metadata.environment === filters.environment);\n      }\n      if (filters.timeRange) {\n        resources = resources.filter(\n          (r) => r.createdAt >= filters.timeRange!.start && r.createdAt <= filters.timeRange!.end,\n        );\n      }\n    }\n\n    // Provider metrics\n    const providerMetrics = {\n      total: providers.length,\n      active: providers.filter((p) => p.status === 'active').length,\n      inactive: providers.filter((p) => p.status === 'inactive').length,\n      errors: providers.filter((p) => p.status === 'error').length,\n    };\n\n    // Resource metrics\n    const resourcesByType: Record<string, number> = {};\n    const resourcesByProvider: Record<string, number> = {};\n    const resourcesByEnvironment: Record<string, number> = {};\n\n    for (const resource of resources) {\n      resourcesByType[resource.type] = (resourcesByType[resource.type] || 0) + 1;\n      resourcesByProvider[resource.providerId] =\n        (resourcesByProvider[resource.providerId] || 0) + 1;\n      resourcesByEnvironment[resource.metadata.environment] =\n        (resourcesByEnvironment[resource.metadata.environment] || 0) + 1;\n    }\n\n    const resourceMetrics = {\n      total: resources.length,\n      running: resources.filter((r) => r.status === 'running').length,\n      stopped: resources.filter((r) => r.status === 'stopped').length,\n      errors: resources.filter((r) => r.status === 'error').length,\n      byType: resourcesByType,\n      byProvider: resourcesByProvider,\n      byEnvironment: resourcesByEnvironment,\n    };\n\n    // Cost metrics\n    const totalSpend = resources.reduce((sum, r) => sum + r.costs.actualSpend, 0);\n    const monthlySpend = resources.reduce((sum, r) => sum + r.costs.monthlyEstimate, 0);\n    const projectedSpend = monthlySpend * 12;\n\n    const topSpenders = resources\n      .map((r) => ({ resourceId: r.id, cost: r.costs.actualSpend }))\n      .sort((a, b) => b.cost - a.cost)\n      .slice(0, 10);\n\n    const costByProvider: Record<string, number> = {};\n    const costByEnvironment: Record<string, number> = {};\n\n    for (const resource of resources) {\n      costByProvider[resource.providerId] =\n        (costByProvider[resource.providerId] || 0) + resource.costs.actualSpend;\n      costByEnvironment[resource.metadata.environment] =\n        (costByEnvironment[resource.metadata.environment] || 0) + resource.costs.actualSpend;\n    }\n\n    const costMetrics = {\n      totalSpend,\n      monthlySpend,\n      projectedSpend,\n      topSpenders,\n      costByProvider,\n      costByEnvironment,\n      optimization: {\n        potentialSavings: 0,\n        implementedSavings: 0,\n        opportunities: 0,\n      },\n    };\n\n    // Performance metrics\n    const performanceMetrics = {\n      averageUptime:\n        resources.length > 0\n          ? resources.reduce((sum, r) => sum + r.performance.uptime, 0) / resources.length\n          : 0,\n      averageResponseTime: 0, // Would be calculated from actual metrics\n      errorRate: 0, // Would be calculated from actual metrics\n      availability:\n        resources.length > 0\n          ? resources.reduce((sum, r) => sum + r.performance.availability, 0) / resources.length\n          : 0,\n    };\n\n    // Security metrics\n    const encryptedResources = resources.filter((r) => r.security.encryption).length;\n    const backedUpResources = resources.filter((r) => r.security.backups).length;\n\n    const securityMetrics = {\n      vulnerabilities: {\n        critical: 0,\n        high: 0,\n        medium: 0,\n        low: 0,\n      },\n      compliance: {\n        compliant: 0,\n        nonCompliant: 0,\n        pending: 0,\n      },\n      encryptionCoverage: resources.length > 0 ? (encryptedResources / resources.length) * 100 : 0,\n      backupCoverage: resources.length > 0 ? (backedUpResources / resources.length) * 100 : 0,\n    };\n\n    return {\n      providers: providerMetrics,\n      resources: resourceMetrics,\n      costs: costMetrics,\n      performance: performanceMetrics,\n      security: securityMetrics,\n    };\n  }\n\n  async scaleResource(\n    resourceId: string,\n    scalingConfig: {\n      size?: string;\n      replicas?: number;\n      autoScaling?: {\n        enabled: boolean;\n        minReplicas: number;\n        maxReplicas: number;\n        targetCPU: number;\n        targetMemory: number;\n      };\n    },\n    userId: string = 'system',\n  ): Promise<void> {\n    const resource = this.resources.get(resourceId);\n    if (!resource) {\n      throw new Error(`Resource not found: ${resourceId}`);\n    }\n\n    const oldConfiguration = { ...resource.configuration };\n\n    if (scalingConfig.size) {\n      resource.configuration.size = scalingConfig.size;\n\n      // Update cost calculation\n      const provider = this.providers.get(resource.providerId);\n      if (provider) {\n        resource.costs.hourlyRate = this.calculateResourceCost(\n          provider,\n          resource.type,\n          scalingConfig.size,\n        );\n        resource.costs.monthlyEstimate = resource.costs.hourlyRate * 24 * 30;\n      }\n    }\n\n    if (scalingConfig.replicas !== undefined) {\n      resource.configuration.tags.replicas = scalingConfig.replicas.toString();\n    }\n\n    if (scalingConfig.autoScaling) {\n      resource.configuration.tags.autoScaling = JSON.stringify(scalingConfig.autoScaling);\n    }\n\n    resource.updatedAt = new Date();\n\n    this.addAuditEntry(resource, userId, 'resource_scaled', 'resource', {\n      resourceId,\n      oldConfiguration,\n      newConfiguration: resource.configuration,\n      scalingConfig,\n    });\n\n    await this.saveResource(resource);\n\n    this.emit('resource:scaled', { resource, scalingConfig });\n    this.logger.info(`Resource scaled: ${resource.name} (${resourceId})`);\n  }\n\n  async deleteResource(resourceId: string, userId: string = 'system'): Promise<void> {\n    const resource = this.resources.get(resourceId);\n    if (!resource) {\n      throw new Error(`Resource not found: ${resourceId}`);\n    }\n\n    // Update status to indicate deletion in progress\n    resource.status = 'terminated';\n    resource.updatedAt = new Date();\n\n    this.addAuditEntry(resource, userId, 'resource_deleted', 'resource', {\n      resourceId,\n      resourceName: resource.name,\n    });\n\n    // Perform cloud provider cleanup\n    await this.deprovisionResource(resource);\n\n    this.resources.delete(resourceId);\n\n    this.emit('resource:deleted', { resourceId, resource });\n    this.logger.info(`Resource deleted: ${resource.name} (${resourceId})`);\n  }\n\n  // Private helper methods\n  private async loadConfigurations(): Promise<void> {\n    try {\n      // Load providers\n      const providerFiles = await readdir(join(this.cloudPath, 'providers'));\n      for (const file of providerFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.cloudPath, 'providers', file), 'utf-8');\n        const provider: CloudProvider = JSON.parse(content);\n        this.providers.set(provider.id, provider);\n      }\n\n      // Load resources\n      const resourceFiles = await readdir(join(this.cloudPath, 'resources'));\n      for (const file of resourceFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.cloudPath, 'resources', file), 'utf-8');\n        const resource: CloudResource = JSON.parse(content);\n        this.resources.set(resource.id, resource);\n      }\n\n      // Load infrastructures\n      const infraFiles = await readdir(join(this.cloudPath, 'infrastructures'));\n      for (const file of infraFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.cloudPath, 'infrastructures', file), 'utf-8');\n        const infrastructure: CloudInfrastructure = JSON.parse(content);\n        this.infrastructures.set(infrastructure.id, infrastructure);\n      }\n\n      this.logger.info(\n        `Loaded ${this.providers.size} providers, ${this.resources.size} resources, ${this.infrastructures.size} infrastructures`,\n      );\n    } catch (error) {\n      this.logger.warn('Failed to load some cloud configurations', { error });\n    }\n  }\n\n  private async initializeDefaultProviders(): Promise<void> {\n    const defaultProviders = [\n      {\n        name: 'AWS',\n        type: 'aws' as const,\n        configuration: {\n          defaultRegion: 'us-east-1',\n          availableRegions: ['us-east-1', 'us-west-2', 'eu-west-1', 'ap-southeast-1'],\n          services: ['ec2', 's3', 'rds', 'lambda', 'ecs', 'eks'],\n          endpoints: {\n            ec2: 'https://ec2.amazonaws.com',\n            s3: 'https://s3.amazonaws.com',\n            rds: 'https://rds.amazonaws.com',\n          },\n          features: ['auto-scaling', 'load-balancing', 'monitoring', 'backup'],\n        },\n        pricing: {\n          currency: 'USD',\n          computePerHour: 0.1,\n          storagePerGB: 0.023,\n          bandwidthPerGB: 0.09,\n          requestsPer1000: 0.0004,\n        },\n      },\n      {\n        name: 'Google Cloud Platform',\n        type: 'gcp' as const,\n        configuration: {\n          defaultRegion: 'us-central1',\n          availableRegions: ['us-central1', 'us-east1', 'europe-west1', 'asia-east1'],\n          services: ['compute', 'storage', 'sql', 'functions', 'gke'],\n          endpoints: {\n            compute: 'https://compute.googleapis.com',\n            storage: 'https://storage.googleapis.com',\n            sql: 'https://sqladmin.googleapis.com',\n          },\n          features: ['auto-scaling', 'load-balancing', 'monitoring', 'backup'],\n        },\n        pricing: {\n          currency: 'USD',\n          computePerHour: 0.095,\n          storagePerGB: 0.02,\n          bandwidthPerGB: 0.08,\n          requestsPer1000: 0.0004,\n        },\n      },\n      {\n        name: 'Microsoft Azure',\n        type: 'azure' as const,\n        configuration: {\n          defaultRegion: 'East US',\n          availableRegions: ['East US', 'West US 2', 'West Europe', 'Southeast Asia'],\n          services: ['virtual-machines', 'storage', 'sql-database', 'functions', 'aks'],\n          endpoints: {\n            compute: 'https://management.azure.com',\n            storage: 'https://management.azure.com',\n            sql: 'https://management.azure.com',\n          },\n          features: ['auto-scaling', 'load-balancing', 'monitoring', 'backup'],\n        },\n        pricing: {\n          currency: 'USD',\n          computePerHour: 0.096,\n          storagePerGB: 0.024,\n          bandwidthPerGB: 0.087,\n          requestsPer1000: 0.0004,\n        },\n      },\n    ];\n\n    for (const providerData of defaultProviders) {\n      if (!Array.from(this.providers.values()).some((p) => p.name === providerData.name)) {\n        const provider: CloudProvider = {\n          id: `provider-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          name: providerData.name,\n          type: providerData.type,\n          credentials: {},\n          configuration: providerData.configuration,\n          status: 'inactive',\n          quotas: {\n            computeInstances: 20,\n            storage: 1000,\n            bandwidth: 1000,\n            requests: 1000000,\n          },\n          pricing: providerData.pricing,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n\n        this.providers.set(provider.id, provider);\n        await this.saveProvider(provider);\n      }\n    }\n  }\n\n  private async validateProviderCredentials(provider: CloudProvider): Promise<boolean> {\n    // Implement credential validation logic for each provider type\n    switch (provider.type) {\n      case 'aws':\n        return this.validateAWSCredentials(provider);\n      case 'gcp':\n        return this.validateGCPCredentials(provider);\n      case 'azure':\n        return this.validateAzureCredentials(provider);\n      default:\n        return true; // Assume valid for custom providers\n    }\n  }\n\n  private async validateAWSCredentials(provider: CloudProvider): Promise<boolean> {\n    // Implement AWS credential validation\n    // This would typically involve making a simple API call like ListRegions\n    return true; // Simplified for now\n  }\n\n  private async validateGCPCredentials(provider: CloudProvider): Promise<boolean> {\n    // Implement GCP credential validation\n    // This would typically involve making a simple API call like listing projects\n    return true; // Simplified for now\n  }\n\n  private async validateAzureCredentials(provider: CloudProvider): Promise<boolean> {\n    // Implement Azure credential validation\n    // This would typically involve making a simple API call like listing subscriptions\n    return true; // Simplified for now\n  }\n\n  private calculateResourceCost(provider: CloudProvider, type: string, size: string): number {\n    const baseHourlyRate = provider.pricing.computePerHour;\n\n    const sizeMultipliers: Record<string, number> = {\n      nano: 0.5,\n      micro: 0.75,\n      small: 1.0,\n      medium: 2.0,\n      large: 4.0,\n      xlarge: 8.0,\n      '2xlarge': 16.0,\n      '4xlarge': 32.0,\n    };\n\n    const typeMultipliers: Record<string, number> = {\n      compute: 1.0,\n      storage: 0.1,\n      database: 1.5,\n      cache: 0.8,\n      network: 0.3,\n      function: 0.01,\n    };\n\n    const sizeMultiplier = sizeMultipliers[size] || 1.0;\n    const typeMultiplier = typeMultipliers[type] || 1.0;\n\n    return baseHourlyRate * sizeMultiplier * typeMultiplier;\n  }\n\n  private async saveProvider(provider: CloudProvider): Promise<void> {\n    const filePath = join(this.cloudPath, 'providers', `${provider.id}.json`);\n    await writeFile(filePath, JSON.stringify(provider, null, 2));\n  }\n\n  private async saveResource(resource: CloudResource): Promise<void> {\n    const filePath = join(this.cloudPath, 'resources', `${resource.id}.json`);\n    await writeFile(filePath, JSON.stringify(resource, null, 2));\n  }\n\n  private async saveInfrastructure(infrastructure: CloudInfrastructure): Promise<void> {\n    const filePath = join(this.cloudPath, 'infrastructures', `${infrastructure.id}.json`);\n    await writeFile(filePath, JSON.stringify(infrastructure, null, 2));\n  }\n\n  private addAuditEntry(\n    resource: CloudResource,\n    userId: string,\n    action: string,\n    target: string,\n    details: Record<string, any>,\n  ): void {\n    const entry: CloudAuditEntry = {\n      id: `audit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      userId,\n      action,\n      resource: target,\n      details,\n    };\n\n    resource.auditLog.push(entry);\n  }\n\n  private async provisionResource(resource: CloudResource): Promise<void> {\n    try {\n      this.logger.info(`Provisioning resource: ${resource.name}`);\n\n      // Simulate provisioning process\n      resource.status = 'running';\n      resource.updatedAt = new Date();\n\n      // Update performance metrics\n      resource.performance.cpu = Math.random() * 50 + 20; // 20-70%\n      resource.performance.memory = Math.random() * 60 + 30; // 30-90%\n      resource.performance.storage = Math.random() * 80 + 10; // 10-90%\n      resource.performance.network = Math.random() * 100; // 0-100 Mbps\n\n      await this.saveResource(resource);\n\n      this.emit('resource:provisioned', resource);\n      this.logger.info(`Resource provisioned successfully: ${resource.name}`);\n    } catch (error) {\n      resource.status = 'error';\n      resource.updatedAt = new Date();\n      await this.saveResource(resource);\n\n      this.emit('resource:provision_failed', { resource, error });\n      this.logger.error(`Resource provisioning failed: ${resource.name}`, { error });\n      throw error;\n    }\n  }\n\n  private async deprovisionResource(resource: CloudResource): Promise<void> {\n    try {\n      this.logger.info(`Deprovisioning resource: ${resource.name}`);\n\n      // Implement cloud provider-specific deprovisioning logic\n      // This would typically involve API calls to delete the resource\n\n      this.emit('resource:deprovisioned', resource);\n      this.logger.info(`Resource deprovisioned successfully: ${resource.name}`);\n    } catch (error) {\n      this.emit('resource:deprovision_failed', { resource, error });\n      this.logger.error(`Resource deprovisioning failed: ${resource.name}`, { error });\n      throw error;\n    }\n  }\n\n  private async executeInfrastructureDeployment(\n    infrastructure: CloudInfrastructure,\n  ): Promise<void> {\n    switch (infrastructure.deployment.strategy) {\n      case 'terraform':\n        await this.deployWithTerraform(infrastructure);\n        break;\n      case 'cloudformation':\n        await this.deployWithCloudFormation(infrastructure);\n        break;\n      case 'kubernetes':\n        await this.deployWithKubernetes(infrastructure);\n        break;\n      default:\n        await this.deployWithCustomStrategy(infrastructure);\n    }\n  }\n\n  private async deployWithTerraform(infrastructure: CloudInfrastructure): Promise<void> {\n    // Implement Terraform deployment logic\n    this.logger.info(`Deploying infrastructure with Terraform: ${infrastructure.name}`);\n\n    // This would typically:\n    // 1. Generate Terraform configuration from template\n    // 2. Run terraform init\n    // 3. Run terraform plan\n    // 4. Run terraform apply\n\n    // Simulate deployment\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  private async deployWithCloudFormation(infrastructure: CloudInfrastructure): Promise<void> {\n    // Implement CloudFormation deployment logic\n    this.logger.info(`Deploying infrastructure with CloudFormation: ${infrastructure.name}`);\n\n    // This would typically:\n    // 1. Upload template to S3\n    // 2. Create or update CloudFormation stack\n    // 3. Monitor stack events\n    // 4. Wait for completion\n\n    // Simulate deployment\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  private async deployWithKubernetes(infrastructure: CloudInfrastructure): Promise<void> {\n    // Implement Kubernetes deployment logic\n    this.logger.info(`Deploying infrastructure with Kubernetes: ${infrastructure.name}`);\n\n    // This would typically:\n    // 1. Generate Kubernetes manifests\n    // 2. Apply manifests using kubectl or Kubernetes API\n    // 3. Monitor deployment status\n    // 4. Wait for all resources to be ready\n\n    // Simulate deployment\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  private async deployWithCustomStrategy(infrastructure: CloudInfrastructure): Promise<void> {\n    // Implement custom deployment logic\n    this.logger.info(`Deploying infrastructure with custom strategy: ${infrastructure.name}`);\n\n    // This would be defined by the user's custom deployment script\n    // Simulate deployment\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n}\n"],"names":["EventEmitter","writeFile","readFile","mkdir","readdir","join","Logger","ConfigManager","CloudManager","providers","Map","resources","infrastructures","cloudPath","logger","config","level","format","destination","getInstance","initialize","recursive","loadConfigurations","initializeDefaultProviders","info","error","addProvider","providerData","provider","id","Date","now","Math","random","toString","substr","name","type","credentials","configuration","defaultRegion","availableRegions","services","endpoints","features","status","quotas","computeInstances","storage","bandwidth","requests","pricing","currency","computePerHour","storagePerGB","bandwidthPerGB","requestsPer1000","createdAt","updatedAt","validateProviderCredentials","warn","set","saveProvider","emit","createResource","resourceData","get","providerId","Error","resource","region","size","ports","environment","volumes","networks","tags","monitoring","enabled","metrics","alerts","healthChecks","security","encryption","backups","accessControl","vulnerabilityScanning","complianceFrameworks","costs","hourlyRate","calculateResourceCost","monthlyEstimate","actualSpend","lastBillingDate","costBreakdown","performance","cpu","memory","network","uptime","availability","metadata","owner","purpose","lifecycle","auditLog","addAuditEntry","resourceId","resourceName","saveResource","provisionResource","createInfrastructure","infrastructureData","infrastructure","description","projectId","topology","loadBalancers","databases","caches","queues","deployment","strategy","template","parameters","deploymentHistory","dashboard","sla","responseTime","errorRate","budgetLimit","currentSpend","projectedSpend","costAlerts","optimization","compliance","frameworks","requirements","lastAudit","nextAudit","backup","schedule","retention","backupLocations","disaster_recovery","rto","rpo","testFrequency","saveInfrastructure","deployInfrastructure","infrastructureId","userId","deploymentId","startTime","executeInfrastructureDeployment","endTime","duration","getTime","timestamp","version","changes","deployedBy","push","lastDeployment","optimizeCosts","filters","Array","from","values","filter","r","resourceType","optimizations","potentialSavings","implementation","effort","priority","sort","a","b","length","resourceCount","getCloudMetrics","p","timeRange","start","end","providerMetrics","total","active","inactive","errors","resourcesByType","resourcesByProvider","resourcesByEnvironment","resourceMetrics","running","stopped","byType","byProvider","byEnvironment","totalSpend","reduce","sum","monthlySpend","topSpenders","map","cost","slice","costByProvider","costByEnvironment","costMetrics","implementedSavings","opportunities","performanceMetrics","averageUptime","averageResponseTime","encryptedResources","backedUpResources","securityMetrics","vulnerabilities","critical","high","medium","low","compliant","nonCompliant","pending","encryptionCoverage","backupCoverage","scaleResource","scalingConfig","oldConfiguration","replicas","undefined","autoScaling","JSON","stringify","newConfiguration","deleteResource","deprovisionResource","delete","providerFiles","file","f","endsWith","content","parse","resourceFiles","infraFiles","defaultProviders","ec2","s3","rds","compute","sql","some","validateAWSCredentials","validateGCPCredentials","validateAzureCredentials","baseHourlyRate","sizeMultipliers","nano","micro","small","large","xlarge","typeMultipliers","database","cache","function","sizeMultiplier","typeMultiplier","filePath","action","target","details","entry","deployWithTerraform","deployWithCloudFormation","deployWithKubernetes","deployWithCustomStrategy","Promise","resolve","setTimeout"],"mappings":"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"}