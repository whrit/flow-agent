{"version":3,"sources":["../../../src/enterprise/analytics-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { writeFile, readFile, mkdir, readdir } from 'fs/promises';\nimport { join } from 'path';\nimport { Logger } from '../core/logger.js';\nimport { ConfigManager } from '../core/config.js';\n\nexport interface AnalyticsMetric {\n  id: string;\n  name: string;\n  description: string;\n  type: 'counter' | 'gauge' | 'histogram' | 'summary';\n  category: 'performance' | 'usage' | 'business' | 'technical' | 'security' | 'cost';\n  unit: string;\n  value: number;\n  tags: Record<string, string>;\n  timestamp: Date;\n  source: string;\n  metadata: Record<string, any>;\n}\n\nexport interface AnalyticsDashboard {\n  id: string;\n  name: string;\n  description: string;\n  type: 'operational' | 'executive' | 'technical' | 'business' | 'security' | 'custom';\n  widgets: DashboardWidget[];\n  layout: DashboardLayout;\n  permissions: {\n    viewers: string[];\n    editors: string[];\n    public: boolean;\n  };\n  schedule: {\n    autoRefresh: boolean;\n    refreshInterval: number; // seconds\n    exportSchedule?: {\n      frequency: 'daily' | 'weekly' | 'monthly';\n      format: 'pdf' | 'png' | 'csv' | 'json';\n      recipients: string[];\n    };\n  };\n  filters: DashboardFilter[];\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n}\n\nexport interface DashboardWidget {\n  id: string;\n  title: string;\n  type: 'chart' | 'table' | 'metric' | 'gauge' | 'map' | 'text' | 'alert';\n  size: 'small' | 'medium' | 'large' | 'full-width';\n  position: { x: number; y: number; width: number; height: number };\n  dataSource: {\n    query: string;\n    metrics: string[];\n    aggregation: 'sum' | 'avg' | 'min' | 'max' | 'count' | 'p95' | 'p99';\n    timeRange: string;\n    groupBy: string[];\n  };\n  visualization: {\n    chartType?: 'line' | 'bar' | 'pie' | 'scatter' | 'heatmap' | 'area';\n    options: Record<string, any>;\n    thresholds?: {\n      warning: number;\n      critical: number;\n    };\n  };\n  alerts: {\n    enabled: boolean;\n    conditions: AlertCondition[];\n  };\n}\n\nexport interface DashboardLayout {\n  columns: number;\n  rows: number;\n  grid: boolean;\n  responsive: boolean;\n}\n\nexport interface DashboardFilter {\n  id: string;\n  name: string;\n  type: 'dropdown' | 'multiselect' | 'daterange' | 'text' | 'number';\n  field: string;\n  values?: string[];\n  defaultValue?: any;\n  required: boolean;\n}\n\nexport interface AlertCondition {\n  metric: string;\n  operator: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  threshold: number;\n  duration: number; // seconds\n  severity: 'info' | 'warning' | 'critical';\n}\n\nexport interface AnalyticsInsight {\n  id: string;\n  title: string;\n  description: string;\n  type: 'anomaly' | 'trend' | 'correlation' | 'prediction' | 'recommendation';\n  category: 'performance' | 'usage' | 'business' | 'technical' | 'security' | 'cost';\n  confidence: number; // 0-100\n  impact: 'low' | 'medium' | 'high';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  data: {\n    metrics: string[];\n    timeRange: { start: Date; end: Date };\n    values: Record<string, number>;\n    baseline?: Record<string, number>;\n    deviation?: number;\n  };\n  recommendations: {\n    action: string;\n    effort: 'low' | 'medium' | 'high';\n    impact: string;\n    implementation: string[];\n  }[];\n  status: 'new' | 'acknowledged' | 'investigating' | 'resolved' | 'dismissed';\n  assignedTo?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  expiresAt?: Date;\n}\n\nexport interface PerformanceMetrics {\n  system: {\n    cpu: {\n      usage: number;\n      cores: number;\n      loadAverage: number[];\n    };\n    memory: {\n      used: number;\n      free: number;\n      total: number;\n      usage: number;\n    };\n    disk: {\n      used: number;\n      free: number;\n      total: number;\n      usage: number;\n      iops: number;\n    };\n    network: {\n      bytesIn: number;\n      bytesOut: number;\n      packetsIn: number;\n      packetsOut: number;\n      errors: number;\n    };\n  };\n  application: {\n    responseTime: {\n      avg: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    throughput: {\n      requestsPerSecond: number;\n      transactionsPerSecond: number;\n    };\n    errors: {\n      rate: number;\n      count: number;\n      types: Record<string, number>;\n    };\n    availability: {\n      uptime: number;\n      sla: number;\n      incidents: number;\n    };\n  };\n  database: {\n    connections: {\n      active: number;\n      idle: number;\n      max: number;\n    };\n    queries: {\n      avgExecutionTime: number;\n      slowQueries: number;\n      deadlocks: number;\n    };\n    storage: {\n      size: number;\n      growth: number;\n      fragmentation: number;\n    };\n  };\n  infrastructure: {\n    containers: {\n      running: number;\n      stopped: number;\n      restarts: number;\n    };\n    services: {\n      healthy: number;\n      unhealthy: number;\n      degraded: number;\n    };\n  };\n}\n\nexport interface UsageMetrics {\n  users: {\n    total: number;\n    active: number;\n    new: number;\n    returning: number;\n    churn: number;\n  };\n  sessions: {\n    total: number;\n    duration: {\n      avg: number;\n      median: number;\n    };\n    bounceRate: number;\n    pagesPerSession: number;\n  };\n  features: {\n    adoption: Record<\n      string,\n      {\n        users: number;\n        usage: number;\n        retention: number;\n      }\n    >;\n    mostUsed: string[];\n    leastUsed: string[];\n  };\n  api: {\n    calls: number;\n    uniqueConsumers: number;\n    avgResponseTime: number;\n    errorRate: number;\n    rateLimits: {\n      hit: number;\n      consumed: number;\n    };\n  };\n  content: {\n    created: number;\n    modified: number;\n    deleted: number;\n    views: number;\n  };\n}\n\nexport interface BusinessMetrics {\n  revenue: {\n    total: number;\n    recurring: number;\n    growth: number;\n    arpu: number; // Average Revenue Per User\n    ltv: number; // Lifetime Value\n  };\n  customers: {\n    total: number;\n    new: number;\n    retained: number;\n    churned: number;\n    satisfaction: number;\n  };\n  conversion: {\n    leads: number;\n    qualified: number;\n    opportunities: number;\n    closed: number;\n    rate: number;\n  };\n  support: {\n    tickets: number;\n    resolved: number;\n    avgResolutionTime: number;\n    satisfaction: number;\n  };\n}\n\nexport interface PredictiveModel {\n  id: string;\n  name: string;\n  description: string;\n  type: 'regression' | 'classification' | 'time-series' | 'anomaly-detection';\n  algorithm: string;\n  features: string[];\n  target: string;\n  accuracy: number;\n  confidence: number;\n  trainedAt: Date;\n  lastPrediction?: Date;\n  trainingData: {\n    samples: number;\n    features: number;\n    timeRange: { start: Date; end: Date };\n  };\n  performance: {\n    precision: number;\n    recall: number;\n    f1Score: number;\n    mse?: number;\n    mae?: number;\n  };\n  predictions: PredictionResult[];\n  status: 'training' | 'ready' | 'needs-retraining' | 'error';\n}\n\nexport interface PredictionResult {\n  id: string;\n  modelId: string;\n  input: Record<string, any>;\n  prediction: any;\n  confidence: number;\n  timestamp: Date;\n  actual?: any; // For validation\n  accuracy?: number;\n}\n\nexport interface AnalyticsReport {\n  id: string;\n  name: string;\n  description: string;\n  type: 'performance' | 'usage' | 'business' | 'security' | 'compliance' | 'custom';\n  format: 'pdf' | 'html' | 'csv' | 'json' | 'xlsx';\n  schedule: {\n    frequency: 'manual' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    time?: string;\n    timezone?: string;\n    recipients: string[];\n  };\n  sections: ReportSection[];\n  filters: Record<string, any>;\n  lastGenerated?: Date;\n  nextGeneration?: Date;\n  generatedBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ReportSection {\n  id: string;\n  title: string;\n  type: 'summary' | 'chart' | 'table' | 'text' | 'metrics';\n  content: {\n    query?: string;\n    visualization?: any;\n    text?: string;\n    metrics?: string[];\n  };\n  order: number;\n}\n\nexport interface AnalyticsConfiguration {\n  collection: {\n    enabled: boolean;\n    samplingRate: number;\n    batchSize: number;\n    flushInterval: number;\n  };\n  storage: {\n    retention: {\n      raw: string; // e.g., '7d'\n      aggregated: string; // e.g., '90d'\n      summary: string; // e.g., '1y'\n    };\n    compression: boolean;\n    encryption: boolean;\n  };\n  processing: {\n    realTime: boolean;\n    batchProcessing: boolean;\n    aggregationIntervals: string[];\n  };\n  alerts: {\n    enabled: boolean;\n    channels: string[];\n    escalation: {\n      levels: number;\n      intervals: number[];\n    };\n  };\n  privacy: {\n    anonymization: boolean;\n    gdprCompliant: boolean;\n    dataMinimization: boolean;\n  };\n  integrations: {\n    grafana?: { url: string; apiKey: string };\n    prometheus?: { url: string };\n    elasticsearch?: { url: string; index: string };\n    splunk?: { url: string; token: string };\n  };\n}\n\nexport class AnalyticsManager extends EventEmitter {\n  private metrics: Map<string, AnalyticsMetric[]> = new Map();\n  private dashboards: Map<string, AnalyticsDashboard> = new Map();\n  private insights: Map<string, AnalyticsInsight> = new Map();\n  private models: Map<string, PredictiveModel> = new Map();\n  private reports: Map<string, AnalyticsReport> = new Map();\n  private analyticsPath: string;\n  private logger: Logger;\n  private config: ConfigManager;\n  private configuration: AnalyticsConfiguration;\n\n  constructor(analyticsPath: string = './analytics', logger?: Logger, config?: ConfigManager) {\n    super();\n    this.analyticsPath = analyticsPath;\n    this.logger = logger || new Logger({ level: 'info', format: 'text', destination: 'console' });\n    this.config = config || ConfigManager.getInstance();\n    this.configuration = this.getDefaultConfiguration();\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.analyticsPath, { recursive: true });\n      await mkdir(join(this.analyticsPath, 'metrics'), { recursive: true });\n      await mkdir(join(this.analyticsPath, 'dashboards'), { recursive: true });\n      await mkdir(join(this.analyticsPath, 'insights'), { recursive: true });\n      await mkdir(join(this.analyticsPath, 'models'), { recursive: true });\n      await mkdir(join(this.analyticsPath, 'reports'), { recursive: true });\n\n      await this.loadConfigurations();\n      await this.initializeDefaultDashboards();\n      await this.startMetricsCollection();\n\n      this.logger.info('Analytics Manager initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Analytics Manager', { error });\n      throw error;\n    }\n  }\n\n  async recordMetric(metric: Omit<AnalyticsMetric, 'id' | 'timestamp'>): Promise<void> {\n    const fullMetric: AnalyticsMetric = {\n      id: `metric-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      ...metric,\n    };\n\n    const key = `${metric.category}-${metric.name}`;\n    if (!this.metrics.has(key)) {\n      this.metrics.set(key, []);\n    }\n\n    const metricArray = this.metrics.get(key)!;\n    metricArray.push(fullMetric);\n\n    // Keep only recent metrics in memory (configurable retention)\n    const retentionPeriod = 24 * 60 * 60 * 1000; // 24 hours\n    const cutoff = Date.now() - retentionPeriod;\n    const filteredMetrics = metricArray.filter((m) => m.timestamp.getTime() > cutoff);\n    this.metrics.set(key, filteredMetrics);\n\n    // Persist to disk for longer-term storage\n    await this.persistMetric(fullMetric);\n\n    this.emit('metric:recorded', fullMetric);\n\n    // Check for anomalies and generate insights\n    await this.checkForAnomalies(key, fullMetric);\n  }\n\n  async queryMetrics(query: {\n    metrics: string[];\n    timeRange: { start: Date; end: Date };\n    aggregation?: 'sum' | 'avg' | 'min' | 'max' | 'count' | 'p95' | 'p99';\n    groupBy?: string[];\n    filters?: Record<string, any>;\n  }): Promise<Record<string, any[]>> {\n    const results: Record<string, any[]> = {};\n\n    for (const metricName of query.metrics) {\n      const key = metricName.includes('-') ? metricName : `*-${metricName}`;\n      const matchingKeys = Array.from(this.metrics.keys()).filter(\n        (k) => key === '*' || k.includes(key.replace('*-', '')) || k === key,\n      );\n\n      let allMetrics: AnalyticsMetric[] = [];\n      for (const k of matchingKeys) {\n        const keyMetrics = this.metrics.get(k) || [];\n        allMetrics.push(...keyMetrics);\n      }\n\n      // Filter by time range\n      allMetrics = allMetrics.filter(\n        (m) => m.timestamp >= query.timeRange.start && m.timestamp <= query.timeRange.end,\n      );\n\n      // Apply filters\n      if (query.filters) {\n        for (const [field, value] of Object.entries(query.filters)) {\n          allMetrics = allMetrics.filter((m) => {\n            if (field === 'tags') {\n              return Object.entries(value as Record<string, string>).every(\n                ([k, v]) => m.tags[k] === v,\n              );\n            }\n            return (m as any)[field] === value;\n          });\n        }\n      }\n\n      // Group by if specified\n      if (query.groupBy && query.groupBy.length > 0) {\n        const grouped = this.groupMetrics(allMetrics, query.groupBy);\n        for (const [group, metrics] of Object.entries(grouped)) {\n          const aggregated = this.aggregateMetrics(metrics, query.aggregation || 'avg');\n          results[`${metricName}-${group}`] = aggregated;\n        }\n      } else {\n        const aggregated = this.aggregateMetrics(allMetrics, query.aggregation || 'avg');\n        results[metricName] = aggregated;\n      }\n    }\n\n    return results;\n  }\n\n  async createDashboard(dashboardData: {\n    name: string;\n    description: string;\n    type: AnalyticsDashboard['type'];\n    widgets: Omit<DashboardWidget, 'id'>[];\n    permissions?: Partial<AnalyticsDashboard['permissions']>;\n  }): Promise<AnalyticsDashboard> {\n    const dashboard: AnalyticsDashboard = {\n      id: `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: dashboardData.name,\n      description: dashboardData.description,\n      type: dashboardData.type,\n      widgets: dashboardData.widgets.map((widget, index) => ({\n        id: `widget-${Date.now()}-${index}`,\n        ...widget,\n      })),\n      layout: {\n        columns: 12,\n        rows: 8,\n        grid: true,\n        responsive: true,\n      },\n      permissions: {\n        viewers: [],\n        editors: [],\n        public: false,\n        ...dashboardData.permissions,\n      },\n      schedule: {\n        autoRefresh: true,\n        refreshInterval: 30,\n      },\n      filters: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'system',\n    };\n\n    this.dashboards.set(dashboard.id, dashboard);\n    await this.saveDashboard(dashboard);\n\n    this.emit('dashboard:created', dashboard);\n    this.logger.info(`Dashboard created: ${dashboard.name} (${dashboard.id})`);\n\n    return dashboard;\n  }\n\n  async generateInsights(\n    scope: {\n      metrics?: string[];\n      timeRange?: { start: Date; end: Date };\n      categories?: string[];\n    } = {},\n  ): Promise<AnalyticsInsight[]> {\n    const insights: AnalyticsInsight[] = [];\n\n    // Default time range: last 24 hours\n    const timeRange = scope.timeRange || {\n      start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      end: new Date(),\n    };\n\n    // Anomaly detection\n    const anomalies = await this.detectAnomalies(timeRange, scope.metrics);\n    insights.push(...anomalies);\n\n    // Trend analysis\n    const trends = await this.analyzeTrends(timeRange, scope.metrics);\n    insights.push(...trends);\n\n    // Performance insights\n    const performance = await this.analyzePerformance(timeRange);\n    insights.push(...performance);\n\n    // Usage insights\n    const usage = await this.analyzeUsage(timeRange);\n    insights.push(...usage);\n\n    // Cost optimization insights\n    const costOptimizations = await this.analyzeCostOptimization(timeRange);\n    insights.push(...costOptimizations);\n\n    // Store insights\n    for (const insight of insights) {\n      this.insights.set(insight.id, insight);\n      await this.saveInsight(insight);\n    }\n\n    this.emit('insights:generated', { insights, scope });\n    this.logger.info(`Generated ${insights.length} insights`);\n\n    return insights;\n  }\n\n  async trainPredictiveModel(modelConfig: {\n    name: string;\n    description: string;\n    type: PredictiveModel['type'];\n    algorithm: string;\n    features: string[];\n    target: string;\n    trainingPeriod: { start: Date; end: Date };\n  }): Promise<PredictiveModel> {\n    const model: PredictiveModel = {\n      id: `model-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: modelConfig.name,\n      description: modelConfig.description,\n      type: modelConfig.type,\n      algorithm: modelConfig.algorithm,\n      features: modelConfig.features,\n      target: modelConfig.target,\n      accuracy: 0,\n      confidence: 0,\n      trainedAt: new Date(),\n      trainingData: {\n        samples: 0,\n        features: modelConfig.features.length,\n        timeRange: modelConfig.trainingPeriod,\n      },\n      performance: {\n        precision: 0,\n        recall: 0,\n        f1Score: 0,\n      },\n      predictions: [],\n      status: 'training',\n    };\n\n    try {\n      // Collect training data\n      const trainingData = await this.collectTrainingData(model);\n\n      // Train the model (simplified implementation)\n      const trained = await this.executeModelTraining(model, trainingData);\n\n      Object.assign(model, trained);\n      model.status = 'ready';\n\n      this.models.set(model.id, model);\n      await this.saveModel(model);\n\n      this.emit('model:trained', model);\n      this.logger.info(\n        `Predictive model trained: ${model.name} (${model.id}) - Accuracy: ${model.accuracy}%`,\n      );\n    } catch (error) {\n      model.status = 'error';\n      this.logger.error(`Model training failed: ${model.name}`, { error });\n      throw error;\n    }\n\n    return model;\n  }\n\n  async makePrediction(modelId: string, input: Record<string, any>): Promise<PredictionResult> {\n    const model = this.models.get(modelId);\n    if (!model) {\n      throw new Error(`Model not found: ${modelId}`);\n    }\n\n    if (model.status !== 'ready') {\n      throw new Error(`Model is not ready for predictions: ${model.status}`);\n    }\n\n    // Simple prediction logic (would be replaced with actual ML inference)\n    const prediction = await this.executePrediction(model, input);\n\n    const result: PredictionResult = {\n      id: `prediction-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      modelId,\n      input,\n      prediction: prediction.value,\n      confidence: prediction.confidence,\n      timestamp: new Date(),\n    };\n\n    model.predictions.push(result);\n    model.lastPrediction = new Date();\n\n    await this.saveModel(model);\n\n    this.emit('prediction:made', { model, result });\n    this.logger.debug(`Prediction made: ${modelId} - ${JSON.stringify(result.prediction)}`);\n\n    return result;\n  }\n\n  async getPerformanceMetrics(timeRange?: { start: Date; end: Date }): Promise<PerformanceMetrics> {\n    const range = timeRange || {\n      start: new Date(Date.now() - 60 * 60 * 1000), // Last hour\n      end: new Date(),\n    };\n\n    const systemMetrics = await this.queryMetrics({\n      metrics: ['cpu-usage', 'memory-usage', 'disk-usage', 'network-io'],\n      timeRange: range,\n      aggregation: 'avg',\n    });\n\n    const appMetrics = await this.queryMetrics({\n      metrics: ['response-time', 'request-rate', 'error-rate', 'uptime'],\n      timeRange: range,\n      aggregation: 'avg',\n    });\n\n    const dbMetrics = await this.queryMetrics({\n      metrics: ['db-connections', 'query-time', 'db-size'],\n      timeRange: range,\n      aggregation: 'avg',\n    });\n\n    // Construct performance metrics (simplified)\n    return {\n      system: {\n        cpu: {\n          usage: this.getLatestValue(systemMetrics['cpu-usage']) || 0,\n          cores: 8, // Would be detected from system\n          loadAverage: [1.2, 1.5, 1.8], // Would be collected from system\n        },\n        memory: {\n          used: this.getLatestValue(systemMetrics['memory-usage']) || 0,\n          free: 4000000000, // Would be calculated\n          total: 8000000000,\n          usage: 50,\n        },\n        disk: {\n          used: this.getLatestValue(systemMetrics['disk-usage']) || 0,\n          free: 100000000000,\n          total: 500000000000,\n          usage: 20,\n          iops: 1000,\n        },\n        network: {\n          bytesIn: 1000000,\n          bytesOut: 2000000,\n          packetsIn: 5000,\n          packetsOut: 6000,\n          errors: 5,\n        },\n      },\n      application: {\n        responseTime: {\n          avg: this.getLatestValue(appMetrics['response-time']) || 0,\n          p50: 150,\n          p95: 500,\n          p99: 1000,\n        },\n        throughput: {\n          requestsPerSecond: this.getLatestValue(appMetrics['request-rate']) || 0,\n          transactionsPerSecond: 50,\n        },\n        errors: {\n          rate: this.getLatestValue(appMetrics['error-rate']) || 0,\n          count: 10,\n          types: { '500': 5, '404': 3, '400': 2 },\n        },\n        availability: {\n          uptime: this.getLatestValue(appMetrics['uptime']) || 0,\n          sla: 99.9,\n          incidents: 2,\n        },\n      },\n      database: {\n        connections: {\n          active: 25,\n          idle: 75,\n          max: 100,\n        },\n        queries: {\n          avgExecutionTime: this.getLatestValue(dbMetrics['query-time']) || 0,\n          slowQueries: 5,\n          deadlocks: 0,\n        },\n        storage: {\n          size: this.getLatestValue(dbMetrics['db-size']) || 0,\n          growth: 1000000, // bytes per day\n          fragmentation: 5,\n        },\n      },\n      infrastructure: {\n        containers: {\n          running: 12,\n          stopped: 2,\n          restarts: 3,\n        },\n        services: {\n          healthy: 15,\n          unhealthy: 1,\n          degraded: 0,\n        },\n      },\n    };\n  }\n\n  async getUsageMetrics(timeRange?: { start: Date; end: Date }): Promise<UsageMetrics> {\n    const range = timeRange || {\n      start: new Date(Date.now() - 24 * 60 * 60 * 1000), // Last 24 hours\n      end: new Date(),\n    };\n\n    const usageData = await this.queryMetrics({\n      metrics: ['active-users', 'sessions', 'api-calls', 'feature-usage'],\n      timeRange: range,\n      aggregation: 'sum',\n    });\n\n    return {\n      users: {\n        total: 10000,\n        active: this.getLatestValue(usageData['active-users']) || 0,\n        new: 50,\n        returning: 1500,\n        churn: 25,\n      },\n      sessions: {\n        total: this.getLatestValue(usageData['sessions']) || 0,\n        duration: {\n          avg: 15 * 60, // 15 minutes\n          median: 12 * 60,\n        },\n        bounceRate: 25,\n        pagesPerSession: 4.5,\n      },\n      features: {\n        adoption: {\n          dashboard: { users: 800, usage: 5000, retention: 85 },\n          reports: { users: 600, usage: 2000, retention: 70 },\n          analytics: { users: 400, usage: 1500, retention: 60 },\n        },\n        mostUsed: ['dashboard', 'reports', 'search'],\n        leastUsed: ['advanced-filters', 'export', 'integrations'],\n      },\n      api: {\n        calls: this.getLatestValue(usageData['api-calls']) || 0,\n        uniqueConsumers: 150,\n        avgResponseTime: 250,\n        errorRate: 2.5,\n        rateLimits: {\n          hit: 5,\n          consumed: 75,\n        },\n      },\n      content: {\n        created: 100,\n        modified: 250,\n        deleted: 25,\n        views: 5000,\n      },\n    };\n  }\n\n  async getBusinessMetrics(timeRange?: { start: Date; end: Date }): Promise<BusinessMetrics> {\n    // This would integrate with business systems (CRM, billing, etc.)\n    return {\n      revenue: {\n        total: 1000000,\n        recurring: 800000,\n        growth: 15,\n        arpu: 100,\n        ltv: 2400,\n      },\n      customers: {\n        total: 500,\n        new: 25,\n        retained: 450,\n        churned: 10,\n        satisfaction: 4.2,\n      },\n      conversion: {\n        leads: 1000,\n        qualified: 400,\n        opportunities: 200,\n        closed: 50,\n        rate: 5,\n      },\n      support: {\n        tickets: 150,\n        resolved: 140,\n        avgResolutionTime: 4 * 60 * 60, // 4 hours\n        satisfaction: 4.5,\n      },\n    };\n  }\n\n  // Private helper methods\n  private getDefaultConfiguration(): AnalyticsConfiguration {\n    return {\n      collection: {\n        enabled: true,\n        samplingRate: 1.0,\n        batchSize: 1000,\n        flushInterval: 60000,\n      },\n      storage: {\n        retention: {\n          raw: '7d',\n          aggregated: '90d',\n          summary: '1y',\n        },\n        compression: true,\n        encryption: false,\n      },\n      processing: {\n        realTime: true,\n        batchProcessing: true,\n        aggregationIntervals: ['1m', '5m', '1h', '1d'],\n      },\n      alerts: {\n        enabled: true,\n        channels: ['email', 'slack'],\n        escalation: {\n          levels: 3,\n          intervals: [5, 15, 30], // minutes\n        },\n      },\n      privacy: {\n        anonymization: true,\n        gdprCompliant: true,\n        dataMinimization: true,\n      },\n      integrations: {},\n    };\n  }\n\n  private async loadConfigurations(): Promise<void> {\n    try {\n      // Load dashboards\n      const dashboardFiles = await readdir(join(this.analyticsPath, 'dashboards'));\n      for (const file of dashboardFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.analyticsPath, 'dashboards', file), 'utf-8');\n        const dashboard: AnalyticsDashboard = JSON.parse(content);\n        this.dashboards.set(dashboard.id, dashboard);\n      }\n\n      // Load insights\n      const insightFiles = await readdir(join(this.analyticsPath, 'insights'));\n      for (const file of insightFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.analyticsPath, 'insights', file), 'utf-8');\n        const insight: AnalyticsInsight = JSON.parse(content);\n        this.insights.set(insight.id, insight);\n      }\n\n      // Load models\n      const modelFiles = await readdir(join(this.analyticsPath, 'models'));\n      for (const file of modelFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.analyticsPath, 'models', file), 'utf-8');\n        const model: PredictiveModel = JSON.parse(content);\n        this.models.set(model.id, model);\n      }\n\n      this.logger.info(\n        `Loaded ${this.dashboards.size} dashboards, ${this.insights.size} insights, ${this.models.size} models`,\n      );\n    } catch (error) {\n      this.logger.warn('Failed to load some analytics configurations', { error });\n    }\n  }\n\n  private async initializeDefaultDashboards(): Promise<void> {\n    const defaultDashboards = [\n      {\n        name: 'System Performance',\n        description: 'Real-time system performance metrics',\n        type: 'operational' as const,\n        widgets: [\n          {\n            title: 'CPU Usage',\n            type: 'gauge' as const,\n            size: 'medium' as const,\n            position: { x: 0, y: 0, width: 6, height: 3 },\n            dataSource: {\n              query: 'cpu-usage',\n              metrics: ['cpu-usage'],\n              aggregation: 'avg' as const,\n              timeRange: '1h',\n              groupBy: [],\n            },\n            visualization: {\n              chartType: 'gauge' as const,\n              options: { max: 100, unit: '%' },\n              thresholds: { warning: 70, critical: 90 },\n            },\n            alerts: { enabled: true, conditions: [] },\n          },\n          {\n            title: 'Memory Usage',\n            type: 'gauge' as const,\n            size: 'medium' as const,\n            position: { x: 6, y: 0, width: 6, height: 3 },\n            dataSource: {\n              query: 'memory-usage',\n              metrics: ['memory-usage'],\n              aggregation: 'avg' as const,\n              timeRange: '1h',\n              groupBy: [],\n            },\n            visualization: {\n              chartType: 'gauge' as const,\n              options: { max: 100, unit: '%' },\n              thresholds: { warning: 80, critical: 95 },\n            },\n            alerts: { enabled: true, conditions: [] },\n          },\n          {\n            title: 'Response Time',\n            type: 'chart' as const,\n            size: 'large' as const,\n            position: { x: 0, y: 3, width: 12, height: 4 },\n            dataSource: {\n              query: 'response-time',\n              metrics: ['response-time'],\n              aggregation: 'avg' as const,\n              timeRange: '24h',\n              groupBy: ['service'],\n            },\n            visualization: {\n              chartType: 'line' as const,\n              options: { unit: 'ms' },\n            },\n            alerts: { enabled: false, conditions: [] },\n          },\n        ],\n      },\n      {\n        name: 'Business KPIs',\n        description: 'Key business performance indicators',\n        type: 'executive' as const,\n        widgets: [\n          {\n            title: 'Active Users',\n            type: 'metric' as const,\n            size: 'small' as const,\n            position: { x: 0, y: 0, width: 3, height: 2 },\n            dataSource: {\n              query: 'active-users',\n              metrics: ['active-users'],\n              aggregation: 'count' as const,\n              timeRange: '24h',\n              groupBy: [],\n            },\n            visualization: {\n              options: { unit: 'users' },\n            },\n            alerts: { enabled: false, conditions: [] },\n          },\n        ],\n      },\n    ];\n\n    for (const dashboardData of defaultDashboards) {\n      if (!Array.from(this.dashboards.values()).some((d) => d.name === dashboardData.name)) {\n        await this.createDashboard(dashboardData);\n      }\n    }\n  }\n\n  private async startMetricsCollection(): Promise<void> {\n    // Start collecting system metrics\n    setInterval(async () => {\n      await this.collectSystemMetrics();\n    }, 60000); // Every minute\n\n    // Start collecting application metrics\n    setInterval(async () => {\n      await this.collectApplicationMetrics();\n    }, 30000); // Every 30 seconds\n\n    this.logger.info('Started automatic metrics collection');\n  }\n\n  private async collectSystemMetrics(): Promise<void> {\n    try {\n      // Mock system metrics collection\n      await this.recordMetric({\n        name: 'cpu-usage',\n        description: 'CPU usage percentage',\n        type: 'gauge',\n        category: 'performance',\n        unit: 'percent',\n        value: Math.random() * 100,\n        tags: { host: 'localhost', service: 'system' },\n        source: 'system-monitor',\n        metadata: {},\n      });\n\n      await this.recordMetric({\n        name: 'memory-usage',\n        description: 'Memory usage percentage',\n        type: 'gauge',\n        category: 'performance',\n        unit: 'percent',\n        value: Math.random() * 100,\n        tags: { host: 'localhost', service: 'system' },\n        source: 'system-monitor',\n        metadata: {},\n      });\n\n      await this.recordMetric({\n        name: 'disk-usage',\n        description: 'Disk usage percentage',\n        type: 'gauge',\n        category: 'performance',\n        unit: 'percent',\n        value: Math.random() * 100,\n        tags: { host: 'localhost', service: 'system' },\n        source: 'system-monitor',\n        metadata: {},\n      });\n    } catch (error) {\n      this.logger.error('Failed to collect system metrics', { error });\n    }\n  }\n\n  private async collectApplicationMetrics(): Promise<void> {\n    try {\n      // Mock application metrics collection\n      await this.recordMetric({\n        name: 'response-time',\n        description: 'Average response time',\n        type: 'gauge',\n        category: 'performance',\n        unit: 'milliseconds',\n        value: Math.random() * 1000 + 100,\n        tags: { service: 'api', endpoint: '/users' },\n        source: 'application',\n        metadata: {},\n      });\n\n      await this.recordMetric({\n        name: 'request-rate',\n        description: 'Requests per second',\n        type: 'counter',\n        category: 'usage',\n        unit: 'requests/sec',\n        value: Math.random() * 100 + 10,\n        tags: { service: 'api' },\n        source: 'application',\n        metadata: {},\n      });\n\n      await this.recordMetric({\n        name: 'error-rate',\n        description: 'Error rate percentage',\n        type: 'gauge',\n        category: 'performance',\n        unit: 'percent',\n        value: Math.random() * 5,\n        tags: { service: 'api' },\n        source: 'application',\n        metadata: {},\n      });\n    } catch (error) {\n      this.logger.error('Failed to collect application metrics', { error });\n    }\n  }\n\n  private async persistMetric(metric: AnalyticsMetric): Promise<void> {\n    const date = metric.timestamp.toISOString().split('T')[0];\n    const filePath = join(this.analyticsPath, 'metrics', `${date}.json`);\n\n    try {\n      let existingData: AnalyticsMetric[] = [];\n      try {\n        const content = await readFile(filePath, 'utf-8');\n        existingData = JSON.parse(content);\n      } catch {\n        // File doesn't exist yet\n      }\n\n      existingData.push(metric);\n      await writeFile(filePath, JSON.stringify(existingData, null, 2));\n    } catch (error) {\n      this.logger.error('Failed to persist metric', { error, metric: metric.id });\n    }\n  }\n\n  private async checkForAnomalies(metricKey: string, metric: AnalyticsMetric): Promise<void> {\n    const historical = this.metrics.get(metricKey) || [];\n    if (historical.length < 10) return; // Need enough data for baseline\n\n    const recent = historical.slice(-10);\n    const average = recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n    const stdDev = Math.sqrt(\n      recent.reduce((sum, m) => sum + Math.pow(m.value - average, 2), 0) / recent.length,\n    );\n\n    const threshold = 2; // 2 standard deviations\n    const deviation = Math.abs(metric.value - average) / stdDev;\n\n    if (deviation > threshold) {\n      const insight: AnalyticsInsight = {\n        id: `insight-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        title: `Anomaly detected in ${metric.name}`,\n        description: `The metric ${metric.name} has deviated significantly from its normal pattern`,\n        type: 'anomaly',\n        category: metric.category,\n        confidence: Math.min(95, deviation * 20),\n        impact: deviation > 3 ? 'high' : 'medium',\n        priority: deviation > 3 ? 'high' : 'medium',\n        data: {\n          metrics: [metric.name],\n          timeRange: { start: recent[0].timestamp, end: metric.timestamp },\n          values: { current: metric.value, average, stdDev },\n          baseline: { average, stdDev },\n          deviation,\n        },\n        recommendations: [\n          {\n            action: 'Investigate the cause of the anomaly',\n            effort: 'medium',\n            impact: 'Identify potential issues before they become critical',\n            implementation: [\n              'Check recent deployments or configuration changes',\n              'Review system logs for errors or warnings',\n              'Monitor related metrics for correlation',\n            ],\n          },\n        ],\n        status: 'new',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      this.insights.set(insight.id, insight);\n      await this.saveInsight(insight);\n\n      this.emit('anomaly:detected', { metric, insight, deviation });\n      this.logger.warn(`Anomaly detected in ${metric.name}`, {\n        current: metric.value,\n        average,\n        deviation,\n      });\n    }\n  }\n\n  private async detectAnomalies(\n    timeRange: { start: Date; end: Date },\n    metrics?: string[],\n  ): Promise<AnalyticsInsight[]> {\n    // Simplified anomaly detection\n    return [];\n  }\n\n  private async analyzeTrends(\n    timeRange: { start: Date; end: Date },\n    metrics?: string[],\n  ): Promise<AnalyticsInsight[]> {\n    // Simplified trend analysis\n    return [];\n  }\n\n  private async analyzePerformance(timeRange: {\n    start: Date;\n    end: Date;\n  }): Promise<AnalyticsInsight[]> {\n    const insights: AnalyticsInsight[] = [];\n\n    // Check response time trends\n    const responseTimeData = await this.queryMetrics({\n      metrics: ['response-time'],\n      timeRange,\n      aggregation: 'avg',\n    });\n\n    if (responseTimeData['response-time']?.length > 0) {\n      const values = responseTimeData['response-time'].map((d: any) => d.value);\n      const recent = values.slice(-5);\n      const earlier = values.slice(0, -5);\n\n      if (recent.length > 0 && earlier.length > 0) {\n        const recentAvg = recent.reduce((sum, v) => sum + v, 0) / recent.length;\n        const earlierAvg = earlier.reduce((sum, v) => sum + v, 0) / earlier.length;\n        const change = ((recentAvg - earlierAvg) / earlierAvg) * 100;\n\n        if (Math.abs(change) > 20) {\n          insights.push({\n            id: `perf-insight-${Date.now()}`,\n            title: `Response time ${change > 0 ? 'increased' : 'decreased'} by ${Math.abs(change).toFixed(1)}%`,\n            description: `Response time has changed significantly in the recent period`,\n            type: 'trend',\n            category: 'performance',\n            confidence: 80,\n            impact: Math.abs(change) > 50 ? 'high' : 'medium',\n            priority: Math.abs(change) > 50 ? 'high' : 'medium',\n            data: {\n              metrics: ['response-time'],\n              timeRange,\n              values: { recent: recentAvg, earlier: earlierAvg, change },\n            },\n            recommendations:\n              change > 0\n                ? [\n                    {\n                      action: 'Investigate performance degradation',\n                      effort: 'medium',\n                      impact: 'Restore optimal response times',\n                      implementation: [\n                        'Check for increased load or traffic',\n                        'Review recent code deployments',\n                        'Analyze database query performance',\n                        'Monitor resource utilization',\n                      ],\n                    },\n                  ]\n                : [\n                    {\n                      action: 'Document performance improvement',\n                      effort: 'low',\n                      impact: 'Understand what caused the improvement',\n                      implementation: [\n                        'Identify recent optimizations',\n                        'Document best practices',\n                        'Monitor sustainability',\n                      ],\n                    },\n                  ],\n            status: 'new',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          });\n        }\n      }\n    }\n\n    return insights;\n  }\n\n  private async analyzeUsage(timeRange: { start: Date; end: Date }): Promise<AnalyticsInsight[]> {\n    // Simplified usage analysis\n    return [];\n  }\n\n  private async analyzeCostOptimization(timeRange: {\n    start: Date;\n    end: Date;\n  }): Promise<AnalyticsInsight[]> {\n    // Simplified cost optimization analysis\n    return [];\n  }\n\n  private async collectTrainingData(model: PredictiveModel): Promise<any[]> {\n    // Collect historical data for training\n    const data = await this.queryMetrics({\n      metrics: model.features,\n      timeRange: model.trainingData.timeRange,\n      aggregation: 'avg',\n    });\n\n    // Transform data for ML training (simplified)\n    return Object.values(data).flat();\n  }\n\n  private async executeModelTraining(\n    model: PredictiveModel,\n    data: any[],\n  ): Promise<Partial<PredictiveModel>> {\n    // Simplified model training\n    return {\n      accuracy: 85 + Math.random() * 10,\n      confidence: 80 + Math.random() * 15,\n      performance: {\n        precision: 0.85,\n        recall: 0.82,\n        f1Score: 0.83,\n      },\n      trainingData: {\n        ...model.trainingData,\n        samples: data.length,\n      },\n    };\n  }\n\n  private async executePrediction(\n    model: PredictiveModel,\n    input: Record<string, any>,\n  ): Promise<{ value: any; confidence: number }> {\n    // Simplified prediction logic\n    const value = Math.random() * 100;\n    const confidence = 70 + Math.random() * 25;\n\n    return { value, confidence };\n  }\n\n  private groupMetrics(\n    metrics: AnalyticsMetric[],\n    groupBy: string[],\n  ): Record<string, AnalyticsMetric[]> {\n    const groups: Record<string, AnalyticsMetric[]> = {};\n\n    for (const metric of metrics) {\n      const key = groupBy\n        .map((field) => {\n          if (field === 'tags') {\n            return Object.entries(metric.tags)\n              .map(([k, v]) => `${k}:${v}`)\n              .join(',');\n          }\n          return (metric as any)[field] || 'unknown';\n        })\n        .join('-');\n\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(metric);\n    }\n\n    return groups;\n  }\n\n  private aggregateMetrics(metrics: AnalyticsMetric[], aggregation: string): any[] {\n    if (metrics.length === 0) return [];\n\n    // Group by time buckets for time series aggregation\n    const buckets: Record<string, AnalyticsMetric[]> = {};\n\n    for (const metric of metrics) {\n      const bucket = new Date(Math.floor(metric.timestamp.getTime() / 60000) * 60000).toISOString();\n      if (!buckets[bucket]) {\n        buckets[bucket] = [];\n      }\n      buckets[bucket].push(metric);\n    }\n\n    return Object.entries(buckets)\n      .map(([timestamp, bucketMetrics]) => {\n        const values = bucketMetrics.map((m) => m.value);\n        let aggregatedValue: number;\n\n        switch (aggregation) {\n          case 'sum':\n            aggregatedValue = values.reduce((sum, v) => sum + v, 0);\n            break;\n          case 'min':\n            aggregatedValue = Math.min(...values);\n            break;\n          case 'max':\n            aggregatedValue = Math.max(...values);\n            break;\n          case 'count':\n            aggregatedValue = values.length;\n            break;\n          case 'p95':\n            values.sort((a, b) => a - b);\n            aggregatedValue = values[Math.floor(values.length * 0.95)];\n            break;\n          case 'p99':\n            values.sort((a, b) => a - b);\n            aggregatedValue = values[Math.floor(values.length * 0.99)];\n            break;\n          case 'avg':\n          default:\n            aggregatedValue = values.reduce((sum, v) => sum + v, 0) / values.length;\n        }\n\n        return {\n          timestamp: new Date(timestamp),\n          value: aggregatedValue,\n          count: values.length,\n        };\n      })\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  private getLatestValue(dataPoints: any[]): number {\n    if (!dataPoints || dataPoints.length === 0) return 0;\n    return dataPoints[dataPoints.length - 1]?.value || 0;\n  }\n\n  private async saveDashboard(dashboard: AnalyticsDashboard): Promise<void> {\n    const filePath = join(this.analyticsPath, 'dashboards', `${dashboard.id}.json`);\n    await writeFile(filePath, JSON.stringify(dashboard, null, 2));\n  }\n\n  private async saveInsight(insight: AnalyticsInsight): Promise<void> {\n    const filePath = join(this.analyticsPath, 'insights', `${insight.id}.json`);\n    await writeFile(filePath, JSON.stringify(insight, null, 2));\n  }\n\n  private async saveModel(model: PredictiveModel): Promise<void> {\n    const filePath = join(this.analyticsPath, 'models', `${model.id}.json`);\n    await writeFile(filePath, JSON.stringify(model, null, 2));\n  }\n}\n"],"names":["EventEmitter","writeFile","readFile","mkdir","readdir","join","Logger","ConfigManager","AnalyticsManager","metrics","Map","dashboards","insights","models","reports","analyticsPath","logger","config","configuration","level","format","destination","getInstance","getDefaultConfiguration","initialize","recursive","loadConfigurations","initializeDefaultDashboards","startMetricsCollection","info","error","recordMetric","metric","fullMetric","id","Date","now","Math","random","toString","substr","timestamp","key","category","name","has","set","metricArray","get","push","retentionPeriod","cutoff","filteredMetrics","filter","m","getTime","persistMetric","emit","checkForAnomalies","queryMetrics","query","results","metricName","includes","matchingKeys","Array","from","keys","k","replace","allMetrics","keyMetrics","timeRange","start","end","filters","field","value","Object","entries","every","v","tags","groupBy","length","grouped","groupMetrics","group","aggregated","aggregateMetrics","aggregation","createDashboard","dashboardData","dashboard","description","type","widgets","map","widget","index","layout","columns","rows","grid","responsive","permissions","viewers","editors","public","schedule","autoRefresh","refreshInterval","createdAt","updatedAt","createdBy","saveDashboard","generateInsights","scope","anomalies","detectAnomalies","trends","analyzeTrends","performance","analyzePerformance","usage","analyzeUsage","costOptimizations","analyzeCostOptimization","insight","saveInsight","trainPredictiveModel","modelConfig","model","algorithm","features","target","accuracy","confidence","trainedAt","trainingData","samples","trainingPeriod","precision","recall","f1Score","predictions","status","collectTrainingData","trained","executeModelTraining","assign","saveModel","makePrediction","modelId","input","Error","prediction","executePrediction","result","lastPrediction","debug","JSON","stringify","getPerformanceMetrics","range","systemMetrics","appMetrics","dbMetrics","system","cpu","getLatestValue","cores","loadAverage","memory","used","free","total","disk","iops","network","bytesIn","bytesOut","packetsIn","packetsOut","errors","application","responseTime","avg","p50","p95","p99","throughput","requestsPerSecond","transactionsPerSecond","rate","count","types","availability","uptime","sla","incidents","database","connections","active","idle","max","queries","avgExecutionTime","slowQueries","deadlocks","storage","size","growth","fragmentation","infrastructure","containers","running","stopped","restarts","services","healthy","unhealthy","degraded","getUsageMetrics","usageData","users","new","returning","churn","sessions","duration","median","bounceRate","pagesPerSession","adoption","retention","analytics","mostUsed","leastUsed","api","calls","uniqueConsumers","avgResponseTime","errorRate","rateLimits","hit","consumed","content","created","modified","deleted","views","getBusinessMetrics","revenue","recurring","arpu","ltv","customers","retained","churned","satisfaction","conversion","leads","qualified","opportunities","closed","support","tickets","resolved","avgResolutionTime","collection","enabled","samplingRate","batchSize","flushInterval","raw","summary","compression","encryption","processing","realTime","batchProcessing","aggregationIntervals","alerts","channels","escalation","levels","intervals","privacy","anonymization","gdprCompliant","dataMinimization","integrations","dashboardFiles","file","f","endsWith","parse","insightFiles","modelFiles","warn","defaultDashboards","title","position","x","y","width","height","dataSource","visualization","chartType","options","unit","thresholds","warning","critical","conditions","values","some","d","setInterval","collectSystemMetrics","collectApplicationMetrics","host","service","source","metadata","endpoint","date","toISOString","split","filePath","existingData","metricKey","historical","recent","slice","average","reduce","sum","stdDev","sqrt","pow","threshold","deviation","abs","min","impact","priority","data","current","baseline","recommendations","action","effort","implementation","responseTimeData","earlier","recentAvg","earlierAvg","change","toFixed","flat","groups","buckets","bucket","floor","bucketMetrics","aggregatedValue","sort","a","b","dataPoints"],"mappings":"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"}