{"version":3,"sources":["../../../src/enterprise/project-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { writeFile, readFile, mkdir, readdir, stat } from 'fs/promises';\nimport { join } from 'path';\nimport { Logger } from '../core/logger.js';\nimport { ConfigManager } from '../core/config.js';\n\nexport interface ProjectPhase {\n  id: string;\n  name: string;\n  description: string;\n  status: 'planned' | 'in-progress' | 'completed' | 'blocked' | 'cancelled';\n  startDate?: Date;\n  endDate?: Date;\n  estimatedDuration: number; // in hours\n  actualDuration?: number;\n  dependencies: string[];\n  assignedTeam: string[];\n  deliverables: string[];\n  risks: ProjectRisk[];\n  milestones: ProjectMilestone[];\n  budget: {\n    estimated: number;\n    actual: number;\n    currency: string;\n  };\n  resources: ProjectResource[];\n  completionPercentage: number;\n  qualityMetrics: {\n    testCoverage: number;\n    codeQuality: number;\n    documentation: number;\n    securityScore: number;\n  };\n}\n\nexport interface ProjectRisk {\n  id: string;\n  description: string;\n  probability: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high';\n  mitigation: string;\n  status: 'open' | 'mitigated' | 'closed';\n  assignedTo: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ProjectMilestone {\n  id: string;\n  name: string;\n  description: string;\n  targetDate: Date;\n  actualDate?: Date;\n  status: 'pending' | 'achieved' | 'missed' | 'at-risk';\n  dependencies: string[];\n  deliverables: string[];\n  successCriteria: string[];\n}\n\nexport interface ProjectResource {\n  id: string;\n  name: string;\n  type: 'human' | 'infrastructure' | 'software' | 'hardware';\n  availability: number; // percentage\n  cost: {\n    amount: number;\n    currency: string;\n    period: 'hour' | 'day' | 'week' | 'month';\n  };\n  skills: string[];\n  allocation: {\n    phaseId: string;\n    percentage: number;\n    startDate: Date;\n    endDate: Date;\n  }[];\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  type: 'web-app' | 'api' | 'microservice' | 'infrastructure' | 'research' | 'migration' | 'custom';\n  status: 'planning' | 'active' | 'on-hold' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  owner: string;\n  stakeholders: string[];\n  phases: ProjectPhase[];\n  budget: {\n    total: number;\n    spent: number;\n    remaining: number;\n    currency: string;\n  };\n  timeline: {\n    plannedStart: Date;\n    plannedEnd: Date;\n    actualStart?: Date;\n    actualEnd?: Date;\n  };\n  tags: string[];\n  metadata: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n  auditLog: ProjectAuditEntry[];\n  collaboration: {\n    teamMembers: TeamMember[];\n    communication: CommunicationChannel[];\n    sharedResources: string[];\n  };\n  qualityGates: QualityGate[];\n  complianceRequirements: ComplianceRequirement[];\n}\n\nexport interface TeamMember {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  skills: string[];\n  availability: number;\n  permissions: string[];\n  joinDate: Date;\n  status: 'active' | 'inactive' | 'on-leave';\n}\n\nexport interface CommunicationChannel {\n  id: string;\n  name: string;\n  type: 'slack' | 'teams' | 'email' | 'webhook' | 'custom';\n  configuration: Record<string, any>;\n  isActive: boolean;\n}\n\nexport interface QualityGate {\n  id: string;\n  name: string;\n  phase: string;\n  criteria: {\n    metric: string;\n    threshold: number;\n    operator: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  }[];\n  status: 'pending' | 'passed' | 'failed' | 'skipped';\n  executedAt?: Date;\n  results: Record<string, number>;\n}\n\nexport interface ComplianceRequirement {\n  id: string;\n  name: string;\n  framework: string; // e.g., 'SOC2', 'GDPR', 'HIPAA', 'PCI-DSS'\n  description: string;\n  status: 'not-started' | 'in-progress' | 'compliant' | 'non-compliant';\n  evidence: string[];\n  reviewer: string;\n  reviewDate?: Date;\n  dueDate: Date;\n}\n\nexport interface ProjectAuditEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  target: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface ProjectMetrics {\n  totalProjects: number;\n  activeProjects: number;\n  completedProjects: number;\n  averageProjectDuration: number;\n  budgetVariance: number;\n  resourceUtilization: number;\n  qualityScore: number;\n  riskScore: number;\n  teamProductivity: number;\n  customerSatisfaction: number;\n}\n\nexport interface ProjectReport {\n  id: string;\n  projectId: string;\n  type: 'status' | 'financial' | 'quality' | 'risk' | 'resource' | 'compliance';\n  title: string;\n  summary: string;\n  details: Record<string, any>;\n  recommendations: string[];\n  generatedAt: Date;\n  generatedBy: string;\n  format: 'json' | 'pdf' | 'html' | 'csv';\n  recipients: string[];\n}\n\nexport class ProjectManager extends EventEmitter {\n  private projects: Map<string, Project> = new Map();\n  private projectsPath: string;\n  private logger: Logger;\n  private config: ConfigManager;\n\n  constructor(projectsPath: string = './projects', logger?: Logger, config?: ConfigManager) {\n    super();\n    this.projectsPath = projectsPath;\n    this.logger = logger || new Logger({ level: 'info', format: 'text', destination: 'console' });\n    this.config = config || ConfigManager.getInstance();\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.projectsPath, { recursive: true });\n      await this.loadProjects();\n      this.logger.info('Project Manager initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Project Manager', { error });\n      throw error;\n    }\n  }\n\n  async createProject(projectData: Partial<Project>): Promise<Project> {\n    const project: Project = {\n      id: projectData.id || `project-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: projectData.name || 'Unnamed Project',\n      description: projectData.description || '',\n      type: projectData.type || 'custom',\n      status: 'planning',\n      priority: projectData.priority || 'medium',\n      owner: projectData.owner || 'system',\n      stakeholders: projectData.stakeholders || [],\n      phases: projectData.phases || [],\n      budget: projectData.budget || {\n        total: 0,\n        spent: 0,\n        remaining: 0,\n        currency: 'USD',\n      },\n      timeline: {\n        plannedStart: projectData.timeline?.plannedStart || new Date(),\n        plannedEnd:\n          projectData.timeline?.plannedEnd || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n        actualStart: projectData.timeline?.actualStart,\n        actualEnd: projectData.timeline?.actualEnd,\n      },\n      tags: projectData.tags || [],\n      metadata: projectData.metadata || {},\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      auditLog: [],\n      collaboration: {\n        teamMembers: [],\n        communication: [],\n        sharedResources: [],\n      },\n      qualityGates: [],\n      complianceRequirements: [],\n    };\n\n    // Add initial audit entry\n    this.addAuditEntry(project, 'system', 'project_created', 'project', {\n      projectId: project.id,\n      projectName: project.name,\n    });\n\n    this.projects.set(project.id, project);\n    await this.saveProject(project);\n\n    this.emit('project:created', project);\n    this.logger.info(`Project created: ${project.name} (${project.id})`);\n\n    return project;\n  }\n\n  async updateProject(projectId: string, updates: Partial<Project>): Promise<Project> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    const updatedProject = { ...project, ...updates, updatedAt: new Date() };\n\n    // Add audit entry\n    this.addAuditEntry(updatedProject, 'system', 'project_updated', 'project', {\n      projectId,\n      changes: Object.keys(updates),\n    });\n\n    this.projects.set(projectId, updatedProject);\n    await this.saveProject(updatedProject);\n\n    this.emit('project:updated', updatedProject);\n    this.logger.info(`Project updated: ${project.name} (${projectId})`);\n\n    return updatedProject;\n  }\n\n  async deleteProject(projectId: string, userId: string = 'system'): Promise<void> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    // Add audit entry before deletion\n    this.addAuditEntry(project, userId, 'project_deleted', 'project', {\n      projectId,\n      projectName: project.name,\n    });\n\n    this.projects.delete(projectId);\n\n    // Archive project instead of deleting\n    const archivePath = join(this.projectsPath, 'archived');\n    await mkdir(archivePath, { recursive: true });\n    await writeFile(join(archivePath, `${projectId}.json`), JSON.stringify(project, null, 2));\n\n    this.emit('project:deleted', { projectId, project });\n    this.logger.info(`Project archived: ${project.name} (${projectId})`);\n  }\n\n  async getProject(projectId: string): Promise<Project | null> {\n    return this.projects.get(projectId) || null;\n  }\n\n  async listProjects(filters?: {\n    status?: Project['status'];\n    type?: Project['type'];\n    priority?: Project['priority'];\n    owner?: string;\n    tags?: string[];\n  }): Promise<Project[]> {\n    let projects = Array.from(this.projects.values());\n\n    if (filters) {\n      if (filters.status) {\n        projects = projects.filter((p) => p.status === filters.status);\n      }\n      if (filters.type) {\n        projects = projects.filter((p) => p.type === filters.type);\n      }\n      if (filters.priority) {\n        projects = projects.filter((p) => p.priority === filters.priority);\n      }\n      if (filters.owner) {\n        projects = projects.filter((p) => p.owner === filters.owner);\n      }\n      if (filters.tags && filters.tags.length > 0) {\n        projects = projects.filter((p) => filters.tags!.some((tag) => p.tags.includes(tag)));\n      }\n    }\n\n    return projects.sort(\n      (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(),\n    );\n  }\n\n  async addPhase(projectId: string, phase: Omit<ProjectPhase, 'id'>): Promise<ProjectPhase> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    const newPhase: ProjectPhase = {\n      id: `phase-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      ...phase,\n    };\n\n    project.phases.push(newPhase);\n    project.updatedAt = new Date();\n\n    this.addAuditEntry(project, 'system', 'phase_added', 'phase', {\n      projectId,\n      phaseId: newPhase.id,\n      phaseName: newPhase.name,\n    });\n\n    await this.saveProject(project);\n    this.emit('phase:added', { project, phase: newPhase });\n\n    return newPhase;\n  }\n\n  async updatePhase(\n    projectId: string,\n    phaseId: string,\n    updates: Partial<ProjectPhase>,\n  ): Promise<ProjectPhase> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    const phaseIndex = project.phases.findIndex((p) => p.id === phaseId);\n    if (phaseIndex === -1) {\n      throw new Error(`Phase not found: ${phaseId}`);\n    }\n\n    const updatedPhase = { ...project.phases[phaseIndex], ...updates };\n    project.phases[phaseIndex] = updatedPhase;\n    project.updatedAt = new Date();\n\n    this.addAuditEntry(project, 'system', 'phase_updated', 'phase', {\n      projectId,\n      phaseId,\n      changes: Object.keys(updates),\n    });\n\n    await this.saveProject(project);\n    this.emit('phase:updated', { project, phase: updatedPhase });\n\n    return updatedPhase;\n  }\n\n  async addTeamMember(projectId: string, member: TeamMember): Promise<void> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    project.collaboration.teamMembers.push(member);\n    project.updatedAt = new Date();\n\n    this.addAuditEntry(project, 'system', 'team_member_added', 'team', {\n      projectId,\n      memberId: member.id,\n      memberName: member.name,\n    });\n\n    await this.saveProject(project);\n    this.emit('team:member_added', { project, member });\n  }\n\n  async removeTeamMember(projectId: string, memberId: string): Promise<void> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    const memberIndex = project.collaboration.teamMembers.findIndex((m) => m.id === memberId);\n    if (memberIndex === -1) {\n      throw new Error(`Team member not found: ${memberId}`);\n    }\n\n    const member = project.collaboration.teamMembers[memberIndex];\n    project.collaboration.teamMembers.splice(memberIndex, 1);\n    project.updatedAt = new Date();\n\n    this.addAuditEntry(project, 'system', 'team_member_removed', 'team', {\n      projectId,\n      memberId,\n      memberName: member.name,\n    });\n\n    await this.saveProject(project);\n    this.emit('team:member_removed', { project, memberId });\n  }\n\n  async getProjectMetrics(projectId?: string): Promise<ProjectMetrics> {\n    const projects = projectId\n      ? ([this.projects.get(projectId)].filter(Boolean) as Project[])\n      : Array.from(this.projects.values());\n\n    const totalProjects = projects.length;\n    const activeProjects = projects.filter((p) => p.status === 'active').length;\n    const completedProjects = projects.filter((p) => p.status === 'completed').length;\n\n    const completedProjectsWithDuration = projects.filter(\n      (p) => p.status === 'completed' && p.timeline.actualStart && p.timeline.actualEnd,\n    );\n\n    const averageProjectDuration =\n      completedProjectsWithDuration.length > 0\n        ? completedProjectsWithDuration.reduce((sum, p) => {\n            const duration = p.timeline.actualEnd!.getTime() - p.timeline.actualStart!.getTime();\n            return sum + duration / (1000 * 60 * 60 * 24); // Convert to days\n          }, 0) / completedProjectsWithDuration.length\n        : 0;\n\n    const budgetVariance =\n      projects.reduce((sum, p) => {\n        if (p.budget.total > 0) {\n          return sum + (p.budget.spent - p.budget.total) / p.budget.total;\n        }\n        return sum;\n      }, 0) / Math.max(projects.length, 1);\n\n    const resourceUtilization =\n      projects.reduce((sum, p) => {\n        const totalResources = p.phases.reduce(\n          (phaseSum, phase) => phaseSum + phase.resources.length,\n          0,\n        );\n        const utilizedResources = p.phases.reduce(\n          (phaseSum, phase) => phaseSum + phase.resources.filter((r) => r.availability > 0).length,\n          0,\n        );\n        return sum + (totalResources > 0 ? utilizedResources / totalResources : 0);\n      }, 0) / Math.max(projects.length, 1);\n\n    const qualityScore =\n      projects.reduce((sum, p) => {\n        const phaseQuality =\n          p.phases.reduce((phaseSum, phase) => {\n            const metrics = phase.qualityMetrics;\n            return (\n              phaseSum +\n              (metrics.testCoverage +\n                metrics.codeQuality +\n                metrics.documentation +\n                metrics.securityScore) /\n                4\n            );\n          }, 0) / Math.max(p.phases.length, 1);\n        return sum + phaseQuality;\n      }, 0) / Math.max(projects.length, 1);\n\n    return {\n      totalProjects,\n      activeProjects,\n      completedProjects,\n      averageProjectDuration,\n      budgetVariance,\n      resourceUtilization,\n      qualityScore,\n      riskScore: 0, // Calculate based on risk assessment\n      teamProductivity: 0, // Calculate based on velocity metrics\n      customerSatisfaction: 0, // Calculate based on feedback\n    };\n  }\n\n  async generateReport(\n    projectId: string,\n    type: ProjectReport['type'],\n    userId: string = 'system',\n  ): Promise<ProjectReport> {\n    const project = this.projects.get(projectId);\n    if (!project) {\n      throw new Error(`Project not found: ${projectId}`);\n    }\n\n    const report: ProjectReport = {\n      id: `report-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      projectId,\n      type,\n      title: `${type.toUpperCase()} Report - ${project.name}`,\n      summary: '',\n      details: {},\n      recommendations: [],\n      generatedAt: new Date(),\n      generatedBy: userId,\n      format: 'json',\n      recipients: [],\n    };\n\n    switch (type) {\n      case 'status':\n        report.summary = `Project ${project.name} is currently ${project.status}`;\n        report.details = {\n          status: project.status,\n          progress: this.calculateProjectProgress(project),\n          phases: project.phases.map((p) => ({\n            name: p.name,\n            status: p.status,\n            completion: p.completionPercentage,\n          })),\n          timeline: project.timeline,\n          nextMilestones: this.getUpcomingMilestones(project),\n        };\n        break;\n\n      case 'financial':\n        report.summary = `Budget utilization: ${((project.budget.spent / project.budget.total) * 100).toFixed(1)}%`;\n        report.details = {\n          budget: project.budget,\n          costBreakdown: this.calculateCostBreakdown(project),\n          variance: project.budget.spent - project.budget.total,\n          projectedCost: this.projectFinalCost(project),\n        };\n        break;\n\n      case 'quality':\n        const qualityMetrics = this.calculateQualityMetrics(project);\n        report.summary = `Overall quality score: ${qualityMetrics.overall.toFixed(1)}%`;\n        report.details = {\n          qualityMetrics,\n          qualityGates: project.qualityGates,\n          recommendations: this.generateQualityRecommendations(project),\n        };\n        break;\n\n      case 'risk':\n        const risks = this.getAllRisks(project);\n        report.summary = `${risks.filter((r) => r.status === 'open').length} open risks identified`;\n        report.details = {\n          risks,\n          riskMatrix: this.generateRiskMatrix(risks),\n          mitigation: this.generateRiskMitigation(risks),\n        };\n        break;\n\n      case 'resource':\n        report.summary = `${project.collaboration.teamMembers.length} team members, ${this.getTotalResources(project)} resources allocated`;\n        report.details = {\n          teamMembers: project.collaboration.teamMembers,\n          resourceAllocation: this.calculateResourceAllocation(project),\n          utilization: this.calculateResourceUtilization(project),\n          capacity: this.calculateCapacity(project),\n        };\n        break;\n\n      case 'compliance':\n        const compliance = this.calculateComplianceStatus(project);\n        report.summary = `${compliance.compliant} of ${compliance.total} requirements met`;\n        report.details = {\n          requirements: project.complianceRequirements,\n          status: compliance,\n          gaps: this.identifyComplianceGaps(project),\n          recommendations: this.generateComplianceRecommendations(project),\n        };\n        break;\n    }\n\n    this.addAuditEntry(project, userId, 'report_generated', 'report', {\n      projectId,\n      reportId: report.id,\n      reportType: type,\n    });\n\n    this.emit('report:generated', { project, report });\n    return report;\n  }\n\n  private async loadProjects(): Promise<void> {\n    try {\n      const files = await readdir(this.projectsPath);\n      const projectFiles = files.filter((f) => f.endsWith('.json') && !f.startsWith('.'));\n\n      for (const file of projectFiles) {\n        try {\n          const content = await readFile(join(this.projectsPath, file), 'utf-8');\n          const project: Project = JSON.parse(content);\n          this.projects.set(project.id, project);\n        } catch (error) {\n          this.logger.error(`Failed to load project file: ${file}`, { error });\n        }\n      }\n\n      this.logger.info(`Loaded ${this.projects.size} projects`);\n    } catch (error) {\n      this.logger.error('Failed to load projects', { error });\n    }\n  }\n\n  private async saveProject(project: Project): Promise<void> {\n    const filePath = join(this.projectsPath, `${project.id}.json`);\n    await writeFile(filePath, JSON.stringify(project, null, 2));\n  }\n\n  private addAuditEntry(\n    project: Project,\n    userId: string,\n    action: string,\n    target: string,\n    details: Record<string, any>,\n  ): void {\n    const entry: ProjectAuditEntry = {\n      id: `audit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      userId,\n      action,\n      target,\n      details,\n    };\n\n    project.auditLog.push(entry);\n  }\n\n  private calculateProjectProgress(project: Project): number {\n    if (project.phases.length === 0) return 0;\n\n    const totalProgress = project.phases.reduce(\n      (sum, phase) => sum + phase.completionPercentage,\n      0,\n    );\n\n    return totalProgress / project.phases.length;\n  }\n\n  private getUpcomingMilestones(project: Project): ProjectMilestone[] {\n    const allMilestones = project.phases.flatMap((p) => p.milestones);\n    const now = new Date();\n\n    return allMilestones\n      .filter((m) => m.status === 'pending' && m.targetDate > now)\n      .sort((a, b) => a.targetDate.getTime() - b.targetDate.getTime())\n      .slice(0, 5);\n  }\n\n  private calculateCostBreakdown(project: Project): Record<string, number> {\n    const breakdown: Record<string, number> = {};\n\n    for (const phase of project.phases) {\n      for (const resource of phase.resources) {\n        const category = resource.type;\n        const cost = resource.cost.amount;\n        breakdown[category] = (breakdown[category] || 0) + cost;\n      }\n    }\n\n    return breakdown;\n  }\n\n  private projectFinalCost(project: Project): number {\n    const progress = this.calculateProjectProgress(project);\n    if (progress === 0) return project.budget.total;\n\n    return (project.budget.spent / progress) * 100;\n  }\n\n  private calculateQualityMetrics(project: Project): any {\n    const allMetrics = project.phases.map((p) => p.qualityMetrics);\n    if (allMetrics.length === 0) {\n      return { overall: 0, testCoverage: 0, codeQuality: 0, documentation: 0, securityScore: 0 };\n    }\n\n    const averages = {\n      testCoverage: allMetrics.reduce((sum, m) => sum + m.testCoverage, 0) / allMetrics.length,\n      codeQuality: allMetrics.reduce((sum, m) => sum + m.codeQuality, 0) / allMetrics.length,\n      documentation: allMetrics.reduce((sum, m) => sum + m.documentation, 0) / allMetrics.length,\n      securityScore: allMetrics.reduce((sum, m) => sum + m.securityScore, 0) / allMetrics.length,\n    };\n\n    const overall =\n      (averages.testCoverage +\n        averages.codeQuality +\n        averages.documentation +\n        averages.securityScore) /\n      4;\n\n    return { overall, ...averages };\n  }\n\n  private generateQualityRecommendations(project: Project): string[] {\n    const recommendations: string[] = [];\n    const metrics = this.calculateQualityMetrics(project);\n\n    if (metrics.testCoverage < 80) {\n      recommendations.push('Increase test coverage to at least 80%');\n    }\n    if (metrics.codeQuality < 70) {\n      recommendations.push('Improve code quality through refactoring and code reviews');\n    }\n    if (metrics.documentation < 60) {\n      recommendations.push('Enhance documentation coverage for better maintainability');\n    }\n    if (metrics.securityScore < 85) {\n      recommendations.push(\n        'Address security vulnerabilities and implement security best practices',\n      );\n    }\n\n    return recommendations;\n  }\n\n  private getAllRisks(project: Project): ProjectRisk[] {\n    return project.phases.flatMap((p) => p.risks);\n  }\n\n  private generateRiskMatrix(risks: ProjectRisk[]): any {\n    const matrix = {\n      low: { low: 0, medium: 0, high: 0 },\n      medium: { low: 0, medium: 0, high: 0 },\n      high: { low: 0, medium: 0, high: 0 },\n    };\n\n    for (const risk of risks) {\n      if (risk.status === 'open') {\n        matrix[risk.probability][risk.impact]++;\n      }\n    }\n\n    return matrix;\n  }\n\n  private generateRiskMitigation(risks: ProjectRisk[]): any {\n    const openRisks = risks.filter((r) => r.status === 'open');\n    const highPriorityRisks = openRisks.filter(\n      (r) =>\n        (r.probability === 'high' && r.impact === 'high') ||\n        (r.probability === 'high' && r.impact === 'medium') ||\n        (r.probability === 'medium' && r.impact === 'high'),\n    );\n\n    return {\n      totalRisks: risks.length,\n      openRisks: openRisks.length,\n      highPriorityRisks: highPriorityRisks.length,\n      mitigationActions: highPriorityRisks.map((r) => ({\n        risk: r.description,\n        mitigation: r.mitigation,\n        assignedTo: r.assignedTo,\n      })),\n    };\n  }\n\n  private getTotalResources(project: Project): number {\n    return project.phases.reduce((sum, phase) => sum + phase.resources.length, 0);\n  }\n\n  private calculateResourceAllocation(project: Project): any {\n    const allocation: Record<string, number> = {};\n\n    for (const phase of project.phases) {\n      for (const resource of phase.resources) {\n        allocation[resource.type] = (allocation[resource.type] || 0) + 1;\n      }\n    }\n\n    return allocation;\n  }\n\n  private calculateResourceUtilization(project: Project): any {\n    const utilization: Record<string, number> = {};\n\n    for (const phase of project.phases) {\n      for (const resource of phase.resources) {\n        utilization[resource.type] = (utilization[resource.type] || 0) + resource.availability;\n      }\n    }\n\n    return utilization;\n  }\n\n  private calculateCapacity(project: Project): any {\n    const teamSize = project.collaboration.teamMembers.length;\n    const totalAvailability = project.collaboration.teamMembers.reduce(\n      (sum, member) => sum + member.availability,\n      0,\n    );\n\n    return {\n      teamSize,\n      totalAvailability,\n      averageAvailability: teamSize > 0 ? totalAvailability / teamSize : 0,\n    };\n  }\n\n  private calculateComplianceStatus(project: Project): any {\n    const requirements = project.complianceRequirements;\n    const total = requirements.length;\n    const compliant = requirements.filter((r) => r.status === 'compliant').length;\n    const inProgress = requirements.filter((r) => r.status === 'in-progress').length;\n    const nonCompliant = requirements.filter((r) => r.status === 'non-compliant').length;\n\n    return {\n      total,\n      compliant,\n      inProgress,\n      nonCompliant,\n      compliancePercentage: total > 0 ? (compliant / total) * 100 : 0,\n    };\n  }\n\n  private identifyComplianceGaps(project: Project): ComplianceRequirement[] {\n    return project.complianceRequirements.filter(\n      (r) => r.status === 'not-started' || r.status === 'non-compliant',\n    );\n  }\n\n  private generateComplianceRecommendations(project: Project): string[] {\n    const gaps = this.identifyComplianceGaps(project);\n    const recommendations: string[] = [];\n\n    for (const gap of gaps) {\n      recommendations.push(\n        `Address ${gap.framework} requirement: ${gap.name} (Due: ${gap.dueDate.toLocaleDateString()})`,\n      );\n    }\n\n    return recommendations;\n  }\n}\n"],"names":["EventEmitter","writeFile","readFile","mkdir","readdir","join","Logger","ConfigManager","ProjectManager","projects","Map","projectsPath","logger","config","level","format","destination","getInstance","initialize","recursive","loadProjects","info","error","createProject","projectData","project","id","Date","now","Math","random","toString","substr","name","description","type","status","priority","owner","stakeholders","phases","budget","total","spent","remaining","currency","timeline","plannedStart","plannedEnd","actualStart","actualEnd","tags","metadata","createdAt","updatedAt","auditLog","collaboration","teamMembers","communication","sharedResources","qualityGates","complianceRequirements","addAuditEntry","projectId","projectName","set","saveProject","emit","updateProject","updates","get","Error","updatedProject","changes","Object","keys","deleteProject","userId","delete","archivePath","JSON","stringify","getProject","listProjects","filters","Array","from","values","filter","p","length","some","tag","includes","sort","a","b","getTime","addPhase","phase","newPhase","push","phaseId","phaseName","updatePhase","phaseIndex","findIndex","updatedPhase","addTeamMember","member","memberId","memberName","removeTeamMember","memberIndex","m","splice","getProjectMetrics","Boolean","totalProjects","activeProjects","completedProjects","completedProjectsWithDuration","averageProjectDuration","reduce","sum","duration","budgetVariance","max","resourceUtilization","totalResources","phaseSum","resources","utilizedResources","r","availability","qualityScore","phaseQuality","metrics","qualityMetrics","testCoverage","codeQuality","documentation","securityScore","riskScore","teamProductivity","customerSatisfaction","generateReport","report","title","toUpperCase","summary","details","recommendations","generatedAt","generatedBy","recipients","progress","calculateProjectProgress","map","completion","completionPercentage","nextMilestones","getUpcomingMilestones","toFixed","costBreakdown","calculateCostBreakdown","variance","projectedCost","projectFinalCost","calculateQualityMetrics","overall","generateQualityRecommendations","risks","getAllRisks","riskMatrix","generateRiskMatrix","mitigation","generateRiskMitigation","getTotalResources","resourceAllocation","calculateResourceAllocation","utilization","calculateResourceUtilization","capacity","calculateCapacity","compliance","calculateComplianceStatus","compliant","requirements","gaps","identifyComplianceGaps","generateComplianceRecommendations","reportId","reportType","files","projectFiles","f","endsWith","startsWith","file","content","parse","size","filePath","action","target","entry","timestamp","totalProgress","allMilestones","flatMap","milestones","targetDate","slice","breakdown","resource","category","cost","amount","allMetrics","averages","matrix","low","medium","high","risk","probability","impact","openRisks","highPriorityRisks","totalRisks","mitigationActions","assignedTo","allocation","teamSize","totalAvailability","averageAvailability","inProgress","nonCompliant","compliancePercentage","gap","framework","dueDate","toLocaleDateString"],"mappings":"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"}