{"version":3,"sources":["../../../src/enterprise/security-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { writeFile, readFile, mkdir, readdir } from 'fs/promises';\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport { Logger } from '../core/logger.js';\nimport { ConfigManager } from '../core/config.js';\n\nexport interface SecurityScan {\n  id: string;\n  name: string;\n  type:\n    | 'vulnerability'\n    | 'dependency'\n    | 'code-quality'\n    | 'secrets'\n    | 'compliance'\n    | 'infrastructure'\n    | 'container';\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  projectId?: string;\n  target: {\n    type: 'repository' | 'container' | 'infrastructure' | 'application' | 'dependencies';\n    path: string;\n    branch?: string;\n    commit?: string;\n    image?: string;\n    tag?: string;\n  };\n  configuration: {\n    scanner: string;\n    rules: string[];\n    excludes: string[];\n    severity: SecuritySeverity[];\n    formats: string[];\n    outputPath: string;\n  };\n  results: SecurityFinding[];\n  metrics: {\n    totalFindings: number;\n    criticalFindings: number;\n    highFindings: number;\n    mediumFindings: number;\n    lowFindings: number;\n    falsePositives: number;\n    suppressed: number;\n    scanDuration: number;\n    filesScanned: number;\n    linesScanned: number;\n  };\n  compliance: {\n    frameworks: string[];\n    requirements: ComplianceCheck[];\n    overallScore: number;\n    passedChecks: number;\n    failedChecks: number;\n  };\n  remediation: {\n    autoFixAvailable: SecurityFinding[];\n    manualReview: SecurityFinding[];\n    recommendations: SecurityRecommendation[];\n  };\n  schedule?: {\n    frequency: 'manual' | 'daily' | 'weekly' | 'monthly' | 'on-commit' | 'on-deploy';\n    nextRun?: Date;\n    lastRun?: Date;\n  };\n  notifications: {\n    channels: string[];\n    thresholds: {\n      critical: number;\n      high: number;\n      medium: number;\n    };\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  auditLog: SecurityAuditEntry[];\n}\n\nexport type SecuritySeverity = 'critical' | 'high' | 'medium' | 'low' | 'info';\n\nexport interface SecurityFinding {\n  id: string;\n  title: string;\n  description: string;\n  severity: SecuritySeverity;\n  category:\n    | 'vulnerability'\n    | 'secret'\n    | 'misconfiguration'\n    | 'compliance'\n    | 'code-quality'\n    | 'license';\n  cwe?: string; // Common Weakness Enumeration\n  cve?: string; // Common Vulnerabilities and Exposures\n  cvss?: {\n    score: number;\n    vector: string;\n    version: string;\n  };\n  location: {\n    file: string;\n    line?: number;\n    column?: number;\n    function?: string;\n    component?: string;\n  };\n  evidence: {\n    snippet?: string;\n    context?: string;\n    references?: string[];\n  };\n  impact: string;\n  remediation: {\n    description: string;\n    effort: 'low' | 'medium' | 'high';\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    autoFixable: boolean;\n    steps: string[];\n    references: string[];\n  };\n  status: 'open' | 'triaged' | 'in-progress' | 'resolved' | 'suppressed' | 'false-positive';\n  assignedTo?: string;\n  dueDate?: Date;\n  tags: string[];\n  metadata: Record<string, any>;\n  firstSeen: Date;\n  lastSeen: Date;\n  occurrences: number;\n}\n\nexport interface ComplianceCheck {\n  id: string;\n  framework: string; // e.g., 'SOC2', 'GDPR', 'HIPAA', 'PCI-DSS', 'CIS', 'NIST'\n  control: string;\n  description: string;\n  status: 'passed' | 'failed' | 'not-applicable' | 'manual-review';\n  severity: SecuritySeverity;\n  evidence?: string;\n  remediation?: string;\n  lastChecked: Date;\n}\n\nexport interface SecurityRecommendation {\n  id: string;\n  title: string;\n  description: string;\n  category:\n    | 'security-hardening'\n    | 'vulnerability-management'\n    | 'access-control'\n    | 'monitoring'\n    | 'compliance';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  effort: 'low' | 'medium' | 'high';\n  impact: string;\n  implementation: {\n    steps: string[];\n    tools: string[];\n    timeEstimate: string;\n    cost: string;\n  };\n  references: string[];\n  applicableFrameworks: string[];\n}\n\nexport interface SecurityPolicy {\n  id: string;\n  name: string;\n  description: string;\n  type: 'scanning' | 'access-control' | 'compliance' | 'incident-response' | 'data-protection';\n  version: string;\n  status: 'draft' | 'active' | 'deprecated';\n  rules: SecurityRule[];\n  enforcement: {\n    level: 'advisory' | 'warning' | 'blocking';\n    exceptions: string[];\n    approvers: string[];\n  };\n  applicability: {\n    projects: string[];\n    environments: string[];\n    resources: string[];\n  };\n  schedule: {\n    reviewFrequency: 'quarterly' | 'annually' | 'as-needed';\n    nextReview: Date;\n    lastReview?: Date;\n    reviewer: string;\n  };\n  metrics: {\n    violations: number;\n    compliance: number;\n    exceptions: number;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n}\n\nexport interface SecurityRule {\n  id: string;\n  name: string;\n  description: string;\n  condition: string; // Query or condition syntax\n  action: 'allow' | 'deny' | 'alert' | 'audit';\n  severity: SecuritySeverity;\n  parameters: Record<string, any>;\n  enabled: boolean;\n}\n\nexport interface SecurityIncident {\n  id: string;\n  title: string;\n  description: string;\n  severity: SecuritySeverity;\n  status: 'open' | 'investigating' | 'contained' | 'resolved' | 'closed';\n  type:\n    | 'security-breach'\n    | 'vulnerability-exploit'\n    | 'policy-violation'\n    | 'suspicious-activity'\n    | 'compliance-violation';\n  source: {\n    type: 'scan' | 'alert' | 'user-report' | 'automated-detection';\n    details: Record<string, any>;\n  };\n  affected: {\n    systems: string[];\n    data: string[];\n    users: string[];\n  };\n  timeline: {\n    detected: Date;\n    reported: Date;\n    acknowledged: Date;\n    contained?: Date;\n    resolved?: Date;\n    closed?: Date;\n  };\n  response: {\n    assignedTo: string[];\n    actions: SecurityAction[];\n    communications: SecurityCommunication[];\n    lessons: string[];\n  };\n  evidence: {\n    logs: string[];\n    files: string[];\n    screenshots: string[];\n    forensics: string[];\n  };\n  impact: {\n    confidentiality: 'none' | 'low' | 'medium' | 'high';\n    integrity: 'none' | 'low' | 'medium' | 'high';\n    availability: 'none' | 'low' | 'medium' | 'high';\n    financialLoss?: number;\n    reputationalDamage?: string;\n    regulatoryImplications?: string[];\n  };\n  rootCause: {\n    primary: string;\n    contributing: string[];\n    analysis: string;\n  };\n  remediation: {\n    immediate: string[];\n    shortTerm: string[];\n    longTerm: string[];\n    preventive: string[];\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  auditLog: SecurityAuditEntry[];\n}\n\nexport interface SecurityAction {\n  id: string;\n  type:\n    | 'investigation'\n    | 'containment'\n    | 'eradication'\n    | 'recovery'\n    | 'notification'\n    | 'documentation';\n  description: string;\n  assignedTo: string;\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';\n  dueDate?: Date;\n  completedAt?: Date;\n  notes: string;\n}\n\nexport interface SecurityCommunication {\n  id: string;\n  type: 'internal' | 'external' | 'regulatory' | 'customer' | 'media';\n  audience: string[];\n  subject: string;\n  message: string;\n  sentAt: Date;\n  sentBy: string;\n  channel: 'email' | 'phone' | 'meeting' | 'document' | 'portal';\n}\n\nexport interface SecurityAuditEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  target: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface VulnerabilityDatabase {\n  id: string;\n  name: string;\n  type: 'nvd' | 'github' | 'snyk' | 'custom';\n  url: string;\n  updateFrequency: 'hourly' | 'daily' | 'weekly';\n  lastUpdate: Date;\n  status: 'active' | 'inactive' | 'error';\n  configuration: Record<string, any>;\n}\n\nexport interface SecurityMetrics {\n  scans: {\n    total: number;\n    completed: number;\n    failed: number;\n    inProgress: number;\n    byType: Record<string, number>;\n    averageDuration: number;\n  };\n  findings: {\n    total: number;\n    open: number;\n    resolved: number;\n    suppressed: number;\n    bySeverity: Record<SecuritySeverity, number>;\n    byCategory: Record<string, number>;\n    meanTimeToResolution: number;\n  };\n  compliance: {\n    frameworks: Record<\n      string,\n      {\n        total: number;\n        passed: number;\n        failed: number;\n        score: number;\n      }\n    >;\n    overallScore: number;\n    trending: 'improving' | 'stable' | 'declining';\n  };\n  incidents: {\n    total: number;\n    open: number;\n    resolved: number;\n    bySeverity: Record<SecuritySeverity, number>;\n    meanTimeToDetection: number;\n    meanTimeToResponse: number;\n    meanTimeToResolution: number;\n  };\n  policies: {\n    total: number;\n    active: number;\n    violations: number;\n    compliance: number;\n  };\n  trends: {\n    findingsTrend: Array<{ date: Date; count: number }>;\n    complianceTrend: Array<{ date: Date; score: number }>;\n    incidentsTrend: Array<{ date: Date; count: number }>;\n  };\n}\n\nexport class SecurityManager extends EventEmitter {\n  private scans: Map<string, SecurityScan> = new Map();\n  private policies: Map<string, SecurityPolicy> = new Map();\n  private incidents: Map<string, SecurityIncident> = new Map();\n  private vulnerabilityDatabases: Map<string, VulnerabilityDatabase> = new Map();\n  private securityPath: string;\n  private logger: Logger;\n  private config: ConfigManager;\n\n  constructor(securityPath: string = './security', logger?: Logger, config?: ConfigManager) {\n    super();\n    this.securityPath = securityPath;\n    this.logger = logger || new Logger({ level: 'info', format: 'text', destination: 'console' });\n    this.config = config || ConfigManager.getInstance();\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.securityPath, { recursive: true });\n      await mkdir(join(this.securityPath, 'scans'), { recursive: true });\n      await mkdir(join(this.securityPath, 'policies'), { recursive: true });\n      await mkdir(join(this.securityPath, 'incidents'), { recursive: true });\n      await mkdir(join(this.securityPath, 'reports'), { recursive: true });\n      await mkdir(join(this.securityPath, 'databases'), { recursive: true });\n\n      await this.loadConfigurations();\n      await this.initializeDefaultPolicies();\n      await this.initializeVulnerabilityDatabases();\n\n      this.logger.info('Security Manager initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Security Manager', { error });\n      throw error;\n    }\n  }\n\n  async createSecurityScan(scanData: {\n    name: string;\n    type: SecurityScan['type'];\n    target: SecurityScan['target'];\n    configuration?: Partial<SecurityScan['configuration']>;\n    projectId?: string;\n    schedule?: SecurityScan['schedule'];\n  }): Promise<SecurityScan> {\n    const scan: SecurityScan = {\n      id: `scan-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: scanData.name,\n      type: scanData.type,\n      status: 'pending',\n      projectId: scanData.projectId,\n      target: scanData.target,\n      configuration: {\n        scanner: this.getDefaultScanner(scanData.type),\n        rules: [],\n        excludes: [],\n        severity: ['critical', 'high', 'medium', 'low'],\n        formats: ['json', 'html'],\n        outputPath: join(this.securityPath, 'reports'),\n        ...scanData.configuration,\n      },\n      results: [],\n      metrics: {\n        totalFindings: 0,\n        criticalFindings: 0,\n        highFindings: 0,\n        mediumFindings: 0,\n        lowFindings: 0,\n        falsePositives: 0,\n        suppressed: 0,\n        scanDuration: 0,\n        filesScanned: 0,\n        linesScanned: 0,\n      },\n      compliance: {\n        frameworks: [],\n        requirements: [],\n        overallScore: 0,\n        passedChecks: 0,\n        failedChecks: 0,\n      },\n      remediation: {\n        autoFixAvailable: [],\n        manualReview: [],\n        recommendations: [],\n      },\n      schedule: scanData.schedule,\n      notifications: {\n        channels: [],\n        thresholds: {\n          critical: 1,\n          high: 5,\n          medium: 10,\n        },\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'system',\n      auditLog: [],\n    };\n\n    this.addAuditEntry(scan, 'system', 'scan_created', 'scan', {\n      scanId: scan.id,\n      scanName: scan.name,\n      scanType: scan.type,\n    });\n\n    this.scans.set(scan.id, scan);\n    await this.saveScan(scan);\n\n    this.emit('scan:created', scan);\n    this.logger.info(`Security scan created: ${scan.name} (${scan.id})`);\n\n    return scan;\n  }\n\n  async executeScan(scanId: string): Promise<void> {\n    const scan = this.scans.get(scanId);\n    if (!scan) {\n      throw new Error(`Scan not found: ${scanId}`);\n    }\n\n    if (scan.status !== 'pending') {\n      throw new Error(`Scan ${scanId} is not in pending status`);\n    }\n\n    scan.status = 'running';\n    scan.updatedAt = new Date();\n\n    this.addAuditEntry(scan, 'system', 'scan_started', 'scan', {\n      scanId,\n      target: scan.target,\n    });\n\n    await this.saveScan(scan);\n    this.emit('scan:started', scan);\n\n    try {\n      const startTime = Date.now();\n\n      // Execute the appropriate scanner\n      const findings = await this.executeScanEngine(scan);\n\n      const endTime = Date.now();\n      scan.metrics.scanDuration = endTime - startTime;\n      scan.results = findings;\n      scan.status = 'completed';\n\n      // Calculate metrics\n      this.calculateScanMetrics(scan);\n\n      // Run compliance checks\n      await this.runComplianceChecks(scan);\n\n      // Generate remediation recommendations\n      await this.generateRemediationRecommendations(scan);\n\n      // Check notification thresholds\n      await this.checkNotificationThresholds(scan);\n\n      scan.updatedAt = new Date();\n\n      this.addAuditEntry(scan, 'system', 'scan_completed', 'scan', {\n        scanId,\n        duration: scan.metrics.scanDuration,\n        findingsCount: scan.results.length,\n      });\n\n      await this.saveScan(scan);\n      this.emit('scan:completed', scan);\n\n      this.logger.info(\n        `Security scan completed: ${scan.name} (${scan.id}) - ${scan.results.length} findings`,\n      );\n    } catch (error) {\n      scan.status = 'failed';\n      scan.updatedAt = new Date();\n\n      this.addAuditEntry(scan, 'system', 'scan_failed', 'scan', {\n        scanId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      await this.saveScan(scan);\n      this.emit('scan:failed', { scan, error });\n\n      this.logger.error(`Security scan failed: ${scan.name} (${scanId})`, { error });\n      throw error;\n    }\n  }\n\n  async createSecurityIncident(incidentData: {\n    title: string;\n    description: string;\n    severity: SecuritySeverity;\n    type: SecurityIncident['type'];\n    source: SecurityIncident['source'];\n    affected?: Partial<SecurityIncident['affected']>;\n  }): Promise<SecurityIncident> {\n    const incident: SecurityIncident = {\n      id: `incident-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      title: incidentData.title,\n      description: incidentData.description,\n      severity: incidentData.severity,\n      status: 'open',\n      type: incidentData.type,\n      source: incidentData.source,\n      affected: {\n        systems: [],\n        data: [],\n        users: [],\n        ...incidentData.affected,\n      },\n      timeline: {\n        detected: new Date(),\n        reported: new Date(),\n        acknowledged: new Date(),\n      },\n      response: {\n        assignedTo: [],\n        actions: [],\n        communications: [],\n        lessons: [],\n      },\n      evidence: {\n        logs: [],\n        files: [],\n        screenshots: [],\n        forensics: [],\n      },\n      impact: {\n        confidentiality: 'none',\n        integrity: 'none',\n        availability: 'none',\n      },\n      rootCause: {\n        primary: '',\n        contributing: [],\n        analysis: '',\n      },\n      remediation: {\n        immediate: [],\n        shortTerm: [],\n        longTerm: [],\n        preventive: [],\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'system',\n      auditLog: [],\n    };\n\n    this.addAuditEntry(incident, 'system', 'incident_created', 'incident', {\n      incidentId: incident.id,\n      severity: incident.severity,\n      type: incident.type,\n    });\n\n    this.incidents.set(incident.id, incident);\n    await this.saveIncident(incident);\n\n    // Auto-assign based on severity and type\n    await this.autoAssignIncident(incident);\n\n    // Send immediate notifications for high/critical incidents\n    if (incident.severity === 'critical' || incident.severity === 'high') {\n      await this.sendIncidentNotification(incident);\n    }\n\n    this.emit('incident:created', incident);\n    this.logger.info(`Security incident created: ${incident.title} (${incident.id})`);\n\n    return incident;\n  }\n\n  async updateIncident(\n    incidentId: string,\n    updates: Partial<SecurityIncident>,\n    userId: string = 'system',\n  ): Promise<SecurityIncident> {\n    const incident = this.incidents.get(incidentId);\n    if (!incident) {\n      throw new Error(`Incident not found: ${incidentId}`);\n    }\n\n    const oldStatus = incident.status;\n    Object.assign(incident, updates);\n    incident.updatedAt = new Date();\n\n    // Update timeline based on status changes\n    if (updates.status && updates.status !== oldStatus) {\n      this.updateIncidentTimeline(incident, updates.status);\n    }\n\n    this.addAuditEntry(incident, userId, 'incident_updated', 'incident', {\n      incidentId,\n      changes: Object.keys(updates),\n      oldStatus,\n      newStatus: incident.status,\n    });\n\n    await this.saveIncident(incident);\n    this.emit('incident:updated', { incident, updates });\n\n    this.logger.info(`Security incident updated: ${incident.title} (${incidentId})`);\n\n    return incident;\n  }\n\n  async runComplianceAssessment(\n    frameworks: string[],\n    scope?: {\n      projectId?: string;\n      environment?: string;\n      resources?: string[];\n    },\n  ): Promise<ComplianceCheck[]> {\n    const checks: ComplianceCheck[] = [];\n\n    for (const framework of frameworks) {\n      const frameworkChecks = await this.runFrameworkChecks(framework, scope);\n      checks.push(...frameworkChecks);\n    }\n\n    this.logger.info(\n      `Compliance assessment completed: ${checks.length} checks across ${frameworks.length} frameworks`,\n    );\n    this.emit('compliance:assessed', { frameworks, checks, scope });\n\n    return checks;\n  }\n\n  async createSecurityPolicy(policyData: {\n    name: string;\n    description: string;\n    type: SecurityPolicy['type'];\n    rules: Omit<SecurityRule, 'id'>[];\n    enforcement?: Partial<SecurityPolicy['enforcement']>;\n    applicability?: Partial<SecurityPolicy['applicability']>;\n  }): Promise<SecurityPolicy> {\n    const policy: SecurityPolicy = {\n      id: `policy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: policyData.name,\n      description: policyData.description,\n      type: policyData.type,\n      version: '1.0.0',\n      status: 'draft',\n      rules: policyData.rules.map((rule) => ({\n        id: `rule-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        ...rule,\n      })),\n      enforcement: {\n        level: 'warning',\n        exceptions: [],\n        approvers: [],\n        ...policyData.enforcement,\n      },\n      applicability: {\n        projects: [],\n        environments: [],\n        resources: [],\n        ...policyData.applicability,\n      },\n      schedule: {\n        reviewFrequency: 'annually',\n        nextReview: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year\n        reviewer: 'security-team',\n      },\n      metrics: {\n        violations: 0,\n        compliance: 100,\n        exceptions: 0,\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: 'system',\n    };\n\n    this.policies.set(policy.id, policy);\n    await this.savePolicy(policy);\n\n    this.emit('policy:created', policy);\n    this.logger.info(`Security policy created: ${policy.name} (${policy.id})`);\n\n    return policy;\n  }\n\n  async getSecurityMetrics(filters?: {\n    timeRange?: { start: Date; end: Date };\n    projectId?: string;\n    environment?: string;\n    severity?: SecuritySeverity[];\n  }): Promise<SecurityMetrics> {\n    let scans = Array.from(this.scans.values());\n    let incidents = Array.from(this.incidents.values());\n\n    // Apply filters\n    if (filters) {\n      if (filters.timeRange) {\n        scans = scans.filter(\n          (s) => s.createdAt >= filters.timeRange!.start && s.createdAt <= filters.timeRange!.end,\n        );\n        incidents = incidents.filter(\n          (i) => i.createdAt >= filters.timeRange!.start && i.createdAt <= filters.timeRange!.end,\n        );\n      }\n      if (filters.projectId) {\n        scans = scans.filter((s) => s.projectId === filters.projectId);\n      }\n    }\n\n    // Calculate scan metrics\n    const scanMetrics = {\n      total: scans.length,\n      completed: scans.filter((s) => s.status === 'completed').length,\n      failed: scans.filter((s) => s.status === 'failed').length,\n      inProgress: scans.filter((s) => s.status === 'running').length,\n      byType: this.groupBy(scans, 'type'),\n      averageDuration:\n        scans.length > 0\n          ? scans.reduce((sum, s) => sum + s.metrics.scanDuration, 0) / scans.length\n          : 0,\n    };\n\n    // Calculate finding metrics\n    const allFindings = scans.flatMap((s) => s.results);\n    const findingMetrics = {\n      total: allFindings.length,\n      open: allFindings.filter((f) => f.status === 'open').length,\n      resolved: allFindings.filter((f) => f.status === 'resolved').length,\n      suppressed: allFindings.filter((f) => f.status === 'suppressed').length,\n      bySeverity: this.groupBy(allFindings, 'severity') as Record<SecuritySeverity, number>,\n      byCategory: this.groupBy(allFindings, 'category'),\n      meanTimeToResolution: this.calculateMTTR(allFindings),\n    };\n\n    // Calculate compliance metrics\n    const allComplianceChecks = scans.flatMap((s) => s.compliance.requirements);\n    const complianceFrameworks: Record<string, any> = {};\n\n    for (const check of allComplianceChecks) {\n      if (!complianceFrameworks[check.framework]) {\n        complianceFrameworks[check.framework] = {\n          total: 0,\n          passed: 0,\n          failed: 0,\n          score: 0,\n        };\n      }\n\n      complianceFrameworks[check.framework].total++;\n      if (check.status === 'passed') {\n        complianceFrameworks[check.framework].passed++;\n      } else if (check.status === 'failed') {\n        complianceFrameworks[check.framework].failed++;\n      }\n    }\n\n    // Calculate scores\n    for (const framework in complianceFrameworks) {\n      const fw = complianceFrameworks[framework];\n      fw.score = fw.total > 0 ? (fw.passed / fw.total) * 100 : 0;\n    }\n\n    const overallComplianceScore =\n      Object.values(complianceFrameworks).length > 0\n        ? Object.values(complianceFrameworks).reduce((sum: number, fw: any) => sum + fw.score, 0) /\n          Object.values(complianceFrameworks).length\n        : 0;\n\n    // Calculate incident metrics\n    const incidentMetrics = {\n      total: incidents.length,\n      open: incidents.filter((i) => i.status === 'open' || i.status === 'investigating').length,\n      resolved: incidents.filter((i) => i.status === 'resolved' || i.status === 'closed').length,\n      bySeverity: this.groupBy(incidents, 'severity') as Record<SecuritySeverity, number>,\n      meanTimeToDetection: this.calculateMTTD(incidents),\n      meanTimeToResponse: this.calculateMTTResponse(incidents),\n      meanTimeToResolution: this.calculateIncidentMTTR(incidents),\n    };\n\n    // Policy metrics\n    const policies = Array.from(this.policies.values());\n    const policyMetrics = {\n      total: policies.length,\n      active: policies.filter((p) => p.status === 'active').length,\n      violations: policies.reduce((sum, p) => sum + p.metrics.violations, 0),\n      compliance:\n        policies.length > 0\n          ? policies.reduce((sum, p) => sum + p.metrics.compliance, 0) / policies.length\n          : 0,\n    };\n\n    return {\n      scans: scanMetrics,\n      findings: findingMetrics,\n      compliance: {\n        frameworks: complianceFrameworks,\n        overallScore: overallComplianceScore,\n        trending: 'stable', // Would be calculated from historical data\n      },\n      incidents: incidentMetrics,\n      policies: policyMetrics,\n      trends: {\n        findingsTrend: [], // Would be calculated from historical data\n        complianceTrend: [], // Would be calculated from historical data\n        incidentsTrend: [], // Would be calculated from historical data\n      },\n    };\n  }\n\n  // Private helper methods\n  private async loadConfigurations(): Promise<void> {\n    try {\n      // Load scans\n      const scanFiles = await readdir(join(this.securityPath, 'scans'));\n      for (const file of scanFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.securityPath, 'scans', file), 'utf-8');\n        const scan: SecurityScan = JSON.parse(content);\n        this.scans.set(scan.id, scan);\n      }\n\n      // Load policies\n      const policyFiles = await readdir(join(this.securityPath, 'policies'));\n      for (const file of policyFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.securityPath, 'policies', file), 'utf-8');\n        const policy: SecurityPolicy = JSON.parse(content);\n        this.policies.set(policy.id, policy);\n      }\n\n      // Load incidents\n      const incidentFiles = await readdir(join(this.securityPath, 'incidents'));\n      for (const file of incidentFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.securityPath, 'incidents', file), 'utf-8');\n        const incident: SecurityIncident = JSON.parse(content);\n        this.incidents.set(incident.id, incident);\n      }\n\n      this.logger.info(\n        `Loaded ${this.scans.size} scans, ${this.policies.size} policies, ${this.incidents.size} incidents`,\n      );\n    } catch (error) {\n      this.logger.warn('Failed to load some security configurations', { error });\n    }\n  }\n\n  private async initializeDefaultPolicies(): Promise<void> {\n    const defaultPolicies = [\n      {\n        name: 'Critical Vulnerability Policy',\n        description: 'Immediate action required for critical vulnerabilities',\n        type: 'scanning' as const,\n        rules: [\n          {\n            name: 'Critical CVSS Score',\n            description: 'Alert on vulnerabilities with CVSS score >= 9.0',\n            condition: 'cvss.score >= 9.0',\n            action: 'alert' as const,\n            severity: 'critical' as const,\n            parameters: { threshold: 9.0 },\n            enabled: true,\n          },\n        ],\n        enforcement: {\n          level: 'blocking' as const,\n          exceptions: [],\n          approvers: ['security-lead'],\n        },\n      },\n      {\n        name: 'Secret Detection Policy',\n        description: 'Detect exposed secrets and credentials',\n        type: 'scanning' as const,\n        rules: [\n          {\n            name: 'API Key Detection',\n            description: 'Detect exposed API keys',\n            condition: 'category == \"secret\" && type == \"api-key\"',\n            action: 'deny' as const,\n            severity: 'high' as const,\n            parameters: {},\n            enabled: true,\n          },\n        ],\n      },\n    ];\n\n    for (const policyData of defaultPolicies) {\n      if (!Array.from(this.policies.values()).some((p) => p.name === policyData.name)) {\n        await this.createSecurityPolicy(policyData);\n      }\n    }\n  }\n\n  private async initializeVulnerabilityDatabases(): Promise<void> {\n    const databases: VulnerabilityDatabase[] = [\n      {\n        id: 'nvd',\n        name: 'National Vulnerability Database',\n        type: 'nvd',\n        url: 'https://nvd.nist.gov/feeds/json/cve/1.1/',\n        updateFrequency: 'daily',\n        lastUpdate: new Date(),\n        status: 'active',\n        configuration: {},\n      },\n      {\n        id: 'github-advisories',\n        name: 'GitHub Security Advisories',\n        type: 'github',\n        url: 'https://api.github.com/advisories',\n        updateFrequency: 'daily',\n        lastUpdate: new Date(),\n        status: 'active',\n        configuration: {},\n      },\n    ];\n\n    for (const db of databases) {\n      this.vulnerabilityDatabases.set(db.id, db);\n    }\n  }\n\n  private getDefaultScanner(type: SecurityScan['type']): string {\n    const scanners: Record<SecurityScan['type'], string> = {\n      vulnerability: 'trivy',\n      dependency: 'npm-audit',\n      'code-quality': 'sonarqube',\n      secrets: 'gitleaks',\n      compliance: 'inspec',\n      infrastructure: 'checkov',\n      container: 'clair',\n    };\n\n    return scanners[type] || 'generic';\n  }\n\n  private async executeScanEngine(scan: SecurityScan): Promise<SecurityFinding[]> {\n    const findings: SecurityFinding[] = [];\n\n    switch (scan.configuration.scanner) {\n      case 'trivy':\n        return this.executeTrivyScan(scan);\n      case 'npm-audit':\n        return this.executeNpmAuditScan(scan);\n      case 'gitleaks':\n        return this.executeGitleaksScan(scan);\n      case 'checkov':\n        return this.executeCheckovScan(scan);\n      default:\n        return this.executeGenericScan(scan);\n    }\n  }\n\n  private async executeTrivyScan(scan: SecurityScan): Promise<SecurityFinding[]> {\n    return new Promise((resolve, reject) => {\n      const findings: SecurityFinding[] = [];\n\n      // Mock Trivy execution\n      const mockFindings = [\n        {\n          id: `finding-${Date.now()}-1`,\n          title: 'CVE-2023-12345: Remote Code Execution in libxml2',\n          description: 'A buffer overflow vulnerability in libxml2 allows remote code execution',\n          severity: 'critical' as const,\n          category: 'vulnerability' as const,\n          cve: 'CVE-2023-12345',\n          cvss: {\n            score: 9.8,\n            vector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',\n            version: '3.1',\n          },\n          location: {\n            file: 'package-lock.json',\n            line: 125,\n            component: 'libxml2@2.9.10',\n          },\n          evidence: {\n            snippet: '\"libxml2\": \"2.9.10\"',\n            context: 'Dependency declaration',\n            references: ['https://nvd.nist.gov/vuln/detail/CVE-2023-12345'],\n          },\n          impact: 'Remote attackers could execute arbitrary code',\n          remediation: {\n            description: 'Update libxml2 to version 2.9.14 or later',\n            effort: 'low' as const,\n            priority: 'critical' as const,\n            autoFixable: true,\n            steps: ['npm update libxml2'],\n            references: ['https://github.com/GNOME/libxml2/releases'],\n          },\n          status: 'open' as const,\n          tags: ['cve', 'rce', 'dependency'],\n          metadata: {},\n          firstSeen: new Date(),\n          lastSeen: new Date(),\n          occurrences: 1,\n        },\n      ];\n\n      // Simulate scan delay\n      setTimeout(() => {\n        resolve(mockFindings);\n      }, 2000);\n    });\n  }\n\n  private async executeNpmAuditScan(scan: SecurityScan): Promise<SecurityFinding[]> {\n    return new Promise((resolve, reject) => {\n      const command = 'npm';\n      const args = ['audit', '--json'];\n\n      const child = spawn(command, args, {\n        cwd: scan.target.path,\n        stdio: ['pipe', 'pipe', 'pipe'],\n      });\n\n      let stdout = '';\n      let stderr = '';\n\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      child.on('close', (code) => {\n        try {\n          const auditResult = JSON.parse(stdout);\n          const findings = this.parseNpmAuditResults(auditResult);\n          resolve(findings);\n        } catch (error) {\n          reject(\n            new Error(\n              `Failed to parse npm audit results: ${error instanceof Error ? error.message : String(error)}`,\n            ),\n          );\n        }\n      });\n\n      child.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  private async executeGitleaksScan(scan: SecurityScan): Promise<SecurityFinding[]> {\n    // Mock Gitleaks scan for secrets detection\n    return [\n      {\n        id: `finding-${Date.now()}-2`,\n        title: 'Exposed AWS Access Key',\n        description: 'AWS access key found in source code',\n        severity: 'high' as const,\n        category: 'secret' as const,\n        location: {\n          file: 'config/aws.js',\n          line: 12,\n          column: 20,\n        },\n        evidence: {\n          snippet: 'const accessKey = \"AKIA123456789...\"',\n          context: 'Hardcoded AWS credentials',\n        },\n        impact: 'Unauthorized access to AWS resources',\n        remediation: {\n          description: 'Remove hardcoded credentials and use environment variables or IAM roles',\n          effort: 'medium' as const,\n          priority: 'high' as const,\n          autoFixable: false,\n          steps: [\n            'Remove hardcoded credentials',\n            'Use environment variables',\n            'Rotate compromised keys',\n          ],\n          references: ['https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html'],\n        },\n        status: 'open' as const,\n        tags: ['secret', 'aws', 'credentials'],\n        metadata: {},\n        firstSeen: new Date(),\n        lastSeen: new Date(),\n        occurrences: 1,\n      },\n    ];\n  }\n\n  private async executeCheckovScan(scan: SecurityScan): Promise<SecurityFinding[]> {\n    // Mock Checkov scan for infrastructure as code\n    return [];\n  }\n\n  private async executeGenericScan(scan: SecurityScan): Promise<SecurityFinding[]> {\n    // Generic scan implementation\n    return [];\n  }\n\n  private parseNpmAuditResults(auditResult: any): SecurityFinding[] {\n    const findings: SecurityFinding[] = [];\n\n    if (auditResult.vulnerabilities) {\n      for (const [packageName, vulnData] of Object.entries(auditResult.vulnerabilities)) {\n        const vuln = vulnData as any;\n\n        findings.push({\n          id: `finding-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          title: `${vuln.severity} vulnerability in ${packageName}`,\n          description: vuln.title || 'Vulnerability detected',\n          severity: vuln.severity as SecuritySeverity,\n          category: 'vulnerability',\n          cve: vuln.cve,\n          location: {\n            file: 'package.json',\n            component: packageName,\n          },\n          evidence: {\n            snippet: `\"${packageName}\": \"${vuln.range}\"`,\n            references: vuln.url ? [vuln.url] : [],\n          },\n          impact: vuln.overview || 'Security vulnerability',\n          remediation: {\n            description: vuln.recommendation || 'Update to a secure version',\n            effort: 'low' as const,\n            priority:\n              vuln.severity === 'info'\n                ? 'low'\n                : (vuln.severity as 'low' | 'medium' | 'high' | 'critical'),\n            autoFixable: true,\n            steps: [`npm update ${packageName}`],\n            references: vuln.url ? [vuln.url] : [],\n          },\n          status: 'open',\n          tags: ['npm', 'dependency'],\n          metadata: { packageName, range: vuln.range },\n          firstSeen: new Date(),\n          lastSeen: new Date(),\n          occurrences: 1,\n        });\n      }\n    }\n\n    return findings;\n  }\n\n  private calculateScanMetrics(scan: SecurityScan): void {\n    const findings = scan.results;\n\n    scan.metrics.totalFindings = findings.length;\n    scan.metrics.criticalFindings = findings.filter((f) => f.severity === 'critical').length;\n    scan.metrics.highFindings = findings.filter((f) => f.severity === 'high').length;\n    scan.metrics.mediumFindings = findings.filter((f) => f.severity === 'medium').length;\n    scan.metrics.lowFindings = findings.filter((f) => f.severity === 'low').length;\n    scan.metrics.falsePositives = findings.filter((f) => f.status === 'false-positive').length;\n    scan.metrics.suppressed = findings.filter((f) => f.status === 'suppressed').length;\n  }\n\n  private async runComplianceChecks(scan: SecurityScan): Promise<void> {\n    // Mock compliance checks\n    const frameworks = ['SOC2', 'GDPR', 'PCI-DSS'];\n\n    for (const framework of frameworks) {\n      const checks = await this.runFrameworkChecks(framework, { projectId: scan.projectId });\n      scan.compliance.requirements.push(...checks);\n    }\n\n    scan.compliance.frameworks = frameworks;\n    scan.compliance.passedChecks = scan.compliance.requirements.filter(\n      (r) => r.status === 'passed',\n    ).length;\n    scan.compliance.failedChecks = scan.compliance.requirements.filter(\n      (r) => r.status === 'failed',\n    ).length;\n    scan.compliance.overallScore =\n      scan.compliance.requirements.length > 0\n        ? (scan.compliance.passedChecks / scan.compliance.requirements.length) * 100\n        : 0;\n  }\n\n  private async runFrameworkChecks(framework: string, scope?: any): Promise<ComplianceCheck[]> {\n    // Mock compliance checks for different frameworks\n    const mockChecks: ComplianceCheck[] = [\n      {\n        id: `check-${Date.now()}-1`,\n        framework,\n        control: 'CC6.1',\n        description: 'Encryption in transit',\n        status: 'passed',\n        severity: 'high',\n        evidence: 'TLS 1.2+ configured',\n        lastChecked: new Date(),\n      },\n      {\n        id: `check-${Date.now()}-2`,\n        framework,\n        control: 'CC6.7',\n        description: 'Encryption at rest',\n        status: 'failed',\n        severity: 'medium',\n        remediation: 'Enable database encryption',\n        lastChecked: new Date(),\n      },\n    ];\n\n    return mockChecks;\n  }\n\n  private async generateRemediationRecommendations(scan: SecurityScan): Promise<void> {\n    const autoFixable = scan.results.filter((f) => f.remediation.autoFixable);\n    const manualReview = scan.results.filter((f) => !f.remediation.autoFixable);\n\n    scan.remediation.autoFixAvailable = autoFixable;\n    scan.remediation.manualReview = manualReview;\n\n    // Generate general recommendations\n    scan.remediation.recommendations = [\n      {\n        id: `rec-${Date.now()}-1`,\n        title: 'Implement Automated Dependency Updates',\n        description: 'Set up automated dependency updates to reduce vulnerability exposure',\n        category: 'vulnerability-management',\n        priority: 'high',\n        effort: 'medium',\n        impact: 'Reduces time to patch vulnerabilities',\n        implementation: {\n          steps: [\n            'Configure Dependabot or Renovate',\n            'Set up automated testing pipeline',\n            'Enable auto-merge for low-risk updates',\n          ],\n          tools: ['Dependabot', 'Renovate', 'GitHub Actions'],\n          timeEstimate: '2-4 hours',\n          cost: 'Free',\n        },\n        references: [\n          'https://docs.github.com/en/code-security/dependabot',\n          'https://renovatebot.com/',\n        ],\n        applicableFrameworks: ['SOC2', 'ISO27001'],\n      },\n    ];\n  }\n\n  private async checkNotificationThresholds(scan: SecurityScan): Promise<void> {\n    const thresholds = scan.notifications.thresholds;\n\n    if (\n      scan.metrics.criticalFindings >= thresholds.critical ||\n      scan.metrics.highFindings >= thresholds.high ||\n      scan.metrics.mediumFindings >= thresholds.medium\n    ) {\n      await this.sendScanNotification(scan);\n    }\n  }\n\n  private async sendScanNotification(scan: SecurityScan): Promise<void> {\n    const message = `Security scan '${scan.name}' completed with ${scan.metrics.totalFindings} findings (${scan.metrics.criticalFindings} critical, ${scan.metrics.highFindings} high)`;\n\n    this.emit('notification:scan', {\n      scan,\n      message,\n      severity:\n        scan.metrics.criticalFindings > 0\n          ? 'critical'\n          : scan.metrics.highFindings > 0\n            ? 'high'\n            : 'medium',\n    });\n\n    this.logger.warn(message);\n  }\n\n  private async autoAssignIncident(incident: SecurityIncident): Promise<void> {\n    // Auto-assign based on severity and type\n    const assignmentRules: Record<string, string[]> = {\n      critical: ['security-lead', 'ciso'],\n      high: ['security-team'],\n      medium: ['security-analyst'],\n      low: ['security-analyst'],\n    };\n\n    incident.response.assignedTo = assignmentRules[incident.severity] || ['security-team'];\n  }\n\n  private async sendIncidentNotification(incident: SecurityIncident): Promise<void> {\n    const message = `SECURITY INCIDENT: ${incident.title} (${incident.severity.toUpperCase()})`;\n\n    this.emit('notification:incident', {\n      incident,\n      message,\n      urgency: incident.severity === 'critical' ? 'immediate' : 'high',\n    });\n\n    this.logger.error(message);\n  }\n\n  private updateIncidentTimeline(incident: SecurityIncident, newStatus: string): void {\n    const now = new Date();\n\n    switch (newStatus) {\n      case 'investigating':\n        incident.timeline.acknowledged = now;\n        break;\n      case 'contained':\n        incident.timeline.contained = now;\n        break;\n      case 'resolved':\n        incident.timeline.resolved = now;\n        break;\n      case 'closed':\n        incident.timeline.closed = now;\n        break;\n    }\n  }\n\n  private async saveScan(scan: SecurityScan): Promise<void> {\n    const filePath = join(this.securityPath, 'scans', `${scan.id}.json`);\n    await writeFile(filePath, JSON.stringify(scan, null, 2));\n  }\n\n  private async savePolicy(policy: SecurityPolicy): Promise<void> {\n    const filePath = join(this.securityPath, 'policies', `${policy.id}.json`);\n    await writeFile(filePath, JSON.stringify(policy, null, 2));\n  }\n\n  private async saveIncident(incident: SecurityIncident): Promise<void> {\n    const filePath = join(this.securityPath, 'incidents', `${incident.id}.json`);\n    await writeFile(filePath, JSON.stringify(incident, null, 2));\n  }\n\n  private addAuditEntry(\n    target: SecurityScan | SecurityIncident,\n    userId: string,\n    action: string,\n    targetType: string,\n    details: Record<string, any>,\n  ): void {\n    const entry: SecurityAuditEntry = {\n      id: `audit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      userId,\n      action,\n      target: targetType,\n      details,\n    };\n\n    target.auditLog.push(entry);\n  }\n\n  private groupBy<T>(array: T[], key: keyof T): Record<string, number> {\n    return array.reduce(\n      (groups, item) => {\n        const value = String(item[key]);\n        groups[value] = (groups[value] || 0) + 1;\n        return groups;\n      },\n      {} as Record<string, number>,\n    );\n  }\n\n  private calculateMTTR(findings: SecurityFinding[]): number {\n    const resolvedFindings = findings.filter(\n      (f) => f.status === 'resolved' && f.firstSeen && f.lastSeen,\n    );\n\n    if (resolvedFindings.length === 0) return 0;\n\n    const totalTime = resolvedFindings.reduce(\n      (sum, f) => sum + (f.lastSeen.getTime() - f.firstSeen.getTime()),\n      0,\n    );\n\n    return totalTime / resolvedFindings.length;\n  }\n\n  private calculateMTTD(incidents: SecurityIncident[]): number {\n    const detectedIncidents = incidents.filter((i) => i.timeline.detected && i.timeline.reported);\n\n    if (detectedIncidents.length === 0) return 0;\n\n    const totalTime = detectedIncidents.reduce(\n      (sum, i) => sum + (i.timeline.reported.getTime() - i.timeline.detected.getTime()),\n      0,\n    );\n\n    return totalTime / detectedIncidents.length;\n  }\n\n  private calculateMTTResponse(incidents: SecurityIncident[]): number {\n    const respondedIncidents = incidents.filter(\n      (i) => i.timeline.reported && i.timeline.acknowledged,\n    );\n\n    if (respondedIncidents.length === 0) return 0;\n\n    const totalTime = respondedIncidents.reduce(\n      (sum, i) => sum + (i.timeline.acknowledged.getTime() - i.timeline.reported.getTime()),\n      0,\n    );\n\n    return totalTime / respondedIncidents.length;\n  }\n\n  private calculateIncidentMTTR(incidents: SecurityIncident[]): number {\n    const resolvedIncidents = incidents.filter((i) => i.timeline.reported && i.timeline.resolved);\n\n    if (resolvedIncidents.length === 0) return 0;\n\n    const totalTime = resolvedIncidents.reduce(\n      (sum, i) => sum + (i.timeline.resolved!.getTime() - i.timeline.reported.getTime()),\n      0,\n    );\n\n    return totalTime / resolvedIncidents.length;\n  }\n}\n"],"names":["EventEmitter","writeFile","readFile","mkdir","readdir","join","spawn","Logger","ConfigManager","SecurityManager","scans","Map","policies","incidents","vulnerabilityDatabases","securityPath","logger","config","level","format","destination","getInstance","initialize","recursive","loadConfigurations","initializeDefaultPolicies","initializeVulnerabilityDatabases","info","error","createSecurityScan","scanData","scan","id","Date","now","Math","random","toString","substr","name","type","status","projectId","target","configuration","scanner","getDefaultScanner","rules","excludes","severity","formats","outputPath","results","metrics","totalFindings","criticalFindings","highFindings","mediumFindings","lowFindings","falsePositives","suppressed","scanDuration","filesScanned","linesScanned","compliance","frameworks","requirements","overallScore","passedChecks","failedChecks","remediation","autoFixAvailable","manualReview","recommendations","schedule","notifications","channels","thresholds","critical","high","medium","createdAt","updatedAt","createdBy","auditLog","addAuditEntry","scanId","scanName","scanType","set","saveScan","emit","executeScan","get","Error","startTime","findings","executeScanEngine","endTime","calculateScanMetrics","runComplianceChecks","generateRemediationRecommendations","checkNotificationThresholds","duration","findingsCount","length","message","String","createSecurityIncident","incidentData","incident","title","description","source","affected","systems","data","users","timeline","detected","reported","acknowledged","response","assignedTo","actions","communications","lessons","evidence","logs","files","screenshots","forensics","impact","confidentiality","integrity","availability","rootCause","primary","contributing","analysis","immediate","shortTerm","longTerm","preventive","incidentId","saveIncident","autoAssignIncident","sendIncidentNotification","updateIncident","updates","userId","oldStatus","Object","assign","updateIncidentTimeline","changes","keys","newStatus","runComplianceAssessment","scope","checks","framework","frameworkChecks","runFrameworkChecks","push","createSecurityPolicy","policyData","policy","version","map","rule","enforcement","exceptions","approvers","applicability","projects","environments","resources","reviewFrequency","nextReview","reviewer","violations","savePolicy","getSecurityMetrics","filters","Array","from","values","timeRange","filter","s","start","end","i","scanMetrics","total","completed","failed","inProgress","byType","groupBy","averageDuration","reduce","sum","allFindings","flatMap","findingMetrics","open","f","resolved","bySeverity","byCategory","meanTimeToResolution","calculateMTTR","allComplianceChecks","complianceFrameworks","check","passed","score","fw","overallComplianceScore","incidentMetrics","meanTimeToDetection","calculateMTTD","meanTimeToResponse","calculateMTTResponse","calculateIncidentMTTR","policyMetrics","active","p","trending","trends","findingsTrend","complianceTrend","incidentsTrend","scanFiles","file","endsWith","content","JSON","parse","policyFiles","incidentFiles","size","warn","defaultPolicies","condition","action","parameters","threshold","enabled","some","databases","url","updateFrequency","lastUpdate","db","scanners","vulnerability","dependency","secrets","infrastructure","container","executeTrivyScan","executeNpmAuditScan","executeGitleaksScan","executeCheckovScan","executeGenericScan","Promise","resolve","reject","mockFindings","category","cve","cvss","vector","location","line","component","snippet","context","references","effort","priority","autoFixable","steps","tags","metadata","firstSeen","lastSeen","occurrences","setTimeout","command","args","child","cwd","path","stdio","stdout","stderr","on","code","auditResult","parseNpmAuditResults","column","vulnerabilities","packageName","vulnData","entries","vuln","range","overview","recommendation","r","mockChecks","control","lastChecked","implementation","tools","timeEstimate","cost","applicableFrameworks","sendScanNotification","assignmentRules","low","toUpperCase","urgency","contained","closed","filePath","stringify","targetType","details","entry","timestamp","array","key","groups","item","value","resolvedFindings","totalTime","getTime","detectedIncidents","respondedIncidents","resolvedIncidents"],"mappings":"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"}