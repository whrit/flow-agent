{"version":3,"sources":["../../../src/enterprise/deployment-manager.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { writeFile, readFile, mkdir, readdir } from 'fs/promises';\nimport { join } from 'path';\nimport { spawn, ChildProcess } from 'child_process';\nimport { Logger } from '../core/logger.js';\nimport { ConfigManager } from '../core/config.js';\n\nexport interface DeploymentEnvironment {\n  id: string;\n  name: string;\n  type: 'development' | 'staging' | 'production' | 'testing' | 'custom';\n  status: 'active' | 'inactive' | 'maintenance' | 'error';\n  configuration: {\n    region: string;\n    provider: 'aws' | 'gcp' | 'azure' | 'kubernetes' | 'docker' | 'custom';\n    endpoints: string[];\n    secrets: Record<string, string>;\n    environment_variables: Record<string, string>;\n    resources: {\n      cpu: string;\n      memory: string;\n      storage: string;\n      replicas: number;\n    };\n  };\n  healthCheck: {\n    url: string;\n    method: 'GET' | 'POST' | 'HEAD';\n    expectedStatus: number;\n    timeout: number;\n    interval: number;\n    retries: number;\n  };\n  monitoring: {\n    enabled: boolean;\n    alerts: DeploymentAlert[];\n    metrics: string[];\n    logs: {\n      level: string;\n      retention: string;\n      aggregation: boolean;\n    };\n  };\n  security: {\n    tls: boolean;\n    authentication: boolean;\n    authorization: string[];\n    compliance: string[];\n    scanning: {\n      vulnerabilities: boolean;\n      secrets: boolean;\n      licenses: boolean;\n    };\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DeploymentStrategy {\n  id: string;\n  name: string;\n  type: 'blue-green' | 'canary' | 'rolling' | 'recreate' | 'custom';\n  configuration: {\n    rolloutPercentage?: number;\n    maxUnavailable?: number;\n    maxSurge?: number;\n    trafficSplitPercentage?: number;\n    monitoringDuration?: number;\n    rollbackThreshold?: number;\n    approvalRequired?: boolean;\n    automatedRollback?: boolean;\n  };\n  stages: DeploymentStage[];\n  rollbackStrategy: {\n    automatic: boolean;\n    conditions: RollbackCondition[];\n    timeout: number;\n  };\n  notifications: {\n    channels: string[];\n    events: string[];\n  };\n}\n\nexport interface DeploymentStage {\n  id: string;\n  name: string;\n  order: number;\n  type: 'build' | 'test' | 'deploy' | 'verify' | 'promote' | 'rollback' | 'custom';\n  status: 'pending' | 'running' | 'success' | 'failed' | 'skipped' | 'cancelled';\n  commands: DeploymentCommand[];\n  conditions: {\n    runIf: string[];\n    skipIf: string[];\n  };\n  timeout: number;\n  retryPolicy: {\n    maxRetries: number;\n    backoffMultiplier: number;\n    initialDelay: number;\n  };\n  artifacts: {\n    inputs: string[];\n    outputs: string[];\n  };\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number;\n  logs: DeploymentLog[];\n}\n\nexport interface DeploymentCommand {\n  id: string;\n  command: string;\n  args: string[];\n  workingDirectory?: string;\n  environment?: Record<string, string>;\n  timeout: number;\n  retryOnFailure: boolean;\n  successCriteria: {\n    exitCode?: number;\n    outputContains?: string[];\n    outputNotContains?: string[];\n  };\n}\n\nexport interface DeploymentLog {\n  timestamp: Date;\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  source: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface RollbackCondition {\n  metric: string;\n  threshold: number;\n  operator: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  duration: number;\n  description: string;\n}\n\nexport interface DeploymentAlert {\n  id: string;\n  name: string;\n  condition: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  channels: string[];\n  enabled: boolean;\n}\n\nexport interface Deployment {\n  id: string;\n  name: string;\n  version: string;\n  projectId: string;\n  environmentId: string;\n  strategyId: string;\n  status: 'pending' | 'running' | 'success' | 'failed' | 'rolled-back' | 'cancelled';\n  initiatedBy: string;\n  source: {\n    repository: string;\n    branch: string;\n    commit: string;\n    tag?: string;\n  };\n  artifacts: {\n    buildId?: string;\n    imageTag?: string;\n    packageVersion?: string;\n    files: string[];\n  };\n  metrics: {\n    startTime: Date;\n    endTime?: Date;\n    duration?: number;\n    deploymentSize: number;\n    rollbackTime?: number;\n    successRate: number;\n    errorRate: number;\n    performanceMetrics: Record<string, number>;\n  };\n  stages: DeploymentStage[];\n  rollback?: {\n    triggered: boolean;\n    reason: string;\n    timestamp: Date;\n    previousDeploymentId: string;\n    rollbackDuration: number;\n  };\n  approvals: DeploymentApproval[];\n  notifications: DeploymentNotification[];\n  auditLog: DeploymentAuditEntry[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DeploymentApproval {\n  id: string;\n  stage: string;\n  requiredApprovers: string[];\n  approvals: {\n    userId: string;\n    decision: 'approved' | 'rejected';\n    reason?: string;\n    timestamp: Date;\n  }[];\n  status: 'pending' | 'approved' | 'rejected' | 'expired';\n  expiresAt: Date;\n}\n\nexport interface DeploymentNotification {\n  id: string;\n  type: 'email' | 'slack' | 'teams' | 'webhook' | 'sms';\n  recipients: string[];\n  subject: string;\n  message: string;\n  timestamp: Date;\n  status: 'sent' | 'failed' | 'pending';\n}\n\nexport interface DeploymentAuditEntry {\n  id: string;\n  timestamp: Date;\n  userId: string;\n  action: string;\n  target: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n}\n\nexport interface DeploymentPipeline {\n  id: string;\n  name: string;\n  projectId: string;\n  environments: string[];\n  promotionStrategy: 'manual' | 'automatic' | 'conditional';\n  promotionRules: {\n    environmentId: string;\n    conditions: string[];\n    approvers: string[];\n  }[];\n  triggers: {\n    type: 'webhook' | 'schedule' | 'manual' | 'git';\n    configuration: Record<string, any>;\n  }[];\n  configuration: {\n    parallelDeployments: boolean;\n    rollbackOnFailure: boolean;\n    notifications: boolean;\n    qualityGates: boolean;\n  };\n  metrics: {\n    totalDeployments: number;\n    successRate: number;\n    averageDeploymentTime: number;\n    mttr: number; // Mean Time To Recovery\n    changeFailureRate: number;\n    deploymentFrequency: number;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DeploymentMetrics {\n  totalDeployments: number;\n  successfulDeployments: number;\n  failedDeployments: number;\n  rolledBackDeployments: number;\n  averageDeploymentTime: number;\n  deploymentFrequency: number;\n  meanTimeToRecovery: number;\n  changeFailureRate: number;\n  leadTime: number;\n  environmentMetrics: Record<\n    string,\n    {\n      deployments: number;\n      successRate: number;\n      averageTime: number;\n    }\n  >;\n  strategyMetrics: Record<\n    string,\n    {\n      deployments: number;\n      successRate: number;\n      rollbackRate: number;\n    }\n  >;\n}\n\nexport class DeploymentManager extends EventEmitter {\n  private deployments: Map<string, Deployment> = new Map();\n  private environments: Map<string, DeploymentEnvironment> = new Map();\n  private strategies: Map<string, DeploymentStrategy> = new Map();\n  private pipelines: Map<string, DeploymentPipeline> = new Map();\n  private activeProcesses: Map<string, ChildProcess> = new Map();\n  private deploymentsPath: string;\n  private logger: Logger;\n  private config: ConfigManager;\n\n  constructor(deploymentsPath: string = './deployments', logger?: Logger, config?: ConfigManager) {\n    super();\n    this.deploymentsPath = deploymentsPath;\n    this.logger = logger || new Logger({ level: 'info', format: 'text', destination: 'console' });\n    this.config = config || ConfigManager.getInstance();\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      await mkdir(this.deploymentsPath, { recursive: true });\n      await mkdir(join(this.deploymentsPath, 'environments'), { recursive: true });\n      await mkdir(join(this.deploymentsPath, 'strategies'), { recursive: true });\n      await mkdir(join(this.deploymentsPath, 'pipelines'), { recursive: true });\n\n      await this.loadConfigurations();\n      await this.initializeDefaultStrategies();\n\n      this.logger.info('Deployment Manager initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Deployment Manager', { error });\n      throw error;\n    }\n  }\n\n  async createEnvironment(\n    environmentData: Partial<DeploymentEnvironment>,\n  ): Promise<DeploymentEnvironment> {\n    const environment: DeploymentEnvironment = {\n      id: environmentData.id || `env-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: environmentData.name || 'Unnamed Environment',\n      type: environmentData.type || 'development',\n      status: 'inactive',\n      configuration: {\n        region: 'us-east-1',\n        provider: 'aws',\n        endpoints: [],\n        secrets: {},\n        environment_variables: {},\n        resources: {\n          cpu: '1',\n          memory: '1Gi',\n          storage: '10Gi',\n          replicas: 1,\n        },\n        ...environmentData.configuration,\n      },\n      healthCheck: {\n        url: '/health',\n        method: 'GET',\n        expectedStatus: 200,\n        timeout: 30000,\n        interval: 60000,\n        retries: 3,\n        ...environmentData.healthCheck,\n      },\n      monitoring: {\n        enabled: true,\n        alerts: [],\n        metrics: ['cpu', 'memory', 'requests', 'errors'],\n        logs: {\n          level: 'info',\n          retention: '30d',\n          aggregation: true,\n        },\n        ...environmentData.monitoring,\n      },\n      security: {\n        tls: true,\n        authentication: true,\n        authorization: ['admin', 'deploy'],\n        compliance: [],\n        scanning: {\n          vulnerabilities: true,\n          secrets: true,\n          licenses: true,\n        },\n        ...environmentData.security,\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.environments.set(environment.id, environment);\n    await this.saveEnvironment(environment);\n\n    this.emit('environment:created', environment);\n    this.logger.info(`Environment created: ${environment.name} (${environment.id})`);\n\n    return environment;\n  }\n\n  async createDeployment(deploymentData: {\n    name: string;\n    version: string;\n    projectId: string;\n    environmentId: string;\n    strategyId: string;\n    initiatedBy: string;\n    source: Deployment['source'];\n    artifacts?: Partial<Deployment['artifacts']>;\n  }): Promise<Deployment> {\n    const environment = this.environments.get(deploymentData.environmentId);\n    if (!environment) {\n      throw new Error(`Environment not found: ${deploymentData.environmentId}`);\n    }\n\n    const strategy = this.strategies.get(deploymentData.strategyId);\n    if (!strategy) {\n      throw new Error(`Strategy not found: ${deploymentData.strategyId}`);\n    }\n\n    const deployment: Deployment = {\n      id: `deploy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      name: deploymentData.name,\n      version: deploymentData.version,\n      projectId: deploymentData.projectId,\n      environmentId: deploymentData.environmentId,\n      strategyId: deploymentData.strategyId,\n      status: 'pending',\n      initiatedBy: deploymentData.initiatedBy,\n      source: deploymentData.source,\n      artifacts: {\n        files: [],\n        ...deploymentData.artifacts,\n      },\n      metrics: {\n        startTime: new Date(),\n        deploymentSize: 0,\n        successRate: 0,\n        errorRate: 0,\n        performanceMetrics: {},\n      },\n      stages: strategy.stages.map((stage) => ({\n        ...stage,\n        status: 'pending',\n        logs: [],\n      })),\n      approvals: [],\n      notifications: [],\n      auditLog: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.addAuditEntry(deployment, deploymentData.initiatedBy, 'deployment_created', 'deployment', {\n      deploymentId: deployment.id,\n      environment: environment.name,\n      strategy: strategy.name,\n    });\n\n    this.deployments.set(deployment.id, deployment);\n    await this.saveDeployment(deployment);\n\n    this.emit('deployment:created', deployment);\n    this.logger.info(`Deployment created: ${deployment.name} (${deployment.id})`);\n\n    return deployment;\n  }\n\n  async executeDeployment(deploymentId: string): Promise<void> {\n    const deployment = this.deployments.get(deploymentId);\n    if (!deployment) {\n      throw new Error(`Deployment not found: ${deploymentId}`);\n    }\n\n    if (deployment.status !== 'pending') {\n      throw new Error(`Deployment ${deploymentId} is not in pending status`);\n    }\n\n    deployment.status = 'running';\n    deployment.metrics.startTime = new Date();\n    deployment.updatedAt = new Date();\n\n    this.addAuditEntry(deployment, 'system', 'deployment_started', 'deployment', {\n      deploymentId,\n    });\n\n    await this.saveDeployment(deployment);\n    this.emit('deployment:started', deployment);\n\n    try {\n      for (const stage of deployment.stages) {\n        await this.executeStage(deployment, stage);\n\n        if (stage.status === 'failed') {\n          await this.handleDeploymentFailure(deployment, stage);\n          return;\n        }\n      }\n\n      await this.completeDeployment(deployment);\n    } catch (error) {\n      await this.handleDeploymentError(deployment, error);\n    }\n  }\n\n  private async executeStage(deployment: Deployment, stage: DeploymentStage): Promise<void> {\n    stage.status = 'running';\n    stage.startTime = new Date();\n\n    this.addLog(stage, 'info', `Starting stage: ${stage.name}`, 'system');\n\n    try {\n      // Check conditions\n      if (!this.evaluateStageConditions(deployment, stage)) {\n        stage.status = 'skipped';\n        this.addLog(stage, 'info', 'Stage skipped due to conditions', 'system');\n        return;\n      }\n\n      // Handle approvals\n      if (stage.type === 'deploy' && (await this.requiresApproval(deployment, stage))) {\n        await this.requestApproval(deployment, stage);\n\n        // Wait for approval\n        while (await this.isPendingApproval(deployment, stage)) {\n          await new Promise((resolve) => setTimeout(resolve, 10000)); // Check every 10 seconds\n        }\n\n        if (!(await this.isApproved(deployment, stage))) {\n          stage.status = 'failed';\n          this.addLog(stage, 'error', 'Stage rejected by approver', 'system');\n          return;\n        }\n      }\n\n      // Execute commands\n      for (const command of stage.commands) {\n        await this.executeCommand(deployment, stage, command);\n      }\n\n      stage.status = 'success';\n      stage.endTime = new Date();\n      stage.duration = stage.endTime.getTime() - stage.startTime!.getTime();\n\n      this.addLog(stage, 'info', `Stage completed successfully in ${stage.duration}ms`, 'system');\n    } catch (error) {\n      stage.status = 'failed';\n      stage.endTime = new Date();\n\n      this.addLog(\n        stage,\n        'error',\n        `Stage failed: ${error instanceof Error ? error.message : String(error)}`,\n        'system',\n      );\n\n      // Retry logic\n      if (stage.retryPolicy.maxRetries > 0) {\n        await this.retryStage(deployment, stage);\n      }\n    }\n\n    await this.saveDeployment(deployment);\n    this.emit('stage:completed', { deployment, stage });\n  }\n\n  private async executeCommand(\n    deployment: Deployment,\n    stage: DeploymentStage,\n    command: DeploymentCommand,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const environment = this.environments.get(deployment.environmentId);\n\n      const processEnv = {\n        ...process.env,\n        ...environment?.configuration.environment_variables,\n        ...command.environment,\n        DEPLOYMENT_ID: deployment.id,\n        DEPLOYMENT_VERSION: deployment.version,\n        ENVIRONMENT_ID: deployment.environmentId,\n      };\n\n      this.addLog(\n        stage,\n        'info',\n        `Executing: ${command.command} ${command.args.join(' ')}`,\n        'command',\n      );\n\n      const childProcess = spawn(command.command, command.args, {\n        cwd: command.workingDirectory || process.cwd(),\n        env: processEnv,\n        stdio: ['pipe', 'pipe', 'pipe'],\n      });\n\n      this.activeProcesses.set(`${deployment.id}-${stage.id}-${command.id}`, childProcess);\n\n      let stdout = '';\n      let stderr = '';\n\n      childProcess.stdout?.on('data', (data) => {\n        const output = data.toString();\n        stdout += output;\n        this.addLog(stage, 'info', output.trim(), 'stdout');\n      });\n\n      childProcess.stderr?.on('data', (data) => {\n        const output = data.toString();\n        stderr += output;\n        this.addLog(stage, 'error', output.trim(), 'stderr');\n      });\n\n      const timeout = setTimeout(() => {\n        childProcess.kill('SIGTERM');\n        reject(new Error(`Command timed out after ${command.timeout}ms`));\n      }, command.timeout);\n\n      childProcess.on('close', (code) => {\n        clearTimeout(timeout);\n        this.activeProcesses.delete(`${deployment.id}-${stage.id}-${command.id}`);\n\n        // Check success criteria\n        const success = this.evaluateCommandSuccess(command, code, stdout, stderr);\n\n        if (success) {\n          this.addLog(\n            stage,\n            'info',\n            `Command completed successfully (exit code: ${code})`,\n            'command',\n          );\n          resolve();\n        } else {\n          this.addLog(stage, 'error', `Command failed (exit code: ${code})`, 'command');\n          reject(new Error(`Command failed with exit code ${code}`));\n        }\n      });\n\n      childProcess.on('error', (error) => {\n        clearTimeout(timeout);\n        this.activeProcesses.delete(`${deployment.id}-${stage.id}-${command.id}`);\n        this.addLog(\n          stage,\n          'error',\n          `Command error: ${error instanceof Error ? error.message : String(error)}`,\n          'command',\n        );\n        reject(error);\n      });\n    });\n  }\n\n  async rollbackDeployment(\n    deploymentId: string,\n    reason: string,\n    userId: string = 'system',\n  ): Promise<void> {\n    const deployment = this.deployments.get(deploymentId);\n    if (!deployment) {\n      throw new Error(`Deployment not found: ${deploymentId}`);\n    }\n\n    // Find previous successful deployment\n    const previousDeployment = await this.getPreviousSuccessfulDeployment(\n      deployment.projectId,\n      deployment.environmentId,\n      deploymentId,\n    );\n\n    if (!previousDeployment) {\n      throw new Error('No previous successful deployment found for rollback');\n    }\n\n    const rollbackStartTime = new Date();\n\n    deployment.rollback = {\n      triggered: true,\n      reason,\n      timestamp: rollbackStartTime,\n      previousDeploymentId: previousDeployment.id,\n      rollbackDuration: 0,\n    };\n\n    deployment.status = 'rolled-back';\n    deployment.updatedAt = new Date();\n\n    this.addAuditEntry(deployment, userId, 'rollback_initiated', 'deployment', {\n      deploymentId,\n      previousDeploymentId: previousDeployment.id,\n      reason,\n    });\n\n    try {\n      // Execute rollback strategy\n      await this.executeRollbackStrategy(deployment, previousDeployment);\n\n      deployment.rollback.rollbackDuration = Date.now() - rollbackStartTime.getTime();\n\n      this.addAuditEntry(deployment, userId, 'rollback_completed', 'deployment', {\n        deploymentId,\n        rollbackDuration: deployment.rollback.rollbackDuration,\n      });\n\n      this.emit('deployment:rolled-back', deployment);\n      this.logger.info(`Deployment rolled back: ${deploymentId}`);\n    } catch (error) {\n      this.addAuditEntry(deployment, userId, 'rollback_failed', 'deployment', {\n        deploymentId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      this.logger.error(`Rollback failed for deployment ${deploymentId}`, { error });\n      throw error;\n    }\n\n    await this.saveDeployment(deployment);\n  }\n\n  async getDeploymentMetrics(filters?: {\n    projectId?: string;\n    environmentId?: string;\n    strategyId?: string;\n    timeRange?: { start: Date; end: Date };\n  }): Promise<DeploymentMetrics> {\n    let deployments = Array.from(this.deployments.values());\n\n    // Apply filters\n    if (filters) {\n      if (filters.projectId) {\n        deployments = deployments.filter((d) => d.projectId === filters.projectId);\n      }\n      if (filters.environmentId) {\n        deployments = deployments.filter((d) => d.environmentId === filters.environmentId);\n      }\n      if (filters.strategyId) {\n        deployments = deployments.filter((d) => d.strategyId === filters.strategyId);\n      }\n      if (filters.timeRange) {\n        deployments = deployments.filter(\n          (d) => d.createdAt >= filters.timeRange!.start && d.createdAt <= filters.timeRange!.end,\n        );\n      }\n    }\n\n    const totalDeployments = deployments.length;\n    const successfulDeployments = deployments.filter((d) => d.status === 'success').length;\n    const failedDeployments = deployments.filter((d) => d.status === 'failed').length;\n    const rolledBackDeployments = deployments.filter((d) => d.status === 'rolled-back').length;\n\n    const completedDeployments = deployments.filter(\n      (d) => d.metrics.endTime && d.metrics.startTime,\n    );\n\n    const averageDeploymentTime =\n      completedDeployments.length > 0\n        ? completedDeployments.reduce(\n            (sum, d) => sum + (d.metrics.endTime!.getTime() - d.metrics.startTime.getTime()),\n            0,\n          ) / completedDeployments.length\n        : 0;\n\n    // Calculate environment metrics\n    const environmentMetrics: Record<string, any> = {};\n    for (const env of this.environments.values()) {\n      const envDeployments = deployments.filter((d) => d.environmentId === env.id);\n      const envSuccessful = envDeployments.filter((d) => d.status === 'success').length;\n\n      environmentMetrics[env.id] = {\n        deployments: envDeployments.length,\n        successRate: envDeployments.length > 0 ? (envSuccessful / envDeployments.length) * 100 : 0,\n        averageTime:\n          envDeployments.length > 0\n            ? envDeployments.reduce((sum, d) => sum + (d.metrics.duration || 0), 0) /\n              envDeployments.length\n            : 0,\n      };\n    }\n\n    // Calculate strategy metrics\n    const strategyMetrics: Record<string, any> = {};\n    for (const strategy of this.strategies.values()) {\n      const strategyDeployments = deployments.filter((d) => d.strategyId === strategy.id);\n      const strategySuccessful = strategyDeployments.filter((d) => d.status === 'success').length;\n      const strategyRolledBack = strategyDeployments.filter(\n        (d) => d.status === 'rolled-back',\n      ).length;\n\n      strategyMetrics[strategy.id] = {\n        deployments: strategyDeployments.length,\n        successRate:\n          strategyDeployments.length > 0\n            ? (strategySuccessful / strategyDeployments.length) * 100\n            : 0,\n        rollbackRate:\n          strategyDeployments.length > 0\n            ? (strategyRolledBack / strategyDeployments.length) * 100\n            : 0,\n      };\n    }\n\n    return {\n      totalDeployments,\n      successfulDeployments,\n      failedDeployments,\n      rolledBackDeployments,\n      averageDeploymentTime,\n      deploymentFrequency: this.calculateDeploymentFrequency(deployments),\n      meanTimeToRecovery: this.calculateMTTR(deployments),\n      changeFailureRate:\n        ((failedDeployments + rolledBackDeployments) / Math.max(totalDeployments, 1)) * 100,\n      leadTime: this.calculateLeadTime(deployments),\n      environmentMetrics,\n      strategyMetrics,\n    };\n  }\n\n  // Private helper methods\n  private async loadConfigurations(): Promise<void> {\n    // Load environments, strategies, and pipelines from disk\n    try {\n      const envFiles = await readdir(join(this.deploymentsPath, 'environments'));\n      for (const file of envFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.deploymentsPath, 'environments', file), 'utf-8');\n        const env: DeploymentEnvironment = JSON.parse(content);\n        this.environments.set(env.id, env);\n      }\n\n      const strategyFiles = await readdir(join(this.deploymentsPath, 'strategies'));\n      for (const file of strategyFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.deploymentsPath, 'strategies', file), 'utf-8');\n        const strategy: DeploymentStrategy = JSON.parse(content);\n        this.strategies.set(strategy.id, strategy);\n      }\n\n      const pipelineFiles = await readdir(join(this.deploymentsPath, 'pipelines'));\n      for (const file of pipelineFiles.filter((f) => f.endsWith('.json'))) {\n        const content = await readFile(join(this.deploymentsPath, 'pipelines', file), 'utf-8');\n        const pipeline: DeploymentPipeline = JSON.parse(content);\n        this.pipelines.set(pipeline.id, pipeline);\n      }\n\n      this.logger.info(\n        `Loaded ${this.environments.size} environments, ${this.strategies.size} strategies, ${this.pipelines.size} pipelines`,\n      );\n    } catch (error) {\n      this.logger.warn('Failed to load some configurations', { error });\n    }\n  }\n\n  private async initializeDefaultStrategies(): Promise<void> {\n    const defaultStrategies: Partial<DeploymentStrategy>[] = [\n      {\n        name: 'Blue-Green Deployment',\n        type: 'blue-green',\n        configuration: {\n          monitoringDuration: 300000, // 5 minutes\n          automatedRollback: true,\n          rollbackThreshold: 5,\n        },\n        stages: [\n          {\n            id: 'build',\n            name: 'Build',\n            order: 1,\n            type: 'build',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 600000,\n            retryPolicy: { maxRetries: 2, backoffMultiplier: 2, initialDelay: 1000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'deploy-green',\n            name: 'Deploy to Green',\n            order: 2,\n            type: 'deploy',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 900000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 2, initialDelay: 5000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'verify',\n            name: 'Verify Green',\n            order: 3,\n            type: 'verify',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 300000,\n            retryPolicy: { maxRetries: 3, backoffMultiplier: 1.5, initialDelay: 2000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'switch-traffic',\n            name: 'Switch Traffic',\n            order: 4,\n            type: 'promote',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 60000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 1, initialDelay: 1000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n        ],\n        rollbackStrategy: {\n          automatic: true,\n          conditions: [\n            {\n              metric: 'error_rate',\n              threshold: 5,\n              operator: '>',\n              duration: 60000,\n              description: 'Error rate exceeds 5%',\n            },\n          ],\n          timeout: 300000,\n        },\n      },\n      {\n        name: 'Canary Deployment',\n        type: 'canary',\n        configuration: {\n          trafficSplitPercentage: 10,\n          monitoringDuration: 600000, // 10 minutes\n          automatedRollback: true,\n          rollbackThreshold: 2,\n        },\n        stages: [\n          {\n            id: 'build',\n            name: 'Build',\n            order: 1,\n            type: 'build',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 600000,\n            retryPolicy: { maxRetries: 2, backoffMultiplier: 2, initialDelay: 1000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'deploy-canary',\n            name: 'Deploy Canary (10%)',\n            order: 2,\n            type: 'deploy',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 900000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 2, initialDelay: 5000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'monitor-canary',\n            name: 'Monitor Canary',\n            order: 3,\n            type: 'verify',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 600000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 1, initialDelay: 10000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'promote-full',\n            name: 'Promote to 100%',\n            order: 4,\n            type: 'promote',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 300000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 1, initialDelay: 1000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n        ],\n        rollbackStrategy: {\n          automatic: true,\n          conditions: [\n            {\n              metric: 'error_rate',\n              threshold: 2,\n              operator: '>',\n              duration: 120000,\n              description: 'Canary error rate exceeds 2%',\n            },\n            {\n              metric: 'response_time',\n              threshold: 500,\n              operator: '>',\n              duration: 180000,\n              description: 'Response time exceeds 500ms',\n            },\n          ],\n          timeout: 180000,\n        },\n      },\n      {\n        name: 'Rolling Deployment',\n        type: 'rolling',\n        configuration: {\n          maxUnavailable: 1,\n          maxSurge: 1,\n          monitoringDuration: 120000,\n          automatedRollback: false,\n        },\n        stages: [\n          {\n            id: 'build',\n            name: 'Build',\n            order: 1,\n            type: 'build',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 600000,\n            retryPolicy: { maxRetries: 2, backoffMultiplier: 2, initialDelay: 1000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'rolling-update',\n            name: 'Rolling Update',\n            order: 2,\n            type: 'deploy',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 1200000,\n            retryPolicy: { maxRetries: 1, backoffMultiplier: 2, initialDelay: 5000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n          {\n            id: 'health-check',\n            name: 'Health Check',\n            order: 3,\n            type: 'verify',\n            status: 'pending',\n            commands: [],\n            conditions: { runIf: [], skipIf: [] },\n            timeout: 300000,\n            retryPolicy: { maxRetries: 3, backoffMultiplier: 1.5, initialDelay: 5000 },\n            artifacts: { inputs: [], outputs: [] },\n            logs: [],\n          },\n        ],\n        rollbackStrategy: {\n          automatic: false,\n          conditions: [],\n          timeout: 600000,\n        },\n      },\n    ];\n\n    for (const strategyData of defaultStrategies) {\n      if (!Array.from(this.strategies.values()).some((s) => s.name === strategyData.name)) {\n        const strategy: DeploymentStrategy = {\n          id: `strategy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          notifications: {\n            channels: [],\n            events: ['deployment:started', 'deployment:completed', 'deployment:failed'],\n          },\n          ...strategyData,\n        } as DeploymentStrategy;\n\n        this.strategies.set(strategy.id, strategy);\n        await this.saveStrategy(strategy);\n      }\n    }\n  }\n\n  private async saveEnvironment(environment: DeploymentEnvironment): Promise<void> {\n    const filePath = join(this.deploymentsPath, 'environments', `${environment.id}.json`);\n    await writeFile(filePath, JSON.stringify(environment, null, 2));\n  }\n\n  private async saveStrategy(strategy: DeploymentStrategy): Promise<void> {\n    const filePath = join(this.deploymentsPath, 'strategies', `${strategy.id}.json`);\n    await writeFile(filePath, JSON.stringify(strategy, null, 2));\n  }\n\n  private async saveDeployment(deployment: Deployment): Promise<void> {\n    const filePath = join(this.deploymentsPath, `${deployment.id}.json`);\n    await writeFile(filePath, JSON.stringify(deployment, null, 2));\n  }\n\n  private addAuditEntry(\n    deployment: Deployment,\n    userId: string,\n    action: string,\n    target: string,\n    details: Record<string, any>,\n  ): void {\n    const entry: DeploymentAuditEntry = {\n      id: `audit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      userId,\n      action,\n      target,\n      details,\n    };\n\n    deployment.auditLog.push(entry);\n  }\n\n  private addLog(\n    stage: DeploymentStage,\n    level: DeploymentLog['level'],\n    message: string,\n    source: string,\n    metadata?: Record<string, any>,\n  ): void {\n    const log: DeploymentLog = {\n      timestamp: new Date(),\n      level,\n      message,\n      source,\n      metadata,\n    };\n\n    stage.logs.push(log);\n  }\n\n  private evaluateStageConditions(deployment: Deployment, stage: DeploymentStage): boolean {\n    // Implement condition evaluation logic\n    return true; // Simplified for now\n  }\n\n  private async requiresApproval(deployment: Deployment, stage: DeploymentStage): Promise<boolean> {\n    const strategy = this.strategies.get(deployment.strategyId);\n    return strategy?.configuration.approvalRequired || false;\n  }\n\n  private async requestApproval(deployment: Deployment, stage: DeploymentStage): Promise<void> {\n    // Implement approval request logic\n    this.emit('approval:requested', { deployment, stage });\n  }\n\n  private async isPendingApproval(\n    deployment: Deployment,\n    stage: DeploymentStage,\n  ): Promise<boolean> {\n    // Check if there are pending approvals for this stage\n    return false; // Simplified for now\n  }\n\n  private async isApproved(deployment: Deployment, stage: DeploymentStage): Promise<boolean> {\n    // Check if stage is approved\n    return true; // Simplified for now\n  }\n\n  private evaluateCommandSuccess(\n    command: DeploymentCommand,\n    exitCode: number | null,\n    stdout: string,\n    stderr: string,\n  ): boolean {\n    if (\n      command.successCriteria.exitCode !== undefined &&\n      exitCode !== command.successCriteria.exitCode\n    ) {\n      return false;\n    }\n\n    if (command.successCriteria.outputContains) {\n      for (const pattern of command.successCriteria.outputContains) {\n        if (!stdout.includes(pattern)) {\n          return false;\n        }\n      }\n    }\n\n    if (command.successCriteria.outputNotContains) {\n      for (const pattern of command.successCriteria.outputNotContains) {\n        if (stdout.includes(pattern) || stderr.includes(pattern)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private async retryStage(deployment: Deployment, stage: DeploymentStage): Promise<void> {\n    // Implement retry logic\n    this.logger.info(`Retrying stage: ${stage.name}`);\n  }\n\n  private async handleDeploymentFailure(\n    deployment: Deployment,\n    failedStage: DeploymentStage,\n  ): Promise<void> {\n    deployment.status = 'failed';\n    deployment.metrics.endTime = new Date();\n    deployment.updatedAt = new Date();\n\n    this.addAuditEntry(deployment, 'system', 'deployment_failed', 'deployment', {\n      deploymentId: deployment.id,\n      failedStage: failedStage.name,\n      reason: 'Stage execution failed',\n    });\n\n    await this.saveDeployment(deployment);\n    this.emit('deployment:failed', { deployment, failedStage });\n\n    // Check if automatic rollback is enabled\n    const strategy = this.strategies.get(deployment.strategyId);\n    if (strategy?.rollbackStrategy.automatic) {\n      await this.rollbackDeployment(deployment.id, 'Automatic rollback due to deployment failure');\n    }\n  }\n\n  private async handleDeploymentError(deployment: Deployment, error: any): Promise<void> {\n    deployment.status = 'failed';\n    deployment.metrics.endTime = new Date();\n    deployment.updatedAt = new Date();\n\n    this.addAuditEntry(deployment, 'system', 'deployment_error', 'deployment', {\n      deploymentId: deployment.id,\n      error: error instanceof Error ? error.message : String(error),\n    });\n\n    await this.saveDeployment(deployment);\n    this.emit('deployment:error', { deployment, error });\n\n    this.logger.error(`Deployment error: ${deployment.id}`, { error });\n  }\n\n  private async completeDeployment(deployment: Deployment): Promise<void> {\n    deployment.status = 'success';\n    deployment.metrics.endTime = new Date();\n    deployment.metrics.duration =\n      deployment.metrics.endTime.getTime() - deployment.metrics.startTime.getTime();\n    deployment.updatedAt = new Date();\n\n    this.addAuditEntry(deployment, 'system', 'deployment_completed', 'deployment', {\n      deploymentId: deployment.id,\n      duration: deployment.metrics.duration,\n    });\n\n    await this.saveDeployment(deployment);\n    this.emit('deployment:completed', deployment);\n\n    this.logger.info(`Deployment completed: ${deployment.id} in ${deployment.metrics.duration}ms`);\n  }\n\n  private async getPreviousSuccessfulDeployment(\n    projectId: string,\n    environmentId: string,\n    currentDeploymentId: string,\n  ): Promise<Deployment | null> {\n    const deployments = Array.from(this.deployments.values())\n      .filter(\n        (d) =>\n          d.projectId === projectId &&\n          d.environmentId === environmentId &&\n          d.status === 'success' &&\n          d.id !== currentDeploymentId,\n      )\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    return deployments[0] || null;\n  }\n\n  private async executeRollbackStrategy(\n    deployment: Deployment,\n    previousDeployment: Deployment,\n  ): Promise<void> {\n    // Implement rollback execution logic\n    this.logger.info(`Executing rollback from ${deployment.id} to ${previousDeployment.id}`);\n\n    // This would typically involve:\n    // 1. Switching traffic back to previous version\n    // 2. Updating load balancer configuration\n    // 3. Rolling back container deployments\n    // 4. Reverting database migrations if needed\n    // 5. Updating DNS records\n\n    this.emit('rollback:executed', { deployment, previousDeployment });\n  }\n\n  private calculateDeploymentFrequency(deployments: Deployment[]): number {\n    if (deployments.length === 0) return 0;\n\n    const sortedDeployments = deployments.sort(\n      (a, b) => a.createdAt.getTime() - b.createdAt.getTime(),\n    );\n\n    const firstDeployment = sortedDeployments[0];\n    const lastDeployment = sortedDeployments[sortedDeployments.length - 1];\n\n    const timeSpan = lastDeployment.createdAt.getTime() - firstDeployment.createdAt.getTime();\n    const days = timeSpan / (1000 * 60 * 60 * 24);\n\n    return deployments.length / Math.max(days, 1);\n  }\n\n  private calculateMTTR(deployments: Deployment[]): number {\n    const failedDeployments = deployments.filter(\n      (d) => d.status === 'failed' || d.status === 'rolled-back',\n    );\n\n    if (failedDeployments.length === 0) return 0;\n\n    const recoveryTimes = failedDeployments\n      .map((d) => d.rollback?.rollbackDuration || 0)\n      .filter((time) => time > 0);\n\n    if (recoveryTimes.length === 0) return 0;\n\n    return recoveryTimes.reduce((sum, time) => sum + time, 0) / recoveryTimes.length;\n  }\n\n  private calculateLeadTime(deployments: Deployment[]): number {\n    // This would typically calculate from commit to production\n    // For now, return average deployment time\n    const completedDeployments = deployments.filter((d) => d.metrics.duration);\n\n    if (completedDeployments.length === 0) return 0;\n\n    return (\n      completedDeployments.reduce((sum, d) => sum + (d.metrics.duration || 0), 0) /\n      completedDeployments.length\n    );\n  }\n}\n"],"names":["EventEmitter","writeFile","readFile","mkdir","readdir","join","spawn","Logger","ConfigManager","DeploymentManager","deployments","Map","environments","strategies","pipelines","activeProcesses","deploymentsPath","logger","config","level","format","destination","getInstance","initialize","recursive","loadConfigurations","initializeDefaultStrategies","info","error","createEnvironment","environmentData","environment","id","Date","now","Math","random","toString","substr","name","type","status","configuration","region","provider","endpoints","secrets","environment_variables","resources","cpu","memory","storage","replicas","healthCheck","url","method","expectedStatus","timeout","interval","retries","monitoring","enabled","alerts","metrics","logs","retention","aggregation","security","tls","authentication","authorization","compliance","scanning","vulnerabilities","licenses","createdAt","updatedAt","set","saveEnvironment","emit","createDeployment","deploymentData","get","environmentId","Error","strategy","strategyId","deployment","version","projectId","initiatedBy","source","artifacts","files","startTime","deploymentSize","successRate","errorRate","performanceMetrics","stages","map","stage","approvals","notifications","auditLog","addAuditEntry","deploymentId","saveDeployment","executeDeployment","executeStage","handleDeploymentFailure","completeDeployment","handleDeploymentError","addLog","evaluateStageConditions","requiresApproval","requestApproval","isPendingApproval","Promise","resolve","setTimeout","isApproved","command","commands","executeCommand","endTime","duration","getTime","message","String","retryPolicy","maxRetries","retryStage","reject","processEnv","process","env","DEPLOYMENT_ID","DEPLOYMENT_VERSION","ENVIRONMENT_ID","args","childProcess","cwd","workingDirectory","stdio","stdout","stderr","on","data","output","trim","kill","code","clearTimeout","delete","success","evaluateCommandSuccess","rollbackDeployment","reason","userId","previousDeployment","getPreviousSuccessfulDeployment","rollbackStartTime","rollback","triggered","timestamp","previousDeploymentId","rollbackDuration","executeRollbackStrategy","getDeploymentMetrics","filters","Array","from","values","filter","d","timeRange","start","end","totalDeployments","length","successfulDeployments","failedDeployments","rolledBackDeployments","completedDeployments","averageDeploymentTime","reduce","sum","environmentMetrics","envDeployments","envSuccessful","averageTime","strategyMetrics","strategyDeployments","strategySuccessful","strategyRolledBack","rollbackRate","deploymentFrequency","calculateDeploymentFrequency","meanTimeToRecovery","calculateMTTR","changeFailureRate","max","leadTime","calculateLeadTime","envFiles","file","f","endsWith","content","JSON","parse","strategyFiles","pipelineFiles","pipeline","size","warn","defaultStrategies","monitoringDuration","automatedRollback","rollbackThreshold","order","conditions","runIf","skipIf","backoffMultiplier","initialDelay","inputs","outputs","rollbackStrategy","automatic","metric","threshold","operator","description","trafficSplitPercentage","maxUnavailable","maxSurge","strategyData","some","s","channels","events","saveStrategy","filePath","stringify","action","target","details","entry","push","metadata","log","approvalRequired","exitCode","successCriteria","undefined","outputContains","pattern","includes","outputNotContains","failedStage","currentDeploymentId","sort","a","b","sortedDeployments","firstDeployment","lastDeployment","timeSpan","days","recoveryTimes","time"],"mappings":"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"}