{"version":3,"sources":["../../../src/__tests__/session-forking.test.ts"],"sourcesContent":["/**\n * Session Forking Tests\n * Claude-Flow v2.5-alpha.130\n *\n * Tests for parallel agent execution and real-time query control\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { ParallelSwarmExecutor, type ParallelAgentConfig } from '../sdk/session-forking.js';\nimport { RealTimeQueryController, type QueryControlCommand } from '../sdk/query-control.js';\nimport { query, type Query } from '@anthropic-ai/claude-code/sdk';\n\n// Mock the SDK query function\nvi.mock('@anthropic-ai/claude-code/sdk', () => ({\n  query: vi.fn()\n}));\n\ndescribe('ParallelSwarmExecutor', () => {\n  let executor: ParallelSwarmExecutor;\n\n  beforeEach(() => {\n    executor = new ParallelSwarmExecutor();\n  });\n\n  afterEach(() => {\n    executor.removeAllListeners();\n  });\n\n  describe('spawnParallelAgents', () => {\n    it('should spawn multiple agents in parallel', async () => {\n      const configs: ParallelAgentConfig[] = [\n        {\n          agentId: 'agent-1',\n          agentType: 'researcher',\n          task: 'Research AI trends',\n          priority: 'high'\n        },\n        {\n          agentId: 'agent-2',\n          agentType: 'coder',\n          task: 'Write test code',\n          priority: 'medium'\n        },\n        {\n          agentId: 'agent-3',\n          agentType: 'analyst',\n          task: 'Analyze data',\n          priority: 'high'\n        }\n      ];\n\n      // Mock query responses\n      const mockQuery = {\n        [Symbol.asyncIterator]: async function* () {\n          yield {\n            type: 'system',\n            subtype: 'init',\n            uuid: 'test-uuid',\n            session_id: 'test-session',\n            tools: [],\n            model: 'claude-sonnet-4',\n            mcp_servers: [],\n            permissionMode: 'default',\n            slash_commands: [],\n            output_style: 'text',\n            cwd: '/test',\n            apiKeySource: 'user'\n          };\n          yield {\n            type: 'assistant',\n            uuid: 'test-uuid-2',\n            session_id: 'test-session',\n            parent_tool_use_id: null,\n            message: {\n              id: 'msg-1',\n              type: 'message',\n              role: 'assistant',\n              content: [{ type: 'text', text: 'Task completed successfully' }],\n              model: 'claude-sonnet-4',\n              stop_reason: 'end_turn',\n              usage: { input_tokens: 100, output_tokens: 50 }\n            }\n          };\n        },\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn(),\n        supportedCommands: vi.fn(),\n        supportedModels: vi.fn(),\n        mcpServerStatus: vi.fn()\n      } as any;\n\n      vi.mocked(query).mockReturnValue(mockQuery);\n\n      const result = await executor.spawnParallelAgents(configs, {\n        maxParallelAgents: 5,\n        timeout: 30000\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.successfulAgents).toHaveLength(3);\n      expect(result.failedAgents).toHaveLength(0);\n      expect(result.agentResults.size).toBe(3);\n    });\n\n    it('should respect priority ordering', async () => {\n      const configs: ParallelAgentConfig[] = [\n        { agentId: 'low', agentType: 'analyst', task: 'Low priority', priority: 'low' },\n        { agentId: 'critical', agentType: 'researcher', task: 'Critical task', priority: 'critical' },\n        { agentId: 'medium', agentType: 'coder', task: 'Medium task', priority: 'medium' },\n        { agentId: 'high', agentType: 'optimizer', task: 'High priority', priority: 'high' }\n      ];\n\n      const executionOrder: string[] = [];\n\n      executor.on('session:forked', (data) => {\n        executionOrder.push(data.agentId);\n      });\n\n      const mockQuery = {\n        [Symbol.asyncIterator]: async function* () {\n          yield {\n            type: 'system',\n            subtype: 'init',\n            uuid: 'test-uuid',\n            session_id: 'test-session',\n            tools: [],\n            model: 'claude-sonnet-4',\n            mcp_servers: [],\n            permissionMode: 'default',\n            slash_commands: [],\n            output_style: 'text',\n            cwd: '/test',\n            apiKeySource: 'user'\n          };\n        },\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn(),\n        supportedCommands: vi.fn(),\n        supportedModels: vi.fn(),\n        mcpServerStatus: vi.fn()\n      } as any;\n\n      vi.mocked(query).mockReturnValue(mockQuery);\n\n      await executor.spawnParallelAgents(configs, { maxParallelAgents: 2 });\n\n      // Critical should be first, then high, medium, low\n      expect(executionOrder[0]).toBe('critical');\n      expect(executionOrder[1]).toBe('high');\n    });\n\n    it('should handle agent failures gracefully', async () => {\n      const configs: ParallelAgentConfig[] = [\n        { agentId: 'success', agentType: 'researcher', task: 'Will succeed' },\n        { agentId: 'fail', agentType: 'coder', task: 'Will fail' }\n      ];\n\n      let callCount = 0;\n      vi.mocked(query).mockImplementation(() => {\n        callCount++;\n        if (callCount === 2) {\n          throw new Error('Simulated failure');\n        }\n        return {\n          [Symbol.asyncIterator]: async function* () {\n            yield {\n              type: 'system',\n              subtype: 'init',\n              uuid: 'test-uuid',\n              session_id: 'test-session',\n              tools: [],\n              model: 'claude-sonnet-4',\n              mcp_servers: [],\n              permissionMode: 'default',\n              slash_commands: [],\n              output_style: 'text',\n              cwd: '/test',\n              apiKeySource: 'user'\n            };\n          },\n          interrupt: vi.fn()\n        } as any;\n      });\n\n      const result = await executor.spawnParallelAgents(configs);\n\n      expect(result.success).toBe(false);\n      expect(result.successfulAgents).toHaveLength(1);\n      expect(result.failedAgents).toHaveLength(1);\n      expect(result.failedAgents[0]).toBe('fail');\n    });\n\n    it('should batch agents when exceeding maxParallelAgents', async () => {\n      const configs: ParallelAgentConfig[] = Array.from({ length: 15 }, (_, i) => ({\n        agentId: `agent-${i}`,\n        agentType: 'researcher',\n        task: `Task ${i}`\n      }));\n\n      const mockQuery = {\n        [Symbol.asyncIterator]: async function* () {\n          yield {\n            type: 'system',\n            subtype: 'init',\n            uuid: 'test-uuid',\n            session_id: 'test-session',\n            tools: [],\n            model: 'claude-sonnet-4',\n            mcp_servers: [],\n            permissionMode: 'default',\n            slash_commands: [],\n            output_style: 'text',\n            cwd: '/test',\n            apiKeySource: 'user'\n          };\n        },\n        interrupt: vi.fn()\n      } as any;\n\n      vi.mocked(query).mockReturnValue(mockQuery);\n\n      const result = await executor.spawnParallelAgents(configs, {\n        maxParallelAgents: 5\n      });\n\n      expect(result.successfulAgents).toHaveLength(15);\n      // Should execute in 3 batches (5, 5, 5)\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    it('should track performance gain', async () => {\n      const configs: ParallelAgentConfig[] = [\n        { agentId: 'agent-1', agentType: 'researcher', task: 'Task 1' },\n        { agentId: 'agent-2', agentType: 'coder', task: 'Task 2' },\n        { agentId: 'agent-3', agentType: 'analyst', task: 'Task 3' }\n      ];\n\n      const mockQuery = {\n        [Symbol.asyncIterator]: async function* () {\n          yield {\n            type: 'system',\n            subtype: 'init',\n            uuid: 'test-uuid',\n            session_id: 'test-session',\n            tools: [],\n            model: 'claude-sonnet-4',\n            mcp_servers: [],\n            permissionMode: 'default',\n            slash_commands: [],\n            output_style: 'text',\n            cwd: '/test',\n            apiKeySource: 'user'\n          };\n        },\n        interrupt: vi.fn()\n      } as any;\n\n      vi.mocked(query).mockReturnValue(mockQuery);\n\n      await executor.spawnParallelAgents(configs);\n\n      const metrics = executor.getMetrics();\n      expect(metrics.totalAgentsSpawned).toBe(3);\n      expect(metrics.parallelExecutions).toBe(1);\n      expect(metrics.performanceGain).toBeGreaterThan(1); // Should show improvement\n    });\n  });\n});\n\ndescribe('RealTimeQueryController', () => {\n  let controller: RealTimeQueryController;\n\n  beforeEach(() => {\n    controller = new RealTimeQueryController({\n      allowPause: true,\n      allowModelChange: true,\n      allowPermissionChange: true,\n      monitoringInterval: 100\n    });\n  });\n\n  afterEach(() => {\n    controller.shutdown();\n  });\n\n  describe('Query Registration', () => {\n    it('should register a query for control', () => {\n      const mockQuery = {\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn(),\n        supportedCommands: vi.fn(),\n        supportedModels: vi.fn()\n      } as any;\n\n      const controlled = controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      expect(controlled.queryId).toBe('query-1');\n      expect(controlled.agentId).toBe('agent-1');\n      expect(controlled.status).toBe('running');\n      expect(controlled.canControl).toBe(true);\n    });\n  });\n\n  describe('Query Control', () => {\n    it('should pause a running query', async () => {\n      const mockQuery = {\n        interrupt: vi.fn().mockResolvedValue(undefined),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      const paused = await controller.pauseQuery('query-1', 'Manual pause');\n\n      expect(paused).toBe(true);\n      expect(mockQuery.interrupt).toHaveBeenCalled();\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status?.status).toBe('paused');\n      expect(status?.isPaused).toBe(true);\n    });\n\n    it('should resume a paused query', async () => {\n      const mockQuery = {\n        interrupt: vi.fn().mockResolvedValue(undefined),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n      await controller.pauseQuery('query-1');\n\n      const resumed = await controller.resumeQuery('query-1');\n\n      expect(resumed).toBe(true);\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status?.status).toBe('running');\n      expect(status?.isPaused).toBe(false);\n    });\n\n    it('should terminate a query', async () => {\n      const mockQuery = {\n        interrupt: vi.fn().mockResolvedValue(undefined),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      const terminated = await controller.terminateQuery('query-1', 'Test termination');\n\n      expect(terminated).toBe(true);\n      expect(mockQuery.interrupt).toHaveBeenCalled();\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status?.status).toBe('terminated');\n    });\n\n    it('should change model for a running query', async () => {\n      const mockQuery = {\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn().mockResolvedValue(undefined),\n        supportedModels: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      const changed = await controller.changeModel('query-1', 'claude-opus-4');\n\n      expect(changed).toBe(true);\n      expect(mockQuery.setModel).toHaveBeenCalledWith('claude-opus-4');\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status?.currentModel).toBe('claude-opus-4');\n    });\n\n    it('should change permission mode', async () => {\n      const mockQuery = {\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn().mockResolvedValue(undefined),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      const changed = await controller.changePermissionMode('query-1', 'bypassPermissions');\n\n      expect(changed).toBe(true);\n      expect(mockQuery.setPermissionMode).toHaveBeenCalledWith('bypassPermissions');\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status?.permissionMode).toBe('bypassPermissions');\n    });\n  });\n\n  describe('Command Queue', () => {\n    it('should queue and execute commands', async () => {\n      const mockQuery = {\n        interrupt: vi.fn().mockResolvedValue(undefined),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      const command: QueryControlCommand = {\n        type: 'pause',\n        queryId: 'query-1',\n        params: { reason: 'Test pause' }\n      };\n\n      controller.queueCommand(command);\n      await controller.processQueuedCommands('query-1');\n\n      expect(mockQuery.interrupt).toHaveBeenCalled();\n    });\n  });\n\n  describe('Monitoring', () => {\n    it('should emit status updates during monitoring', (done) => {\n      const mockQuery = {\n        interrupt: vi.fn(),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n\n      let updateCount = 0;\n      controller.on('query:status', (update) => {\n        updateCount++;\n        if (updateCount >= 2) {\n          expect(update.queryId).toBe('query-1');\n          expect(update.status).toBe('running');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('Cleanup', () => {\n    it('should cleanup old queries', async () => {\n      const mockQuery = {\n        interrupt: vi.fn().mockResolvedValue(undefined),\n        setPermissionMode: vi.fn(),\n        setModel: vi.fn()\n      } as any;\n\n      controller.registerQuery('query-1', 'agent-1', mockQuery);\n      await controller.terminateQuery('query-1');\n\n      // Cleanup queries older than 0ms (all queries)\n      controller.cleanup(0);\n\n      const status = controller.getQueryStatus('query-1');\n      expect(status).toBeUndefined();\n    });\n  });\n});"],"names":["describe","it","expect","beforeEach","afterEach","vi","ParallelSwarmExecutor","RealTimeQueryController","query","mock","fn","executor","removeAllListeners","configs","agentId","agentType","task","priority","mockQuery","Symbol","asyncIterator","type","subtype","uuid","session_id","tools","model","mcp_servers","permissionMode","slash_commands","output_style","cwd","apiKeySource","parent_tool_use_id","message","id","role","content","text","stop_reason","usage","input_tokens","output_tokens","interrupt","setPermissionMode","setModel","supportedCommands","supportedModels","mcpServerStatus","mocked","mockReturnValue","result","spawnParallelAgents","maxParallelAgents","timeout","success","toBe","successfulAgents","toHaveLength","failedAgents","agentResults","size","executionOrder","on","data","push","callCount","mockImplementation","Error","Array","from","length","_","i","metrics","getMetrics","totalAgentsSpawned","parallelExecutions","performanceGain","toBeGreaterThan","controller","allowPause","allowModelChange","allowPermissionChange","monitoringInterval","shutdown","controlled","registerQuery","queryId","status","canControl","mockResolvedValue","undefined","paused","pauseQuery","toHaveBeenCalled","getQueryStatus","isPaused","resumed","resumeQuery","terminated","terminateQuery","changed","changeModel","toHaveBeenCalledWith","currentModel","changePermissionMode","command","params","reason","queueCommand","processQueuedCommands","done","updateCount","update","cleanup","toBeUndefined"],"mappings":"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"}