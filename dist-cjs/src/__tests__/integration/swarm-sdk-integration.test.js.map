{"version":3,"sources":["../../../../src/__tests__/integration/swarm-sdk-integration.test.ts"],"sourcesContent":["/**\n * Swarm SDK Integration Tests\n * Phase 7: Comprehensive Testing & Validation\n *\n * Tests session forking, hook matchers, and in-process MCP integration\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { ClaudeFlowSDKAdapter, SDKConfiguration } from '../../sdk/sdk-config.js';\nimport { SDKCompatibilityLayer } from '../../sdk/compatibility-layer.js';\nimport { TaskExecutorSDK, ExecutionConfig } from '../../swarm/executor-sdk.js';\nimport { ClaudeClientV25 } from '../../api/claude-client-v2.5.js';\nimport { Logger } from '../../core/logger.js';\nimport Anthropic from '@anthropic-ai/sdk';\n\n// Mock Anthropic SDK\njest.mock('@anthropic-ai/sdk');\n\ndescribe('SDK Integration Tests', () => {\n  let adapter: ClaudeFlowSDKAdapter;\n  let compatibility: SDKCompatibilityLayer;\n  let executor: TaskExecutorSDK;\n  let client: ClaudeClientV25;\n  let mockSDK: jest.Mocked<Anthropic>;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Create mock SDK instance\n    mockSDK = {\n      messages: {\n        create: jest.fn(),\n      },\n    } as any;\n\n    (Anthropic as any).mockImplementation(() => mockSDK);\n\n    // Initialize components\n    const config: SDKConfiguration = {\n      apiKey: 'test-api-key',\n      swarmMode: true,\n      persistenceEnabled: true,\n      checkpointInterval: 30000,\n    };\n\n    adapter = new ClaudeFlowSDKAdapter(config);\n    compatibility = new SDKCompatibilityLayer(adapter);\n\n    const executorConfig: ExecutionConfig = {\n      apiKey: 'test-api-key',\n      maxRetries: 3,\n      timeout: 60000,\n      swarmMode: true,\n    };\n\n    executor = new TaskExecutorSDK(executorConfig);\n\n    const clientConfig = {\n      apiKey: 'test-api-key',\n      retryAttempts: 3,\n      timeout: 60000,\n      enableSwarmMode: true,\n    };\n\n    const logger = new Logger('test');\n    client = new ClaudeClientV25(clientConfig, logger);\n  });\n\n  afterEach(() => {\n    adapter.clearSwarmMetadata();\n    executor.clearExecutionStats();\n  });\n\n  describe('Phase 4: SDK Integration', () => {\n    describe('SDK Adapter Configuration', () => {\n      it('should initialize SDK adapter with correct config', () => {\n        expect(adapter).toBeDefined();\n        expect(adapter.getConfig()).toMatchObject({\n          swarmMode: true,\n          persistenceEnabled: true,\n          checkpointInterval: 30000,\n        });\n      });\n\n      it('should get underlying SDK instance', () => {\n        const sdk = adapter.getSDK();\n        expect(sdk).toBeDefined();\n        expect(sdk).toBeInstanceOf(Anthropic);\n      });\n\n      it('should handle API key from environment', () => {\n        process.env.ANTHROPIC_API_KEY = 'env-key';\n        const newAdapter = new ClaudeFlowSDKAdapter({});\n        expect(newAdapter.getConfig().apiKey).toBe('env-key');\n        delete process.env.ANTHROPIC_API_KEY;\n      });\n\n      it('should support custom baseURL configuration', () => {\n        const customAdapter = new ClaudeFlowSDKAdapter({\n          apiKey: 'test-key',\n          baseURL: 'https://custom.api.com',\n        });\n        expect(customAdapter.getConfig().baseURL).toBe('https://custom.api.com');\n      });\n    });\n\n    describe('SDK Retry Handling', () => {\n      it('should automatically retry on rate limit', async () => {\n        const rateLimitError = new Anthropic.RateLimitError(\n          'Rate limit exceeded',\n          429,\n          { headers: new Headers(), url: 'test-url' } as any,\n          {} as any\n        );\n\n        mockSDK.messages.create\n          .mockRejectedValueOnce(rateLimitError)\n          .mockResolvedValueOnce({\n            id: 'msg-123',\n            type: 'message',\n            role: 'assistant',\n            content: [{ type: 'text', text: 'Success after retry' }],\n            model: 'claude-3-sonnet-20240229',\n            stop_reason: 'end_turn',\n            usage: { input_tokens: 10, output_tokens: 20 },\n          } as any);\n\n        const response = await adapter.createMessage({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1024,\n          messages: [{ role: 'user', content: 'test' }],\n        });\n\n        expect(response).toBeDefined();\n        expect(response.content[0].text).toBe('Success after retry');\n        expect(mockSDK.messages.create).toHaveBeenCalledTimes(2);\n      });\n\n      it('should handle authentication errors without retry', async () => {\n        const authError = new Anthropic.AuthenticationError(\n          'Invalid API key',\n          401,\n          { headers: new Headers(), url: 'test-url' } as any,\n          {} as any\n        );\n\n        mockSDK.messages.create.mockRejectedValue(authError);\n\n        await expect(\n          adapter.createMessage({\n            model: 'claude-3-sonnet-20240229',\n            max_tokens: 1024,\n            messages: [{ role: 'user', content: 'test' }],\n          })\n        ).rejects.toThrow('Invalid API key');\n\n        expect(mockSDK.messages.create).toHaveBeenCalledTimes(1);\n      });\n\n      it('should respect maxRetries configuration', async () => {\n        const customAdapter = new ClaudeFlowSDKAdapter({\n          apiKey: 'test-key',\n          maxRetries: 5,\n        });\n\n        expect(customAdapter.getConfig().maxRetries).toBe(5);\n      });\n    });\n\n    describe('Swarm Metadata Tracking', () => {\n      it('should track message metadata in swarm mode', async () => {\n        mockSDK.messages.create.mockResolvedValue({\n          id: 'msg-123',\n          type: 'message',\n          role: 'assistant',\n          content: [{ type: 'text', text: 'Test response' }],\n          model: 'claude-3-sonnet-20240229',\n          stop_reason: 'end_turn',\n          usage: { input_tokens: 10, output_tokens: 20 },\n        } as any);\n\n        await adapter.createMessage({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1024,\n          messages: [{ role: 'user', content: 'test' }],\n        });\n\n        const metadata = adapter.getSwarmMetadata('msg-123');\n        expect(metadata).toBeDefined();\n        expect(metadata.model).toBe('claude-3-sonnet-20240229');\n        expect(metadata.tokensUsed).toMatchObject({\n          input_tokens: 10,\n          output_tokens: 20,\n        });\n      });\n\n      it('should calculate usage statistics', async () => {\n        mockSDK.messages.create\n          .mockResolvedValueOnce({\n            id: 'msg-1',\n            usage: { input_tokens: 10, output_tokens: 20 },\n          } as any)\n          .mockResolvedValueOnce({\n            id: 'msg-2',\n            usage: { input_tokens: 15, output_tokens: 25 },\n          } as any);\n\n        await adapter.createMessage({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1024,\n          messages: [{ role: 'user', content: 'test1' }],\n        });\n\n        await adapter.createMessage({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1024,\n          messages: [{ role: 'user', content: 'test2' }],\n        });\n\n        const stats = adapter.getUsageStats();\n        expect(stats.messageCount).toBe(2);\n        expect(stats.totalTokens).toBe(70); // 10+20+15+25\n      });\n\n      it('should clear swarm metadata', async () => {\n        mockSDK.messages.create.mockResolvedValue({\n          id: 'msg-123',\n          usage: { input_tokens: 10, output_tokens: 20 },\n        } as any);\n\n        await adapter.createMessage({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1024,\n          messages: [{ role: 'user', content: 'test' }],\n        });\n\n        adapter.clearSwarmMetadata();\n        const stats = adapter.getUsageStats();\n        expect(stats.messageCount).toBe(0);\n        expect(stats.totalTokens).toBe(0);\n      });\n    });\n\n    describe('Backward Compatibility Layer', () => {\n      it('should support legacy retry methods', async () => {\n        const result = await compatibility.executeWithRetry(\n          async () => 'test-result',\n          { maxRetries: 3 }\n        );\n\n        expect(result).toBe('test-result');\n      });\n\n      it('should log deprecation warnings', () => {\n        compatibility.calculateBackoff(1);\n        const warnings = compatibility.getDeprecationReport();\n        expect(warnings).toContain('calculateBackoff');\n      });\n\n      it('should map legacy request format', () => {\n        const legacyRequest = {\n          model: 'claude-2.1',\n          messages: [{ role: 'user', content: 'test' }],\n          max_tokens: 1024,\n          temperature: 0.7,\n        };\n\n        const sdkRequest = compatibility.mapLegacyRequest(legacyRequest);\n        expect(sdkRequest).toMatchObject({\n          model: 'claude-2.1',\n          messages: [{ role: 'user', content: 'test' }],\n          max_tokens: 1024,\n          temperature: 0.7,\n        });\n      });\n\n      it('should support legacy mode', () => {\n        expect(compatibility.isLegacyMode()).toBe(false);\n        compatibility.enableLegacyMode();\n        expect(compatibility.isLegacyMode()).toBe(true);\n      });\n    });\n  });\n\n  describe('Phase 5: Task Executor Integration', () => {\n    const mockTask = {\n      id: 'task-123',\n      type: 'code_generation',\n      description: 'Generate test code',\n      priority: 'high' as const,\n      status: 'pending' as const,\n      dependencies: [],\n    };\n\n    const mockAgent = {\n      id: 'agent-123',\n      type: 'coder',\n      status: 'idle' as const,\n      capabilities: ['code_generation', 'testing'],\n      currentTask: null,\n      taskHistory: [],\n      metrics: {\n        tasksCompleted: 0,\n        averageExecutionTime: 0,\n        successRate: 0,\n      },\n    };\n\n    beforeEach(() => {\n      mockSDK.messages.create.mockResolvedValue({\n        id: 'msg-123',\n        type: 'message',\n        role: 'assistant',\n        content: [{ type: 'text', text: 'Task completed successfully' }],\n        model: 'claude-3-sonnet-20240229',\n        stop_reason: 'end_turn',\n        usage: { input_tokens: 50, output_tokens: 100 },\n      } as any);\n    });\n\n    it('should execute task using SDK', async () => {\n      const result = await executor.executeTask(mockTask, mockAgent);\n\n      expect(result.success).toBe(true);\n      expect(result.output).toBeDefined();\n      expect(result.tokensUsed).toBe(150); // 50 + 100\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('should track execution statistics', async () => {\n      await executor.executeTask(mockTask, mockAgent);\n      await executor.executeTask({ ...mockTask, id: 'task-124' }, mockAgent);\n\n      const stats = executor.getExecutionStats();\n      expect(stats.size).toBe(2);\n    });\n\n    it('should emit task lifecycle events', async () => {\n      const startListener = jest.fn();\n      const completeListener = jest.fn();\n\n      executor.on('task:start', startListener);\n      executor.on('task:complete', completeListener);\n\n      await executor.executeTask(mockTask, mockAgent);\n\n      expect(startListener).toHaveBeenCalledTimes(1);\n      expect(completeListener).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle task execution errors gracefully', async () => {\n      mockSDK.messages.create.mockRejectedValue(new Error('API Error'));\n\n      const errorListener = jest.fn();\n      executor.on('task:error', errorListener);\n\n      const result = await executor.executeTask(mockTask, mockAgent);\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(errorListener).toHaveBeenCalledTimes(1);\n    });\n\n    it('should support streaming task execution', async () => {\n      mockSDK.messages.create.mockResolvedValue({\n        id: 'msg-123',\n        content: [{ type: 'text', text: 'Streaming response' }],\n        usage: { input_tokens: 50, output_tokens: 100 },\n      } as any);\n\n      const chunks: string[] = [];\n      const result = await executor.executeStreamingTask(\n        mockTask,\n        mockAgent,\n        (chunk) => chunks.push(chunk)\n      );\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should provide health status', async () => {\n      const health = await executor.getHealthStatus();\n\n      expect(health).toBeDefined();\n      expect(health.executorStats).toBeDefined();\n      expect(health.executorStats.swarmMode).toBe(true);\n    });\n  });\n\n  describe('Phase 6: Claude Client V2.5', () => {\n    beforeEach(() => {\n      mockSDK.messages.create.mockResolvedValue({\n        id: 'msg-123',\n        type: 'message',\n        role: 'assistant',\n        content: [{ type: 'text', text: 'Client response' }],\n        model: 'claude-3-sonnet-20240229',\n        stop_reason: 'end_turn',\n        usage: { input_tokens: 25, output_tokens: 50 },\n      } as any);\n    });\n\n    it('should make request using SDK', async () => {\n      const response = await client.makeRequest({\n        model: 'claude-3-sonnet-20240229',\n        messages: [{ role: 'user', content: 'test' }],\n        max_tokens: 1024,\n      });\n\n      expect(response).toBeDefined();\n      expect(response.content[0].text).toBe('Client response');\n      expect(response.usage.input_tokens).toBe(25);\n      expect(response.usage.output_tokens).toBe(50);\n    });\n\n    it('should support streaming requests', async () => {\n      const chunks: any[] = [];\n      const response = await client.makeStreamingRequest(\n        {\n          model: 'claude-3-sonnet-20240229',\n          messages: [{ role: 'user', content: 'test' }],\n          max_tokens: 1024,\n          stream: true,\n        },\n        (chunk) => chunks.push(chunk)\n      );\n\n      expect(response).toBeDefined();\n    });\n\n    it('should validate configuration', async () => {\n      mockSDK.messages.create.mockResolvedValue({} as any);\n\n      const isValid = await client.validateConfiguration();\n      expect(isValid).toBe(true);\n    });\n\n    it('should get usage statistics', async () => {\n      await client.makeRequest({\n        model: 'claude-3-sonnet-20240229',\n        messages: [{ role: 'user', content: 'test' }],\n        max_tokens: 1024,\n      });\n\n      const stats = client.getUsageStats();\n      expect(stats.messageCount).toBeGreaterThan(0);\n    });\n\n    it('should check health status', async () => {\n      mockSDK.messages.create.mockResolvedValue({} as any);\n\n      const health = await client.checkHealth();\n      expect(health.status).toBe('healthy');\n      expect(health.details.swarmMode).toBe(true);\n    });\n\n    it('should emit request lifecycle events', async () => {\n      const startListener = jest.fn();\n      const successListener = jest.fn();\n\n      client.on('request:start', startListener);\n      client.on('request:success', successListener);\n\n      await client.makeRequest({\n        model: 'claude-3-sonnet-20240229',\n        messages: [{ role: 'user', content: 'test' }],\n        max_tokens: 1024,\n      });\n\n      expect(startListener).toHaveBeenCalledTimes(1);\n      expect(successListener).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('End-to-End Integration', () => {\n    it('should handle complete swarm workflow', async () => {\n      mockSDK.messages.create.mockResolvedValue({\n        id: 'msg-123',\n        content: [{ type: 'text', text: 'Workflow complete' }],\n        usage: { input_tokens: 100, output_tokens: 200 },\n      } as any);\n\n      const task = {\n        id: 'workflow-task',\n        type: 'full_workflow',\n        description: 'Complete swarm workflow test',\n        priority: 'high' as const,\n        status: 'pending' as const,\n        dependencies: [],\n      };\n\n      const agent = {\n        id: 'workflow-agent',\n        type: 'coordinator',\n        status: 'idle' as const,\n        capabilities: ['coordination', 'orchestration'],\n        currentTask: null,\n        taskHistory: [],\n        metrics: {\n          tasksCompleted: 0,\n          averageExecutionTime: 0,\n          successRate: 0,\n        },\n      };\n\n      // Execute task\n      const result = await executor.executeTask(task, agent);\n      expect(result.success).toBe(true);\n\n      // Verify swarm metadata\n      const metadata = adapter.getSwarmMetadata('msg-123');\n      expect(metadata).toBeDefined();\n\n      // Verify usage stats\n      const stats = adapter.getUsageStats();\n      expect(stats.totalTokens).toBeGreaterThan(0);\n    });\n  });\n});"],"names":["describe","it","expect","beforeEach","afterEach","jest","ClaudeFlowSDKAdapter","SDKCompatibilityLayer","TaskExecutorSDK","ClaudeClientV25","Logger","Anthropic","mock","adapter","compatibility","executor","client","mockSDK","clearAllMocks","messages","create","fn","mockImplementation","config","apiKey","swarmMode","persistenceEnabled","checkpointInterval","executorConfig","maxRetries","timeout","clientConfig","retryAttempts","enableSwarmMode","logger","clearSwarmMetadata","clearExecutionStats","toBeDefined","getConfig","toMatchObject","sdk","getSDK","toBeInstanceOf","process","env","ANTHROPIC_API_KEY","newAdapter","toBe","customAdapter","baseURL","rateLimitError","RateLimitError","headers","Headers","url","mockRejectedValueOnce","mockResolvedValueOnce","id","type","role","content","text","model","stop_reason","usage","input_tokens","output_tokens","response","createMessage","max_tokens","toHaveBeenCalledTimes","authError","AuthenticationError","mockRejectedValue","rejects","toThrow","mockResolvedValue","metadata","getSwarmMetadata","tokensUsed","stats","getUsageStats","messageCount","totalTokens","result","executeWithRetry","calculateBackoff","warnings","getDeprecationReport","toContain","legacyRequest","temperature","sdkRequest","mapLegacyRequest","isLegacyMode","enableLegacyMode","mockTask","description","priority","status","dependencies","mockAgent","capabilities","currentTask","taskHistory","metrics","tasksCompleted","averageExecutionTime","successRate","executeTask","success","output","executionTime","toBeGreaterThan","getExecutionStats","size","startListener","completeListener","on","Error","errorListener","errors","toHaveLength","chunks","executeStreamingTask","chunk","push","health","getHealthStatus","executorStats","makeRequest","makeStreamingRequest","stream","isValid","validateConfiguration","checkHealth","details","successListener","task","agent"],"mappings":"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"}