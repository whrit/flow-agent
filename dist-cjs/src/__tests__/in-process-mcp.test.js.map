{"version":3,"sources":["../../../src/__tests__/in-process-mcp.test.ts"],"sourcesContent":["/**\n * Comprehensive Test Suite for In-Process MCP Server\n *\n * Tests in-process MCP server implementation, SDK integration,\n * performance improvements, and tool routing.\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { InProcessMCPServer, createInProcessServer } from '../mcp/in-process-server.js';\nimport { ClaudeFlowToolRegistry, createToolRegistry } from '../mcp/tool-registry.js';\nimport {\n  SDKIntegration,\n  initializeSDKIntegration,\n  measurePerformance,\n} from '../mcp/sdk-integration.js';\nimport type { MCPTool } from '../utils/types.js';\n\ndescribe('InProcessMCPServer', () => {\n  let server: InProcessMCPServer;\n\n  beforeEach(() => {\n    server = createInProcessServer({\n      name: 'test-server',\n      version: '1.0.0',\n      enableMetrics: true,\n      enableCaching: true,\n    });\n  });\n\n  afterEach(() => {\n    server.clearMetrics();\n    server.clearCache();\n  });\n\n  describe('Tool Registration', () => {\n    it('should register a tool', () => {\n      const tool: MCPTool = {\n        name: 'test/tool',\n        description: 'Test tool',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            message: { type: 'string' },\n          },\n          required: ['message'],\n        },\n        handler: async (args: any) => ({ result: `Hello ${args.message}` }),\n      };\n\n      server.registerTool(tool);\n      expect(server.getToolNames()).toContain('test/tool');\n    });\n\n    it('should unregister a tool', () => {\n      const tool: MCPTool = {\n        name: 'test/tool',\n        description: 'Test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => ({ result: 'ok' }),\n      };\n\n      server.registerTool(tool);\n      expect(server.getToolNames()).toContain('test/tool');\n\n      const removed = server.unregisterTool('test/tool');\n      expect(removed).toBe(true);\n      expect(server.getToolNames()).not.toContain('test/tool');\n    });\n\n    it('should get tool metadata', () => {\n      const tool: MCPTool = {\n        name: 'test/tool',\n        description: 'Test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => ({ result: 'ok' }),\n      };\n\n      server.registerTool(tool);\n      const retrieved = server.getTool('test/tool');\n      expect(retrieved).toBeDefined();\n      expect(retrieved?.name).toBe('test/tool');\n    });\n  });\n\n  describe('Tool Execution', () => {\n    it('should execute a tool successfully', async () => {\n      const tool: MCPTool = {\n        name: 'test/echo',\n        description: 'Echo tool',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            message: { type: 'string' },\n          },\n          required: ['message'],\n        },\n        handler: async (args: any) => ({ echo: args.message }),\n      };\n\n      server.registerTool(tool);\n\n      const result = await server.callTool('test/echo', { message: 'Hello World' });\n\n      expect(result.isError).toBe(false);\n      expect(result.content[0].type).toBe('text');\n      expect(result.content[0].text).toContain('Hello World');\n    });\n\n    it('should handle tool execution errors', async () => {\n      const tool: MCPTool = {\n        name: 'test/error',\n        description: 'Error tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          throw new Error('Test error');\n        },\n      };\n\n      server.registerTool(tool);\n\n      const result = await server.callTool('test/error', {});\n\n      expect(result.isError).toBe(true);\n      expect(result.content[0].text).toContain('Test error');\n    });\n\n    it('should throw error for non-existent tool', async () => {\n      const result = await server.callTool('non/existent', {});\n      expect(result.isError).toBe(true);\n      expect(result.content[0].text).toContain('Tool not found');\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    it('should record metrics for tool calls', async () => {\n      const tool: MCPTool = {\n        name: 'test/metric',\n        description: 'Metric test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => ({ result: 'ok' }),\n      };\n\n      server.registerTool(tool);\n      await server.callTool('test/metric', {});\n\n      const metrics = server.getMetrics();\n      expect(metrics.length).toBeGreaterThan(0);\n      expect(metrics[0].toolName).toBe('test/metric');\n      expect(metrics[0].transport).toBe('in-process');\n    });\n\n    it('should calculate performance statistics', async () => {\n      const tool: MCPTool = {\n        name: 'test/stats',\n        description: 'Stats test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          await new Promise(resolve => setTimeout(resolve, 10));\n          return { result: 'ok' };\n        },\n      };\n\n      server.registerTool(tool);\n\n      // Execute multiple times\n      for (let i = 0; i < 5; i++) {\n        await server.callTool('test/stats', {});\n      }\n\n      const stats = server.getStats();\n      expect(stats.totalCalls).toBe(5);\n      expect(stats.toolStats['test/stats']).toBeDefined();\n      expect(stats.toolStats['test/stats'].totalCalls).toBe(5);\n      expect(stats.toolStats['test/stats'].successRate).toBe(1);\n    });\n\n    it('should track latency accurately', async () => {\n      const tool: MCPTool = {\n        name: 'test/latency',\n        description: 'Latency test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          await new Promise(resolve => setTimeout(resolve, 5));\n          return { result: 'ok' };\n        },\n      };\n\n      server.registerTool(tool);\n      await server.callTool('test/latency', {});\n\n      const metrics = server.getMetrics();\n      expect(metrics[0].duration).toBeGreaterThan(5);\n      expect(metrics[0].duration).toBeLessThan(50); // Should be fast\n    });\n  });\n\n  describe('Caching', () => {\n    it('should cache read-only tool results', async () => {\n      const mockHandler = vi.fn(async () => ({ result: 'cached' }));\n\n      const tool: MCPTool = {\n        name: 'agents/list',\n        description: 'List agents (cacheable)',\n        inputSchema: { type: 'object', properties: {} },\n        handler: mockHandler,\n      };\n\n      server.registerTool(tool);\n\n      // First call - should execute handler\n      await server.callTool('agents/list', {});\n      expect(mockHandler).toHaveBeenCalledTimes(1);\n\n      // Second call - should use cache\n      await server.callTool('agents/list', {});\n      expect(mockHandler).toHaveBeenCalledTimes(1); // Still 1, from cache\n    });\n\n    it('should not cache write operations', async () => {\n      const mockHandler = vi.fn(async () => ({ result: 'not cached' }));\n\n      const tool: MCPTool = {\n        name: 'agents/spawn',\n        description: 'Spawn agent (not cacheable)',\n        inputSchema: { type: 'object', properties: {} },\n        handler: mockHandler,\n      };\n\n      server.registerTool(tool);\n\n      await server.callTool('agents/spawn', {});\n      await server.callTool('agents/spawn', {});\n\n      expect(mockHandler).toHaveBeenCalledTimes(2);\n    });\n\n    it('should expire cache entries', async () => {\n      const mockHandler = vi.fn(async () => ({ result: 'expires' }));\n\n      const tool: MCPTool = {\n        name: 'system/status',\n        description: 'System status (short TTL)',\n        inputSchema: { type: 'object', properties: {} },\n        handler: mockHandler,\n      };\n\n      server.registerTool(tool);\n\n      // First call\n      await server.callTool('system/status', {});\n      expect(mockHandler).toHaveBeenCalledTimes(1);\n\n      // Wait for cache expiry (TTL = 2s for system/status)\n      await new Promise(resolve => setTimeout(resolve, 2100));\n\n      // Second call - cache expired, should execute again\n      await server.callTool('system/status', {});\n      expect(mockHandler).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Context Management', () => {\n    it('should set and use execution context', async () => {\n      const mockOrchestrator = { id: 'test-orchestrator' };\n\n      server.setContext({\n        orchestrator: mockOrchestrator,\n        sessionId: 'test-session',\n      });\n\n      const tool: MCPTool = {\n        name: 'test/context',\n        description: 'Context test tool',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async (args: any, context: any) => ({\n          orchestrator: context?.orchestrator?.id,\n          sessionId: context?.sessionId,\n        }),\n      };\n\n      server.registerTool(tool);\n      const result = await server.callTool('test/context', {});\n\n      expect(result.content[0].text).toContain('test-orchestrator');\n      expect(result.content[0].text).toContain('test-session');\n    });\n  });\n\n  describe('Server Info', () => {\n    it('should return server information', () => {\n      const info = server.getInfo();\n      expect(info.name).toBe('test-server');\n      expect(info.version).toBe('1.0.0');\n      expect(info.toolCount).toBe(0);\n      expect(Array.isArray(info.tools)).toBe(true);\n    });\n  });\n});\n\ndescribe('ClaudeFlowToolRegistry', () => {\n  let registry: ClaudeFlowToolRegistry;\n\n  beforeEach(async () => {\n    registry = await createToolRegistry({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: true,\n    });\n  });\n\n  afterEach(async () => {\n    await registry.cleanup();\n  });\n\n  it('should load all Claude-Flow tools', async () => {\n    const toolNames = registry.getToolNames();\n    expect(toolNames.length).toBeGreaterThan(20); // At least 20+ tools\n\n    // Check for key tool categories\n    expect(toolNames.some(name => name.startsWith('agents/'))).toBe(true);\n    expect(toolNames.some(name => name.startsWith('tasks/'))).toBe(true);\n    expect(toolNames.some(name => name.startsWith('memory/'))).toBe(true);\n    expect(toolNames.some(name => name.startsWith('system/'))).toBe(true);\n  });\n\n  it('should route tool calls correctly', async () => {\n    const result = await registry.routeToolCall('agents/list', { includeTerminated: false });\n    expect(result).toBeDefined();\n  });\n\n  it('should provide SDK server config', () => {\n    const sdkServer = registry.getSdkServerConfig();\n    expect(sdkServer).toBeDefined();\n    expect(sdkServer?.type).toBe('sdk');\n    expect(sdkServer?.name).toBe('claude-flow');\n  });\n\n  it('should return performance metrics', () => {\n    const metrics = registry.getMetrics();\n    expect(metrics).toBeDefined();\n    expect('stats' in metrics || 'error' in metrics).toBe(true);\n  });\n});\n\ndescribe('SDKIntegration', () => {\n  let integration: SDKIntegration;\n\n  beforeEach(async () => {\n    integration = await initializeSDKIntegration({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: true,\n    });\n  });\n\n  afterEach(async () => {\n    await integration.cleanup();\n  });\n\n  it('should initialize in-process server', () => {\n    expect(integration.isInProcessAvailable()).toBe(true);\n  });\n\n  it('should create query with in-process server', () => {\n    const query = integration.query('Test prompt', {\n      maxTurns: 1,\n    });\n\n    expect(query).toBeDefined();\n  });\n\n  it('should get SDK server config', () => {\n    const server = integration.getSdkServer();\n    expect(server).toBeDefined();\n    expect(server?.name).toBe('claude-flow');\n  });\n\n  it('should provide performance comparison', () => {\n    const comparison = integration.getPerformanceComparison();\n    expect(comparison).toBeDefined();\n  });\n});\n\ndescribe('Performance Benchmarks', () => {\n  it('should demonstrate 10-100x speedup vs IPC', async () => {\n    // Initialize in-process server\n    await initializeSDKIntegration({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: false, // Disable cache for accurate measurement\n    });\n\n    // Create a simple test tool\n    const registry = await createToolRegistry({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: false,\n    });\n\n    const inProcessServer = registry.getInProcessServer();\n    expect(inProcessServer).toBeDefined();\n\n    const testTool: MCPTool = {\n      name: 'test/benchmark',\n      description: 'Benchmark test tool',\n      inputSchema: { type: 'object', properties: {} },\n      handler: async () => ({ result: 'ok' }),\n    };\n\n    inProcessServer!.registerTool(testTool);\n\n    // Measure in-process latency\n    const iterations = 10;\n    const durations: number[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const start = performance.now();\n      await inProcessServer!.callTool('test/benchmark', {});\n      durations.push(performance.now() - start);\n    }\n\n    const avgInProcessLatency =\n      durations.reduce((a, b) => a + b, 0) / durations.length;\n\n    // In-process should be < 5ms (typically < 1ms)\n    expect(avgInProcessLatency).toBeLessThan(5);\n\n    // Estimated IPC latency (conservative: 50x slower)\n    const estimatedIPCLatency = avgInProcessLatency * 50;\n\n    console.log('Performance Benchmark Results:');\n    console.log(`In-Process Latency: ${avgInProcessLatency.toFixed(2)}ms`);\n    console.log(`Estimated IPC Latency: ${estimatedIPCLatency.toFixed(2)}ms`);\n    console.log(`Speedup Factor: ${(estimatedIPCLatency / avgInProcessLatency).toFixed(1)}x`);\n\n    // Verify at least 10x improvement\n    expect(estimatedIPCLatency / avgInProcessLatency).toBeGreaterThan(10);\n  }, 30000); // 30s timeout for benchmark\n});\n\ndescribe('Fallback Behavior', () => {\n  it('should fallback to stdio when in-process fails', async () => {\n    const integration = new SDKIntegration({\n      enableInProcess: false, // Explicitly disabled\n      enableMetrics: false,\n      enableCaching: false,\n      fallbackToStdio: true,\n    });\n\n    await integration.initialize();\n\n    expect(integration.isInProcessAvailable()).toBe(false);\n  });\n});\n\ndescribe('Edge Cases', () => {\n  let server: InProcessMCPServer;\n\n  beforeEach(() => {\n    server = createInProcessServer({\n      name: 'edge-test',\n      enableMetrics: true,\n      enableCaching: true,\n    });\n  });\n\n  it('should handle concurrent tool calls', async () => {\n    const tool: MCPTool = {\n      name: 'test/concurrent',\n      description: 'Concurrent test',\n      inputSchema: { type: 'object', properties: {} },\n      handler: async () => {\n        await new Promise(resolve => setTimeout(resolve, 10));\n        return { result: 'ok' };\n      },\n    };\n\n    server.registerTool(tool);\n\n    // Execute 10 concurrent calls\n    const promises = Array.from({ length: 10 }, () =>\n      server.callTool('test/concurrent', {})\n    );\n\n    const results = await Promise.all(promises);\n    expect(results).toHaveLength(10);\n    expect(results.every(r => !r.isError)).toBe(true);\n  });\n\n  it('should handle large payloads', async () => {\n    const tool: MCPTool = {\n      name: 'test/large',\n      description: 'Large payload test',\n      inputSchema: { type: 'object', properties: {} },\n      handler: async (args: any) => ({ echo: args }),\n    };\n\n    server.registerTool(tool);\n\n    const largePayload = {\n      data: Array.from({ length: 1000 }, (_, i) => ({ id: i, value: `item-${i}` })),\n    };\n\n    const result = await server.callTool('test/large', largePayload);\n    expect(result.isError).toBe(false);\n  });\n\n  it('should handle rapid sequential calls', async () => {\n    const tool: MCPTool = {\n      name: 'test/rapid',\n      description: 'Rapid test',\n      inputSchema: { type: 'object', properties: {} },\n      handler: async () => ({ result: 'ok' }),\n    };\n\n    server.registerTool(tool);\n\n    // Execute 100 rapid sequential calls\n    for (let i = 0; i < 100; i++) {\n      await server.callTool('test/rapid', {});\n    }\n\n    const stats = server.getStats();\n    expect(stats.totalCalls).toBe(100);\n  });\n});"],"names":["describe","it","expect","beforeEach","afterEach","vi","createInProcessServer","createToolRegistry","SDKIntegration","initializeSDKIntegration","server","name","version","enableMetrics","enableCaching","clearMetrics","clearCache","tool","description","inputSchema","type","properties","message","required","handler","args","result","registerTool","getToolNames","toContain","removed","unregisterTool","toBe","not","retrieved","getTool","toBeDefined","echo","callTool","isError","content","text","Error","metrics","getMetrics","length","toBeGreaterThan","toolName","transport","Promise","resolve","setTimeout","i","stats","getStats","totalCalls","toolStats","successRate","duration","toBeLessThan","mockHandler","fn","toHaveBeenCalledTimes","mockOrchestrator","id","setContext","orchestrator","sessionId","context","info","getInfo","toolCount","Array","isArray","tools","registry","enableInProcess","cleanup","toolNames","some","startsWith","routeToolCall","includeTerminated","sdkServer","getSdkServerConfig","integration","isInProcessAvailable","query","maxTurns","getSdkServer","comparison","getPerformanceComparison","inProcessServer","getInProcessServer","testTool","iterations","durations","start","performance","now","push","avgInProcessLatency","reduce","a","b","estimatedIPCLatency","console","log","toFixed","fallbackToStdio","initialize","promises","from","results","all","toHaveLength","every","r","largePayload","data","_","value"],"mappings":"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"}