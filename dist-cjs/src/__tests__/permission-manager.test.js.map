{"version":3,"sources":["../../../src/__tests__/permission-manager.test.ts"],"sourcesContent":["/**\n * Permission Manager Tests\n *\n * Comprehensive test suite for 4-level hierarchical permission system\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { mkdir, rm, writeFile } from 'fs/promises';\nimport {\n  PermissionManager,\n  createPermissionManager,\n  permissionManager,\n} from '../permissions/permission-manager.js';\nimport type {\n  PermissionLevel,\n  PermissionQuery,\n  PermissionConfig,\n} from '../permissions/permission-manager.js';\n\n// ===== Test Helpers =====\n\nasync function createTestDirectory(): Promise<string> {\n  const testDir = join(tmpdir(), `perm-test-${Date.now()}`);\n  await mkdir(testDir, { recursive: true });\n  await mkdir(join(testDir, '.claude-flow'), { recursive: true });\n  return testDir;\n}\n\nasync function cleanupTestDirectory(dir: string): Promise<void> {\n  try {\n    await rm(dir, { recursive: true, force: true });\n  } catch (error) {\n    // Ignore cleanup errors\n  }\n}\n\nfunction createMockQuery(overrides?: Partial<PermissionQuery>): PermissionQuery {\n  return {\n    toolName: 'test-tool',\n    toolInput: {},\n    context: {\n      sessionId: 'test-session',\n      workingDir: '/test',\n    },\n    ...overrides,\n  };\n}\n\n// ===== Tests =====\n\ndescribe('PermissionManager', () => {\n  let manager: PermissionManager;\n  let testDir: string;\n\n  beforeEach(async () => {\n    testDir = await createTestDirectory();\n\n    manager = new PermissionManager({\n      cacheEnabled: true,\n      cacheTTL: 60000,\n      userConfigPath: join(testDir, 'user.json'),\n      projectConfigPath: join(testDir, '.claude-flow', 'permissions.json'),\n      localConfigPath: join(testDir, '.permissions.json'),\n    });\n\n    await manager.initialize();\n  });\n\n  afterEach(async () => {\n    manager.clearCache();\n    await cleanupTestDirectory(testDir);\n  });\n\n  describe('Initialization', () => {\n    it('should initialize with default configs', async () => {\n      const userConfig = manager.getConfig('user');\n      const projectConfig = manager.getConfig('project');\n      const localConfig = manager.getConfig('local');\n      const sessionConfig = manager.getConfig('session');\n\n      expect(userConfig).toBeDefined();\n      expect(projectConfig).toBeDefined();\n      expect(localConfig).toBeDefined();\n      expect(sessionConfig).toBeDefined();\n    });\n\n    it('should create default configs when files do not exist', async () => {\n      const config = manager.getConfig('user');\n\n      expect(config?.mode).toBe('default');\n      expect(config?.rules).toEqual([]);\n      expect(config?.allowedDirectories).toEqual([]);\n    });\n  });\n\n  describe('Permission Resolution', () => {\n    it('should resolve permission from session level', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n      expect(resolution.level).toBe('session');\n    });\n\n    it('should fallback to project level', async () => {\n      await manager.updatePermissions('project', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'allow',\n        destination: 'projectSettings',\n      });\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n      expect(resolution.level).toBe('project');\n    });\n\n    it('should fallback through entire chain', async () => {\n      await manager.updatePermissions('user', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'deny',\n        destination: 'userSettings',\n      });\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('deny');\n      expect(resolution.level).toBe('user');\n      expect(resolution.fallbackChain).toContain('user');\n    });\n\n    it('should return ask when no rule found', async () => {\n      const query = createMockQuery({ toolName: 'unknown-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('ask');\n    });\n\n    it('should respect priority within same level', async () => {\n      const sessionConfig = manager.getConfig('session');\n      if (sessionConfig) {\n        sessionConfig.rules.push(\n          {\n            toolName: 'test-tool',\n            behavior: 'deny',\n            scope: 'session',\n            priority: 50,\n            timestamp: Date.now(),\n          },\n          {\n            toolName: 'test-tool',\n            behavior: 'allow',\n            scope: 'session',\n            priority: 100,\n            timestamp: Date.now(),\n          }\n        );\n      }\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow'); // Higher priority wins\n    });\n  });\n\n  describe('Permission Updates', () => {\n    it('should add rules', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [\n          { toolName: 'tool-1' },\n          { toolName: 'tool-2' },\n        ],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.rules).toHaveLength(2);\n    });\n\n    it('should replace rules', async () => {\n      // Add initial rules\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [\n          { toolName: 'tool-1' },\n          { toolName: 'tool-2' },\n        ],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      // Replace with new rules\n      await manager.updatePermissions('session', {\n        type: 'replaceRules',\n        rules: [{ toolName: 'tool-3' }],\n        behavior: 'deny',\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.rules).toHaveLength(1);\n      expect(config?.rules[0].toolName).toBe('tool-3');\n    });\n\n    it('should remove rules', async () => {\n      // Add rules\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [\n          { toolName: 'tool-1' },\n          { toolName: 'tool-2' },\n        ],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      // Remove one rule\n      await manager.updatePermissions('session', {\n        type: 'removeRules',\n        rules: [{ toolName: 'tool-1' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.rules).toHaveLength(1);\n      expect(config?.rules[0].toolName).toBe('tool-2');\n    });\n\n    it('should set mode', async () => {\n      await manager.updatePermissions('session', {\n        type: 'setMode',\n        mode: 'bypassPermissions',\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.mode).toBe('bypassPermissions');\n    });\n\n    it('should add directories', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addDirectories',\n        directories: ['/test/dir1', '/test/dir2'],\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.allowedDirectories).toContain('/test/dir1');\n      expect(config?.allowedDirectories).toContain('/test/dir2');\n    });\n\n    it('should remove directories', async () => {\n      // Add directories\n      await manager.updatePermissions('session', {\n        type: 'addDirectories',\n        directories: ['/test/dir1', '/test/dir2'],\n        destination: 'session',\n      });\n\n      // Remove one\n      await manager.updatePermissions('session', {\n        type: 'removeDirectories',\n        directories: ['/test/dir1'],\n        destination: 'session',\n      });\n\n      const config = manager.getConfig('session');\n      expect(config?.allowedDirectories).not.toContain('/test/dir1');\n      expect(config?.allowedDirectories).toContain('/test/dir2');\n    });\n\n    it('should clear cache on updates', async () => {\n      const query = createMockQuery({ toolName: 'test-tool' });\n\n      // Create cached entry\n      await manager.resolvePermission(query);\n      expect(manager.getCacheStats().size).toBeGreaterThan(0);\n\n      // Update should clear cache\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      expect(manager.getCacheStats().size).toBe(0);\n    });\n  });\n\n  describe('Caching', () => {\n    it('should cache permission resolutions', async () => {\n      const query = createMockQuery({ toolName: 'test-tool' });\n\n      // First resolution\n      const resolution1 = await manager.resolvePermission(query);\n      expect(resolution1.cached).toBe(false);\n\n      // Second resolution should be cached\n      const resolution2 = await manager.resolvePermission(query);\n      expect(resolution2.cached).toBe(true);\n      expect(resolution2.behavior).toBe(resolution1.behavior);\n    });\n\n    it('should provide cache statistics', async () => {\n      const query1 = createMockQuery({ toolName: 'tool-1' });\n      const query2 = createMockQuery({ toolName: 'tool-2' });\n\n      await manager.resolvePermission(query1);\n      await manager.resolvePermission(query2);\n\n      const stats = manager.getCacheStats();\n      expect(stats.size).toBe(2);\n    });\n\n    it('should prune expired entries', async () => {\n      const shortTTLManager = new PermissionManager({\n        cacheEnabled: true,\n        cacheTTL: 100, // 100ms\n        userConfigPath: join(testDir, 'user2.json'),\n      });\n\n      await shortTTLManager.initialize();\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      await shortTTLManager.resolvePermission(query);\n\n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      const pruned = shortTTLManager.pruneCache();\n      expect(pruned).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Rule Matching', () => {\n    it('should match exact tool names', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'exact-match' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'exact-match' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n    });\n\n    it('should match wildcard rules', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: '*' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'any-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n    });\n\n    it('should match pattern-based rules', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-*' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'test-something' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n    });\n  });\n\n  describe('Bypass Mode', () => {\n    it('should bypass all rules when mode is bypassPermissions', async () => {\n      await manager.updatePermissions('session', {\n        type: 'setMode',\n        mode: 'bypassPermissions',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'any-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.behavior).toBe('allow');\n    });\n  });\n\n  describe('Performance', () => {\n    it('should resolve permissions quickly', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n      const resolution = await manager.resolvePermission(query);\n\n      expect(resolution.resolutionTime).toBeLessThan(10); // Less than 10ms\n    });\n\n    it('should be faster with cache', async () => {\n      await manager.updatePermissions('session', {\n        type: 'addRules',\n        rules: [{ toolName: 'test-tool' }],\n        behavior: 'allow',\n        destination: 'session',\n      });\n\n      const query = createMockQuery({ toolName: 'test-tool' });\n\n      // First resolution (no cache)\n      const resolution1 = await manager.resolvePermission(query);\n      const time1 = resolution1.resolutionTime;\n\n      // Second resolution (cached)\n      const resolution2 = await manager.resolvePermission(query);\n      const time2 = resolution2.resolutionTime;\n\n      expect(time2).toBeLessThanOrEqual(time1);\n      expect(resolution2.cached).toBe(true);\n    });\n  });\n});\n\ndescribe('Factory Function', () => {\n  it('should create permission manager with defaults', () => {\n    const manager = createPermissionManager();\n\n    expect(manager).toBeInstanceOf(PermissionManager);\n  });\n\n  it('should create permission manager with custom options', () => {\n    const manager = createPermissionManager({\n      workingDir: '/test/dir',\n      cacheEnabled: false,\n      cacheTTL: 10000,\n    });\n\n    expect(manager).toBeInstanceOf(PermissionManager);\n  });\n});\n\ndescribe('Singleton Instance', () => {\n  it('should export singleton instance', () => {\n    expect(permissionManager).toBeInstanceOf(PermissionManager);\n  });\n\n  it('should maintain state across calls', async () => {\n    await permissionManager.updatePermissions('session', {\n      type: 'addRules',\n      rules: [{ toolName: 'singleton-test' }],\n      behavior: 'allow',\n      destination: 'session',\n    });\n\n    const config = permissionManager.getConfig('session');\n    expect(config?.rules.some(r => r.toolName === 'singleton-test')).toBe(true);\n  });\n});"],"names":["describe","it","expect","beforeEach","afterEach","tmpdir","join","mkdir","rm","PermissionManager","createPermissionManager","permissionManager","createTestDirectory","testDir","Date","now","recursive","cleanupTestDirectory","dir","force","error","createMockQuery","overrides","toolName","toolInput","context","sessionId","workingDir","manager","cacheEnabled","cacheTTL","userConfigPath","projectConfigPath","localConfigPath","initialize","clearCache","userConfig","getConfig","projectConfig","localConfig","sessionConfig","toBeDefined","config","mode","toBe","rules","toEqual","allowedDirectories","updatePermissions","type","behavior","destination","query","resolution","resolvePermission","level","fallbackChain","toContain","push","scope","priority","timestamp","toHaveLength","directories","not","getCacheStats","size","toBeGreaterThan","resolution1","cached","resolution2","query1","query2","stats","shortTTLManager","Promise","resolve","setTimeout","pruned","pruneCache","resolutionTime","toBeLessThan","time1","time2","toBeLessThanOrEqual","toBeInstanceOf","some","r"],"mappings":"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"}