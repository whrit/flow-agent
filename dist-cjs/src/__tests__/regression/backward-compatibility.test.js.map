{"version":3,"sources":["../../../../src/__tests__/regression/backward-compatibility.test.ts"],"sourcesContent":["/**\n * Backward Compatibility Regression Tests\n * Phase 7: Comprehensive Testing & Validation\n *\n * Ensures existing functionality still works with SDK integration\n */\n\nimport { describe, it, expect, beforeEach } from '@jest/globals';\nimport { ClaudeFlowSDKAdapter } from '../../sdk/sdk-config.js';\nimport { SDKCompatibilityLayer } from '../../sdk/compatibility-layer.js';\nimport { TaskExecutorSDK } from '../../swarm/executor-sdk.js';\nimport { ClaudeClientV25 } from '../../api/claude-client-v2.5.js';\n\ndescribe('Backward Compatibility Tests', () => {\n  let adapter: ClaudeFlowSDKAdapter;\n  let compatibility: SDKCompatibilityLayer;\n\n  beforeEach(() => {\n    adapter = new ClaudeFlowSDKAdapter({\n      apiKey: 'test-api-key',\n      swarmMode: true,\n    });\n    compatibility = new SDKCompatibilityLayer(adapter);\n  });\n\n  describe('Legacy API Compatibility', () => {\n    it('should support legacy model names', () => {\n      const legacyModels = [\n        'claude-2.1',\n        'claude-2.0',\n        'claude-instant-1.2',\n        'claude-3-opus-20240229',\n        'claude-3-sonnet-20240229',\n        'claude-3-haiku-20240307',\n      ];\n\n      legacyModels.forEach((model) => {\n        const request = compatibility.mapLegacyRequest({\n          model,\n          messages: [{ role: 'user', content: 'test' }],\n          max_tokens: 1024,\n        });\n\n        expect(request.model).toBeDefined();\n        expect(request.messages).toHaveLength(1);\n      });\n    });\n\n    it('should maintain legacy request format', () => {\n      const legacyRequest = {\n        model: 'claude-2.1',\n        messages: [{ role: 'user', content: 'test' }],\n        max_tokens: 1024,\n        temperature: 0.7,\n        top_p: 0.9,\n        top_k: 5,\n        system: 'You are a helpful assistant',\n        metadata: { user_id: 'user-123' },\n        stop_sequences: ['STOP'],\n      };\n\n      const sdkRequest = compatibility.mapLegacyRequest(legacyRequest);\n\n      expect(sdkRequest.model).toBe('claude-2.1');\n      expect(sdkRequest.messages).toEqual(legacyRequest.messages);\n      expect(sdkRequest.max_tokens).toBe(1024);\n      expect(sdkRequest.temperature).toBe(0.7);\n      expect(sdkRequest.top_p).toBe(0.9);\n      expect(sdkRequest.top_k).toBe(5);\n      expect(sdkRequest.system).toBe(legacyRequest.system);\n      expect(sdkRequest.stop_sequences).toEqual(['STOP']);\n    });\n\n    it('should convert SDK responses to legacy format', () => {\n      const sdkResponse = {\n        id: 'msg-123',\n        type: 'message' as const,\n        role: 'assistant' as const,\n        content: [{ type: 'text' as const, text: 'Response text' }],\n        model: 'claude-3-sonnet-20240229',\n        stop_reason: 'end_turn' as const,\n        stop_sequence: null,\n        usage: { input_tokens: 10, output_tokens: 20 },\n      };\n\n      const legacyResponse = compatibility.mapSDKResponse(sdkResponse as any);\n\n      expect(legacyResponse.id).toBe('msg-123');\n      expect(legacyResponse.type).toBe('message');\n      expect(legacyResponse.role).toBe('assistant');\n      expect(legacyResponse.content[0].text).toBe('Response text');\n      expect(legacyResponse.usage.input_tokens).toBe(10);\n    });\n\n    it('should support deprecated executeWithRetry method', async () => {\n      let callCount = 0;\n      const fn = async () => {\n        callCount++;\n        return 'success';\n      };\n\n      const result = await compatibility.executeWithRetry(fn, {\n        maxRetries: 3,\n      });\n\n      expect(result).toBe('success');\n      expect(callCount).toBe(1);\n    });\n\n    it('should log deprecation warnings only once', () => {\n      compatibility.calculateBackoff(1);\n      compatibility.calculateBackoff(2);\n      compatibility.calculateBackoff(3);\n\n      const warnings = compatibility.getDeprecationReport();\n      expect(warnings).toContain('calculateBackoff');\n      expect(warnings.filter((w) => w === 'calculateBackoff').length).toBe(1);\n    });\n  });\n\n  describe('Legacy Configuration Options', () => {\n    it('should support ANTHROPIC_API_KEY environment variable', () => {\n      process.env.ANTHROPIC_API_KEY = 'env-api-key';\n\n      const newAdapter = new ClaudeFlowSDKAdapter({});\n      expect(newAdapter.getConfig().apiKey).toBe('env-api-key');\n\n      delete process.env.ANTHROPIC_API_KEY;\n    });\n\n    it('should support CLAUDE_API_KEY environment variable', () => {\n      process.env.CLAUDE_API_KEY = 'claude-api-key';\n      delete process.env.ANTHROPIC_API_KEY;\n\n      const newAdapter = new ClaudeFlowSDKAdapter({});\n      expect(newAdapter.getConfig().apiKey).toBe('claude-api-key');\n\n      delete process.env.CLAUDE_API_KEY;\n    });\n\n    it('should maintain default configuration values', () => {\n      const defaultAdapter = new ClaudeFlowSDKAdapter({\n        apiKey: 'test-key',\n      });\n\n      const config = defaultAdapter.getConfig();\n\n      expect(config.maxRetries).toBe(3);\n      expect(config.timeout).toBe(60000);\n      expect(config.swarmMode).toBe(true);\n      expect(config.persistenceEnabled).toBe(true);\n      expect(config.checkpointInterval).toBe(60000);\n    });\n\n    it('should allow custom configuration overrides', () => {\n      const customAdapter = new ClaudeFlowSDKAdapter({\n        apiKey: 'test-key',\n        maxRetries: 5,\n        timeout: 120000,\n        swarmMode: false,\n        persistenceEnabled: false,\n        checkpointInterval: 90000,\n      });\n\n      const config = customAdapter.getConfig();\n\n      expect(config.maxRetries).toBe(5);\n      expect(config.timeout).toBe(120000);\n      expect(config.swarmMode).toBe(false);\n      expect(config.persistenceEnabled).toBe(false);\n      expect(config.checkpointInterval).toBe(90000);\n    });\n  });\n\n  describe('Legacy Task Execution', () => {\n    it('should maintain task structure compatibility', () => {\n      const legacyTask = {\n        id: 'task-123',\n        type: 'code_generation',\n        description: 'Generate code',\n        priority: 'high' as const,\n        status: 'pending' as const,\n        dependencies: ['task-100'],\n      };\n\n      // Task structure should remain unchanged\n      expect(legacyTask.id).toBe('task-123');\n      expect(legacyTask.type).toBe('code_generation');\n      expect(legacyTask.dependencies).toEqual(['task-100']);\n    });\n\n    it('should maintain agent state compatibility', () => {\n      const legacyAgent = {\n        id: 'agent-123',\n        type: 'coder',\n        status: 'idle' as const,\n        capabilities: ['code_generation', 'testing'],\n        currentTask: null,\n        taskHistory: [],\n        metrics: {\n          tasksCompleted: 0,\n          averageExecutionTime: 0,\n          successRate: 0,\n        },\n      };\n\n      // Agent structure should remain unchanged\n      expect(legacyAgent.type).toBe('coder');\n      expect(legacyAgent.capabilities).toContain('code_generation');\n      expect(legacyAgent.metrics).toBeDefined();\n    });\n\n    it('should maintain execution result format', () => {\n      const legacyResult = {\n        success: true,\n        output: 'Task completed',\n        errors: [],\n        executionTime: 1500,\n        tokensUsed: 250,\n        retryCount: 0,\n        checkpointId: 'checkpoint-123',\n      };\n\n      // Result format should remain unchanged\n      expect(legacyResult.success).toBe(true);\n      expect(legacyResult.output).toBe('Task completed');\n      expect(legacyResult.errors).toHaveLength(0);\n      expect(legacyResult.tokensUsed).toBe(250);\n    });\n  });\n\n  describe('Legacy Error Handling', () => {\n    it('should maintain error type compatibility', () => {\n      const errorTypes = [\n        'ClaudeAPIError',\n        'ClaudeAuthenticationError',\n        'ClaudeRateLimitError',\n        'ClaudeValidationError',\n      ];\n\n      errorTypes.forEach((errorType) => {\n        expect(errorType).toMatch(/Claude.*Error/);\n      });\n    });\n\n    it('should preserve error message format', () => {\n      const legacyError = {\n        name: 'ClaudeAPIError',\n        message: 'API request failed',\n        status: 500,\n        details: { retries: 3 },\n      };\n\n      expect(legacyError.name).toContain('Error');\n      expect(legacyError.message).toBeDefined();\n      expect(legacyError.status).toBe(500);\n    });\n\n    it('should maintain retry behavior on rate limits', async () => {\n      let attempts = 0;\n      const maxRetries = 3;\n\n      const retryFunction = async () => {\n        attempts++;\n        if (attempts < maxRetries) {\n          throw new Error('Rate limit');\n        }\n        return 'success';\n      };\n\n      try {\n        const result = await compatibility.executeWithRetry(retryFunction, {\n          maxRetries,\n        });\n        expect(result).toBe('success');\n        expect(attempts).toBe(maxRetries);\n      } catch (error) {\n        // Should not reach here\n        expect(true).toBe(false);\n      }\n    });\n  });\n\n  describe('Legacy Event Emission', () => {\n    it('should maintain event names and payloads', () => {\n      const legacyEvents = [\n        { name: 'request:start', payload: { requestId: 'req-123' } },\n        { name: 'request:success', payload: { response: {} } },\n        { name: 'request:error', payload: { error: {} } },\n        { name: 'task:start', payload: { taskId: 'task-123' } },\n        { name: 'task:complete', payload: { result: {} } },\n        { name: 'task:error', payload: { error: {} } },\n      ];\n\n      legacyEvents.forEach((event) => {\n        expect(event.name).toMatch(/^(request|task):/);\n        expect(event.payload).toBeDefined();\n      });\n    });\n  });\n\n  describe('Legacy CLI Integration', () => {\n    it('should maintain CLI command structure', () => {\n      const legacyCommands = {\n        'swarm init': { topology: 'mesh', maxAgents: 5 },\n        'agent spawn': { type: 'coder', capabilities: [] },\n        'task orchestrate': { task: 'test', strategy: 'parallel' },\n        'swarm status': {},\n      };\n\n      Object.keys(legacyCommands).forEach((command) => {\n        expect(command).toMatch(/^(swarm|agent|task)/);\n      });\n    });\n\n    it('should maintain CLI output format', () => {\n      const legacyOutput = {\n        status: 'success',\n        data: { swarmId: 'swarm-123' },\n        timestamp: Date.now(),\n      };\n\n      expect(legacyOutput.status).toBe('success');\n      expect(legacyOutput.data).toBeDefined();\n      expect(legacyOutput.timestamp).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Legacy Memory Operations', () => {\n    it('should maintain memory key format', () => {\n      const legacyKeys = [\n        'swarm/status',\n        'swarm/agents',\n        'swarm/tasks',\n        'coordination/state',\n        'metrics/performance',\n      ];\n\n      legacyKeys.forEach((key) => {\n        expect(key).toMatch(/^[a-z]+\\/[a-z]+$/);\n      });\n    });\n\n    it('should maintain memory namespace structure', () => {\n      const legacyNamespaces = ['default', 'coordination', 'metrics', 'cache'];\n\n      legacyNamespaces.forEach((namespace) => {\n        expect(namespace).toMatch(/^[a-z]+$/);\n      });\n    });\n  });\n\n  describe('Legacy Hook System', () => {\n    it('should maintain hook event names', () => {\n      const legacyHooks = [\n        'pre-task',\n        'post-task',\n        'pre-edit',\n        'post-edit',\n        'session-start',\n        'session-end',\n        'session-restore',\n      ];\n\n      legacyHooks.forEach((hook) => {\n        expect(hook).toMatch(/^(pre|post|session)-/);\n      });\n    });\n\n    it('should maintain hook payload structure', () => {\n      const legacyHookPayload = {\n        hookName: 'pre-task',\n        timestamp: Date.now(),\n        metadata: { taskId: 'task-123' },\n      };\n\n      expect(legacyHookPayload.hookName).toBeDefined();\n      expect(legacyHookPayload.timestamp).toBeGreaterThan(0);\n      expect(legacyHookPayload.metadata).toBeDefined();\n    });\n  });\n\n  describe('Legacy Metrics System', () => {\n    it('should maintain metrics structure', () => {\n      const legacyMetrics = {\n        taskMetrics: {\n          totalTasks: 10,\n          completedTasks: 8,\n          failedTasks: 2,\n        },\n        performanceMetrics: {\n          averageExecutionTime: 1500,\n          totalExecutionTime: 15000,\n        },\n        systemMetrics: {\n          memoryUsage: 0.5,\n          cpuUsage: 0.3,\n        },\n      };\n\n      expect(legacyMetrics.taskMetrics).toBeDefined();\n      expect(legacyMetrics.performanceMetrics).toBeDefined();\n      expect(legacyMetrics.systemMetrics).toBeDefined();\n    });\n\n    it('should maintain usage statistics format', () => {\n      const stats = adapter.getUsageStats();\n\n      expect(stats).toHaveProperty('totalTokens');\n      expect(stats).toHaveProperty('messageCount');\n      expect(typeof stats.totalTokens).toBe('number');\n      expect(typeof stats.messageCount).toBe('number');\n    });\n  });\n\n  describe('Legacy Swarm Coordination', () => {\n    it('should maintain swarm topology types', () => {\n      const legacyTopologies = ['mesh', 'hierarchical', 'ring', 'star'];\n\n      legacyTopologies.forEach((topology) => {\n        expect(['mesh', 'hierarchical', 'ring', 'star']).toContain(topology);\n      });\n    });\n\n    it('should maintain agent types', () => {\n      const legacyAgentTypes = [\n        'researcher',\n        'coder',\n        'analyst',\n        'optimizer',\n        'coordinator',\n      ];\n\n      legacyAgentTypes.forEach((type) => {\n        expect([\n          'researcher',\n          'coder',\n          'analyst',\n          'optimizer',\n          'coordinator',\n        ]).toContain(type);\n      });\n    });\n\n    it('should maintain coordination strategy types', () => {\n      const legacyStrategies = ['balanced', 'specialized', 'adaptive'];\n\n      legacyStrategies.forEach((strategy) => {\n        expect(['balanced', 'specialized', 'adaptive']).toContain(strategy);\n      });\n    });\n  });\n\n  describe('Version Migration', () => {\n    it('should handle v2.0.0 to v2.5.0 migration', () => {\n      // v2.0.0 format\n      const v2Config = {\n        apiKey: 'test-key',\n        customRetryLogic: true, // deprecated\n        customErrorHandling: true, // deprecated\n      };\n\n      // v2.5.0 should ignore deprecated fields\n      const newAdapter = new ClaudeFlowSDKAdapter({\n        apiKey: v2Config.apiKey,\n      });\n\n      expect(newAdapter.getConfig().apiKey).toBe('test-key');\n    });\n\n    it('should provide migration warnings for deprecated features', () => {\n      const deprecatedFeatures = [\n        'calculateBackoff',\n        'persistToDisk',\n        'executeValidations',\n      ];\n\n      deprecatedFeatures.forEach((feature) => {\n        if (feature === 'calculateBackoff') {\n          compatibility.calculateBackoff(1);\n        }\n      });\n\n      const warnings = compatibility.getDeprecationReport();\n      expect(warnings.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Integration with Existing Codebase', () => {\n    it('should work with existing executor instances', () => {\n      const executor = new TaskExecutorSDK({\n        apiKey: 'test-key',\n        swarmMode: true,\n      });\n\n      expect(executor).toBeDefined();\n      expect(executor.getExecutionStats).toBeDefined();\n      expect(executor.executeTask).toBeDefined();\n    });\n\n    it('should work with existing client instances', () => {\n      const client = new ClaudeClientV25(\n        {\n          apiKey: 'test-key',\n          enableSwarmMode: true,\n        },\n        undefined\n      );\n\n      expect(client).toBeDefined();\n      expect(client.makeRequest).toBeDefined();\n      expect(client.validateConfiguration).toBeDefined();\n    });\n\n    it('should preserve all existing public APIs', () => {\n      // Verify SDK Adapter APIs\n      expect(adapter.getSDK).toBeDefined();\n      expect(adapter.getConfig).toBeDefined();\n      expect(adapter.createMessage).toBeDefined();\n      expect(adapter.validateConfiguration).toBeDefined();\n      expect(adapter.getUsageStats).toBeDefined();\n\n      // Verify Compatibility Layer APIs\n      expect(compatibility.executeWithRetry).toBeDefined();\n      expect(compatibility.mapLegacyRequest).toBeDefined();\n      expect(compatibility.mapSDKResponse).toBeDefined();\n      expect(compatibility.getDeprecationReport).toBeDefined();\n    });\n  });\n});"],"names":["describe","it","expect","beforeEach","ClaudeFlowSDKAdapter","SDKCompatibilityLayer","TaskExecutorSDK","ClaudeClientV25","adapter","compatibility","apiKey","swarmMode","legacyModels","forEach","model","request","mapLegacyRequest","messages","role","content","max_tokens","toBeDefined","toHaveLength","legacyRequest","temperature","top_p","top_k","system","metadata","user_id","stop_sequences","sdkRequest","toBe","toEqual","sdkResponse","id","type","text","stop_reason","stop_sequence","usage","input_tokens","output_tokens","legacyResponse","mapSDKResponse","callCount","fn","result","executeWithRetry","maxRetries","calculateBackoff","warnings","getDeprecationReport","toContain","filter","w","length","process","env","ANTHROPIC_API_KEY","newAdapter","getConfig","CLAUDE_API_KEY","defaultAdapter","config","timeout","persistenceEnabled","checkpointInterval","customAdapter","legacyTask","description","priority","status","dependencies","legacyAgent","capabilities","currentTask","taskHistory","metrics","tasksCompleted","averageExecutionTime","successRate","legacyResult","success","output","errors","executionTime","tokensUsed","retryCount","checkpointId","errorTypes","errorType","toMatch","legacyError","name","message","details","retries","attempts","retryFunction","Error","error","legacyEvents","payload","requestId","response","taskId","event","legacyCommands","topology","maxAgents","task","strategy","Object","keys","command","legacyOutput","data","swarmId","timestamp","Date","now","toBeGreaterThan","legacyKeys","key","legacyNamespaces","namespace","legacyHooks","hook","legacyHookPayload","hookName","legacyMetrics","taskMetrics","totalTasks","completedTasks","failedTasks","performanceMetrics","totalExecutionTime","systemMetrics","memoryUsage","cpuUsage","stats","getUsageStats","toHaveProperty","totalTokens","messageCount","legacyTopologies","legacyAgentTypes","legacyStrategies","v2Config","customRetryLogic","customErrorHandling","deprecatedFeatures","feature","executor","getExecutionStats","executeTask","client","enableSwarmMode","undefined","makeRequest","validateConfiguration","getSDK","createMessage"],"mappings":"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"}