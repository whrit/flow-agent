{"version":3,"sources":["../../../src/api/claude-client.ts"],"sourcesContent":["/**\n * Claude API client for Claude-Flow\n * Provides direct integration with Claude's API including temperature and model selection\n */\n\nimport { EventEmitter } from 'events';\nimport { ILogger } from '../core/logger.js';\nimport { ConfigManager } from '../config/config-manager.js';\nimport { getErrorMessage } from '../utils/error-handler.js';\nimport { \n  ClaudeAPIError,\n  ClaudeInternalServerError,\n  ClaudeServiceUnavailableError,\n  ClaudeRateLimitError,\n  ClaudeTimeoutError,\n  ClaudeNetworkError,\n  ClaudeAuthenticationError,\n  ClaudeValidationError,\n  HealthCheckResult,\n  getUserFriendlyError,\n} from './claude-api-errors.js';\nimport { circuitBreaker, CircuitBreaker } from '../utils/helpers.js';\n\nexport interface ClaudeAPIConfig {\n  apiKey: string;\n  apiUrl?: string;\n  model?: ClaudeModel;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  topK?: number;\n  systemPrompt?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n  // Enhanced error handling options\n  enableHealthCheck?: boolean;\n  healthCheckInterval?: number;\n  circuitBreakerThreshold?: number;\n  circuitBreakerTimeout?: number;\n  circuitBreakerResetTimeout?: number;\n  retryJitter?: boolean;\n}\n\nexport type ClaudeModel =\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | 'claude-2.1'\n  | 'claude-2.0'\n  | 'claude-instant-1.2';\n\nexport interface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ClaudeRequest {\n  model: ClaudeModel;\n  messages: ClaudeMessage[];\n  system?: string;\n  max_tokens: number;\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  metadata?: {\n    user_id?: string;\n  };\n  stop_sequences?: string[];\n  stream?: boolean;\n}\n\nexport interface ClaudeResponse {\n  id: string;\n  type: 'message';\n  role: 'assistant';\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  model: ClaudeModel;\n  stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence';\n  stop_sequence?: string;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport interface ClaudeStreamEvent {\n  type:\n    | 'message_start'\n    | 'content_block_start'\n    | 'content_block_delta'\n    | 'content_block_stop'\n    | 'message_delta'\n    | 'message_stop'\n    | 'ping'\n    | 'error';\n  message?: Partial<ClaudeResponse>;\n  index?: number;\n  delta?: {\n    type?: 'text_delta';\n    text?: string;\n    stop_reason?: string;\n    stop_sequence?: string;\n  };\n  content_block?: {\n    type: 'text';\n    text: string;\n  };\n  usage?: {\n    output_tokens: number;\n  };\n  error?: {\n    type: string;\n    message: string;\n  };\n}\n\nexport class ClaudeAPIClient extends EventEmitter {\n  private config: ClaudeAPIConfig;\n  private logger: ILogger;\n  private configManager: ConfigManager;\n  private defaultModel: ClaudeModel = 'claude-3-sonnet-20240229';\n  private defaultTemperature: number = 0.7;\n  private defaultMaxTokens: number = 4096;\n  private circuitBreaker: CircuitBreaker;\n  private lastHealthCheck?: HealthCheckResult;\n  private healthCheckTimer?: NodeJS.Timeout;\n\n  constructor(logger: ILogger, configManager: ConfigManager, config?: Partial<ClaudeAPIConfig>) {\n    super();\n    this.logger = logger;\n    this.configManager = configManager;\n\n    // Load config from environment and merge with provided config\n    this.config = this.loadConfiguration(config);\n    \n    // Initialize circuit breaker for API reliability\n    this.circuitBreaker = circuitBreaker('claude-api', {\n      threshold: this.config.circuitBreakerThreshold || 5,\n      timeout: this.config.circuitBreakerTimeout || 60000,\n      resetTimeout: this.config.circuitBreakerResetTimeout || 300000,\n    });\n\n    // Start health check if enabled\n    if (this.config.enableHealthCheck) {\n      this.startHealthCheck();\n    }\n  }\n\n  /**\n   * Load configuration from various sources\n   */\n  private loadConfiguration(overrides?: Partial<ClaudeAPIConfig>): ClaudeAPIConfig {\n    // Start with defaults\n    const config: ClaudeAPIConfig = {\n      apiKey: '',\n      apiUrl: 'https://api.anthropic.com/v1/messages',\n      model: this.defaultModel,\n      temperature: this.defaultTemperature,\n      maxTokens: this.defaultMaxTokens,\n      topP: 1,\n      topK: undefined,\n      systemPrompt: undefined,\n      timeout: 60000, // 60 seconds\n      retryAttempts: 3,\n      retryDelay: 1000,\n      // Enhanced error handling defaults\n      enableHealthCheck: false,\n      healthCheckInterval: 300000, // 5 minutes\n      circuitBreakerThreshold: 5,\n      circuitBreakerTimeout: 60000,\n      circuitBreakerResetTimeout: 300000,\n      retryJitter: true,\n    };\n\n    // Load from environment variables\n    if (process.env.ANTHROPIC_API_KEY) {\n      config.apiKey = process.env.ANTHROPIC_API_KEY;\n    }\n    if (process.env.CLAUDE_API_URL) {\n      config.apiUrl = process.env.CLAUDE_API_URL;\n    }\n    if (process.env.CLAUDE_MODEL) {\n      config.model = process.env.CLAUDE_MODEL as ClaudeModel;\n    }\n    if (process.env.CLAUDE_TEMPERATURE) {\n      config.temperature = parseFloat(process.env.CLAUDE_TEMPERATURE);\n    }\n    if (process.env.CLAUDE_MAX_TOKENS) {\n      config.maxTokens = parseInt(process.env.CLAUDE_MAX_TOKENS, 10);\n    }\n\n    // Load from config manager if available\n    const claudeConfig = this.configManager.get('claude');\n    if (claudeConfig) {\n      Object.assign(config, claudeConfig);\n    }\n\n    // Apply overrides\n    if (overrides) {\n      Object.assign(config, overrides);\n    }\n\n    // Validate configuration\n    this.validateConfiguration(config);\n\n    return config;\n  }\n\n  /**\n   * Validate configuration settings\n   */\n  private validateConfiguration(config: ClaudeAPIConfig): void {\n    if (!config.apiKey) {\n      throw new ClaudeAuthenticationError('Claude API key is required. Set ANTHROPIC_API_KEY environment variable.');\n    }\n\n    if (config.temperature !== undefined) {\n      if (config.temperature < 0 || config.temperature > 1) {\n        throw new ClaudeValidationError('Temperature must be between 0 and 1');\n      }\n    }\n\n    if (config.topP !== undefined) {\n      if (config.topP < 0 || config.topP > 1) {\n        throw new ClaudeValidationError('Top-p must be between 0 and 1');\n      }\n    }\n\n    if (config.maxTokens !== undefined && (config.maxTokens < 1 || config.maxTokens > 100000)) {\n      throw new ClaudeValidationError('Max tokens must be between 1 and 100000');\n    }\n  }\n\n  /**\n   * Update configuration dynamically\n   */\n  updateConfig(updates: Partial<ClaudeAPIConfig>): void {\n    this.config = { ...this.config, ...updates };\n    this.validateConfiguration(this.config);\n    this.logger.info('Claude API configuration updated', {\n      model: this.config.model,\n      temperature: this.config.temperature,\n      maxTokens: this.config.maxTokens,\n    });\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): ClaudeAPIConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Send a message to Claude API\n   */\n  async sendMessage(\n    messages: ClaudeMessage[],\n    options?: {\n      model?: ClaudeModel;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n      stream?: boolean;\n    },\n  ): Promise<ClaudeResponse | AsyncIterable<ClaudeStreamEvent>> {\n    const request: ClaudeRequest = {\n      model: options?.model || this.config.model || 'claude-3-opus-20240229',\n      messages,\n      system: options?.systemPrompt || this.config.systemPrompt,\n      max_tokens: options?.maxTokens || this.config.maxTokens || 4096,\n      temperature: options?.temperature ?? this.config.temperature,\n      top_p: this.config.topP,\n      top_k: this.config.topK,\n      stream: options?.stream || false,\n    };\n\n    this.logger.debug('Sending Claude API request', {\n      model: request.model,\n      temperature: request.temperature,\n      maxTokens: request.max_tokens,\n      messageCount: messages.length,\n      stream: request.stream,\n    });\n\n    if (request.stream) {\n      return this.streamRequest(request);\n    } else {\n      return this.sendRequest(request);\n    }\n  }\n\n  /**\n   * Send a non-streaming request\n   */\n  private async sendRequest(request: ClaudeRequest): Promise<ClaudeResponse> {\n    let lastError: ClaudeAPIError | undefined;\n\n    for (let attempt = 0; attempt < (this.config.retryAttempts || 3); attempt++) {\n      try {\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), this.config.timeout || 30000);\n\n        const response = await fetch(this.config.apiUrl || 'https://api.anthropic.com/v1/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'anthropic-version': '2023-06-01',\n            'x-api-key': this.config.apiKey,\n          },\n          body: JSON.stringify(request),\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeout);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          let errorData: any;\n          \n          try {\n            errorData = JSON.parse(errorText);\n          } catch {\n            errorData = { message: errorText };\n          }\n\n          throw this.createAPIError(response.status, errorData);\n        }\n\n        const data = (await response.json()) as ClaudeResponse;\n\n        this.logger.info('Claude API response received', {\n          model: data.model,\n          inputTokens: data.usage.input_tokens,\n          outputTokens: data.usage.output_tokens,\n          stopReason: data.stop_reason,\n        });\n\n        this.emit('response', data);\n        return data;\n      } catch (error) {\n        lastError = this.transformError(error);\n        \n        // Don't retry non-retryable errors\n        if (!lastError.retryable) {\n          this.handleError(lastError);\n          throw lastError;\n        }\n\n        this.logger.warn(\n          `Claude API request failed (attempt ${attempt + 1}/${this.config.retryAttempts})`,\n          {\n            error: lastError.message,\n            statusCode: lastError.statusCode,\n            retryable: lastError.retryable,\n          },\n        );\n\n        if (attempt < (this.config.retryAttempts || 3) - 1) {\n          const delay = this.calculateRetryDelay(attempt, lastError);\n          await this.delay(delay);\n        }\n      }\n    }\n\n    this.handleError(lastError!);\n    throw lastError;\n  }\n\n  /**\n   * Send a streaming request\n   */\n  private async *streamRequest(request: ClaudeRequest): AsyncIterable<ClaudeStreamEvent> {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), (this.config.timeout || 30000) * 2); // Double timeout for streaming\n\n    try {\n      const response = await fetch(this.config.apiUrl || 'https://api.anthropic.com/v1/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.config.apiKey,\n        },\n        body: JSON.stringify({ ...request, stream: true }),\n        signal: controller.signal,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData: any;\n        \n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { message: errorText };\n        }\n\n        throw this.createAPIError(response.status, errorData);\n      }\n\n      if (!response.body) {\n        throw new ClaudeAPIError('Response body is null');\n      }\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') continue;\n\n            try {\n              const event = JSON.parse(data) as ClaudeStreamEvent;\n              this.emit('stream_event', event);\n              yield event;\n            } catch (e) {\n              this.logger.warn('Failed to parse stream event', { data, error: e });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      clearTimeout(timeout);\n      \n      // Handle abort/timeout\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new ClaudeTimeoutError(\n          'Request timed out',\n          this.config.timeout || 60000,\n        );\n      }\n      \n      throw error;\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * Helper method for simple completions\n   */\n  async complete(\n    prompt: string,\n    options?: {\n      model?: ClaudeModel;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n    },\n  ): Promise<string> {\n    const messages: ClaudeMessage[] = [{ role: 'user', content: prompt }];\n    const response = (await this.sendMessage(messages, options)) as ClaudeResponse;\n    return response.content[0].text;\n  }\n\n  /**\n   * Helper method for streaming completions\n   */\n  async *streamComplete(\n    prompt: string,\n    options?: {\n      model?: ClaudeModel;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n    },\n  ): AsyncIterable<string> {\n    const messages: ClaudeMessage[] = [{ role: 'user', content: prompt }];\n    const stream = (await this.sendMessage(messages, {\n      ...options,\n      stream: true,\n    })) as AsyncIterable<ClaudeStreamEvent>;\n\n    for await (const event of stream) {\n      if (event.type === 'content_block_delta' && event.delta?.text) {\n        yield event.delta.text;\n      }\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  getAvailableModels(): ClaudeModel[] {\n    return [\n      'claude-3-opus-20240229',\n      'claude-3-sonnet-20240229',\n      'claude-3-haiku-20240307',\n      'claude-2.1',\n      'claude-2.0',\n      'claude-instant-1.2',\n    ];\n  }\n\n  /**\n   * Get model information\n   */\n  getModelInfo(model: ClaudeModel): {\n    name: string;\n    contextWindow: number;\n    description: string;\n  } {\n    const modelInfo: Record<\n      ClaudeModel,\n      { name: string; contextWindow: number; description: string }\n    > = {\n      'claude-3-opus-20240229': {\n        name: 'Claude 3 Opus',\n        contextWindow: 200000,\n        description: 'Most capable model, best for complex tasks',\n      },\n      'claude-3-sonnet-20240229': {\n        name: 'Claude 3 Sonnet',\n        contextWindow: 200000,\n        description: 'Balanced performance and speed',\n      },\n      'claude-3-haiku-20240307': {\n        name: 'Claude 3 Haiku',\n        contextWindow: 200000,\n        description: 'Fastest model, best for simple tasks',\n      },\n      'claude-2.1': {\n        name: 'Claude 2.1',\n        contextWindow: 200000,\n        description: 'Previous generation, enhanced capabilities',\n      },\n      'claude-2.0': {\n        name: 'Claude 2.0',\n        contextWindow: 100000,\n        description: 'Previous generation model',\n      },\n      'claude-instant-1.2': {\n        name: 'Claude Instant 1.2',\n        contextWindow: 100000,\n        description: 'Fast, cost-effective model',\n      },\n    };\n\n    return (\n      modelInfo[model] || {\n        name: model,\n        contextWindow: 100000,\n        description: 'Unknown model',\n      }\n    );\n  }\n\n  /**\n   * Delay helper for retries\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Start periodic health checks\n   */\n  private startHealthCheck(): void {\n    this.performHealthCheck(); // Initial check\n    \n    this.healthCheckTimer = setInterval(\n      () => this.performHealthCheck(),\n      this.config.healthCheckInterval || 300000,\n    );\n  }\n\n  /**\n   * Perform a health check on the API\n   */\n  async performHealthCheck(): Promise<HealthCheckResult> {\n    const startTime = Date.now();\n    \n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n      const response = await fetch(this.config.apiUrl || '', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.config.apiKey,\n        },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: [{ role: 'user', content: 'Hi' }],\n          max_tokens: 1,\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeout);\n      \n      const latency = Date.now() - startTime;\n      const healthy = response.ok || response.status === 429; // Rate limit is still \"healthy\"\n      \n      this.lastHealthCheck = {\n        healthy,\n        latency,\n        error: healthy ? undefined : `Status: ${response.status}`,\n        timestamp: new Date(),\n      };\n\n      this.logger.debug('Claude API health check completed', this.lastHealthCheck);\n      this.emit('health_check', this.lastHealthCheck);\n      \n      return this.lastHealthCheck;\n    } catch (error) {\n      const latency = Date.now() - startTime;\n      \n      this.lastHealthCheck = {\n        healthy: false,\n        latency,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n      };\n\n      this.logger.warn('Claude API health check failed', this.lastHealthCheck);\n      this.emit('health_check', this.lastHealthCheck);\n      \n      return this.lastHealthCheck;\n    }\n  }\n\n  /**\n   * Get last health check result\n   */\n  getHealthStatus(): HealthCheckResult | undefined {\n    return this.lastHealthCheck;\n  }\n\n  /**\n   * Create appropriate error based on status code\n   */\n  private createAPIError(statusCode: number, errorData: any): ClaudeAPIError {\n    const message = errorData.error?.message || errorData.message || 'Unknown error';\n\n    switch (statusCode) {\n      case 400:\n        return new ClaudeValidationError(message, errorData);\n      case 401:\n      case 403:\n        return new ClaudeAuthenticationError(message, errorData);\n      case 429:\n        const retryAfter = errorData.error?.retry_after;\n        return new ClaudeRateLimitError(message, retryAfter, errorData);\n      case 500:\n        return new ClaudeInternalServerError(message, errorData);\n      case 503:\n        return new ClaudeServiceUnavailableError(message, errorData);\n      default:\n        return new ClaudeAPIError(message, statusCode, statusCode >= 500, errorData);\n    }\n  }\n\n  /**\n   * Transform generic errors to Claude API errors\n   */\n  private transformError(error: unknown): ClaudeAPIError {\n    if (error instanceof ClaudeAPIError) {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      // Network errors\n      if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n        return new ClaudeNetworkError(error.message);\n      }\n      \n      // Timeout errors\n      if (error.name === 'AbortError' || error.message.includes('timeout')) {\n        return new ClaudeTimeoutError(error.message, this.config.timeout || 60000);\n      }\n    }\n\n    return new ClaudeAPIError(\n      error instanceof Error ? error.message : String(error),\n      undefined,\n      true, // Assume unknown errors are retryable\n    );\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff and jitter\n   */\n  private calculateRetryDelay(attempt: number, error: ClaudeAPIError): number {\n    // If rate limit error with retry-after header, use that\n    if (error instanceof ClaudeRateLimitError && error.retryAfter) {\n      return error.retryAfter * 1000; // Convert to milliseconds\n    }\n\n    const baseDelay = this.config.retryDelay || 1000;\n    const maxDelay = 30000; // 30 seconds max\n    \n    // Exponential backoff: delay = baseDelay * (2 ^ attempt)\n    let delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n    \n    // Add jitter to prevent thundering herd\n    if (this.config.retryJitter) {\n      const jitter = Math.random() * 0.3 * delay; // Up to 30% jitter\n      delay = delay + jitter;\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * Handle errors with user-friendly messages and logging\n   */\n  private handleError(error: ClaudeAPIError): void {\n    const errorInfo = getUserFriendlyError(error);\n    \n    this.logger.error(`${errorInfo.title}: ${errorInfo.message}`, {\n      error: error.message,\n      code: error.code,\n      statusCode: error.statusCode,\n      retryable: error.retryable,\n      details: error.details,\n    });\n\n    // Log suggestions in debug mode\n    if (this.logger.level === 'debug' && errorInfo.suggestions.length > 0) {\n      this.logger.debug('Suggestions to resolve the issue:', errorInfo.suggestions);\n    }\n\n    this.emit('error', {\n      error,\n      userFriendly: errorInfo,\n    });\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n    }\n    this.removeAllListeners();\n  }\n}\n"],"names":["EventEmitter","ClaudeAPIError","ClaudeInternalServerError","ClaudeServiceUnavailableError","ClaudeRateLimitError","ClaudeTimeoutError","ClaudeNetworkError","ClaudeAuthenticationError","ClaudeValidationError","getUserFriendlyError","circuitBreaker","ClaudeAPIClient","config","logger","configManager","defaultModel","defaultTemperature","defaultMaxTokens","lastHealthCheck","healthCheckTimer","loadConfiguration","threshold","circuitBreakerThreshold","timeout","circuitBreakerTimeout","resetTimeout","circuitBreakerResetTimeout","enableHealthCheck","startHealthCheck","overrides","apiKey","apiUrl","model","temperature","maxTokens","topP","topK","undefined","systemPrompt","retryAttempts","retryDelay","healthCheckInterval","retryJitter","process","env","ANTHROPIC_API_KEY","CLAUDE_API_URL","CLAUDE_MODEL","CLAUDE_TEMPERATURE","parseFloat","CLAUDE_MAX_TOKENS","parseInt","claudeConfig","get","Object","assign","validateConfiguration","updateConfig","updates","info","getConfig","sendMessage","messages","options","request","system","max_tokens","top_p","top_k","stream","debug","messageCount","length","streamRequest","sendRequest","lastError","attempt","controller","AbortController","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorText","text","errorData","parse","message","createAPIError","status","data","json","inputTokens","usage","input_tokens","outputTokens","output_tokens","stopReason","stop_reason","emit","error","transformError","retryable","handleError","warn","statusCode","delay","calculateRetryDelay","reader","getReader","decoder","TextDecoder","buffer","done","value","read","decode","lines","split","pop","line","startsWith","slice","event","e","Error","name","complete","prompt","role","content","streamComplete","type","delta","getAvailableModels","getModelInfo","modelInfo","contextWindow","description","ms","Promise","resolve","performHealthCheck","setInterval","startTime","Date","now","latency","healthy","timestamp","getHealthStatus","retryAfter","retry_after","includes","String","baseDelay","maxDelay","Math","min","pow","jitter","random","floor","errorInfo","title","code","details","level","suggestions","userFriendly","destroy","clearInterval","removeAllListeners"],"mappings":"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"}