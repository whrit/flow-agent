{"version":3,"sources":["../../../src/api/claude-client-enhanced.ts"],"sourcesContent":["/**\n * Enhanced Claude API client with comprehensive error handling\n * Implements exponential backoff, health checks, and improved error messages\n */\n\nimport { EventEmitter } from 'events';\nimport { ILogger } from '../core/logger.js';\nimport { ConfigManager } from '../config/config-manager.js';\nimport { \n  ClaudeAPIError,\n  ClaudeInternalServerError,\n  ClaudeServiceUnavailableError,\n  ClaudeRateLimitError,\n  ClaudeTimeoutError,\n  ClaudeNetworkError,\n  ClaudeAuthenticationError,\n  ClaudeValidationError,\n  HealthCheckResult,\n  getUserFriendlyError,\n} from './claude-api-errors.js';\nimport { circuitBreaker, CircuitBreaker } from '../utils/helpers.js';\nimport { \n  ClaudeAPIConfig, \n  ClaudeModel, \n  ClaudeMessage, \n  ClaudeRequest, \n  ClaudeResponse,\n  ClaudeStreamEvent,\n} from './claude-client.js';\n\nexport interface EnhancedClaudeAPIConfig extends ClaudeAPIConfig {\n  enableHealthCheck?: boolean;\n  healthCheckInterval?: number;\n  circuitBreakerThreshold?: number;\n  circuitBreakerTimeout?: number;\n  circuitBreakerResetTimeout?: number;\n  maxRetries?: number;\n  retryBaseDelay?: number;\n  retryMaxDelay?: number;\n  retryJitter?: boolean;\n}\n\nexport class EnhancedClaudeAPIClient extends EventEmitter {\n  private config: EnhancedClaudeAPIConfig;\n  private logger: ILogger;\n  private configManager: ConfigManager;\n  private circuitBreaker: CircuitBreaker;\n  private lastHealthCheck?: HealthCheckResult;\n  private healthCheckTimer?: NodeJS.Timeout;\n\n  constructor(logger: ILogger, configManager: ConfigManager, config?: Partial<EnhancedClaudeAPIConfig>) {\n    super();\n    this.logger = logger;\n    this.configManager = configManager;\n    this.config = this.loadConfiguration(config);\n    \n    // Initialize circuit breaker\n    this.circuitBreaker = circuitBreaker('claude-api', {\n      threshold: this.config.circuitBreakerThreshold || 5,\n      timeout: this.config.circuitBreakerTimeout || 60000,\n      resetTimeout: this.config.circuitBreakerResetTimeout || 300000,\n    });\n\n    // Start health check if enabled\n    if (this.config.enableHealthCheck) {\n      this.startHealthCheck();\n    }\n  }\n\n  /**\n   * Load configuration with enhanced defaults\n   */\n  private loadConfiguration(overrides?: Partial<EnhancedClaudeAPIConfig>): EnhancedClaudeAPIConfig {\n    const config: EnhancedClaudeAPIConfig = {\n      apiKey: '',\n      apiUrl: 'https://api.anthropic.com/v1/messages',\n      model: 'claude-3-sonnet-20240229',\n      temperature: 0.7,\n      maxTokens: 4096,\n      topP: 1,\n      topK: undefined,\n      systemPrompt: undefined,\n      timeout: 60000,\n      retryAttempts: 3,\n      retryDelay: 1000,\n      // Enhanced configurations\n      enableHealthCheck: true,\n      healthCheckInterval: 300000, // 5 minutes\n      circuitBreakerThreshold: 5,\n      circuitBreakerTimeout: 60000,\n      circuitBreakerResetTimeout: 300000,\n      maxRetries: 3,\n      retryBaseDelay: 1000,\n      retryMaxDelay: 30000,\n      retryJitter: true,\n    };\n\n    // Load from environment\n    if (process.env.ANTHROPIC_API_KEY) {\n      config.apiKey = process.env.ANTHROPIC_API_KEY;\n    }\n\n    // Load from config manager\n    const claudeConfig = this.configManager.get('claude');\n    if (claudeConfig) {\n      Object.assign(config, claudeConfig);\n    }\n\n    // Apply overrides\n    if (overrides) {\n      Object.assign(config, overrides);\n    }\n\n    this.validateConfiguration(config);\n    return config;\n  }\n\n  /**\n   * Validate configuration\n   */\n  private validateConfiguration(config: EnhancedClaudeAPIConfig): void {\n    if (!config.apiKey) {\n      throw new ClaudeAuthenticationError('Claude API key is required. Set ANTHROPIC_API_KEY environment variable.');\n    }\n\n    if (config.temperature !== undefined && (config.temperature < 0 || config.temperature > 1)) {\n      throw new ClaudeValidationError('Temperature must be between 0 and 1');\n    }\n\n    if (config.maxTokens !== undefined && (config.maxTokens < 1 || config.maxTokens > 100000)) {\n      throw new ClaudeValidationError('Max tokens must be between 1 and 100000');\n    }\n  }\n\n  /**\n   * Start periodic health checks\n   */\n  private startHealthCheck(): void {\n    this.performHealthCheck(); // Initial check\n    \n    this.healthCheckTimer = setInterval(\n      () => this.performHealthCheck(),\n      this.config.healthCheckInterval || 300000,\n    );\n  }\n\n  /**\n   * Perform a health check on the API\n   */\n  async performHealthCheck(): Promise<HealthCheckResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple health check request\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n      const response = await fetch(this.config.apiUrl || '', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.config.apiKey,\n        },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: [{ role: 'user', content: 'Hi' }],\n          max_tokens: 1,\n        }),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeout);\n      \n      const latency = Date.now() - startTime;\n      const healthy = response.ok || response.status === 429; // Rate limit is still \"healthy\"\n      \n      this.lastHealthCheck = {\n        healthy,\n        latency,\n        error: healthy ? undefined : `Status: ${response.status}`,\n        timestamp: new Date(),\n      };\n\n      this.logger.debug('Claude API health check completed', this.lastHealthCheck);\n      this.emit('health_check', this.lastHealthCheck);\n      \n      return this.lastHealthCheck;\n    } catch (error) {\n      const latency = Date.now() - startTime;\n      \n      this.lastHealthCheck = {\n        healthy: false,\n        latency,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n      };\n\n      this.logger.warn('Claude API health check failed', this.lastHealthCheck);\n      this.emit('health_check', this.lastHealthCheck);\n      \n      return this.lastHealthCheck;\n    }\n  }\n\n  /**\n   * Get last health check result\n   */\n  getHealthStatus(): HealthCheckResult | undefined {\n    return this.lastHealthCheck;\n  }\n\n  /**\n   * Send a message with enhanced error handling\n   */\n  async sendMessage(\n    messages: ClaudeMessage[],\n    options?: {\n      model?: ClaudeModel;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n      stream?: boolean;\n    },\n  ): Promise<ClaudeResponse | AsyncIterable<ClaudeStreamEvent>> {\n    const request: ClaudeRequest = {\n      model: options?.model || this.config.model || 'claude-3-sonnet-20240229',\n      messages,\n      system: options?.systemPrompt || this.config.systemPrompt,\n      max_tokens: options?.maxTokens || this.config.maxTokens || 4096,\n      temperature: options?.temperature ?? this.config.temperature,\n      top_p: this.config.topP,\n      top_k: this.config.topK,\n      stream: options?.stream || false,\n    };\n\n    this.logger.debug('Sending Claude API request', {\n      model: request.model,\n      temperature: request.temperature,\n      maxTokens: request.max_tokens,\n      messageCount: messages.length,\n      stream: request.stream,\n    });\n\n    try {\n      // Use circuit breaker for the request\n      const result = await this.circuitBreaker.execute(async () => {\n        if (request.stream) {\n          return this.streamRequestWithRetry(request);\n        } else {\n          return this.sendRequestWithRetry(request);\n        }\n      });\n\n      return result;\n    } catch (error) {\n      // Handle circuit breaker open state\n      if (error instanceof Error && error.message.includes('Circuit breaker')) {\n        const apiError = new ClaudeServiceUnavailableError(\n          'Claude API is temporarily unavailable due to repeated failures. Please try again later.',\n        );\n        this.handleError(apiError);\n        throw apiError;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Send request with retry logic and enhanced error handling\n   */\n  private async sendRequestWithRetry(request: ClaudeRequest): Promise<ClaudeResponse> {\n    let lastError: ClaudeAPIError | undefined;\n    const maxRetries = this.config.maxRetries || 3;\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        return await this.sendRequestOnce(request);\n      } catch (error) {\n        lastError = this.transformError(error);\n        \n        // Don't retry non-retryable errors\n        if (!lastError.retryable) {\n          this.handleError(lastError);\n          throw lastError;\n        }\n\n        this.logger.warn(\n          `Claude API request failed (attempt ${attempt + 1}/${maxRetries})`,\n          {\n            error: lastError.message,\n            statusCode: lastError.statusCode,\n            retryable: lastError.retryable,\n          },\n        );\n\n        // Don't retry on the last attempt\n        if (attempt < maxRetries - 1) {\n          const delay = this.calculateRetryDelay(attempt, lastError);\n          this.logger.info(`Retrying after ${delay}ms...`);\n          await this.delay(delay);\n        }\n      }\n    }\n\n    this.handleError(lastError!);\n    throw lastError;\n  }\n\n  /**\n   * Send a single request\n   */\n  private async sendRequestOnce(request: ClaudeRequest): Promise<ClaudeResponse> {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.config.timeout || 60000);\n\n    try {\n      const response = await fetch(this.config.apiUrl || '', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.config.apiKey,\n        },\n        body: JSON.stringify(request),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeout);\n\n      // Handle different error status codes\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData: any;\n        \n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { message: errorText };\n        }\n\n        throw this.createAPIError(response.status, errorData);\n      }\n\n      const data = (await response.json()) as ClaudeResponse;\n\n      this.logger.info('Claude API response received', {\n        model: data.model,\n        inputTokens: data.usage.input_tokens,\n        outputTokens: data.usage.output_tokens,\n        stopReason: data.stop_reason,\n      });\n\n      this.emit('response', data);\n      return data;\n    } catch (error) {\n      clearTimeout(timeout);\n      \n      // Handle abort/timeout\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new ClaudeTimeoutError(\n          'Request timed out',\n          this.config.timeout || 60000,\n        );\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Stream request with retry logic\n   */\n  private async *streamRequestWithRetry(request: ClaudeRequest): AsyncIterable<ClaudeStreamEvent> {\n    let lastError: ClaudeAPIError | undefined;\n    const maxRetries = this.config.maxRetries || 3;\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        yield* this.streamRequestOnce(request);\n        return;\n      } catch (error) {\n        lastError = this.transformError(error);\n        \n        if (!lastError.retryable) {\n          this.handleError(lastError);\n          throw lastError;\n        }\n\n        this.logger.warn(\n          `Claude API stream request failed (attempt ${attempt + 1}/${maxRetries})`,\n          { error: lastError.message },\n        );\n\n        if (attempt < maxRetries - 1) {\n          const delay = this.calculateRetryDelay(attempt, lastError);\n          await this.delay(delay);\n        }\n      }\n    }\n\n    this.handleError(lastError!);\n    throw lastError;\n  }\n\n  /**\n   * Send a single streaming request\n   */\n  private async *streamRequestOnce(request: ClaudeRequest): AsyncIterable<ClaudeStreamEvent> {\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), (this.config.timeout || 60000) * 2);\n\n    try {\n      const response = await fetch(this.config.apiUrl || '', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.config.apiKey,\n        },\n        body: JSON.stringify({ ...request, stream: true }),\n        signal: controller.signal,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData: any;\n        \n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { message: errorText };\n        }\n\n        throw this.createAPIError(response.status, errorData);\n      }\n\n      if (!response.body) {\n        throw new ClaudeAPIError('Response body is null');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') continue;\n\n            try {\n              const event = JSON.parse(data) as ClaudeStreamEvent;\n              this.emit('stream_event', event);\n              yield event;\n            } catch (e) {\n              this.logger.warn('Failed to parse stream event', { data, error: e });\n            }\n          }\n        }\n      }\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  /**\n   * Create appropriate error based on status code\n   */\n  private createAPIError(statusCode: number, errorData: any): ClaudeAPIError {\n    const message = errorData.error?.message || errorData.message || 'Unknown error';\n\n    switch (statusCode) {\n      case 400:\n        return new ClaudeValidationError(message, errorData);\n      case 401:\n      case 403:\n        return new ClaudeAuthenticationError(message, errorData);\n      case 429:\n        const retryAfter = errorData.error?.retry_after;\n        return new ClaudeRateLimitError(message, retryAfter, errorData);\n      case 500:\n        return new ClaudeInternalServerError(message, errorData);\n      case 503:\n        return new ClaudeServiceUnavailableError(message, errorData);\n      default:\n        return new ClaudeAPIError(message, statusCode, statusCode >= 500, errorData);\n    }\n  }\n\n  /**\n   * Transform generic errors to Claude API errors\n   */\n  private transformError(error: unknown): ClaudeAPIError {\n    if (error instanceof ClaudeAPIError) {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      // Network errors\n      if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n        return new ClaudeNetworkError(error.message);\n      }\n      \n      // Timeout errors\n      if (error.name === 'AbortError' || error.message.includes('timeout')) {\n        return new ClaudeTimeoutError(error.message, this.config.timeout || 60000);\n      }\n    }\n\n    return new ClaudeAPIError(\n      error instanceof Error ? error.message : String(error),\n      undefined,\n      true, // Assume unknown errors are retryable\n    );\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff and jitter\n   */\n  private calculateRetryDelay(attempt: number, error: ClaudeAPIError): number {\n    // If rate limit error with retry-after header, use that\n    if (error instanceof ClaudeRateLimitError && error.retryAfter) {\n      return error.retryAfter * 1000; // Convert to milliseconds\n    }\n\n    const baseDelay = this.config.retryBaseDelay || 1000;\n    const maxDelay = this.config.retryMaxDelay || 30000;\n    \n    // Exponential backoff: delay = baseDelay * (2 ^ attempt)\n    let delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n    \n    // Add jitter to prevent thundering herd\n    if (this.config.retryJitter) {\n      const jitter = Math.random() * 0.3 * delay; // Up to 30% jitter\n      delay = delay + jitter;\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * Handle errors with user-friendly messages and logging\n   */\n  private handleError(error: ClaudeAPIError): void {\n    const errorInfo = getUserFriendlyError(error);\n    \n    this.logger.error(`${errorInfo.title}: ${errorInfo.message}`, {\n      error: error.message,\n      code: error.code,\n      statusCode: error.statusCode,\n      retryable: error.retryable,\n      details: error.details,\n    });\n\n    // Log suggestions in debug mode\n    if (this.logger.level === 'debug' && errorInfo.suggestions.length > 0) {\n      this.logger.debug('Suggestions to resolve the issue:', errorInfo.suggestions);\n    }\n\n    this.emit('error', {\n      error,\n      userFriendly: errorInfo,\n    });\n  }\n\n  /**\n   * Helper method for simple completions with error handling\n   */\n  async complete(\n    prompt: string,\n    options?: {\n      model?: ClaudeModel;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n    },\n  ): Promise<string> {\n    try {\n      const messages: ClaudeMessage[] = [{ role: 'user', content: prompt }];\n      const response = (await this.sendMessage(messages, options)) as ClaudeResponse;\n      return response.content[0].text;\n    } catch (error) {\n      if (error instanceof ClaudeAPIError) {\n        const errorInfo = getUserFriendlyError(error);\n        throw new Error(`${errorInfo.title}: ${errorInfo.message}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Delay helper\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n    }\n    this.removeAllListeners();\n  }\n}"],"names":["EventEmitter","ClaudeAPIError","ClaudeInternalServerError","ClaudeServiceUnavailableError","ClaudeRateLimitError","ClaudeTimeoutError","ClaudeNetworkError","ClaudeAuthenticationError","ClaudeValidationError","getUserFriendlyError","circuitBreaker","EnhancedClaudeAPIClient","config","logger","configManager","lastHealthCheck","healthCheckTimer","loadConfiguration","threshold","circuitBreakerThreshold","timeout","circuitBreakerTimeout","resetTimeout","circuitBreakerResetTimeout","enableHealthCheck","startHealthCheck","overrides","apiKey","apiUrl","model","temperature","maxTokens","topP","topK","undefined","systemPrompt","retryAttempts","retryDelay","healthCheckInterval","maxRetries","retryBaseDelay","retryMaxDelay","retryJitter","process","env","ANTHROPIC_API_KEY","claudeConfig","get","Object","assign","validateConfiguration","performHealthCheck","setInterval","startTime","Date","now","controller","AbortController","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","messages","role","content","max_tokens","signal","clearTimeout","latency","healthy","ok","status","error","timestamp","debug","emit","Error","message","warn","getHealthStatus","sendMessage","options","request","system","top_p","top_k","stream","messageCount","length","result","execute","streamRequestWithRetry","sendRequestWithRetry","includes","apiError","handleError","lastError","attempt","sendRequestOnce","transformError","retryable","statusCode","delay","calculateRetryDelay","info","errorText","text","errorData","parse","createAPIError","data","json","inputTokens","usage","input_tokens","outputTokens","output_tokens","stopReason","stop_reason","name","streamRequestOnce","reader","getReader","decoder","TextDecoder","buffer","done","value","read","decode","lines","split","pop","line","startsWith","slice","event","e","retryAfter","retry_after","String","baseDelay","maxDelay","Math","min","pow","jitter","random","floor","errorInfo","title","code","details","level","suggestions","userFriendly","complete","prompt","ms","Promise","resolve","destroy","clearInterval","removeAllListeners"],"mappings":"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"}