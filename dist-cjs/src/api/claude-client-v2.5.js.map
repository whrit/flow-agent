{"version":3,"sources":["../../../src/api/claude-client-v2.5.ts"],"sourcesContent":["/**\n * Claude Client v2.5 - SDK-Based Implementation\n * Claude-Flow v2.5-alpha.130\n *\n * Refactored to use Anthropic SDK instead of custom retry/error handling\n */\n\nimport { EventEmitter } from 'events';\nimport Anthropic from '@anthropic-ai/sdk';\nimport { ClaudeFlowSDKAdapter } from '../sdk/sdk-config.js';\nimport { SDKCompatibilityLayer } from '../sdk/compatibility-layer.js';\nimport { ILogger } from '../core/logger.js';\nimport {\n  ClaudeAPIError,\n  ClaudeRateLimitError,\n  ClaudeAuthenticationError,\n  ClaudeValidationError,\n} from './claude-api-errors.js';\n\nexport interface ClaudeAPIConfig {\n  apiKey: string;\n  apiUrl?: string;\n  model?: ClaudeModel;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n  topK?: number;\n  systemPrompt?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n  enableSwarmMode?: boolean;\n}\n\nexport type ClaudeModel =\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | 'claude-2.1'\n  | 'claude-2.0'\n  | 'claude-instant-1.2';\n\nexport interface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ClaudeRequest {\n  model: ClaudeModel;\n  messages: ClaudeMessage[];\n  system?: string;\n  max_tokens: number;\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  metadata?: {\n    user_id?: string;\n  };\n  stop_sequences?: string[];\n  stream?: boolean;\n}\n\nexport interface ClaudeResponse {\n  id: string;\n  type: 'message';\n  role: 'assistant';\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  model: ClaudeModel;\n  stop_reason: 'end_turn' | 'max_tokens' | 'stop_sequence';\n  stop_sequence?: string;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\n/**\n * Claude Client v2.5 using Anthropic SDK\n */\nexport class ClaudeClientV25 extends EventEmitter {\n  private adapter: ClaudeFlowSDKAdapter;\n  private compatibility: SDKCompatibilityLayer;\n  private sdk: Anthropic;\n  private config: ClaudeAPIConfig;\n  private logger?: ILogger;\n\n  constructor(config: ClaudeAPIConfig, logger?: ILogger) {\n    super();\n    this.config = config;\n    this.logger = logger;\n\n    // Initialize SDK adapter\n    this.adapter = new ClaudeFlowSDKAdapter({\n      apiKey: config.apiKey,\n      maxRetries: config.retryAttempts || 3,\n      timeout: config.timeout || 60000,\n      swarmMode: config.enableSwarmMode,\n      baseURL: config.apiUrl\n    });\n\n    this.sdk = this.adapter.getSDK();\n    this.compatibility = new SDKCompatibilityLayer(this.adapter);\n\n    this.logger?.info('Claude Client v2.5 initialized with SDK', {\n      model: config.model,\n      swarmMode: config.enableSwarmMode\n    });\n  }\n\n  /**\n   * Main request method using SDK\n   */\n  async makeRequest(request: ClaudeRequest): Promise<ClaudeResponse> {\n    try {\n      this.emit('request:start', request);\n\n      // Convert to SDK format\n      const sdkParams: Anthropic.MessageCreateParams = {\n        model: request.model as Anthropic.Model,\n        messages: request.messages.map(msg => ({\n          role: msg.role as 'user' | 'assistant',\n          content: msg.content\n        })),\n        max_tokens: request.max_tokens,\n        temperature: request.temperature,\n        top_p: request.top_p,\n        top_k: request.top_k,\n        system: request.system,\n        stop_sequences: request.stop_sequences,\n        metadata: request.metadata as Anthropic.Metadata | undefined\n      };\n\n      // SDK handles retry automatically\n      const response = await this.adapter.createMessage(sdkParams);\n\n      // Convert SDK response to legacy format for compatibility\n      const legacyResponse = this.convertSDKResponse(response);\n\n      this.emit('request:success', legacyResponse);\n      this.logger?.info('Request successful', {\n        model: request.model,\n        tokensUsed: response.usage\n      });\n\n      return legacyResponse;\n\n    } catch (error) {\n      this.handleSDKError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Streaming request using SDK\n   */\n  async makeStreamingRequest(\n    request: ClaudeRequest,\n    onChunk?: (chunk: Anthropic.MessageStreamEvent) => void\n  ): Promise<ClaudeResponse> {\n    try {\n      this.emit('stream:start', request);\n\n      const sdkParams: Anthropic.MessageCreateParams = {\n        model: request.model as Anthropic.Model,\n        messages: request.messages.map(msg => ({\n          role: msg.role as 'user' | 'assistant',\n          content: msg.content\n        })),\n        max_tokens: request.max_tokens,\n        temperature: request.temperature,\n        system: request.system,\n        stream: true\n      };\n\n      const response = await this.adapter.createStreamingMessage(\n        sdkParams,\n        {\n          onChunk: (chunk) => {\n            this.emit('stream:chunk', chunk);\n            onChunk?.(chunk);\n          }\n        }\n      );\n\n      const legacyResponse = this.convertSDKResponse(response);\n      this.emit('stream:complete', legacyResponse);\n\n      return legacyResponse;\n\n    } catch (error) {\n      this.handleSDKError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * DEPRECATED: Legacy method for backward compatibility\n   * SDK handles retry automatically\n   */\n  async executeWithRetry(request: ClaudeRequest): Promise<ClaudeResponse> {\n    console.warn('[ClaudeClientV25] executeWithRetry is deprecated. SDK handles retry automatically.');\n    return this.makeRequest(request);\n  }\n\n  /**\n   * Convert SDK response to legacy format\n   */\n  private convertSDKResponse(sdkResponse: Anthropic.Message): ClaudeResponse {\n    return {\n      id: sdkResponse.id,\n      type: 'message',\n      role: 'assistant',\n      content: sdkResponse.content.map((block) => ({\n        type: block.type,\n        text: block.type === 'text' ? block.text : ''\n      })),\n      model: sdkResponse.model as ClaudeModel,\n      stop_reason: (sdkResponse.stop_reason || 'end_turn') as 'end_turn' | 'max_tokens' | 'stop_sequence',\n      stop_sequence: sdkResponse.stop_sequence || undefined,\n      usage: {\n        input_tokens: sdkResponse.usage.input_tokens,\n        output_tokens: sdkResponse.usage.output_tokens\n      }\n    };\n  }\n\n  /**\n   * Handle SDK-specific errors\n   */\n  private handleSDKError(error: unknown): void {\n    this.emit('request:error', error);\n\n    let mappedError: ClaudeAPIError;\n\n    if (error instanceof Anthropic.APIError) {\n      if (error instanceof Anthropic.AuthenticationError) {\n        mappedError = new ClaudeAuthenticationError('Invalid API key');\n      } else if (error instanceof Anthropic.RateLimitError) {\n        mappedError = new ClaudeRateLimitError('Rate limit exceeded');\n      } else if (error instanceof Anthropic.BadRequestError) {\n        mappedError = new ClaudeValidationError(error.message);\n      } else {\n        mappedError = new ClaudeAPIError(error.message, error.status || 500);\n      }\n    } else {\n      mappedError = new ClaudeAPIError(\n        error.message || 'Unknown error',\n        500\n      );\n    }\n\n    this.logger?.error('SDK request failed', {\n      error: mappedError.message,\n      status: mappedError.status\n    });\n\n    throw mappedError;\n  }\n\n  /**\n   * Validate configuration\n   */\n  async validateConfiguration(): Promise<boolean> {\n    return this.adapter.validateConfiguration();\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): { totalTokens: number; messageCount: number } {\n    return this.adapter.getUsageStats();\n  }\n\n  /**\n   * Get swarm metadata (if in swarm mode)\n   */\n  getSwarmMetadata(messageId: string): Record<string, unknown> | null {\n    if (this.config.enableSwarmMode) {\n      return this.adapter.getSwarmMetadata(messageId);\n    }\n    return null;\n  }\n\n  /**\n   * Check health status\n   */\n  async checkHealth(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    details: Record<string, unknown>;\n  }> {\n    try {\n      const isValid = await this.validateConfiguration();\n\n      if (isValid) {\n        return {\n          status: 'healthy',\n          details: {\n            sdkVersion: '2.5.0',\n            model: this.config.model,\n            swarmMode: this.config.enableSwarmMode\n          }\n        };\n      }\n\n      return {\n        status: 'unhealthy',\n        details: { error: 'Invalid configuration' }\n      };\n\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        details: { error: error instanceof Error ? error.message : 'Unknown error' }\n      };\n    }\n  }\n\n  /**\n   * Get deprecation warnings\n   */\n  getDeprecationWarnings(): string[] {\n    return this.compatibility.getDeprecationReport();\n  }\n}\n\n// Export for backward compatibility\nexport { ClaudeClientV25 as ClaudeClient };"],"names":["EventEmitter","Anthropic","ClaudeFlowSDKAdapter","SDKCompatibilityLayer","ClaudeAPIError","ClaudeRateLimitError","ClaudeAuthenticationError","ClaudeValidationError","ClaudeClientV25","adapter","compatibility","sdk","config","logger","apiKey","maxRetries","retryAttempts","timeout","swarmMode","enableSwarmMode","baseURL","apiUrl","getSDK","info","model","makeRequest","request","emit","sdkParams","messages","map","msg","role","content","max_tokens","temperature","top_p","top_k","system","stop_sequences","metadata","response","createMessage","legacyResponse","convertSDKResponse","tokensUsed","usage","error","handleSDKError","makeStreamingRequest","onChunk","stream","createStreamingMessage","chunk","executeWithRetry","console","warn","sdkResponse","id","type","block","text","stop_reason","stop_sequence","undefined","input_tokens","output_tokens","mappedError","APIError","AuthenticationError","RateLimitError","BadRequestError","message","status","validateConfiguration","getUsageStats","getSwarmMetadata","messageId","checkHealth","isValid","details","sdkVersion","Error","getDeprecationWarnings","getDeprecationReport","ClaudeClient"],"mappings":"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"}