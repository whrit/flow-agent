{"version":3,"sources":["../../../src/api/swarm-api.ts"],"sourcesContent":["/**\n * Swarm API - RESTful API for swarm coordination and management\n * Provides HTTP endpoints for swarm operations, agent management, and task orchestration\n */\n\nimport { Router } from 'express';\nimport { ILogger } from '../core/logger.js';\nimport { ClaudeAPIClient } from './claude-client.js';\nimport { ConfigManager } from '../config/config-manager.js';\nimport { ICoordinationManager } from '../coordination/manager.js';\nimport { SwarmCoordinator } from '../swarm/coordinator.js';\nimport { AgentManager } from '../agents/agent-manager.js';\nimport { ResourceManager } from '../resources/resource-manager.js';\nimport { Task, Agent, SwarmConfig, SwarmStatus } from '../utils/types.js';\nimport { ValidationError, SwarmError } from '../utils/errors.js';\nimport { nanoid } from 'nanoid';\n\nexport interface SwarmApiConfig {\n  rateLimit: {\n    windowMs: number;\n    maxRequests: number;\n  };\n  authentication: {\n    enabled: boolean;\n    apiKeys?: string[];\n    jwtSecret?: string;\n  };\n  cors: {\n    origins: string[];\n    methods: string[];\n  };\n  swagger: {\n    enabled: boolean;\n    title: string;\n    version: string;\n    description: string;\n  };\n}\n\nexport interface SwarmCreateRequest {\n  name: string;\n  topology: 'hierarchical' | 'mesh' | 'ring' | 'star';\n  maxAgents?: number;\n  strategy?: 'balanced' | 'specialized' | 'adaptive';\n  config?: Partial<SwarmConfig>;\n}\n\nexport interface AgentSpawnRequest {\n  type: string;\n  name?: string;\n  capabilities?: string[];\n  config?: Record<string, unknown>;\n}\n\nexport interface TaskOrchestrationRequest {\n  task: string;\n  priority?: 'low' | 'medium' | 'high' | 'critical';\n  strategy?: 'parallel' | 'sequential' | 'adaptive';\n  maxAgents?: number;\n  requirements?: string[];\n  metadata?: Record<string, unknown>;\n}\n\nexport interface SwarmMetrics {\n  swarmId: string;\n  agentCount: number;\n  activeTasks: number;\n  completedTasks: number;\n  failedTasks: number;\n  averageResponseTime: number;\n  resourceUtilization: Record<string, number>;\n  healthScore: number;\n}\n\n/**\n * Swarm API implementation\n */\nexport class SwarmApi {\n  private router: Router;\n  private swarms = new Map<string, SwarmCoordinator>();\n\n  constructor(\n    private config: SwarmApiConfig,\n    private logger: ILogger,\n    private claudeClient: ClaudeAPIClient,\n    private configManager: ConfigManager,\n    private coordinationManager: ICoordinationManager,\n    private agentManager: AgentManager,\n    private resourceManager: ResourceManager,\n  ) {\n    this.router = Router();\n    this.setupRoutes();\n    this.setupMiddleware();\n  }\n\n  getRouter(): Router {\n    return this.router;\n  }\n\n  private setupMiddleware(): void {\n    // Request logging\n    this.router.use((req, res, next) => {\n      this.logger.info('Swarm API request', {\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      next();\n    });\n\n    // Request validation\n    this.router.use((req, res, next) => {\n      if (req.method === 'POST' || req.method === 'PUT') {\n        if (!req.body) {\n          return res.status(400).json({\n            error: 'Request body is required',\n            code: 'MISSING_BODY',\n          });\n        }\n      }\n      next();\n    });\n\n    // Error handling\n    this.router.use((err: Error, req: any, res: any, next: any) => {\n      this.logger.error('Swarm API error', {\n        error: err.message,\n        stack: err.stack,\n        method: req.method,\n        path: req.path,\n      });\n\n      if (err instanceof ValidationError) {\n        return res.status(400).json({\n          error: err.message,\n          code: 'VALIDATION_ERROR',\n          details: err.details,\n        });\n      }\n\n      if (err instanceof SwarmError) {\n        return res.status(409).json({\n          error: err.message,\n          code: 'SWARM_ERROR',\n          details: err.details,\n        });\n      }\n\n      res.status(500).json({\n        error: 'Internal server error',\n        code: 'INTERNAL_ERROR',\n      });\n    });\n  }\n\n  private setupRoutes(): void {\n    // Health check\n    this.router.get('/health', async (req, res) => {\n      try {\n        const health = await this.getSystemHealth();\n        res.json(health);\n      } catch (error) {\n        res.status(500).json({\n          healthy: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    });\n\n    // Swarm management\n    this.router.post('/swarms', this.createSwarm.bind(this));\n    this.router.get('/swarms', this.listSwarms.bind(this));\n    this.router.get('/swarms/:swarmId', this.getSwarm.bind(this));\n    this.router.delete('/swarms/:swarmId', this.destroySwarm.bind(this));\n    this.router.post('/swarms/:swarmId/scale', this.scaleSwarm.bind(this));\n\n    // Agent management\n    this.router.post('/swarms/:swarmId/agents', this.spawnAgent.bind(this));\n    this.router.get('/swarms/:swarmId/agents', this.listAgents.bind(this));\n    this.router.get('/swarms/:swarmId/agents/:agentId', this.getAgent.bind(this));\n    this.router.delete('/swarms/:swarmId/agents/:agentId', this.terminateAgent.bind(this));\n\n    // Task orchestration\n    this.router.post('/swarms/:swarmId/tasks', this.orchestrateTask.bind(this));\n    this.router.get('/swarms/:swarmId/tasks', this.listTasks.bind(this));\n    this.router.get('/swarms/:swarmId/tasks/:taskId', this.getTask.bind(this));\n    this.router.delete('/swarms/:swarmId/tasks/:taskId', this.cancelTask.bind(this));\n\n    // Metrics and monitoring\n    this.router.get('/swarms/:swarmId/metrics', this.getSwarmMetrics.bind(this));\n    this.router.get('/swarms/:swarmId/status', this.getSwarmStatus.bind(this));\n    this.router.get('/system/metrics', this.getSystemMetrics.bind(this));\n  }\n\n  private async createSwarm(req: any, res: any): Promise<void> {\n    try {\n      const request = req.body as SwarmCreateRequest;\n      \n      // Validate request\n      if (!request.name || !request.topology) {\n        return res.status(400).json({\n          error: 'Name and topology are required',\n          code: 'VALIDATION_ERROR',\n        });\n      }\n\n      // Create swarm configuration\n      const swarmConfig: SwarmConfig = {\n        name: request.name,\n        topology: request.topology,\n        maxAgents: request.maxAgents || 8,\n        strategy: request.strategy || 'balanced',\n        ...request.config,\n      };\n\n      // Generate swarm ID\n      const swarmId = `swarm_${Date.now()}_${nanoid(10)}`;\n\n      // Create swarm coordinator\n      const swarm = new SwarmCoordinator(\n        swarmId,\n        swarmConfig,\n        this.logger,\n        this.claudeClient,\n        this.configManager,\n        this.coordinationManager,\n        this.agentManager,\n        this.resourceManager,\n      );\n\n      // Initialize swarm\n      await swarm.initialize();\n\n      // Store swarm\n      this.swarms.set(swarmId, swarm);\n\n      this.logger.info('Swarm created', {\n        swarmId,\n        name: request.name,\n        topology: request.topology,\n      });\n\n      res.status(201).json({\n        swarmId,\n        name: request.name,\n        topology: request.topology,\n        maxAgents: swarmConfig.maxAgents,\n        strategy: swarmConfig.strategy,\n        status: 'active',\n        createdAt: new Date().toISOString(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async listSwarms(req: any, res: any): Promise<void> {\n    try {\n      const swarmList = Array.from(this.swarms.entries()).map(([swarmId, swarm]) => ({\n        swarmId,\n        name: swarm.getConfig().name,\n        topology: swarm.getConfig().topology,\n        agentCount: swarm.getAgentCount(),\n        status: swarm.getStatus(),\n        createdAt: swarm.getCreatedAt(),\n      }));\n\n      res.json({\n        swarms: swarmList,\n        total: swarmList.length,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getSwarm(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const config = swarm.getConfig();\n      const status = swarm.getStatus();\n      const agents = await swarm.getAgents();\n      const metrics = await swarm.getMetrics();\n\n      res.json({\n        swarmId,\n        config,\n        status,\n        agents: agents.map(agent => ({\n          id: agent.id,\n          type: agent.type,\n          name: agent.name,\n          status: agent.status,\n          capabilities: agent.capabilities,\n        })),\n        metrics,\n        createdAt: swarm.getCreatedAt(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async destroySwarm(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      await swarm.destroy();\n      this.swarms.delete(swarmId);\n\n      this.logger.info('Swarm destroyed', { swarmId });\n\n      res.json({\n        message: 'Swarm destroyed successfully',\n        swarmId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async scaleSwarm(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const { targetSize } = req.body;\n\n      if (!targetSize || targetSize < 1) {\n        return res.status(400).json({\n          error: 'Valid targetSize is required',\n          code: 'VALIDATION_ERROR',\n        });\n      }\n\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      await swarm.scale(targetSize);\n\n      res.json({\n        message: 'Swarm scaled successfully',\n        swarmId,\n        newSize: targetSize,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async spawnAgent(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const request = req.body as AgentSpawnRequest;\n\n      if (!request.type) {\n        return res.status(400).json({\n          error: 'Agent type is required',\n          code: 'VALIDATION_ERROR',\n        });\n      }\n\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const agent = await swarm.spawnAgent({\n        type: request.type,\n        name: request.name,\n        capabilities: request.capabilities || [],\n        config: request.config,\n      });\n\n      res.status(201).json({\n        agent: {\n          id: agent.id,\n          type: agent.type,\n          name: agent.name,\n          status: agent.status,\n          capabilities: agent.capabilities,\n        },\n        swarmId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async orchestrateTask(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const request = req.body as TaskOrchestrationRequest;\n\n      if (!request.task) {\n        return res.status(400).json({\n          error: 'Task description is required',\n          code: 'VALIDATION_ERROR',\n        });\n      }\n\n      const swarm = this.swarms.get(swarmId);\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const task = await swarm.orchestrateTask({\n        description: request.task,\n        priority: request.priority || 'medium',\n        strategy: request.strategy || 'adaptive',\n        maxAgents: request.maxAgents,\n        requirements: request.requirements,\n        metadata: request.metadata,\n      });\n\n      res.status(201).json({\n        task: {\n          id: task.id,\n          description: task.description,\n          status: task.status,\n          priority: task.priority,\n          strategy: task.strategy,\n        },\n        swarmId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getSwarmMetrics(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const metrics = await swarm.getMetrics();\n      res.json(metrics);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getSwarmStatus(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const status = await swarm.getDetailedStatus();\n      res.json(status);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getSystemHealth(): Promise<{\n    healthy: boolean;\n    services: Record<string, { healthy: boolean; error?: string }>;\n    metrics: Record<string, number>;\n  }> {\n    const services: Record<string, { healthy: boolean; error?: string }> = {};\n    let allHealthy = true;\n\n    // Check Claude API health\n    const claudeHealth = this.claudeClient.getHealthStatus();\n    services.claude = {\n      healthy: claudeHealth?.healthy || false,\n      error: claudeHealth?.error,\n    };\n    allHealthy = allHealthy && services.claude.healthy;\n\n    // Check coordination manager health\n    const coordHealth = await this.coordinationManager.getHealthStatus();\n    services.coordination = {\n      healthy: coordHealth.healthy,\n      error: coordHealth.error,\n    };\n    allHealthy = allHealthy && services.coordination.healthy;\n\n    // Check agent manager health\n    const agentHealth = await this.agentManager.getHealthStatus();\n    services.agents = {\n      healthy: agentHealth.healthy,\n      error: agentHealth.error,\n    };\n    allHealthy = allHealthy && services.agents.healthy;\n\n    // Collect metrics\n    const metrics = {\n      totalSwarms: this.swarms.size,\n      ...coordHealth.metrics,\n      ...agentHealth.metrics,\n    };\n\n    return {\n      healthy: allHealthy,\n      services,\n      metrics,\n    };\n  }\n\n  private async getSystemMetrics(req: any, res: any): Promise<void> {\n    try {\n      const systemMetrics = await this.getSystemHealth();\n      const swarmMetrics = await Promise.all(\n        Array.from(this.swarms.values()).map(async (swarm) => {\n          const metrics = await swarm.getMetrics();\n          return {\n            swarmId: swarm.getId(),\n            ...metrics,\n          };\n        }),\n      );\n\n      res.json({\n        system: systemMetrics,\n        swarms: swarmMetrics,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Additional helper methods\n  private async listAgents(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const agents = await swarm.getAgents();\n      res.json({\n        agents: agents.map(agent => ({\n          id: agent.id,\n          type: agent.type,\n          name: agent.name,\n          status: agent.status,\n          capabilities: agent.capabilities,\n          createdAt: agent.createdAt,\n        })),\n        total: agents.length,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getAgent(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId, agentId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const agent = await swarm.getAgent(agentId);\n      if (!agent) {\n        return res.status(404).json({\n          error: 'Agent not found',\n          code: 'AGENT_NOT_FOUND',\n        });\n      }\n\n      res.json(agent);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async terminateAgent(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId, agentId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      await swarm.terminateAgent(agentId);\n      res.json({\n        message: 'Agent terminated successfully',\n        agentId,\n        swarmId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async listTasks(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const tasks = await swarm.getTasks();\n      res.json({\n        tasks: tasks.map(task => ({\n          id: task.id,\n          description: task.description,\n          status: task.status,\n          priority: task.priority,\n          assignedTo: task.assignedTo,\n          createdAt: task.createdAt,\n          completedAt: task.completedAt,\n        })),\n        total: tasks.length,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async getTask(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId, taskId } = req.params;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      const task = await swarm.getTask(taskId);\n      if (!task) {\n        return res.status(404).json({\n          error: 'Task not found',\n          code: 'TASK_NOT_FOUND',\n        });\n      }\n\n      res.json(task);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async cancelTask(req: any, res: any): Promise<void> {\n    try {\n      const { swarmId, taskId } = req.params;\n      const { reason } = req.body;\n      const swarm = this.swarms.get(swarmId);\n\n      if (!swarm) {\n        return res.status(404).json({\n          error: 'Swarm not found',\n          code: 'SWARM_NOT_FOUND',\n        });\n      }\n\n      await swarm.cancelTask(taskId, reason || 'User requested cancellation');\n      res.json({\n        message: 'Task cancelled successfully',\n        taskId,\n        swarmId,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  async destroy(): Promise<void> {\n    this.logger.info('Destroying Swarm API');\n\n    // Destroy all swarms\n    for (const [swarmId, swarm] of this.swarms) {\n      try {\n        await swarm.destroy();\n      } catch (error) {\n        this.logger.error('Error destroying swarm', { swarmId, error });\n      }\n    }\n\n    this.swarms.clear();\n  }\n}"],"names":["Router","SwarmCoordinator","ValidationError","SwarmError","nanoid","SwarmApi","router","swarms","Map","config","logger","claudeClient","configManager","coordinationManager","agentManager","resourceManager","setupRoutes","setupMiddleware","getRouter","use","req","res","next","info","method","path","ip","userAgent","get","body","status","json","error","code","err","message","stack","details","health","getSystemHealth","healthy","Error","post","createSwarm","bind","listSwarms","getSwarm","delete","destroySwarm","scaleSwarm","spawnAgent","listAgents","getAgent","terminateAgent","orchestrateTask","listTasks","getTask","cancelTask","getSwarmMetrics","getSwarmStatus","getSystemMetrics","request","name","topology","swarmConfig","maxAgents","strategy","swarmId","Date","now","swarm","initialize","set","createdAt","toISOString","swarmList","Array","from","entries","map","getConfig","agentCount","getAgentCount","getStatus","getCreatedAt","total","length","params","agents","getAgents","metrics","getMetrics","agent","id","type","capabilities","destroy","targetSize","scale","newSize","task","description","priority","requirements","metadata","getDetailedStatus","services","allHealthy","claudeHealth","getHealthStatus","claude","coordHealth","coordination","agentHealth","totalSwarms","size","systemMetrics","swarmMetrics","Promise","all","values","getId","system","timestamp","agentId","tasks","getTasks","assignedTo","completedAt","taskId","reason","clear"],"mappings":"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"}