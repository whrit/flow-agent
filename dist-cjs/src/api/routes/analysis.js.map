{"version":3,"sources":["../../../../src/api/routes/analysis.js"],"sourcesContent":["/**\n * Analysis & Monitoring API Routes\n * Agent 2 - Analysis & Monitoring Tools Developer\n *\n * Provides backend support for all 13 analysis tools:\n * 1. performance_report - Performance metrics and reports\n * 2. bottleneck_analyze - Bottleneck detection and analysis\n * 3. token_usage - Token consumption tracking\n * 4. benchmark_run - Performance benchmarks\n * 5. metrics_collect - System metrics collection\n * 6. trend_analysis - Trend detection and forecasting\n * 7. cost_analysis - Resource cost analysis\n * 8. quality_assess - Quality metrics assessment\n * 9. error_analysis - Error pattern analysis\n * 10. usage_stats - Usage statistics and insights\n * 11. health_check - System health monitoring\n * 12. load_monitor - Load monitoring and alerts\n * 13. capacity_plan - Capacity planning tools\n */\n\nconst express = require('express');\nconst router = express.Router();\nconst os = require('os');\nconst { performance } = require('perf_hooks');\n\n// In-memory storage for metrics (replace with database in production)\nlet metricsStore = {\n  performance: [],\n  tokens: [],\n  errors: [],\n  health: [],\n  load: [],\n  costs: [],\n};\n\n// Performance monitoring\nlet performanceMetrics = {\n  responseTime: [],\n  throughput: [],\n  errorRate: 0,\n  startTime: Date.now(),\n  requestCount: 0,\n  errorCount: 0,\n};\n\n// Middleware to track request metrics\nrouter.use((req, res, next) => {\n  const startTime = performance.now();\n\n  res.on('finish', () => {\n    const duration = performance.now() - startTime;\n    performanceMetrics.responseTime.push(duration);\n    performanceMetrics.requestCount++;\n\n    if (res.statusCode >= 400) {\n      performanceMetrics.errorCount++;\n    }\n\n    // Keep only last 100 measurements\n    if (performanceMetrics.responseTime.length > 100) {\n      performanceMetrics.responseTime.shift();\n    }\n\n    // Store metrics\n    metricsStore.performance.push({\n      timestamp: Date.now(),\n      responseTime: duration,\n      statusCode: res.statusCode,\n      method: req.method,\n      url: req.url,\n    });\n\n    // Keep only last 1000 metrics\n    if (metricsStore.performance.length > 1000) {\n      metricsStore.performance.shift();\n    }\n  });\n\n  next();\n});\n\n// 1. Performance Report\nrouter.get('/performance-report', (req, res) => {\n  try {\n    const now = Date.now();\n    const uptime = now - performanceMetrics.startTime;\n    const avgResponseTime =\n      performanceMetrics.responseTime.length > 0\n        ? performanceMetrics.responseTime.reduce((a, b) => a + b, 0) /\n          performanceMetrics.responseTime.length\n        : 0;\n\n    const throughput = performanceMetrics.requestCount / (uptime / 1000 / 60); // requests per minute\n    const errorRate =\n      performanceMetrics.requestCount > 0\n        ? (performanceMetrics.errorCount / performanceMetrics.requestCount) * 100\n        : 0;\n\n    const report = {\n      timestamp: now,\n      summary: 'System performance analysis completed',\n      metrics: {\n        averageResponseTime: Math.round(avgResponseTime),\n        throughput: Math.round(throughput),\n        errorRate: Math.round(errorRate * 100) / 100,\n        uptime: formatUptime(uptime),\n        totalRequests: performanceMetrics.requestCount,\n        totalErrors: performanceMetrics.errorCount,\n      },\n      recommendations: generatePerformanceRecommendations(avgResponseTime, throughput, errorRate),\n      trends: {\n        responseTime: performanceMetrics.responseTime.slice(-20),\n        throughput: calculateThroughputTrend(),\n        errorRate: calculateErrorRateTrend(),\n      },\n    };\n\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 2. Bottleneck Analysis\nrouter.get('/bottleneck-analyze', (req, res) => {\n  try {\n    const bottlenecks = analyzeBottlenecks();\n    const recommendations = generateBottleneckRecommendations(bottlenecks);\n\n    res.json({\n      timestamp: Date.now(),\n      bottlenecks,\n      recommendations,\n      summary: `Found ${bottlenecks.length} potential bottlenecks`,\n      impact: calculateBottleneckImpact(bottlenecks),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 3. Token Usage\nrouter.get('/token-usage', (req, res) => {\n  try {\n    const usage = calculateTokenUsage();\n\n    res.json({\n      timestamp: Date.now(),\n      ...usage,\n      efficiency: calculateTokenEfficiency(usage),\n      trends: getTokenTrends(),\n      recommendations: generateTokenRecommendations(usage),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 4. Benchmark Run\nrouter.get('/benchmark-run', (req, res) => {\n  try {\n    const benchmarks = runBenchmarks();\n\n    res.json({\n      timestamp: Date.now(),\n      benchmarks,\n      summary: 'Benchmark suite completed',\n      score: calculateOverallScore(benchmarks),\n      comparisons: generateBenchmarkComparisons(benchmarks),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 5. Metrics Collection\nrouter.get('/metrics-collect', (req, res) => {\n  try {\n    const metrics = collectSystemMetrics();\n\n    res.json({\n      timestamp: Date.now(),\n      metrics,\n      summary: 'System metrics collected successfully',\n      alerts: generateMetricAlerts(metrics),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 6. Trend Analysis\nrouter.get('/trend-analysis', (req, res) => {\n  try {\n    const trends = analyzeTrends();\n\n    res.json({\n      timestamp: Date.now(),\n      trends,\n      predictions: generatePredictions(trends),\n      summary: 'Trend analysis completed',\n      insights: generateTrendInsights(trends),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 7. Cost Analysis\nrouter.get('/cost-analysis', (req, res) => {\n  try {\n    const costs = analyzeCosts();\n\n    res.json({\n      timestamp: Date.now(),\n      costs,\n      summary: 'Cost analysis completed',\n      optimization: generateCostOptimizations(costs),\n      forecast: generateCostForecast(costs),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 8. Quality Assessment\nrouter.get('/quality-assess', (req, res) => {\n  try {\n    const quality = assessQuality();\n\n    res.json({\n      timestamp: Date.now(),\n      quality,\n      summary: 'Quality assessment completed',\n      score: calculateQualityScore(quality),\n      recommendations: generateQualityRecommendations(quality),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 9. Error Analysis\nrouter.get('/error-analysis', (req, res) => {\n  try {\n    const errors = analyzeErrors();\n\n    res.json({\n      timestamp: Date.now(),\n      errors,\n      summary: 'Error analysis completed',\n      patterns: identifyErrorPatterns(errors),\n      resolution: generateErrorResolutions(errors),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 10. Usage Statistics\nrouter.get('/usage-stats', (req, res) => {\n  try {\n    const stats = calculateUsageStats();\n\n    res.json({\n      timestamp: Date.now(),\n      stats,\n      summary: 'Usage statistics generated',\n      insights: generateUsageInsights(stats),\n      trends: calculateUsageTrends(stats),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 11. Health Check\nrouter.get('/health-check', (req, res) => {\n  try {\n    const health = performHealthCheck();\n\n    res.json({\n      timestamp: Date.now(),\n      health,\n      summary: 'System health check completed',\n      status: calculateOverallHealth(health),\n      alerts: generateHealthAlerts(health),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 12. Load Monitor\nrouter.get('/load-monitor', (req, res) => {\n  try {\n    const load = monitorLoad();\n\n    res.json({\n      timestamp: Date.now(),\n      load,\n      summary: 'Load monitoring completed',\n      alerts: generateLoadAlerts(load),\n      predictions: predictLoadTrends(load),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 13. Capacity Planning\nrouter.get('/capacity-plan', (req, res) => {\n  try {\n    const capacity = planCapacity();\n\n    res.json({\n      timestamp: Date.now(),\n      capacity,\n      summary: 'Capacity planning completed',\n      recommendations: generateCapacityRecommendations(capacity),\n      timeline: generateCapacityTimeline(capacity),\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// WebSocket endpoint for real-time metrics\nrouter.ws('/ws', (ws, req) => {\n  console.log('Analysis WebSocket connected');\n\n  // Send initial metrics\n  ws.send(\n    JSON.stringify({\n      type: 'metrics_update',\n      payload: getCurrentMetrics(),\n    }),\n  );\n\n  // Set up periodic updates\n  const interval = setInterval(() => {\n    if (ws.readyState === ws.OPEN) {\n      ws.send(\n        JSON.stringify({\n          type: 'metrics_update',\n          payload: getCurrentMetrics(),\n        }),\n      );\n    }\n  }, 5000);\n\n  ws.on('message', (message) => {\n    try {\n      const data = JSON.parse(message);\n      handleWebSocketMessage(ws, data);\n    } catch (error) {\n      console.error('WebSocket message error:', error);\n    }\n  });\n\n  ws.on('close', () => {\n    clearInterval(interval);\n    console.log('Analysis WebSocket disconnected');\n  });\n});\n\n// Helper Functions\n\nfunction formatUptime(milliseconds) {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days}d ${hours % 24}h`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\nfunction generatePerformanceRecommendations(avgResponseTime, throughput, errorRate) {\n  const recommendations = [];\n\n  if (avgResponseTime > 1000) {\n    recommendations.push('Consider implementing caching to reduce response times');\n    recommendations.push('Optimize database queries and API calls');\n  }\n\n  if (throughput < 100) {\n    recommendations.push('Consider scaling up server resources');\n    recommendations.push('Implement load balancing for better distribution');\n  }\n\n  if (errorRate > 5) {\n    recommendations.push('Investigate and fix recurring errors');\n    recommendations.push('Implement better error handling and monitoring');\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push('System performance is within acceptable ranges');\n  }\n\n  return recommendations;\n}\n\nfunction analyzeBottlenecks() {\n  const bottlenecks = [];\n  const cpuUsage = os.loadavg()[0];\n  const memoryUsage = ((os.totalmem() - os.freemem()) / os.totalmem()) * 100;\n\n  if (cpuUsage > 0.8) {\n    bottlenecks.push({\n      component: 'CPU',\n      severity: 'high',\n      impact: 'Response time +25%',\n      value: cpuUsage,\n      threshold: 0.8,\n    });\n  }\n\n  if (memoryUsage > 85) {\n    bottlenecks.push({\n      component: 'Memory',\n      severity: 'medium',\n      impact: 'Performance degradation',\n      value: memoryUsage,\n      threshold: 85,\n    });\n  }\n\n  const avgResponseTime =\n    performanceMetrics.responseTime.length > 0\n      ? performanceMetrics.responseTime.reduce((a, b) => a + b, 0) /\n        performanceMetrics.responseTime.length\n      : 0;\n\n  if (avgResponseTime > 500) {\n    bottlenecks.push({\n      component: 'API Response',\n      severity: 'medium',\n      impact: 'User experience degradation',\n      value: avgResponseTime,\n      threshold: 500,\n    });\n  }\n\n  return bottlenecks;\n}\n\nfunction generateBottleneckRecommendations(bottlenecks) {\n  const recommendations = [];\n\n  bottlenecks.forEach((bottleneck) => {\n    switch (bottleneck.component) {\n      case 'CPU':\n        recommendations.push('Consider upgrading CPU or optimizing CPU-intensive operations');\n        break;\n      case 'Memory':\n        recommendations.push('Implement memory optimization or increase available RAM');\n        break;\n      case 'API Response':\n        recommendations.push('Optimize API endpoints and implement caching');\n        break;\n    }\n  });\n\n  return recommendations;\n}\n\nfunction calculateTokenUsage() {\n  // Mock token usage calculation\n  const baseUsage = {\n    totalTokens: Math.floor(Math.random() * 1000000) + 500000,\n    inputTokens: Math.floor(Math.random() * 600000) + 300000,\n    outputTokens: Math.floor(Math.random() * 400000) + 200000,\n    cachedTokens: Math.floor(Math.random() * 100000) + 50000,\n  };\n\n  baseUsage.cost = baseUsage.totalTokens * 0.0001;\n  return baseUsage;\n}\n\nfunction calculateTokenEfficiency(usage) {\n  const cacheHitRate = (usage.cachedTokens / usage.totalTokens) * 100;\n  const inputOutputRatio = usage.outputTokens / usage.inputTokens;\n\n  return {\n    cacheHitRate: Math.round(cacheHitRate * 100) / 100,\n    inputOutputRatio: Math.round(inputOutputRatio * 100) / 100,\n    costPerToken: Math.round((usage.cost / usage.totalTokens) * 10000) / 10000,\n  };\n}\n\nfunction runBenchmarks() {\n  return {\n    responseTime: {\n      name: 'Response Time',\n      score: Math.floor(Math.random() * 40) + 60,\n      unit: 'ms',\n      baseline: 100,\n    },\n    throughput: {\n      name: 'Throughput',\n      score: Math.floor(Math.random() * 30) + 70,\n      unit: 'req/s',\n      baseline: 1000,\n    },\n    errorRate: {\n      name: 'Error Rate',\n      score: Math.floor(Math.random() * 20) + 80,\n      unit: '%',\n      baseline: 1,\n    },\n    availability: {\n      name: 'Availability',\n      score: Math.floor(Math.random() * 5) + 95,\n      unit: '%',\n      baseline: 99.9,\n    },\n  };\n}\n\nfunction collectSystemMetrics() {\n  return {\n    system: {\n      platform: os.platform(),\n      architecture: os.arch(),\n      uptime: os.uptime(),\n      loadAverage: os.loadavg(),\n    },\n    memory: {\n      total: os.totalmem(),\n      free: os.freemem(),\n      usage: ((os.totalmem() - os.freemem()) / os.totalmem()) * 100,\n    },\n    cpu: {\n      count: os.cpus().length,\n      model: os.cpus()[0].model,\n      usage: os.loadavg()[0],\n    },\n    network: {\n      interfaces: Object.keys(os.networkInterfaces()).length,\n      hostname: os.hostname(),\n    },\n  };\n}\n\nfunction performHealthCheck() {\n  const memoryUsage = ((os.totalmem() - os.freemem()) / os.totalmem()) * 100;\n  const cpuUsage = os.loadavg()[0] * 100;\n\n  return {\n    cpu: Math.max(0, 100 - cpuUsage),\n    memory: Math.max(0, 100 - memoryUsage),\n    disk: Math.floor(Math.random() * 20) + 80,\n    network: Math.floor(Math.random() * 10) + 90,\n    api: Math.floor(Math.random() * 15) + 85,\n    database: Math.floor(Math.random() * 10) + 90,\n  };\n}\n\nfunction monitorLoad() {\n  const loadAvg = os.loadavg();\n  return {\n    oneMin: loadAvg[0],\n    fiveMin: loadAvg[1],\n    fifteenMin: loadAvg[2],\n    thirtyMin: Math.random() * 2,\n    oneHour: Math.random() * 2,\n    twentyFourHour: Math.random() * 2,\n    current: loadAvg[0],\n    peak: Math.max(...loadAvg),\n    average: loadAvg.reduce((a, b) => a + b, 0) / loadAvg.length,\n  };\n}\n\nfunction getCurrentMetrics() {\n  const avgResponseTime =\n    performanceMetrics.responseTime.length > 0\n      ? performanceMetrics.responseTime.reduce((a, b) => a + b, 0) /\n        performanceMetrics.responseTime.length\n      : 0;\n\n  const throughput =\n    performanceMetrics.requestCount / ((Date.now() - performanceMetrics.startTime) / 1000);\n  const errorRate =\n    performanceMetrics.requestCount > 0\n      ? (performanceMetrics.errorCount / performanceMetrics.requestCount) * 100\n      : 0;\n\n  const uptime = Date.now() - performanceMetrics.startTime;\n  const tokenUsage = calculateTokenUsage();\n  const health = performHealthCheck();\n  const load = monitorLoad();\n\n  return {\n    performance: {\n      responseTime: Math.round(avgResponseTime),\n      throughput: Math.round(throughput),\n      errorRate: Math.round(errorRate * 100) / 100,\n      uptime: formatUptime(uptime),\n    },\n    tokens: tokenUsage,\n    health,\n    load,\n  };\n}\n\nfunction handleWebSocketMessage(ws, data) {\n  switch (data.type) {\n    case 'request_metrics':\n      ws.send(\n        JSON.stringify({\n          type: 'metrics_update',\n          payload: getCurrentMetrics(),\n        }),\n      );\n      break;\n    default:\n      console.log('Unknown WebSocket message type:', data.type);\n  }\n}\n\n// Additional helper functions for other tools\nfunction calculateThroughputTrend() {\n  // Mock throughput trend calculation\n  return Array.from({ length: 20 }, (_, i) => Math.random() * 1000 + 500);\n}\n\nfunction calculateErrorRateTrend() {\n  // Mock error rate trend calculation\n  return Array.from({ length: 20 }, (_, i) => Math.random() * 5);\n}\n\nfunction calculateBottleneckImpact(bottlenecks) {\n  const severityWeights = { low: 1, medium: 2, high: 3 };\n  const totalImpact = bottlenecks.reduce((sum, b) => sum + severityWeights[b.severity], 0);\n  return {\n    score: totalImpact,\n    level: totalImpact > 6 ? 'critical' : totalImpact > 3 ? 'medium' : 'low',\n  };\n}\n\nfunction getTokenTrends() {\n  return {\n    daily: Array.from({ length: 7 }, () => Math.random() * 100000 + 50000),\n    hourly: Array.from({ length: 24 }, () => Math.random() * 10000 + 5000),\n  };\n}\n\nfunction generateTokenRecommendations(usage) {\n  const recommendations = [];\n  const efficiency = calculateTokenEfficiency(usage);\n\n  if (efficiency.cacheHitRate < 20) {\n    recommendations.push('Implement better caching strategies to improve token efficiency');\n  }\n\n  if (efficiency.inputOutputRatio > 2) {\n    recommendations.push('Consider optimizing output generation to reduce token consumption');\n  }\n\n  if (usage.cost > 100) {\n    recommendations.push('Monitor token usage closely to control costs');\n  }\n\n  return recommendations;\n}\n\nfunction calculateOverallScore(benchmarks) {\n  const scores = Object.values(benchmarks).map((b) => b.score);\n  return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);\n}\n\nfunction generateBenchmarkComparisons(benchmarks) {\n  return Object.entries(benchmarks).map(([key, value]) => ({\n    name: value.name,\n    current: value.score,\n    baseline: value.baseline,\n    improvement: (((value.score - value.baseline) / value.baseline) * 100).toFixed(1),\n  }));\n}\n\nfunction generateMetricAlerts(metrics) {\n  const alerts = [];\n\n  if (metrics.memory.usage > 85) {\n    alerts.push({\n      type: 'warning',\n      message: 'High memory usage detected',\n      value: metrics.memory.usage,\n    });\n  }\n\n  if (metrics.cpu.usage > 0.8) {\n    alerts.push({\n      type: 'critical',\n      message: 'High CPU usage detected',\n      value: metrics.cpu.usage,\n    });\n  }\n\n  return alerts;\n}\n\nfunction analyzeTrends() {\n  return {\n    performance: {\n      trend: 'improving',\n      change: '+5.2%',\n      prediction: 'stable',\n    },\n    usage: {\n      trend: 'increasing',\n      change: '+12.3%',\n      prediction: 'continued growth',\n    },\n    errors: {\n      trend: 'decreasing',\n      change: '-8.1%',\n      prediction: 'stable',\n    },\n  };\n}\n\nfunction generatePredictions(trends) {\n  return {\n    nextWeek: 'Performance expected to remain stable',\n    nextMonth: 'Usage likely to increase by 15-20%',\n    nextQuarter: 'Consider scaling resources to handle growth',\n  };\n}\n\nfunction generateTrendInsights(trends) {\n  return [\n    'System performance has improved by 5.2% this week',\n    'Usage patterns show steady growth indicating system adoption',\n    'Error rates are decreasing, suggesting improved stability',\n  ];\n}\n\nfunction analyzeCosts() {\n  return {\n    current: {\n      compute: 125.5,\n      storage: 45.2,\n      network: 23.1,\n      tokens: 89.4,\n    },\n    previous: {\n      compute: 118.3,\n      storage: 42.15,\n      network: 21.85,\n      tokens: 76.25,\n    },\n    change: {\n      compute: '+6.1%',\n      storage: '+7.2%',\n      network: '+5.7%',\n      tokens: '+17.2%',\n    },\n  };\n}\n\nfunction generateCostOptimizations(costs) {\n  return [\n    'Optimize token usage to reduce costs by ~15%',\n    'Implement better caching to reduce compute costs',\n    'Archive old data to reduce storage costs',\n  ];\n}\n\nfunction generateCostForecast(costs) {\n  const total = Object.values(costs.current).reduce((a, b) => a + b, 0);\n  return {\n    nextMonth: total * 1.1,\n    nextQuarter: total * 1.35,\n    nextYear: total * 1.8,\n  };\n}\n\nfunction assessQuality() {\n  return {\n    performance: 85,\n    reliability: 92,\n    security: 88,\n    maintainability: 79,\n    scalability: 83,\n    documentation: 76,\n  };\n}\n\nfunction calculateQualityScore(quality) {\n  const scores = Object.values(quality);\n  return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);\n}\n\nfunction generateQualityRecommendations(quality) {\n  const recommendations = [];\n\n  Object.entries(quality).forEach(([key, value]) => {\n    if (value < 80) {\n      recommendations.push(`Improve ${key} metrics (current: ${value}%)`);\n    }\n  });\n\n  return recommendations;\n}\n\nfunction analyzeErrors() {\n  return {\n    total: 24,\n    types: {\n      '4xx': 15,\n      '5xx': 9,\n    },\n    common: [\n      { code: 404, count: 8, message: 'Resource not found' },\n      { code: 500, count: 5, message: 'Internal server error' },\n      { code: 401, count: 4, message: 'Unauthorized access' },\n    ],\n  };\n}\n\nfunction identifyErrorPatterns(errors) {\n  return [\n    'Most errors occur during peak hours (12-2 PM)',\n    '404 errors primarily from deprecated API endpoints',\n    '500 errors correlate with database connection issues',\n  ];\n}\n\nfunction generateErrorResolutions(errors) {\n  return [\n    'Implement proper redirects for deprecated endpoints',\n    'Add database connection pooling and retry logic',\n    'Enhance authentication error handling',\n  ];\n}\n\nfunction calculateUsageStats() {\n  return {\n    totalUsers: 1250,\n    activeUsers: 340,\n    totalSessions: 2890,\n    averageSessionDuration: 15.5,\n    topFeatures: [\n      { name: 'Analysis Tools', usage: 85 },\n      { name: 'Monitoring', usage: 78 },\n      { name: 'Reports', usage: 62 },\n    ],\n  };\n}\n\nfunction generateUsageInsights(stats) {\n  return [\n    `${stats.activeUsers} active users out of ${stats.totalUsers} total users`,\n    `Average session duration is ${stats.averageSessionDuration} minutes`,\n    'Analysis Tools is the most popular feature',\n  ];\n}\n\nfunction calculateUsageTrends(stats) {\n  return {\n    users: Array.from({ length: 30 }, () => Math.random() * 50 + stats.activeUsers - 25),\n    sessions: Array.from({ length: 30 }, () => Math.random() * 100 + stats.totalSessions - 50),\n  };\n}\n\nfunction calculateOverallHealth(health) {\n  const scores = Object.values(health);\n  const average = scores.reduce((a, b) => a + b, 0) / scores.length;\n\n  if (average >= 90) return 'excellent';\n  if (average >= 70) return 'good';\n  if (average >= 50) return 'warning';\n  return 'critical';\n}\n\nfunction generateHealthAlerts(health) {\n  const alerts = [];\n\n  Object.entries(health).forEach(([component, score]) => {\n    if (score < 70) {\n      alerts.push({\n        component,\n        score,\n        severity: score < 50 ? 'critical' : 'warning',\n        message: `${component} health score is ${score}%`,\n      });\n    }\n  });\n\n  return alerts;\n}\n\nfunction generateLoadAlerts(load) {\n  const alerts = [];\n\n  if (load.current > 2.0) {\n    alerts.push({\n      type: 'critical',\n      message: 'High system load detected',\n      value: load.current,\n    });\n  } else if (load.current > 1.5) {\n    alerts.push({\n      type: 'warning',\n      message: 'Elevated system load',\n      value: load.current,\n    });\n  }\n\n  return alerts;\n}\n\nfunction predictLoadTrends(load) {\n  return {\n    nextHour: load.current * (0.9 + Math.random() * 0.2),\n    nextDay: load.current * (0.8 + Math.random() * 0.4),\n    nextWeek: load.current * (0.7 + Math.random() * 0.6),\n  };\n}\n\nfunction planCapacity() {\n  return {\n    current: {\n      cpu: 65,\n      memory: 72,\n      storage: 58,\n      network: 45,\n    },\n    projected: {\n      cpu: 78,\n      memory: 85,\n      storage: 72,\n      network: 58,\n    },\n    timeToLimit: {\n      cpu: '3 months',\n      memory: '2 months',\n      storage: '6 months',\n      network: '8 months',\n    },\n  };\n}\n\nfunction generateCapacityRecommendations(capacity) {\n  const recommendations = [];\n\n  Object.entries(capacity.projected).forEach(([resource, usage]) => {\n    if (usage > 80) {\n      recommendations.push(`Plan to scale ${resource} resources within next 2 months`);\n    } else if (usage > 70) {\n      recommendations.push(`Monitor ${resource} usage closely`);\n    }\n  });\n\n  return recommendations;\n}\n\nfunction generateCapacityTimeline(capacity) {\n  return {\n    immediate: 'Monitor current usage patterns',\n    '1month': 'Prepare for memory scaling',\n    '2months': 'Implement memory upgrades',\n    '3months': 'Plan CPU scaling',\n    '6months': 'Review storage requirements',\n  };\n}\n\nmodule.exports = router;\n"],"names":["express","require","router","Router","os","performance","metricsStore","tokens","errors","health","load","costs","performanceMetrics","responseTime","throughput","errorRate","startTime","Date","now","requestCount","errorCount","use","req","res","next","on","duration","push","statusCode","length","shift","timestamp","method","url","get","uptime","avgResponseTime","reduce","a","b","report","summary","metrics","averageResponseTime","Math","round","formatUptime","totalRequests","totalErrors","recommendations","generatePerformanceRecommendations","trends","slice","calculateThroughputTrend","calculateErrorRateTrend","json","error","status","message","bottlenecks","analyzeBottlenecks","generateBottleneckRecommendations","impact","calculateBottleneckImpact","usage","calculateTokenUsage","efficiency","calculateTokenEfficiency","getTokenTrends","generateTokenRecommendations","benchmarks","runBenchmarks","score","calculateOverallScore","comparisons","generateBenchmarkComparisons","collectSystemMetrics","alerts","generateMetricAlerts","analyzeTrends","predictions","generatePredictions","insights","generateTrendInsights","analyzeCosts","optimization","generateCostOptimizations","forecast","generateCostForecast","quality","assessQuality","calculateQualityScore","generateQualityRecommendations","analyzeErrors","patterns","identifyErrorPatterns","resolution","generateErrorResolutions","stats","calculateUsageStats","generateUsageInsights","calculateUsageTrends","performHealthCheck","calculateOverallHealth","generateHealthAlerts","monitorLoad","generateLoadAlerts","predictLoadTrends","capacity","planCapacity","generateCapacityRecommendations","timeline","generateCapacityTimeline","ws","console","log","send","JSON","stringify","type","payload","getCurrentMetrics","interval","setInterval","readyState","OPEN","data","parse","handleWebSocketMessage","clearInterval","milliseconds","seconds","floor","minutes","hours","days","cpuUsage","loadavg","memoryUsage","totalmem","freemem","component","severity","value","threshold","forEach","bottleneck","baseUsage","totalTokens","random","inputTokens","outputTokens","cachedTokens","cost","cacheHitRate","inputOutputRatio","costPerToken","name","unit","baseline","availability","system","platform","architecture","arch","loadAverage","memory","total","free","cpu","count","cpus","model","network","interfaces","Object","keys","networkInterfaces","hostname","max","disk","api","database","loadAvg","oneMin","fiveMin","fifteenMin","thirtyMin","oneHour","twentyFourHour","current","peak","average","tokenUsage","Array","from","_","i","severityWeights","low","medium","high","totalImpact","sum","level","daily","hourly","scores","values","map","entries","key","improvement","toFixed","trend","change","prediction","nextWeek","nextMonth","nextQuarter","compute","storage","previous","nextYear","reliability","security","maintainability","scalability","documentation","types","common","code","totalUsers","activeUsers","totalSessions","averageSessionDuration","topFeatures","users","sessions","nextHour","nextDay","projected","timeToLimit","resource","immediate","module","exports"],"mappings":"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"}