{"version":3,"sources":["../../../src/migration/migration-validator.ts"],"sourcesContent":["/**\n * Migration Validator - Validates successful migration\n */\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport type { ValidationResult, ValidationCheck } from './types.js';\nimport { logger } from './logger.js';\nimport * as chalk from 'chalk';\nimport { glob } from 'glob';\n\nexport class MigrationValidator {\n  private requiredFiles = [\n    '.claude/commands/sparc.md',\n    '.claude/commands/claude-flow-help.md',\n    '.claude/commands/claude-flow-memory.md',\n    '.claude/BATCHTOOLS_GUIDE.md',\n    '.claude/BATCHTOOLS_BEST_PRACTICES.md',\n  ];\n\n  private requiredCommands = [\n    'sparc',\n    'sparc-architect',\n    'sparc-code',\n    'sparc-tdd',\n    'claude-flow-help',\n    'claude-flow-memory',\n    'claude-flow-swarm',\n  ];\n\n  async validate(projectPath: string): Promise<ValidationResult> {\n    const result: ValidationResult = {\n      valid: true,\n      checks: [],\n      errors: [],\n      warnings: [],\n    };\n\n    // Check file structure\n    await this.validateFileStructure(projectPath, result);\n\n    // Check command files\n    await this.validateCommandFiles(projectPath, result);\n\n    // Check configuration files\n    await this.validateConfiguration(projectPath, result);\n\n    // Check file integrity\n    await this.validateFileIntegrity(projectPath, result);\n\n    // Check functionality\n    await this.validateFunctionality(projectPath, result);\n\n    // Overall validation\n    result.valid = result.errors.length === 0;\n\n    return result;\n  }\n\n  private async validateFileStructure(\n    projectPath: string,\n    result: ValidationResult,\n  ): Promise<void> {\n    const check: ValidationCheck = {\n      name: 'File Structure',\n      passed: true,\n    };\n\n    // Check .claude directory exists\n    const claudePath = path.join(projectPath, '.claude');\n    if (!(await fs.pathExists(claudePath))) {\n      check.passed = false;\n      result.errors.push('.claude directory not found');\n    }\n\n    // Check commands directory\n    const commandsPath = path.join(claudePath, 'commands');\n    if (!(await fs.pathExists(commandsPath))) {\n      check.passed = false;\n      result.errors.push('.claude/commands directory not found');\n    }\n\n    // Check required files\n    for (const file of this.requiredFiles) {\n      const filePath = path.join(projectPath, file);\n      if (!(await fs.pathExists(filePath))) {\n        check.passed = false;\n        result.errors.push(`Required file missing: ${file}`);\n      }\n    }\n\n    result.checks.push(check);\n  }\n\n  private async validateCommandFiles(projectPath: string, result: ValidationResult): Promise<void> {\n    const check: ValidationCheck = {\n      name: 'Command Files',\n      passed: true,\n    };\n\n    const commandsPath = path.join(projectPath, '.claude/commands');\n\n    if (await fs.pathExists(commandsPath)) {\n      for (const command of this.requiredCommands) {\n        const commandFile = path.join(commandsPath, `${command}.md`);\n        const sparcCommandFile = path.join(\n          commandsPath,\n          'sparc',\n          `${command.replace('sparc-', '')}.md`,\n        );\n\n        const hasMainFile = await fs.pathExists(commandFile);\n        const hasSparcFile = await fs.pathExists(sparcCommandFile);\n\n        if (!hasMainFile && !hasSparcFile) {\n          check.passed = false;\n          result.errors.push(`Command file missing: ${command}.md`);\n        } else {\n          // Validate file content\n          const filePath = hasMainFile ? commandFile : sparcCommandFile;\n          await this.validateCommandFileContent(filePath, command, result);\n        }\n      }\n    } else {\n      check.passed = false;\n      result.errors.push('Commands directory not found');\n    }\n\n    result.checks.push(check);\n  }\n\n  private async validateCommandFileContent(\n    filePath: string,\n    command: string,\n    result: ValidationResult,\n  ): Promise<void> {\n    try {\n      const content = await fs.readFile(filePath, 'utf-8');\n\n      // Check for minimum content requirements\n      const hasDescription = content.includes('description') || content.includes('Description');\n      const hasInstructions = content.length > 100; // Minimum content length\n\n      if (!hasDescription) {\n        result.warnings.push(`Command ${command} may be missing description`);\n      }\n\n      if (!hasInstructions) {\n        result.warnings.push(`Command ${command} may have insufficient content`);\n      }\n\n      // Check for optimization indicators\n      const hasOptimizedContent =\n        content.includes('optimization') ||\n        content.includes('performance') ||\n        content.includes('efficient');\n\n      if (!hasOptimizedContent && command.includes('sparc')) {\n        result.warnings.push(`SPARC command ${command} may not be optimized`);\n      }\n    } catch (error) {\n      result.errors.push(\n        `Failed to validate ${command}: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  private async validateConfiguration(\n    projectPath: string,\n    result: ValidationResult,\n  ): Promise<void> {\n    const check: ValidationCheck = {\n      name: 'Configuration Files',\n      passed: true,\n    };\n\n    // Check CLAUDE.md\n    const claudeMdPath = path.join(projectPath, 'CLAUDE.md');\n    if (await fs.pathExists(claudeMdPath)) {\n      const content = await fs.readFile(claudeMdPath, 'utf-8');\n\n      // Check for SPARC configuration\n      if (!content.includes('SPARC')) {\n        result.warnings.push('CLAUDE.md may not include SPARC configuration');\n      }\n\n      // Check for key sections\n      const requiredSections = ['Project Overview', 'SPARC Development', 'Memory Integration'];\n\n      for (const section of requiredSections) {\n        if (!content.includes(section)) {\n          result.warnings.push(`CLAUDE.md missing section: ${section}`);\n        }\n      }\n    } else {\n      result.warnings.push('CLAUDE.md not found');\n    }\n\n    // Check .roomodes\n    const roomodesPath = path.join(projectPath, '.roomodes');\n    if (await fs.pathExists(roomodesPath)) {\n      try {\n        const roomodes = await fs.readJson(roomodesPath);\n        const requiredModes = ['architect', 'code', 'tdd', 'debug'];\n\n        for (const mode of requiredModes) {\n          if (!roomodes[mode]) {\n            result.warnings.push(`Missing SPARC mode: ${mode}`);\n          }\n        }\n      } catch (error) {\n        result.errors.push(\n          `Invalid .roomodes file: ${error instanceof Error ? error.message : String(error)}`,\n        );\n        check.passed = false;\n      }\n    }\n\n    result.checks.push(check);\n  }\n\n  private async validateFileIntegrity(\n    projectPath: string,\n    result: ValidationResult,\n  ): Promise<void> {\n    const check: ValidationCheck = {\n      name: 'File Integrity',\n      passed: true,\n    };\n\n    // Check for corrupted files\n    const claudePath = path.join(projectPath, '.claude');\n    if (await fs.pathExists(claudePath)) {\n      const files = await glob('**/*.md', { cwd: claudePath });\n\n      for (const file of files) {\n        try {\n          const content = await fs.readFile(path.join(claudePath, file), 'utf-8');\n\n          // Basic integrity checks\n          if (content.length === 0) {\n            result.errors.push(`Empty file: ${file}`);\n            check.passed = false;\n          }\n\n          // Check for binary data in text files\n          if (content.includes('\\0')) {\n            result.errors.push(`Corrupted text file: ${file}`);\n            check.passed = false;\n          }\n        } catch (error) {\n          result.errors.push(\n            `Cannot read file ${file}: ${error instanceof Error ? error.message : String(error)}`,\n          );\n          check.passed = false;\n        }\n      }\n    }\n\n    result.checks.push(check);\n  }\n\n  private async validateFunctionality(\n    projectPath: string,\n    result: ValidationResult,\n  ): Promise<void> {\n    const check: ValidationCheck = {\n      name: 'Functionality',\n      passed: true,\n    };\n\n    // Check directory permissions\n    const claudePath = path.join(projectPath, '.claude');\n    if (await fs.pathExists(claudePath)) {\n      try {\n        // Test write permissions\n        const testFile = path.join(claudePath, '.test-write');\n        await fs.writeFile(testFile, 'test');\n        await fs.remove(testFile);\n      } catch (error) {\n        result.warnings.push('.claude directory may not be writable');\n      }\n    }\n\n    // Check for potential conflicts\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    if (await fs.pathExists(packageJsonPath)) {\n      try {\n        const packageJson = await fs.readJson(packageJsonPath);\n\n        // Check for script conflicts\n        const scripts = packageJson.scripts || {};\n        const conflictingScripts = Object.keys(scripts).filter(\n          (script) => script.startsWith('claude-flow') || script.startsWith('sparc'),\n        );\n\n        if (conflictingScripts.length > 0) {\n          result.warnings.push(`Potential script conflicts: ${conflictingScripts.join(', ')}`);\n        }\n      } catch (error) {\n        result.warnings.push('Could not validate package.json');\n      }\n    }\n\n    result.checks.push(check);\n  }\n\n  printValidation(validation: ValidationResult): void {\n    console.log(chalk.bold('\\n✅ Migration Validation Report'));\n    console.log(chalk.gray('─'.repeat(50)));\n\n    console.log(\n      `\\n${chalk.bold('Overall Status:')} ${validation.valid ? chalk.green('✓ Valid') : chalk.red('✗ Invalid')}`,\n    );\n\n    // Show checks\n    console.log(chalk.bold('\\n📋 Validation Checks:'));\n    validation.checks.forEach((check) => {\n      const status = check.passed ? chalk.green('✓') : chalk.red('✗');\n      console.log(`  ${status} ${check.name}`);\n      if (check.message) {\n        console.log(`     ${chalk.gray(check.message)}`);\n      }\n    });\n\n    // Show errors\n    if (validation.errors.length > 0) {\n      console.log(chalk.bold('\\n❌ Errors:'));\n      validation.errors.forEach((error) => {\n        console.log(`  • ${chalk.red(error)}`);\n      });\n    }\n\n    // Show warnings\n    if (validation.warnings.length > 0) {\n      console.log(chalk.bold('\\n⚠️  Warnings:'));\n      validation.warnings.forEach((warning) => {\n        console.log(`  • ${chalk.yellow(warning)}`);\n      });\n    }\n\n    console.log(chalk.gray('\\n' + '─'.repeat(50)));\n\n    if (validation.valid) {\n      console.log(\n        chalk.green(\n          '\\n🎉 Migration validation passed! Your project is ready to use optimized prompts.',\n        ),\n      );\n    } else {\n      console.log(chalk.red('\\n⚠️  Migration validation failed. Please address the errors above.'));\n    }\n  }\n}\n"],"names":["fs","path","chalk","glob","MigrationValidator","requiredFiles","requiredCommands","validate","projectPath","result","valid","checks","errors","warnings","validateFileStructure","validateCommandFiles","validateConfiguration","validateFileIntegrity","validateFunctionality","length","check","name","passed","claudePath","join","pathExists","push","commandsPath","file","filePath","command","commandFile","sparcCommandFile","replace","hasMainFile","hasSparcFile","validateCommandFileContent","content","readFile","hasDescription","includes","hasInstructions","hasOptimizedContent","error","Error","message","String","claudeMdPath","requiredSections","section","roomodesPath","roomodes","readJson","requiredModes","mode","files","cwd","testFile","writeFile","remove","packageJsonPath","packageJson","scripts","conflictingScripts","Object","keys","filter","script","startsWith","printValidation","validation","console","log","bold","gray","repeat","green","red","forEach","status","warning","yellow"],"mappings":"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"}