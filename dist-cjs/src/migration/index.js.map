{"version":3,"sources":["../../../src/migration/index.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Claude-Flow Migration Tool\n * Helps existing projects migrate to optimized prompts and configurations\n */\n\nimport { Command } from '@cliffy/command';\nimport { MigrationRunner } from './migration-runner.js';\nimport { MigrationAnalyzer } from './migration-analyzer.js';\nimport type { MigrationStrategy } from './types.js';\nimport { logger } from './logger.js';\nimport * as chalk from 'chalk';\nimport * as path from 'path';\n\nconst program = new Command();\n\nprogram\n  .name('claude-flow-migrate')\n  .description('Migrate existing claude-flow projects to optimized prompts')\n  .version('1.0.0');\n\nprogram\n  .command('analyze [path]')\n  .description('Analyze existing project for migration readiness')\n  .option('-d, --detailed', 'Show detailed analysis')\n  .option('-o, --output <file>', 'Output analysis to file')\n  .action(async (projectPath = '.', options) => {\n    try {\n      const analyzer = new MigrationAnalyzer();\n      const analysis = await analyzer.analyze(path.resolve(projectPath));\n\n      if (options.output) {\n        await analyzer.saveAnalysis(analysis, options.output);\n        logger.success(`Analysis saved to ${options.output}`);\n      }\n\n      analyzer.printAnalysis(analysis, options.detailed);\n    } catch (error) {\n      logger.error('Analysis failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('migrate [path]')\n  .description('Migrate project to optimized prompts')\n  .option('-s, --strategy <type>', 'Migration strategy: full, selective, merge', 'selective')\n  .option('-b, --backup <dir>', 'Backup directory', '.claude-backup')\n  .option('-f, --force', 'Force migration without prompts')\n  .option('--dry-run', 'Simulate migration without making changes')\n  .option('--preserve-custom', 'Preserve custom commands and configurations')\n  .option('--skip-validation', 'Skip post-migration validation')\n  .action(async (projectPath = '.', options) => {\n    try {\n      const runner = new MigrationRunner({\n        projectPath: path.resolve(projectPath),\n        strategy: options.strategy as MigrationStrategy,\n        backupDir: options.backup,\n        force: options.force,\n        dryRun: options.dryRun,\n        preserveCustom: options.preserveCustom,\n        skipValidation: options.skipValidation,\n      });\n\n      await runner.run();\n    } catch (error) {\n      logger.error('Migration failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('rollback [path]')\n  .description('Rollback to previous configuration')\n  .option('-b, --backup <dir>', 'Backup directory to restore from', '.claude-backup')\n  .option('-t, --timestamp <time>', 'Restore from specific timestamp')\n  .option('-f, --force', 'Force rollback without prompts')\n  .action(async (projectPath = '.', options) => {\n    try {\n      const runner = new MigrationRunner({\n        projectPath: path.resolve(projectPath),\n        strategy: 'full',\n        backupDir: options.backup,\n        force: options.force,\n      });\n\n      await runner.rollback(options.timestamp);\n    } catch (error) {\n      logger.error('Rollback failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('validate [path]')\n  .description('Validate migration was successful')\n  .option('-v, --verbose', 'Show detailed validation results')\n  .action(async (projectPath = '.', options) => {\n    try {\n      const runner = new MigrationRunner({\n        projectPath: path.resolve(projectPath),\n        strategy: 'full',\n      });\n\n      const isValid = await runner.validate(options.verbose);\n\n      if (isValid) {\n        logger.success('Migration validated successfully!');\n      } else {\n        logger.error('Migration validation failed');\n        process.exit(1);\n      }\n    } catch (error) {\n      logger.error('Validation failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('list-backups [path]')\n  .description('List available backups')\n  .option('-b, --backup <dir>', 'Backup directory', '.claude-backup')\n  .action(async (projectPath = '.', options) => {\n    try {\n      const runner = new MigrationRunner({\n        projectPath: path.resolve(projectPath),\n        strategy: 'full',\n        backupDir: options.backup,\n      });\n\n      await runner.listBackups();\n    } catch (error) {\n      logger.error('Failed to list backups:', error);\n      process.exit(1);\n    }\n  });\n\n// Show help if no command provided\nif (!process.argv.slice(2).length) {\n  program.outputHelp();\n}\n\nprogram.parse(process.argv);\n"],"names":["Command","MigrationRunner","MigrationAnalyzer","logger","path","program","name","description","version","command","option","action","projectPath","options","analyzer","analysis","analyze","resolve","output","saveAnalysis","success","printAnalysis","detailed","error","process","exit","runner","strategy","backupDir","backup","force","dryRun","preserveCustom","skipValidation","run","rollback","timestamp","isValid","validate","verbose","listBackups","argv","slice","length","outputHelp","parse"],"mappings":"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"}