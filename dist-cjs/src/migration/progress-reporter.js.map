{"version":3,"sources":["../../../src/migration/progress-reporter.ts"],"sourcesContent":["/**\n * Progress Reporter - Provides visual feedback during migration\n */\n\nimport * as chalk from 'chalk';\nimport type { MigrationProgress } from './types.js';\n\nexport class ProgressReporter {\n  private progress: MigrationProgress;\n  private startTime: Date;\n  private spinner: string[] = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n  private spinnerIndex: number = 0;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.progress = {\n      total: 0,\n      completed: 0,\n      current: '',\n      phase: 'analyzing',\n      errors: 0,\n      warnings: 0,\n    };\n    this.startTime = new Date();\n  }\n\n  start(phase: MigrationProgress['phase'], message: string): void {\n    this.progress.phase = phase;\n    this.progress.current = message;\n    this.startTime = new Date();\n\n    console.log(chalk.bold(`\\n🚀 Starting ${phase}...`));\n    this.startSpinner();\n  }\n\n  update(\n    phase: MigrationProgress['phase'],\n    message: string,\n    completed?: number,\n    total?: number,\n  ): void {\n    this.progress.phase = phase;\n    this.progress.current = message;\n\n    if (completed !== undefined) {\n      this.progress.completed = completed;\n    }\n\n    if (total !== undefined) {\n      this.progress.total = total;\n    }\n\n    this.updateDisplay();\n  }\n\n  complete(message: string): void {\n    this.stopSpinner();\n\n    const duration = new Date().getTime() - this.startTime.getTime();\n    const seconds = (duration / 1000).toFixed(2);\n\n    console.log(chalk.green(`\\n✅ ${message}`));\n    console.log(chalk.gray(`   Completed in ${seconds}s`));\n\n    if (this.progress.warnings > 0) {\n      console.log(chalk.yellow(`   ${this.progress.warnings} warnings`));\n    }\n\n    if (this.progress.errors > 0) {\n      console.log(chalk.red(`   ${this.progress.errors} errors`));\n    }\n  }\n\n  error(message: string): void {\n    this.stopSpinner();\n    console.log(chalk.red(`\\n❌ ${message}`));\n    this.progress.errors++;\n  }\n\n  warning(message: string): void {\n    console.log(chalk.yellow(`⚠️  ${message}`));\n    this.progress.warnings++;\n  }\n\n  info(message: string): void {\n    console.log(chalk.blue(`ℹ️  ${message}`));\n  }\n\n  private startSpinner(): void {\n    this.intervalId = setInterval(() => {\n      this.spinnerIndex = (this.spinnerIndex + 1) % this.spinner.length;\n      this.updateDisplay();\n    }, 100);\n  }\n\n  private stopSpinner(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    // Clear the spinner line\n    process.stdout.write('\\r\\x1b[K');\n  }\n\n  private updateDisplay(): void {\n    const spinner = this.spinner[this.spinnerIndex];\n    const phase = this.getPhaseDisplay();\n    const progress = this.getProgressDisplay();\n\n    const message = `${spinner} ${phase} ${progress} ${this.progress.current}`;\n\n    // Clear line and write new message\n    process.stdout.write('\\r\\x1b[K' + message);\n  }\n\n  private getPhaseDisplay(): string {\n    const phases = {\n      analyzing: chalk.blue('📊 Analyzing'),\n      'backing-up': chalk.yellow('💾 Backing up'),\n      migrating: chalk.green('🔄 Migrating'),\n      validating: chalk.cyan('✅ Validating'),\n      complete: chalk.green('✅ Complete'),\n    };\n\n    return phases[this.progress.phase] || chalk.gray('⏳ Processing');\n  }\n\n  private getProgressDisplay(): string {\n    if (this.progress.total > 0) {\n      const percentage = Math.round((this.progress.completed / this.progress.total) * 100);\n      const progressBar = this.createProgressBar(percentage);\n      return `${progressBar} ${this.progress.completed}/${this.progress.total} (${percentage}%)`;\n    }\n    return '';\n  }\n\n  private createProgressBar(percentage: number, width: number = 20): string {\n    const filled = Math.round((percentage / 100) * width);\n    const empty = width - filled;\n\n    const filledBar = '█'.repeat(filled);\n    const emptyBar = '░'.repeat(empty);\n\n    return chalk.green(filledBar) + chalk.gray(emptyBar);\n  }\n\n  setTotal(total: number): void {\n    this.progress.total = total;\n  }\n\n  increment(message?: string): void {\n    this.progress.completed++;\n    if (message) {\n      this.progress.current = message;\n    }\n    this.updateDisplay();\n  }\n\n  getProgress(): MigrationProgress {\n    return { ...this.progress };\n  }\n}\n"],"names":["chalk","ProgressReporter","progress","startTime","spinner","spinnerIndex","intervalId","total","completed","current","phase","errors","warnings","Date","start","message","console","log","bold","startSpinner","update","undefined","updateDisplay","complete","stopSpinner","duration","getTime","seconds","toFixed","green","gray","yellow","red","error","warning","info","blue","setInterval","length","clearInterval","process","stdout","write","getPhaseDisplay","getProgressDisplay","phases","analyzing","migrating","validating","cyan","percentage","Math","round","progressBar","createProgressBar","width","filled","empty","filledBar","repeat","emptyBar","setTotal","increment","getProgress"],"mappings":"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"}