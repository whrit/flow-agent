{"version":3,"sources":["../../../src/migration/logger.ts"],"sourcesContent":["import * as process from 'node:process';\n/**\n * Migration Logger - Structured logging for migration operations\n */\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as chalk from 'chalk';\n\nexport interface LogEntry {\n  timestamp: Date;\n  level: 'info' | 'warn' | 'error' | 'success' | 'debug';\n  message: string;\n  context?: any;\n  stack?: string;\n}\n\nexport class MigrationLogger {\n  private logFile?: string;\n  private entries: LogEntry[] = [];\n\n  constructor(logFile?: string) {\n    this.logFile = logFile;\n  }\n\n  info(message: string, context?: any): void {\n    this.log('info', message, context);\n    console.log(chalk.blue(`‚ÑπÔ∏è  ${message}`));\n  }\n\n  warn(message: string, context?: any): void {\n    this.log('warn', message, context);\n    console.log(chalk.yellow(`‚ö†Ô∏è  ${message}`));\n  }\n\n  error(message: string, error?: Error | any, context?: any): void {\n    this.log('error', message, context, error?.stack);\n    console.log(chalk.red(`‚ùå ${message}`));\n    if (error && (error instanceof Error ? error.message : String(error)) !== message) {\n      console.log(chalk.red(`   ${error instanceof Error ? error.message : String(error)}`));\n    }\n  }\n\n  success(message: string, context?: any): void {\n    this.log('success', message, context);\n    console.log(chalk.green(`‚úÖ ${message}`));\n  }\n\n  debug(message: string, context?: any): void {\n    if (process.env.DEBUG === 'true' || process.env.NODE_ENV === 'development') {\n      this.log('debug', message, context);\n      console.log(chalk.gray(`üîç ${message}`));\n    }\n  }\n\n  private log(level: LogEntry['level'], message: string, context?: any, stack?: string): void {\n    const entry: LogEntry = {\n      timestamp: new Date(),\n      level,\n      message,\n      context,\n      stack,\n    };\n\n    this.entries.push(entry);\n\n    if (this.logFile) {\n      this.writeToFile(entry);\n    }\n  }\n\n  private async writeToFile(entry: LogEntry): Promise<void> {\n    if (!this.logFile) return;\n\n    try {\n      const logDir = path.dirname(this.logFile);\n      await fs.ensureDir(logDir);\n\n      const logLine = JSON.stringify(entry) + '\\n';\n      await fs.appendFile(this.logFile, logLine);\n    } catch (error) {\n      // Prevent recursive logging\n      console.error(\n        'Failed to write to log file:',\n        error instanceof Error ? error.message : String(error),\n      );\n    }\n  }\n\n  async saveToFile(filePath: string): Promise<void> {\n    await fs.ensureDir(path.dirname(filePath));\n    await fs.writeJson(filePath, this.entries, { spaces: 2 });\n  }\n\n  getEntries(): LogEntry[] {\n    return [...this.entries];\n  }\n\n  getEntriesByLevel(level: LogEntry['level']): LogEntry[] {\n    return this.entries.filter((entry) => entry.level === level);\n  }\n\n  clear(): void {\n    this.entries = [];\n  }\n\n  printSummary(): void {\n    const summary = {\n      total: this.entries.length,\n      info: this.getEntriesByLevel('info').length,\n      warn: this.getEntriesByLevel('warn').length,\n      error: this.getEntriesByLevel('error').length,\n      success: this.getEntriesByLevel('success').length,\n      debug: this.getEntriesByLevel('debug').length,\n    };\n\n    console.log(chalk.bold('\\nüìä Migration Log Summary'));\n    console.log(chalk.gray('‚îÄ'.repeat(30)));\n    console.log(`Total entries: ${summary.total}`);\n    console.log(`${chalk.blue('Info:')} ${summary.info}`);\n    console.log(`${chalk.green('Success:')} ${summary.success}`);\n    console.log(`${chalk.yellow('Warnings:')} ${summary.warn}`);\n    console.log(`${chalk.red('Errors:')} ${summary.error}`);\n    if (summary.debug > 0) {\n      console.log(`${chalk.gray('Debug:')} ${summary.debug}`);\n    }\n    console.log(chalk.gray('‚îÄ'.repeat(30)));\n  }\n}\n\n// Global logger instance\nexport const logger = new MigrationLogger();\n\n// Set log file if in production\nif (process.env.NODE_ENV === 'production') {\n  const logFile = path.join(process.cwd(), 'logs', 'migration.log');\n  logger['logFile'] = logFile;\n}\n"],"names":["process","fs","path","chalk","MigrationLogger","logFile","entries","info","message","context","log","console","blue","warn","yellow","error","stack","red","Error","String","success","green","debug","env","DEBUG","NODE_ENV","gray","level","entry","timestamp","Date","push","writeToFile","logDir","dirname","ensureDir","logLine","JSON","stringify","appendFile","saveToFile","filePath","writeJson","spaces","getEntries","getEntriesByLevel","filter","clear","printSummary","summary","total","length","bold","repeat","logger","join","cwd"],"mappings":"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"}