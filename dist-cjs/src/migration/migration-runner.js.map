{"version":3,"sources":["../../../src/migration/migration-runner.ts"],"sourcesContent":["import { dirname } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n/**\n * Migration Runner - Executes migration strategies\n */\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport type {\n  MigrationOptions,\n  MigrationResult,\n  MigrationBackup,\n  BackupFile,\n  ValidationResult,\n  MigrationProgress,\n  MigrationManifest,\n} from './types.js';\nimport { MigrationAnalyzer } from './migration-analyzer.js';\nimport { logger } from './logger.js';\nimport { ProgressReporter } from './progress-reporter.js';\nimport { MigrationValidator } from './migration-validator.js';\nimport { glob } from 'glob';\nimport * as inquirer from 'inquirer';\nimport * as chalk from 'chalk';\n\nexport class MigrationRunner {\n  private options: MigrationOptions;\n  private progress: ProgressReporter;\n  private analyzer: MigrationAnalyzer;\n  private validator: MigrationValidator;\n  private manifest: MigrationManifest;\n\n  constructor(options: MigrationOptions) {\n    this.options = options;\n    this.progress = new ProgressReporter();\n    this.analyzer = new MigrationAnalyzer();\n    this.validator = new MigrationValidator();\n    this.manifest = this.loadManifest();\n  }\n\n  async run(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      success: false,\n      filesModified: [],\n      filesCreated: [],\n      filesBackedUp: [],\n      errors: [],\n      warnings: [],\n    };\n\n    try {\n      // Analyze project\n      this.progress.start('analyzing', 'Analyzing project...');\n      const analysis = await this.analyzer.analyze(this.options.projectPath);\n\n      // Show analysis and confirm\n      if (!this.options.force && !this.options.dryRun) {\n        this.analyzer.printAnalysis(analysis);\n        const confirm = await this.confirmMigration(analysis);\n        if (!confirm) {\n          logger.info('Migration cancelled');\n          return result;\n        }\n      }\n\n      // Create backup\n      if (!this.options.dryRun && analysis.hasClaudeFolder) {\n        this.progress.update('backing-up', 'Creating backup...');\n        const backup = await this.createBackup();\n        result.rollbackPath = backup.timestamp.toISOString();\n        result.filesBackedUp = backup.files.map((f) => f.path);\n      }\n\n      // Execute migration based on strategy\n      this.progress.update('migrating', 'Migrating files...');\n\n      switch (this.options.strategy) {\n        case 'full':\n          await this.fullMigration(result);\n          break;\n        case 'selective':\n          await this.selectiveMigration(result, analysis);\n          break;\n        case 'merge':\n          await this.mergeMigration(result, analysis);\n          break;\n      }\n\n      // Validate migration\n      if (!this.options.skipValidation && !this.options.dryRun) {\n        this.progress.update('validating', 'Validating migration...');\n        const validation = await this.validator.validate(this.options.projectPath);\n\n        if (!validation.valid) {\n          result.errors.push(...validation.errors.map((e) => ({ error: e })));\n          result.warnings.push(...validation.warnings);\n        }\n      }\n\n      result.success = result.errors.length === 0;\n      this.progress.complete(\n        result.success ? 'Migration completed successfully!' : 'Migration completed with errors',\n      );\n\n      // Print summary\n      this.printSummary(result);\n    } catch (error) {\n      result.errors.push({\n        error: error instanceof Error ? error.message : String(error),\n        stack: error.stack,\n      });\n      this.progress.error('Migration failed');\n\n      // Attempt rollback on failure\n      if (result.rollbackPath && !this.options.dryRun) {\n        logger.warn('Attempting automatic rollback...');\n        try {\n          await this.rollback(result.rollbackPath);\n          logger.success('Rollback completed');\n        } catch (rollbackError) {\n          logger.error('Rollback failed:', rollbackError);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private async fullMigration(result: MigrationResult): Promise<void> {\n    const sourcePath = path.join(__dirname, '../../.claude');\n    const targetPath = path.join(this.options.projectPath, '.claude');\n\n    if (this.options.dryRun) {\n      logger.info('[DRY RUN] Would replace entire .claude folder');\n      return;\n    }\n\n    // Remove existing .claude folder\n    if (await fs.pathExists(targetPath)) {\n      await fs.remove(targetPath);\n    }\n\n    // Copy new .claude folder\n    await fs.copy(sourcePath, targetPath);\n    result.filesCreated.push('.claude');\n\n    // Copy other required files\n    await this.copyRequiredFiles(result);\n  }\n\n  private async selectiveMigration(result: MigrationResult, analysis: any): Promise<void> {\n    const sourcePath = path.join(__dirname, '../../.claude');\n    const targetPath = path.join(this.options.projectPath, '.claude');\n\n    // Ensure target directory exists\n    await fs.ensureDir(targetPath);\n\n    // Migrate commands selectively\n    const commandsSource = path.join(sourcePath, 'commands');\n    const commandsTarget = path.join(targetPath, 'commands');\n    await fs.ensureDir(commandsTarget);\n\n    // Copy optimized commands\n    for (const command of this.manifest.files.commands) {\n      const sourceFile = path.join(commandsSource, command.source);\n      const targetFile = path.join(commandsTarget, command.target);\n\n      if (\n        this.options.preserveCustom &&\n        analysis.customCommands.includes(path.basename(command.target, '.md'))\n      ) {\n        result.warnings.push(`Skipped ${command.target} (custom command preserved)`);\n        continue;\n      }\n\n      if (this.options.dryRun) {\n        logger.info(`[DRY RUN] Would copy ${command.source} to ${command.target}`);\n      } else {\n        await fs.copy(sourceFile, targetFile, { overwrite: true });\n        result.filesCreated.push(command.target);\n      }\n    }\n\n    // Copy optimization guides\n    const guides = [\n      'BATCHTOOLS_GUIDE.md',\n      'BATCHTOOLS_BEST_PRACTICES.md',\n      'MIGRATION_GUIDE.md',\n      'PERFORMANCE_BENCHMARKS.md',\n    ];\n\n    for (const guide of guides) {\n      const sourceFile = path.join(sourcePath, guide);\n      const targetFile = path.join(targetPath, guide);\n\n      if (await fs.pathExists(sourceFile)) {\n        if (this.options.dryRun) {\n          logger.info(`[DRY RUN] Would copy ${guide}`);\n        } else {\n          await fs.copy(sourceFile, targetFile, { overwrite: true });\n          result.filesCreated.push(guide);\n        }\n      }\n    }\n\n    // Update configurations\n    await this.updateConfigurations(result);\n  }\n\n  private async mergeMigration(result: MigrationResult, analysis: any): Promise<void> {\n    // Similar to selective but merges configurations\n    await this.selectiveMigration(result, analysis);\n\n    // Merge configurations\n    if (!this.options.dryRun) {\n      await this.mergeConfigurations(result, analysis);\n    }\n  }\n\n  private async mergeConfigurations(result: MigrationResult, analysis: any): Promise<void> {\n    // Merge CLAUDE.md\n    const claudeMdPath = path.join(this.options.projectPath, 'CLAUDE.md');\n    if (await fs.pathExists(claudeMdPath)) {\n      const existingContent = await fs.readFile(claudeMdPath, 'utf-8');\n      const newContent = await this.getMergedClaudeMd(existingContent);\n\n      await fs.writeFile(claudeMdPath, newContent);\n      result.filesModified.push('CLAUDE.md');\n    }\n\n    // Merge .roomodes\n    const roomodesPath = path.join(this.options.projectPath, '.roomodes');\n    if (await fs.pathExists(roomodesPath)) {\n      const existing = await fs.readJson(roomodesPath);\n      const updated = await this.getMergedRoomodes(existing);\n\n      await fs.writeJson(roomodesPath, updated, { spaces: 2 });\n      result.filesModified.push('.roomodes');\n    }\n  }\n\n  private async copyRequiredFiles(result: MigrationResult): Promise<void> {\n    const files = [\n      { source: 'CLAUDE.md', target: 'CLAUDE.md' },\n      { source: '.roomodes', target: '.roomodes' },\n    ];\n\n    for (const file of files) {\n      const sourcePath = path.join(__dirname, '../../', file.source);\n      const targetPath = path.join(this.options.projectPath, file.target);\n\n      if (await fs.pathExists(sourcePath)) {\n        if (this.options.dryRun) {\n          logger.info(`[DRY RUN] Would copy ${file.source}`);\n        } else {\n          await fs.copy(sourcePath, targetPath, { overwrite: true });\n          result.filesCreated.push(file.target);\n        }\n      }\n    }\n  }\n\n  private async updateConfigurations(result: MigrationResult): Promise<void> {\n    // Update package.json scripts if needed\n    const packageJsonPath = path.join(this.options.projectPath, 'package.json');\n    if (await fs.pathExists(packageJsonPath)) {\n      const packageJson = await fs.readJson(packageJsonPath);\n\n      if (!packageJson.scripts) {\n        packageJson.scripts = {};\n      }\n\n      const scripts = {\n        migrate: 'claude-flow migrate',\n        'migrate:analyze': 'claude-flow migrate analyze',\n        'migrate:rollback': 'claude-flow migrate rollback',\n      };\n\n      let modified = false;\n      for (const [name, command] of Object.entries(scripts)) {\n        if (!packageJson.scripts[name]) {\n          packageJson.scripts[name] = command;\n          modified = true;\n        }\n      }\n\n      if (modified && !this.options.dryRun) {\n        await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });\n        result.filesModified.push('package.json');\n      }\n    }\n  }\n\n  private async createBackup(): Promise<MigrationBackup> {\n    const backupDir = path.join(\n      this.options.projectPath,\n      this.options.backupDir || '.claude-backup',\n    );\n    const timestamp = new Date();\n    const backupPath = path.join(backupDir, timestamp.toISOString().replace(/:/g, '-'));\n\n    await fs.ensureDir(backupPath);\n\n    const backup: MigrationBackup = {\n      timestamp,\n      version: '1.0.0',\n      files: [],\n      metadata: {\n        strategy: this.options.strategy,\n        projectPath: this.options.projectPath,\n      },\n    };\n\n    // Backup .claude folder\n    const claudePath = path.join(this.options.projectPath, '.claude');\n    if (await fs.pathExists(claudePath)) {\n      await fs.copy(claudePath, path.join(backupPath, '.claude'));\n\n      // Record backed up files\n      const files = await glob('**/*', { cwd: claudePath, nodir: true });\n      for (const file of files) {\n        const content = await fs.readFile(path.join(claudePath, file), 'utf-8');\n        backup.files.push({\n          path: `.claude/${file}`,\n          content,\n          checksum: crypto.createHash('md5').update(content).digest('hex'),\n        });\n      }\n    }\n\n    // Backup other important files\n    const importantFiles = ['CLAUDE.md', '.roomodes', 'package.json'];\n    for (const file of importantFiles) {\n      const filePath = path.join(this.options.projectPath, file);\n      if (await fs.pathExists(filePath)) {\n        await fs.copy(filePath, path.join(backupPath, file));\n        const content = await fs.readFile(filePath, 'utf-8');\n        backup.files.push({\n          path: file,\n          content,\n          checksum: crypto.createHash('md5').update(content).digest('hex'),\n        });\n      }\n    }\n\n    // Save backup manifest\n    await fs.writeJson(path.join(backupPath, 'backup.json'), backup, { spaces: 2 });\n\n    logger.success(`Backup created at ${backupPath}`);\n    return backup;\n  }\n\n  async rollback(timestamp?: string): Promise<void> {\n    const backupDir = path.join(\n      this.options.projectPath,\n      this.options.backupDir || '.claude-backup',\n    );\n\n    if (!(await fs.pathExists(backupDir))) {\n      throw new Error('No backups found');\n    }\n\n    let backupPath: string;\n\n    if (timestamp) {\n      backupPath = path.join(backupDir, timestamp);\n    } else {\n      // Use most recent backup\n      const backups = await fs.readdir(backupDir);\n      if (backups.length === 0) {\n        throw new Error('No backups found');\n      }\n      backups.sort().reverse();\n      backupPath = path.join(backupDir, backups[0]);\n    }\n\n    if (!(await fs.pathExists(backupPath))) {\n      throw new Error(`Backup not found: ${backupPath}`);\n    }\n\n    logger.info(`Rolling back from ${backupPath}...`);\n\n    // Confirm rollback\n    if (!this.options.force) {\n      const confirm = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'proceed',\n          message: 'Are you sure you want to rollback? This will overwrite current files.',\n          default: false,\n        },\n      ]);\n\n      if (!confirm.proceed) {\n        logger.info('Rollback cancelled');\n        return;\n      }\n    }\n\n    // Restore files\n    const backup = await fs.readJson(path.join(backupPath, 'backup.json'));\n\n    for (const file of backup.files) {\n      const targetPath = path.join(this.options.projectPath, file.path);\n      await fs.ensureDir(path.dirname(targetPath));\n      await fs.writeFile(targetPath, file.content);\n    }\n\n    logger.success('Rollback completed successfully');\n  }\n\n  async validate(verbose: boolean = false): Promise<boolean> {\n    const validation = await this.validator.validate(this.options.projectPath);\n\n    if (verbose) {\n      this.validator.printValidation(validation);\n    }\n\n    return validation.valid;\n  }\n\n  async listBackups(): Promise<void> {\n    const backupDir = path.join(\n      this.options.projectPath,\n      this.options.backupDir || '.claude-backup',\n    );\n\n    if (!(await fs.pathExists(backupDir))) {\n      logger.info('No backups found');\n      return;\n    }\n\n    const backups = await fs.readdir(backupDir);\n    if (backups.length === 0) {\n      logger.info('No backups found');\n      return;\n    }\n\n    console.log(chalk.bold('\\n📦 Available Backups'));\n    console.log(chalk.gray('─'.repeat(50)));\n\n    for (const backup of backups.sort().reverse()) {\n      const backupPath = path.join(backupDir, backup);\n      const stats = await fs.stat(backupPath);\n      const manifest = await fs.readJson(path.join(backupPath, 'backup.json')).catch(() => null);\n\n      console.log(`\\n${chalk.bold(backup)}`);\n      console.log(`  Created: ${stats.mtime.toLocaleString()}`);\n      console.log(`  Size: ${(stats.size / 1024).toFixed(2)} KB`);\n\n      if (manifest) {\n        console.log(`  Version: ${manifest.version}`);\n        console.log(`  Strategy: ${manifest.metadata.strategy}`);\n        console.log(`  Files: ${manifest.files.length}`);\n      }\n    }\n\n    console.log(chalk.gray('\\n' + '─'.repeat(50)));\n  }\n\n  private async confirmMigration(analysis: any): Promise<boolean> {\n    const questions = [\n      {\n        type: 'confirm',\n        name: 'proceed',\n        message: `Proceed with ${this.options.strategy} migration?`,\n        default: true,\n      },\n    ];\n\n    if (analysis.customCommands.length > 0 && !this.options.preserveCustom) {\n      questions.unshift({\n        type: 'confirm',\n        name: 'preserveCustom',\n        message: `Found ${analysis.customCommands.length} custom commands. Preserve them?`,\n        default: true,\n      });\n    }\n\n    const answers = await inquirer.prompt(questions);\n\n    if (answers.preserveCustom) {\n      this.options.preserveCustom = true;\n    }\n\n    return answers.proceed;\n  }\n\n  private loadManifest(): MigrationManifest {\n    // This would normally load from a manifest file\n    return {\n      version: '1.0.0',\n      files: {\n        commands: [\n          { source: 'sparc.md', target: 'sparc.md' },\n          { source: 'sparc/architect.md', target: 'sparc-architect.md' },\n          { source: 'sparc/code.md', target: 'sparc-code.md' },\n          { source: 'sparc/tdd.md', target: 'sparc-tdd.md' },\n          { source: 'claude-flow-help.md', target: 'claude-flow-help.md' },\n          { source: 'claude-flow-memory.md', target: 'claude-flow-memory.md' },\n          { source: 'claude-flow-swarm.md', target: 'claude-flow-swarm.md' },\n        ],\n        configurations: {},\n        templates: {},\n      },\n    };\n  }\n\n  private async getMergedClaudeMd(existingContent: string): Promise<string> {\n    // Merge logic for CLAUDE.md\n    const templatePath = path.join(__dirname, '../../CLAUDE.md');\n    const templateContent = await fs.readFile(templatePath, 'utf-8');\n\n    // Simple merge: append custom content to template\n    if (!existingContent.includes('SPARC Development Environment')) {\n      return templateContent + '\\n\\n## Previous Configuration\\n\\n' + existingContent;\n    }\n\n    return templateContent;\n  }\n\n  private async getMergedRoomodes(existing: any): Promise<any> {\n    const templatePath = path.join(__dirname, '../../.roomodes');\n    const template = await fs.readJson(templatePath);\n\n    // Merge custom modes with template\n    const merged = { ...template };\n\n    for (const [mode, config] of Object.entries(existing)) {\n      if (!merged[mode]) {\n        merged[mode] = config;\n      }\n    }\n\n    return merged;\n  }\n\n  private printSummary(result: MigrationResult): void {\n    console.log(chalk.bold('\\n📋 Migration Summary'));\n    console.log(chalk.gray('─'.repeat(50)));\n\n    console.log(\n      `\\n${chalk.bold('Status:')} ${result.success ? chalk.green('Success') : chalk.red('Failed')}`,\n    );\n\n    if (result.filesCreated.length > 0) {\n      console.log(`\\n${chalk.bold('Files Created:')} ${chalk.green(result.filesCreated.length)}`);\n      if (result.filesCreated.length <= 10) {\n        result.filesCreated.forEach((file) => console.log(`  • ${file}`));\n      }\n    }\n\n    if (result.filesModified.length > 0) {\n      console.log(\n        `\\n${chalk.bold('Files Modified:')} ${chalk.yellow(result.filesModified.length)}`,\n      );\n      result.filesModified.forEach((file) => console.log(`  • ${file}`));\n    }\n\n    if (result.filesBackedUp.length > 0) {\n      console.log(`\\n${chalk.bold('Files Backed Up:')} ${chalk.blue(result.filesBackedUp.length)}`);\n    }\n\n    if (result.warnings.length > 0) {\n      console.log(`\\n${chalk.bold('Warnings:')}`);\n      result.warnings.forEach((warning) => console.log(`  ⚠️  ${warning}`));\n    }\n\n    if (result.errors.length > 0) {\n      console.log(`\\n${chalk.bold('Errors:')}`);\n      result.errors.forEach((error) => console.log(`  ❌ ${error.error}`));\n    }\n\n    if (result.rollbackPath) {\n      console.log(`\\n${chalk.bold('Rollback Available:')} ${result.rollbackPath}`);\n      console.log(\n        chalk.gray(`  Run \"claude-flow migrate rollback -t ${result.rollbackPath}\" to revert`),\n      );\n    }\n\n    console.log(chalk.gray('\\n' + '─'.repeat(50)));\n  }\n}\n"],"names":["dirname","fileURLToPath","__dirname","url","fs","path","crypto","MigrationAnalyzer","logger","ProgressReporter","MigrationValidator","glob","inquirer","chalk","MigrationRunner","options","progress","analyzer","validator","manifest","loadManifest","run","result","success","filesModified","filesCreated","filesBackedUp","errors","warnings","start","analysis","analyze","projectPath","force","dryRun","printAnalysis","confirm","confirmMigration","info","hasClaudeFolder","update","backup","createBackup","rollbackPath","timestamp","toISOString","files","map","f","strategy","fullMigration","selectiveMigration","mergeMigration","skipValidation","validation","validate","valid","push","e","error","length","complete","printSummary","Error","message","String","stack","warn","rollback","rollbackError","sourcePath","join","targetPath","pathExists","remove","copy","copyRequiredFiles","ensureDir","commandsSource","commandsTarget","command","commands","sourceFile","source","targetFile","target","preserveCustom","customCommands","includes","basename","overwrite","guides","guide","updateConfigurations","mergeConfigurations","claudeMdPath","existingContent","readFile","newContent","getMergedClaudeMd","writeFile","roomodesPath","existing","readJson","updated","getMergedRoomodes","writeJson","spaces","file","packageJsonPath","packageJson","scripts","migrate","modified","name","Object","entries","backupDir","Date","backupPath","replace","version","metadata","claudePath","cwd","nodir","content","checksum","createHash","digest","importantFiles","filePath","backups","readdir","sort","reverse","prompt","type","default","proceed","verbose","printValidation","listBackups","console","log","bold","gray","repeat","stats","stat","catch","mtime","toLocaleString","size","toFixed","questions","unshift","answers","configurations","templates","templatePath","templateContent","template","merged","mode","config","green","red","forEach","yellow","blue","warning"],"mappings":"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"}