{"version":3,"sources":["../../../src/migration/migration-analyzer.ts"],"sourcesContent":["/**\n * Migration Analyzer - Analyzes existing projects for migration readiness\n */\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport type { MigrationAnalysis, MigrationRisk } from './types.js';\nimport { logger } from './logger.js';\nimport * as chalk from 'chalk';\nimport { glob } from 'glob';\n\nexport class MigrationAnalyzer {\n  private optimizedCommands = [\n    'sparc',\n    'sparc-architect',\n    'sparc-code',\n    'sparc-tdd',\n    'claude-flow-help',\n    'claude-flow-memory',\n    'claude-flow-swarm',\n  ];\n\n  async analyze(projectPath: string): Promise<MigrationAnalysis> {\n    logger.info(`Analyzing project at ${projectPath}...`);\n\n    const analysis: MigrationAnalysis = {\n      projectPath,\n      hasClaudeFolder: false,\n      hasOptimizedPrompts: false,\n      customCommands: [],\n      customConfigurations: {},\n      conflictingFiles: [],\n      migrationRisks: [],\n      recommendations: [],\n      timestamp: new Date(),\n    };\n\n    // Check for .claude folder\n    const claudePath = path.join(projectPath, '.claude');\n    if (await fs.pathExists(claudePath)) {\n      analysis.hasClaudeFolder = true;\n\n      // Analyze existing commands\n      await this.analyzeCommands(claudePath, analysis);\n\n      // Check for optimized prompts\n      await this.checkOptimizedPrompts(claudePath, analysis);\n\n      // Analyze configurations\n      await this.analyzeConfigurations(projectPath, analysis);\n\n      // Detect conflicts\n      await this.detectConflicts(projectPath, analysis);\n    }\n\n    // Generate risks and recommendations\n    this.assessRisks(analysis);\n    this.generateRecommendations(analysis);\n\n    return analysis;\n  }\n\n  private async analyzeCommands(claudePath: string, analysis: MigrationAnalysis): Promise<void> {\n    const commandsPath = path.join(claudePath, 'commands');\n\n    if (await fs.pathExists(commandsPath)) {\n      const files = await glob('**/*.md', { cwd: commandsPath });\n\n      for (const file of files) {\n        const commandName = path.basename(file, '.md');\n\n        if (!this.optimizedCommands.includes(commandName)) {\n          analysis.customCommands.push(commandName);\n        }\n      }\n    }\n  }\n\n  private async checkOptimizedPrompts(\n    claudePath: string,\n    analysis: MigrationAnalysis,\n  ): Promise<void> {\n    // Check for key optimized prompt files\n    const optimizedFiles = [\n      'BATCHTOOLS_GUIDE.md',\n      'BATCHTOOLS_BEST_PRACTICES.md',\n      'MIGRATION_GUIDE.md',\n      'PERFORMANCE_BENCHMARKS.md',\n    ];\n\n    let hasOptimized = 0;\n    for (const file of optimizedFiles) {\n      if (await fs.pathExists(path.join(claudePath, file))) {\n        hasOptimized++;\n      }\n    }\n\n    analysis.hasOptimizedPrompts = hasOptimized >= 2;\n  }\n\n  private async analyzeConfigurations(\n    projectPath: string,\n    analysis: MigrationAnalysis,\n  ): Promise<void> {\n    // Check for CLAUDE.md\n    const claudeMdPath = path.join(projectPath, 'CLAUDE.md');\n    if (await fs.pathExists(claudeMdPath)) {\n      const content = await fs.readFile(claudeMdPath, 'utf-8');\n      analysis.customConfigurations['CLAUDE.md'] = {\n        exists: true,\n        size: content.length,\n        hasCustomContent: !content.includes('SPARC Development Environment'),\n      };\n    }\n\n    // Check for .roomodes\n    const roomodesPath = path.join(projectPath, '.roomodes');\n    if (await fs.pathExists(roomodesPath)) {\n      try {\n        const roomodes = await fs.readJson(roomodesPath);\n        analysis.customConfigurations['.roomodes'] = {\n          exists: true,\n          modeCount: Object.keys(roomodes).length,\n          customModes: Object.keys(roomodes).filter(\n            (mode) => !['architect', 'code', 'tdd', 'debug', 'docs-writer'].includes(mode),\n          ),\n        };\n      } catch (error) {\n        analysis.migrationRisks.push({\n          level: 'medium',\n          description: 'Invalid .roomodes file',\n          file: roomodesPath,\n          mitigation: 'File will be backed up and replaced',\n        });\n      }\n    }\n  }\n\n  private async detectConflicts(projectPath: string, analysis: MigrationAnalysis): Promise<void> {\n    // Check for files that might conflict with migration\n    const potentialConflicts = [\n      '.claude/commands/sparc.md',\n      '.claude/BATCHTOOLS_GUIDE.md',\n      'memory/memory-store.json',\n      'coordination/config.json',\n    ];\n\n    for (const file of potentialConflicts) {\n      const filePath = path.join(projectPath, file);\n      if (await fs.pathExists(filePath)) {\n        const content = await fs.readFile(filePath, 'utf-8');\n        const checksum = crypto.createHash('md5').update(content).digest('hex');\n\n        // Check if it's a custom version\n        if (!this.isStandardFile(file, checksum)) {\n          analysis.conflictingFiles.push(file);\n        }\n      }\n    }\n  }\n\n  private isStandardFile(file: string, checksum: string): boolean {\n    // This would contain checksums of standard files\n    // For now, we'll assume all existing files are potentially custom\n    return false;\n  }\n\n  private assessRisks(analysis: MigrationAnalysis): void {\n    // High risk: Custom commands that might be overwritten\n    if (analysis.customCommands.length > 0) {\n      analysis.migrationRisks.push({\n        level: 'high',\n        description: `Found ${analysis.customCommands.length} custom commands that may be affected`,\n        mitigation: 'Use --preserve-custom flag or selective migration',\n      });\n    }\n\n    // Medium risk: Existing optimized prompts\n    if (analysis.hasOptimizedPrompts) {\n      analysis.migrationRisks.push({\n        level: 'medium',\n        description: 'Project already has some optimized prompts',\n        mitigation: 'Consider using merge strategy to preserve customizations',\n      });\n    }\n\n    // Low risk: No .claude folder\n    if (!analysis.hasClaudeFolder) {\n      analysis.migrationRisks.push({\n        level: 'low',\n        description: 'No existing .claude folder found',\n        mitigation: 'Fresh installation will be performed',\n      });\n    }\n\n    // High risk: Conflicting files\n    if (analysis.conflictingFiles.length > 0) {\n      analysis.migrationRisks.push({\n        level: 'high',\n        description: `${analysis.conflictingFiles.length} files may have custom modifications`,\n        mitigation: 'Files will be backed up before migration',\n      });\n    }\n  }\n\n  private generateRecommendations(analysis: MigrationAnalysis): void {\n    // Strategy recommendations\n    if (analysis.customCommands.length > 0 || analysis.conflictingFiles.length > 0) {\n      analysis.recommendations.push(\n        'Use \"selective\" or \"merge\" strategy to preserve customizations',\n      );\n    } else if (!analysis.hasClaudeFolder) {\n      analysis.recommendations.push('Use \"full\" strategy for clean installation');\n    }\n\n    // Backup recommendations\n    if (analysis.hasClaudeFolder) {\n      analysis.recommendations.push(\n        'Create a backup before migration (automatic with default settings)',\n      );\n    }\n\n    // Custom command recommendations\n    if (analysis.customCommands.length > 0) {\n      analysis.recommendations.push(\n        `Review custom commands: ${analysis.customCommands.join(', ')}`,\n      );\n    }\n\n    // Validation recommendations\n    if (analysis.migrationRisks.some((r) => r.level === 'high')) {\n      analysis.recommendations.push('Run with --dry-run first to preview changes');\n    }\n  }\n\n  printAnalysis(analysis: MigrationAnalysis, detailed: boolean = false): void {\n    console.log(chalk.bold('\\n📊 Migration Analysis Report'));\n    console.log(chalk.gray('─'.repeat(50)));\n\n    console.log(`\\n${chalk.bold('Project:')} ${analysis.projectPath}`);\n    console.log(`${chalk.bold('Timestamp:')} ${analysis.timestamp.toISOString()}`);\n\n    // Status\n    console.log(chalk.bold('\\n📋 Current Status:'));\n    console.log(\n      `  • .claude folder: ${analysis.hasClaudeFolder ? chalk.green('✓') : chalk.red('✗')}`,\n    );\n    console.log(\n      `  • Optimized prompts: ${analysis.hasOptimizedPrompts ? chalk.green('✓') : chalk.red('✗')}`,\n    );\n    console.log(\n      `  • Custom commands: ${analysis.customCommands.length > 0 ? chalk.yellow(analysis.customCommands.length) : chalk.green('0')}`,\n    );\n    console.log(\n      `  • Conflicts: ${analysis.conflictingFiles.length > 0 ? chalk.yellow(analysis.conflictingFiles.length) : chalk.green('0')}`,\n    );\n\n    // Risks\n    if (analysis.migrationRisks.length > 0) {\n      console.log(chalk.bold('\\n⚠️  Migration Risks:'));\n      analysis.migrationRisks.forEach((risk) => {\n        const icon = risk.level === 'high' ? '🔴' : risk.level === 'medium' ? '🟡' : '🟢';\n        console.log(`  ${icon} ${chalk.bold(risk.level.toUpperCase())}: ${risk.description}`);\n        if (risk.mitigation) {\n          console.log(`     ${chalk.gray('→')} ${chalk.italic(risk.mitigation)}`);\n        }\n      });\n    }\n\n    // Recommendations\n    if (analysis.recommendations.length > 0) {\n      console.log(chalk.bold('\\n💡 Recommendations:'));\n      analysis.recommendations.forEach((rec) => {\n        console.log(`  • ${rec}`);\n      });\n    }\n\n    // Detailed information\n    if (detailed) {\n      if (analysis.customCommands.length > 0) {\n        console.log(chalk.bold('\\n🔧 Custom Commands:'));\n        analysis.customCommands.forEach((cmd) => {\n          console.log(`  • ${cmd}`);\n        });\n      }\n\n      if (analysis.conflictingFiles.length > 0) {\n        console.log(chalk.bold('\\n📁 Conflicting Files:'));\n        analysis.conflictingFiles.forEach((file) => {\n          console.log(`  • ${file}`);\n        });\n      }\n\n      if (Object.keys(analysis.customConfigurations).length > 0) {\n        console.log(chalk.bold('\\n⚙️  Configurations:'));\n        Object.entries(analysis.customConfigurations).forEach(([file, config]) => {\n          console.log(`  • ${file}: ${JSON.stringify(config, null, 2)}`);\n        });\n      }\n    }\n\n    console.log(chalk.gray('\\n' + '─'.repeat(50)));\n  }\n\n  async saveAnalysis(analysis: MigrationAnalysis, outputPath: string): Promise<void> {\n    await fs.writeJson(outputPath, analysis, { spaces: 2 });\n  }\n}\n"],"names":["fs","path","crypto","logger","chalk","glob","MigrationAnalyzer","optimizedCommands","analyze","projectPath","info","analysis","hasClaudeFolder","hasOptimizedPrompts","customCommands","customConfigurations","conflictingFiles","migrationRisks","recommendations","timestamp","Date","claudePath","join","pathExists","analyzeCommands","checkOptimizedPrompts","analyzeConfigurations","detectConflicts","assessRisks","generateRecommendations","commandsPath","files","cwd","file","commandName","basename","includes","push","optimizedFiles","hasOptimized","claudeMdPath","content","readFile","exists","size","length","hasCustomContent","roomodesPath","roomodes","readJson","modeCount","Object","keys","customModes","filter","mode","error","level","description","mitigation","potentialConflicts","filePath","checksum","createHash","update","digest","isStandardFile","some","r","printAnalysis","detailed","console","log","bold","gray","repeat","toISOString","green","red","yellow","forEach","risk","icon","toUpperCase","italic","rec","cmd","entries","config","JSON","stringify","saveAnalysis","outputPath","writeJson","spaces"],"mappings":"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"}