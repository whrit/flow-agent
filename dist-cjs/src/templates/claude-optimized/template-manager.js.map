{"version":3,"sources":["../../../../src/templates/claude-optimized/template-manager.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n/**\n * Claude Optimized Template Manager\n * Unified interface for template operations\n */\n\nconst commands = {\n  install: () => execSync('node install-template.js', { stdio: 'inherit' }),\n  validate: () => execSync('node validate-template.js', { stdio: 'inherit' }),\n  deploy: (targetPath) => {\n    if (!targetPath) {\n      console.error('Usage: template-manager deploy <target-project-path>');\n      process.exit(1);\n    }\n    execSync(`node deploy-to-project.js \"${targetPath}\"`, { stdio: 'inherit' });\n  },\n  info: () => {\n    const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));\n    const version = fs.readFileSync('VERSION', 'utf8').trim();\n\n    console.log('Claude Optimized Template');\n    console.log('========================');\n    console.log(`Version: ${version}`);\n    console.log(`Files: ${manifest.files.length}`);\n    console.log(`Categories: ${Object.keys(manifest.categories).join(', ')}`);\n    console.log('\\nFile breakdown:');\n    for (const [category, info] of Object.entries(manifest.categories)) {\n      const count = manifest.files.filter((f) => f.category === category).length;\n      console.log(`  ${category}: ${count} files`);\n    }\n\n    console.log('\\nAvailable commands:');\n    console.log('  install  - Install template files from source');\n    console.log('  validate - Validate template installation');\n    console.log('  deploy   - Deploy template to project');\n    console.log('  info     - Show template information');\n    console.log('  update   - Update template version');\n    console.log('  test     - Run test suite');\n  },\n  update: () => {\n    console.log('Updating template...');\n\n    // Run install to get latest files\n    console.log('1. Refreshing template files...');\n    execSync('node install-template.js', { stdio: 'inherit' });\n\n    // Validate\n    console.log('2. Validating installation...');\n    execSync('node validate-template.js', { stdio: 'inherit' });\n\n    console.log('3. Template updated successfully!');\n  },\n  test: () => {\n    console.log('Running template test suite...');\n    if (fs.existsSync('.claude/tests/test-harness.js')) {\n      execSync('cd .claude && node tests/test-harness.js', { stdio: 'inherit' });\n    } else {\n      console.log('Test harness not found. Run \"install\" first.');\n    }\n  },\n};\n\n// Main execution\nconst args = process.argv.slice(2);\nif (args.length === 0) {\n  console.log('Claude Optimized Template Manager');\n  console.log('Usage: node template-manager.js <command> [args]');\n  console.log('\\nCommands:');\n  console.log('  install  - Install template files from source');\n  console.log('  validate - Validate template installation');\n  console.log('  deploy   - Deploy template to project');\n  console.log('  info     - Show template information');\n  console.log('  update   - Update template version');\n  console.log('  test     - Run test suite');\n  process.exit(0);\n}\n\nconst command = args[0];\nif (commands[command]) {\n  try {\n    commands[command](...args.slice(1));\n  } catch (error) {\n    console.error(`Error executing ${command}:`, error.message);\n    process.exit(1);\n  }\n} else {\n  console.error(`Unknown command: ${command}`);\n  console.log('Available commands: ' + Object.keys(commands).join(', '));\n  process.exit(1);\n}\n"],"names":["fs","require","path","execSync","commands","install","stdio","validate","deploy","targetPath","console","error","process","exit","info","manifest","JSON","parse","readFileSync","version","trim","log","files","length","Object","keys","categories","join","category","entries","count","filter","f","update","test","existsSync","args","argv","slice","command","message"],"mappings":"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"}