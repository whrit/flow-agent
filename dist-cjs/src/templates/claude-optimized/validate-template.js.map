{"version":3,"sources":["../../../../src/templates/claude-optimized/validate-template.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Validate Claude optimized template installation\n * This script verifies that all required files are present and properly formatted\n */\n\nconst TEMPLATE_DIR = path.join(__dirname, '.claude');\nconst MANIFEST_PATH = path.join(__dirname, 'manifest.json');\n\n// Colors for console output\nconst colors = {\n  green: '\\x1b[32m',\n  red: '\\x1b[31m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  reset: '\\x1b[0m',\n};\n\nfunction log(message, color = 'reset') {\n  console.log(colors[color] + message + colors.reset);\n}\n\n// Read manifest\nlet manifest;\ntry {\n  manifest = JSON.parse(fs.readFileSync(MANIFEST_PATH, 'utf8'));\n  log('✓ Manifest loaded successfully', 'green');\n} catch (error) {\n  log('✗ Failed to load manifest: ' + error.message, 'red');\n  process.exit(1);\n}\n\nlet totalTests = 0;\nlet passedTests = 0;\n\nfunction test(description, condition) {\n  totalTests++;\n  if (condition) {\n    log(`  ✓ ${description}`, 'green');\n    passedTests++;\n  } else {\n    log(`  ✗ ${description}`, 'red');\n  }\n}\n\n// Test 1: Template directory exists\nlog('\\n1. Checking template directory...', 'blue');\ntest('Template directory exists', fs.existsSync(TEMPLATE_DIR));\n\n// Test 2: Directory structure\nlog('\\n2. Validating directory structure...', 'blue');\nfor (const [dirName, dirInfo] of Object.entries(manifest.directories)) {\n  const dirPath = path.join(TEMPLATE_DIR, dirInfo.path);\n  test(`Directory ${dirInfo.path} exists`, fs.existsSync(dirPath));\n}\n\n// Test 3: File presence\nlog('\\n3. Checking file presence...', 'blue');\nfor (const file of manifest.files) {\n  const filePath = path.join(TEMPLATE_DIR, file.destination);\n  test(`File ${file.destination} exists`, fs.existsSync(filePath));\n}\n\n// Test 4: File content validation\nlog('\\n4. Validating file content...', 'blue');\nconst sampleFiles = ['commands/sparc.md', 'commands/sparc/architect.md', 'BATCHTOOLS_GUIDE.md'];\n\nfor (const fileName of sampleFiles) {\n  const filePath = path.join(TEMPLATE_DIR, fileName);\n  if (fs.existsSync(filePath)) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    test(`${fileName} has content`, content.length > 100);\n    test(`${fileName} contains frontmatter`, content.startsWith('---'));\n  }\n}\n\n// Test 5: Command structure validation\nlog('\\n5. Validating command structure...', 'blue');\nconst sparcCommands = manifest.files.filter((f) => f.category === 'sparc-mode');\nfor (const cmd of sparcCommands.slice(0, 3)) {\n  // Test first 3 commands\n  const filePath = path.join(TEMPLATE_DIR, cmd.destination);\n  if (fs.existsSync(filePath)) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    test(\n      `${cmd.destination} has proper structure`,\n      content.includes('## Instructions') || content.includes('You are'),\n    );\n  }\n}\n\n// Test 6: Test files validation\nlog('\\n6. Validating test files...', 'blue');\nconst testFiles = manifest.files.filter((f) => f.category === 'test');\nfor (const testFile of testFiles.slice(0, 3)) {\n  // Test first 3 test files\n  const filePath = path.join(TEMPLATE_DIR, testFile.destination);\n  if (fs.existsSync(filePath)) {\n    const content = fs.readFileSync(filePath, 'utf8');\n    test(\n      `${testFile.destination} has test structure`,\n      content.includes('describe') || content.includes('test') || content.includes('it'),\n    );\n  }\n}\n\n// Test 7: Version consistency\nlog('\\n7. Checking version consistency...', 'blue');\nconst versionFile = path.join(__dirname, 'VERSION');\nif (fs.existsSync(versionFile)) {\n  const fileVersion = fs.readFileSync(versionFile, 'utf8').trim();\n  test('Version file matches manifest', fileVersion === manifest.version);\n}\n\n// Test 8: File counts\nlog('\\n8. Validating file counts...', 'blue');\nfor (const [category, info] of Object.entries(manifest.categories)) {\n  const actualCount = manifest.files.filter((f) => f.category === category).length;\n  // Allow some flexibility in counts as they might have been updated\n  const countMatches = Math.abs(actualCount - info.count) <= 2;\n  test(\n    `${category} file count approximately correct (${actualCount} vs ${info.count})`,\n    countMatches,\n  );\n}\n\n// Test 9: Installation timestamp\nlog('\\n9. Checking installation status...', 'blue');\nconst installFile = path.join(__dirname, '.installed');\ntest('Installation timestamp exists', fs.existsSync(installFile));\n\n// Final summary\nlog('\\n' + '='.repeat(60), 'blue');\nlog('Validation Summary:', 'blue');\nlog(`  Total tests: ${totalTests}`);\nlog(`  Passed: ${passedTests}`, passedTests === totalTests ? 'green' : 'yellow');\nlog(`  Failed: ${totalTests - passedTests}`, totalTests - passedTests === 0 ? 'green' : 'red');\n\nconst percentage = Math.round((passedTests / totalTests) * 100);\nlog(\n  `  Success rate: ${percentage}%`,\n  percentage >= 90 ? 'green' : percentage >= 70 ? 'yellow' : 'red',\n);\n\nif (passedTests === totalTests) {\n  log('\\n🎉 Template validation passed! All files are properly installed.', 'green');\n} else if (percentage >= 90) {\n  log('\\n⚠️  Template validation mostly passed with minor issues.', 'yellow');\n} else {\n  log('\\n❌ Template validation failed. Please check the issues above.', 'red');\n}\n\n// Additional information\nlog('\\nTemplate Information:', 'blue');\nlog(`  Version: ${manifest.version}`);\nlog(`  Total files: ${manifest.files.length}`);\nlog(\n  `  Documentation files: ${manifest.files.filter((f) => f.category === 'documentation').length}`,\n);\nlog(`  Command files: ${manifest.files.filter((f) => f.category === 'command').length}`);\nlog(`  SPARC mode files: ${manifest.files.filter((f) => f.category === 'sparc-mode').length}`);\nlog(`  Test files: ${manifest.files.filter((f) => f.category === 'test').length}`);\n\nprocess.exit(passedTests === totalTests ? 0 : 1);\n"],"names":["fs","require","path","TEMPLATE_DIR","join","__dirname","MANIFEST_PATH","colors","green","red","yellow","blue","reset","log","message","color","console","manifest","JSON","parse","readFileSync","error","process","exit","totalTests","passedTests","test","description","condition","existsSync","dirName","dirInfo","Object","entries","directories","dirPath","file","files","filePath","destination","sampleFiles","fileName","content","length","startsWith","sparcCommands","filter","f","category","cmd","slice","includes","testFiles","testFile","versionFile","fileVersion","trim","version","info","categories","actualCount","countMatches","Math","abs","count","installFile","repeat","percentage","round"],"mappings":"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"}