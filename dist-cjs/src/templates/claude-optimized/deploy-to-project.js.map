{"version":3,"sources":["../../../../src/templates/claude-optimized/deploy-to-project.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Deploy Claude optimized template to a target project\n * Usage: node deploy-to-project.js <target-project-path>\n */\n\nconst args = process.argv.slice(2);\nif (args.length === 0) {\n  console.error('Usage: node deploy-to-project.js <target-project-path>');\n  console.error('Example: node deploy-to-project.js /path/to/my-project');\n  process.exit(1);\n}\n\nconst TARGET_PROJECT = args[0];\nconst SOURCE_DIR = path.join(__dirname, '.claude');\nconst TARGET_DIR = path.join(TARGET_PROJECT, '.claude');\nconst MANIFEST_PATH = path.join(__dirname, 'manifest.json');\n\nconsole.log('Claude Optimized Template Deployment');\nconsole.log('====================================');\nconsole.log(`Source: ${SOURCE_DIR}`);\nconsole.log(`Target: ${TARGET_DIR}`);\n\n// Validate target project\nif (!fs.existsSync(TARGET_PROJECT)) {\n  console.error(`Error: Target project directory does not exist: ${TARGET_PROJECT}`);\n  process.exit(1);\n}\n\n// Check if it's a valid project (has package.json or similar)\nconst projectFiles = [\n  'package.json',\n  'tsconfig.json',\n  'deno.json',\n  'go.mod',\n  'Cargo.toml',\n  'setup.py',\n];\nconst hasProjectFile = projectFiles.some((file) => fs.existsSync(path.join(TARGET_PROJECT, file)));\n\nif (!hasProjectFile) {\n  console.warn(\n    'Warning: Target directory does not appear to be a project root (no package.json, etc.)',\n  );\n  console.log('Continue anyway? (y/n)');\n  // For automation, we'll continue\n}\n\n// Read manifest\nconst manifest = JSON.parse(fs.readFileSync(MANIFEST_PATH, 'utf8'));\n\n// Create target .claude directory\nif (!fs.existsSync(TARGET_DIR)) {\n  fs.mkdirSync(TARGET_DIR, { recursive: true });\n  console.log('‚úì Created .claude directory');\n} else {\n  console.log('‚ö†Ô∏è  .claude directory already exists - files will be overwritten');\n}\n\n// Create directory structure\nconsole.log('\\nCreating directory structure...');\nfor (const [dirName, dirInfo] of Object.entries(manifest.directories)) {\n  const targetPath = path.join(TARGET_DIR, dirInfo.path);\n  if (!fs.existsSync(targetPath)) {\n    fs.mkdirSync(targetPath, { recursive: true });\n    console.log(`  ‚úì ${dirInfo.path}`);\n  }\n\n  // Create README for empty directories\n  if (dirInfo.createEmpty) {\n    const readmePath = path.join(targetPath, 'README.md');\n    if (!fs.existsSync(readmePath)) {\n      fs.writeFileSync(\n        readmePath,\n        `# ${dirName}\\n\\nThis directory will be populated during usage.\\n`,\n      );\n    }\n  }\n}\n\n// Copy files\nconsole.log('\\nDeploying template files...');\nlet successCount = 0;\nlet errorCount = 0;\n\nfor (const file of manifest.files) {\n  const sourcePath = path.join(SOURCE_DIR, file.destination);\n  const targetPath = path.join(TARGET_DIR, file.destination);\n\n  try {\n    if (fs.existsSync(sourcePath)) {\n      // Ensure target directory exists\n      const targetDir = path.dirname(targetPath);\n      if (!fs.existsSync(targetDir)) {\n        fs.mkdirSync(targetDir, { recursive: true });\n      }\n\n      // Copy file\n      fs.copyFileSync(sourcePath, targetPath);\n      console.log(`  ‚úì ${file.destination}`);\n      successCount++;\n    } else {\n      console.error(`  ‚úó ${file.destination} - Source file not found`);\n      errorCount++;\n    }\n  } catch (error) {\n    console.error(`  ‚úó ${file.destination} - Error: ${error.message}`);\n    errorCount++;\n  }\n}\n\n// Create deployment info\nconst deploymentInfo = {\n  deployed: new Date().toISOString(),\n  version: manifest.version,\n  targetProject: TARGET_PROJECT,\n  filesDeployed: successCount,\n  errors: errorCount,\n};\n\nfs.writeFileSync(\n  path.join(TARGET_DIR, '.deployment-info.json'),\n  JSON.stringify(deploymentInfo, null, 2),\n);\n\n// Summary\nconsole.log('\\n' + '='.repeat(50));\nconsole.log('Deployment Summary:');\nconsole.log(`  Files deployed: ${successCount}`);\nconsole.log(`  Errors: ${errorCount}`);\nconsole.log(`  Target project: ${TARGET_PROJECT}`);\nconsole.log(`  Template version: ${manifest.version}`);\n\nif (errorCount === 0) {\n  console.log('\\nüéâ Template deployed successfully!');\n  console.log('\\nNext steps:');\n  console.log('1. Open Claude Code in your project');\n  console.log('2. Type / to see available commands');\n  console.log('3. Use /sparc for SPARC methodology');\n  console.log('4. Use /claude-flow-* for Claude Flow features');\n  console.log('\\nFor help, see the documentation files in .claude/');\n} else {\n  console.log('\\n‚ö†Ô∏è  Template deployed with errors. Please check the messages above.');\n}\n"],"names":["fs","require","path","args","process","argv","slice","length","console","error","exit","TARGET_PROJECT","SOURCE_DIR","join","__dirname","TARGET_DIR","MANIFEST_PATH","log","existsSync","projectFiles","hasProjectFile","some","file","warn","manifest","JSON","parse","readFileSync","mkdirSync","recursive","dirName","dirInfo","Object","entries","directories","targetPath","createEmpty","readmePath","writeFileSync","successCount","errorCount","files","sourcePath","destination","targetDir","dirname","copyFileSync","message","deploymentInfo","deployed","Date","toISOString","version","targetProject","filesDeployed","errors","stringify","repeat"],"mappings":"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"}