{"version":3,"sources":["../../../src/mcp/tool-registry.ts"],"sourcesContent":["/**\n * Tool Registry for In-Process MCP Server\n *\n * Registers all 50+ Claude-Flow MCP tools for in-process execution.\n * Provides tool discovery, validation, and routing.\n */\n\nimport { createInProcessServer, InProcessMCPServer } from './in-process-server.js';\nimport { createClaudeFlowTools } from './claude-flow-tools.js';\nimport { logger } from '../core/logger.js';\nimport type { MCPTool } from '../utils/types.js';\nimport type { McpSdkServerConfigWithInstance } from '@anthropic-ai/claude-code/sdk.d.ts';\n\n// Import SDK tool creation function\nimport { tool, createSdkMcpServer } from '@anthropic-ai/claude-code/sdk';\nimport { z } from 'zod';\n\nexport interface ToolRegistryConfig {\n  enableInProcess: boolean;\n  enableMetrics: boolean;\n  enableCaching: boolean;\n  orchestratorContext?: any;\n}\n\n/**\n * Global tool registry for managing all MCP tools\n */\nexport class ClaudeFlowToolRegistry {\n  private inProcessServer?: InProcessMCPServer;\n  private sdkServer?: McpSdkServerConfigWithInstance;\n  private tools: Map<string, MCPTool>;\n  private config: ToolRegistryConfig;\n\n  constructor(config: ToolRegistryConfig) {\n    this.config = config;\n    this.tools = new Map();\n\n    logger.info('ClaudeFlowToolRegistry initialized', {\n      enableInProcess: config.enableInProcess,\n      enableMetrics: config.enableMetrics,\n    });\n  }\n\n  /**\n   * Initialize the tool registry with all Claude-Flow tools\n   */\n  async initialize(): Promise<void> {\n    logger.info('Loading Claude-Flow tools...');\n\n    // Load all tools from claude-flow-tools.ts\n    const claudeFlowTools = await createClaudeFlowTools(logger);\n\n    // Register each tool\n    for (const tool of claudeFlowTools) {\n      this.tools.set(tool.name, tool);\n    }\n\n    logger.info(`Loaded ${this.tools.size} Claude-Flow tools`);\n\n    // Create in-process server if enabled\n    if (this.config.enableInProcess) {\n      await this.createInProcessServer();\n    }\n  }\n\n  /**\n   * Create SDK-compatible in-process server\n   */\n  private async createInProcessServer(): Promise<void> {\n    logger.info('Creating in-process MCP server...');\n\n    // Create in-process server\n    this.inProcessServer = createInProcessServer({\n      name: 'claude-flow',\n      version: '2.0.0',\n      enableMetrics: this.config.enableMetrics,\n      enableCaching: this.config.enableCaching,\n    });\n\n    // Register all tools\n    for (const [name, tool] of this.tools) {\n      this.inProcessServer.registerTool(tool);\n    }\n\n    // Set orchestrator context if provided\n    if (this.config.orchestratorContext) {\n      this.inProcessServer.setContext({\n        orchestrator: this.config.orchestratorContext,\n        sessionId: 'in-process-session',\n      });\n    }\n\n    // Create SDK MCP server for integration\n    await this.createSdkServer();\n\n    logger.info('In-process MCP server created', {\n      toolCount: this.inProcessServer.getToolNames().length,\n    });\n  }\n\n  /**\n   * Create SDK-compatible MCP server using SDK's createSdkMcpServer\n   */\n  private async createSdkServer(): Promise<void> {\n    if (!this.inProcessServer) {\n      throw new Error('In-process server not initialized');\n    }\n\n    // Convert Claude-Flow tools to SDK tool format\n    const sdkTools = Array.from(this.tools.values()).map(tool => {\n      return this.convertToSdkTool(tool);\n    });\n\n    // Create SDK MCP server\n    this.sdkServer = createSdkMcpServer({\n      name: 'claude-flow',\n      version: '2.0.0',\n      tools: sdkTools,\n    });\n\n    logger.info('SDK MCP server created', { toolCount: sdkTools.length });\n  }\n\n  /**\n   * Convert Claude-Flow tool to SDK tool format\n   */\n  private convertToSdkTool(mcpTool: MCPTool): any {\n    // Convert JSON Schema to Zod schema\n    const zodSchema = this.jsonSchemaToZod(mcpTool.inputSchema);\n\n    // Create SDK tool using the 'tool' helper\n    return tool(\n      mcpTool.name,\n      mcpTool.description,\n      zodSchema,\n      async (args: any, extra: unknown) => {\n        // Execute via in-process server\n        if (this.inProcessServer) {\n          return await this.inProcessServer.callTool(mcpTool.name, args);\n        }\n\n        // Fallback to direct execution\n        const result = await mcpTool.handler(args, {\n          orchestrator: this.config.orchestratorContext,\n          sessionId: 'sdk-session',\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: typeof result === 'string' ? result : JSON.stringify(result, null, 2),\n            },\n          ],\n          isError: false,\n        };\n      }\n    );\n  }\n\n  /**\n   * Convert JSON Schema to Zod schema (simplified)\n   */\n  private jsonSchemaToZod(schema: any): any {\n    const zodSchema: any = {};\n\n    if (!schema.properties) {\n      return {};\n    }\n\n    for (const [key, prop] of Object.entries(schema.properties)) {\n      const p = prop as any;\n\n      // Basic type conversion\n      if (p.type === 'string') {\n        zodSchema[key] = p.enum ? z.enum(p.enum) : z.string();\n        if (p.default !== undefined) {\n          zodSchema[key] = zodSchema[key].default(p.default);\n        }\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      } else if (p.type === 'number' || p.type === 'integer') {\n        zodSchema[key] = z.number();\n        if (p.default !== undefined) {\n          zodSchema[key] = zodSchema[key].default(p.default);\n        }\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      } else if (p.type === 'boolean') {\n        zodSchema[key] = z.boolean();\n        if (p.default !== undefined) {\n          zodSchema[key] = zodSchema[key].default(p.default);\n        }\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      } else if (p.type === 'array') {\n        zodSchema[key] = z.array(z.any());\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      } else if (p.type === 'object') {\n        zodSchema[key] = z.record(z.any());\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      } else {\n        // Default to any\n        zodSchema[key] = z.any();\n        if (!schema.required?.includes(key)) {\n          zodSchema[key] = zodSchema[key].optional();\n        }\n      }\n\n      // Add description\n      if (p.description) {\n        zodSchema[key] = zodSchema[key].describe(p.description);\n      }\n    }\n\n    return zodSchema;\n  }\n\n  /**\n   * Get SDK server config for use in query() options\n   */\n  getSdkServerConfig(): McpSdkServerConfigWithInstance | undefined {\n    return this.sdkServer;\n  }\n\n  /**\n   * Get in-process server instance\n   */\n  getInProcessServer(): InProcessMCPServer | undefined {\n    return this.inProcessServer;\n  }\n\n  /**\n   * Get tool by name\n   */\n  getTool(name: string): MCPTool | undefined {\n    return this.tools.get(name);\n  }\n\n  /**\n   * Get all tool names\n   */\n  getToolNames(): string[] {\n    return Array.from(this.tools.keys());\n  }\n\n  /**\n   * Check if tool should use in-process execution\n   */\n  shouldUseInProcess(toolName: string): boolean {\n    // All Claude-Flow tools use in-process\n    return this.tools.has(toolName);\n  }\n\n  /**\n   * Route tool call to appropriate transport\n   */\n  async routeToolCall(\n    toolName: string,\n    args: Record<string, unknown>,\n    context?: any\n  ): Promise<any> {\n    const startTime = performance.now();\n\n    try {\n      if (this.shouldUseInProcess(toolName) && this.inProcessServer) {\n        logger.debug('Routing to in-process server', { toolName });\n        const result = await this.inProcessServer.callTool(toolName, args, context);\n        const duration = performance.now() - startTime;\n\n        logger.info('In-process tool call completed', {\n          toolName,\n          duration: `${duration.toFixed(2)}ms`,\n          transport: 'in-process',\n        });\n\n        return result;\n      }\n\n      // External tools would use stdio/SSE (not implemented in this phase)\n      logger.warn('Tool not found in in-process registry', { toolName });\n      throw new Error(`Tool not available: ${toolName}`);\n    } catch (error) {\n      logger.error('Tool routing failed', { toolName, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getMetrics() {\n    if (!this.inProcessServer) {\n      return { error: 'In-process server not initialized' };\n    }\n\n    const stats = this.inProcessServer.getStats();\n    const metrics = this.inProcessServer.getMetrics();\n\n    return {\n      stats,\n      recentMetrics: metrics.slice(-10), // Last 10 calls\n      summary: {\n        totalCalls: metrics.length,\n        averageLatency: stats.averageDuration,\n        cacheHitRate: stats.cacheHitRate,\n      },\n    };\n  }\n\n  /**\n   * Get performance comparison (in-process vs IPC)\n   */\n  getPerformanceComparison() {\n    const metrics = this.getMetrics();\n\n    if ('error' in metrics) {\n      return metrics;\n    }\n\n    const avgInProcessLatency = metrics.stats.averageDuration;\n\n    // Estimated IPC latency (based on typical MCP stdio overhead)\n    const estimatedIPCLatency = avgInProcessLatency * 50; // 50x overhead estimate\n\n    return {\n      inProcessLatency: `${avgInProcessLatency.toFixed(2)}ms`,\n      estimatedIPCLatency: `${estimatedIPCLatency.toFixed(2)}ms`,\n      speedupFactor: `${(estimatedIPCLatency / avgInProcessLatency).toFixed(1)}x`,\n      recommendation: 'Use in-process for all Claude-Flow tools for maximum performance',\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.inProcessServer) {\n      this.inProcessServer.clearCache();\n      this.inProcessServer.clearMetrics();\n    }\n\n    this.tools.clear();\n    logger.info('Tool registry cleaned up');\n  }\n}\n\n/**\n * Create a global tool registry instance\n */\nexport async function createToolRegistry(\n  config: ToolRegistryConfig\n): Promise<ClaudeFlowToolRegistry> {\n  const registry = new ClaudeFlowToolRegistry(config);\n  await registry.initialize();\n  return registry;\n}\n\n/**\n * Export SDK server creation helper\n */\nexport async function createClaudeFlowSdkServer(\n  orchestratorContext?: any\n): Promise<McpSdkServerConfigWithInstance> {\n  const registry = await createToolRegistry({\n    enableInProcess: true,\n    enableMetrics: true,\n    enableCaching: true,\n    orchestratorContext,\n  });\n\n  const sdkServer = registry.getSdkServerConfig();\n  if (!sdkServer) {\n    throw new Error('Failed to create SDK server');\n  }\n\n  return sdkServer;\n}"],"names":["createInProcessServer","createClaudeFlowTools","logger","tool","createSdkMcpServer","z","ClaudeFlowToolRegistry","inProcessServer","sdkServer","tools","config","Map","info","enableInProcess","enableMetrics","initialize","claudeFlowTools","set","name","size","version","enableCaching","registerTool","orchestratorContext","setContext","orchestrator","sessionId","createSdkServer","toolCount","getToolNames","length","Error","sdkTools","Array","from","values","map","convertToSdkTool","mcpTool","zodSchema","jsonSchemaToZod","inputSchema","description","args","extra","callTool","result","handler","content","type","text","JSON","stringify","isError","schema","properties","key","prop","Object","entries","p","enum","string","default","undefined","required","includes","optional","number","boolean","array","any","record","describe","getSdkServerConfig","getInProcessServer","getTool","get","keys","shouldUseInProcess","toolName","has","routeToolCall","context","startTime","performance","now","debug","duration","toFixed","transport","warn","error","getMetrics","stats","getStats","metrics","recentMetrics","slice","summary","totalCalls","averageLatency","averageDuration","cacheHitRate","getPerformanceComparison","avgInProcessLatency","estimatedIPCLatency","inProcessLatency","speedupFactor","recommendation","cleanup","clearCache","clearMetrics","clear","createToolRegistry","registry","createClaudeFlowSdkServer"],"mappings":"AAOA,SAASA,qBAAqB,QAA4B,yBAAyB;AACnF,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,MAAM,QAAQ,oBAAoB;AAK3C,SAASC,IAAI,EAAEC,kBAAkB,QAAQ,gCAAgC;AACzE,SAASC,CAAC,QAAQ,MAAM;AAYxB,OAAO,MAAMC;IACHC,gBAAqC;IACrCC,UAA2C;IAC3CC,MAA4B;IAC5BC,OAA2B;IAEnC,YAAYA,MAA0B,CAAE;QACtC,IAAI,CAACA,MAAM,GAAGA;QACd,IAAI,CAACD,KAAK,GAAG,IAAIE;QAEjBT,OAAOU,IAAI,CAAC,sCAAsC;YAChDC,iBAAiBH,OAAOG,eAAe;YACvCC,eAAeJ,OAAOI,aAAa;QACrC;IACF;IAKA,MAAMC,aAA4B;QAChCb,OAAOU,IAAI,CAAC;QAGZ,MAAMI,kBAAkB,MAAMf,sBAAsBC;QAGpD,KAAK,MAAMC,QAAQa,gBAAiB;YAClC,IAAI,CAACP,KAAK,CAACQ,GAAG,CAACd,KAAKe,IAAI,EAAEf;QAC5B;QAEAD,OAAOU,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,CAACH,KAAK,CAACU,IAAI,CAAC,kBAAkB,CAAC;QAGzD,IAAI,IAAI,CAACT,MAAM,CAACG,eAAe,EAAE;YAC/B,MAAM,IAAI,CAACb,qBAAqB;QAClC;IACF;IAKA,MAAcA,wBAAuC;QACnDE,OAAOU,IAAI,CAAC;QAGZ,IAAI,CAACL,eAAe,GAAGP,sBAAsB;YAC3CkB,MAAM;YACNE,SAAS;YACTN,eAAe,IAAI,CAACJ,MAAM,CAACI,aAAa;YACxCO,eAAe,IAAI,CAACX,MAAM,CAACW,aAAa;QAC1C;QAGA,KAAK,MAAM,CAACH,MAAMf,KAAK,IAAI,IAAI,CAACM,KAAK,CAAE;YACrC,IAAI,CAACF,eAAe,CAACe,YAAY,CAACnB;QACpC;QAGA,IAAI,IAAI,CAACO,MAAM,CAACa,mBAAmB,EAAE;YACnC,IAAI,CAAChB,eAAe,CAACiB,UAAU,CAAC;gBAC9BC,cAAc,IAAI,CAACf,MAAM,CAACa,mBAAmB;gBAC7CG,WAAW;YACb;QACF;QAGA,MAAM,IAAI,CAACC,eAAe;QAE1BzB,OAAOU,IAAI,CAAC,iCAAiC;YAC3CgB,WAAW,IAAI,CAACrB,eAAe,CAACsB,YAAY,GAAGC,MAAM;QACvD;IACF;IAKA,MAAcH,kBAAiC;QAC7C,IAAI,CAAC,IAAI,CAACpB,eAAe,EAAE;YACzB,MAAM,IAAIwB,MAAM;QAClB;QAGA,MAAMC,WAAWC,MAAMC,IAAI,CAAC,IAAI,CAACzB,KAAK,CAAC0B,MAAM,IAAIC,GAAG,CAACjC,CAAAA;YACnD,OAAO,IAAI,CAACkC,gBAAgB,CAAClC;QAC/B;QAGA,IAAI,CAACK,SAAS,GAAGJ,mBAAmB;YAClCc,MAAM;YACNE,SAAS;YACTX,OAAOuB;QACT;QAEA9B,OAAOU,IAAI,CAAC,0BAA0B;YAAEgB,WAAWI,SAASF,MAAM;QAAC;IACrE;IAKQO,iBAAiBC,OAAgB,EAAO;QAE9C,MAAMC,YAAY,IAAI,CAACC,eAAe,CAACF,QAAQG,WAAW;QAG1D,OAAOtC,KACLmC,QAAQpB,IAAI,EACZoB,QAAQI,WAAW,EACnBH,WACA,OAAOI,MAAWC;YAEhB,IAAI,IAAI,CAACrC,eAAe,EAAE;gBACxB,OAAO,MAAM,IAAI,CAACA,eAAe,CAACsC,QAAQ,CAACP,QAAQpB,IAAI,EAAEyB;YAC3D;YAGA,MAAMG,SAAS,MAAMR,QAAQS,OAAO,CAACJ,MAAM;gBACzClB,cAAc,IAAI,CAACf,MAAM,CAACa,mBAAmB;gBAC7CG,WAAW;YACb;YAEA,OAAO;gBACLsB,SAAS;oBACP;wBACEC,MAAM;wBACNC,MAAM,OAAOJ,WAAW,WAAWA,SAASK,KAAKC,SAAS,CAACN,QAAQ,MAAM;oBAC3E;iBACD;gBACDO,SAAS;YACX;QACF;IAEJ;IAKQb,gBAAgBc,MAAW,EAAO;QACxC,MAAMf,YAAiB,CAAC;QAExB,IAAI,CAACe,OAAOC,UAAU,EAAE;YACtB,OAAO,CAAC;QACV;QAEA,KAAK,MAAM,CAACC,KAAKC,KAAK,IAAIC,OAAOC,OAAO,CAACL,OAAOC,UAAU,EAAG;YAC3D,MAAMK,IAAIH;YAGV,IAAIG,EAAEX,IAAI,KAAK,UAAU;gBACvBV,SAAS,CAACiB,IAAI,GAAGI,EAAEC,IAAI,GAAGxD,EAAEwD,IAAI,CAACD,EAAEC,IAAI,IAAIxD,EAAEyD,MAAM;gBACnD,IAAIF,EAAEG,OAAO,KAAKC,WAAW;oBAC3BzB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACO,OAAO,CAACH,EAAEG,OAAO;gBACnD;gBACA,IAAI,CAACT,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF,OAAO,IAAIP,EAAEX,IAAI,KAAK,YAAYW,EAAEX,IAAI,KAAK,WAAW;gBACtDV,SAAS,CAACiB,IAAI,GAAGnD,EAAE+D,MAAM;gBACzB,IAAIR,EAAEG,OAAO,KAAKC,WAAW;oBAC3BzB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACO,OAAO,CAACH,EAAEG,OAAO;gBACnD;gBACA,IAAI,CAACT,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF,OAAO,IAAIP,EAAEX,IAAI,KAAK,WAAW;gBAC/BV,SAAS,CAACiB,IAAI,GAAGnD,EAAEgE,OAAO;gBAC1B,IAAIT,EAAEG,OAAO,KAAKC,WAAW;oBAC3BzB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACO,OAAO,CAACH,EAAEG,OAAO;gBACnD;gBACA,IAAI,CAACT,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF,OAAO,IAAIP,EAAEX,IAAI,KAAK,SAAS;gBAC7BV,SAAS,CAACiB,IAAI,GAAGnD,EAAEiE,KAAK,CAACjE,EAAEkE,GAAG;gBAC9B,IAAI,CAACjB,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF,OAAO,IAAIP,EAAEX,IAAI,KAAK,UAAU;gBAC9BV,SAAS,CAACiB,IAAI,GAAGnD,EAAEmE,MAAM,CAACnE,EAAEkE,GAAG;gBAC/B,IAAI,CAACjB,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF,OAAO;gBAEL5B,SAAS,CAACiB,IAAI,GAAGnD,EAAEkE,GAAG;gBACtB,IAAI,CAACjB,OAAOW,QAAQ,EAAEC,SAASV,MAAM;oBACnCjB,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACW,QAAQ;gBAC1C;YACF;YAGA,IAAIP,EAAElB,WAAW,EAAE;gBACjBH,SAAS,CAACiB,IAAI,GAAGjB,SAAS,CAACiB,IAAI,CAACiB,QAAQ,CAACb,EAAElB,WAAW;YACxD;QACF;QAEA,OAAOH;IACT;IAKAmC,qBAAiE;QAC/D,OAAO,IAAI,CAAClE,SAAS;IACvB;IAKAmE,qBAAqD;QACnD,OAAO,IAAI,CAACpE,eAAe;IAC7B;IAKAqE,QAAQ1D,IAAY,EAAuB;QACzC,OAAO,IAAI,CAACT,KAAK,CAACoE,GAAG,CAAC3D;IACxB;IAKAW,eAAyB;QACvB,OAAOI,MAAMC,IAAI,CAAC,IAAI,CAACzB,KAAK,CAACqE,IAAI;IACnC;IAKAC,mBAAmBC,QAAgB,EAAW;QAE5C,OAAO,IAAI,CAACvE,KAAK,CAACwE,GAAG,CAACD;IACxB;IAKA,MAAME,cACJF,QAAgB,EAChBrC,IAA6B,EAC7BwC,OAAa,EACC;QACd,MAAMC,YAAYC,YAAYC,GAAG;QAEjC,IAAI;YACF,IAAI,IAAI,CAACP,kBAAkB,CAACC,aAAa,IAAI,CAACzE,eAAe,EAAE;gBAC7DL,OAAOqF,KAAK,CAAC,gCAAgC;oBAAEP;gBAAS;gBACxD,MAAMlC,SAAS,MAAM,IAAI,CAACvC,eAAe,CAACsC,QAAQ,CAACmC,UAAUrC,MAAMwC;gBACnE,MAAMK,WAAWH,YAAYC,GAAG,KAAKF;gBAErClF,OAAOU,IAAI,CAAC,kCAAkC;oBAC5CoE;oBACAQ,UAAU,GAAGA,SAASC,OAAO,CAAC,GAAG,EAAE,CAAC;oBACpCC,WAAW;gBACb;gBAEA,OAAO5C;YACT;YAGA5C,OAAOyF,IAAI,CAAC,yCAAyC;gBAAEX;YAAS;YAChE,MAAM,IAAIjD,MAAM,CAAC,oBAAoB,EAAEiD,UAAU;QACnD,EAAE,OAAOY,OAAO;YACd1F,OAAO0F,KAAK,CAAC,uBAAuB;gBAAEZ;gBAAUY;YAAM;YACtD,MAAMA;QACR;IACF;IAKAC,aAAa;QACX,IAAI,CAAC,IAAI,CAACtF,eAAe,EAAE;YACzB,OAAO;gBAAEqF,OAAO;YAAoC;QACtD;QAEA,MAAME,QAAQ,IAAI,CAACvF,eAAe,CAACwF,QAAQ;QAC3C,MAAMC,UAAU,IAAI,CAACzF,eAAe,CAACsF,UAAU;QAE/C,OAAO;YACLC;YACAG,eAAeD,QAAQE,KAAK,CAAC,CAAC;YAC9BC,SAAS;gBACPC,YAAYJ,QAAQlE,MAAM;gBAC1BuE,gBAAgBP,MAAMQ,eAAe;gBACrCC,cAAcT,MAAMS,YAAY;YAClC;QACF;IACF;IAKAC,2BAA2B;QACzB,MAAMR,UAAU,IAAI,CAACH,UAAU;QAE/B,IAAI,WAAWG,SAAS;YACtB,OAAOA;QACT;QAEA,MAAMS,sBAAsBT,QAAQF,KAAK,CAACQ,eAAe;QAGzD,MAAMI,sBAAsBD,sBAAsB;QAElD,OAAO;YACLE,kBAAkB,GAAGF,oBAAoBhB,OAAO,CAAC,GAAG,EAAE,CAAC;YACvDiB,qBAAqB,GAAGA,oBAAoBjB,OAAO,CAAC,GAAG,EAAE,CAAC;YAC1DmB,eAAe,GAAG,AAACF,CAAAA,sBAAsBD,mBAAkB,EAAGhB,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3EoB,gBAAgB;QAClB;IACF;IAKA,MAAMC,UAAyB;QAC7B,IAAI,IAAI,CAACvG,eAAe,EAAE;YACxB,IAAI,CAACA,eAAe,CAACwG,UAAU;YAC/B,IAAI,CAACxG,eAAe,CAACyG,YAAY;QACnC;QAEA,IAAI,CAACvG,KAAK,CAACwG,KAAK;QAChB/G,OAAOU,IAAI,CAAC;IACd;AACF;AAKA,OAAO,eAAesG,mBACpBxG,MAA0B;IAE1B,MAAMyG,WAAW,IAAI7G,uBAAuBI;IAC5C,MAAMyG,SAASpG,UAAU;IACzB,OAAOoG;AACT;AAKA,OAAO,eAAeC,0BACpB7F,mBAAyB;IAEzB,MAAM4F,WAAW,MAAMD,mBAAmB;QACxCrG,iBAAiB;QACjBC,eAAe;QACfO,eAAe;QACfE;IACF;IAEA,MAAMf,YAAY2G,SAASzC,kBAAkB;IAC7C,IAAI,CAAClE,WAAW;QACd,MAAM,IAAIuB,MAAM;IAClB;IAEA,OAAOvB;AACT"}