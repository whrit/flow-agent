{"version":3,"sources":["../../../src/mcp/sdk-integration.ts"],"sourcesContent":["/**\n * SDK Integration Layer for In-Process MCP Server\n *\n * Provides seamless integration between Claude Code SDK and Claude-Flow's\n * in-process MCP server for 10-100x performance improvement.\n */\n\nimport { query, type Query, type Options } from '@anthropic-ai/claude-code/sdk';\nimport { createClaudeFlowSdkServer, ClaudeFlowToolRegistry } from './tool-registry.js';\nimport type { McpSdkServerConfigWithInstance } from '@anthropic-ai/claude-code/sdk.d.ts';\nimport { logger } from '../core/logger.js';\n\nexport interface SDKIntegrationConfig {\n  enableInProcess: boolean;\n  enableMetrics: boolean;\n  enableCaching: boolean;\n  orchestratorContext?: any;\n  fallbackToStdio?: boolean;\n}\n\n/**\n * SDK Integration Manager\n * Manages in-process MCP server and SDK query integration\n */\nexport class SDKIntegration {\n  private sdkServer?: McpSdkServerConfigWithInstance;\n  private registry?: ClaudeFlowToolRegistry;\n  private config: SDKIntegrationConfig;\n\n  constructor(config: SDKIntegrationConfig) {\n    this.config = {\n      fallbackToStdio: true,\n      ...config,\n    };\n\n    logger.info('SDKIntegration initialized', {\n      enableInProcess: config.enableInProcess,\n      enableMetrics: config.enableMetrics,\n    });\n  }\n\n  /**\n   * Initialize SDK integration with in-process server\n   */\n  async initialize(): Promise<void> {\n    if (!this.config.enableInProcess) {\n      logger.info('In-process MCP server disabled, using stdio fallback');\n      return;\n    }\n\n    logger.info('Initializing in-process MCP server...');\n\n    try {\n      // Create SDK server with all Claude-Flow tools\n      this.sdkServer = await createClaudeFlowSdkServer(this.config.orchestratorContext);\n\n      logger.info('In-process MCP server initialized successfully', {\n        serverName: this.sdkServer.name,\n        transport: 'in-process',\n      });\n    } catch (error) {\n      logger.error('Failed to initialize in-process MCP server', { error });\n\n      if (!this.config.fallbackToStdio) {\n        throw error;\n      }\n\n      logger.warn('Falling back to stdio transport');\n    }\n  }\n\n  /**\n   * Create SDK query with in-process MCP server\n   */\n  query(prompt: string, options?: Partial<Options>): Query {\n    const queryOptions: Options = {\n      ...options,\n    };\n\n    // Add in-process MCP server if available\n    if (this.sdkServer) {\n      queryOptions.mcpServers = {\n        ...queryOptions.mcpServers,\n        'claude-flow': this.sdkServer,\n      };\n\n      logger.debug('Query created with in-process MCP server', {\n        mcpServers: Object.keys(queryOptions.mcpServers || {}),\n      });\n    } else {\n      logger.debug('Query created without in-process server (fallback mode)');\n    }\n\n    return query({ prompt, options: queryOptions });\n  }\n\n  /**\n   * Create SDK query for agent with in-process tools\n   */\n  async queryAgent(\n    agentId: string,\n    prompt: string,\n    options?: Partial<Options>\n  ): Promise<Query> {\n    const queryOptions: Options = {\n      ...options,\n      mcpServers: {\n        ...options?.mcpServers,\n      },\n    };\n\n    // Add in-process server\n    if (this.sdkServer) {\n      queryOptions.mcpServers!['claude-flow'] = this.sdkServer;\n    }\n\n    // Create agent-specific context\n    if (this.config.orchestratorContext) {\n      logger.debug('Creating agent query with orchestrator context', { agentId });\n    }\n\n    return query({ prompt, options: queryOptions });\n  }\n\n  /**\n   * Get SDK server config for direct use\n   */\n  getSdkServer(): McpSdkServerConfigWithInstance | undefined {\n    return this.sdkServer;\n  }\n\n  /**\n   * Check if in-process server is available\n   */\n  isInProcessAvailable(): boolean {\n    return this.sdkServer !== undefined;\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getMetrics() {\n    if (!this.registry) {\n      return { error: 'Tool registry not available' };\n    }\n\n    return this.registry.getMetrics();\n  }\n\n  /**\n   * Get performance comparison\n   */\n  getPerformanceComparison() {\n    if (!this.registry) {\n      return { error: 'Tool registry not available' };\n    }\n\n    return this.registry.getPerformanceComparison();\n  }\n\n  /**\n   * Cleanup resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.registry) {\n      await this.registry.cleanup();\n    }\n\n    this.sdkServer = undefined;\n    logger.info('SDK integration cleaned up');\n  }\n}\n\n/**\n * Global SDK integration instance\n */\nlet globalIntegration: SDKIntegration | undefined;\n\n/**\n * Initialize global SDK integration\n */\nexport async function initializeSDKIntegration(\n  config: SDKIntegrationConfig\n): Promise<SDKIntegration> {\n  if (globalIntegration) {\n    logger.warn('SDK integration already initialized, returning existing instance');\n    return globalIntegration;\n  }\n\n  globalIntegration = new SDKIntegration(config);\n  await globalIntegration.initialize();\n\n  return globalIntegration;\n}\n\n/**\n * Get global SDK integration instance\n */\nexport function getSDKIntegration(): SDKIntegration | undefined {\n  return globalIntegration;\n}\n\n/**\n * Create a query with in-process MCP server\n * Convenience function for direct use\n */\nexport async function createInProcessQuery(\n  prompt: string,\n  options?: Partial<Options>,\n  orchestratorContext?: any\n): Promise<Query> {\n  // Initialize if not already done\n  if (!globalIntegration) {\n    await initializeSDKIntegration({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: true,\n      orchestratorContext,\n    });\n  }\n\n  return globalIntegration!.query(prompt, options);\n}\n\n/**\n * Get in-process MCP server config for use in SDK queries\n */\nexport async function getInProcessServerConfig(\n  orchestratorContext?: any\n): Promise<McpSdkServerConfigWithInstance> {\n  // Initialize if needed\n  if (!globalIntegration) {\n    await initializeSDKIntegration({\n      enableInProcess: true,\n      enableMetrics: true,\n      enableCaching: true,\n      orchestratorContext,\n    });\n  }\n\n  const server = globalIntegration?.getSdkServer();\n  if (!server) {\n    throw new Error('In-process MCP server not available');\n  }\n\n  return server;\n}\n\n/**\n * Measure performance difference between in-process and IPC\n */\nexport async function measurePerformance(\n  toolName: string,\n  args: Record<string, unknown>,\n  iterations: number = 10\n): Promise<{\n  inProcessAvg: number;\n  inProcessMin: number;\n  inProcessMax: number;\n  estimatedIPCAvg: number;\n  speedupFactor: number;\n}> {\n  if (!globalIntegration || !globalIntegration.isInProcessAvailable()) {\n    throw new Error('In-process server not available for performance testing');\n  }\n\n  const durations: number[] = [];\n\n  logger.info('Starting performance measurement', { toolName, iterations });\n\n  for (let i = 0; i < iterations; i++) {\n    const start = performance.now();\n\n    // Execute via in-process (through SDK integration)\n    const query = globalIntegration.query(`Execute tool: ${toolName}`, {\n      allowedTools: [toolName],\n    });\n\n    // Wait for completion\n    for await (const message of query) {\n      if (message.type === 'result') {\n        break;\n      }\n    }\n\n    const duration = performance.now() - start;\n    durations.push(duration);\n  }\n\n  const inProcessAvg = durations.reduce((a, b) => a + b, 0) / durations.length;\n  const inProcessMin = Math.min(...durations);\n  const inProcessMax = Math.max(...durations);\n\n  // Estimate IPC overhead (based on typical stdio/SSE latency)\n  // Conservative estimate: 50x slower for IPC due to serialization, process spawning, etc.\n  const estimatedIPCAvg = inProcessAvg * 50;\n  const speedupFactor = estimatedIPCAvg / inProcessAvg;\n\n  logger.info('Performance measurement complete', {\n    toolName,\n    inProcessAvg: `${inProcessAvg.toFixed(2)}ms`,\n    estimatedIPCAvg: `${estimatedIPCAvg.toFixed(2)}ms`,\n    speedupFactor: `${speedupFactor.toFixed(1)}x`,\n  });\n\n  return {\n    inProcessAvg,\n    inProcessMin,\n    inProcessMax,\n    estimatedIPCAvg,\n    speedupFactor,\n  };\n}"],"names":["query","createClaudeFlowSdkServer","logger","SDKIntegration","sdkServer","registry","config","fallbackToStdio","info","enableInProcess","enableMetrics","initialize","orchestratorContext","serverName","name","transport","error","warn","prompt","options","queryOptions","mcpServers","debug","Object","keys","queryAgent","agentId","getSdkServer","isInProcessAvailable","undefined","getMetrics","getPerformanceComparison","cleanup","globalIntegration","initializeSDKIntegration","getSDKIntegration","createInProcessQuery","enableCaching","getInProcessServerConfig","server","Error","measurePerformance","toolName","args","iterations","durations","i","start","performance","now","allowedTools","message","type","duration","push","inProcessAvg","reduce","a","b","length","inProcessMin","Math","min","inProcessMax","max","estimatedIPCAvg","speedupFactor","toFixed"],"mappings":"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"}