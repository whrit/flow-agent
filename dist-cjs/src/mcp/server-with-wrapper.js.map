{"version":3,"sources":["../../../src/mcp/server-with-wrapper.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * MCP Server entry point that uses the wrapper by default\n */\n\nimport { ClaudeCodeMCPWrapper } from './claude-code-wrapper.js';\n\n// Check if we should use the legacy server\nconst useLegacy =\n  process.env.CLAUDE_FLOW_LEGACY_MCP === 'true' || process.argv.includes('--legacy');\n\nasync function main() {\n  if (useLegacy) {\n    console.error('Starting Claude-Flow MCP in legacy mode...');\n    // Dynamically import the old server to avoid circular dependencies\n    const module = await import('./server.js');\n    if (module.runMCPServer) {\n      await module.runMCPServer();\n    } else if (module.default) {\n      await module.default();\n    } else {\n      console.error('Could not find runMCPServer function in legacy server');\n      process.exit(1);\n    }\n  } else {\n    console.error('Starting Claude-Flow MCP with Claude Code wrapper...');\n    const wrapper = new ClaudeCodeMCPWrapper();\n    await wrapper.run();\n  }\n}\n\n// Run the server\nmain().catch((error) => {\n  console.error('Fatal error:', error);\n  process.exit(1);\n});\n"],"names":["ClaudeCodeMCPWrapper","useLegacy","process","env","CLAUDE_FLOW_LEGACY_MCP","argv","includes","main","console","error","module","runMCPServer","default","exit","wrapper","run","catch"],"mappings":";AAKA,SAASA,oBAAoB,QAAQ,2BAA2B;AAGhE,MAAMC,YACJC,QAAQC,GAAG,CAACC,sBAAsB,KAAK,UAAUF,QAAQG,IAAI,CAACC,QAAQ,CAAC;AAEzE,eAAeC;IACb,IAAIN,WAAW;QACbO,QAAQC,KAAK,CAAC;QAEd,MAAMC,SAAS,MAAM,MAAM,CAAC;QAC5B,IAAIA,OAAOC,YAAY,EAAE;YACvB,MAAMD,OAAOC,YAAY;QAC3B,OAAO,IAAID,OAAOE,OAAO,EAAE;YACzB,MAAMF,OAAOE,OAAO;QACtB,OAAO;YACLJ,QAAQC,KAAK,CAAC;YACdP,QAAQW,IAAI,CAAC;QACf;IACF,OAAO;QACLL,QAAQC,KAAK,CAAC;QACd,MAAMK,UAAU,IAAId;QACpB,MAAMc,QAAQC,GAAG;IACnB;AACF;AAGAR,OAAOS,KAAK,CAAC,CAACP;IACZD,QAAQC,KAAK,CAAC,gBAAgBA;IAC9BP,QAAQW,IAAI,CAAC;AACf"}