{"version":3,"sources":["../../../src/mcp/protocol-manager.ts"],"sourcesContent":["/**\n * MCP Protocol Version Management and Compatibility Checking\n */\n\nimport type { MCPProtocolVersion, MCPCapabilities, MCPInitializeParams } from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\nimport { MCPError } from '../utils/errors.js';\n\nexport interface ProtocolVersionInfo {\n  version: MCPProtocolVersion;\n  name: string;\n  releaseDate: Date;\n  deprecated?: boolean;\n  deprecationDate?: Date;\n  supportedFeatures: string[];\n  breakingChanges?: string[];\n  migrationGuide?: string;\n}\n\nexport interface CompatibilityResult {\n  compatible: boolean;\n  warnings: string[];\n  errors: string[];\n  recommendedVersion?: MCPProtocolVersion;\n  missingFeatures?: string[];\n  deprecatedFeatures?: string[];\n}\n\nexport interface NegotiationResult {\n  agreedVersion: MCPProtocolVersion;\n  agreedCapabilities: MCPCapabilities;\n  clientCapabilities: MCPCapabilities;\n  serverCapabilities: MCPCapabilities;\n  warnings: string[];\n  limitations: string[];\n}\n\n/**\n * MCP Protocol Manager\n * Handles protocol version negotiation, compatibility checking, and feature management\n */\nexport class MCPProtocolManager {\n  private supportedVersions: Map<string, ProtocolVersionInfo> = new Map();\n  private currentVersion: MCPProtocolVersion;\n  private serverCapabilities: MCPCapabilities;\n\n  private readonly knownVersions: ProtocolVersionInfo[] = [\n    {\n      version: { major: 2024, minor: 11, patch: 5 },\n      name: 'MCP 2024.11.5',\n      releaseDate: new Date('2024-11-01'),\n      supportedFeatures: [\n        'tools',\n        'prompts',\n        'resources',\n        'logging',\n        'sampling',\n        'notifications',\n        'tool_list_changed',\n        'resource_list_changed',\n        'prompt_list_changed',\n      ],\n    },\n    {\n      version: { major: 2024, minor: 11, patch: 4 },\n      name: 'MCP 2024.11.4',\n      releaseDate: new Date('2024-10-15'),\n      supportedFeatures: [\n        'tools',\n        'prompts',\n        'resources',\n        'logging',\n        'notifications',\n        'tool_list_changed',\n        'resource_list_changed',\n      ],\n    },\n    {\n      version: { major: 2024, minor: 11, patch: 3 },\n      name: 'MCP 2024.11.3',\n      releaseDate: new Date('2024-10-01'),\n      supportedFeatures: ['tools', 'prompts', 'resources', 'logging', 'notifications'],\n    },\n    {\n      version: { major: 2024, minor: 10, patch: 0 },\n      name: 'MCP 2024.10.0',\n      releaseDate: new Date('2024-09-01'),\n      deprecated: true,\n      deprecationDate: new Date('2024-11-01'),\n      supportedFeatures: ['tools', 'prompts', 'resources', 'logging'],\n      breakingChanges: ['Changed tool response format', 'Modified error codes'],\n      migrationGuide: 'https://docs.mcp.io/migration/2024.10-to-2024.11',\n    },\n  ];\n\n  constructor(\n    private logger: ILogger,\n    preferredVersion?: MCPProtocolVersion,\n    serverCapabilities?: MCPCapabilities,\n  ) {\n    // Initialize supported versions\n    for (const versionInfo of this.knownVersions) {\n      const key = this.versionToString(versionInfo.version);\n      this.supportedVersions.set(key, versionInfo);\n    }\n\n    // Set current version (latest supported or preferred)\n    this.currentVersion = preferredVersion || this.getLatestSupportedVersion();\n\n    // Set server capabilities\n    this.serverCapabilities = serverCapabilities || this.getDefaultCapabilities();\n\n    this.logger.info('Protocol manager initialized', {\n      currentVersion: this.versionToString(this.currentVersion),\n      supportedVersions: this.getSupportedVersionStrings(),\n    });\n  }\n\n  /**\n   * Negotiate protocol version and capabilities with client\n   */\n  async negotiateProtocol(clientParams: MCPInitializeParams): Promise<NegotiationResult> {\n    this.logger.debug('Starting protocol negotiation', {\n      clientVersion: this.versionToString(clientParams.protocolVersion),\n      clientCapabilities: clientParams.capabilities,\n      clientInfo: clientParams.clientInfo,\n    });\n\n    const result: NegotiationResult = {\n      agreedVersion: this.currentVersion,\n      agreedCapabilities: { ...this.serverCapabilities },\n      clientCapabilities: clientParams.capabilities,\n      serverCapabilities: this.serverCapabilities,\n      warnings: [],\n      limitations: [],\n    };\n\n    try {\n      // Check version compatibility\n      const compatibility = this.checkCompatibility(clientParams.protocolVersion);\n\n      if (!compatibility.compatible) {\n        throw new MCPError(\n          `Protocol version ${this.versionToString(clientParams.protocolVersion)} is not compatible. ${compatibility.errors.join(', ')}`,\n        );\n      }\n\n      // Use client's version if it's supported and newer\n      if (this.isVersionSupported(clientParams.protocolVersion)) {\n        const clientVersionInfo = this.getVersionInfo(clientParams.protocolVersion);\n        const currentVersionInfo = this.getVersionInfo(this.currentVersion);\n\n        if (clientVersionInfo && currentVersionInfo) {\n          if (this.compareVersions(clientParams.protocolVersion, this.currentVersion) <= 0) {\n            result.agreedVersion = clientParams.protocolVersion;\n          }\n        }\n      }\n\n      // Negotiate capabilities\n      result.agreedCapabilities = this.negotiateCapabilities(\n        clientParams.capabilities,\n        this.serverCapabilities,\n        result.agreedVersion,\n      );\n\n      // Add warnings from compatibility check\n      result.warnings.push(...compatibility.warnings);\n\n      // Check for deprecated features\n      const versionInfo = this.getVersionInfo(result.agreedVersion);\n      if (versionInfo?.deprecated) {\n        result.warnings.push(\n          `Protocol version ${this.versionToString(result.agreedVersion)} is deprecated. ` +\n            `Please upgrade to a newer version.`,\n        );\n      }\n\n      // Check for missing features\n      const missingFeatures = this.getMissingFeatures(\n        result.agreedVersion,\n        result.agreedCapabilities,\n      );\n\n      if (missingFeatures.length > 0) {\n        result.limitations.push(\n          `Some features may not be available: ${missingFeatures.join(', ')}`,\n        );\n      }\n\n      this.logger.info('Protocol negotiation completed', {\n        agreedVersion: this.versionToString(result.agreedVersion),\n        warnings: result.warnings.length,\n        limitations: result.limitations.length,\n      });\n\n      return result;\n    } catch (error) {\n      this.logger.error('Protocol negotiation failed', {\n        clientVersion: this.versionToString(clientParams.protocolVersion),\n        error,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Check compatibility between client and server versions\n   */\n  checkCompatibility(clientVersion: MCPProtocolVersion): CompatibilityResult {\n    const result: CompatibilityResult = {\n      compatible: false,\n      warnings: [],\n      errors: [],\n    };\n\n    const clientVersionInfo = this.getVersionInfo(clientVersion);\n    const serverVersionInfo = this.getVersionInfo(this.currentVersion);\n\n    // Check if version is known\n    if (!clientVersionInfo) {\n      result.errors.push(`Unknown protocol version: ${this.versionToString(clientVersion)}`);\n      result.recommendedVersion = this.getLatestSupportedVersion();\n      return result;\n    }\n\n    // Check major version compatibility\n    if (clientVersion.major !== this.currentVersion.major) {\n      result.errors.push(\n        `Major version mismatch: client ${clientVersion.major}, server ${this.currentVersion.major}`,\n      );\n      return result;\n    }\n\n    // Check if client version is too new\n    if (this.compareVersions(clientVersion, this.currentVersion) > 0) {\n      result.errors.push(\n        `Client version ${this.versionToString(clientVersion)} is newer than supported server version ${this.versionToString(this.currentVersion)}`,\n      );\n      result.recommendedVersion = this.currentVersion;\n      return result;\n    }\n\n    // Check for deprecated versions\n    if (clientVersionInfo.deprecated) {\n      result.warnings.push(\n        `Client is using deprecated version ${this.versionToString(clientVersion)}. ` +\n          `Support will be removed after ${clientVersionInfo.deprecationDate?.toISOString().split('T')[0]}`,\n      );\n      result.recommendedVersion = this.getLatestSupportedVersion();\n    }\n\n    // Check for missing features\n    const serverFeatures = serverVersionInfo?.supportedFeatures || [];\n    const clientFeatures = clientVersionInfo.supportedFeatures;\n    const missingFeatures = serverFeatures.filter((feature) => !clientFeatures.includes(feature));\n\n    if (missingFeatures.length > 0) {\n      result.missingFeatures = missingFeatures;\n      result.warnings.push(\n        `Client version lacks some server features: ${missingFeatures.join(', ')}`,\n      );\n    }\n\n    // Check for deprecated features being used\n    const deprecatedFeatures = this.getDeprecatedFeatures(clientVersion);\n    if (deprecatedFeatures.length > 0) {\n      result.deprecatedFeatures = deprecatedFeatures;\n      result.warnings.push(\n        `Client version uses deprecated features: ${deprecatedFeatures.join(', ')}`,\n      );\n    }\n\n    result.compatible = true;\n    return result;\n  }\n\n  /**\n   * Get information about a specific protocol version\n   */\n  getVersionInfo(version: MCPProtocolVersion): ProtocolVersionInfo | undefined {\n    return this.supportedVersions.get(this.versionToString(version));\n  }\n\n  /**\n   * Check if a version is supported\n   */\n  isVersionSupported(version: MCPProtocolVersion): boolean {\n    return this.supportedVersions.has(this.versionToString(version));\n  }\n\n  /**\n   * Get the latest supported version\n   */\n  getLatestSupportedVersion(): MCPProtocolVersion {\n    const versions = Array.from(this.supportedVersions.values())\n      .filter((v) => !v.deprecated)\n      .sort((a, b) => this.compareVersions(b.version, a.version));\n\n    return versions[0]?.version || { major: 2024, minor: 11, patch: 5 };\n  }\n\n  /**\n   * Get all supported version strings\n   */\n  getSupportedVersionStrings(): string[] {\n    return Array.from(this.supportedVersions.keys());\n  }\n\n  /**\n   * Get current server capabilities\n   */\n  getServerCapabilities(): MCPCapabilities {\n    return { ...this.serverCapabilities };\n  }\n\n  /**\n   * Update server capabilities\n   */\n  updateServerCapabilities(capabilities: Partial<MCPCapabilities>): void {\n    this.serverCapabilities = { ...this.serverCapabilities, ...capabilities };\n    this.logger.info('Server capabilities updated', { capabilities: this.serverCapabilities });\n  }\n\n  /**\n   * Check if a feature is supported in a specific version\n   */\n  isFeatureSupported(version: MCPProtocolVersion, feature: string): boolean {\n    const versionInfo = this.getVersionInfo(version);\n    return versionInfo?.supportedFeatures.includes(feature) || false;\n  }\n\n  private versionToString(version: MCPProtocolVersion): string {\n    return `${version.major}.${version.minor}.${version.patch}`;\n  }\n\n  private compareVersions(a: MCPProtocolVersion, b: MCPProtocolVersion): number {\n    if (a.major !== b.major) return a.major - b.major;\n    if (a.minor !== b.minor) return a.minor - b.minor;\n    return a.patch - b.patch;\n  }\n\n  private getDefaultCapabilities(): MCPCapabilities {\n    return {\n      logging: {\n        level: 'info',\n      },\n      tools: {\n        listChanged: true,\n      },\n      resources: {\n        listChanged: true,\n        subscribe: false,\n      },\n      prompts: {\n        listChanged: true,\n      },\n    };\n  }\n\n  private negotiateCapabilities(\n    clientCapabilities: MCPCapabilities,\n    serverCapabilities: MCPCapabilities,\n    agreedVersion: MCPProtocolVersion,\n  ): MCPCapabilities {\n    const result: MCPCapabilities = {};\n\n    // Negotiate logging capabilities\n    if (clientCapabilities.logging && serverCapabilities.logging) {\n      result.logging = {\n        level: this.negotiateLogLevel(\n          clientCapabilities.logging.level,\n          serverCapabilities.logging.level,\n        ),\n      };\n    }\n\n    // Negotiate tools capabilities\n    if (clientCapabilities.tools && serverCapabilities.tools) {\n      result.tools = {\n        listChanged: clientCapabilities.tools.listChanged && serverCapabilities.tools.listChanged,\n      };\n    }\n\n    // Negotiate resources capabilities\n    if (clientCapabilities.resources && serverCapabilities.resources) {\n      result.resources = {\n        listChanged:\n          clientCapabilities.resources.listChanged && serverCapabilities.resources.listChanged,\n        subscribe: clientCapabilities.resources.subscribe && serverCapabilities.resources.subscribe,\n      };\n    }\n\n    // Negotiate prompts capabilities\n    if (clientCapabilities.prompts && serverCapabilities.prompts) {\n      result.prompts = {\n        listChanged:\n          clientCapabilities.prompts.listChanged && serverCapabilities.prompts.listChanged,\n      };\n    }\n\n    // Only include capabilities supported by the agreed version\n    return this.filterCapabilitiesByVersion(result, agreedVersion);\n  }\n\n  private negotiateLogLevel(\n    clientLevel?: 'debug' | 'info' | 'warn' | 'error',\n    serverLevel?: 'debug' | 'info' | 'warn' | 'error',\n  ): 'debug' | 'info' | 'warn' | 'error' {\n    const levels = ['debug', 'info', 'warn', 'error'];\n    const clientIndex = clientLevel ? levels.indexOf(clientLevel) : 1;\n    const serverIndex = serverLevel ? levels.indexOf(serverLevel) : 1;\n\n    // Use the more restrictive (higher) level\n    const chosenIndex = Math.max(clientIndex, serverIndex);\n    return levels[chosenIndex] as 'debug' | 'info' | 'warn' | 'error';\n  }\n\n  private filterCapabilitiesByVersion(\n    capabilities: MCPCapabilities,\n    version: MCPProtocolVersion,\n  ): MCPCapabilities {\n    const versionInfo = this.getVersionInfo(version);\n    if (!versionInfo) return capabilities;\n\n    const result: MCPCapabilities = {};\n\n    // Only include capabilities supported by this version\n    if (versionInfo.supportedFeatures.includes('logging') && capabilities.logging) {\n      result.logging = capabilities.logging;\n    }\n\n    if (versionInfo.supportedFeatures.includes('tools') && capabilities.tools) {\n      result.tools = capabilities.tools;\n    }\n\n    if (versionInfo.supportedFeatures.includes('resources') && capabilities.resources) {\n      result.resources = capabilities.resources;\n    }\n\n    if (versionInfo.supportedFeatures.includes('prompts') && capabilities.prompts) {\n      result.prompts = capabilities.prompts;\n    }\n\n    return result;\n  }\n\n  private getMissingFeatures(version: MCPProtocolVersion, capabilities: MCPCapabilities): string[] {\n    const versionInfo = this.getVersionInfo(version);\n    if (!versionInfo) return [];\n\n    const missing: string[] = [];\n    const availableFeatures = versionInfo.supportedFeatures;\n\n    // Check what's missing compared to latest version\n    const latestVersion = this.getLatestSupportedVersion();\n    const latestVersionInfo = this.getVersionInfo(latestVersion);\n\n    if (latestVersionInfo) {\n      for (const feature of latestVersionInfo.supportedFeatures) {\n        if (!availableFeatures.includes(feature)) {\n          missing.push(feature);\n        }\n      }\n    }\n\n    return missing;\n  }\n\n  private getDeprecatedFeatures(version: MCPProtocolVersion): string[] {\n    const versionInfo = this.getVersionInfo(version);\n    return versionInfo?.breakingChanges || [];\n  }\n}\n"],"names":["MCPError","MCPProtocolManager","supportedVersions","Map","currentVersion","serverCapabilities","knownVersions","version","major","minor","patch","name","releaseDate","Date","supportedFeatures","deprecated","deprecationDate","breakingChanges","migrationGuide","logger","preferredVersion","versionInfo","key","versionToString","set","getLatestSupportedVersion","getDefaultCapabilities","info","getSupportedVersionStrings","negotiateProtocol","clientParams","debug","clientVersion","protocolVersion","clientCapabilities","capabilities","clientInfo","result","agreedVersion","agreedCapabilities","warnings","limitations","compatibility","checkCompatibility","compatible","errors","join","isVersionSupported","clientVersionInfo","getVersionInfo","currentVersionInfo","compareVersions","negotiateCapabilities","push","missingFeatures","getMissingFeatures","length","error","serverVersionInfo","recommendedVersion","toISOString","split","serverFeatures","clientFeatures","filter","feature","includes","deprecatedFeatures","getDeprecatedFeatures","get","has","versions","Array","from","values","v","sort","a","b","keys","getServerCapabilities","updateServerCapabilities","isFeatureSupported","logging","level","tools","listChanged","resources","subscribe","prompts","negotiateLogLevel","filterCapabilitiesByVersion","clientLevel","serverLevel","levels","clientIndex","indexOf","serverIndex","chosenIndex","Math","max","missing","availableFeatures","latestVersion","latestVersionInfo"],"mappings":"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"}