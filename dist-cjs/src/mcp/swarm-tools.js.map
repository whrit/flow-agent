{"version":3,"sources":["../../../src/mcp/swarm-tools.ts"],"sourcesContent":["/**\n * Comprehensive MCP tools for swarm system functionality\n */\n\nimport type { MCPTool, MCPContext } from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\n// Legacy import kept for compatibility\n// import type { Tool } from '@modelcontextprotocol/sdk/types.js';\n// import { spawnSwarmAgent, getSwarmState } from '../cli/commands/swarm-spawn.js';\n\nexport interface SwarmToolContext extends MCPContext {\n  swarmCoordinator?: any;\n  agentManager?: any;\n  resourceManager?: any;\n  messageBus?: any;\n  monitor?: any;\n}\n\nexport function createSwarmTools(logger: ILogger): MCPTool[] {\n  return [\n    // === LEGACY SWARM TOOLS ===\n    {\n      name: 'dispatch_agent',\n      description: 'Spawn a new agent in the swarm to handle a specific task',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: [\n              'coordinator',\n              'researcher',\n              'coder',\n              'analyst',\n              'architect',\n              'tester',\n              'reviewer',\n              'optimizer',\n              'documenter',\n              'monitor',\n              'specialist',\n            ],\n            description: 'The type of agent to spawn',\n          },\n          task: {\n            type: 'string',\n            description: 'The specific task for the agent to complete',\n          },\n          name: {\n            type: 'string',\n            description: 'Optional name for the agent',\n          },\n        },\n        required: ['type', 'task'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        const { type, task, name } = input;\n\n        // Get swarm ID from environment\n        const swarmId = process.env['CLAUDE_SWARM_ID'];\n        if (!swarmId) {\n          throw new Error('Not running in swarm context');\n        }\n\n        // Get parent agent ID if available\n        const parentId = process.env['CLAUDE_SWARM_AGENT_ID'];\n\n        try {\n          // Legacy functionality - would integrate with swarm spawn system\n          const agentId = `agent-${Date.now()}`;\n\n          logger.info('Agent spawned via legacy dispatch tool', { agentId });\n\n          return {\n            success: true,\n            agentId,\n            agentName: name || type,\n            terminalId: 'N/A',\n            message: `Successfully spawned ${name || type} to work on: ${task}`,\n          };\n        } catch (error) {\n          logger.error('Failed to spawn agent via legacy dispatch tool', error);\n          return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n          };\n        }\n      },\n    },\n\n    {\n      name: 'swarm_status',\n      description: 'Get the current status of the swarm and all agents',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        const swarmId = process.env['CLAUDE_SWARM_ID'] || 'default-swarm';\n\n        // Legacy functionality - would integrate with swarm state system\n        const mockState = {\n          swarmId,\n          objective: 'Legacy swarm status',\n          startTime: Date.now() - 60000, // Started 1 minute ago\n          agents: [],\n        };\n\n        const runtime = Math.floor((Date.now() - mockState.startTime) / 1000);\n\n        return {\n          swarmId: mockState.swarmId,\n          objective: mockState.objective,\n          runtime: `${runtime}s`,\n          totalAgents: mockState.agents.length,\n          activeAgents: 0,\n          completedAgents: 0,\n          failedAgents: 0,\n          agents: mockState.agents,\n        };\n      },\n    },\n\n    // === SWARM COORDINATION TOOLS ===\n    {\n      name: 'swarm/create-objective',\n      description: 'Create a new swarm objective with tasks and coordination',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          title: { type: 'string', description: 'Objective title' },\n          description: { type: 'string', description: 'Detailed description' },\n          tasks: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                type: { type: 'string' },\n                description: { type: 'string' },\n                requirements: { type: 'object' },\n                priority: { type: 'string', enum: ['low', 'normal', 'high', 'critical'] },\n              },\n              required: ['type', 'description'],\n            },\n          },\n          strategy: { type: 'string', enum: ['parallel', 'sequential', 'adaptive'] },\n          timeout: { type: 'number', description: 'Timeout in milliseconds' },\n        },\n        required: ['title', 'description', 'tasks'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.swarmCoordinator) {\n          throw new Error('Swarm coordinator not available');\n        }\n\n        try {\n          const objectiveId = await context.swarmCoordinator.createObjective({\n            title: input.title,\n            description: input.description,\n            tasks: input.tasks || [],\n            strategy: input.strategy || 'adaptive',\n            timeout: input.timeout,\n          });\n\n          logger.info('Swarm objective created via MCP', { objectiveId });\n\n          return {\n            success: true,\n            objectiveId,\n            message: `Created swarm objective: ${input.title}`,\n          };\n        } catch (error) {\n          logger.error('Failed to create swarm objective via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'swarm/execute-objective',\n      description: 'Execute a swarm objective',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          objectiveId: { type: 'string', description: 'Objective ID to execute' },\n        },\n        required: ['objectiveId'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.swarmCoordinator) {\n          throw new Error('Swarm coordinator not available');\n        }\n\n        try {\n          const result = await context.swarmCoordinator.executeObjective(input.objectiveId);\n\n          logger.info('Swarm objective executed via MCP', { objectiveId: input.objectiveId });\n\n          return {\n            success: true,\n            objectiveId: input.objectiveId,\n            result,\n            message: 'Objective execution started',\n          };\n        } catch (error) {\n          logger.error('Failed to execute swarm objective via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'swarm/get-status',\n      description: 'Get comprehensive swarm status',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          includeDetails: { type: 'boolean', default: false },\n        },\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.swarmCoordinator) {\n          throw new Error('Swarm coordinator not available');\n        }\n\n        try {\n          const status = await context.swarmCoordinator.getSwarmStatus();\n\n          if (input.includeDetails) {\n            const detailedStatus = {\n              ...status,\n              objectives: await context.swarmCoordinator.getActiveObjectives(),\n              agents: context.agentManager ? await context.agentManager.getAllAgents() : [],\n              resources: context.resourceManager\n                ? context.resourceManager.getManagerStatistics()\n                : null,\n              messaging: context.messageBus ? context.messageBus.getMetrics() : null,\n              monitoring: context.monitor ? context.monitor.getMonitoringStatistics() : null,\n            };\n            return detailedStatus;\n          }\n\n          return status;\n        } catch (error) {\n          logger.error('Failed to get swarm status via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    // === AGENT MANAGEMENT TOOLS ===\n    {\n      name: 'agent/create',\n      description: 'Create a new agent in the swarm',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: { type: 'string', description: 'Agent type (developer, researcher, etc.)' },\n          capabilities: {\n            type: 'object',\n            properties: {\n              domains: { type: 'array', items: { type: 'string' } },\n              tools: { type: 'array', items: { type: 'string' } },\n              languages: { type: 'array', items: { type: 'string' } },\n              frameworks: { type: 'array', items: { type: 'string' } },\n            },\n          },\n          config: { type: 'object', description: 'Agent configuration' },\n        },\n        required: ['type'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.agentManager) {\n          throw new Error('Agent manager not available');\n        }\n\n        try {\n          const agentId = await context.agentManager.createAgent(\n            input.type,\n            input.capabilities || {},\n            input.config || {},\n          );\n\n          logger.info('Agent created via MCP', { agentId, type: input.type });\n\n          return {\n            success: true,\n            agentId,\n            message: `Created ${input.type} agent`,\n          };\n        } catch (error) {\n          logger.error('Failed to create agent via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'agent/list',\n      description: 'List all agents with their status',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          status: {\n            type: 'string',\n            enum: ['active', 'idle', 'busy', 'failed', 'all'],\n            default: 'all',\n          },\n        },\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.agentManager) {\n          throw new Error('Agent manager not available');\n        }\n\n        try {\n          const agents = await context.agentManager.getAllAgents();\n\n          const filteredAgents =\n            input.status === 'all'\n              ? agents\n              : agents.filter((agent: any) => agent.status === input.status);\n\n          return {\n            success: true,\n            agents: filteredAgents,\n            count: filteredAgents.length,\n            filter: input.status,\n          };\n        } catch (error) {\n          logger.error('Failed to list agents via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    // === RESOURCE MANAGEMENT TOOLS ===\n    {\n      name: 'resource/register',\n      description: 'Register a new resource',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: ['compute', 'storage', 'network', 'memory', 'gpu', 'custom'],\n          },\n          name: { type: 'string', description: 'Resource name' },\n          capacity: {\n            type: 'object',\n            properties: {\n              cpu: { type: 'number' },\n              memory: { type: 'number' },\n              disk: { type: 'number' },\n              network: { type: 'number' },\n            },\n          },\n          metadata: { type: 'object', description: 'Additional metadata' },\n        },\n        required: ['type', 'name', 'capacity'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.resourceManager) {\n          throw new Error('Resource manager not available');\n        }\n\n        try {\n          const resourceId = await context.resourceManager.registerResource(\n            input.type,\n            input.name,\n            input.capacity,\n            input.metadata || {},\n          );\n\n          logger.info('Resource registered via MCP', { resourceId, type: input.type });\n\n          return {\n            success: true,\n            resourceId,\n            message: `Registered ${input.type} resource: ${input.name}`,\n          };\n        } catch (error) {\n          logger.error('Failed to register resource via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'resource/get-statistics',\n      description: 'Get resource manager statistics',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.resourceManager) {\n          throw new Error('Resource manager not available');\n        }\n\n        try {\n          const stats = context.resourceManager.getManagerStatistics();\n          return {\n            success: true,\n            statistics: stats,\n          };\n        } catch (error) {\n          logger.error('Failed to get resource statistics via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    // === MESSAGING TOOLS ===\n    {\n      name: 'message/send',\n      description: 'Send a message through the message bus',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: { type: 'string', description: 'Message type' },\n          content: { type: 'object', description: 'Message content' },\n          sender: { type: 'string', description: 'Sender agent ID' },\n          receivers: {\n            type: 'array',\n            items: { type: 'string' },\n            description: 'Receiver agent IDs',\n          },\n          priority: { type: 'string', enum: ['low', 'normal', 'high', 'critical'] },\n          channel: { type: 'string', description: 'Optional channel to use' },\n        },\n        required: ['type', 'content', 'sender', 'receivers'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.messageBus) {\n          throw new Error('Message bus not available');\n        }\n\n        try {\n          const senderAgent = {\n            id: input.sender,\n            swarmId: 'default',\n            type: 'coordinator',\n            instance: 1,\n          };\n          const receiverAgents = input.receivers.map((id: string) => ({\n            id,\n            swarmId: 'default',\n            type: 'coordinator',\n            instance: 1,\n          }));\n\n          const messageId = await context.messageBus.sendMessage(\n            input.type,\n            input.content,\n            senderAgent,\n            receiverAgents,\n            {\n              priority: input.priority || 'normal',\n              channel: input.channel,\n            },\n          );\n\n          logger.info('Message sent via MCP', { messageId, type: input.type });\n\n          return {\n            success: true,\n            messageId,\n            message: 'Message sent successfully',\n          };\n        } catch (error) {\n          logger.error('Failed to send message via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'message/get-metrics',\n      description: 'Get message bus metrics',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.messageBus) {\n          throw new Error('Message bus not available');\n        }\n\n        try {\n          const metrics = context.messageBus.getMetrics();\n          return {\n            success: true,\n            metrics,\n          };\n        } catch (error) {\n          logger.error('Failed to get message metrics via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    // === MONITORING TOOLS ===\n    {\n      name: 'monitor/get-metrics',\n      description: 'Get system monitoring metrics',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: ['system', 'swarm', 'agents', 'all'],\n            default: 'all',\n          },\n        },\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.monitor) {\n          throw new Error('Monitor not available');\n        }\n\n        try {\n          const metrics: any = {};\n\n          if (input.type === 'system' || input.type === 'all') {\n            metrics.system = context.monitor.getSystemMetrics();\n          }\n\n          if (input.type === 'swarm' || input.type === 'all') {\n            metrics.swarm = context.monitor.getSwarmMetrics();\n          }\n\n          if (input.type === 'agents' || input.type === 'all') {\n            metrics.statistics = context.monitor.getMonitoringStatistics();\n          }\n\n          return {\n            success: true,\n            metrics,\n          };\n        } catch (error) {\n          logger.error('Failed to get monitoring metrics via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'monitor/get-alerts',\n      description: 'Get active alerts',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          level: {\n            type: 'string',\n            enum: ['info', 'warning', 'critical', 'all'],\n            default: 'all',\n          },\n          limit: { type: 'number', default: 50 },\n        },\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        if (!context?.monitor) {\n          throw new Error('Monitor not available');\n        }\n\n        try {\n          let alerts = context.monitor.getActiveAlerts();\n\n          if (input.level !== 'all') {\n            alerts = alerts.filter((alert: any) => alert.level === input.level);\n          }\n\n          alerts = alerts.slice(0, input.limit);\n\n          return {\n            success: true,\n            alerts,\n            count: alerts.length,\n          };\n        } catch (error) {\n          logger.error('Failed to get alerts via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    // === UTILITY TOOLS ===\n    {\n      name: 'swarm/get-comprehensive-status',\n      description: 'Get comprehensive status of the entire swarm system',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        try {\n          const status: any = {\n            timestamp: new Date(),\n            system: 'operational',\n          };\n\n          if (context?.swarmCoordinator) {\n            status.swarm = await context.swarmCoordinator.getSwarmStatus();\n          }\n\n          if (context?.agentManager) {\n            const agents = await context.agentManager.getAllAgents();\n            status.agents = {\n              total: agents.length,\n              active: agents.filter((a: any) => a.status === 'active').length,\n              idle: agents.filter((a: any) => a.status === 'idle').length,\n              busy: agents.filter((a: any) => a.status === 'busy').length,\n              failed: agents.filter((a: any) => a.status === 'failed').length,\n            };\n          }\n\n          if (context?.resourceManager) {\n            status.resources = context.resourceManager.getManagerStatistics();\n          }\n\n          if (context?.messageBus) {\n            status.messaging = context.messageBus.getMetrics();\n          }\n\n          if (context?.monitor) {\n            status.monitoring = context.monitor.getMonitoringStatistics();\n            status.systemMetrics = context.monitor.getSystemMetrics();\n            status.swarmMetrics = context.monitor.getSwarmMetrics();\n            status.activeAlerts = context.monitor.getActiveAlerts().length;\n          }\n\n          return {\n            success: true,\n            status,\n          };\n        } catch (error) {\n          logger.error('Failed to get comprehensive status via MCP', error);\n          throw error;\n        }\n      },\n    },\n\n    {\n      name: 'swarm/emergency-stop',\n      description: 'Emergency stop of all swarm operations',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          reason: { type: 'string', description: 'Reason for emergency stop' },\n          force: { type: 'boolean', default: false },\n        },\n        required: ['reason'],\n      },\n      handler: async (input: any, context?: SwarmToolContext) => {\n        logger.warn('Emergency stop initiated via MCP', { reason: input.reason });\n\n        const results: any = {\n          reason: input.reason,\n          timestamp: new Date(),\n          components: {},\n        };\n\n        try {\n          // Stop swarm coordinator\n          if (context?.swarmCoordinator) {\n            await context.swarmCoordinator.emergencyStop(input.reason);\n            results.components.swarmCoordinator = 'stopped';\n          }\n\n          // Stop all agents\n          if (context?.agentManager) {\n            await context.agentManager.stopAllAgents();\n            results.components.agentManager = 'stopped';\n          }\n\n          // Release all resources (if method exists)\n          if (context?.resourceManager?.releaseAllAllocations) {\n            await context.resourceManager.releaseAllAllocations();\n            results.components.resourceManager = 'resources_released';\n          }\n\n          // Stop message bus\n          if (context?.messageBus?.shutdown) {\n            await context.messageBus.shutdown();\n            results.components.messageBus = 'stopped';\n          }\n\n          results.success = true;\n          results.message = 'Emergency stop completed successfully';\n\n          logger.info('Emergency stop completed via MCP', results);\n\n          return results;\n        } catch (error) {\n          logger.error('Emergency stop failed via MCP', error);\n          results.success = false;\n          results.error = error instanceof Error ? error.message : 'Unknown error';\n          throw error;\n        }\n      },\n    },\n  ];\n}\n\n// Legacy exports for backward compatibility\nexport const dispatchAgentTool = {\n  name: 'dispatch_agent',\n  description: 'Spawn a new agent in the swarm to handle a specific task',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      type: {\n        type: 'string',\n        enum: ['researcher', 'coder', 'analyst', 'reviewer', 'coordinator'],\n        description: 'The type of agent to spawn',\n      },\n      task: {\n        type: 'string',\n        description: 'The specific task for the agent to complete',\n      },\n      name: {\n        type: 'string',\n        description: 'Optional name for the agent',\n      },\n    },\n    required: ['type', 'task'],\n  },\n};\n\nexport const memoryStoreTool = {\n  name: 'memory_store',\n  description: 'Store data in the shared swarm memory for coordination',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      key: {\n        type: 'string',\n        description: 'The key to store data under',\n      },\n      value: {\n        type: 'object',\n        description: 'The data to store (JSON object)',\n      },\n    },\n    required: ['key', 'value'],\n  },\n};\n\nexport const memoryRetrieveTool = {\n  name: 'memory_retrieve',\n  description: 'Retrieve data from the shared swarm memory',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      key: {\n        type: 'string',\n        description: 'The key to retrieve data from',\n      },\n    },\n    required: ['key'],\n  },\n};\n\nexport const swarmStatusTool = {\n  name: 'swarm_status',\n  description: 'Get the current status of the swarm and all agents',\n  inputSchema: {\n    type: 'object',\n    properties: {},\n  },\n};\n\n// Legacy handler functions\nexport async function handleDispatchAgent(args: any): Promise<any> {\n  const { type, task, name } = args;\n\n  const swarmId = process.env['CLAUDE_SWARM_ID'];\n  if (!swarmId) {\n    throw new Error('Not running in swarm context');\n  }\n\n  const parentId = process.env['CLAUDE_SWARM_AGENT_ID'];\n\n  try {\n    // Legacy functionality - would integrate with swarm spawn system\n    const agentId = `agent-${Date.now()}`;\n\n    return {\n      success: true,\n      agentId,\n      agentName: name || type,\n      terminalId: 'N/A',\n      message: `Successfully spawned ${name || type} to work on: ${task}`,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\nexport async function handleSwarmStatus(args: any): Promise<any> {\n  const swarmId = process.env['CLAUDE_SWARM_ID'] || 'default-swarm';\n\n  // Legacy functionality - would integrate with swarm state system\n  const mockState = {\n    swarmId,\n    objective: 'Legacy swarm status',\n    startTime: Date.now() - 60000, // Started 1 minute ago\n    agents: [],\n  };\n\n  const runtime = Math.floor((Date.now() - mockState.startTime) / 1000);\n\n  return {\n    swarmId: mockState.swarmId,\n    objective: mockState.objective,\n    runtime: `${runtime}s`,\n    totalAgents: mockState.agents.length,\n    activeAgents: 0,\n    completedAgents: 0,\n    failedAgents: 0,\n    agents: mockState.agents,\n  };\n}\n\nexport const swarmTools = [dispatchAgentTool, memoryStoreTool, memoryRetrieveTool, swarmStatusTool];\n"],"names":["createSwarmTools","logger","name","description","inputSchema","type","properties","enum","task","required","handler","input","context","swarmId","process","env","Error","parentId","agentId","Date","now","info","success","agentName","terminalId","message","error","mockState","objective","startTime","agents","runtime","Math","floor","totalAgents","length","activeAgents","completedAgents","failedAgents","title","tasks","items","requirements","priority","strategy","timeout","swarmCoordinator","objectiveId","createObjective","result","executeObjective","includeDetails","default","status","getSwarmStatus","detailedStatus","objectives","getActiveObjectives","agentManager","getAllAgents","resources","resourceManager","getManagerStatistics","messaging","messageBus","getMetrics","monitoring","monitor","getMonitoringStatistics","capabilities","domains","tools","languages","frameworks","config","createAgent","filteredAgents","filter","agent","count","capacity","cpu","memory","disk","network","metadata","resourceId","registerResource","stats","statistics","content","sender","receivers","channel","senderAgent","id","instance","receiverAgents","map","messageId","sendMessage","metrics","system","getSystemMetrics","swarm","getSwarmMetrics","level","limit","alerts","getActiveAlerts","alert","slice","timestamp","total","active","a","idle","busy","failed","systemMetrics","swarmMetrics","activeAlerts","reason","force","warn","results","components","emergencyStop","stopAllAgents","releaseAllAllocations","shutdown","dispatchAgentTool","memoryStoreTool","key","value","memoryRetrieveTool","swarmStatusTool","handleDispatchAgent","args","handleSwarmStatus","swarmTools"],"mappings":"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"}