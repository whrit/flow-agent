{"version":3,"sources":["../../../src/mcp/load-balancer.ts"],"sourcesContent":["/**\n * Load balancer and rate limiting for MCP\n */\n\nimport type { MCPLoadBalancerConfig, MCPRequest, MCPResponse, MCPSession } from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\nimport { MCPError } from '../utils/errors.js';\n\nexport interface RequestMetrics {\n  requestId: string;\n  sessionId: string;\n  method: string;\n  startTime: number;\n  endTime?: number;\n  success?: boolean;\n  error?: string;\n}\n\nexport interface LoadBalancerMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  rateLimitedRequests: number;\n  averageResponseTime: number;\n  requestsPerSecond: number;\n  circuitBreakerTrips: number;\n  lastReset: Date;\n}\n\nexport interface ILoadBalancer {\n  shouldAllowRequest(session: MCPSession, request: MCPRequest): Promise<boolean>;\n  recordRequestStart(session: MCPSession, request: MCPRequest): RequestMetrics;\n  recordRequestEnd(metrics: RequestMetrics, response?: MCPResponse, error?: Error): void;\n  getMetrics(): LoadBalancerMetrics;\n  resetMetrics(): void;\n  isCircuitBreakerOpen(): boolean;\n}\n\n/**\n * Circuit breaker state\n */\nenum CircuitBreakerState {\n  CLOSED = 'closed',\n  OPEN = 'open',\n  HALF_OPEN = 'half_open',\n}\n\n/**\n * Rate limiter using token bucket algorithm\n */\nclass RateLimiter {\n  private tokens: number;\n  private lastRefill: number;\n\n  constructor(\n    private maxTokens: number,\n    private refillRate: number, // tokens per second\n  ) {\n    this.tokens = maxTokens;\n    this.lastRefill = Date.now();\n  }\n\n  tryConsume(tokens = 1): boolean {\n    this.refill();\n\n    if (this.tokens >= tokens) {\n      this.tokens -= tokens;\n      return true;\n    }\n\n    return false;\n  }\n\n  private refill(): void {\n    const now = Date.now();\n    const timePassed = (now - this.lastRefill) / 1000;\n    const tokensToAdd = Math.floor(timePassed * this.refillRate);\n\n    if (tokensToAdd > 0) {\n      this.tokens = Math.min(this.maxTokens, this.tokens + tokensToAdd);\n      this.lastRefill = now;\n    }\n  }\n\n  getTokens(): number {\n    this.refill();\n    return this.tokens;\n  }\n}\n\n/**\n * Circuit breaker implementation\n */\nclass CircuitBreaker {\n  private state = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private lastFailureTime = 0;\n  private successCount = 0;\n\n  constructor(\n    private failureThreshold: number,\n    private recoveryTimeout: number, // milliseconds\n    private halfOpenMaxRequests = 3,\n  ) {}\n\n  canExecute(): boolean {\n    const now = Date.now();\n\n    switch (this.state) {\n      case CircuitBreakerState.CLOSED:\n        return true;\n\n      case CircuitBreakerState.OPEN:\n        if (now - this.lastFailureTime >= this.recoveryTimeout) {\n          this.state = CircuitBreakerState.HALF_OPEN;\n          this.successCount = 0;\n          return true;\n        }\n        return false;\n\n      case CircuitBreakerState.HALF_OPEN:\n        return this.successCount < this.halfOpenMaxRequests;\n\n      default:\n        return false;\n    }\n  }\n\n  recordSuccess(): void {\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.successCount++;\n      if (this.successCount >= this.halfOpenMaxRequests) {\n        this.state = CircuitBreakerState.CLOSED;\n        this.failureCount = 0;\n      }\n    } else if (this.state === CircuitBreakerState.CLOSED) {\n      this.failureCount = 0;\n    }\n  }\n\n  recordFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.state = CircuitBreakerState.OPEN;\n    } else if (\n      this.state === CircuitBreakerState.CLOSED &&\n      this.failureCount >= this.failureThreshold\n    ) {\n      this.state = CircuitBreakerState.OPEN;\n    }\n  }\n\n  getState(): CircuitBreakerState {\n    return this.state;\n  }\n\n  getMetrics(): { state: string; failureCount: number; successCount: number } {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n    };\n  }\n}\n\n/**\n * Load balancer implementation\n */\nexport class LoadBalancer implements ILoadBalancer {\n  private rateLimiter: RateLimiter;\n  private circuitBreaker: CircuitBreaker;\n  private sessionRateLimiters = new Map<string, RateLimiter>();\n  private metrics: LoadBalancerMetrics;\n  private requestTimes: number[] = [];\n  private requestsInLastSecond = 0;\n  private lastSecondTimestamp = 0;\n\n  constructor(\n    private config: MCPLoadBalancerConfig,\n    private logger: ILogger,\n  ) {\n    this.rateLimiter = new RateLimiter(config.maxRequestsPerSecond, config.maxRequestsPerSecond);\n\n    this.circuitBreaker = new CircuitBreaker(\n      config.circuitBreakerThreshold,\n      30000, // 30 second recovery timeout\n    );\n\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      rateLimitedRequests: 0,\n      averageResponseTime: 0,\n      requestsPerSecond: 0,\n      circuitBreakerTrips: 0,\n      lastReset: new Date(),\n    };\n\n    // Clean up old session rate limiters periodically\n    setInterval(() => {\n      this.cleanupSessionRateLimiters();\n    }, 300000); // Every 5 minutes\n  }\n\n  async shouldAllowRequest(session: MCPSession, request: MCPRequest): Promise<boolean> {\n    if (!this.config.enabled) {\n      return true;\n    }\n\n    // Check circuit breaker\n    if (!this.circuitBreaker.canExecute()) {\n      this.logger.warn('Request rejected by circuit breaker', {\n        sessionId: session.id,\n        method: request.method,\n        circuitState: this.circuitBreaker.getState(),\n      });\n      this.metrics.circuitBreakerTrips++;\n      return false;\n    }\n\n    // Check global rate limit\n    if (!this.rateLimiter.tryConsume()) {\n      this.logger.warn('Request rejected by global rate limiter', {\n        sessionId: session.id,\n        method: request.method,\n        remainingTokens: this.rateLimiter.getTokens(),\n      });\n      this.metrics.rateLimitedRequests++;\n      return false;\n    }\n\n    // Check per-session rate limit\n    const sessionRateLimiter = this.getSessionRateLimiter(session.id);\n    if (!sessionRateLimiter.tryConsume()) {\n      this.logger.warn('Request rejected by session rate limiter', {\n        sessionId: session.id,\n        method: request.method,\n        remainingTokens: sessionRateLimiter.getTokens(),\n      });\n      this.metrics.rateLimitedRequests++;\n      return false;\n    }\n\n    return true;\n  }\n\n  recordRequestStart(session: MCPSession, request: MCPRequest): RequestMetrics {\n    const requestMetrics: RequestMetrics = {\n      requestId: request.id.toString(),\n      sessionId: session.id,\n      method: request.method,\n      startTime: Date.now(),\n    };\n\n    this.metrics.totalRequests++;\n    this.updateRequestsPerSecond();\n\n    this.logger.debug('Request started', {\n      requestId: requestMetrics.requestId,\n      sessionId: session.id,\n      method: request.method,\n    });\n\n    return requestMetrics;\n  }\n\n  recordRequestEnd(metrics: RequestMetrics, response?: MCPResponse, error?: Error): void {\n    metrics.endTime = Date.now();\n    const duration = metrics.endTime - metrics.startTime;\n\n    // Update response time tracking\n    this.requestTimes.push(duration);\n    if (this.requestTimes.length > 1000) {\n      this.requestTimes.shift(); // Keep only last 1000 requests\n    }\n\n    const success = !error && (!response || !response.error);\n    metrics.success = success;\n    const errorMessage = error?.message || response?.error?.message;\n    if (errorMessage) {\n      metrics.error = errorMessage;\n    }\n\n    if (success) {\n      this.metrics.successfulRequests++;\n      this.circuitBreaker.recordSuccess();\n    } else {\n      this.metrics.failedRequests++;\n      this.circuitBreaker.recordFailure();\n    }\n\n    // Update average response time\n    this.metrics.averageResponseTime = this.calculateAverageResponseTime();\n\n    this.logger.debug('Request completed', {\n      requestId: metrics.requestId,\n      sessionId: metrics.sessionId,\n      method: metrics.method,\n      duration,\n      success,\n      error: metrics.error,\n    });\n  }\n\n  getMetrics(): LoadBalancerMetrics {\n    return { ...this.metrics };\n  }\n\n  resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      rateLimitedRequests: 0,\n      averageResponseTime: 0,\n      requestsPerSecond: 0,\n      circuitBreakerTrips: 0,\n      lastReset: new Date(),\n    };\n    this.requestTimes = [];\n\n    this.logger.info('Load balancer metrics reset');\n  }\n\n  isCircuitBreakerOpen(): boolean {\n    return this.circuitBreaker.getState() === CircuitBreakerState.OPEN;\n  }\n\n  getDetailedMetrics(): {\n    loadBalancer: LoadBalancerMetrics;\n    circuitBreaker: { state: string; failureCount: number; successCount: number };\n    rateLimiter: { tokens: number; maxTokens: number };\n    sessions: number;\n  } {\n    return {\n      loadBalancer: this.getMetrics(),\n      circuitBreaker: this.circuitBreaker.getMetrics(),\n      rateLimiter: {\n        tokens: this.rateLimiter.getTokens(),\n        maxTokens: this.config.maxRequestsPerSecond,\n      },\n      sessions: this.sessionRateLimiters.size,\n    };\n  }\n\n  private getSessionRateLimiter(sessionId: string): RateLimiter {\n    let rateLimiter = this.sessionRateLimiters.get(sessionId);\n\n    if (!rateLimiter) {\n      // Create a per-session rate limiter (more restrictive than global)\n      const sessionLimit = Math.max(1, Math.floor(this.config.maxRequestsPerSecond / 10));\n      rateLimiter = new RateLimiter(sessionLimit, sessionLimit);\n      this.sessionRateLimiters.set(sessionId, rateLimiter);\n    }\n\n    return rateLimiter;\n  }\n\n  private calculateAverageResponseTime(): number {\n    if (this.requestTimes.length === 0) {\n      return 0;\n    }\n\n    const sum = this.requestTimes.reduce((acc, time) => acc + time, 0);\n    return sum / this.requestTimes.length;\n  }\n\n  private updateRequestsPerSecond(): void {\n    const now = Math.floor(Date.now() / 1000);\n\n    if (now !== this.lastSecondTimestamp) {\n      this.metrics.requestsPerSecond = this.requestsInLastSecond;\n      this.requestsInLastSecond = 1;\n      this.lastSecondTimestamp = now;\n    } else {\n      this.requestsInLastSecond++;\n    }\n  }\n\n  private cleanupSessionRateLimiters(): void {\n    // Remove rate limiters for sessions that haven't been used recently\n    const cutoffTime = Date.now() - 300000; // 5 minutes ago\n    let cleaned = 0;\n\n    for (const [sessionId, rateLimiter] of this.sessionRateLimiters.entries()) {\n      // If the rate limiter has full tokens, it hasn't been used recently\n      if (rateLimiter.getTokens() === this.config.maxRequestsPerSecond) {\n        this.sessionRateLimiters.delete(sessionId);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      this.logger.debug('Cleaned up session rate limiters', { count: cleaned });\n    }\n  }\n}\n\n/**\n * Request queue for handling backpressure\n */\nexport class RequestQueue {\n  private queue: Array<{\n    session: MCPSession;\n    request: MCPRequest;\n    resolve: (result: any) => void;\n    reject: (error: Error) => void;\n    timestamp: number;\n  }> = [];\n\n  private processing = false;\n  private maxQueueSize: number;\n  private requestTimeout: number;\n\n  constructor(\n    maxQueueSize = 1000,\n    requestTimeout = 30000, // 30 seconds\n    private logger: ILogger,\n  ) {\n    this.maxQueueSize = maxQueueSize;\n    this.requestTimeout = requestTimeout;\n\n    // Clean up expired requests periodically\n    setInterval(() => {\n      this.cleanupExpiredRequests();\n    }, 10000); // Every 10 seconds\n  }\n\n  async enqueue<T>(\n    session: MCPSession,\n    request: MCPRequest,\n    processor: (session: MCPSession, request: MCPRequest) => Promise<T>,\n  ): Promise<T> {\n    if (this.queue.length >= this.maxQueueSize) {\n      throw new MCPError('Request queue is full');\n    }\n\n    return new Promise<T>((resolve, reject) => {\n      this.queue.push({\n        session,\n        request,\n        resolve,\n        reject,\n        timestamp: Date.now(),\n      });\n\n      if (!this.processing) {\n        this.processQueue(processor);\n      }\n    });\n  }\n\n  private async processQueue<T>(\n    processor: (session: MCPSession, request: MCPRequest) => Promise<T>,\n  ): Promise<void> {\n    if (this.processing) {\n      return;\n    }\n\n    this.processing = true;\n\n    while (this.queue.length > 0) {\n      const item = this.queue.shift()!;\n\n      // Check if request has expired\n      if (Date.now() - item.timestamp > this.requestTimeout) {\n        item.reject(new MCPError('Request timeout'));\n        continue;\n      }\n\n      try {\n        const result = await processor(item.session, item.request);\n        item.resolve(result);\n      } catch (error) {\n        item.reject(error instanceof Error ? error : new Error(String(error)));\n      }\n    }\n\n    this.processing = false;\n  }\n\n  private cleanupExpiredRequests(): void {\n    const now = Date.now();\n    let cleaned = 0;\n\n    this.queue = this.queue.filter((item) => {\n      if (now - item.timestamp > this.requestTimeout) {\n        item.reject(new MCPError('Request timeout'));\n        cleaned++;\n        return false;\n      }\n      return true;\n    });\n\n    if (cleaned > 0) {\n      this.logger.warn('Cleaned up expired requests from queue', { count: cleaned });\n    }\n  }\n\n  getQueueSize(): number {\n    return this.queue.length;\n  }\n\n  isProcessing(): boolean {\n    return this.processing;\n  }\n}\n"],"names":["MCPError","CircuitBreakerState","RateLimiter","tokens","lastRefill","maxTokens","refillRate","Date","now","tryConsume","refill","timePassed","tokensToAdd","Math","floor","min","getTokens","CircuitBreaker","state","failureCount","lastFailureTime","successCount","failureThreshold","recoveryTimeout","halfOpenMaxRequests","canExecute","recordSuccess","recordFailure","getState","getMetrics","LoadBalancer","rateLimiter","circuitBreaker","sessionRateLimiters","Map","metrics","requestTimes","requestsInLastSecond","lastSecondTimestamp","config","logger","maxRequestsPerSecond","circuitBreakerThreshold","totalRequests","successfulRequests","failedRequests","rateLimitedRequests","averageResponseTime","requestsPerSecond","circuitBreakerTrips","lastReset","setInterval","cleanupSessionRateLimiters","shouldAllowRequest","session","request","enabled","warn","sessionId","id","method","circuitState","remainingTokens","sessionRateLimiter","getSessionRateLimiter","recordRequestStart","requestMetrics","requestId","toString","startTime","updateRequestsPerSecond","debug","recordRequestEnd","response","error","endTime","duration","push","length","shift","success","errorMessage","message","calculateAverageResponseTime","resetMetrics","info","isCircuitBreakerOpen","getDetailedMetrics","loadBalancer","sessions","size","get","sessionLimit","max","set","sum","reduce","acc","time","cutoffTime","cleaned","entries","delete","count","RequestQueue","queue","processing","maxQueueSize","requestTimeout","cleanupExpiredRequests","enqueue","processor","Promise","resolve","reject","timestamp","processQueue","item","result","Error","String","filter","getQueueSize","isProcessing"],"mappings":"AAMA,SAASA,QAAQ,QAAQ,qBAAqB;AAmC9C,IAAA,AAAKC,6CAAAA;;;;WAAAA;EAAAA;AASL,IAAA,AAAMC,cAAN,MAAMA;;;IACIC,OAAe;IACfC,WAAmB;IAE3B,YACE,AAAQC,SAAiB,EACzB,AAAQC,UAAkB,CAC1B;aAFQD,YAAAA;aACAC,aAAAA;QAER,IAAI,CAACH,MAAM,GAAGE;QACd,IAAI,CAACD,UAAU,GAAGG,KAAKC,GAAG;IAC5B;IAEAC,WAAWN,SAAS,CAAC,EAAW;QAC9B,IAAI,CAACO,MAAM;QAEX,IAAI,IAAI,CAACP,MAAM,IAAIA,QAAQ;YACzB,IAAI,CAACA,MAAM,IAAIA;YACf,OAAO;QACT;QAEA,OAAO;IACT;IAEQO,SAAe;QACrB,MAAMF,MAAMD,KAAKC,GAAG;QACpB,MAAMG,aAAa,AAACH,CAAAA,MAAM,IAAI,CAACJ,UAAU,AAAD,IAAK;QAC7C,MAAMQ,cAAcC,KAAKC,KAAK,CAACH,aAAa,IAAI,CAACL,UAAU;QAE3D,IAAIM,cAAc,GAAG;YACnB,IAAI,CAACT,MAAM,GAAGU,KAAKE,GAAG,CAAC,IAAI,CAACV,SAAS,EAAE,IAAI,CAACF,MAAM,GAAGS;YACrD,IAAI,CAACR,UAAU,GAAGI;QACpB;IACF;IAEAQ,YAAoB;QAClB,IAAI,CAACN,MAAM;QACX,OAAO,IAAI,CAACP,MAAM;IACpB;AACF;AAKA,IAAA,AAAMc,iBAAN,MAAMA;;;;IACIC,iBAAmC;IACnCC,eAAe,EAAE;IACjBC,kBAAkB,EAAE;IACpBC,eAAe,EAAE;IAEzB,YACE,AAAQC,gBAAwB,EAChC,AAAQC,eAAuB,EAC/B,AAAQC,sBAAsB,CAAC,CAC/B;aAHQF,mBAAAA;aACAC,kBAAAA;aACAC,sBAAAA;IACP;IAEHC,aAAsB;QACpB,MAAMjB,MAAMD,KAAKC,GAAG;QAEpB,OAAQ,IAAI,CAACU,KAAK;YAChB;gBACE,OAAO;YAET;gBACE,IAAIV,MAAM,IAAI,CAACY,eAAe,IAAI,IAAI,CAACG,eAAe,EAAE;oBACtD,IAAI,CAACL,KAAK;oBACV,IAAI,CAACG,YAAY,GAAG;oBACpB,OAAO;gBACT;gBACA,OAAO;YAET;gBACE,OAAO,IAAI,CAACA,YAAY,GAAG,IAAI,CAACG,mBAAmB;YAErD;gBACE,OAAO;QACX;IACF;IAEAE,gBAAsB;QACpB,IAAI,IAAI,CAACR,KAAK,kBAAoC;YAChD,IAAI,CAACG,YAAY;YACjB,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAACG,mBAAmB,EAAE;gBACjD,IAAI,CAACN,KAAK;gBACV,IAAI,CAACC,YAAY,GAAG;YACtB;QACF,OAAO,IAAI,IAAI,CAACD,KAAK,eAAiC;YACpD,IAAI,CAACC,YAAY,GAAG;QACtB;IACF;IAEAQ,gBAAsB;QACpB,IAAI,CAACR,YAAY;QACjB,IAAI,CAACC,eAAe,GAAGb,KAAKC,GAAG;QAE/B,IAAI,IAAI,CAACU,KAAK,kBAAoC;YAChD,IAAI,CAACA,KAAK;QACZ,OAAO,IACL,IAAI,CAACA,KAAK,iBACV,IAAI,CAACC,YAAY,IAAI,IAAI,CAACG,gBAAgB,EAC1C;YACA,IAAI,CAACJ,KAAK;QACZ;IACF;IAEAU,WAAgC;QAC9B,OAAO,IAAI,CAACV,KAAK;IACnB;IAEAW,aAA4E;QAC1E,OAAO;YACLX,OAAO,IAAI,CAACA,KAAK;YACjBC,cAAc,IAAI,CAACA,YAAY;YAC/BE,cAAc,IAAI,CAACA,YAAY;QACjC;IACF;AACF;AAKA,OAAO,MAAMS;;;IACHC,YAAyB;IACzBC,eAA+B;IAC/BC,sBAAsB,IAAIC,MAA2B;IACrDC,QAA6B;IAC7BC,eAAyB,EAAE,CAAC;IAC5BC,uBAAuB,EAAE;IACzBC,sBAAsB,EAAE;IAEhC,YACE,AAAQC,MAA6B,EACrC,AAAQC,MAAe,CACvB;aAFQD,SAAAA;aACAC,SAAAA;QAER,IAAI,CAACT,WAAW,GAAG,IAAI7B,YAAYqC,OAAOE,oBAAoB,EAAEF,OAAOE,oBAAoB;QAE3F,IAAI,CAACT,cAAc,GAAG,IAAIf,eACxBsB,OAAOG,uBAAuB,EAC9B;QAGF,IAAI,CAACP,OAAO,GAAG;YACbQ,eAAe;YACfC,oBAAoB;YACpBC,gBAAgB;YAChBC,qBAAqB;YACrBC,qBAAqB;YACrBC,mBAAmB;YACnBC,qBAAqB;YACrBC,WAAW,IAAI3C;QACjB;QAGA4C,YAAY;YACV,IAAI,CAACC,0BAA0B;QACjC,GAAG;IACL;IAEA,MAAMC,mBAAmBC,OAAmB,EAAEC,OAAmB,EAAoB;QACnF,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACiB,OAAO,EAAE;YACxB,OAAO;QACT;QAGA,IAAI,CAAC,IAAI,CAACxB,cAAc,CAACP,UAAU,IAAI;YACrC,IAAI,CAACe,MAAM,CAACiB,IAAI,CAAC,uCAAuC;gBACtDC,WAAWJ,QAAQK,EAAE;gBACrBC,QAAQL,QAAQK,MAAM;gBACtBC,cAAc,IAAI,CAAC7B,cAAc,CAACJ,QAAQ;YAC5C;YACA,IAAI,CAACO,OAAO,CAACc,mBAAmB;YAChC,OAAO;QACT;QAGA,IAAI,CAAC,IAAI,CAAClB,WAAW,CAACtB,UAAU,IAAI;YAClC,IAAI,CAAC+B,MAAM,CAACiB,IAAI,CAAC,2CAA2C;gBAC1DC,WAAWJ,QAAQK,EAAE;gBACrBC,QAAQL,QAAQK,MAAM;gBACtBE,iBAAiB,IAAI,CAAC/B,WAAW,CAACf,SAAS;YAC7C;YACA,IAAI,CAACmB,OAAO,CAACW,mBAAmB;YAChC,OAAO;QACT;QAGA,MAAMiB,qBAAqB,IAAI,CAACC,qBAAqB,CAACV,QAAQK,EAAE;QAChE,IAAI,CAACI,mBAAmBtD,UAAU,IAAI;YACpC,IAAI,CAAC+B,MAAM,CAACiB,IAAI,CAAC,4CAA4C;gBAC3DC,WAAWJ,QAAQK,EAAE;gBACrBC,QAAQL,QAAQK,MAAM;gBACtBE,iBAAiBC,mBAAmB/C,SAAS;YAC/C;YACA,IAAI,CAACmB,OAAO,CAACW,mBAAmB;YAChC,OAAO;QACT;QAEA,OAAO;IACT;IAEAmB,mBAAmBX,OAAmB,EAAEC,OAAmB,EAAkB;QAC3E,MAAMW,iBAAiC;YACrCC,WAAWZ,QAAQI,EAAE,CAACS,QAAQ;YAC9BV,WAAWJ,QAAQK,EAAE;YACrBC,QAAQL,QAAQK,MAAM;YACtBS,WAAW9D,KAAKC,GAAG;QACrB;QAEA,IAAI,CAAC2B,OAAO,CAACQ,aAAa;QAC1B,IAAI,CAAC2B,uBAAuB;QAE5B,IAAI,CAAC9B,MAAM,CAAC+B,KAAK,CAAC,mBAAmB;YACnCJ,WAAWD,eAAeC,SAAS;YACnCT,WAAWJ,QAAQK,EAAE;YACrBC,QAAQL,QAAQK,MAAM;QACxB;QAEA,OAAOM;IACT;IAEAM,iBAAiBrC,OAAuB,EAAEsC,QAAsB,EAAEC,KAAa,EAAQ;QACrFvC,QAAQwC,OAAO,GAAGpE,KAAKC,GAAG;QAC1B,MAAMoE,WAAWzC,QAAQwC,OAAO,GAAGxC,QAAQkC,SAAS;QAGpD,IAAI,CAACjC,YAAY,CAACyC,IAAI,CAACD;QACvB,IAAI,IAAI,CAACxC,YAAY,CAAC0C,MAAM,GAAG,MAAM;YACnC,IAAI,CAAC1C,YAAY,CAAC2C,KAAK;QACzB;QAEA,MAAMC,UAAU,CAACN,SAAU,CAAA,CAACD,YAAY,CAACA,SAASC,KAAK,AAAD;QACtDvC,QAAQ6C,OAAO,GAAGA;QAClB,MAAMC,eAAeP,OAAOQ,WAAWT,UAAUC,OAAOQ;QACxD,IAAID,cAAc;YAChB9C,QAAQuC,KAAK,GAAGO;QAClB;QAEA,IAAID,SAAS;YACX,IAAI,CAAC7C,OAAO,CAACS,kBAAkB;YAC/B,IAAI,CAACZ,cAAc,CAACN,aAAa;QACnC,OAAO;YACL,IAAI,CAACS,OAAO,CAACU,cAAc;YAC3B,IAAI,CAACb,cAAc,CAACL,aAAa;QACnC;QAGA,IAAI,CAACQ,OAAO,CAACY,mBAAmB,GAAG,IAAI,CAACoC,4BAA4B;QAEpE,IAAI,CAAC3C,MAAM,CAAC+B,KAAK,CAAC,qBAAqB;YACrCJ,WAAWhC,QAAQgC,SAAS;YAC5BT,WAAWvB,QAAQuB,SAAS;YAC5BE,QAAQzB,QAAQyB,MAAM;YACtBgB;YACAI;YACAN,OAAOvC,QAAQuC,KAAK;QACtB;IACF;IAEA7C,aAAkC;QAChC,OAAO;YAAE,GAAG,IAAI,CAACM,OAAO;QAAC;IAC3B;IAEAiD,eAAqB;QACnB,IAAI,CAACjD,OAAO,GAAG;YACbQ,eAAe;YACfC,oBAAoB;YACpBC,gBAAgB;YAChBC,qBAAqB;YACrBC,qBAAqB;YACrBC,mBAAmB;YACnBC,qBAAqB;YACrBC,WAAW,IAAI3C;QACjB;QACA,IAAI,CAAC6B,YAAY,GAAG,EAAE;QAEtB,IAAI,CAACI,MAAM,CAAC6C,IAAI,CAAC;IACnB;IAEAC,uBAAgC;QAC9B,OAAO,IAAI,CAACtD,cAAc,CAACJ,QAAQ;IACrC;IAEA2D,qBAKE;QACA,OAAO;YACLC,cAAc,IAAI,CAAC3D,UAAU;YAC7BG,gBAAgB,IAAI,CAACA,cAAc,CAACH,UAAU;YAC9CE,aAAa;gBACX5B,QAAQ,IAAI,CAAC4B,WAAW,CAACf,SAAS;gBAClCX,WAAW,IAAI,CAACkC,MAAM,CAACE,oBAAoB;YAC7C;YACAgD,UAAU,IAAI,CAACxD,mBAAmB,CAACyD,IAAI;QACzC;IACF;IAEQ1B,sBAAsBN,SAAiB,EAAe;QAC5D,IAAI3B,cAAc,IAAI,CAACE,mBAAmB,CAAC0D,GAAG,CAACjC;QAE/C,IAAI,CAAC3B,aAAa;YAEhB,MAAM6D,eAAe/E,KAAKgF,GAAG,CAAC,GAAGhF,KAAKC,KAAK,CAAC,IAAI,CAACyB,MAAM,CAACE,oBAAoB,GAAG;YAC/EV,cAAc,IAAI7B,YAAY0F,cAAcA;YAC5C,IAAI,CAAC3D,mBAAmB,CAAC6D,GAAG,CAACpC,WAAW3B;QAC1C;QAEA,OAAOA;IACT;IAEQoD,+BAAuC;QAC7C,IAAI,IAAI,CAAC/C,YAAY,CAAC0C,MAAM,KAAK,GAAG;YAClC,OAAO;QACT;QAEA,MAAMiB,MAAM,IAAI,CAAC3D,YAAY,CAAC4D,MAAM,CAAC,CAACC,KAAKC,OAASD,MAAMC,MAAM;QAChE,OAAOH,MAAM,IAAI,CAAC3D,YAAY,CAAC0C,MAAM;IACvC;IAEQR,0BAAgC;QACtC,MAAM9D,MAAMK,KAAKC,KAAK,CAACP,KAAKC,GAAG,KAAK;QAEpC,IAAIA,QAAQ,IAAI,CAAC8B,mBAAmB,EAAE;YACpC,IAAI,CAACH,OAAO,CAACa,iBAAiB,GAAG,IAAI,CAACX,oBAAoB;YAC1D,IAAI,CAACA,oBAAoB,GAAG;YAC5B,IAAI,CAACC,mBAAmB,GAAG9B;QAC7B,OAAO;YACL,IAAI,CAAC6B,oBAAoB;QAC3B;IACF;IAEQe,6BAAmC;QAEzC,MAAM+C,aAAa5F,KAAKC,GAAG,KAAK;QAChC,IAAI4F,UAAU;QAEd,KAAK,MAAM,CAAC1C,WAAW3B,YAAY,IAAI,IAAI,CAACE,mBAAmB,CAACoE,OAAO,GAAI;YAEzE,IAAItE,YAAYf,SAAS,OAAO,IAAI,CAACuB,MAAM,CAACE,oBAAoB,EAAE;gBAChE,IAAI,CAACR,mBAAmB,CAACqE,MAAM,CAAC5C;gBAChC0C;YACF;QACF;QAEA,IAAIA,UAAU,GAAG;YACf,IAAI,CAAC5D,MAAM,CAAC+B,KAAK,CAAC,oCAAoC;gBAAEgC,OAAOH;YAAQ;QACzE;IACF;AACF;AAKA,OAAO,MAAMI;;IACHC,QAMH,EAAE,CAAC;IAEAC,aAAa,MAAM;IACnBC,aAAqB;IACrBC,eAAuB;IAE/B,YACED,eAAe,IAAI,EACnBC,iBAAiB,KAAK,EACtB,AAAQpE,MAAe,CACvB;aADQA,SAAAA;QAER,IAAI,CAACmE,YAAY,GAAGA;QACpB,IAAI,CAACC,cAAc,GAAGA;QAGtBzD,YAAY;YACV,IAAI,CAAC0D,sBAAsB;QAC7B,GAAG;IACL;IAEA,MAAMC,QACJxD,OAAmB,EACnBC,OAAmB,EACnBwD,SAAmE,EACvD;QACZ,IAAI,IAAI,CAACN,KAAK,CAAC3B,MAAM,IAAI,IAAI,CAAC6B,YAAY,EAAE;YAC1C,MAAM,IAAI3G,SAAS;QACrB;QAEA,OAAO,IAAIgH,QAAW,CAACC,SAASC;YAC9B,IAAI,CAACT,KAAK,CAAC5B,IAAI,CAAC;gBACdvB;gBACAC;gBACA0D;gBACAC;gBACAC,WAAW5G,KAAKC,GAAG;YACrB;YAEA,IAAI,CAAC,IAAI,CAACkG,UAAU,EAAE;gBACpB,IAAI,CAACU,YAAY,CAACL;YACpB;QACF;IACF;IAEA,MAAcK,aACZL,SAAmE,EACpD;QACf,IAAI,IAAI,CAACL,UAAU,EAAE;YACnB;QACF;QAEA,IAAI,CAACA,UAAU,GAAG;QAElB,MAAO,IAAI,CAACD,KAAK,CAAC3B,MAAM,GAAG,EAAG;YAC5B,MAAMuC,OAAO,IAAI,CAACZ,KAAK,CAAC1B,KAAK;YAG7B,IAAIxE,KAAKC,GAAG,KAAK6G,KAAKF,SAAS,GAAG,IAAI,CAACP,cAAc,EAAE;gBACrDS,KAAKH,MAAM,CAAC,IAAIlH,SAAS;gBACzB;YACF;YAEA,IAAI;gBACF,MAAMsH,SAAS,MAAMP,UAAUM,KAAK/D,OAAO,EAAE+D,KAAK9D,OAAO;gBACzD8D,KAAKJ,OAAO,CAACK;YACf,EAAE,OAAO5C,OAAO;gBACd2C,KAAKH,MAAM,CAACxC,iBAAiB6C,QAAQ7C,QAAQ,IAAI6C,MAAMC,OAAO9C;YAChE;QACF;QAEA,IAAI,CAACgC,UAAU,GAAG;IACpB;IAEQG,yBAA+B;QACrC,MAAMrG,MAAMD,KAAKC,GAAG;QACpB,IAAI4F,UAAU;QAEd,IAAI,CAACK,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgB,MAAM,CAAC,CAACJ;YAC9B,IAAI7G,MAAM6G,KAAKF,SAAS,GAAG,IAAI,CAACP,cAAc,EAAE;gBAC9CS,KAAKH,MAAM,CAAC,IAAIlH,SAAS;gBACzBoG;gBACA,OAAO;YACT;YACA,OAAO;QACT;QAEA,IAAIA,UAAU,GAAG;YACf,IAAI,CAAC5D,MAAM,CAACiB,IAAI,CAAC,0CAA0C;gBAAE8C,OAAOH;YAAQ;QAC9E;IACF;IAEAsB,eAAuB;QACrB,OAAO,IAAI,CAACjB,KAAK,CAAC3B,MAAM;IAC1B;IAEA6C,eAAwB;QACtB,OAAO,IAAI,CAACjB,UAAU;IACxB;AACF"}