{"version":3,"sources":["../../../src/mcp/ruv-swarm-wrapper.js"],"sourcesContent":["/**\n * Wrapper for ruv-swarm MCP server to handle logger issues\n * This wrapper ensures compatibility and handles known issues in ruv-swarm\n */\n\nimport { spawn } from 'child_process';\nimport { createInterface } from 'readline';\n\nexport class RuvSwarmWrapper {\n  constructor(options = {}) {\n    this.options = {\n      silent: options.silent || false,\n      autoRestart: options.autoRestart !== false,\n      maxRestarts: options.maxRestarts || 3,\n      restartDelay: options.restartDelay || 1000,\n      ...options,\n    };\n\n    this.process = null;\n    this.restartCount = 0;\n    this.isShuttingDown = false;\n  }\n\n  async start() {\n    if (this.process) {\n      throw new Error('RuvSwarm MCP server is already running');\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Spawn ruv-swarm MCP server\n        this.process = spawn('npx', ['ruv-swarm', 'mcp', 'start'], {\n          stdio: ['pipe', 'pipe', 'pipe'],\n          env: {\n            ...process.env,\n            // Ensure stdio mode for MCP\n            MCP_MODE: 'stdio',\n            // Set log level to reduce noise\n            LOG_LEVEL: 'WARN',\n          },\n        });\n\n        let initialized = false;\n        let initTimeout;\n\n        // Handle stdout (JSON-RPC messages)\n        const rlOut = createInterface({\n          input: this.process.stdout,\n          crlfDelay: Infinity,\n        });\n\n        rlOut.on('line', (line) => {\n          try {\n            const message = JSON.parse(line);\n\n            // Check for initialization\n            if (message.method === 'server.initialized' && !initialized) {\n              initialized = true;\n              clearTimeout(initTimeout);\n              resolve({\n                process: this.process,\n                stdout: this.process.stdout,\n                stdin: this.process.stdin,\n              });\n            }\n\n            // Forward JSON-RPC messages\n            process.stdout.write(line + '\\n');\n          } catch (err) {\n            // Not JSON, ignore\n          }\n        });\n\n        // Handle stderr (logs and errors)\n        const rlErr = createInterface({\n          input: this.process.stderr,\n          crlfDelay: Infinity,\n        });\n\n        rlErr.on('line', (line) => {\n          // Parse structured error messages if available\n          try {\n            const errorData = JSON.parse(line);\n            if (errorData.error && errorData.error.code) {\n              // Handle specific error codes\n              switch (errorData.error.code) {\n                case 'LOGGER_METHOD_MISSING':\n                case 'ERR_LOGGER_MEMORY_USAGE':\n                  // Known issue with logger.logMemoryUsage in ruv-swarm\n                  if (!this.options.silent) {\n                    console.error(\n                      '‚ö†Ô∏è  Known ruv-swarm logger issue detected (continuing normally)',\n                    );\n                  }\n                  return;\n                case 'ERR_INITIALIZATION':\n                  console.error('‚ùå RuvSwarm initialization error:', errorData.error.message);\n                  return;\n                default:\n                  // Unknown error code, log it\n                  if (!this.options.silent) {\n                    console.error(\n                      `RuvSwarm error [${errorData.error.code}]:`,\n                      errorData.error.message,\n                    );\n                  }\n              }\n              return;\n            }\n          } catch (e) {\n            // Not JSON, check for known text patterns as fallback\n            const knownErrorPatterns = [\n              {\n                pattern: /logger\\.logMemoryUsage is not a function/,\n                code: 'LOGGER_METHOD_MISSING',\n                message: 'Known ruv-swarm logger issue detected (continuing normally)',\n              },\n              {\n                pattern: /Cannot find module/,\n                code: 'MODULE_NOT_FOUND',\n                message: 'Module not found error',\n              },\n              {\n                pattern: /ECONNREFUSED/,\n                code: 'CONNECTION_REFUSED',\n                message: 'Connection refused error',\n              },\n            ];\n\n            for (const errorPattern of knownErrorPatterns) {\n              if (errorPattern.pattern.test(line)) {\n                if (!this.options.silent || errorPattern.code !== 'LOGGER_METHOD_MISSING') {\n                  console.error(`‚ö†Ô∏è  ${errorPattern.message}`);\n                }\n                return;\n              }\n            }\n          }\n\n          // Filter out initialization messages if silent\n          if (this.options.silent) {\n            if (line.includes('‚úÖ') || line.includes('üß†') || line.includes('üìä')) {\n              return;\n            }\n          }\n\n          // Forward other stderr output\n          if (!this.options.silent) {\n            process.stderr.write(line + '\\n');\n          }\n        });\n\n        // Handle process errors\n        this.process.on('error', (error) => {\n          if (!initialized) {\n            clearTimeout(initTimeout);\n            reject(new Error(`Failed to start ruv-swarm: ${error.message}`));\n          } else {\n            console.error('RuvSwarm process error:', error);\n            this.handleProcessExit(error.code || 1);\n          }\n        });\n\n        // Handle process exit\n        this.process.on('exit', (code, signal) => {\n          if (!initialized) {\n            clearTimeout(initTimeout);\n            reject(\n              new Error(`RuvSwarm exited before initialization: code ${code}, signal ${signal}`),\n            );\n          } else {\n            this.handleProcessExit(code || 0);\n          }\n        });\n\n        // Set initialization timeout\n        initTimeout = setTimeout(() => {\n          if (!initialized) {\n            this.stop();\n            reject(new Error('RuvSwarm initialization timeout'));\n          }\n        }, 30000); // 30 second timeout\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  handleProcessExit(code) {\n    this.process = null;\n\n    if (this.isShuttingDown) {\n      return;\n    }\n\n    console.error(`RuvSwarm MCP server exited with code ${code}`);\n\n    // Auto-restart if enabled and under limit\n    if (this.options.autoRestart && this.restartCount < this.options.maxRestarts) {\n      this.restartCount++;\n      console.log(\n        `Attempting to restart RuvSwarm (attempt ${this.restartCount}/${this.options.maxRestarts})...`,\n      );\n\n      setTimeout(() => {\n        this.start().catch((err) => {\n          console.error('Failed to restart RuvSwarm:', err);\n        });\n      }, this.options.restartDelay);\n    }\n  }\n\n  async stop() {\n    this.isShuttingDown = true;\n\n    if (!this.process) {\n      return;\n    }\n\n    return new Promise((resolve) => {\n      const killTimeout = setTimeout(() => {\n        console.warn('RuvSwarm did not exit gracefully, forcing kill...');\n        this.process.kill('SIGKILL');\n      }, 5000);\n\n      this.process.on('exit', () => {\n        clearTimeout(killTimeout);\n        this.process = null;\n        resolve();\n      });\n\n      // Send graceful shutdown signal\n      this.process.kill('SIGTERM');\n    });\n  }\n\n  isRunning() {\n    return this.process !== null && !this.process.killed;\n  }\n}\n\n// Export a function to start ruv-swarm with error handling\nexport async function startRuvSwarmMCP(options = {}) {\n  const wrapper = new RuvSwarmWrapper(options);\n\n  try {\n    const result = await wrapper.start();\n    console.log('‚úÖ RuvSwarm MCP server started successfully');\n    return { wrapper, ...result };\n  } catch (error) {\n    console.error('‚ùå Failed to start RuvSwarm MCP server:', error.message);\n    throw error;\n  }\n}\n"],"names":["spawn","createInterface","RuvSwarmWrapper","options","silent","autoRestart","maxRestarts","restartDelay","process","restartCount","isShuttingDown","start","Error","Promise","resolve","reject","stdio","env","MCP_MODE","LOG_LEVEL","initialized","initTimeout","rlOut","input","stdout","crlfDelay","Infinity","on","line","message","JSON","parse","method","clearTimeout","stdin","write","err","rlErr","stderr","errorData","error","code","console","e","knownErrorPatterns","pattern","errorPattern","test","includes","handleProcessExit","signal","setTimeout","stop","log","catch","killTimeout","warn","kill","isRunning","killed","startRuvSwarmMCP","wrapper","result"],"mappings":"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"}