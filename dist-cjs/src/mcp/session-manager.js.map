{"version":3,"sources":["../../../src/mcp/session-manager.ts"],"sourcesContent":["/**\n * Session manager for MCP connections\n */\n\nimport {\n  MCPSession,\n  MCPInitializeParams,\n  MCPProtocolVersion,\n  MCPCapabilities,\n  MCPAuthConfig,\n  MCPConfig,\n} from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\nimport { MCPError } from '../utils/errors.js';\nimport { createHash, timingSafeEqual } from 'node:crypto';\n\nexport interface ISessionManager {\n  createSession(transport: 'stdio' | 'http' | 'websocket'): MCPSession;\n  getSession(id: string): MCPSession | undefined;\n  initializeSession(sessionId: string, params: MCPInitializeParams): void;\n  authenticateSession(sessionId: string, credentials: unknown): boolean;\n  updateActivity(sessionId: string): void;\n  removeSession(sessionId: string): void;\n  getActiveSessions(): MCPSession[];\n  cleanupExpiredSessions(): void;\n  getSessionMetrics(): {\n    total: number;\n    active: number;\n    authenticated: number;\n    expired: number;\n  };\n}\n\n/**\n * Session manager implementation\n */\nexport class SessionManager implements ISessionManager {\n  private sessions = new Map<string, MCPSession>();\n  private authConfig: MCPAuthConfig;\n  private sessionTimeout: number;\n  private maxSessions: number;\n  private cleanupInterval?: number;\n\n  constructor(\n    private config: MCPConfig,\n    private logger: ILogger,\n  ) {\n    this.authConfig = config.auth || { enabled: false, method: 'token' };\n    this.sessionTimeout = config.sessionTimeout || 3600000; // 1 hour default\n    this.maxSessions = config.maxSessions || 100;\n\n    // Start cleanup timer\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, 60000); // Clean up every minute\n  }\n\n  createSession(transport: 'stdio' | 'http' | 'websocket'): MCPSession {\n    // Check session limit\n    if (this.sessions.size >= this.maxSessions) {\n      // Try to clean up expired sessions first\n      this.cleanupExpiredSessions();\n\n      if (this.sessions.size >= this.maxSessions) {\n        throw new MCPError('Maximum number of sessions reached');\n      }\n    }\n\n    const sessionId = this.generateSessionId();\n    const now = new Date();\n\n    const session: MCPSession = {\n      id: sessionId,\n      clientInfo: { name: 'unknown', version: 'unknown' },\n      protocolVersion: { major: 0, minor: 0, patch: 0 },\n      capabilities: {},\n      isInitialized: false,\n      createdAt: now,\n      lastActivity: now,\n      transport,\n      authenticated: !this.authConfig.enabled, // If auth disabled, session is authenticated\n    };\n\n    this.sessions.set(sessionId, session);\n\n    this.logger.info('Session created', {\n      sessionId,\n      transport,\n      totalSessions: this.sessions.size,\n    });\n\n    return session;\n  }\n\n  getSession(id: string): MCPSession | undefined {\n    const session = this.sessions.get(id);\n    if (session && this.isSessionExpired(session)) {\n      this.removeSession(id);\n      return undefined;\n    }\n    return session;\n  }\n\n  initializeSession(sessionId: string, params: MCPInitializeParams): void {\n    const session = this.getSession(sessionId);\n    if (!session) {\n      throw new MCPError(`Session not found: ${sessionId}`);\n    }\n\n    // Validate protocol version\n    this.validateProtocolVersion(params.protocolVersion);\n\n    // Update session with initialization params\n    session.clientInfo = params.clientInfo;\n    session.protocolVersion = params.protocolVersion;\n    session.capabilities = params.capabilities;\n    session.isInitialized = true;\n    session.lastActivity = new Date();\n\n    this.logger.info('Session initialized', {\n      sessionId,\n      clientInfo: params.clientInfo,\n      protocolVersion: params.protocolVersion,\n    });\n  }\n\n  authenticateSession(sessionId: string, credentials: unknown): boolean {\n    const session = this.getSession(sessionId);\n    if (!session) {\n      return false;\n    }\n\n    if (!this.authConfig.enabled) {\n      session.authenticated = true;\n      return true;\n    }\n\n    let authenticated = false;\n\n    switch (this.authConfig.method) {\n      case 'token':\n        authenticated = this.authenticateToken(credentials);\n        break;\n      case 'basic':\n        authenticated = this.authenticateBasic(credentials);\n        break;\n      case 'oauth':\n        authenticated = this.authenticateOAuth(credentials);\n        break;\n      default:\n        this.logger.warn('Unknown authentication method', {\n          method: this.authConfig.method,\n        });\n        return false;\n    }\n\n    if (authenticated) {\n      session.authenticated = true;\n      session.authData = this.extractAuthData(credentials);\n      session.lastActivity = new Date();\n\n      this.logger.info('Session authenticated', {\n        sessionId,\n        method: this.authConfig.method,\n      });\n    } else {\n      this.logger.warn('Session authentication failed', {\n        sessionId,\n        method: this.authConfig.method,\n      });\n    }\n\n    return authenticated;\n  }\n\n  updateActivity(sessionId: string): void {\n    const session = this.getSession(sessionId);\n    if (session) {\n      session.lastActivity = new Date();\n    }\n  }\n\n  removeSession(sessionId: string): void {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      this.sessions.delete(sessionId);\n      this.logger.info('Session removed', {\n        sessionId,\n        duration: Date.now() - session.createdAt.getTime(),\n        transport: session.transport,\n      });\n    }\n  }\n\n  getActiveSessions(): MCPSession[] {\n    const activeSessions: MCPSession[] = [];\n    for (const session of this.sessions.values()) {\n      if (!this.isSessionExpired(session)) {\n        activeSessions.push(session);\n      }\n    }\n    return activeSessions;\n  }\n\n  cleanupExpiredSessions(): void {\n    const expiredSessions: string[] = [];\n\n    for (const [sessionId, session] of this.sessions) {\n      if (this.isSessionExpired(session)) {\n        expiredSessions.push(sessionId);\n      }\n    }\n\n    for (const sessionId of expiredSessions) {\n      this.removeSession(sessionId);\n    }\n\n    if (expiredSessions.length > 0) {\n      this.logger.info('Cleaned up expired sessions', {\n        count: expiredSessions.length,\n        remainingSessions: this.sessions.size,\n      });\n    }\n  }\n\n  getSessionMetrics(): {\n    total: number;\n    active: number;\n    authenticated: number;\n    expired: number;\n  } {\n    let active = 0;\n    let authenticated = 0;\n    let expired = 0;\n\n    for (const session of this.sessions.values()) {\n      if (this.isSessionExpired(session)) {\n        expired++;\n      } else {\n        active++;\n        if (session.authenticated) {\n          authenticated++;\n        }\n      }\n    }\n\n    return {\n      total: this.sessions.size,\n      active,\n      authenticated,\n      expired,\n    };\n  }\n\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.sessions.clear();\n  }\n\n  private generateSessionId(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 9);\n    return `session_${timestamp}_${random}`;\n  }\n\n  private isSessionExpired(session: MCPSession): boolean {\n    const now = Date.now();\n    const sessionAge = now - session.lastActivity.getTime();\n    return sessionAge > this.sessionTimeout;\n  }\n\n  private validateProtocolVersion(version: MCPProtocolVersion): void {\n    // Currently supporting MCP version 2024-11-05\n    const supportedVersions = [{ major: 2024, minor: 11, patch: 5 }];\n\n    const isSupported = supportedVersions.some(\n      (supported) =>\n        supported.major === version.major &&\n        supported.minor === version.minor &&\n        supported.patch === version.patch,\n    );\n\n    if (!isSupported) {\n      throw new MCPError(\n        `Unsupported protocol version: ${version.major}.${version.minor}.${version.patch}`,\n        { supportedVersions },\n      );\n    }\n  }\n\n  private authenticateToken(credentials: unknown): boolean {\n    if (!this.authConfig.tokens || this.authConfig.tokens.length === 0) {\n      return false;\n    }\n\n    const token = this.extractToken(credentials);\n    if (!token) {\n      return false;\n    }\n\n    // Use timing-safe comparison to prevent timing attacks\n    return this.authConfig.tokens.some((validToken) => {\n      const encoder = new TextEncoder();\n      const validTokenBytes = encoder.encode(validToken);\n      const providedTokenBytes = encoder.encode(token);\n\n      if (validTokenBytes.length !== providedTokenBytes.length) {\n        return false;\n      }\n\n      return timingSafeEqual(validTokenBytes, providedTokenBytes);\n    });\n  }\n\n  private authenticateBasic(credentials: unknown): boolean {\n    if (!this.authConfig.users || this.authConfig.users.length === 0) {\n      return false;\n    }\n\n    const { username, password } = this.extractBasicAuth(credentials);\n    if (!username || !password) {\n      return false;\n    }\n\n    const user = this.authConfig.users.find((u) => u.username === username);\n    if (!user) {\n      return false;\n    }\n\n    // Hash the provided password and compare\n    const hashedPassword = this.hashPassword(password);\n    const expectedHashedPassword = this.hashPassword(user.password);\n\n    const encoder = new TextEncoder();\n    const hashedPasswordBytes = encoder.encode(hashedPassword);\n    const expectedHashedPasswordBytes = encoder.encode(expectedHashedPassword);\n\n    if (hashedPasswordBytes.length !== expectedHashedPasswordBytes.length) {\n      return false;\n    }\n\n    return timingSafeEqual(hashedPasswordBytes, expectedHashedPasswordBytes);\n  }\n\n  private authenticateOAuth(credentials: unknown): boolean {\n    // TODO: Implement OAuth authentication\n    // This would typically involve validating JWT tokens\n    this.logger.warn('OAuth authentication not yet implemented');\n    return false;\n  }\n\n  private extractToken(credentials: unknown): string | null {\n    if (typeof credentials === 'string') {\n      return credentials;\n    }\n\n    if (typeof credentials === 'object' && credentials !== null) {\n      const creds = credentials as Record<string, unknown>;\n      if (typeof creds.token === 'string') {\n        return creds.token;\n      }\n      if (typeof creds.authorization === 'string') {\n        const match = creds.authorization.match(/^Bearer\\s+(.+)$/);\n        return match ? match[1] : null;\n      }\n    }\n\n    return null;\n  }\n\n  private extractBasicAuth(credentials: unknown): { username?: string; password?: string } {\n    if (typeof credentials === 'object' && credentials !== null) {\n      const creds = credentials as Record<string, unknown>;\n\n      if (typeof creds.username === 'string' && typeof creds.password === 'string') {\n        return {\n          username: creds.username,\n          password: creds.password,\n        };\n      }\n\n      if (typeof creds.authorization === 'string') {\n        const match = creds.authorization.match(/^Basic\\s+(.+)$/);\n        if (match) {\n          try {\n            const decoded = atob(match[1]);\n            const [username, password] = decoded.split(':', 2);\n            return { username, password };\n          } catch {\n            return {};\n          }\n        }\n      }\n    }\n\n    return {};\n  }\n\n  private extractAuthData(credentials: unknown): any {\n    if (typeof credentials === 'object' && credentials !== null) {\n      const creds = credentials as Record<string, unknown>;\n      return {\n        token: this.extractToken(credentials),\n        user: creds.username || creds.user,\n        permissions: creds.permissions || [],\n      };\n    }\n    return {};\n  }\n\n  private hashPassword(password: string): string {\n    return createHash('sha256').update(password).digest('hex');\n  }\n}\n"],"names":["MCPError","createHash","timingSafeEqual","SessionManager","sessions","Map","authConfig","sessionTimeout","maxSessions","cleanupInterval","config","logger","auth","enabled","method","setInterval","cleanupExpiredSessions","createSession","transport","size","sessionId","generateSessionId","now","Date","session","id","clientInfo","name","version","protocolVersion","major","minor","patch","capabilities","isInitialized","createdAt","lastActivity","authenticated","set","info","totalSessions","getSession","get","isSessionExpired","removeSession","undefined","initializeSession","params","validateProtocolVersion","authenticateSession","credentials","authenticateToken","authenticateBasic","authenticateOAuth","warn","authData","extractAuthData","updateActivity","delete","duration","getTime","getActiveSessions","activeSessions","values","push","expiredSessions","length","count","remainingSessions","getSessionMetrics","active","expired","total","destroy","clearInterval","clear","timestamp","toString","random","Math","substr","sessionAge","supportedVersions","isSupported","some","supported","tokens","token","extractToken","validToken","encoder","TextEncoder","validTokenBytes","encode","providedTokenBytes","users","username","password","extractBasicAuth","user","find","u","hashedPassword","hashPassword","expectedHashedPassword","hashedPasswordBytes","expectedHashedPasswordBytes","creds","authorization","match","decoded","atob","split","permissions","update","digest"],"mappings":"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"}