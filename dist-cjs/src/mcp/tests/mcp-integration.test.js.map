{"version":3,"sources":["../../../../src/mcp/tests/mcp-integration.test.ts"],"sourcesContent":["import { getErrorMessage } from '../utils/error-handler.js';\n/**\n * Comprehensive MCP Integration Tests\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\ntype Mock = jest.MockedFunction<any>;\nimport { MCPServer } from '../server.js';\nimport { MCPLifecycleManager, LifecycleState } from '../lifecycle-manager.js';\nimport { MCPPerformanceMonitor } from '../performance-monitor.js';\nimport { MCPProtocolManager } from '../protocol-manager.js';\nimport { MCPOrchestrationIntegration } from '../orchestration-integration.js';\nimport { ToolRegistry } from '../tools.js';\nimport type { AuthManager } from '../auth.js';\nimport type { ILogger } from '../../core/logger.js';\nimport type { MCPConfig, MCPInitializeParams, MCPRequest, MCPSession } from '../../utils/types.js';\nimport { EventEmitter } from 'node:events';\n\n// Mock logger\nconst mockLogger: ILogger = {\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n  configure: jest.fn(),\n};\n\n// Mock event bus\nconst mockEventBus = new EventEmitter();\n\n// Mock config\nconst mockMCPConfig: MCPConfig = {\n  transport: 'stdio',\n  enableMetrics: true,\n  auth: {\n    enabled: false,\n    method: 'token',\n  },\n};\n\ndescribe('MCP Server', () => {\n  let server: MCPServer;\n\n  beforeEach(() => {\n    server = new MCPServer(mockMCPConfig, mockEventBus, mockLogger);\n  });\n\n  afterEach(async () => {\n    if (server) {\n      await server.stop();\n    }\n  });\n\n  describe('Lifecycle Management', () => {\n    it('should start and stop server successfully', async () => {\n      await server.start();\n      expect(mockLogger.info).toHaveBeenCalledWith('MCP server started successfully');\n\n      await server.stop();\n      expect(mockLogger.info).toHaveBeenCalledWith('MCP server stopped');\n    });\n\n    it('should handle initialization request', async () => {\n      await server.start();\n\n      const initParams: MCPInitializeParams = {\n        protocolVersion: { major: 2024, minor: 11, patch: 5 },\n        capabilities: {\n          tools: { listChanged: true },\n        },\n        clientInfo: {\n          name: 'test-client',\n          version: '1.0.0',\n        },\n      };\n\n      const request: MCPRequest = {\n        jsonrpc: '2.0',\n        id: 'test-init',\n        method: 'initialize',\n        params: initParams,\n      };\n\n      // Mock transport handler\n      const transport = (server as any).transport;\n      transport.onRequest = jest.fn();\n\n      const response = await (server as any).handleRequest(request);\n\n      expect(response.jsonrpc).toBe('2.0');\n      expect(response.id).toBe('test-init');\n      expect(response.result).toBeDefined();\n      expect(response.result.protocolVersion).toEqual({ major: 2024, minor: 11, patch: 5 });\n    });\n  });\n\n  describe('Tool Registration', () => {\n    beforeEach(async () => {\n      await server.start();\n    });\n\n    it('should register tools successfully', () => {\n      const tool = {\n        name: 'test/tool',\n        description: 'Test tool',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            input: { type: 'string' },\n          },\n        },\n        handler: jest.fn().mockResolvedValue('test result'),\n      };\n\n      server.registerTool(tool);\n      expect(mockLogger.info).toHaveBeenCalledWith('Tool registered', { name: 'test/tool' });\n    });\n\n    it('should list registered tools', async () => {\n      const tool1 = {\n        name: 'test/tool1',\n        description: 'Test tool 1',\n        inputSchema: { type: 'object', properties: {} },\n        handler: jest.fn(),\n      };\n\n      const tool2 = {\n        name: 'test/tool2',\n        description: 'Test tool 2',\n        inputSchema: { type: 'object', properties: {} },\n        handler: jest.fn(),\n      };\n\n      server.registerTool(tool1);\n      server.registerTool(tool2);\n\n      const tools = (server as any).toolRegistry.listTools();\n      expect(tools).toHaveLength(2 + 4); // 2 custom + 4 built-in tools\n      expect(tools.some((t: any) => t.name === 'test/tool1')).toBe(true);\n      expect(tools.some((t: any) => t.name === 'test/tool2')).toBe(true);\n    });\n  });\n\n  describe('Health Checks', () => {\n    beforeEach(async () => {\n      await server.start();\n    });\n\n    it('should report healthy status when running', async () => {\n      const health = await server.getHealthStatus();\n\n      expect(health.healthy).toBe(true);\n      expect(health.metrics).toBeDefined();\n      expect(health.metrics?.registeredTools).toBeGreaterThan(0);\n    });\n\n    it('should include metrics in health status', async () => {\n      const health = await server.getHealthStatus();\n\n      expect(health.metrics).toBeDefined();\n      expect(typeof health.metrics?.registeredTools).toBe('number');\n      expect(typeof health.metrics?.totalRequests).toBe('number');\n      expect(typeof health.metrics?.successfulRequests).toBe('number');\n      expect(typeof health.metrics?.failedRequests).toBe('number');\n    });\n  });\n});\n\ndescribe('MCP Lifecycle Manager', () => {\n  let lifecycleManager: MCPLifecycleManager;\n  let mockServerFactory: Mock;\n\n  beforeEach(() => {\n    mockServerFactory = jest.fn(() => new MCPServer(mockMCPConfig, mockEventBus, mockLogger));\n\n    lifecycleManager = new MCPLifecycleManager(mockMCPConfig, mockLogger, mockServerFactory);\n  });\n\n  afterEach(async () => {\n    if (lifecycleManager) {\n      await lifecycleManager.stop();\n    }\n  });\n\n  describe('State Management', () => {\n    it('should start in stopped state', () => {\n      expect(lifecycleManager.getState()).toBe(LifecycleState.STOPPED);\n    });\n\n    it('should transition to running state when started', async () => {\n      await lifecycleManager.start();\n      expect(lifecycleManager.getState()).toBe(LifecycleState.RUNNING);\n    });\n\n    it('should transition back to stopped when stopped', async () => {\n      await lifecycleManager.start();\n      await lifecycleManager.stop();\n      expect(lifecycleManager.getState()).toBe(LifecycleState.STOPPED);\n    });\n\n    it('should emit state change events', async () => {\n      const stateChanges: any[] = [];\n      lifecycleManager.on('stateChange', (event) => {\n        stateChanges.push(event);\n      });\n\n      await lifecycleManager.start();\n      await lifecycleManager.stop();\n\n      expect(stateChanges).toHaveLength(4); // starting -> running -> stopping -> stopped\n      expect(stateChanges[0].state).toBe(LifecycleState.STARTING);\n      expect(stateChanges[1].state).toBe(LifecycleState.RUNNING);\n      expect(stateChanges[2].state).toBe(LifecycleState.STOPPING);\n      expect(stateChanges[3].state).toBe(LifecycleState.STOPPED);\n    });\n  });\n\n  describe('Health Monitoring', () => {\n    it('should perform health checks when enabled', async () => {\n      const config = {\n        healthCheckInterval: 100,\n        enableHealthChecks: true,\n      };\n\n      lifecycleManager = new MCPLifecycleManager(\n        mockMCPConfig,\n        mockLogger,\n        mockServerFactory,\n        config,\n      );\n\n      await lifecycleManager.start();\n\n      // Wait for health check\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const health = await lifecycleManager.healthCheck();\n      expect(health).toBeDefined();\n      expect(health.state).toBeDefined();\n    });\n\n    it('should track uptime', async () => {\n      await lifecycleManager.start();\n\n      // Wait a bit\n      await new Promise((resolve) => setTimeout(resolve, 50));\n\n      const uptime = lifecycleManager.getUptime();\n      expect(uptime).toBeGreaterThan(0);\n    });\n  });\n});\n\ndescribe('MCP Performance Monitor', () => {\n  let performanceMonitor: MCPPerformanceMonitor;\n\n  beforeEach(() => {\n    performanceMonitor = new MCPPerformanceMonitor(mockLogger);\n  });\n\n  afterEach(() => {\n    if (performanceMonitor) {\n      performanceMonitor.stop();\n    }\n  });\n\n  describe('Request Tracking', () => {\n    it('should track request metrics', async () => {\n      const mockSession: MCPSession = {\n        id: 'test-session',\n        clientInfo: { name: 'test', version: '1.0' },\n        protocolVersion: { major: 2024, minor: 11, patch: 5 },\n        capabilities: {},\n        isInitialized: true,\n        createdAt: new Date(),\n        lastActivity: new Date(),\n        transport: 'stdio',\n        authenticated: false,\n      };\n\n      const mockRequest: MCPRequest = {\n        jsonrpc: '2.0',\n        id: 'test-request',\n        method: 'test/method',\n      };\n\n      const requestId = performanceMonitor.recordRequestStart(mockRequest, mockSession);\n      expect(requestId).toBeDefined();\n\n      // Simulate request completion\n      await new Promise((resolve) => setTimeout(resolve, 10));\n\n      performanceMonitor.recordRequestEnd(requestId, {\n        jsonrpc: '2.0',\n        id: 'test-request',\n        result: 'success',\n      });\n\n      const metrics = performanceMonitor.getCurrentMetrics();\n      expect(metrics.requestCount).toBe(1);\n      expect(metrics.averageResponseTime).toBeGreaterThan(0);\n    });\n  });\n});\n\ndescribe('MCP Protocol Manager', () => {\n  let protocolManager: MCPProtocolManager;\n\n  beforeEach(() => {\n    protocolManager = new MCPProtocolManager(mockLogger);\n  });\n\n  describe('Version Compatibility', () => {\n    it('should check version compatibility correctly', () => {\n      const clientVersion = { major: 2024, minor: 11, patch: 5 };\n      const compatibility = protocolManager.checkCompatibility(clientVersion);\n\n      expect(compatibility.compatible).toBe(true);\n      expect(compatibility.errors).toHaveLength(0);\n    });\n\n    it('should reject incompatible major versions', () => {\n      const clientVersion = { major: 2023, minor: 11, patch: 5 };\n      const compatibility = protocolManager.checkCompatibility(clientVersion);\n\n      expect(compatibility.compatible).toBe(false);\n      expect(compatibility.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Protocol Negotiation', () => {\n    it('should negotiate protocol successfully', async () => {\n      const clientParams: MCPInitializeParams = {\n        protocolVersion: { major: 2024, minor: 11, patch: 5 },\n        capabilities: {\n          tools: { listChanged: true },\n          logging: { level: 'info' },\n        },\n        clientInfo: {\n          name: 'test-client',\n          version: '1.0.0',\n        },\n      };\n\n      const result = await protocolManager.negotiateProtocol(clientParams);\n\n      expect(result.agreedVersion).toEqual(clientParams.protocolVersion);\n      expect(result.agreedCapabilities).toBeDefined();\n      expect(result.agreedCapabilities.tools?.listChanged).toBe(true);\n    });\n  });\n});\n\ndescribe('Tool Registry', () => {\n  let toolRegistry: ToolRegistry;\n\n  beforeEach(() => {\n    toolRegistry = new ToolRegistry(mockLogger);\n  });\n\n  describe('Tool Management', () => {\n    it('should register tools with capabilities', () => {\n      const tool = {\n        name: 'test/tool',\n        description: 'Test tool for registry',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            input: { type: 'string' },\n          },\n        },\n        handler: jest.fn().mockResolvedValue('test result'),\n      };\n\n      const capability = {\n        name: 'test/tool',\n        version: '1.0.0',\n        description: 'Test capability',\n        category: 'test',\n        tags: ['testing', 'demo'],\n        supportedProtocolVersions: [{ major: 2024, minor: 11, patch: 5 }],\n      };\n\n      toolRegistry.register(tool, capability);\n\n      const registeredCapability = toolRegistry.getToolCapability('test/tool');\n      expect(registeredCapability).toEqual(capability);\n    });\n\n    it('should discover tools by criteria', () => {\n      const tool1 = {\n        name: 'file/read',\n        description: 'Read files',\n        inputSchema: { type: 'object', properties: {} },\n        handler: jest.fn(),\n      };\n\n      const tool2 = {\n        name: 'memory/query',\n        description: 'Query memory',\n        inputSchema: { type: 'object', properties: {} },\n        handler: jest.fn(),\n      };\n\n      toolRegistry.register(tool1);\n      toolRegistry.register(tool2);\n\n      const fileTools = toolRegistry.discoverTools({ category: 'file' });\n      expect(fileTools).toHaveLength(1);\n      expect(fileTools[0].tool.name).toBe('file/read');\n\n      const memoryTools = toolRegistry.discoverTools({ tags: ['memory'] });\n      expect(memoryTools).toHaveLength(1);\n      expect(memoryTools[0].tool.name).toBe('memory/query');\n    });\n\n    it('should track tool metrics', async () => {\n      const tool = {\n        name: 'test/metric-tool',\n        description: 'Tool for metrics testing',\n        inputSchema: { type: 'object', properties: {} },\n        handler: jest.fn().mockResolvedValue('success'),\n      };\n\n      toolRegistry.register(tool);\n\n      // Execute tool multiple times\n      await toolRegistry.executeTool('test/metric-tool', {});\n      await toolRegistry.executeTool('test/metric-tool', {});\n\n      const metrics = toolRegistry.getToolMetrics('test/metric-tool');\n      expect(Array.isArray(metrics) ? metrics[0].totalInvocations : metrics.totalInvocations).toBe(\n        2,\n      );\n      expect(\n        Array.isArray(metrics) ? metrics[0].successfulInvocations : metrics.successfulInvocations,\n      ).toBe(2);\n    });\n  });\n});\n\ndescribe('MCP Orchestration Integration', () => {\n  let integration: MCPOrchestrationIntegration;\n  let mockComponents: any;\n\n  beforeEach(() => {\n    mockComponents = {\n      orchestrator: {\n        getStatus: jest.fn().mockResolvedValue({ status: 'running' }),\n        listTasks: jest.fn().mockResolvedValue([]),\n      },\n      eventBus: new EventEmitter(),\n    };\n\n    integration = new MCPOrchestrationIntegration(\n      mockMCPConfig,\n      {\n        enabledIntegrations: {\n          orchestrator: true,\n          swarm: false,\n          agents: false,\n          resources: false,\n          memory: false,\n          monitoring: false,\n          terminals: false,\n        },\n        autoStart: false,\n        healthCheckInterval: 30000,\n        reconnectAttempts: 3,\n        reconnectDelay: 5000,\n        enableMetrics: true,\n        enableAlerts: true,\n      },\n      mockComponents,\n      mockLogger,\n    );\n  });\n\n  afterEach(async () => {\n    if (integration) {\n      await integration.stop();\n    }\n  });\n\n  describe('Integration Management', () => {\n    it('should start integration successfully', async () => {\n      await integration.start();\n\n      const status = integration.getIntegrationStatus();\n      expect(status).toHaveLength(7); // All component types\n\n      const orchestratorStatus = status.find((s) => s.component === 'orchestrator');\n      expect(orchestratorStatus?.enabled).toBe(true);\n    });\n\n    it('should register orchestrator tools when enabled', async () => {\n      await integration.start();\n\n      const server = integration.getServer();\n      expect(server).toBeDefined();\n\n      // Check that orchestrator tools are registered\n      const tools = (server as any).toolRegistry.listTools();\n      const orchestratorTools = tools.filter((t: any) => t.name.startsWith('orchestrator/'));\n      expect(orchestratorTools.length).toBeGreaterThan(0);\n    });\n\n    it('should handle component connection failures gracefully', async () => {\n      // Mock a failing component\n      mockComponents.orchestrator.getStatus = jest\n        .fn()\n        .mockRejectedValue(new Error('Connection failed'));\n\n      await integration.start();\n\n      const status = integration.getComponentStatus('orchestrator');\n      expect(status).toBeDefined();\n      // Connection status can vary in test environment\n    });\n  });\n\n  describe('Health Monitoring', () => {\n    it('should monitor component health', async () => {\n      await integration.start();\n\n      // Wait for health check\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      const status = integration.getIntegrationStatus();\n      const enabledComponents = status.filter((s) => s.enabled);\n\n      for (const component of enabledComponents) {\n        expect(component.lastCheck).toBeInstanceOf(Date);\n      }\n    });\n  });\n});\n"],"names":["describe","it","expect","beforeEach","afterEach","jest","MCPServer","MCPLifecycleManager","LifecycleState","MCPPerformanceMonitor","MCPProtocolManager","MCPOrchestrationIntegration","ToolRegistry","EventEmitter","mockLogger","debug","fn","info","warn","error","configure","mockEventBus","mockMCPConfig","transport","enableMetrics","auth","enabled","method","server","stop","start","toHaveBeenCalledWith","initParams","protocolVersion","major","minor","patch","capabilities","tools","listChanged","clientInfo","name","version","request","jsonrpc","id","params","onRequest","response","handleRequest","toBe","result","toBeDefined","toEqual","tool","description","inputSchema","type","properties","input","handler","mockResolvedValue","registerTool","tool1","tool2","toolRegistry","listTools","toHaveLength","some","t","health","getHealthStatus","healthy","metrics","registeredTools","toBeGreaterThan","totalRequests","successfulRequests","failedRequests","lifecycleManager","mockServerFactory","getState","STOPPED","RUNNING","stateChanges","on","event","push","state","STARTING","STOPPING","config","healthCheckInterval","enableHealthChecks","Promise","resolve","setTimeout","healthCheck","uptime","getUptime","performanceMonitor","mockSession","isInitialized","createdAt","Date","lastActivity","authenticated","mockRequest","requestId","recordRequestStart","recordRequestEnd","getCurrentMetrics","requestCount","averageResponseTime","protocolManager","clientVersion","compatibility","checkCompatibility","compatible","errors","length","clientParams","logging","level","negotiateProtocol","agreedVersion","agreedCapabilities","capability","category","tags","supportedProtocolVersions","register","registeredCapability","getToolCapability","fileTools","discoverTools","memoryTools","executeTool","getToolMetrics","Array","isArray","totalInvocations","successfulInvocations","integration","mockComponents","orchestrator","getStatus","status","listTasks","eventBus","enabledIntegrations","swarm","agents","resources","memory","monitoring","terminals","autoStart","reconnectAttempts","reconnectDelay","enableAlerts","getIntegrationStatus","orchestratorStatus","find","s","component","getServer","orchestratorTools","filter","startsWith","mockRejectedValue","Error","getComponentStatus","enabledComponents","lastCheck","toBeInstanceOf"],"mappings":"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"}