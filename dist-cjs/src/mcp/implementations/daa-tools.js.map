{"version":3,"sources":["../../../../src/mcp/implementations/daa-tools.js"],"sourcesContent":["/**\n * DAA (Decentralized Autonomous Agents) Tools Implementation\n * Ported from UI console implementation to MCP tools\n */\n\nclass DAAManager {\n  constructor() {\n    this.agents = new Map();\n    this.resources = new Map();\n    this.communications = new Map();\n    this.consensus = new Map();\n    this.capabilities = new Map();\n    \n    // Metrics tracking\n    this.metrics = {\n      totalAgents: 0,\n      activeAgents: 0,\n      resourceUtilization: 0,\n      communicationLatency: 0,\n      consensusTime: 0,\n      faultCount: 0,\n    };\n  }\n\n  // Tool 1: Dynamic Agent Creation\n  daa_agent_create(config) {\n    const agentId = `daa_agent_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const agent = {\n      id: agentId,\n      type: config.agent_type || config.type || 'generic',\n      capabilities: config.capabilities || [],\n      resources: config.resources || {},\n      status: 'initializing',\n      created: new Date().toISOString(),\n      lastActivity: new Date().toISOString(),\n      tasks: [],\n      metadata: config.metadata || {},\n    };\n\n    this.agents.set(agentId, agent);\n    this.metrics.totalAgents++;\n    this.metrics.activeAgents++;\n\n    // Initialize agent\n    this.initializeAgent(agent);\n    \n    // Track in global agent tracker if available\n    if (global.agentTracker) {\n      global.agentTracker.trackAgent(agentId, agent);\n    }\n\n    return {\n      success: true,\n      agentId: agentId,\n      agent: agent,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Tool 2: Capability Matching System\n  daa_capability_match(args) {\n    const requirements = args.task_requirements || [];\n    const availableAgents = args.available_agents || [];\n    const matches = [];\n\n    // If specific agents provided, use those; otherwise use all DAA agents\n    const agentsToCheck = availableAgents.length > 0 \n      ? availableAgents.map(id => this.agents.get(id)).filter(Boolean)\n      : Array.from(this.agents.values());\n\n    for (const agent of agentsToCheck) {\n      if (agent.status !== 'active' && agent.status !== 'initializing') continue;\n\n      const score = this.calculateCapabilityScore(agent.capabilities, requirements);\n      if (score > 0) {\n        matches.push({\n          agentId: agent.id,\n          agentType: agent.type,\n          score: score,\n          capabilities: agent.capabilities,\n          matchedRequirements: agent.capabilities.filter(cap =>\n            requirements.some(req => this.matchCapability(cap, req))\n          ),\n        });\n      }\n    }\n\n    // Sort by score descending\n    matches.sort((a, b) => b.score - a.score);\n\n    return {\n      success: true,\n      matches: matches,\n      totalCandidates: matches.length,\n      bestMatch: matches[0] || null,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Tool 3: Resource Allocation\n  daa_resource_alloc(args) {\n    const resources = args.resources || {};\n    const agents = args.agents || [];\n    \n    const allocationId = `alloc_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const allocation = {\n      id: allocationId,\n      resources: resources,\n      agents: agents,\n      allocated: {},\n      timestamp: new Date().toISOString(),\n    };\n\n    // Simple allocation strategy: divide resources equally among agents\n    const agentCount = agents.length || 1;\n    const allocatedPerAgent = {};\n    \n    for (const [resourceType, amount] of Object.entries(resources)) {\n      allocatedPerAgent[resourceType] = Math.floor(amount / agentCount);\n    }\n\n    // Assign resources to each agent\n    for (const agentId of agents) {\n      allocation.allocated[agentId] = allocatedPerAgent;\n      \n      // Update agent resources\n      const agent = this.agents.get(agentId);\n      if (agent) {\n        agent.resources = { ...agent.resources, ...allocatedPerAgent };\n        agent.lastActivity = new Date().toISOString();\n      }\n    }\n\n    this.resources.set(allocationId, allocation);\n    this.metrics.resourceUtilization = this.calculateResourceUtilization();\n\n    return {\n      success: true,\n      allocationId: allocationId,\n      allocation: allocation,\n      utilization: this.metrics.resourceUtilization,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Tool 4: Lifecycle Management\n  daa_lifecycle_manage(args) {\n    const agentId = args.agentId || args.agent_id;\n    const action = args.action;\n    \n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      return {\n        success: false,\n        error: `Agent ${agentId} not found`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    let result = { success: true };\n    const previousStatus = agent.status;\n\n    switch (action) {\n      case 'start':\n        agent.status = 'active';\n        this.metrics.activeAgents++;\n        result.message = 'Agent started';\n        break;\n      case 'stop':\n        agent.status = 'stopped';\n        this.metrics.activeAgents--;\n        result.message = 'Agent stopped';\n        break;\n      case 'pause':\n        agent.status = 'paused';\n        result.message = 'Agent paused';\n        break;\n      case 'resume':\n        agent.status = 'active';\n        result.message = 'Agent resumed';\n        break;\n      case 'terminate':\n        agent.status = 'terminated';\n        this.metrics.activeAgents--;\n        this.metrics.totalAgents--;\n        result.message = 'Agent terminated';\n        break;\n      default:\n        result.success = false;\n        result.error = `Unknown action: ${action}`;\n    }\n\n    if (result.success) {\n      agent.lastActivity = new Date().toISOString();\n      result.agentId = agentId;\n      result.previousStatus = previousStatus;\n      result.currentStatus = agent.status;\n    }\n\n    result.timestamp = new Date().toISOString();\n    return result;\n  }\n\n  // Tool 5: Communication System\n  daa_communication(args) {\n    const from = args.from;\n    const to = args.to;\n    const message = args.message;\n    \n    const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const communication = {\n      id: messageId,\n      from: from,\n      to: to,\n      message: message,\n      timestamp: new Date().toISOString(),\n      delivered: false,\n    };\n\n    // Check if sender and receiver exist\n    const sender = this.agents.get(from);\n    const receiver = this.agents.get(to);\n\n    if (!sender) {\n      return {\n        success: false,\n        error: `Sender agent ${from} not found`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    if (!receiver) {\n      return {\n        success: false,\n        error: `Receiver agent ${to} not found`,\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    // Store communication\n    this.communications.set(messageId, communication);\n    \n    // Simulate delivery\n    communication.delivered = true;\n    communication.deliveredAt = new Date().toISOString();\n    \n    // Update agent activity\n    sender.lastActivity = new Date().toISOString();\n    receiver.lastActivity = new Date().toISOString();\n\n    return {\n      success: true,\n      messageId: messageId,\n      from: from,\n      to: to,\n      delivered: true,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Tool 6: Consensus Mechanism\n  daa_consensus(args) {\n    const agents = args.agents || [];\n    const proposal = args.proposal || {};\n    \n    const consensusId = `consensus_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const votes = new Map();\n    \n    // Simulate voting - each agent votes based on simple criteria\n    for (const agentId of agents) {\n      const agent = this.agents.get(agentId);\n      if (agent && agent.status === 'active') {\n        // Simple voting logic: 70% chance of approval\n        const vote = Math.random() > 0.3;\n        votes.set(agentId, vote);\n      }\n    }\n\n    const totalVotes = votes.size;\n    const approvals = Array.from(votes.values()).filter(v => v).length;\n    const approved = approvals > totalVotes / 2;\n\n    const consensus = {\n      id: consensusId,\n      proposal: proposal,\n      agents: agents,\n      votes: Object.fromEntries(votes),\n      totalVotes: totalVotes,\n      approvals: approvals,\n      rejections: totalVotes - approvals,\n      approved: approved,\n      timestamp: new Date().toISOString(),\n    };\n\n    this.consensus.set(consensusId, consensus);\n\n    return {\n      success: true,\n      consensusId: consensusId,\n      approved: approved,\n      votes: consensus.votes,\n      summary: {\n        total: totalVotes,\n        approvals: approvals,\n        rejections: totalVotes - approvals,\n        approvalRate: totalVotes > 0 ? (approvals / totalVotes) : 0,\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Helper methods\n  initializeAgent(agent) {\n    setTimeout(() => {\n      agent.status = 'active';\n      agent.lastActivity = new Date().toISOString();\n    }, 100);\n  }\n\n  calculateCapabilityScore(agentCaps, requirements) {\n    if (!agentCaps || !requirements) return 0;\n    \n    let matches = 0;\n    for (const req of requirements) {\n      if (agentCaps.some(cap => this.matchCapability(cap, req))) {\n        matches++;\n      }\n    }\n    \n    return requirements.length > 0 ? (matches / requirements.length) : 0;\n  }\n\n  matchCapability(capability, requirement) {\n    // Simple string matching for now\n    return capability.toLowerCase().includes(requirement.toLowerCase()) ||\n           requirement.toLowerCase().includes(capability.toLowerCase());\n  }\n\n  calculateResourceUtilization() {\n    let totalAllocated = 0;\n    let totalCapacity = 0;\n    \n    for (const allocation of this.resources.values()) {\n      for (const amount of Object.values(allocation.resources)) {\n        totalCapacity += amount;\n      }\n      for (const agentAlloc of Object.values(allocation.allocated)) {\n        for (const amount of Object.values(agentAlloc)) {\n          totalAllocated += amount;\n        }\n      }\n    }\n    \n    return totalCapacity > 0 ? (totalAllocated / totalCapacity) : 0;\n  }\n}\n\n// Create singleton instance\nconst daaManager = new DAAManager();\n\n// Export for use in MCP tools\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = daaManager;\n}\n\n// Also make available globally\nif (typeof global !== 'undefined') {\n  global.daaManager = daaManager;\n}"],"names":["DAAManager","agents","Map","resources","communications","consensus","capabilities","metrics","totalAgents","activeAgents","resourceUtilization","communicationLatency","consensusTime","faultCount","daa_agent_create","config","agentId","Date","now","Math","random","toString","substr","agent","id","type","agent_type","status","created","toISOString","lastActivity","tasks","metadata","set","initializeAgent","global","agentTracker","trackAgent","success","timestamp","daa_capability_match","args","requirements","task_requirements","availableAgents","available_agents","matches","agentsToCheck","length","map","get","filter","Boolean","Array","from","values","score","calculateCapabilityScore","push","agentType","matchedRequirements","cap","some","req","matchCapability","sort","a","b","totalCandidates","bestMatch","daa_resource_alloc","allocationId","allocation","allocated","agentCount","allocatedPerAgent","resourceType","amount","Object","entries","floor","calculateResourceUtilization","utilization","daa_lifecycle_manage","agent_id","action","error","result","previousStatus","message","currentStatus","daa_communication","to","messageId","communication","delivered","sender","receiver","deliveredAt","daa_consensus","proposal","consensusId","votes","vote","totalVotes","size","approvals","v","approved","fromEntries","rejections","summary","total","approvalRate","setTimeout","agentCaps","capability","requirement","toLowerCase","includes","totalAllocated","totalCapacity","agentAlloc","daaManager","module","exports"],"mappings":"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"}