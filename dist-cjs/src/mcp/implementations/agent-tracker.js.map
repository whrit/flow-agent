{"version":3,"sources":["../../../../src/mcp/implementations/agent-tracker.js"],"sourcesContent":["/**\n * Agent Tracker Module\n * Tracks spawned agents in memory for real-time status\n */\n\nclass AgentTracker {\n  constructor() {\n    this.agents = new Map();\n    this.swarms = new Map();\n    this.tasks = new Map();\n  }\n\n  // Track agent spawn\n  trackAgent(agentId, agentData) {\n    this.agents.set(agentId, {\n      ...agentData,\n      createdAt: new Date().toISOString(),\n      lastActive: new Date().toISOString(),\n    });\n    \n    // Update swarm agent count\n    if (agentData.swarmId && this.swarms.has(agentData.swarmId)) {\n      const swarm = this.swarms.get(agentData.swarmId);\n      swarm.agentCount = (swarm.agentCount || 0) + 1;\n      swarm.activeAgents = (swarm.activeAgents || 0) + 1;\n    }\n  }\n\n  // Track swarm creation\n  trackSwarm(swarmId, swarmData) {\n    this.swarms.set(swarmId, {\n      ...swarmData,\n      agentCount: 0,\n      activeAgents: 0,\n      taskCount: 0,\n      pendingTasks: 0,\n      completedTasks: 0,\n      createdAt: new Date().toISOString(),\n    });\n  }\n\n  // Track task creation\n  trackTask(taskId, taskData) {\n    this.tasks.set(taskId, {\n      ...taskData,\n      createdAt: new Date().toISOString(),\n      status: taskData.status || 'pending',\n    });\n    \n    // Update swarm task counts\n    if (taskData.swarmId && this.swarms.has(taskData.swarmId)) {\n      const swarm = this.swarms.get(taskData.swarmId);\n      swarm.taskCount = (swarm.taskCount || 0) + 1;\n      if (taskData.status === 'pending') {\n        swarm.pendingTasks = (swarm.pendingTasks || 0) + 1;\n      }\n    }\n  }\n\n  // Get agents for a swarm\n  getAgents(swarmId) {\n    const agents = [];\n    for (const [id, agent] of this.agents) {\n      if (!swarmId || agent.swarmId === swarmId) {\n        agents.push({ id, ...agent });\n      }\n    }\n    return agents;\n  }\n  \n  // Store task results\n  storeTaskResult(taskId, result) {\n    if (this.tasks.has(taskId)) {\n      const task = this.tasks.get(taskId);\n      task.result = result;\n      task.completedAt = new Date().toISOString();\n      this.updateTaskStatus(taskId, 'completed');\n      return true;\n    }\n    // Store even if task wasn't tracked\n    this.tasks.set(taskId, {\n      id: taskId,\n      result: result,\n      status: 'completed',\n      completedAt: new Date().toISOString(),\n    });\n    return true;\n  }\n  \n  // Get task results\n  getTaskResult(taskId) {\n    const task = this.tasks.get(taskId);\n    return task ? task.result : null;\n  }\n\n  // Get swarm status\n  getSwarmStatus(swarmId) {\n    if (!this.swarms.has(swarmId)) {\n      // If not tracked, return with real agent counts\n      const agents = this.getAgents(swarmId);\n      return {\n        swarmId,\n        agentCount: agents.length,\n        activeAgents: agents.filter(a => a.status === 'active').length,\n        taskCount: 0,\n        pendingTasks: 0,\n        completedTasks: 0,\n      };\n    }\n    return this.swarms.get(swarmId);\n  }\n\n  // Update task status\n  updateTaskStatus(taskId, status) {\n    if (this.tasks.has(taskId)) {\n      const task = this.tasks.get(taskId);\n      const oldStatus = task.status;\n      task.status = status;\n      task.lastUpdated = new Date().toISOString();\n      \n      // Update swarm counts\n      if (task.swarmId && this.swarms.has(task.swarmId)) {\n        const swarm = this.swarms.get(task.swarmId);\n        \n        if (oldStatus === 'pending' && status !== 'pending') {\n          swarm.pendingTasks = Math.max(0, (swarm.pendingTasks || 0) - 1);\n        }\n        if (status === 'completed' && oldStatus !== 'completed') {\n          swarm.completedTasks = (swarm.completedTasks || 0) + 1;\n        }\n      }\n    }\n  }\n}\n\n// Singleton instance\nconst tracker = new AgentTracker();\n\n// Export for use in MCP tools\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = tracker;\n}\n\n// Also make available globally for the MCP server\nif (typeof global !== 'undefined') {\n  global.agentTracker = tracker;\n}"],"names":["AgentTracker","agents","Map","swarms","tasks","trackAgent","agentId","agentData","set","createdAt","Date","toISOString","lastActive","swarmId","has","swarm","get","agentCount","activeAgents","trackSwarm","swarmData","taskCount","pendingTasks","completedTasks","trackTask","taskId","taskData","status","getAgents","id","agent","push","storeTaskResult","result","task","completedAt","updateTaskStatus","getTaskResult","getSwarmStatus","length","filter","a","oldStatus","lastUpdated","Math","max","tracker","module","exports","global","agentTracker"],"mappings":"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"}