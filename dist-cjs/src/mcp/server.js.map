{"version":3,"sources":["../../../src/mcp/server.ts"],"sourcesContent":["/**\n * MCP (Model Context Protocol) server implementation\n */\n\nimport {\n  MCPConfig,\n  MCPRequest,\n  MCPResponse,\n  MCPError,\n  MCPTool,\n  MCPInitializeParams,\n  MCPInitializeResult,\n  MCPSession,\n  MCPMetrics,\n  MCPProtocolVersion,\n  MCPCapabilities,\n  MCPContext,\n} from '../utils/types.js';\nimport type { IEventBus } from '../core/event-bus.js';\nimport type { ILogger } from '../core/logger.js';\nimport { MCPError as MCPErrorClass, MCPMethodNotFoundError } from '../utils/errors.js';\nimport type { ITransport } from './transports/base.js';\nimport { StdioTransport } from './transports/stdio.js';\nimport { HttpTransport } from './transports/http.js';\nimport { ToolRegistry } from './tools.js';\nimport { RequestRouter } from './router.js';\nimport { SessionManager, ISessionManager } from './session-manager.js';\nimport { AuthManager, IAuthManager } from './auth.js';\nimport { LoadBalancer, ILoadBalancer, RequestQueue } from './load-balancer.js';\nimport { createClaudeFlowTools, ClaudeFlowToolContext } from './claude-flow-tools.js';\nimport { createSwarmTools, SwarmToolContext } from './swarm-tools.js';\nimport {\n  createRuvSwarmTools,\n  RuvSwarmToolContext,\n  isRuvSwarmAvailable,\n  initializeRuvSwarmIntegration,\n} from './ruv-swarm-tools.js';\nimport { platform, arch } from 'node:os';\nimport { performance } from 'node:perf_hooks';\n\nexport interface IMCPServer {\n  start(): Promise<void>;\n  stop(): Promise<void>;\n  registerTool(tool: MCPTool): void;\n  getHealthStatus(): Promise<{\n    healthy: boolean;\n    error?: string;\n    metrics?: Record<string, number>;\n  }>;\n  getMetrics(): MCPMetrics;\n  getSessions(): MCPSession[];\n  getSession(sessionId: string): MCPSession | undefined;\n  terminateSession(sessionId: string): void;\n}\n\n/**\n * MCP server implementation\n */\nexport class MCPServer implements IMCPServer {\n  private transport: ITransport;\n  private toolRegistry: ToolRegistry;\n  private router: RequestRouter;\n  private sessionManager: ISessionManager;\n  private authManager: IAuthManager;\n  private loadBalancer?: ILoadBalancer;\n  private requestQueue?: RequestQueue;\n  private running = false;\n  private currentSession?: MCPSession | undefined;\n\n  private readonly serverInfo = {\n    name: 'Claude-Flow MCP Server',\n    version: '1.0.0',\n  };\n\n  private readonly supportedProtocolVersion: MCPProtocolVersion = {\n    major: 2024,\n    minor: 11,\n    patch: 5,\n  };\n\n  private readonly serverCapabilities: MCPCapabilities = {\n    logging: {\n      level: 'info',\n    },\n    tools: {\n      listChanged: true,\n    },\n    resources: {\n      listChanged: false,\n      subscribe: false,\n    },\n    prompts: {\n      listChanged: false,\n    },\n  };\n\n  constructor(\n    private config: MCPConfig,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n    private orchestrator?: any, // Reference to orchestrator instance\n    private swarmCoordinator?: any, // Reference to swarm coordinator instance\n    private agentManager?: any, // Reference to agent manager instance\n    private resourceManager?: any, // Reference to resource manager instance\n    private messagebus?: any, // Reference to message bus instance\n    private monitor?: any, // Reference to real-time monitor instance\n  ) {\n    // Initialize transport\n    this.transport = this.createTransport();\n\n    // Initialize tool registry\n    this.toolRegistry = new ToolRegistry(logger);\n\n    // Initialize session manager\n    this.sessionManager = new SessionManager(config, logger);\n\n    // Initialize auth manager\n    this.authManager = new AuthManager(config.auth || { enabled: false, method: 'token' }, logger);\n\n    // Initialize load balancer if enabled\n    if (config.loadBalancer?.enabled) {\n      this.loadBalancer = new LoadBalancer(config.loadBalancer, logger);\n      this.requestQueue = new RequestQueue(1000, 30000, logger);\n    }\n\n    // Initialize request router\n    this.router = new RequestRouter(this.toolRegistry, logger);\n  }\n\n  async start(): Promise<void> {\n    if (this.running) {\n      throw new MCPErrorClass('MCP server already running');\n    }\n\n    this.logger.info('Starting MCP server', { transport: this.config.transport });\n\n    try {\n      // Set up request handler\n      this.transport.onRequest(async (request) => {\n        return await this.handleRequest(request);\n      });\n\n      // Start transport\n      await this.transport.start();\n\n      // Register built-in tools\n      await this.registerBuiltInTools();\n\n      this.running = true;\n      this.logger.info('MCP server started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start MCP server', error);\n      throw new MCPErrorClass('Failed to start MCP server', { error });\n    }\n  }\n\n  async stop(): Promise<void> {\n    if (!this.running) {\n      return;\n    }\n\n    this.logger.info('Stopping MCP server');\n\n    try {\n      // Stop transport\n      await this.transport.stop();\n\n      // Clean up session manager\n      if (this.sessionManager && 'destroy' in this.sessionManager) {\n        (this.sessionManager as any).destroy();\n      }\n\n      // Clean up all sessions\n      for (const session of this.sessionManager.getActiveSessions()) {\n        this.sessionManager.removeSession(session.id);\n      }\n\n      this.running = false;\n      this.currentSession = undefined;\n      this.logger.info('MCP server stopped');\n    } catch (error) {\n      this.logger.error('Error stopping MCP server', error);\n      throw error;\n    }\n  }\n\n  registerTool(tool: MCPTool): void {\n    this.toolRegistry.register(tool);\n    this.logger.info('Tool registered', { name: tool.name });\n  }\n\n  async getHealthStatus(): Promise<{\n    healthy: boolean;\n    error?: string;\n    metrics?: Record<string, number>;\n  }> {\n    try {\n      const transportHealth = await this.transport.getHealthStatus();\n      const registeredTools = this.toolRegistry.getToolCount();\n      const { totalRequests, successfulRequests, failedRequests } = this.router.getMetrics();\n      const sessionMetrics = this.sessionManager.getSessionMetrics();\n\n      const metrics: Record<string, number> = {\n        registeredTools,\n        totalRequests,\n        successfulRequests,\n        failedRequests,\n        totalSessions: sessionMetrics.total,\n        activeSessions: sessionMetrics.active,\n        authenticatedSessions: sessionMetrics.authenticated,\n        expiredSessions: sessionMetrics.expired,\n        ...transportHealth.metrics,\n      };\n\n      if (this.loadBalancer) {\n        const lbMetrics = this.loadBalancer.getMetrics();\n        metrics.rateLimitedRequests = lbMetrics.rateLimitedRequests;\n        metrics.averageResponseTime = lbMetrics.averageResponseTime;\n        metrics.requestsPerSecond = lbMetrics.requestsPerSecond;\n        metrics.circuitBreakerTrips = lbMetrics.circuitBreakerTrips;\n      }\n\n      const status: { healthy: boolean; error?: string; metrics?: Record<string, number> } = {\n        healthy: this.running && transportHealth.healthy,\n        metrics,\n      };\n      if (transportHealth.error !== undefined) {\n        status.error = transportHealth.error;\n      }\n      return status;\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  getMetrics(): MCPMetrics {\n    const routerMetrics = this.router.getMetrics();\n    const sessionMetrics = this.sessionManager.getSessionMetrics();\n    const lbMetrics = this.loadBalancer?.getMetrics();\n\n    return {\n      totalRequests: routerMetrics.totalRequests,\n      successfulRequests: routerMetrics.successfulRequests,\n      failedRequests: routerMetrics.failedRequests,\n      averageResponseTime: lbMetrics?.averageResponseTime || 0,\n      activeSessions: sessionMetrics.active,\n      toolInvocations: {}, // TODO: Implement tool-specific metrics\n      errors: {}, // TODO: Implement error categorization\n      lastReset: lbMetrics?.lastReset || new Date(),\n    };\n  }\n\n  getSessions(): MCPSession[] {\n    return this.sessionManager.getActiveSessions();\n  }\n\n  getSession(sessionId: string): MCPSession | undefined {\n    return this.sessionManager.getSession(sessionId);\n  }\n\n  terminateSession(sessionId: string): void {\n    this.sessionManager.removeSession(sessionId);\n    if (this.currentSession?.id === sessionId) {\n      this.currentSession = undefined;\n    }\n  }\n\n  private async handleRequest(request: MCPRequest): Promise<MCPResponse> {\n    this.logger.debug('Handling MCP request', {\n      id: request.id,\n      method: request.method,\n    });\n\n    try {\n      // Handle initialization request separately\n      if (request.method === 'initialize') {\n        return await this.handleInitialize(request);\n      }\n\n      // Get or create session\n      const session = this.getOrCreateSession();\n\n      // Check if session is initialized for non-initialize requests\n      if (!session.isInitialized) {\n        return {\n          jsonrpc: '2.0',\n          id: request.id,\n          error: {\n            code: -32002,\n            message: 'Server not initialized',\n          },\n        };\n      }\n\n      // Update session activity\n      this.sessionManager.updateActivity(session.id);\n\n      // Check load balancer constraints\n      if (this.loadBalancer) {\n        const allowed = await this.loadBalancer.shouldAllowRequest(session, request);\n        if (!allowed) {\n          return {\n            jsonrpc: '2.0',\n            id: request.id,\n            error: {\n              code: -32000,\n              message: 'Rate limit exceeded or circuit breaker open',\n            },\n          };\n        }\n      }\n\n      // Record request start\n      const requestMetrics = this.loadBalancer?.recordRequestStart(session, request);\n\n      try {\n        // Process request through router\n        const result = await this.router.route(request);\n\n        const response: MCPResponse = {\n          jsonrpc: '2.0',\n          id: request.id,\n          result,\n        };\n\n        // Record success\n        if (requestMetrics) {\n          this.loadBalancer?.recordRequestEnd(requestMetrics, response);\n        }\n\n        return response;\n      } catch (error) {\n        // Record failure\n        if (requestMetrics) {\n          this.loadBalancer?.recordRequestEnd(requestMetrics, undefined, error as Error);\n        }\n        throw error;\n      }\n    } catch (error) {\n      this.logger.error('Error handling MCP request', {\n        id: request.id,\n        method: request.method,\n        error,\n      });\n\n      return {\n        jsonrpc: '2.0',\n        id: request.id,\n        error: this.errorToMCPError(error),\n      };\n    }\n  }\n\n  private async handleInitialize(request: MCPRequest): Promise<MCPResponse> {\n    try {\n      const params = request.params as MCPInitializeParams;\n\n      if (!params) {\n        return {\n          jsonrpc: '2.0',\n          id: request.id,\n          error: {\n            code: -32602,\n            message: 'Invalid params',\n          },\n        };\n      }\n\n      // Create session\n      const session = this.sessionManager.createSession(this.config.transport);\n      this.currentSession = session;\n\n      // Initialize session\n      this.sessionManager.initializeSession(session.id, params);\n\n      // Prepare response\n      const result: MCPInitializeResult = {\n        protocolVersion: this.supportedProtocolVersion,\n        capabilities: this.serverCapabilities,\n        serverInfo: this.serverInfo,\n        instructions: 'Claude-Flow MCP Server ready for tool execution',\n      };\n\n      this.logger.info('Session initialized', {\n        sessionId: session.id,\n        clientInfo: params.clientInfo,\n        protocolVersion: params.protocolVersion,\n      });\n\n      return {\n        jsonrpc: '2.0',\n        id: request.id,\n        result,\n      };\n    } catch (error) {\n      this.logger.error('Error during initialization', error);\n      return {\n        jsonrpc: '2.0',\n        id: request.id,\n        error: this.errorToMCPError(error),\n      };\n    }\n  }\n\n  private getOrCreateSession(): MCPSession {\n    if (this.currentSession) {\n      return this.currentSession;\n    }\n\n    // For stdio transport, create a default session\n    const session = this.sessionManager.createSession(this.config.transport);\n    this.currentSession = session;\n    return session;\n  }\n\n  private createTransport(): ITransport {\n    switch (this.config.transport) {\n      case 'stdio':\n        return new StdioTransport(this.logger);\n\n      case 'http':\n        return new HttpTransport(\n          this.config.host || 'localhost',\n          this.config.port || 3000,\n          this.config.tlsEnabled || false,\n          this.logger,\n        );\n\n      default:\n        throw new MCPErrorClass(`Unknown transport type: ${this.config.transport}`);\n    }\n  }\n\n  private async registerBuiltInTools(): Promise<void> {\n    // System information tool\n    this.registerTool({\n      name: 'system/info',\n      description: 'Get system information',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () => {\n        return {\n          version: '1.0.0',\n          platform: platform(),\n          arch: arch(),\n          runtime: 'Node.js',\n          uptime: performance.now(),\n        };\n      },\n    });\n\n    // Health check tool\n    this.registerTool({\n      name: 'system/health',\n      description: 'Get system health status',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () => {\n        return await this.getHealthStatus();\n      },\n    });\n\n    // List tools\n    this.registerTool({\n      name: 'tools/list',\n      description: 'List all available tools',\n      inputSchema: {\n        type: 'object',\n        properties: {},\n      },\n      handler: async () => {\n        return this.toolRegistry.listTools();\n      },\n    });\n\n    // Tool schema\n    this.registerTool({\n      name: 'tools/schema',\n      description: 'Get schema for a specific tool',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          name: { type: 'string' },\n        },\n        required: ['name'],\n      },\n      handler: async (input: any) => {\n        const tool = this.toolRegistry.getTool(input.name);\n        if (!tool) {\n          throw new Error(`Tool not found: ${input.name}`);\n        }\n        return {\n          name: tool.name,\n          description: tool.description,\n          inputSchema: tool.inputSchema,\n        };\n      },\n    });\n\n    // Register Claude-Flow specific tools if orchestrator is available\n    if (this.orchestrator) {\n      const claudeFlowTools = await createClaudeFlowTools(this.logger);\n\n      for (const tool of claudeFlowTools) {\n        // Wrap the handler to inject orchestrator context\n        const originalHandler = tool.handler;\n        tool.handler = async (input: unknown, context?: MCPContext) => {\n          const claudeFlowContext: ClaudeFlowToolContext = {\n            ...context,\n            orchestrator: this.orchestrator,\n          } as ClaudeFlowToolContext;\n\n          return await originalHandler(input, claudeFlowContext);\n        };\n\n        this.registerTool(tool);\n      }\n\n      this.logger.info('Registered Claude-Flow tools', { count: claudeFlowTools.length });\n    } else {\n      this.logger.warn('Orchestrator not available - Claude-Flow tools not registered');\n    }\n\n    // Register Swarm-specific tools if swarm components are available\n    if (this.swarmCoordinator || this.agentManager || this.resourceManager) {\n      const swarmTools = createSwarmTools(this.logger);\n\n      for (const tool of swarmTools) {\n        // Wrap the handler to inject swarm context\n        const originalHandler = tool.handler;\n        tool.handler = async (input: unknown, context?: MCPContext) => {\n          const swarmContext: SwarmToolContext = {\n            ...context,\n            swarmCoordinator: this.swarmCoordinator,\n            agentManager: this.agentManager,\n            resourceManager: this.resourceManager,\n            messageBus: this.messagebus,\n            monitor: this.monitor,\n          } as SwarmToolContext;\n\n          return await originalHandler(input, swarmContext);\n        };\n\n        this.registerTool(tool);\n      }\n\n      this.logger.info('Registered Swarm tools', { count: swarmTools.length });\n    } else {\n      this.logger.warn('Swarm components not available - Swarm tools not registered');\n    }\n\n    // Register ruv-swarm MCP tools if available\n    this.registerRuvSwarmTools();\n  }\n\n  /**\n   * Register ruv-swarm MCP tools if available\n   */\n  private async registerRuvSwarmTools(): Promise<void> {\n    try {\n      // Check if ruv-swarm is available\n      const available = await isRuvSwarmAvailable(this.logger);\n\n      if (!available) {\n        this.logger.info('ruv-swarm not available - skipping ruv-swarm MCP tools registration');\n        return;\n      }\n\n      // Initialize ruv-swarm integration\n      const workingDirectory = process.cwd();\n      const integration = await initializeRuvSwarmIntegration(workingDirectory, this.logger);\n\n      if (!integration.success) {\n        this.logger.warn('Failed to initialize ruv-swarm integration', {\n          error: integration.error,\n        });\n        return;\n      }\n\n      // Create ruv-swarm tools\n      const ruvSwarmTools = createRuvSwarmTools(this.logger);\n\n      for (const tool of ruvSwarmTools) {\n        // Wrap the handler to inject ruv-swarm context\n        const originalHandler = tool.handler;\n        tool.handler = async (input: unknown, context?: MCPContext) => {\n          const ruvSwarmContext: RuvSwarmToolContext = {\n            ...context,\n            workingDirectory,\n            sessionId: `mcp-session-${Date.now()}`,\n            swarmId: process.env.CLAUDE_SWARM_ID || `mcp-swarm-${Date.now()}`,\n          };\n\n          return await originalHandler(input, ruvSwarmContext);\n        };\n\n        this.registerTool(tool);\n      }\n\n      this.logger.info('Registered ruv-swarm MCP tools', {\n        count: ruvSwarmTools.length,\n        integration: integration.data,\n      });\n    } catch (error) {\n      this.logger.error('Error registering ruv-swarm MCP tools', error);\n    }\n  }\n\n  private errorToMCPError(error): MCPError {\n    if (error instanceof MCPMethodNotFoundError) {\n      return {\n        code: -32601,\n        message: error instanceof Error ? error.message : String(error),\n        data: error.details,\n      };\n    }\n\n    if (error instanceof MCPErrorClass) {\n      return {\n        code: -32603,\n        message: error instanceof Error ? error.message : String(error),\n        data: error.details,\n      };\n    }\n\n    if (error instanceof Error) {\n      return {\n        code: -32603,\n        message: error instanceof Error ? error.message : String(error),\n      };\n    }\n\n    return {\n      code: -32603,\n      message: 'Internal error',\n      data: error,\n    };\n  }\n}\n"],"names":["MCPError","MCPErrorClass","MCPMethodNotFoundError","StdioTransport","HttpTransport","ToolRegistry","RequestRouter","SessionManager","AuthManager","LoadBalancer","RequestQueue","createClaudeFlowTools","createSwarmTools","createRuvSwarmTools","isRuvSwarmAvailable","initializeRuvSwarmIntegration","platform","arch","performance","MCPServer","transport","toolRegistry","router","sessionManager","authManager","loadBalancer","requestQueue","running","currentSession","serverInfo","name","version","supportedProtocolVersion","major","minor","patch","serverCapabilities","logging","level","tools","listChanged","resources","subscribe","prompts","config","eventBus","logger","orchestrator","swarmCoordinator","agentManager","resourceManager","messagebus","monitor","createTransport","auth","enabled","method","start","info","onRequest","request","handleRequest","registerBuiltInTools","error","stop","destroy","session","getActiveSessions","removeSession","id","undefined","registerTool","tool","register","getHealthStatus","transportHealth","registeredTools","getToolCount","totalRequests","successfulRequests","failedRequests","getMetrics","sessionMetrics","getSessionMetrics","metrics","totalSessions","total","activeSessions","active","authenticatedSessions","authenticated","expiredSessions","expired","lbMetrics","rateLimitedRequests","averageResponseTime","requestsPerSecond","circuitBreakerTrips","status","healthy","Error","message","routerMetrics","toolInvocations","errors","lastReset","Date","getSessions","getSession","sessionId","terminateSession","debug","handleInitialize","getOrCreateSession","isInitialized","jsonrpc","code","updateActivity","allowed","shouldAllowRequest","requestMetrics","recordRequestStart","result","route","response","recordRequestEnd","errorToMCPError","params","createSession","initializeSession","protocolVersion","capabilities","instructions","clientInfo","host","port","tlsEnabled","description","inputSchema","type","properties","handler","runtime","uptime","now","listTools","required","input","getTool","claudeFlowTools","originalHandler","context","claudeFlowContext","count","length","warn","swarmTools","swarmContext","messageBus","registerRuvSwarmTools","available","workingDirectory","process","cwd","integration","success","ruvSwarmTools","ruvSwarmContext","swarmId","env","CLAUDE_SWARM_ID","data","String","details"],"mappings":"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"}