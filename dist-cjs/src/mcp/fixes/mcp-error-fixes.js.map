{"version":3,"sources":["../../../../src/mcp/fixes/mcp-error-fixes.js"],"sourcesContent":["/**\n * MCP Error Fixes\n * Fixes for agent_metrics, swarm_monitor, and neural_train errors\n */\n\n// Fix 1: agent_metrics - Ensure neuralNetworks is always an array\nexport function fixAgentMetrics(data) {\n  if (!data) {\n    return {\n      success: true,\n      agentId: null,\n      metrics: {\n        tasksCompleted: 0,\n        successRate: 0,\n        avgExecutionTime: 0,\n        neuralNetworks: [], // Ensure it's an array\n        memoryUsage: 0,\n        cpuUsage: 0,\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Ensure neuralNetworks is an array\n  if (data.metrics && !Array.isArray(data.metrics.neuralNetworks)) {\n    data.metrics.neuralNetworks = [];\n  }\n\n  // If neuralNetworks exists but isn't an array, convert it\n  if (data.neuralNetworks && !Array.isArray(data.neuralNetworks)) {\n    data.neuralNetworks = [];\n  }\n\n  return data;\n}\n\n// Fix 2: swarm_monitor - Ensure recentEvents is always an array\nexport function fixSwarmMonitor(data) {\n  if (!data) {\n    return {\n      success: true,\n      monitoring: {\n        swarmId: null,\n        status: 'active',\n        recentEvents: [], // Ensure it's an array\n        agentActivity: [],\n        taskProgress: [],\n        resourceUsage: {\n          cpu: 0,\n          memory: 0,\n          network: 0,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Ensure recentEvents is an array\n  if (data.monitoring && !Array.isArray(data.monitoring.recentEvents)) {\n    data.monitoring.recentEvents = [];\n  }\n\n  // If recentEvents exists at top level but isn't an array, convert it\n  if (data.recentEvents && !Array.isArray(data.recentEvents)) {\n    data.recentEvents = [];\n  }\n\n  return data;\n}\n\n// Fix 3: neural_train - Add proper parameter validation\nexport function fixNeuralTrain(args) {\n  // Ensure agentId is provided as a string\n  if (!args.agentId && !args.agent_id) {\n    // Generate a default agent ID if not provided\n    args.agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n  }\n\n  // Normalize parameter names\n  if (args.agent_id && !args.agentId) {\n    args.agentId = args.agent_id;\n  }\n\n  // Ensure agentId is a string\n  if (typeof args.agentId !== 'string') {\n    args.agentId = String(args.agentId || '');\n  }\n\n  // Set default iterations if not provided\n  if (!args.iterations && !args.epochs) {\n    args.iterations = 10;\n  }\n\n  // Normalize epochs to iterations\n  if (args.epochs && !args.iterations) {\n    args.iterations = args.epochs;\n  }\n\n  return args;\n}\n\n// Wrapper function to handle ruv-swarm MCP responses\nexport function wrapRuvSwarmResponse(toolName, response) {\n  try {\n    // Parse response if it's a string\n    let data = response;\n    if (typeof response === 'string') {\n      try {\n        data = JSON.parse(response);\n      } catch {\n        // If can't parse, wrap in object\n        data = { output: response };\n      }\n    }\n\n    // Apply specific fixes based on tool name\n    switch (toolName) {\n      case 'agent_metrics':\n      case 'mcp__ruv-swarm__agent_metrics':\n        return fixAgentMetrics(data);\n\n      case 'swarm_monitor':\n      case 'mcp__ruv-swarm__swarm_monitor':\n        return fixSwarmMonitor(data);\n\n      case 'neural_train':\n      case 'mcp__ruv-swarm__neural_train':\n        // For neural_train, we fix the args before calling\n        return data;\n\n      default:\n        return data;\n    }\n  } catch (error) {\n    console.error(`Error wrapping response for ${toolName}:`, error);\n    return {\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n// Export for use in MCP server\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    fixAgentMetrics,\n    fixSwarmMonitor,\n    fixNeuralTrain,\n    wrapRuvSwarmResponse,\n  };\n}"],"names":["fixAgentMetrics","data","success","agentId","metrics","tasksCompleted","successRate","avgExecutionTime","neuralNetworks","memoryUsage","cpuUsage","timestamp","Date","toISOString","Array","isArray","fixSwarmMonitor","monitoring","swarmId","status","recentEvents","agentActivity","taskProgress","resourceUsage","cpu","memory","network","fixNeuralTrain","args","agent_id","now","Math","random","toString","substr","String","iterations","epochs","wrapRuvSwarmResponse","toolName","response","JSON","parse","output","error","console","message","module","exports"],"mappings":"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"}