{"version":3,"sources":["../../../../src/mcp/recovery/connection-health-monitor.ts"],"sourcesContent":["/**\n * Connection Health Monitor for MCP\n * Monitors connection health and triggers recovery when needed\n */\n\nimport { EventEmitter } from 'node:events';\nimport type { ILogger } from '../../core/logger.js';\nimport type { MCPClient } from '../client.js';\n\nexport interface HealthStatus {\n  healthy: boolean;\n  lastHeartbeat: Date;\n  missedHeartbeats: number;\n  latency: number;\n  connectionState: 'connected' | 'disconnected' | 'reconnecting';\n  error?: string;\n}\n\nexport interface HealthMonitorConfig {\n  heartbeatInterval: number;\n  heartbeatTimeout: number;\n  maxMissedHeartbeats: number;\n  enableAutoRecovery: boolean;\n}\n\nexport class ConnectionHealthMonitor extends EventEmitter {\n  private heartbeatTimer?: NodeJS.Timeout;\n  private timeoutTimer?: NodeJS.Timeout;\n  private lastHeartbeat: Date = new Date();\n  private missedHeartbeats = 0;\n  private currentLatency = 0;\n  private isMonitoring = false;\n  private healthStatus: HealthStatus;\n\n  private readonly defaultConfig: HealthMonitorConfig = {\n    heartbeatInterval: 5000,\n    heartbeatTimeout: 10000,\n    maxMissedHeartbeats: 3,\n    enableAutoRecovery: true,\n  };\n\n  constructor(\n    private client: MCPClient,\n    private logger: ILogger,\n    config?: Partial<HealthMonitorConfig>,\n  ) {\n    super();\n    this.config = { ...this.defaultConfig, ...config };\n\n    this.healthStatus = {\n      healthy: false,\n      lastHeartbeat: new Date(),\n      missedHeartbeats: 0,\n      latency: 0,\n      connectionState: 'disconnected',\n    };\n  }\n\n  private config: HealthMonitorConfig;\n\n  /**\n   * Start health monitoring\n   */\n  async start(): Promise<void> {\n    if (this.isMonitoring) {\n      this.logger.warn('Health monitor already running');\n      return;\n    }\n\n    this.logger.info('Starting connection health monitor', {\n      config: this.config,\n    });\n\n    this.isMonitoring = true;\n    this.missedHeartbeats = 0;\n    this.lastHeartbeat = new Date();\n\n    // Start heartbeat cycle\n    this.scheduleHeartbeat();\n\n    // Update initial status\n    this.updateHealthStatus('connected');\n    this.emit('started');\n  }\n\n  /**\n   * Stop health monitoring\n   */\n  async stop(): Promise<void> {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.logger.info('Stopping connection health monitor');\n    this.isMonitoring = false;\n\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = undefined;\n    }\n\n    if (this.timeoutTimer) {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = undefined;\n    }\n\n    this.updateHealthStatus('disconnected');\n    this.emit('stopped');\n  }\n\n  /**\n   * Get current health status\n   */\n  getHealthStatus(): HealthStatus {\n    return { ...this.healthStatus };\n  }\n\n  /**\n   * Check connection health immediately\n   */\n  async checkHealth(): Promise<HealthStatus> {\n    try {\n      const startTime = Date.now();\n\n      // Send heartbeat ping\n      await this.sendHeartbeat();\n\n      // Calculate latency\n      this.currentLatency = Date.now() - startTime;\n      this.lastHeartbeat = new Date();\n      this.missedHeartbeats = 0;\n\n      this.updateHealthStatus('connected', true);\n\n      return this.getHealthStatus();\n    } catch (error) {\n      this.logger.error('Health check failed', error);\n      this.handleHeartbeatFailure(error as Error);\n      return this.getHealthStatus();\n    }\n  }\n\n  /**\n   * Force a health check\n   */\n  async forceCheck(): Promise<void> {\n    this.logger.debug('Forcing health check');\n\n    // Cancel current timers\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n    }\n    if (this.timeoutTimer) {\n      clearTimeout(this.timeoutTimer);\n    }\n\n    // Perform immediate check\n    await this.performHeartbeat();\n  }\n\n  private scheduleHeartbeat(): void {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.heartbeatTimer = setTimeout(() => {\n      this.performHeartbeat().catch((error) => {\n        this.logger.error('Heartbeat error', error);\n      });\n    }, this.config.heartbeatInterval);\n  }\n\n  private async performHeartbeat(): Promise<void> {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    this.logger.debug('Performing heartbeat');\n\n    try {\n      // Set timeout for heartbeat response\n      this.setHeartbeatTimeout();\n\n      const startTime = Date.now();\n      await this.sendHeartbeat();\n\n      // Clear timeout on success\n      this.clearHeartbeatTimeout();\n\n      // Update metrics\n      this.currentLatency = Date.now() - startTime;\n      this.lastHeartbeat = new Date();\n      this.missedHeartbeats = 0;\n\n      this.logger.debug('Heartbeat successful', {\n        latency: this.currentLatency,\n      });\n\n      this.updateHealthStatus('connected', true);\n\n      // Schedule next heartbeat\n      this.scheduleHeartbeat();\n    } catch (error) {\n      this.handleHeartbeatFailure(error as Error);\n    }\n  }\n\n  private async sendHeartbeat(): Promise<void> {\n    // Send heartbeat notification via MCP\n    await this.client.notify('heartbeat', {\n      timestamp: Date.now(),\n      sessionId: this.generateSessionId(),\n    });\n  }\n\n  private setHeartbeatTimeout(): void {\n    this.timeoutTimer = setTimeout(() => {\n      this.handleHeartbeatTimeout();\n    }, this.config.heartbeatTimeout);\n  }\n\n  private clearHeartbeatTimeout(): void {\n    if (this.timeoutTimer) {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = undefined;\n    }\n  }\n\n  private handleHeartbeatTimeout(): void {\n    this.logger.warn('Heartbeat timeout');\n    this.handleHeartbeatFailure(new Error('Heartbeat timeout'));\n  }\n\n  private handleHeartbeatFailure(error: Error): void {\n    this.clearHeartbeatTimeout();\n\n    this.missedHeartbeats++;\n    this.logger.warn('Heartbeat failed', {\n      missedHeartbeats: this.missedHeartbeats,\n      maxMissed: this.config.maxMissedHeartbeats,\n      error: error instanceof Error ? error.message : String(error),\n    });\n\n    if (this.missedHeartbeats >= this.config.maxMissedHeartbeats) {\n      this.logger.error('Max missed heartbeats exceeded, connection unhealthy');\n      this.updateHealthStatus(\n        'disconnected',\n        false,\n        error instanceof Error ? error.message : String(error),\n      );\n\n      if (this.config.enableAutoRecovery) {\n        this.emit('connectionLost', { error });\n      }\n    } else {\n      // Schedule next heartbeat with backoff\n      const backoffDelay = this.config.heartbeatInterval * (this.missedHeartbeats + 1);\n      this.logger.debug('Scheduling heartbeat with backoff', { delay: backoffDelay });\n\n      this.heartbeatTimer = setTimeout(() => {\n        this.performHeartbeat().catch((err) => {\n          this.logger.error('Backoff heartbeat error', err);\n        });\n      }, backoffDelay);\n    }\n  }\n\n  private updateHealthStatus(\n    connectionState: 'connected' | 'disconnected' | 'reconnecting',\n    healthy?: boolean,\n    error?: string,\n  ): void {\n    const previousStatus = { ...this.healthStatus };\n\n    this.healthStatus = {\n      healthy: healthy ?? connectionState === 'connected',\n      lastHeartbeat: this.lastHeartbeat,\n      missedHeartbeats: this.missedHeartbeats,\n      latency: this.currentLatency,\n      connectionState,\n      error,\n    };\n\n    // Emit event if health changed\n    if (\n      previousStatus.healthy !== this.healthStatus.healthy ||\n      previousStatus.connectionState !== this.healthStatus.connectionState\n    ) {\n      this.logger.info('Health status changed', {\n        from: previousStatus.connectionState,\n        to: this.healthStatus.connectionState,\n        healthy: this.healthStatus.healthy,\n      });\n\n      this.emit('healthChange', this.healthStatus, previousStatus);\n    }\n  }\n\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).slice(2)}`;\n  }\n\n  /**\n   * Reset monitor state\n   */\n  reset(): void {\n    this.missedHeartbeats = 0;\n    this.currentLatency = 0;\n    this.lastHeartbeat = new Date();\n\n    if (this.isMonitoring) {\n      this.logger.debug('Resetting health monitor');\n      this.clearHeartbeatTimeout();\n      this.scheduleHeartbeat();\n    }\n  }\n}\n"],"names":["EventEmitter","ConnectionHealthMonitor","heartbeatTimer","timeoutTimer","lastHeartbeat","Date","missedHeartbeats","currentLatency","isMonitoring","healthStatus","defaultConfig","heartbeatInterval","heartbeatTimeout","maxMissedHeartbeats","enableAutoRecovery","client","logger","config","healthy","latency","connectionState","start","warn","info","scheduleHeartbeat","updateHealthStatus","emit","stop","clearTimeout","undefined","getHealthStatus","checkHealth","startTime","now","sendHeartbeat","error","handleHeartbeatFailure","forceCheck","debug","performHeartbeat","setTimeout","catch","setHeartbeatTimeout","clearHeartbeatTimeout","notify","timestamp","sessionId","generateSessionId","handleHeartbeatTimeout","Error","maxMissed","message","String","backoffDelay","delay","err","previousStatus","from","to","Math","random","toString","slice","reset"],"mappings":"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"}