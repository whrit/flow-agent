{"version":3,"sources":["../../../../src/mcp/transports/base.ts"],"sourcesContent":["/**\n * Base transport interface for MCP\n */\n\nimport type { MCPRequest, MCPResponse, MCPNotification } from '../../utils/types.js';\n\nexport type RequestHandler = (request: MCPRequest) => Promise<MCPResponse>;\nexport type NotificationHandler = (notification: MCPNotification) => Promise<void>;\n\nexport interface ITransport {\n  start(): Promise<void>;\n  stop(): Promise<void>;\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  onRequest(handler: RequestHandler): void;\n  onNotification?(handler: NotificationHandler): void;\n  sendRequest(request: MCPRequest): Promise<MCPResponse>;\n  sendNotification?(notification: MCPNotification): Promise<void>;\n  getHealthStatus(): Promise<{\n    healthy: boolean;\n    error?: string;\n    metrics?: Record<string, number>;\n  }>;\n}\n"],"names":[],"mappings":"AASA,WAcC"}