{"version":3,"sources":["../../../../src/mcp/transports/stdio.ts"],"sourcesContent":["/**\n * Standard I/O transport for MCP\n */\n\nimport { createReadStream, createWriteStream } from 'node:fs';\nimport { stdin, stdout } from 'node:process';\nimport { createInterface, Interface } from 'node:readline';\nimport type { ITransport, RequestHandler, NotificationHandler } from './base.js';\nimport type { MCPRequest, MCPResponse, MCPNotification } from '../../utils/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport { MCPTransportError } from '../../utils/errors.js';\n\n/**\n * Stdio transport implementation\n */\nexport class StdioTransport implements ITransport {\n  private requestHandler?: RequestHandler;\n  private notificationHandler?: NotificationHandler;\n  private readline?: Interface;\n  private messageCount = 0;\n  private notificationCount = 0;\n  private running = false;\n\n  constructor(private logger: ILogger) {}\n\n  async start(): Promise<void> {\n    if (this.running) {\n      throw new MCPTransportError('Transport already running');\n    }\n\n    this.logger.info('Starting stdio transport');\n\n    try {\n      // Create readline interface for stdin\n      this.readline = createInterface({\n        input: stdin,\n        output: stdout,\n        terminal: false,\n      });\n\n      // Set up line handler\n      this.readline.on('line', (line: string) => {\n        this.processMessage(line.trim()).catch((error) => {\n          this.logger.error('Error processing message', { line, error });\n        });\n      });\n\n      this.readline.on('close', () => {\n        this.logger.info('Stdin closed');\n        this.running = false;\n      });\n\n      this.running = true;\n      this.logger.info('Stdio transport started');\n    } catch (error) {\n      throw new MCPTransportError('Failed to start stdio transport', { error });\n    }\n  }\n\n  async stop(): Promise<void> {\n    if (!this.running) {\n      return;\n    }\n\n    this.logger.info('Stopping stdio transport');\n\n    this.running = false;\n\n    if (this.readline) {\n      this.readline.close();\n      this.readline = undefined;\n    }\n\n    this.logger.info('Stdio transport stopped');\n  }\n\n  onRequest(handler: RequestHandler): void {\n    this.requestHandler = handler;\n  }\n\n  onNotification(handler: NotificationHandler): void {\n    this.notificationHandler = handler;\n  }\n\n  async getHealthStatus(): Promise<{\n    healthy: boolean;\n    error?: string;\n    metrics?: Record<string, number>;\n  }> {\n    return {\n      healthy: this.running,\n      metrics: {\n        messagesReceived: this.messageCount,\n        notificationsSent: this.notificationCount,\n        stdinOpen: this.readline ? 1 : 0,\n      },\n    };\n  }\n\n  private async processMessage(line: string): Promise<void> {\n    let message: any;\n\n    try {\n      message = JSON.parse(line);\n\n      if (!message.jsonrpc || message.jsonrpc !== '2.0') {\n        throw new Error('Invalid JSON-RPC version');\n      }\n\n      if (!message.method) {\n        throw new Error('Missing method');\n      }\n    } catch (error) {\n      this.logger.error('Failed to parse message', { line, error });\n\n      // Send error response if we can extract an ID\n      let id = 'unknown';\n      try {\n        const parsed = JSON.parse(line);\n        if (parsed.id !== undefined) {\n          id = parsed.id;\n        }\n      } catch {\n        // Ignore parse error for ID extraction\n      }\n\n      await this.sendResponse({\n        jsonrpc: '2.0',\n        id,\n        error: {\n          code: -32700,\n          message: 'Parse error',\n        },\n      });\n      return;\n    }\n\n    this.messageCount++;\n\n    // Check if this is a notification (no id field) or a request\n    if (message.id === undefined) {\n      // This is a notification\n      await this.handleNotification(message as MCPNotification);\n    } else {\n      // This is a request\n      await this.handleRequest(message as MCPRequest);\n    }\n  }\n\n  private async handleRequest(request: MCPRequest): Promise<void> {\n    if (!this.requestHandler) {\n      await this.sendResponse({\n        jsonrpc: '2.0',\n        id: request.id,\n        error: {\n          code: -32603,\n          message: 'No request handler registered',\n        },\n      });\n      return;\n    }\n\n    try {\n      const response = await this.requestHandler(request);\n      await this.sendResponse(response);\n    } catch (error) {\n      this.logger.error('Request handler error', { request, error });\n\n      await this.sendResponse({\n        jsonrpc: '2.0',\n        id: request.id,\n        error: {\n          code: -32603,\n          message: 'Internal error',\n          data: error instanceof Error ? error.message : String(error),\n        },\n      });\n    }\n  }\n\n  private async handleNotification(notification: MCPNotification): Promise<void> {\n    if (!this.notificationHandler) {\n      this.logger.warn('Received notification but no handler registered', {\n        method: notification.method,\n      });\n      return;\n    }\n\n    try {\n      await this.notificationHandler(notification);\n    } catch (error) {\n      this.logger.error('Notification handler error', { notification, error });\n      // Notifications don't send error responses\n    }\n  }\n\n  private async sendResponse(response: MCPResponse): Promise<void> {\n    try {\n      const json = JSON.stringify(response);\n      stdout.write(json + '\\n');\n    } catch (error) {\n      this.logger.error('Failed to send response', { response, error });\n    }\n  }\n\n  async connect(): Promise<void> {\n    // For STDIO transport, connect is handled by start()\n    if (!this.running) {\n      await this.start();\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // For STDIO transport, disconnect is handled by stop()\n    await this.stop();\n  }\n\n  async sendRequest(request: MCPRequest): Promise<MCPResponse> {\n    // Send request to stdout\n    const json = JSON.stringify(request);\n    stdout.write(json + '\\n');\n\n    // In STDIO transport, responses are handled asynchronously\n    // This would need a proper request/response correlation mechanism\n    throw new Error('STDIO transport sendRequest requires request/response correlation');\n  }\n\n  async sendNotification(notification: MCPNotification): Promise<void> {\n    try {\n      const json = JSON.stringify(notification);\n      stdout.write(json + '\\n');\n      this.notificationCount++;\n    } catch (error) {\n      this.logger.error('Failed to send notification', { notification, error });\n      throw error;\n    }\n  }\n}\n"],"names":["stdin","stdout","createInterface","MCPTransportError","StdioTransport","requestHandler","notificationHandler","readline","messageCount","notificationCount","running","logger","start","info","input","output","terminal","on","line","processMessage","trim","catch","error","stop","close","undefined","onRequest","handler","onNotification","getHealthStatus","healthy","metrics","messagesReceived","notificationsSent","stdinOpen","message","JSON","parse","jsonrpc","Error","method","id","parsed","sendResponse","code","handleNotification","handleRequest","request","response","data","String","notification","warn","json","stringify","write","connect","disconnect","sendRequest","sendNotification"],"mappings":"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"}