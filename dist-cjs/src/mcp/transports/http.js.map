{"version":3,"sources":["../../../../src/mcp/transports/http.ts"],"sourcesContent":["/**\n * HTTP transport for MCP\n */\n\nimport express, { Express, Request, Response } from 'express';\nimport { createServer, Server } from 'node:http';\nimport { WebSocketServer, WebSocket } from 'ws';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport { join, dirname } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { ITransport, RequestHandler, NotificationHandler } from './base.js';\nimport type { MCPRequest, MCPResponse, MCPNotification, MCPConfig } from '../../utils/types.js';\nimport type { ILogger } from '../../core/logger.js';\nimport { MCPTransportError } from '../../utils/errors.js';\n\n/**\n * HTTP transport implementation\n */\nexport class HttpTransport implements ITransport {\n  private requestHandler?: RequestHandler;\n  private notificationHandler?: NotificationHandler;\n  private app: Express;\n  private server?: Server;\n  private wss?: WebSocketServer;\n  private messageCount = 0;\n  private notificationCount = 0;\n  private running = false;\n  private connections = new Set<WebSocket>();\n  private activeWebSockets = new Set<WebSocket>();\n\n  constructor(\n    private host: string,\n    private port: number,\n    private tlsEnabled: boolean,\n    private logger: ILogger,\n    private config?: MCPConfig,\n  ) {\n    this.app = express();\n    this.setupMiddleware();\n    this.setupRoutes();\n  }\n\n  async start(): Promise<void> {\n    if (this.running) {\n      throw new MCPTransportError('Transport already running');\n    }\n\n    this.logger.info('Starting HTTP transport', {\n      host: this.host,\n      port: this.port,\n      tls: this.tlsEnabled,\n    });\n\n    try {\n      // Create HTTP server\n      this.server = createServer(this.app);\n\n      // Create WebSocket server\n      this.wss = new WebSocketServer({\n        server: this.server,\n        path: '/ws',\n      });\n\n      this.setupWebSocketHandlers();\n\n      // Start server\n      await new Promise<void>((resolve, reject) => {\n        this.server!.listen(this.port, this.host, () => {\n          this.logger.info(`HTTP server listening on ${this.host}:${this.port}`);\n          resolve();\n        });\n\n        this.server!.on('error', reject);\n      });\n\n      this.running = true;\n      this.logger.info('HTTP transport started');\n    } catch (error) {\n      throw new MCPTransportError('Failed to start HTTP transport', { error });\n    }\n  }\n\n  async stop(): Promise<void> {\n    if (!this.running) {\n      return;\n    }\n\n    this.logger.info('Stopping HTTP transport');\n\n    this.running = false;\n\n    // Close all WebSocket connections\n    for (const ws of this.activeWebSockets) {\n      try {\n        ws.close();\n      } catch {\n        // Ignore errors\n      }\n    }\n    this.activeWebSockets.clear();\n    this.connections.clear();\n\n    // Close WebSocket server\n    if (this.wss) {\n      this.wss.close();\n      this.wss = undefined;\n    }\n\n    // Shutdown HTTP server\n    if (this.server) {\n      await new Promise<void>((resolve) => {\n        this.server!.close(() => resolve());\n      });\n      this.server = undefined;\n    }\n\n    this.logger.info('HTTP transport stopped');\n  }\n\n  onRequest(handler: RequestHandler): void {\n    this.requestHandler = handler;\n  }\n\n  onNotification(handler: NotificationHandler): void {\n    this.notificationHandler = handler;\n  }\n\n  async getHealthStatus(): Promise<{\n    healthy: boolean;\n    error?: string;\n    metrics?: Record<string, number>;\n  }> {\n    return {\n      healthy: this.running,\n      metrics: {\n        messagesReceived: this.messageCount,\n        notificationsSent: this.notificationCount,\n        activeConnections: this.connections.size,\n        activeWebSockets: this.activeWebSockets.size,\n      },\n    };\n  }\n\n  private setupMiddleware(): void {\n    // Security middleware\n    this.app.use(helmet());\n\n    // CORS middleware\n    if (this.config?.corsEnabled) {\n      const origins = this.config.corsOrigins || ['*'];\n      this.app.use(\n        cors({\n          origin: origins,\n          credentials: true,\n          maxAge: 86400, // 24 hours\n        }),\n      );\n    }\n\n    // Body parsing middleware\n    this.app.use(express.json({ limit: '10mb' }));\n    this.app.use(express.text());\n  }\n\n  private setupRoutes(): void {\n    // Get current file directory for static files\n    const __filename =\n      typeof import.meta?.url !== 'undefined'\n        ? fileURLToPath(import.meta.url)\n        : __filename || __dirname + '/http.ts';\n    const __dirname = dirname(__filename);\n    const consoleDir = join(__dirname, '../../ui/console');\n\n    // Serve static files for the web console\n    this.app.use('/console', express.static(consoleDir));\n\n    // Web console route\n    this.app.get('/', (req, res) => {\n      res.redirect('/console');\n    });\n\n    this.app.get('/console', (req, res) => {\n      res.sendFile(join(consoleDir, 'index.html'));\n    });\n\n    // Health check endpoint\n    this.app.get('/health', (req, res) => {\n      res.json({ status: 'ok', timestamp: new Date().toISOString() });\n    });\n\n    // MCP JSON-RPC endpoint\n    this.app.post('/rpc', async (req, res) => {\n      await this.handleJsonRpcRequest(req, res);\n    });\n\n    // Handle preflight requests\n    this.app.options('*', (req, res) => {\n      res.status(204).end();\n    });\n\n    // 404 handler\n    this.app.use((req, res) => {\n      res.status(404).json({ error: 'Not found' });\n    });\n\n    // Error handler\n    this.app.use(\n      (err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n        this.logger.error('Express error', err);\n        res.status(500).json({\n          error: 'Internal server error',\n          message: err.message,\n        });\n      },\n    );\n  }\n\n  private setupWebSocketHandlers(): void {\n    if (!this.wss) return;\n\n    this.wss.on('connection', (ws: WebSocket, req) => {\n      this.activeWebSockets.add(ws);\n      this.logger.info('WebSocket client connected', {\n        totalClients: this.activeWebSockets.size,\n      });\n\n      ws.on('close', () => {\n        this.activeWebSockets.delete(ws);\n        this.logger.info('WebSocket client disconnected', {\n          totalClients: this.activeWebSockets.size,\n        });\n      });\n\n      ws.on('error', (error) => {\n        this.logger.error('WebSocket error', error);\n        this.activeWebSockets.delete(ws);\n      });\n\n      ws.on('message', async (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n\n          if (message.id === undefined) {\n            // Notification from client\n            await this.handleNotificationMessage(message as MCPNotification);\n          } else {\n            // Request from client\n            const response = await this.handleRequestMessage(message as MCPRequest);\n            ws.send(JSON.stringify(response));\n          }\n        } catch (error) {\n          this.logger.error('Error processing WebSocket message', error);\n\n          // Send error response if it was a request\n          try {\n            const parsed = JSON.parse(data.toString());\n            if (parsed.id !== undefined) {\n              ws.send(\n                JSON.stringify({\n                  jsonrpc: '2.0',\n                  id: parsed.id,\n                  error: {\n                    code: -32603,\n                    message: 'Internal error',\n                  },\n                }),\n              );\n            }\n          } catch {\n            // Ignore parse errors for error responses\n          }\n        }\n      });\n    });\n  }\n\n  private async handleJsonRpcRequest(req: Request, res: Response): Promise<void> {\n    // Check content type\n    if (!req.is('application/json')) {\n      res.status(400).json({\n        jsonrpc: '2.0',\n        id: null,\n        error: {\n          code: -32600,\n          message: 'Invalid content type - expected application/json',\n        },\n      });\n      return;\n    }\n\n    // Check authorization if authentication is enabled\n    if (this.config?.auth?.enabled) {\n      const authResult = await this.validateAuth(req);\n      if (!authResult.valid) {\n        res.status(401).json({\n          error: authResult.error || 'Unauthorized',\n        });\n        return;\n      }\n    }\n\n    try {\n      const mcpMessage = req.body;\n\n      // Validate JSON-RPC format\n      if (!mcpMessage.jsonrpc || mcpMessage.jsonrpc !== '2.0') {\n        res.status(400).json({\n          jsonrpc: '2.0',\n          id: mcpMessage.id || null,\n          error: {\n            code: -32600,\n            message: 'Invalid request - missing or invalid jsonrpc version',\n          },\n        });\n        return;\n      }\n\n      if (!mcpMessage.method) {\n        res.status(400).json({\n          jsonrpc: '2.0',\n          id: mcpMessage.id || null,\n          error: {\n            code: -32600,\n            message: 'Invalid request - missing method',\n          },\n        });\n        return;\n      }\n\n      this.messageCount++;\n\n      // Check if this is a notification (no id) or request\n      if (mcpMessage.id === undefined) {\n        // Handle notification\n        await this.handleNotificationMessage(mcpMessage as MCPNotification);\n        // Notifications don't get responses\n        res.status(204).end();\n      } else {\n        // Handle request\n        const response = await this.handleRequestMessage(mcpMessage as MCPRequest);\n        res.json(response);\n      }\n    } catch (error) {\n      this.logger.error('Error handling JSON-RPC request', error);\n\n      res.status(500).json({\n        jsonrpc: '2.0',\n        id: null,\n        error: {\n          code: -32603,\n          message: 'Internal error',\n          data: error instanceof Error ? error.message : String(error),\n        },\n      });\n    }\n  }\n\n  private async handleRequestMessage(request: MCPRequest): Promise<MCPResponse> {\n    if (!this.requestHandler) {\n      return {\n        jsonrpc: '2.0',\n        id: request.id,\n        error: {\n          code: -32603,\n          message: 'No request handler registered',\n        },\n      };\n    }\n\n    try {\n      return await this.requestHandler(request);\n    } catch (error) {\n      this.logger.error('Request handler error', { request, error });\n\n      return {\n        jsonrpc: '2.0',\n        id: request.id,\n        error: {\n          code: -32603,\n          message: 'Internal error',\n          data: error instanceof Error ? error.message : String(error),\n        },\n      };\n    }\n  }\n\n  private async handleNotificationMessage(notification: MCPNotification): Promise<void> {\n    if (!this.notificationHandler) {\n      this.logger.warn('Received notification but no handler registered', {\n        method: notification.method,\n      });\n      return;\n    }\n\n    try {\n      await this.notificationHandler(notification);\n    } catch (error) {\n      this.logger.error('Notification handler error', { notification, error });\n      // Notifications don't send error responses\n    }\n  }\n\n  private async validateAuth(req: Request): Promise<{ valid: boolean; error?: string }> {\n    const auth = req.headers.authorization;\n\n    if (!auth) {\n      return { valid: false, error: 'Authorization header required' };\n    }\n\n    // Extract token from Authorization header\n    const tokenMatch = auth.match(/^Bearer\\s+(.+)$/i);\n    if (!tokenMatch) {\n      return { valid: false, error: 'Invalid authorization format - use Bearer token' };\n    }\n\n    const token = tokenMatch[1];\n\n    // Validate against configured tokens\n    if (this.config?.auth?.tokens && this.config.auth.tokens.length > 0) {\n      const isValid = this.config.auth.tokens.includes(token);\n      if (!isValid) {\n        return { valid: false, error: 'Invalid token' };\n      }\n    }\n\n    return { valid: true };\n  }\n\n  async connect(): Promise<void> {\n    // For HTTP transport, connect is handled by start()\n    if (!this.running) {\n      await this.start();\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // For HTTP transport, disconnect is handled by stop()\n    await this.stop();\n  }\n\n  async sendRequest(request: MCPRequest): Promise<MCPResponse> {\n    // HTTP transport is server-side, it doesn't send requests\n    throw new Error('HTTP transport does not support sending requests');\n  }\n\n  async sendNotification(notification: MCPNotification): Promise<void> {\n    // Broadcast notification to all connected WebSocket clients\n    const message = JSON.stringify(notification);\n\n    for (const ws of this.activeWebSockets) {\n      try {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(message);\n        }\n      } catch (error) {\n        this.logger.error('Failed to send notification to WebSocket', error);\n      }\n    }\n\n    this.notificationCount++;\n  }\n}\n"],"names":["express","createServer","WebSocketServer","WebSocket","cors","helmet","join","dirname","fileURLToPath","MCPTransportError","HttpTransport","requestHandler","notificationHandler","app","server","wss","messageCount","notificationCount","running","connections","Set","activeWebSockets","host","port","tlsEnabled","logger","config","setupMiddleware","setupRoutes","start","info","tls","path","setupWebSocketHandlers","Promise","resolve","reject","listen","on","error","stop","ws","close","clear","undefined","onRequest","handler","onNotification","getHealthStatus","healthy","metrics","messagesReceived","notificationsSent","activeConnections","size","use","corsEnabled","origins","corsOrigins","origin","credentials","maxAge","json","limit","text","__filename","url","__dirname","consoleDir","static","get","req","res","redirect","sendFile","status","timestamp","Date","toISOString","post","handleJsonRpcRequest","options","end","err","next","message","add","totalClients","delete","data","JSON","parse","toString","id","handleNotificationMessage","response","handleRequestMessage","send","stringify","parsed","jsonrpc","code","is","auth","enabled","authResult","validateAuth","valid","mcpMessage","body","method","Error","String","request","notification","warn","headers","authorization","tokenMatch","match","token","tokens","length","isValid","includes","connect","disconnect","sendRequest","sendNotification","readyState","OPEN"],"mappings":"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"}