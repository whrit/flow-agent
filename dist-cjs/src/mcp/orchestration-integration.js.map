{"version":3,"sources":["../../../src/mcp/orchestration-integration.ts"],"sourcesContent":["/**\n * MCP Integration with Claude-Flow Orchestration System\n * Provides seamless integration between MCP servers and the broader orchestration components\n */\n\nimport { EventEmitter } from 'node:events';\nimport type { ILogger } from '../core/logger.js';\nimport { MCPConfig, MCPSession, MCPTool, SystemEvents } from '../utils/types.js';\nimport { MCPError } from '../utils/errors.js';\nimport { MCPServer, IMCPServer } from './server.js';\nimport { MCPLifecycleManager, LifecycleState } from './lifecycle-manager.js';\nimport { MCPPerformanceMonitor } from './performance-monitor.js';\nimport { MCPProtocolManager } from './protocol-manager.js';\n\nexport interface OrchestrationComponents {\n  orchestrator?: any;\n  swarmCoordinator?: any;\n  agentManager?: any;\n  resourceManager?: any;\n  memoryManager?: any;\n  messageBus?: any;\n  monitor?: any;\n  eventBus?: any;\n  terminalManager?: any;\n}\n\nexport interface MCPOrchestrationConfig {\n  enabledIntegrations: {\n    orchestrator: boolean;\n    swarm: boolean;\n    agents: boolean;\n    resources: boolean;\n    memory: boolean;\n    monitoring: boolean;\n    terminals: boolean;\n  };\n  autoStart: boolean;\n  healthCheckInterval: number;\n  reconnectAttempts: number;\n  reconnectDelay: number;\n  enableMetrics: boolean;\n  enableAlerts: boolean;\n}\n\nexport interface IntegrationStatus {\n  component: string;\n  enabled: boolean;\n  connected: boolean;\n  healthy: boolean;\n  lastCheck: Date;\n  error?: string;\n  metrics?: Record<string, number>;\n}\n\n/**\n * MCP Orchestration Integration Manager\n * Manages the integration between MCP servers and orchestration components\n */\nexport class MCPOrchestrationIntegration extends EventEmitter {\n  private server?: IMCPServer;\n  private lifecycleManager?: MCPLifecycleManager;\n  private performanceMonitor?: MCPPerformanceMonitor;\n  private protocolManager?: MCPProtocolManager;\n\n  private integrationStatus = new Map<string, IntegrationStatus>();\n  private healthCheckTimer?: NodeJS.Timeout;\n  private reconnectTimers = new Map<string, NodeJS.Timeout>();\n\n  private readonly defaultConfig: MCPOrchestrationConfig = {\n    enabledIntegrations: {\n      orchestrator: true,\n      swarm: true,\n      agents: true,\n      resources: true,\n      memory: true,\n      monitoring: true,\n      terminals: true,\n    },\n    autoStart: true,\n    healthCheckInterval: 30000, // 30 seconds\n    reconnectAttempts: 3,\n    reconnectDelay: 5000, // 5 seconds\n    enableMetrics: true,\n    enableAlerts: true,\n  };\n\n  constructor(\n    private mcpConfig: MCPConfig,\n    private orchestrationConfig: MCPOrchestrationConfig,\n    private components: OrchestrationComponents,\n    private logger: ILogger,\n  ) {\n    super();\n\n    this.orchestrationConfig = { ...this.defaultConfig, ...orchestrationConfig };\n    this.initializeIntegration();\n  }\n\n  /**\n   * Start the MCP orchestration integration\n   */\n  async start(): Promise<void> {\n    this.logger.info('Starting MCP orchestration integration');\n\n    try {\n      // Initialize protocol manager\n      this.protocolManager = new MCPProtocolManager(this.logger);\n\n      // Initialize performance monitor\n      if (this.orchestrationConfig.enableMetrics) {\n        this.performanceMonitor = new MCPPerformanceMonitor(this.logger);\n        this.setupPerformanceMonitoring();\n      }\n\n      // Create MCP server\n      this.server = new MCPServer(\n        this.mcpConfig,\n        this.components.eventBus || new EventEmitter(),\n        this.logger,\n        this.components.orchestrator,\n        this.components.swarmCoordinator,\n        this.components.agentManager,\n        this.components.resourceManager,\n        this.components.messageBus,\n        this.components.monitor,\n      );\n\n      // Initialize lifecycle manager\n      this.lifecycleManager = new MCPLifecycleManager(\n        this.mcpConfig,\n        this.logger,\n        () => this.server!,\n      );\n\n      // Setup lifecycle event handlers\n      this.setupLifecycleHandlers();\n\n      // Register orchestration tools\n      this.registerOrchestrationTools();\n\n      // Start the server\n      if (this.orchestrationConfig.autoStart) {\n        await this.lifecycleManager.start();\n      }\n\n      // Start health monitoring\n      this.startHealthMonitoring();\n\n      // Setup component integrations\n      await this.setupComponentIntegrations();\n\n      this.logger.info('MCP orchestration integration started successfully');\n      this.emit('integrationStarted');\n    } catch (error) {\n      this.logger.error('Failed to start MCP orchestration integration', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the MCP orchestration integration\n   */\n  async stop(): Promise<void> {\n    this.logger.info('Stopping MCP orchestration integration');\n\n    try {\n      // Stop health monitoring\n      this.stopHealthMonitoring();\n\n      // Stop lifecycle manager\n      if (this.lifecycleManager) {\n        await this.lifecycleManager.stop();\n      }\n\n      // Stop performance monitor\n      if (this.performanceMonitor) {\n        this.performanceMonitor.stop();\n      }\n\n      // Clear reconnect timers\n      for (const timer of this.reconnectTimers.values()) {\n        clearTimeout(timer);\n      }\n      this.reconnectTimers.clear();\n\n      this.logger.info('MCP orchestration integration stopped');\n      this.emit('integrationStopped');\n    } catch (error) {\n      this.logger.error('Error stopping MCP orchestration integration', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get integration status for all components\n   */\n  getIntegrationStatus(): IntegrationStatus[] {\n    return Array.from(this.integrationStatus.values());\n  }\n\n  /**\n   * Get status for a specific component\n   */\n  getComponentStatus(component: string): IntegrationStatus | undefined {\n    return this.integrationStatus.get(component);\n  }\n\n  /**\n   * Get MCP server instance\n   */\n  getServer(): IMCPServer | undefined {\n    return this.server;\n  }\n\n  /**\n   * Get lifecycle manager\n   */\n  getLifecycleManager(): MCPLifecycleManager | undefined {\n    return this.lifecycleManager;\n  }\n\n  /**\n   * Get performance monitor\n   */\n  getPerformanceMonitor(): MCPPerformanceMonitor | undefined {\n    return this.performanceMonitor;\n  }\n\n  /**\n   * Get protocol manager\n   */\n  getProtocolManager(): MCPProtocolManager | undefined {\n    return this.protocolManager;\n  }\n\n  /**\n   * Force reconnection to a component\n   */\n  async reconnectComponent(component: string): Promise<void> {\n    const status = this.integrationStatus.get(component);\n    if (!status || !status.enabled) {\n      throw new MCPError(`Component ${component} is not enabled`);\n    }\n\n    this.logger.info('Reconnecting to component', { component });\n\n    try {\n      await this.connectComponent(component);\n      this.logger.info('Successfully reconnected to component', { component });\n    } catch (error) {\n      this.logger.error('Failed to reconnect to component', { component, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Enable/disable component integration\n   */\n  async setComponentEnabled(component: string, enabled: boolean): Promise<void> {\n    const status = this.integrationStatus.get(component);\n    if (!status) {\n      throw new MCPError(`Unknown component: ${component}`);\n    }\n\n    status.enabled = enabled;\n\n    if (enabled) {\n      await this.connectComponent(component);\n    } else {\n      await this.disconnectComponent(component);\n    }\n\n    this.logger.info('Component integration updated', { component, enabled });\n    this.emit('componentToggled', { component, enabled });\n  }\n\n  private initializeIntegration(): void {\n    const components = [\n      'orchestrator',\n      'swarm',\n      'agents',\n      'resources',\n      'memory',\n      'monitoring',\n      'terminals',\n    ];\n\n    for (const component of components) {\n      this.integrationStatus.set(component, {\n        component,\n        enabled:\n          this.orchestrationConfig.enabledIntegrations[\n            component as keyof typeof this.orchestrationConfig.enabledIntegrations\n          ],\n        connected: false,\n        healthy: false,\n        lastCheck: new Date(),\n      });\n    }\n  }\n\n  private setupLifecycleHandlers(): void {\n    if (!this.lifecycleManager) return;\n\n    this.lifecycleManager.on('stateChange', (event) => {\n      this.logger.info('MCP server state changed', {\n        from: event.previousState,\n        to: event.state,\n        error: event.error?.message,\n      });\n\n      // Emit to orchestration event bus\n      if (this.components.eventBus) {\n        this.components.eventBus.emit(SystemEvents.SYSTEM_HEALTHCHECK, {\n          status: event.state === LifecycleState.RUNNING ? 'healthy' : 'unhealthy',\n          component: 'mcp-server',\n          timestamp: event.timestamp,\n        });\n      }\n\n      this.emit('lifecycleStateChanged', event);\n    });\n  }\n\n  private setupPerformanceMonitoring(): void {\n    if (!this.performanceMonitor) return;\n\n    this.performanceMonitor.on('metricsCollected', (metrics) => {\n      // Forward metrics to orchestration monitor\n      if (this.components.monitor && typeof this.components.monitor.recordMetrics === 'function') {\n        this.components.monitor.recordMetrics('mcp', metrics);\n      }\n\n      this.emit('metricsCollected', metrics);\n    });\n\n    this.performanceMonitor.on('alertTriggered', (alert) => {\n      this.logger.warn('MCP performance alert triggered', {\n        alertId: alert.id,\n        ruleName: alert.ruleName,\n        severity: alert.severity,\n        message: alert.message,\n      });\n\n      // Forward to orchestration alert system\n      if (this.orchestrationConfig.enableAlerts && this.components.monitor) {\n        if (typeof this.components.monitor.sendAlert === 'function') {\n          this.components.monitor.sendAlert({\n            source: 'mcp',\n            severity: alert.severity,\n            message: alert.message,\n            metadata: alert,\n          });\n        }\n      }\n\n      this.emit('performanceAlert', alert);\n    });\n\n    this.performanceMonitor.on('optimizationSuggestion', (suggestion) => {\n      this.logger.info('MCP optimization suggestion', {\n        type: suggestion.type,\n        priority: suggestion.priority,\n        title: suggestion.title,\n      });\n\n      this.emit('optimizationSuggestion', suggestion);\n    });\n  }\n\n  private registerOrchestrationTools(): void {\n    if (!this.server) return;\n\n    // Register orchestrator tools\n    if (this.orchestrationConfig.enabledIntegrations.orchestrator && this.components.orchestrator) {\n      this.registerOrchestratorTools();\n    }\n\n    // Register swarm tools\n    if (this.orchestrationConfig.enabledIntegrations.swarm && this.components.swarmCoordinator) {\n      this.registerSwarmTools();\n    }\n\n    // Register agent tools\n    if (this.orchestrationConfig.enabledIntegrations.agents && this.components.agentManager) {\n      this.registerAgentTools();\n    }\n\n    // Register resource tools\n    if (this.orchestrationConfig.enabledIntegrations.resources && this.components.resourceManager) {\n      this.registerResourceTools();\n    }\n\n    // Register memory tools\n    if (this.orchestrationConfig.enabledIntegrations.memory && this.components.memoryManager) {\n      this.registerMemoryTools();\n    }\n\n    // Register monitoring tools\n    if (this.orchestrationConfig.enabledIntegrations.monitoring && this.components.monitor) {\n      this.registerMonitoringTools();\n    }\n\n    // Register terminal tools\n    if (this.orchestrationConfig.enabledIntegrations.terminals && this.components.terminalManager) {\n      this.registerTerminalTools();\n    }\n  }\n\n  private registerOrchestratorTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'orchestrator/status',\n        description: 'Get orchestrator status and metrics',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.orchestrator?.getStatus === 'function') {\n            return await this.components.orchestrator.getStatus();\n          }\n          throw new MCPError('Orchestrator status not available');\n        },\n      },\n      {\n        name: 'orchestrator/tasks',\n        description: 'List all tasks in the orchestrator',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            status: { type: 'string', enum: ['pending', 'running', 'completed', 'failed'] },\n            limit: { type: 'number', minimum: 1, maximum: 100 },\n          },\n        },\n        handler: async (input: any) => {\n          if (typeof this.components.orchestrator?.listTasks === 'function') {\n            return await this.components.orchestrator.listTasks(input);\n          }\n          throw new MCPError('Orchestrator task listing not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerSwarmTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'swarm/status',\n        description: 'Get swarm coordinator status',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.swarmCoordinator?.getStatus === 'function') {\n            return await this.components.swarmCoordinator.getStatus();\n          }\n          throw new MCPError('Swarm coordinator status not available');\n        },\n      },\n      {\n        name: 'swarm/agents',\n        description: 'List active swarm agents',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.swarmCoordinator?.listAgents === 'function') {\n            return await this.components.swarmCoordinator.listAgents();\n          }\n          throw new MCPError('Swarm agent listing not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerAgentTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'agents/list',\n        description: 'List all managed agents',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.agentManager?.listAgents === 'function') {\n            return await this.components.agentManager.listAgents();\n          }\n          throw new MCPError('Agent listing not available');\n        },\n      },\n      {\n        name: 'agents/spawn',\n        description: 'Spawn a new agent',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            profile: { type: 'object' },\n            config: { type: 'object' },\n          },\n          required: ['profile'],\n        },\n        handler: async (input: any) => {\n          if (typeof this.components.agentManager?.spawnAgent === 'function') {\n            return await this.components.agentManager.spawnAgent(input.profile, input.config);\n          }\n          throw new MCPError('Agent spawning not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerResourceTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'resources/list',\n        description: 'List available resources',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.resourceManager?.listResources === 'function') {\n            return await this.components.resourceManager.listResources();\n          }\n          throw new MCPError('Resource listing not available');\n        },\n      },\n      {\n        name: 'resources/status',\n        description: 'Get resource manager status',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.resourceManager?.getStatus === 'function') {\n            return await this.components.resourceManager.getStatus();\n          }\n          throw new MCPError('Resource manager status not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerMemoryTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'memory/query',\n        description: 'Query memory bank',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            query: { type: 'string' },\n            namespace: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['query'],\n        },\n        handler: async (input: any) => {\n          if (typeof this.components.memoryManager?.query === 'function') {\n            return await this.components.memoryManager.query(input);\n          }\n          throw new MCPError('Memory query not available');\n        },\n      },\n      {\n        name: 'memory/store',\n        description: 'Store data in memory bank',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            data: { type: 'object' },\n            namespace: { type: 'string' },\n            tags: { type: 'array', items: { type: 'string' } },\n          },\n          required: ['data'],\n        },\n        handler: async (input: any) => {\n          if (typeof this.components.memoryManager?.store === 'function') {\n            return await this.components.memoryManager.store(input);\n          }\n          throw new MCPError('Memory storage not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerMonitoringTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'monitoring/metrics',\n        description: 'Get system monitoring metrics',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.monitor?.getMetrics === 'function') {\n            return await this.components.monitor.getMetrics();\n          }\n          throw new MCPError('Monitoring metrics not available');\n        },\n      },\n      {\n        name: 'monitoring/alerts',\n        description: 'List active alerts',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.monitor?.getAlerts === 'function') {\n            return await this.components.monitor.getAlerts();\n          }\n          throw new MCPError('Alert listing not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private registerTerminalTools(): void {\n    const tools: MCPTool[] = [\n      {\n        name: 'terminals/list',\n        description: 'List active terminal sessions',\n        inputSchema: { type: 'object', properties: {} },\n        handler: async () => {\n          if (typeof this.components.terminalManager?.listSessions === 'function') {\n            return await this.components.terminalManager.listSessions();\n          }\n          throw new MCPError('Terminal session listing not available');\n        },\n      },\n      {\n        name: 'terminals/execute',\n        description: 'Execute command in terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            command: { type: 'string' },\n            sessionId: { type: 'string' },\n          },\n          required: ['command'],\n        },\n        handler: async (input: any) => {\n          if (typeof this.components.terminalManager?.execute === 'function') {\n            return await this.components.terminalManager.execute(input.command, input.sessionId);\n          }\n          throw new MCPError('Terminal execution not available');\n        },\n      },\n    ];\n\n    for (const tool of tools) {\n      this.server!.registerTool(tool);\n    }\n  }\n\n  private async setupComponentIntegrations(): Promise<void> {\n    const promises = [];\n\n    for (const [component, status] of this.integrationStatus.entries()) {\n      if (status.enabled) {\n        promises.push(this.connectComponent(component));\n      }\n    }\n\n    await Promise.allSettled(promises);\n  }\n\n  private async connectComponent(component: string): Promise<void> {\n    const status = this.integrationStatus.get(component);\n    if (!status) return;\n\n    try {\n      // Component-specific connection logic\n      switch (component) {\n        case 'orchestrator':\n          await this.connectOrchestrator();\n          break;\n        case 'swarm':\n          await this.connectSwarmCoordinator();\n          break;\n        case 'agents':\n          await this.connectAgentManager();\n          break;\n        case 'resources':\n          await this.connectResourceManager();\n          break;\n        case 'memory':\n          await this.connectMemoryManager();\n          break;\n        case 'monitoring':\n          await this.connectMonitor();\n          break;\n        case 'terminals':\n          await this.connectTerminalManager();\n          break;\n      }\n\n      status.connected = true;\n      status.healthy = true;\n      status.lastCheck = new Date();\n      status.error = undefined;\n\n      this.logger.info('Component connected', { component });\n      this.emit('componentConnected', { component });\n    } catch (error) {\n      status.connected = false;\n      status.healthy = false;\n      status.error = error instanceof Error ? error.message : 'Unknown error';\n\n      this.logger.error('Failed to connect component', { component, error });\n      this.scheduleReconnect(component);\n    }\n  }\n\n  private async disconnectComponent(component: string): Promise<void> {\n    const status = this.integrationStatus.get(component);\n    if (!status) return;\n\n    status.connected = false;\n    status.healthy = false;\n    status.lastCheck = new Date();\n\n    // Clear any reconnect timers\n    const timer = this.reconnectTimers.get(component);\n    if (timer) {\n      clearTimeout(timer);\n      this.reconnectTimers.delete(component);\n    }\n\n    this.logger.info('Component disconnected', { component });\n    this.emit('componentDisconnected', { component });\n  }\n\n  private scheduleReconnect(component: string): void {\n    const timer = this.reconnectTimers.get(component);\n    if (timer) return; // Already scheduled\n\n    const reconnectTimer = setTimeout(async () => {\n      this.reconnectTimers.delete(component);\n      try {\n        await this.connectComponent(component);\n      } catch (error) {\n        // Will be handled by connectComponent\n      }\n    }, this.orchestrationConfig.reconnectDelay);\n\n    this.reconnectTimers.set(component, reconnectTimer);\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckTimer = setInterval(async () => {\n      await this.performHealthChecks();\n    }, this.orchestrationConfig.healthCheckInterval);\n  }\n\n  private stopHealthMonitoring(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n    }\n  }\n\n  private async performHealthChecks(): Promise<void> {\n    for (const [component, status] of this.integrationStatus.entries()) {\n      if (!status.enabled || !status.connected) continue;\n\n      try {\n        const healthy = await this.checkComponentHealth(component);\n        status.healthy = healthy;\n        status.lastCheck = new Date();\n        status.error = undefined;\n      } catch (error) {\n        status.healthy = false;\n        status.error =\n          error instanceof Error\n            ? error instanceof Error\n              ? error.message\n              : String(error)\n            : 'Health check failed';\n        this.logger.warn('Component health check failed', { component, error });\n      }\n    }\n  }\n\n  private async checkComponentHealth(component: string): Promise<boolean> {\n    const componentInstance = this.getComponentInstance(component);\n    if (!componentInstance) return false;\n\n    // Check if component has health check method\n    if (typeof componentInstance.healthCheck === 'function') {\n      const result = await componentInstance.healthCheck();\n      return result === true || (typeof result === 'object' && result.healthy === true);\n    }\n\n    // Basic check - component exists and is not null\n    return true;\n  }\n\n  private getComponentInstance(component: string): any {\n    switch (component) {\n      case 'orchestrator':\n        return this.components.orchestrator;\n      case 'swarm':\n        return this.components.swarmCoordinator;\n      case 'agents':\n        return this.components.agentManager;\n      case 'resources':\n        return this.components.resourceManager;\n      case 'memory':\n        return this.components.memoryManager;\n      case 'monitoring':\n        return this.components.monitor;\n      case 'terminals':\n        return this.components.terminalManager;\n      default:\n        return null;\n    }\n  }\n\n  // Component-specific connection methods\n  private async connectOrchestrator(): Promise<void> {\n    if (!this.components.orchestrator) {\n      throw new MCPError('Orchestrator component not available');\n    }\n    // Add orchestrator-specific connection logic here\n  }\n\n  private async connectSwarmCoordinator(): Promise<void> {\n    if (!this.components.swarmCoordinator) {\n      throw new MCPError('Swarm coordinator component not available');\n    }\n    // Add swarm coordinator-specific connection logic here\n  }\n\n  private async connectAgentManager(): Promise<void> {\n    if (!this.components.agentManager) {\n      throw new MCPError('Agent manager component not available');\n    }\n    // Add agent manager-specific connection logic here\n  }\n\n  private async connectResourceManager(): Promise<void> {\n    if (!this.components.resourceManager) {\n      throw new MCPError('Resource manager component not available');\n    }\n    // Add resource manager-specific connection logic here\n  }\n\n  private async connectMemoryManager(): Promise<void> {\n    if (!this.components.memoryManager) {\n      throw new MCPError('Memory manager component not available');\n    }\n    // Add memory manager-specific connection logic here\n  }\n\n  private async connectMonitor(): Promise<void> {\n    if (!this.components.monitor) {\n      throw new MCPError('Monitor component not available');\n    }\n    // Add monitor-specific connection logic here\n  }\n\n  private async connectTerminalManager(): Promise<void> {\n    if (!this.components.terminalManager) {\n      throw new MCPError('Terminal manager component not available');\n    }\n    // Add terminal manager-specific connection logic here\n  }\n}\n"],"names":["EventEmitter","SystemEvents","MCPError","MCPServer","MCPLifecycleManager","LifecycleState","MCPPerformanceMonitor","MCPProtocolManager","MCPOrchestrationIntegration","server","lifecycleManager","performanceMonitor","protocolManager","integrationStatus","Map","healthCheckTimer","reconnectTimers","defaultConfig","enabledIntegrations","orchestrator","swarm","agents","resources","memory","monitoring","terminals","autoStart","healthCheckInterval","reconnectAttempts","reconnectDelay","enableMetrics","enableAlerts","mcpConfig","orchestrationConfig","components","logger","initializeIntegration","start","info","setupPerformanceMonitoring","eventBus","swarmCoordinator","agentManager","resourceManager","messageBus","monitor","setupLifecycleHandlers","registerOrchestrationTools","startHealthMonitoring","setupComponentIntegrations","emit","error","stop","stopHealthMonitoring","timer","values","clearTimeout","clear","getIntegrationStatus","Array","from","getComponentStatus","component","get","getServer","getLifecycleManager","getPerformanceMonitor","getProtocolManager","reconnectComponent","status","enabled","connectComponent","setComponentEnabled","disconnectComponent","set","connected","healthy","lastCheck","Date","on","event","previousState","to","state","message","SYSTEM_HEALTHCHECK","RUNNING","timestamp","metrics","recordMetrics","alert","warn","alertId","id","ruleName","severity","sendAlert","source","metadata","suggestion","type","priority","title","registerOrchestratorTools","registerSwarmTools","registerAgentTools","registerResourceTools","memoryManager","registerMemoryTools","registerMonitoringTools","terminalManager","registerTerminalTools","tools","name","description","inputSchema","properties","handler","getStatus","enum","limit","minimum","maximum","input","listTasks","tool","registerTool","listAgents","profile","config","required","spawnAgent","listResources","query","namespace","data","tags","items","store","getMetrics","getAlerts","listSessions","command","sessionId","execute","promises","entries","push","Promise","allSettled","connectOrchestrator","connectSwarmCoordinator","connectAgentManager","connectResourceManager","connectMemoryManager","connectMonitor","connectTerminalManager","undefined","Error","scheduleReconnect","delete","reconnectTimer","setTimeout","setInterval","performHealthChecks","clearInterval","checkComponentHealth","String","componentInstance","getComponentInstance","healthCheck","result"],"mappings":"AAKA,SAASA,YAAY,QAAQ,cAAc;AAE3C,SAAyCC,YAAY,QAAQ,oBAAoB;AACjF,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,SAAS,QAAoB,cAAc;AACpD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,yBAAyB;AAC7E,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,kBAAkB,QAAQ,wBAAwB;AA8C3D,OAAO,MAAMC,oCAAoCR;;;;;IACvCS,OAAoB;IACpBC,iBAAuC;IACvCC,mBAA2C;IAC3CC,gBAAqC;IAErCC,oBAAoB,IAAIC,MAAiC;IACzDC,iBAAkC;IAClCC,kBAAkB,IAAIF,MAA8B;IAE3CG,gBAAwC;QACvDC,qBAAqB;YACnBC,cAAc;YACdC,OAAO;YACPC,QAAQ;YACRC,WAAW;YACXC,QAAQ;YACRC,YAAY;YACZC,WAAW;QACb;QACAC,WAAW;QACXC,qBAAqB;QACrBC,mBAAmB;QACnBC,gBAAgB;QAChBC,eAAe;QACfC,cAAc;IAChB,EAAE;IAEF,YACE,AAAQC,SAAoB,EAC5B,AAAQC,mBAA2C,EACnD,AAAQC,UAAmC,EAC3C,AAAQC,MAAe,CACvB;QACA,KAAK,SALGH,YAAAA,gBACAC,sBAAAA,0BACAC,aAAAA,iBACAC,SAAAA;QAIR,IAAI,CAACF,mBAAmB,GAAG;YAAE,GAAG,IAAI,CAAChB,aAAa;YAAE,GAAGgB,mBAAmB;QAAC;QAC3E,IAAI,CAACG,qBAAqB;IAC5B;IAKA,MAAMC,QAAuB;QAC3B,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC;QAEjB,IAAI;YAEF,IAAI,CAAC1B,eAAe,GAAG,IAAIL,mBAAmB,IAAI,CAAC4B,MAAM;YAGzD,IAAI,IAAI,CAACF,mBAAmB,CAACH,aAAa,EAAE;gBAC1C,IAAI,CAACnB,kBAAkB,GAAG,IAAIL,sBAAsB,IAAI,CAAC6B,MAAM;gBAC/D,IAAI,CAACI,0BAA0B;YACjC;YAGA,IAAI,CAAC9B,MAAM,GAAG,IAAIN,UAChB,IAAI,CAAC6B,SAAS,EACd,IAAI,CAACE,UAAU,CAACM,QAAQ,IAAI,IAAIxC,gBAChC,IAAI,CAACmC,MAAM,EACX,IAAI,CAACD,UAAU,CAACf,YAAY,EAC5B,IAAI,CAACe,UAAU,CAACO,gBAAgB,EAChC,IAAI,CAACP,UAAU,CAACQ,YAAY,EAC5B,IAAI,CAACR,UAAU,CAACS,eAAe,EAC/B,IAAI,CAACT,UAAU,CAACU,UAAU,EAC1B,IAAI,CAACV,UAAU,CAACW,OAAO;YAIzB,IAAI,CAACnC,gBAAgB,GAAG,IAAIN,oBAC1B,IAAI,CAAC4B,SAAS,EACd,IAAI,CAACG,MAAM,EACX,IAAM,IAAI,CAAC1B,MAAM;YAInB,IAAI,CAACqC,sBAAsB;YAG3B,IAAI,CAACC,0BAA0B;YAG/B,IAAI,IAAI,CAACd,mBAAmB,CAACP,SAAS,EAAE;gBACtC,MAAM,IAAI,CAAChB,gBAAgB,CAAC2B,KAAK;YACnC;YAGA,IAAI,CAACW,qBAAqB;YAG1B,MAAM,IAAI,CAACC,0BAA0B;YAErC,IAAI,CAACd,MAAM,CAACG,IAAI,CAAC;YACjB,IAAI,CAACY,IAAI,CAAC;QACZ,EAAE,OAAOC,OAAO;YACd,IAAI,CAAChB,MAAM,CAACgB,KAAK,CAAC,iDAAiDA;YACnE,MAAMA;QACR;IACF;IAKA,MAAMC,OAAsB;QAC1B,IAAI,CAACjB,MAAM,CAACG,IAAI,CAAC;QAEjB,IAAI;YAEF,IAAI,CAACe,oBAAoB;YAGzB,IAAI,IAAI,CAAC3C,gBAAgB,EAAE;gBACzB,MAAM,IAAI,CAACA,gBAAgB,CAAC0C,IAAI;YAClC;YAGA,IAAI,IAAI,CAACzC,kBAAkB,EAAE;gBAC3B,IAAI,CAACA,kBAAkB,CAACyC,IAAI;YAC9B;YAGA,KAAK,MAAME,SAAS,IAAI,CAACtC,eAAe,CAACuC,MAAM,GAAI;gBACjDC,aAAaF;YACf;YACA,IAAI,CAACtC,eAAe,CAACyC,KAAK;YAE1B,IAAI,CAACtB,MAAM,CAACG,IAAI,CAAC;YACjB,IAAI,CAACY,IAAI,CAAC;QACZ,EAAE,OAAOC,OAAO;YACd,IAAI,CAAChB,MAAM,CAACgB,KAAK,CAAC,gDAAgDA;YAClE,MAAMA;QACR;IACF;IAKAO,uBAA4C;QAC1C,OAAOC,MAAMC,IAAI,CAAC,IAAI,CAAC/C,iBAAiB,CAAC0C,MAAM;IACjD;IAKAM,mBAAmBC,SAAiB,EAAiC;QACnE,OAAO,IAAI,CAACjD,iBAAiB,CAACkD,GAAG,CAACD;IACpC;IAKAE,YAAoC;QAClC,OAAO,IAAI,CAACvD,MAAM;IACpB;IAKAwD,sBAAuD;QACrD,OAAO,IAAI,CAACvD,gBAAgB;IAC9B;IAKAwD,wBAA2D;QACzD,OAAO,IAAI,CAACvD,kBAAkB;IAChC;IAKAwD,qBAAqD;QACnD,OAAO,IAAI,CAACvD,eAAe;IAC7B;IAKA,MAAMwD,mBAAmBN,SAAiB,EAAiB;QACzD,MAAMO,SAAS,IAAI,CAACxD,iBAAiB,CAACkD,GAAG,CAACD;QAC1C,IAAI,CAACO,UAAU,CAACA,OAAOC,OAAO,EAAE;YAC9B,MAAM,IAAIpE,SAAS,CAAC,UAAU,EAAE4D,UAAU,eAAe,CAAC;QAC5D;QAEA,IAAI,CAAC3B,MAAM,CAACG,IAAI,CAAC,6BAA6B;YAAEwB;QAAU;QAE1D,IAAI;YACF,MAAM,IAAI,CAACS,gBAAgB,CAACT;YAC5B,IAAI,CAAC3B,MAAM,CAACG,IAAI,CAAC,yCAAyC;gBAAEwB;YAAU;QACxE,EAAE,OAAOX,OAAO;YACd,IAAI,CAAChB,MAAM,CAACgB,KAAK,CAAC,oCAAoC;gBAAEW;gBAAWX;YAAM;YACzE,MAAMA;QACR;IACF;IAKA,MAAMqB,oBAAoBV,SAAiB,EAAEQ,OAAgB,EAAiB;QAC5E,MAAMD,SAAS,IAAI,CAACxD,iBAAiB,CAACkD,GAAG,CAACD;QAC1C,IAAI,CAACO,QAAQ;YACX,MAAM,IAAInE,SAAS,CAAC,mBAAmB,EAAE4D,WAAW;QACtD;QAEAO,OAAOC,OAAO,GAAGA;QAEjB,IAAIA,SAAS;YACX,MAAM,IAAI,CAACC,gBAAgB,CAACT;QAC9B,OAAO;YACL,MAAM,IAAI,CAACW,mBAAmB,CAACX;QACjC;QAEA,IAAI,CAAC3B,MAAM,CAACG,IAAI,CAAC,iCAAiC;YAAEwB;YAAWQ;QAAQ;QACvE,IAAI,CAACpB,IAAI,CAAC,oBAAoB;YAAEY;YAAWQ;QAAQ;IACrD;IAEQlC,wBAA8B;QACpC,MAAMF,aAAa;YACjB;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,KAAK,MAAM4B,aAAa5B,WAAY;YAClC,IAAI,CAACrB,iBAAiB,CAAC6D,GAAG,CAACZ,WAAW;gBACpCA;gBACAQ,SACE,IAAI,CAACrC,mBAAmB,CAACf,mBAAmB,CAC1C4C,UACD;gBACHa,WAAW;gBACXC,SAAS;gBACTC,WAAW,IAAIC;YACjB;QACF;IACF;IAEQhC,yBAA+B;QACrC,IAAI,CAAC,IAAI,CAACpC,gBAAgB,EAAE;QAE5B,IAAI,CAACA,gBAAgB,CAACqE,EAAE,CAAC,eAAe,CAACC;YACvC,IAAI,CAAC7C,MAAM,CAACG,IAAI,CAAC,4BAA4B;gBAC3CsB,MAAMoB,MAAMC,aAAa;gBACzBC,IAAIF,MAAMG,KAAK;gBACfhC,OAAO6B,MAAM7B,KAAK,EAAEiC;YACtB;YAGA,IAAI,IAAI,CAAClD,UAAU,CAACM,QAAQ,EAAE;gBAC5B,IAAI,CAACN,UAAU,CAACM,QAAQ,CAACU,IAAI,CAACjD,aAAaoF,kBAAkB,EAAE;oBAC7DhB,QAAQW,MAAMG,KAAK,KAAK9E,eAAeiF,OAAO,GAAG,YAAY;oBAC7DxB,WAAW;oBACXyB,WAAWP,MAAMO,SAAS;gBAC5B;YACF;YAEA,IAAI,CAACrC,IAAI,CAAC,yBAAyB8B;QACrC;IACF;IAEQzC,6BAAmC;QACzC,IAAI,CAAC,IAAI,CAAC5B,kBAAkB,EAAE;QAE9B,IAAI,CAACA,kBAAkB,CAACoE,EAAE,CAAC,oBAAoB,CAACS;YAE9C,IAAI,IAAI,CAACtD,UAAU,CAACW,OAAO,IAAI,OAAO,IAAI,CAACX,UAAU,CAACW,OAAO,CAAC4C,aAAa,KAAK,YAAY;gBAC1F,IAAI,CAACvD,UAAU,CAACW,OAAO,CAAC4C,aAAa,CAAC,OAAOD;YAC/C;YAEA,IAAI,CAACtC,IAAI,CAAC,oBAAoBsC;QAChC;QAEA,IAAI,CAAC7E,kBAAkB,CAACoE,EAAE,CAAC,kBAAkB,CAACW;YAC5C,IAAI,CAACvD,MAAM,CAACwD,IAAI,CAAC,mCAAmC;gBAClDC,SAASF,MAAMG,EAAE;gBACjBC,UAAUJ,MAAMI,QAAQ;gBACxBC,UAAUL,MAAMK,QAAQ;gBACxBX,SAASM,MAAMN,OAAO;YACxB;YAGA,IAAI,IAAI,CAACnD,mBAAmB,CAACF,YAAY,IAAI,IAAI,CAACG,UAAU,CAACW,OAAO,EAAE;gBACpE,IAAI,OAAO,IAAI,CAACX,UAAU,CAACW,OAAO,CAACmD,SAAS,KAAK,YAAY;oBAC3D,IAAI,CAAC9D,UAAU,CAACW,OAAO,CAACmD,SAAS,CAAC;wBAChCC,QAAQ;wBACRF,UAAUL,MAAMK,QAAQ;wBACxBX,SAASM,MAAMN,OAAO;wBACtBc,UAAUR;oBACZ;gBACF;YACF;YAEA,IAAI,CAACxC,IAAI,CAAC,oBAAoBwC;QAChC;QAEA,IAAI,CAAC/E,kBAAkB,CAACoE,EAAE,CAAC,0BAA0B,CAACoB;YACpD,IAAI,CAAChE,MAAM,CAACG,IAAI,CAAC,+BAA+B;gBAC9C8D,MAAMD,WAAWC,IAAI;gBACrBC,UAAUF,WAAWE,QAAQ;gBAC7BC,OAAOH,WAAWG,KAAK;YACzB;YAEA,IAAI,CAACpD,IAAI,CAAC,0BAA0BiD;QACtC;IACF;IAEQpD,6BAAmC;QACzC,IAAI,CAAC,IAAI,CAACtC,MAAM,EAAE;QAGlB,IAAI,IAAI,CAACwB,mBAAmB,CAACf,mBAAmB,CAACC,YAAY,IAAI,IAAI,CAACe,UAAU,CAACf,YAAY,EAAE;YAC7F,IAAI,CAACoF,yBAAyB;QAChC;QAGA,IAAI,IAAI,CAACtE,mBAAmB,CAACf,mBAAmB,CAACE,KAAK,IAAI,IAAI,CAACc,UAAU,CAACO,gBAAgB,EAAE;YAC1F,IAAI,CAAC+D,kBAAkB;QACzB;QAGA,IAAI,IAAI,CAACvE,mBAAmB,CAACf,mBAAmB,CAACG,MAAM,IAAI,IAAI,CAACa,UAAU,CAACQ,YAAY,EAAE;YACvF,IAAI,CAAC+D,kBAAkB;QACzB;QAGA,IAAI,IAAI,CAACxE,mBAAmB,CAACf,mBAAmB,CAACI,SAAS,IAAI,IAAI,CAACY,UAAU,CAACS,eAAe,EAAE;YAC7F,IAAI,CAAC+D,qBAAqB;QAC5B;QAGA,IAAI,IAAI,CAACzE,mBAAmB,CAACf,mBAAmB,CAACK,MAAM,IAAI,IAAI,CAACW,UAAU,CAACyE,aAAa,EAAE;YACxF,IAAI,CAACC,mBAAmB;QAC1B;QAGA,IAAI,IAAI,CAAC3E,mBAAmB,CAACf,mBAAmB,CAACM,UAAU,IAAI,IAAI,CAACU,UAAU,CAACW,OAAO,EAAE;YACtF,IAAI,CAACgE,uBAAuB;QAC9B;QAGA,IAAI,IAAI,CAAC5E,mBAAmB,CAACf,mBAAmB,CAACO,SAAS,IAAI,IAAI,CAACS,UAAU,CAAC4E,eAAe,EAAE;YAC7F,IAAI,CAACC,qBAAqB;QAC5B;IACF;IAEQR,4BAAkC;QACxC,MAAMS,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACf,YAAY,EAAEmG,cAAc,YAAY;wBACjE,OAAO,MAAM,IAAI,CAACpF,UAAU,CAACf,YAAY,CAACmG,SAAS;oBACrD;oBACA,MAAM,IAAIpH,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBACXf,MAAM;oBACNgB,YAAY;wBACV/C,QAAQ;4BAAE+B,MAAM;4BAAUmB,MAAM;gCAAC;gCAAW;gCAAW;gCAAa;6BAAS;wBAAC;wBAC9EC,OAAO;4BAAEpB,MAAM;4BAAUqB,SAAS;4BAAGC,SAAS;wBAAI;oBACpD;gBACF;gBACAL,SAAS,OAAOM;oBACd,IAAI,OAAO,IAAI,CAACzF,UAAU,CAACf,YAAY,EAAEyG,cAAc,YAAY;wBACjE,OAAO,MAAM,IAAI,CAAC1F,UAAU,CAACf,YAAY,CAACyG,SAAS,CAACD;oBACtD;oBACA,MAAM,IAAIzH,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQrB,qBAA2B;QACjC,MAAMQ,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACO,gBAAgB,EAAE6E,cAAc,YAAY;wBACrE,OAAO,MAAM,IAAI,CAACpF,UAAU,CAACO,gBAAgB,CAAC6E,SAAS;oBACzD;oBACA,MAAM,IAAIpH,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACO,gBAAgB,EAAEsF,eAAe,YAAY;wBACtE,OAAO,MAAM,IAAI,CAAC7F,UAAU,CAACO,gBAAgB,CAACsF,UAAU;oBAC1D;oBACA,MAAM,IAAI7H,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQpB,qBAA2B;QACjC,MAAMO,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACQ,YAAY,EAAEqF,eAAe,YAAY;wBAClE,OAAO,MAAM,IAAI,CAAC7F,UAAU,CAACQ,YAAY,CAACqF,UAAU;oBACtD;oBACA,MAAM,IAAI7H,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBACXf,MAAM;oBACNgB,YAAY;wBACVY,SAAS;4BAAE5B,MAAM;wBAAS;wBAC1B6B,QAAQ;4BAAE7B,MAAM;wBAAS;oBAC3B;oBACA8B,UAAU;wBAAC;qBAAU;gBACvB;gBACAb,SAAS,OAAOM;oBACd,IAAI,OAAO,IAAI,CAACzF,UAAU,CAACQ,YAAY,EAAEyF,eAAe,YAAY;wBAClE,OAAO,MAAM,IAAI,CAACjG,UAAU,CAACQ,YAAY,CAACyF,UAAU,CAACR,MAAMK,OAAO,EAAEL,MAAMM,MAAM;oBAClF;oBACA,MAAM,IAAI/H,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQnB,wBAA8B;QACpC,MAAMM,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACS,eAAe,EAAEyF,kBAAkB,YAAY;wBACxE,OAAO,MAAM,IAAI,CAAClG,UAAU,CAACS,eAAe,CAACyF,aAAa;oBAC5D;oBACA,MAAM,IAAIlI,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACS,eAAe,EAAE2E,cAAc,YAAY;wBACpE,OAAO,MAAM,IAAI,CAACpF,UAAU,CAACS,eAAe,CAAC2E,SAAS;oBACxD;oBACA,MAAM,IAAIpH,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQjB,sBAA4B;QAClC,MAAMI,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBACXf,MAAM;oBACNgB,YAAY;wBACViB,OAAO;4BAAEjC,MAAM;wBAAS;wBACxBkC,WAAW;4BAAElC,MAAM;wBAAS;wBAC5BoB,OAAO;4BAAEpB,MAAM;wBAAS;oBAC1B;oBACA8B,UAAU;wBAAC;qBAAQ;gBACrB;gBACAb,SAAS,OAAOM;oBACd,IAAI,OAAO,IAAI,CAACzF,UAAU,CAACyE,aAAa,EAAE0B,UAAU,YAAY;wBAC9D,OAAO,MAAM,IAAI,CAACnG,UAAU,CAACyE,aAAa,CAAC0B,KAAK,CAACV;oBACnD;oBACA,MAAM,IAAIzH,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBACXf,MAAM;oBACNgB,YAAY;wBACVmB,MAAM;4BAAEnC,MAAM;wBAAS;wBACvBkC,WAAW;4BAAElC,MAAM;wBAAS;wBAC5BoC,MAAM;4BAAEpC,MAAM;4BAASqC,OAAO;gCAAErC,MAAM;4BAAS;wBAAE;oBACnD;oBACA8B,UAAU;wBAAC;qBAAO;gBACpB;gBACAb,SAAS,OAAOM;oBACd,IAAI,OAAO,IAAI,CAACzF,UAAU,CAACyE,aAAa,EAAE+B,UAAU,YAAY;wBAC9D,OAAO,MAAM,IAAI,CAACxG,UAAU,CAACyE,aAAa,CAAC+B,KAAK,CAACf;oBACnD;oBACA,MAAM,IAAIzH,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQhB,0BAAgC;QACtC,MAAMG,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACW,OAAO,EAAE8F,eAAe,YAAY;wBAC7D,OAAO,MAAM,IAAI,CAACzG,UAAU,CAACW,OAAO,CAAC8F,UAAU;oBACjD;oBACA,MAAM,IAAIzI,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAACW,OAAO,EAAE+F,cAAc,YAAY;wBAC5D,OAAO,MAAM,IAAI,CAAC1G,UAAU,CAACW,OAAO,CAAC+F,SAAS;oBAChD;oBACA,MAAM,IAAI1I,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEQd,wBAA8B;QACpC,MAAMC,QAAmB;YACvB;gBACEC,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBAAEf,MAAM;oBAAUgB,YAAY,CAAC;gBAAE;gBAC9CC,SAAS;oBACP,IAAI,OAAO,IAAI,CAACnF,UAAU,CAAC4E,eAAe,EAAE+B,iBAAiB,YAAY;wBACvE,OAAO,MAAM,IAAI,CAAC3G,UAAU,CAAC4E,eAAe,CAAC+B,YAAY;oBAC3D;oBACA,MAAM,IAAI3I,SAAS;gBACrB;YACF;YACA;gBACE+G,MAAM;gBACNC,aAAa;gBACbC,aAAa;oBACXf,MAAM;oBACNgB,YAAY;wBACV0B,SAAS;4BAAE1C,MAAM;wBAAS;wBAC1B2C,WAAW;4BAAE3C,MAAM;wBAAS;oBAC9B;oBACA8B,UAAU;wBAAC;qBAAU;gBACvB;gBACAb,SAAS,OAAOM;oBACd,IAAI,OAAO,IAAI,CAACzF,UAAU,CAAC4E,eAAe,EAAEkC,YAAY,YAAY;wBAClE,OAAO,MAAM,IAAI,CAAC9G,UAAU,CAAC4E,eAAe,CAACkC,OAAO,CAACrB,MAAMmB,OAAO,EAAEnB,MAAMoB,SAAS;oBACrF;oBACA,MAAM,IAAI7I,SAAS;gBACrB;YACF;SACD;QAED,KAAK,MAAM2H,QAAQb,MAAO;YACxB,IAAI,CAACvG,MAAM,CAAEqH,YAAY,CAACD;QAC5B;IACF;IAEA,MAAc5E,6BAA4C;QACxD,MAAMgG,WAAW,EAAE;QAEnB,KAAK,MAAM,CAACnF,WAAWO,OAAO,IAAI,IAAI,CAACxD,iBAAiB,CAACqI,OAAO,GAAI;YAClE,IAAI7E,OAAOC,OAAO,EAAE;gBAClB2E,SAASE,IAAI,CAAC,IAAI,CAAC5E,gBAAgB,CAACT;YACtC;QACF;QAEA,MAAMsF,QAAQC,UAAU,CAACJ;IAC3B;IAEA,MAAc1E,iBAAiBT,SAAiB,EAAiB;QAC/D,MAAMO,SAAS,IAAI,CAACxD,iBAAiB,CAACkD,GAAG,CAACD;QAC1C,IAAI,CAACO,QAAQ;QAEb,IAAI;YAEF,OAAQP;gBACN,KAAK;oBACH,MAAM,IAAI,CAACwF,mBAAmB;oBAC9B;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,uBAAuB;oBAClC;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,mBAAmB;oBAC9B;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,sBAAsB;oBACjC;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,oBAAoB;oBAC/B;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,cAAc;oBACzB;gBACF,KAAK;oBACH,MAAM,IAAI,CAACC,sBAAsB;oBACjC;YACJ;YAEAvF,OAAOM,SAAS,GAAG;YACnBN,OAAOO,OAAO,GAAG;YACjBP,OAAOQ,SAAS,GAAG,IAAIC;YACvBT,OAAOlB,KAAK,GAAG0G;YAEf,IAAI,CAAC1H,MAAM,CAACG,IAAI,CAAC,uBAAuB;gBAAEwB;YAAU;YACpD,IAAI,CAACZ,IAAI,CAAC,sBAAsB;gBAAEY;YAAU;QAC9C,EAAE,OAAOX,OAAO;YACdkB,OAAOM,SAAS,GAAG;YACnBN,OAAOO,OAAO,GAAG;YACjBP,OAAOlB,KAAK,GAAGA,iBAAiB2G,QAAQ3G,MAAMiC,OAAO,GAAG;YAExD,IAAI,CAACjD,MAAM,CAACgB,KAAK,CAAC,+BAA+B;gBAAEW;gBAAWX;YAAM;YACpE,IAAI,CAAC4G,iBAAiB,CAACjG;QACzB;IACF;IAEA,MAAcW,oBAAoBX,SAAiB,EAAiB;QAClE,MAAMO,SAAS,IAAI,CAACxD,iBAAiB,CAACkD,GAAG,CAACD;QAC1C,IAAI,CAACO,QAAQ;QAEbA,OAAOM,SAAS,GAAG;QACnBN,OAAOO,OAAO,GAAG;QACjBP,OAAOQ,SAAS,GAAG,IAAIC;QAGvB,MAAMxB,QAAQ,IAAI,CAACtC,eAAe,CAAC+C,GAAG,CAACD;QACvC,IAAIR,OAAO;YACTE,aAAaF;YACb,IAAI,CAACtC,eAAe,CAACgJ,MAAM,CAAClG;QAC9B;QAEA,IAAI,CAAC3B,MAAM,CAACG,IAAI,CAAC,0BAA0B;YAAEwB;QAAU;QACvD,IAAI,CAACZ,IAAI,CAAC,yBAAyB;YAAEY;QAAU;IACjD;IAEQiG,kBAAkBjG,SAAiB,EAAQ;QACjD,MAAMR,QAAQ,IAAI,CAACtC,eAAe,CAAC+C,GAAG,CAACD;QACvC,IAAIR,OAAO;QAEX,MAAM2G,iBAAiBC,WAAW;YAChC,IAAI,CAAClJ,eAAe,CAACgJ,MAAM,CAAClG;YAC5B,IAAI;gBACF,MAAM,IAAI,CAACS,gBAAgB,CAACT;YAC9B,EAAE,OAAOX,OAAO,CAEhB;QACF,GAAG,IAAI,CAAClB,mBAAmB,CAACJ,cAAc;QAE1C,IAAI,CAACb,eAAe,CAAC0D,GAAG,CAACZ,WAAWmG;IACtC;IAEQjH,wBAA8B;QACpC,IAAI,CAACjC,gBAAgB,GAAGoJ,YAAY;YAClC,MAAM,IAAI,CAACC,mBAAmB;QAChC,GAAG,IAAI,CAACnI,mBAAmB,CAACN,mBAAmB;IACjD;IAEQ0B,uBAA6B;QACnC,IAAI,IAAI,CAACtC,gBAAgB,EAAE;YACzBsJ,cAAc,IAAI,CAACtJ,gBAAgB;YACnC,IAAI,CAACA,gBAAgB,GAAG8I;QAC1B;IACF;IAEA,MAAcO,sBAAqC;QACjD,KAAK,MAAM,CAACtG,WAAWO,OAAO,IAAI,IAAI,CAACxD,iBAAiB,CAACqI,OAAO,GAAI;YAClE,IAAI,CAAC7E,OAAOC,OAAO,IAAI,CAACD,OAAOM,SAAS,EAAE;YAE1C,IAAI;gBACF,MAAMC,UAAU,MAAM,IAAI,CAAC0F,oBAAoB,CAACxG;gBAChDO,OAAOO,OAAO,GAAGA;gBACjBP,OAAOQ,SAAS,GAAG,IAAIC;gBACvBT,OAAOlB,KAAK,GAAG0G;YACjB,EAAE,OAAO1G,OAAO;gBACdkB,OAAOO,OAAO,GAAG;gBACjBP,OAAOlB,KAAK,GACVA,iBAAiB2G,QACb3G,iBAAiB2G,QACf3G,MAAMiC,OAAO,GACbmF,OAAOpH,SACT;gBACN,IAAI,CAAChB,MAAM,CAACwD,IAAI,CAAC,iCAAiC;oBAAE7B;oBAAWX;gBAAM;YACvE;QACF;IACF;IAEA,MAAcmH,qBAAqBxG,SAAiB,EAAoB;QACtE,MAAM0G,oBAAoB,IAAI,CAACC,oBAAoB,CAAC3G;QACpD,IAAI,CAAC0G,mBAAmB,OAAO;QAG/B,IAAI,OAAOA,kBAAkBE,WAAW,KAAK,YAAY;YACvD,MAAMC,SAAS,MAAMH,kBAAkBE,WAAW;YAClD,OAAOC,WAAW,QAAS,OAAOA,WAAW,YAAYA,OAAO/F,OAAO,KAAK;QAC9E;QAGA,OAAO;IACT;IAEQ6F,qBAAqB3G,SAAiB,EAAO;QACnD,OAAQA;YACN,KAAK;gBACH,OAAO,IAAI,CAAC5B,UAAU,CAACf,YAAY;YACrC,KAAK;gBACH,OAAO,IAAI,CAACe,UAAU,CAACO,gBAAgB;YACzC,KAAK;gBACH,OAAO,IAAI,CAACP,UAAU,CAACQ,YAAY;YACrC,KAAK;gBACH,OAAO,IAAI,CAACR,UAAU,CAACS,eAAe;YACxC,KAAK;gBACH,OAAO,IAAI,CAACT,UAAU,CAACyE,aAAa;YACtC,KAAK;gBACH,OAAO,IAAI,CAACzE,UAAU,CAACW,OAAO;YAChC,KAAK;gBACH,OAAO,IAAI,CAACX,UAAU,CAAC4E,eAAe;YACxC;gBACE,OAAO;QACX;IACF;IAGA,MAAcwC,sBAAqC;QACjD,IAAI,CAAC,IAAI,CAACpH,UAAU,CAACf,YAAY,EAAE;YACjC,MAAM,IAAIjB,SAAS;QACrB;IAEF;IAEA,MAAcqJ,0BAAyC;QACrD,IAAI,CAAC,IAAI,CAACrH,UAAU,CAACO,gBAAgB,EAAE;YACrC,MAAM,IAAIvC,SAAS;QACrB;IAEF;IAEA,MAAcsJ,sBAAqC;QACjD,IAAI,CAAC,IAAI,CAACtH,UAAU,CAACQ,YAAY,EAAE;YACjC,MAAM,IAAIxC,SAAS;QACrB;IAEF;IAEA,MAAcuJ,yBAAwC;QACpD,IAAI,CAAC,IAAI,CAACvH,UAAU,CAACS,eAAe,EAAE;YACpC,MAAM,IAAIzC,SAAS;QACrB;IAEF;IAEA,MAAcwJ,uBAAsC;QAClD,IAAI,CAAC,IAAI,CAACxH,UAAU,CAACyE,aAAa,EAAE;YAClC,MAAM,IAAIzG,SAAS;QACrB;IAEF;IAEA,MAAcyJ,iBAAgC;QAC5C,IAAI,CAAC,IAAI,CAACzH,UAAU,CAACW,OAAO,EAAE;YAC5B,MAAM,IAAI3C,SAAS;QACrB;IAEF;IAEA,MAAc0J,yBAAwC;QACpD,IAAI,CAAC,IAAI,CAAC1H,UAAU,CAAC4E,eAAe,EAAE;YACpC,MAAM,IAAI5G,SAAS;QACrB;IAEF;AACF"}