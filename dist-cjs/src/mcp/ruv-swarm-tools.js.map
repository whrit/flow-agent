{"version":3,"sources":["../../../src/mcp/ruv-swarm-tools.ts"],"sourcesContent":["/**\n * ruv-swarm MCP tools wrapper for Claude Code integration\n *\n * This module provides MCP tools that integrate with the external ruv-swarm\n * package to enable advanced swarm coordination and neural capabilities.\n */\n\nimport type { MCPTool, MCPContext } from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\nimport { execAsync } from '../utils/helpers.js';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\n\n// Import error fixes for agent_metrics, swarm_monitor, neural_train\nlet errorFixes: any;\ntry {\n  errorFixes = require('./fixes/mcp-error-fixes.js');\n} catch (e) {\n  // Fallback if module not found\n  errorFixes = {\n    fixAgentMetrics: (d: any) => d,\n    fixSwarmMonitor: (d: any) => d,\n    fixNeuralTrain: (d: any) => d,\n    wrapRuvSwarmResponse: (n: string, d: any) => d,\n  };\n}\n\nexport interface RuvSwarmToolContext extends MCPContext {\n  workingDirectory?: string;\n  swarmId?: string;\n  sessionId?: string;\n}\n\n/**\n * Interface for ruv-swarm command responses\n */\ninterface RuvSwarmResponse {\n  success: boolean;\n  data?: any;\n  error?: string;\n  metadata?: {\n    timestamp: number;\n    swarmId?: string;\n    sessionId?: string;\n    performance?: any;\n  };\n}\n\n/**\n * Execute ruv-swarm command with proper error handling\n */\nasync function executeRuvSwarmCommand(\n  command: string,\n  args: string[] = [],\n  context?: RuvSwarmToolContext,\n  logger?: ILogger,\n): Promise<RuvSwarmResponse> {\n  try {\n    const workDir = context?.workingDirectory || process.cwd();\n    const fullCommand = `npx ruv-swarm ${command} ${args.join(' ')}`;\n\n    logger?.debug('Executing ruv-swarm command', { command: fullCommand, workDir });\n\n    const result = await execAsync(fullCommand, { cwd: workDir });\n\n    // Parse JSON response if possible\n    let data;\n    try {\n      data = JSON.parse(result.stdout);\n    } catch {\n      data = { output: result.stdout, stderr: result.stderr };\n    }\n\n    logger?.debug('ruv-swarm command completed', { command, success: true });\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        timestamp: Date.now(),\n        swarmId: context?.swarmId,\n        sessionId: context?.sessionId,\n      },\n    };\n  } catch (error) {\n    logger?.error('ruv-swarm command failed', {\n      command,\n      error: error instanceof Error ? error.message : String(error),\n    });\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error),\n      metadata: {\n        timestamp: Date.now(),\n        swarmId: context?.swarmId,\n        sessionId: context?.sessionId,\n      },\n    };\n  }\n}\n\n/**\n * Create ruv-swarm MCP tools for Claude Code integration\n *\n * These tools provide access to the full ruv-swarm functionality including:\n * - Swarm initialization and management\n * - Neural agent coordination\n * - Memory and persistence\n * - Performance monitoring\n * - Task orchestration\n */\nexport function createRuvSwarmTools(logger: ILogger): MCPTool[] {\n  return [\n    // === SWARM LIFECYCLE TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__swarm_init',\n      description: 'Initialize a new ruv-swarm with specified topology and configuration',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          topology: {\n            type: 'string',\n            enum: ['mesh', 'hierarchical', 'ring', 'star'],\n            description: 'Swarm topology type',\n          },\n          maxAgents: {\n            type: 'number',\n            minimum: 1,\n            maximum: 100,\n            default: 5,\n            description: 'Maximum number of agents',\n          },\n          strategy: {\n            type: 'string',\n            enum: ['balanced', 'specialized', 'adaptive'],\n            default: 'balanced',\n            description: 'Distribution strategy',\n          },\n        },\n        required: ['topology'],\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [\n          '--topology',\n          input.topology,\n          '--max-agents',\n          String(input.maxAgents || 5),\n          '--strategy',\n          input.strategy || 'balanced',\n        ];\n\n        return await executeRuvSwarmCommand('swarm init', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__swarm_status',\n      description: 'Get current swarm status and agent information',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          verbose: {\n            type: 'boolean',\n            default: false,\n            description: 'Include detailed agent information',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = input.verbose ? ['--verbose'] : [];\n        return await executeRuvSwarmCommand('swarm status', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__swarm_monitor',\n      description: 'Monitor swarm activity in real-time',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          duration: {\n            type: 'number',\n            default: 10,\n            description: 'Monitoring duration in seconds',\n          },\n          interval: {\n            type: 'number',\n            default: 1,\n            description: 'Update interval in seconds',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [\n          '--duration',\n          String(input.duration || 10),\n          '--interval',\n          String(input.interval || 1),\n        ];\n\n        const result = await executeRuvSwarmCommand('swarm monitor', args, context, logger);\n        // Apply fix to ensure recentEvents is an array\n        return errorFixes.fixSwarmMonitor(result);\n      },\n    },\n\n    // === AGENT MANAGEMENT TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__agent_spawn',\n      description: 'Spawn a new agent in the swarm',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: [\n              'coordinator',\n              'researcher',\n              'coder',\n              'analyst',\n              'architect',\n              'tester',\n              'reviewer',\n              'optimizer',\n              'documenter',\n              'monitor',\n              'specialist',\n            ],\n            description: 'Agent type',\n          },\n          name: {\n            type: 'string',\n            description: 'Custom agent name',\n          },\n          capabilities: {\n            type: 'array',\n            items: { type: 'string' },\n            description: 'Agent capabilities',\n          },\n        },\n        required: ['type'],\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--type', input.type];\n\n        if (input.name) {\n          args.push('--name', input.name);\n        }\n\n        if (input.capabilities && input.capabilities.length > 0) {\n          args.push('--capabilities', input.capabilities.join(','));\n        }\n\n        return await executeRuvSwarmCommand('agent spawn', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__agent_list',\n      description: 'List all active agents in the swarm',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          filter: {\n            type: 'string',\n            enum: ['all', 'active', 'idle', 'busy'],\n            default: 'all',\n            description: 'Filter agents by status',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--filter', input.filter || 'all'];\n        return await executeRuvSwarmCommand('agent list', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__agent_metrics',\n      description: 'Get performance metrics for agents',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          agentId: {\n            type: 'string',\n            description: 'Specific agent ID (optional)',\n          },\n          metric: {\n            type: 'string',\n            enum: ['all', 'cpu', 'memory', 'tasks', 'performance'],\n            default: 'all',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--metric', input.metric || 'all'];\n\n        if (input.agentId) {\n          args.push('--agent-id', input.agentId);\n        }\n\n        const result = await executeRuvSwarmCommand('agent metrics', args, context, logger);\n        // Apply fix to ensure neuralNetworks is an array\n        return errorFixes.fixAgentMetrics(result);\n      },\n    },\n\n    // === TASK ORCHESTRATION TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__task_orchestrate',\n      description: 'Orchestrate a task across the swarm',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          task: {\n            type: 'string',\n            description: 'Task description or instructions',\n          },\n          strategy: {\n            type: 'string',\n            enum: ['parallel', 'sequential', 'adaptive'],\n            default: 'adaptive',\n            description: 'Execution strategy',\n          },\n          priority: {\n            type: 'string',\n            enum: ['low', 'medium', 'high', 'critical'],\n            default: 'medium',\n            description: 'Task priority',\n          },\n          maxAgents: {\n            type: 'number',\n            minimum: 1,\n            maximum: 10,\n            description: 'Maximum agents to use',\n          },\n        },\n        required: ['task'],\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [\n          '--task',\n          JSON.stringify(input.task),\n          '--strategy',\n          input.strategy || 'adaptive',\n          '--priority',\n          input.priority || 'medium',\n        ];\n\n        if (input.maxAgents) {\n          args.push('--max-agents', String(input.maxAgents));\n        }\n\n        return await executeRuvSwarmCommand('task orchestrate', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__task_status',\n      description: 'Check progress of running tasks',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          taskId: {\n            type: 'string',\n            description: 'Specific task ID (optional)',\n          },\n          detailed: {\n            type: 'boolean',\n            default: false,\n            description: 'Include detailed progress',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [];\n\n        if (input.taskId) {\n          args.push('--task-id', input.taskId);\n        }\n\n        if (input.detailed) {\n          args.push('--detailed');\n        }\n\n        return await executeRuvSwarmCommand('task status', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__task_results',\n      description: 'Retrieve results from completed tasks',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          taskId: {\n            type: 'string',\n            description: 'Task ID to retrieve results for',\n          },\n          format: {\n            type: 'string',\n            enum: ['summary', 'detailed', 'raw'],\n            default: 'summary',\n            description: 'Result format',\n          },\n        },\n        required: ['taskId'],\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--task-id', input.taskId, '--format', input.format || 'summary'];\n\n        return await executeRuvSwarmCommand('task results', args, context, logger);\n      },\n    },\n\n    // === MEMORY AND PERSISTENCE TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__memory_usage',\n      description: 'Get current memory usage statistics',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          detail: {\n            type: 'string',\n            enum: ['summary', 'detailed', 'by-agent'],\n            default: 'summary',\n            description: 'Detail level',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--detail', input.detail || 'summary'];\n        return await executeRuvSwarmCommand('memory usage', args, context, logger);\n      },\n    },\n\n    // === NEURAL CAPABILITIES TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__neural_status',\n      description: 'Get neural agent status and performance metrics',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          agentId: {\n            type: 'string',\n            description: 'Specific agent ID (optional)',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [];\n\n        if (input.agentId) {\n          args.push('--agent-id', input.agentId);\n        }\n\n        return await executeRuvSwarmCommand('neural status', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__neural_train',\n      description: 'Train neural agents with sample tasks',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          agentId: {\n            type: 'string',\n            description: 'Specific agent ID to train (optional)',\n          },\n          iterations: {\n            type: 'number',\n            minimum: 1,\n            maximum: 100,\n            default: 10,\n            description: 'Number of training iterations',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        // Apply fix to ensure agentId is valid\n        const fixedInput = errorFixes.fixNeuralTrain(input);\n        const args = ['--iterations', String(fixedInput.iterations || 10)];\n\n        if (fixedInput.agentId) {\n          args.push('--agent-id', fixedInput.agentId);\n        }\n\n        return await executeRuvSwarmCommand('neural train', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__neural_patterns',\n      description: 'Get cognitive pattern information',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          pattern: {\n            type: 'string',\n            enum: ['all', 'convergent', 'divergent', 'lateral', 'systems', 'critical', 'abstract'],\n            default: 'all',\n            description: 'Cognitive pattern type',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--pattern', input.pattern || 'all'];\n        return await executeRuvSwarmCommand('neural patterns', args, context, logger);\n      },\n    },\n\n    // === PERFORMANCE AND BENCHMARKING TOOLS ===\n    {\n      name: 'mcp__ruv-swarm__benchmark_run',\n      description: 'Execute performance benchmarks',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: ['all', 'wasm', 'swarm', 'agent', 'task'],\n            default: 'all',\n            description: 'Benchmark type',\n          },\n          iterations: {\n            type: 'number',\n            minimum: 1,\n            maximum: 100,\n            default: 10,\n            description: 'Number of iterations',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = [\n          '--type',\n          input.type || 'all',\n          '--iterations',\n          String(input.iterations || 10),\n        ];\n\n        return await executeRuvSwarmCommand('benchmark run', args, context, logger);\n      },\n    },\n\n    {\n      name: 'mcp__ruv-swarm__features_detect',\n      description: 'Detect runtime features and capabilities',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          category: {\n            type: 'string',\n            enum: ['all', 'wasm', 'simd', 'memory', 'platform'],\n            default: 'all',\n            description: 'Feature category',\n          },\n        },\n      },\n      handler: async (input: any, context?: RuvSwarmToolContext) => {\n        const args = ['--category', input.category || 'all'];\n        return await executeRuvSwarmCommand('features detect', args, context, logger);\n      },\n    },\n  ];\n}\n\n/**\n * Check if ruv-swarm is available in the current environment\n */\nexport async function isRuvSwarmAvailable(logger?: ILogger): Promise<boolean> {\n  try {\n    const result = await executeRuvSwarmCommand('--version', [], undefined, logger);\n    return result.success;\n  } catch (error) {\n    logger?.warn('ruv-swarm not available', {\n      error:\n        error instanceof Error ? (error instanceof Error ? error.message : String(error)) : error,\n    });\n    return false;\n  }\n}\n\n/**\n * Get ruv-swarm configuration and capabilities\n */\nexport async function getRuvSwarmCapabilities(logger?: ILogger): Promise<any> {\n  try {\n    const result = await executeRuvSwarmCommand(\n      'features detect',\n      ['--category', 'all'],\n      undefined,\n      logger,\n    );\n    return result.data;\n  } catch (error) {\n    logger?.error('Failed to get ruv-swarm capabilities', error);\n    return null;\n  }\n}\n\n/**\n * Initialize ruv-swarm with claude-code-flow integration\n */\nexport async function initializeRuvSwarmIntegration(\n  workingDirectory: string,\n  logger?: ILogger,\n): Promise<RuvSwarmResponse> {\n  const context: RuvSwarmToolContext = {\n    workingDirectory,\n    sessionId: `claude-flow-${Date.now()}`,\n  };\n\n  logger?.info('Initializing ruv-swarm integration', { workingDirectory });\n\n  // Check if ruv-swarm is available\n  const available = await isRuvSwarmAvailable(logger);\n  if (!available) {\n    return {\n      success: false,\n      error: 'ruv-swarm is not available. Please install it with: npm install -g ruv-swarm',\n    };\n  }\n\n  // Get capabilities\n  const capabilities = await getRuvSwarmCapabilities(logger);\n\n  logger?.info('ruv-swarm integration initialized', { capabilities });\n\n  return {\n    success: true,\n    data: {\n      available: true,\n      capabilities,\n      integration: 'claude-code-flow',\n      sessionId: context.sessionId,\n    },\n    metadata: {\n      timestamp: Date.now(),\n      sessionId: context.sessionId,\n    },\n  };\n}\n\nexport default {\n  createRuvSwarmTools,\n  isRuvSwarmAvailable,\n  getRuvSwarmCapabilities,\n  initializeRuvSwarmIntegration,\n};\n"],"names":["execAsync","errorFixes","require","e","fixAgentMetrics","d","fixSwarmMonitor","fixNeuralTrain","wrapRuvSwarmResponse","n","executeRuvSwarmCommand","command","args","context","logger","workDir","workingDirectory","process","cwd","fullCommand","join","debug","result","data","JSON","parse","stdout","output","stderr","success","metadata","timestamp","Date","now","swarmId","sessionId","error","Error","message","String","createRuvSwarmTools","name","description","inputSchema","type","properties","topology","enum","maxAgents","minimum","maximum","default","strategy","required","handler","input","verbose","duration","interval","capabilities","items","push","length","filter","agentId","metric","task","priority","stringify","taskId","detailed","format","detail","iterations","fixedInput","pattern","category","isRuvSwarmAvailable","undefined","warn","getRuvSwarmCapabilities","initializeRuvSwarmIntegration","info","available","integration"],"mappings":"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"}