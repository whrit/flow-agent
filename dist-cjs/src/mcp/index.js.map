{"version":3,"sources":["../../../src/mcp/index.ts"],"sourcesContent":["/**\n * MCP (Model Context Protocol) Module\n * Export all MCP components for easy integration\n */\n\n// Phase 6: In-Process MCP Server (10-100x performance improvement)\nexport { InProcessMCPServer, createInProcessServer } from './in-process-server.js';\nexport type { InProcessServerConfig, ToolCallMetrics } from './in-process-server.js';\n\nexport {\n  ClaudeFlowToolRegistry,\n  createToolRegistry,\n  createClaudeFlowSdkServer,\n} from './tool-registry.js';\nexport type { ToolRegistryConfig } from './tool-registry.js';\n\nexport {\n  SDKIntegration,\n  initializeSDKIntegration,\n  getSDKIntegration,\n  createInProcessQuery,\n  getInProcessServerConfig,\n  measurePerformance,\n} from './sdk-integration.js';\nexport type { SDKIntegrationConfig } from './sdk-integration.js';\n\n// Core MCP Server\nexport { MCPServer, type IMCPServer } from './server.js';\n\n// Lifecycle Management\nexport {\n  MCPLifecycleManager,\n  LifecycleState,\n  type LifecycleEvent,\n  type HealthCheckResult,\n  type LifecycleManagerConfig,\n} from './lifecycle-manager.js';\n\n// Tool Registry and Management\nexport {\n  ToolRegistry,\n  type ToolCapability,\n  type ToolMetrics,\n  type ToolDiscoveryQuery,\n} from './tools.js';\n\n// Protocol Management\nexport {\n  MCPProtocolManager,\n  type ProtocolVersionInfo,\n  type CompatibilityResult,\n  type NegotiationResult,\n} from './protocol-manager.js';\n\n// Authentication and Authorization\nexport {\n  AuthManager,\n  type IAuthManager,\n  type AuthContext,\n  type AuthResult,\n  type TokenInfo,\n  type TokenGenerationOptions,\n  type AuthSession,\n  Permissions,\n} from './auth.js';\n\n// Performance Monitoring\nexport {\n  MCPPerformanceMonitor,\n  type PerformanceMetrics,\n  type RequestMetrics,\n  type AlertRule,\n  type Alert,\n  type OptimizationSuggestion,\n} from './performance-monitor.js';\n\n// Orchestration Integration\nexport {\n  MCPOrchestrationIntegration,\n  type OrchestrationComponents,\n  type MCPOrchestrationConfig,\n  type IntegrationStatus,\n} from './orchestration-integration.js';\n\n// Transport Implementations\nexport { type ITransport } from './transports/base.js';\nexport { StdioTransport } from './transports/stdio.js';\nexport { HttpTransport } from './transports/http.js';\n\n// Request Routing\nexport { RequestRouter } from './router.js';\n\n// Session Management\nexport { SessionManager, type ISessionManager } from './session-manager.js';\n\n// Load Balancing\nexport { LoadBalancer, type ILoadBalancer, RequestQueue } from './load-balancer.js';\n\n// Tool Implementations\nexport { createClaudeFlowTools, type ClaudeFlowToolContext } from './claude-flow-tools.js';\nexport { createSwarmTools, type SwarmToolContext } from './swarm-tools.js';\n\n/**\n * MCP Integration Factory\n * Provides a simple way to create a complete MCP integration\n */\nexport class MCPIntegrationFactory {\n  /**\n   * Create a complete MCP integration with all components\n   */\n  static async createIntegration(config: {\n    mcpConfig: import('../utils/types.js').MCPConfig;\n    orchestrationConfig?: Partial<MCPOrchestrationConfig>;\n    components?: Partial<OrchestrationComponents>;\n    logger: import('../core/logger.js').ILogger;\n  }): Promise<MCPOrchestrationIntegration> {\n    const { mcpConfig, orchestrationConfig = {}, components = {}, logger } = config;\n\n    const integration = new MCPOrchestrationIntegration(\n      mcpConfig,\n      {\n        enabledIntegrations: {\n          orchestrator: true,\n          swarm: true,\n          agents: true,\n          resources: true,\n          memory: true,\n          monitoring: true,\n          terminals: true,\n        },\n        autoStart: true,\n        healthCheckInterval: 30000,\n        reconnectAttempts: 3,\n        reconnectDelay: 5000,\n        enableMetrics: true,\n        enableAlerts: true,\n        ...orchestrationConfig,\n      },\n      components,\n      logger,\n    );\n\n    return integration;\n  }\n\n  /**\n   * Create a standalone MCP server (without orchestration integration)\n   */\n  static async createStandaloneServer(config: {\n    mcpConfig: import('../utils/types.js').MCPConfig;\n    logger: import('../core/logger.js').ILogger;\n    enableLifecycleManagement?: boolean;\n    enablePerformanceMonitoring?: boolean;\n  }): Promise<{\n    server: MCPServer;\n    lifecycleManager?: MCPLifecycleManager;\n    performanceMonitor?: MCPPerformanceMonitor;\n  }> {\n    const {\n      mcpConfig,\n      logger,\n      enableLifecycleManagement = true,\n      enablePerformanceMonitoring = true,\n    } = config;\n\n    const eventBus = new (await import('node:events')).EventEmitter();\n    const server = new MCPServer(mcpConfig, eventBus, logger);\n\n    let lifecycleManager: MCPLifecycleManager | undefined;\n    let performanceMonitor: MCPPerformanceMonitor | undefined;\n\n    if (enableLifecycleManagement) {\n      lifecycleManager = new MCPLifecycleManager(mcpConfig, logger, () => server);\n    }\n\n    if (enablePerformanceMonitoring) {\n      performanceMonitor = new MCPPerformanceMonitor(logger);\n    }\n\n    return {\n      server,\n      lifecycleManager,\n      performanceMonitor,\n    };\n  }\n\n  /**\n   * Create a development/testing MCP setup\n   */\n  static async createDevelopmentSetup(logger: import('../core/logger.js').ILogger): Promise<{\n    server: MCPServer;\n    lifecycleManager: MCPLifecycleManager;\n    performanceMonitor: MCPPerformanceMonitor;\n    protocolManager: MCPProtocolManager;\n  }> {\n    const mcpConfig: import('../utils/types.js').MCPConfig = {\n      transport: 'stdio',\n      enableMetrics: true,\n      auth: {\n        enabled: false,\n        method: 'token',\n      },\n    };\n\n    const { server, lifecycleManager, performanceMonitor } = await this.createStandaloneServer({\n      mcpConfig,\n      logger,\n      enableLifecycleManagement: true,\n      enablePerformanceMonitoring: true,\n    });\n\n    const protocolManager = new MCPProtocolManager(logger);\n\n    return {\n      server,\n      lifecycleManager: lifecycleManager!,\n      performanceMonitor: performanceMonitor!,\n      protocolManager,\n    };\n  }\n}\n\n/**\n * Default MCP configuration for common use cases\n */\nexport const DefaultMCPConfigs = {\n  /**\n   * Development configuration with stdio transport\n   */\n  development: {\n    transport: 'stdio' as const,\n    enableMetrics: true,\n    auth: {\n      enabled: false,\n      method: 'token' as const,\n    },\n  },\n\n  /**\n   * Production configuration with HTTP transport and authentication\n   */\n  production: {\n    transport: 'http' as const,\n    host: '0.0.0.0',\n    port: 3000,\n    tlsEnabled: true,\n    enableMetrics: true,\n    auth: {\n      enabled: true,\n      method: 'token' as const,\n    },\n    loadBalancer: {\n      enabled: true,\n      maxRequestsPerSecond: 100,\n      maxConcurrentRequests: 50,\n    },\n    sessionTimeout: 3600000, // 1 hour\n    maxSessions: 1000,\n  },\n\n  /**\n   * Testing configuration with minimal features\n   */\n  testing: {\n    transport: 'stdio' as const,\n    enableMetrics: false,\n    auth: {\n      enabled: false,\n      method: 'token' as const,\n    },\n  },\n} as const;\n\n/**\n * MCP Utility Functions\n */\nexport const MCPUtils = {\n  /**\n   * Validate MCP protocol version\n   */\n  isValidProtocolVersion(version: import('../utils/types.js').MCPProtocolVersion): boolean {\n    return (\n      typeof version.major === 'number' &&\n      typeof version.minor === 'number' &&\n      typeof version.patch === 'number' &&\n      version.major > 0\n    );\n  },\n\n  /**\n   * Compare two protocol versions\n   */\n  compareVersions(\n    a: import('../utils/types.js').MCPProtocolVersion,\n    b: import('../utils/types.js').MCPProtocolVersion,\n  ): number {\n    if (a.major !== b.major) return a.major - b.major;\n    if (a.minor !== b.minor) return a.minor - b.minor;\n    return a.patch - b.patch;\n  },\n\n  /**\n   * Format protocol version as string\n   */\n  formatVersion(version: import('../utils/types.js').MCPProtocolVersion): string {\n    return `${version.major}.${version.minor}.${version.patch}`;\n  },\n\n  /**\n   * Parse protocol version from string\n   */\n  parseVersion(versionString: string): import('../utils/types.js').MCPProtocolVersion {\n    const parts = versionString.split('.').map((p) => parseInt(p, 10));\n    if (parts.length !== 3 || parts.some((p) => isNaN(p))) {\n      throw new Error(`Invalid version string: ${versionString}`);\n    }\n    return {\n      major: parts[0],\n      minor: parts[1],\n      patch: parts[2],\n    };\n  },\n\n  /**\n   * Generate a random session ID\n   */\n  generateSessionId(): string {\n    return `mcp_session_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n  },\n\n  /**\n   * Generate a random request ID\n   */\n  generateRequestId(): string {\n    return `mcp_req_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n  },\n};\n\n/**\n * Phase 6: Initialize MCP with in-process server for maximum performance\n *\n * Provides 10-100x performance improvement by eliminating IPC overhead.\n * All Claude-Flow MCP tools execute in-process with microsecond latency.\n */\nexport async function initializeInProcessMCP(orchestratorContext?: any) {\n  const { initializeSDKIntegration } = await import('./sdk-integration.js');\n\n  return initializeSDKIntegration({\n    enableInProcess: true,\n    enableMetrics: true,\n    enableCaching: true,\n    orchestratorContext,\n    fallbackToStdio: true,\n  });\n}\n\n/**\n * Phase 6: Get in-process server status and performance metrics\n */\nexport async function getInProcessMCPStatus() {\n  const { getSDKIntegration } = await import('./sdk-integration.js');\n  const integration = getSDKIntegration();\n\n  if (!integration) {\n    return {\n      initialized: false,\n      inProcess: false,\n      message: 'In-process MCP not initialized',\n    };\n  }\n\n  return {\n    initialized: true,\n    inProcess: integration.isInProcessAvailable(),\n    metrics: integration.getMetrics(),\n    performanceComparison: integration.getPerformanceComparison(),\n  };\n}\n"],"names":["InProcessMCPServer","createInProcessServer","ClaudeFlowToolRegistry","createToolRegistry","createClaudeFlowSdkServer","SDKIntegration","initializeSDKIntegration","getSDKIntegration","createInProcessQuery","getInProcessServerConfig","measurePerformance","MCPServer","MCPLifecycleManager","LifecycleState","ToolRegistry","MCPProtocolManager","AuthManager","Permissions","MCPPerformanceMonitor","MCPOrchestrationIntegration","StdioTransport","HttpTransport","RequestRouter","SessionManager","LoadBalancer","RequestQueue","createClaudeFlowTools","createSwarmTools","MCPIntegrationFactory","createIntegration","config","mcpConfig","orchestrationConfig","components","logger","integration","enabledIntegrations","orchestrator","swarm","agents","resources","memory","monitoring","terminals","autoStart","healthCheckInterval","reconnectAttempts","reconnectDelay","enableMetrics","enableAlerts","createStandaloneServer","enableLifecycleManagement","enablePerformanceMonitoring","eventBus","EventEmitter","server","lifecycleManager","performanceMonitor","createDevelopmentSetup","transport","auth","enabled","method","protocolManager","DefaultMCPConfigs","development","production","host","port","tlsEnabled","loadBalancer","maxRequestsPerSecond","maxConcurrentRequests","sessionTimeout","maxSessions","testing","MCPUtils","isValidProtocolVersion","version","major","minor","patch","compareVersions","a","b","formatVersion","parseVersion","versionString","parts","split","map","p","parseInt","length","some","isNaN","Error","generateSessionId","Date","now","Math","random","toString","substring","generateRequestId","initializeInProcessMCP","orchestratorContext","enableInProcess","enableCaching","fallbackToStdio","getInProcessMCPStatus","initialized","inProcess","message","isInProcessAvailable","metrics","getMetrics","performanceComparison","getPerformanceComparison"],"mappings":"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"}