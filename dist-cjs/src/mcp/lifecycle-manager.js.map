{"version":3,"sources":["../../../src/mcp/lifecycle-manager.ts"],"sourcesContent":["/**\n * MCP Server Lifecycle Manager\n * Handles server lifecycle operations including start, stop, restart, and health checks\n */\n\nimport { EventEmitter } from 'node:events';\nimport type { ILogger } from '../core/logger.js';\nimport type { MCPConfig, MCPSession, MCPMetrics, HealthStatus } from '../utils/types.js';\nimport { MCPError } from '../utils/errors.js';\nimport type { IMCPServer } from './server.js';\n\nexport enum LifecycleState {\n  STOPPED = 'stopped',\n  STARTING = 'starting',\n  RUNNING = 'running',\n  STOPPING = 'stopping',\n  RESTARTING = 'restarting',\n  ERROR = 'error',\n}\n\nexport interface LifecycleEvent {\n  timestamp: Date;\n  state: LifecycleState;\n  previousState?: LifecycleState;\n  error?: Error;\n  details?: Record<string, unknown>;\n}\n\nexport interface HealthCheckResult {\n  healthy: boolean;\n  state: LifecycleState;\n  uptime: number;\n  lastRestart?: Date;\n  error?: string;\n  metrics?: Record<string, number>;\n  components: {\n    server: boolean;\n    transport: boolean;\n    sessions: boolean;\n    tools: boolean;\n    auth: boolean;\n    loadBalancer: boolean;\n  };\n}\n\nexport interface LifecycleManagerConfig {\n  healthCheckInterval: number;\n  gracefulShutdownTimeout: number;\n  maxRestartAttempts: number;\n  restartDelay: number;\n  enableAutoRestart: boolean;\n  enableHealthChecks: boolean;\n}\n\n/**\n * MCP Server Lifecycle Manager\n * Manages the complete lifecycle of MCP servers with robust error handling\n */\nexport class MCPLifecycleManager extends EventEmitter {\n  private state: LifecycleState = LifecycleState.STOPPED;\n  private server?: IMCPServer;\n  private healthCheckTimer?: NodeJS.Timeout;\n  private startTime?: Date;\n  private lastRestart?: Date;\n  private restartAttempts = 0;\n  private shutdownPromise?: Promise<void>;\n  private history: LifecycleEvent[] = [];\n\n  private readonly config: LifecycleManagerConfig = {\n    healthCheckInterval: 30000, // 30 seconds\n    gracefulShutdownTimeout: 10000, // 10 seconds\n    maxRestartAttempts: 3,\n    restartDelay: 5000, // 5 seconds\n    enableAutoRestart: true,\n    enableHealthChecks: true,\n  };\n\n  constructor(\n    private mcpConfig: MCPConfig,\n    private logger: ILogger,\n    private serverFactory: () => IMCPServer,\n    config?: Partial<LifecycleManagerConfig>,\n  ) {\n    super();\n\n    if (config) {\n      Object.assign(this.config, config);\n    }\n\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Start the MCP server\n   */\n  async start(): Promise<void> {\n    if (this.state !== LifecycleState.STOPPED) {\n      throw new MCPError(`Cannot start server in state: ${this.state}`);\n    }\n\n    this.setState(LifecycleState.STARTING);\n    this.logger.info('Starting MCP server lifecycle manager');\n\n    try {\n      // Create server instance\n      this.server = this.serverFactory();\n\n      // Start the server\n      await this.server.start();\n\n      // Record start time\n      this.startTime = new Date();\n      this.restartAttempts = 0;\n\n      // Start health checks\n      if (this.config.enableHealthChecks) {\n        this.startHealthChecks();\n      }\n\n      this.setState(LifecycleState.RUNNING);\n      this.logger.info('MCP server started successfully');\n    } catch (error) {\n      this.setState(LifecycleState.ERROR, error as Error);\n      this.logger.error('Failed to start MCP server', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the MCP server gracefully\n   */\n  async stop(): Promise<void> {\n    if (this.state === LifecycleState.STOPPED) {\n      return;\n    }\n\n    if (this.shutdownPromise) {\n      return this.shutdownPromise;\n    }\n\n    this.setState(LifecycleState.STOPPING);\n    this.logger.info('Stopping MCP server');\n\n    this.shutdownPromise = this.performShutdown();\n    await this.shutdownPromise;\n    this.shutdownPromise = undefined;\n  }\n\n  /**\n   * Restart the MCP server\n   */\n  async restart(): Promise<void> {\n    if (this.state === LifecycleState.STOPPED) {\n      return this.start();\n    }\n\n    this.setState(LifecycleState.RESTARTING);\n    this.logger.info('Restarting MCP server');\n\n    try {\n      await this.stop();\n\n      // Add restart delay\n      if (this.config.restartDelay > 0) {\n        await new Promise((resolve) => setTimeout(resolve, this.config.restartDelay));\n      }\n\n      await this.start();\n      this.lastRestart = new Date();\n      this.restartAttempts++;\n\n      this.logger.info('MCP server restarted successfully');\n    } catch (error) {\n      this.setState(LifecycleState.ERROR, error as Error);\n      this.logger.error('Failed to restart MCP server', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  async healthCheck(): Promise<HealthCheckResult> {\n    const startTime = Date.now();\n    const result: HealthCheckResult = {\n      healthy: false,\n      state: this.state,\n      uptime: this.getUptime(),\n      lastRestart: this.lastRestart,\n      components: {\n        server: false,\n        transport: false,\n        sessions: false,\n        tools: false,\n        auth: false,\n        loadBalancer: false,\n      },\n    };\n\n    try {\n      if (!this.server || this.state !== LifecycleState.RUNNING) {\n        result.error = 'Server not running';\n        return result;\n      }\n\n      // Check server health\n      const serverHealth = await this.server.getHealthStatus();\n      result.components.server = serverHealth.healthy;\n      result.metrics = serverHealth.metrics;\n\n      if (serverHealth.error) {\n        result.error = serverHealth.error;\n      }\n\n      // Check individual components\n      result.components.transport = serverHealth.metrics?.transportConnections !== undefined;\n      result.components.sessions = serverHealth.metrics?.activeSessions !== undefined;\n      result.components.tools = (serverHealth.metrics?.registeredTools || 0) > 0;\n      result.components.auth = serverHealth.metrics?.authenticatedSessions !== undefined;\n      result.components.loadBalancer = serverHealth.metrics?.rateLimitedRequests !== undefined;\n\n      // Overall health assessment\n      result.healthy =\n        result.components.server &&\n        result.components.transport &&\n        result.components.sessions &&\n        result.components.tools;\n\n      const checkDuration = Date.now() - startTime;\n      if (result.metrics) {\n        result.metrics.healthCheckDuration = checkDuration;\n      }\n\n      this.logger.debug('Health check completed', {\n        healthy: result.healthy,\n        duration: checkDuration,\n        components: result.components,\n      });\n\n      return result;\n    } catch (error) {\n      result.error = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error('Health check failed', error);\n      return result;\n    }\n  }\n\n  /**\n   * Get current server state\n   */\n  getState(): LifecycleState {\n    return this.state;\n  }\n\n  /**\n   * Get server metrics\n   */\n  getMetrics(): MCPMetrics | undefined {\n    return this.server?.getMetrics();\n  }\n\n  /**\n   * Get active sessions\n   */\n  getSessions(): MCPSession[] {\n    return this.server?.getSessions() || [];\n  }\n\n  /**\n   * Get server uptime in milliseconds\n   */\n  getUptime(): number {\n    return this.startTime ? Date.now() - this.startTime.getTime() : 0;\n  }\n\n  /**\n   * Get lifecycle event history\n   */\n  getHistory(): LifecycleEvent[] {\n    return [...this.history];\n  }\n\n  /**\n   * Force terminate server (emergency stop)\n   */\n  async forceStop(): Promise<void> {\n    this.logger.warn('Force stopping MCP server');\n\n    // Stop health checks\n    this.stopHealthChecks();\n\n    // Force close server\n    if (this.server) {\n      try {\n        await this.server.stop();\n      } catch (error) {\n        this.logger.error('Error during force stop', error);\n      }\n      this.server = undefined;\n    }\n\n    this.setState(LifecycleState.STOPPED);\n    this.startTime = undefined;\n  }\n\n  /**\n   * Enable or disable auto-restart\n   */\n  setAutoRestart(enabled: boolean): void {\n    this.config.enableAutoRestart = enabled;\n    this.logger.info('Auto-restart', { enabled });\n  }\n\n  /**\n   * Enable or disable health checks\n   */\n  setHealthChecks(enabled: boolean): void {\n    this.config.enableHealthChecks = enabled;\n\n    if (enabled && this.state === LifecycleState.RUNNING) {\n      this.startHealthChecks();\n    } else {\n      this.stopHealthChecks();\n    }\n\n    this.logger.info('Health checks', { enabled });\n  }\n\n  private setState(newState: LifecycleState, error?: Error): void {\n    const previousState = this.state;\n    this.state = newState;\n\n    const event: LifecycleEvent = {\n      timestamp: new Date(),\n      state: newState,\n      previousState,\n      error,\n    };\n\n    this.history.push(event);\n\n    // Keep only last 100 events\n    if (this.history.length > 100) {\n      this.history.shift();\n    }\n\n    this.emit('stateChange', event);\n    this.logger.info('State change', {\n      from: previousState,\n      to: newState,\n      error: error?.message,\n    });\n  }\n\n  private setupEventHandlers(): void {\n    // Handle uncaught errors\n    process.on('uncaughtException', (error) => {\n      this.logger.error('Uncaught exception', error);\n      this.handleServerError(error);\n    });\n\n    process.on('unhandledRejection', (reason) => {\n      this.logger.error('Unhandled rejection', reason);\n      this.handleServerError(reason instanceof Error ? reason : new Error(String(reason)));\n    });\n\n    // Handle process signals\n    process.on('SIGINT', () => {\n      this.logger.info('Received SIGINT, shutting down gracefully');\n      this.stop().catch((error) => {\n        this.logger.error('Error during graceful shutdown', error);\n        process.exit(1);\n      });\n    });\n\n    process.on('SIGTERM', () => {\n      this.logger.info('Received SIGTERM, shutting down gracefully');\n      this.stop().catch((error) => {\n        this.logger.error('Error during graceful shutdown', error);\n        process.exit(1);\n      });\n    });\n  }\n\n  private async handleServerError(error: Error): Promise<void> {\n    this.logger.error('Server error detected', error);\n    this.setState(LifecycleState.ERROR, error);\n\n    if (this.config.enableAutoRestart && this.restartAttempts < this.config.maxRestartAttempts) {\n      this.logger.info('Attempting auto-restart', {\n        attempt: this.restartAttempts + 1,\n        maxAttempts: this.config.maxRestartAttempts,\n      });\n\n      try {\n        await this.restart();\n      } catch (restartError) {\n        this.logger.error('Auto-restart failed', restartError);\n      }\n    } else {\n      this.logger.error('Max restart attempts reached or auto-restart disabled');\n      await this.forceStop();\n    }\n  }\n\n  private startHealthChecks(): void {\n    if (this.healthCheckTimer) {\n      return;\n    }\n\n    this.healthCheckTimer = setInterval(async () => {\n      try {\n        const health = await this.healthCheck();\n\n        if (!health.healthy && this.state === LifecycleState.RUNNING) {\n          this.logger.warn('Health check failed', health);\n          this.handleServerError(new Error(health.error || 'Health check failed'));\n        }\n      } catch (error) {\n        this.logger.error('Health check error', error);\n      }\n    }, this.config.healthCheckInterval);\n\n    this.logger.debug('Health checks started', { interval: this.config.healthCheckInterval });\n  }\n\n  private stopHealthChecks(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n      this.logger.debug('Health checks stopped');\n    }\n  }\n\n  private async performShutdown(): Promise<void> {\n    try {\n      // Stop health checks\n      this.stopHealthChecks();\n\n      // Graceful shutdown with timeout\n      const shutdownPromise = this.server?.stop() || Promise.resolve();\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(\n          () => reject(new Error('Shutdown timeout')),\n          this.config.gracefulShutdownTimeout,\n        );\n      });\n\n      await Promise.race([shutdownPromise, timeoutPromise]);\n\n      this.server = undefined;\n      this.setState(LifecycleState.STOPPED);\n      this.startTime = undefined;\n\n      this.logger.info('MCP server stopped successfully');\n    } catch (error) {\n      this.logger.error('Error during shutdown', error);\n      await this.forceStop();\n      throw error;\n    }\n  }\n}\n"],"names":["EventEmitter","MCPError","LifecycleState","MCPLifecycleManager","state","server","healthCheckTimer","startTime","lastRestart","restartAttempts","shutdownPromise","history","config","healthCheckInterval","gracefulShutdownTimeout","maxRestartAttempts","restartDelay","enableAutoRestart","enableHealthChecks","mcpConfig","logger","serverFactory","Object","assign","setupEventHandlers","start","setState","info","Date","startHealthChecks","error","stop","performShutdown","undefined","restart","Promise","resolve","setTimeout","healthCheck","now","result","healthy","uptime","getUptime","components","transport","sessions","tools","auth","loadBalancer","serverHealth","getHealthStatus","metrics","transportConnections","activeSessions","registeredTools","authenticatedSessions","rateLimitedRequests","checkDuration","healthCheckDuration","debug","duration","Error","message","getState","getMetrics","getSessions","getTime","getHistory","forceStop","warn","stopHealthChecks","setAutoRestart","enabled","setHealthChecks","newState","previousState","event","timestamp","push","length","shift","emit","from","to","process","on","handleServerError","reason","String","catch","exit","attempt","maxAttempts","restartError","setInterval","health","interval","clearInterval","timeoutPromise","_","reject","race"],"mappings":"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"}