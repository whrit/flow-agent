{"version":3,"sources":["../../../src/monitoring/diagnostics.ts"],"sourcesContent":["/**\n * Diagnostic Tools for Claude Flow v2.0.0\n */\n\nimport { EventBus } from '../core/event-bus.js';\nimport { Logger } from '../core/logger.js';\nimport { SystemIntegration } from '../integration/system-integration.js';\nimport { HealthCheckManager } from './health-check.js';\nimport type { SystemHealth, SystemMetrics, ComponentStatus } from '../integration/types.js';\nimport { getErrorMessage } from '../utils/error-handler.js';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\nexport interface DiagnosticReport {\n  timestamp: number;\n  systemHealth: SystemHealth;\n  metrics: SystemMetrics | null;\n  components: ComponentDiagnostic[];\n  performance: PerformanceDiagnostic;\n  recommendations: string[];\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface ComponentDiagnostic {\n  name: string;\n  status: 'healthy' | 'warning' | 'unhealthy';\n  version?: string;\n  uptime: number;\n  lastError?: string;\n  metrics?: Record<string, any>;\n  issues: DiagnosticIssue[];\n}\n\nexport interface DiagnosticIssue {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  recommendation?: string;\n  data?: any;\n}\n\nexport interface PerformanceDiagnostic {\n  averageResponseTime: number;\n  throughput: number;\n  errorRate: number;\n  memoryLeaks: boolean;\n  bottlenecks: string[];\n  optimization: string[];\n}\n\nexport interface DiagnosticConfig {\n  enableDetailedAnalysis?: boolean;\n  includePerformanceMetrics?: boolean;\n  generateRecommendations?: boolean;\n  exportFormat?: 'json' | 'html' | 'text';\n  outputPath?: string;\n}\n\nexport class DiagnosticManager {\n  private eventBus: EventBus;\n  private logger: Logger;\n  private systemIntegration: SystemIntegration;\n  private healthCheckManager: HealthCheckManager;\n  private performanceHistory: Map<string, number[]> = new Map();\n  private errorHistory: Map<string, any[]> = new Map();\n\n  constructor(eventBus: EventBus, logger: Logger, healthCheckManager?: HealthCheckManager) {\n    this.eventBus = eventBus;\n    this.logger = logger;\n    this.systemIntegration = SystemIntegration.getInstance();\n    this.healthCheckManager = healthCheckManager || new HealthCheckManager(eventBus, logger);\n\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Generate comprehensive diagnostic report\n   */\n  async generateDiagnosticReport(config: DiagnosticConfig = {}): Promise<DiagnosticReport> {\n    this.logger.info('Generating comprehensive diagnostic report');\n\n    const startTime = Date.now();\n\n    try {\n      // Get system health\n      const systemHealth = await this.systemIntegration.getSystemHealth();\n\n      // Get current metrics\n      const metrics = this.healthCheckManager.getCurrentMetrics();\n\n      // Analyze components\n      const components = await this.analyzeComponents(config);\n\n      // Analyze performance\n      const performance = await this.analyzePerformance(config);\n\n      // Generate recommendations\n      const recommendations =\n        config.generateRecommendations !== false\n          ? this.generateRecommendations(systemHealth, performance, components)\n          : [];\n\n      // Determine overall severity\n      const severity = this.calculateSeverity(systemHealth, components);\n\n      const report: DiagnosticReport = {\n        timestamp: Date.now(),\n        systemHealth,\n        metrics,\n        components,\n        performance,\n        recommendations,\n        severity,\n      };\n\n      // Export report if requested\n      if (config.outputPath) {\n        await this.exportReport(report, config);\n      }\n\n      const duration = Date.now() - startTime;\n      this.logger.info(`Diagnostic report generated in ${duration}ms`);\n\n      this.eventBus.emit('diagnostics:report:generated', {\n        report,\n        duration,\n        timestamp: Date.now(),\n      });\n\n      return report;\n    } catch (error) {\n      this.logger.error('Failed to generate diagnostic report:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze individual components\n   */\n  private async analyzeComponents(config: DiagnosticConfig): Promise<ComponentDiagnostic[]> {\n    const componentNames = [\n      'orchestrator',\n      'configManager',\n      'memoryManager',\n      'agentManager',\n      'swarmCoordinator',\n      'taskEngine',\n      'monitor',\n      'mcpServer',\n    ];\n\n    const diagnostics = await Promise.all(\n      componentNames.map((name) => this.analyzeComponent(name, config)),\n    );\n\n    return diagnostics.filter((d) => d !== null) as ComponentDiagnostic[];\n  }\n\n  /**\n   * Analyze individual component\n   */\n  private async analyzeComponent(\n    componentName: string,\n    config: DiagnosticConfig,\n  ): Promise<ComponentDiagnostic | null> {\n    try {\n      const component = this.systemIntegration.getComponent(componentName);\n\n      if (!component) {\n        return {\n          name: componentName,\n          status: 'unhealthy',\n          uptime: 0,\n          issues: [\n            {\n              type: 'missing_component',\n              severity: 'critical',\n              message: 'Component is not available',\n              recommendation: 'Check component initialization',\n            },\n          ],\n        };\n      }\n\n      const issues: DiagnosticIssue[] = [];\n      let status: 'healthy' | 'warning' | 'unhealthy' = 'healthy';\n\n      // Check component health history\n      const healthHistory = this.healthCheckManager.getHealthHistory(componentName);\n      const recentChecks = healthHistory.slice(-10); // Last 10 checks\n      const failureRate =\n        recentChecks.filter((check) => !check.healthy).length / recentChecks.length;\n\n      if (failureRate > 0.5) {\n        status = 'unhealthy';\n        issues.push({\n          type: 'high_failure_rate',\n          severity: 'high',\n          message: `High failure rate: ${(failureRate * 100).toFixed(1)}%`,\n          recommendation: 'Investigate component stability',\n        });\n      } else if (failureRate > 0.2) {\n        status = 'warning';\n        issues.push({\n          type: 'moderate_failure_rate',\n          severity: 'medium',\n          message: `Moderate failure rate: ${(failureRate * 100).toFixed(1)}%`,\n          recommendation: 'Monitor component health',\n        });\n      }\n\n      // Check for performance issues\n      if (config.includePerformanceMetrics !== false) {\n        const performanceIssues = this.analyzeComponentPerformance(componentName);\n        issues.push(...performanceIssues);\n      }\n\n      // Check for memory leaks\n      const memoryIssues = this.checkMemoryLeaks(componentName);\n      issues.push(...memoryIssues);\n\n      // Get component metrics\n      let componentMetrics: Record<string, any> = {};\n      if (typeof component.getMetrics === 'function') {\n        componentMetrics = await component.getMetrics();\n      }\n\n      // Get last error\n      const lastError = this.getLastError(componentName);\n\n      return {\n        name: componentName,\n        status,\n        uptime: this.getComponentUptime(componentName),\n        lastError,\n        metrics: componentMetrics,\n        issues,\n      };\n    } catch (error) {\n      return {\n        name: componentName,\n        status: 'unhealthy',\n        uptime: 0,\n        lastError: getErrorMessage(error),\n        issues: [\n          {\n            type: 'analysis_error',\n            severity: 'medium',\n            message: `Failed to analyze component: ${getErrorMessage(error)}`,\n            recommendation: 'Check component accessibility',\n          },\n        ],\n      };\n    }\n  }\n\n  /**\n   * Analyze system performance\n   */\n  private async analyzePerformance(config: DiagnosticConfig): Promise<PerformanceDiagnostic> {\n    const metrics = this.healthCheckManager.getCurrentMetrics();\n    const bottlenecks: string[] = [];\n    const optimization: string[] = [];\n\n    // Calculate averages from history\n    const responseTimeHistory = this.performanceHistory.get('responseTime') || [];\n    const averageResponseTime =\n      responseTimeHistory.length > 0\n        ? responseTimeHistory.reduce((sum, time) => sum + time, 0) / responseTimeHistory.length\n        : 0;\n\n    // Calculate throughput\n    const throughput = this.calculateThroughput();\n\n    // Calculate error rate\n    const errorRate = this.calculateErrorRate();\n\n    // Check for memory leaks\n    const memoryLeaks = this.detectMemoryLeaks();\n\n    // Identify bottlenecks\n    if (metrics) {\n      if (metrics.cpu > 80) {\n        bottlenecks.push('High CPU usage');\n        optimization.push('Consider distributing load across more workers');\n      }\n\n      if (metrics.memory > 80) {\n        bottlenecks.push('High memory usage');\n        optimization.push('Implement memory optimization strategies');\n      }\n\n      if (metrics.queuedTasks > metrics.activeTasks * 2) {\n        bottlenecks.push('Task queue buildup');\n        optimization.push('Increase task processing capacity');\n      }\n\n      if (errorRate > 0.05) {\n        bottlenecks.push('High error rate');\n        optimization.push('Investigate and fix recurring errors');\n      }\n    }\n\n    if (averageResponseTime > 1000) {\n      bottlenecks.push('Slow response times');\n      optimization.push('Optimize critical path operations');\n    }\n\n    return {\n      averageResponseTime,\n      throughput,\n      errorRate,\n      memoryLeaks,\n      bottlenecks,\n      optimization,\n    };\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  private generateRecommendations(\n    health: SystemHealth,\n    performance: PerformanceDiagnostic,\n    components: ComponentDiagnostic[],\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // System-level recommendations\n    if (health.overall === 'unhealthy') {\n      recommendations.push('System health is compromised - immediate attention required');\n    } else if (health.overall === 'warning') {\n      recommendations.push('System showing warning signs - proactive maintenance recommended');\n    }\n\n    // Performance recommendations\n    if (performance.averageResponseTime > 1000) {\n      recommendations.push('Response times are slow - consider performance optimization');\n    }\n\n    if (performance.errorRate > 0.05) {\n      recommendations.push('Error rate is high - investigate error sources');\n    }\n\n    if (performance.memoryLeaks) {\n      recommendations.push('Memory leaks detected - review memory management');\n    }\n\n    // Component-specific recommendations\n    const unhealthyComponents = components.filter((c) => c.status === 'unhealthy');\n    if (unhealthyComponents.length > 0) {\n      recommendations.push(\n        `${unhealthyComponents.length} component(s) unhealthy - restart or investigate`,\n      );\n    }\n\n    const highFailureComponents = components.filter((c) =>\n      c.issues.some((issue) => issue.type === 'high_failure_rate'),\n    );\n    if (highFailureComponents.length > 0) {\n      recommendations.push('Some components have high failure rates - check logs and dependencies');\n    }\n\n    // Add performance optimizations\n    recommendations.push(...performance.optimization);\n\n    // General recommendations\n    if (recommendations.length === 0) {\n      recommendations.push('System appears healthy - continue regular monitoring');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate overall severity\n   */\n  private calculateSeverity(\n    health: SystemHealth,\n    components: ComponentDiagnostic[],\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    if (health.overall === 'unhealthy') {\n      return 'critical';\n    }\n\n    const criticalIssues = components.reduce(\n      (count, component) =>\n        count + component.issues.filter((issue) => issue.severity === 'critical').length,\n      0,\n    );\n\n    const highIssues = components.reduce(\n      (count, component) =>\n        count + component.issues.filter((issue) => issue.severity === 'high').length,\n      0,\n    );\n\n    if (criticalIssues > 0) {\n      return 'critical';\n    }\n\n    if (highIssues > 2) {\n      return 'high';\n    }\n\n    if (health.overall === 'warning' || highIssues > 0) {\n      return 'medium';\n    }\n\n    return 'low';\n  }\n\n  /**\n   * Export diagnostic report\n   */\n  private async exportReport(report: DiagnosticReport, config: DiagnosticConfig): Promise<void> {\n    const format = config.exportFormat || 'json';\n    const outputPath = config.outputPath!;\n\n    try {\n      let content: string;\n\n      switch (format) {\n        case 'json':\n          content = JSON.stringify(report, null, 2);\n          break;\n        case 'html':\n          content = this.generateHtmlReport(report);\n          break;\n        case 'text':\n          content = this.generateTextReport(report);\n          break;\n        default:\n          throw new Error(`Unsupported export format: ${format}`);\n      }\n\n      await fs.writeFile(outputPath, content, 'utf8');\n      this.logger.info(`Diagnostic report exported to: ${outputPath}`);\n    } catch (error) {\n      this.logger.error('Failed to export report:', getErrorMessage(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Generate HTML report\n   */\n  private generateHtmlReport(report: DiagnosticReport): string {\n    const timestamp = new Date(report.timestamp).toISOString();\n    const severityColor = {\n      low: '#28a745',\n      medium: '#ffc107',\n      high: '#fd7e14',\n      critical: '#dc3545',\n    }[report.severity];\n\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Claude Flow v2.0.0 Diagnostic Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .header { border-bottom: 2px solid #ccc; padding-bottom: 20px; }\n        .severity { color: ${severityColor}; font-weight: bold; }\n        .section { margin: 20px 0; }\n        .component { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }\n        .healthy { border-left: 4px solid #28a745; }\n        .warning { border-left: 4px solid #ffc107; }\n        .unhealthy { border-left: 4px solid #dc3545; }\n        .issue { margin: 5px 0; padding: 5px; background: #f8f9fa; }\n        .critical { background: #f8d7da; }\n        .high { background: #fff3cd; }\n        .medium { background: #cce5ff; }\n        .low { background: #d1ecf1; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Claude Flow v2.0.0 Diagnostic Report</h1>\n        <p><strong>Generated:</strong> ${timestamp}</p>\n        <p><strong>Severity:</strong> <span class=\"severity\">${report.severity.toUpperCase()}</span></p>\n    </div>\n\n    <div class=\"section\">\n        <h2>System Health</h2>\n        <p><strong>Overall Status:</strong> ${report.systemHealth.overall}</p>\n        <p><strong>Total Components:</strong> ${report.systemHealth.metrics.totalComponents}</p>\n        <p><strong>Healthy:</strong> ${report.systemHealth.metrics.healthyComponents}</p>\n        <p><strong>Unhealthy:</strong> ${report.systemHealth.metrics.unhealthyComponents}</p>\n        <p><strong>Uptime:</strong> ${(report.systemHealth.metrics.uptime / 1000 / 60).toFixed(1)} minutes</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>Components</h2>\n        ${report.components\n          .map(\n            (component) => `\n            <div class=\"component ${component.status}\">\n                <h3>${component.name}</h3>\n                <p><strong>Status:</strong> ${component.status}</p>\n                <p><strong>Uptime:</strong> ${(component.uptime / 1000 / 60).toFixed(1)} minutes</p>\n                ${component.lastError ? `<p><strong>Last Error:</strong> ${component.lastError}</p>` : ''}\n                ${\n                  component.issues.length > 0\n                    ? `\n                    <h4>Issues:</h4>\n                    ${component.issues\n                      .map(\n                        (issue) => `\n                        <div class=\"issue ${issue.severity}\">\n                            <strong>${issue.type}:</strong> ${issue.message}\n                            ${issue.recommendation ? `<br><em>Recommendation: ${issue.recommendation}</em>` : ''}\n                        </div>\n                    `,\n                      )\n                      .join('')}\n                `\n                    : '<p>No issues detected</p>'\n                }\n            </div>\n        `,\n          )\n          .join('')}\n    </div>\n\n    <div class=\"section\">\n        <h2>Performance</h2>\n        <p><strong>Average Response Time:</strong> ${report.performance.averageResponseTime.toFixed(2)}ms</p>\n        <p><strong>Throughput:</strong> ${report.performance.throughput.toFixed(2)} ops/sec</p>\n        <p><strong>Error Rate:</strong> ${(report.performance.errorRate * 100).toFixed(2)}%</p>\n        <p><strong>Memory Leaks:</strong> ${report.performance.memoryLeaks ? 'Detected' : 'None detected'}</p>\n        \n        ${\n          report.performance.bottlenecks.length > 0\n            ? `\n            <h3>Bottlenecks:</h3>\n            <ul>${report.performance.bottlenecks.map((b) => `<li>${b}</li>`).join('')}</ul>\n        `\n            : ''\n        }\n    </div>\n\n    <div class=\"section\">\n        <h2>Recommendations</h2>\n        <ol>\n            ${report.recommendations.map((rec) => `<li>${rec}</li>`).join('')}\n        </ol>\n    </div>\n</body>\n</html>`;\n  }\n\n  /**\n   * Generate text report\n   */\n  private generateTextReport(report: DiagnosticReport): string {\n    const timestamp = new Date(report.timestamp).toISOString();\n\n    let text = `\nCLAUDE FLOW v2.0.0 DIAGNOSTIC REPORT\n=====================================\n\nGenerated: ${timestamp}\nSeverity: ${report.severity.toUpperCase()}\n\nSYSTEM HEALTH\n-------------\nOverall Status: ${report.systemHealth.overall}\nTotal Components: ${report.systemHealth.metrics.totalComponents}\nHealthy: ${report.systemHealth.metrics.healthyComponents}\nUnhealthy: ${report.systemHealth.metrics.unhealthyComponents}\nUptime: ${(report.systemHealth.metrics.uptime / 1000 / 60).toFixed(1)} minutes\n\nCOMPONENTS\n----------\n`;\n\n    report.components.forEach((component) => {\n      text += `\n${component.name}\n  Status: ${component.status}\n  Uptime: ${(component.uptime / 1000 / 60).toFixed(1)} minutes\n`;\n      if (component.lastError) {\n        text += `  Last Error: ${component.lastError}\\n`;\n      }\n\n      if (component.issues.length > 0) {\n        text += `  Issues:\\n`;\n        component.issues.forEach((issue) => {\n          text += `    - ${issue.type}: ${issue.message}\\n`;\n          if (issue.recommendation) {\n            text += `      Recommendation: ${issue.recommendation}\\n`;\n          }\n        });\n      }\n    });\n\n    text += `\nPERFORMANCE\n-----------\nAverage Response Time: ${report.performance.averageResponseTime.toFixed(2)}ms\nThroughput: ${report.performance.throughput.toFixed(2)} ops/sec\nError Rate: ${(report.performance.errorRate * 100).toFixed(2)}%\nMemory Leaks: ${report.performance.memoryLeaks ? 'Detected' : 'None detected'}\n`;\n\n    if (report.performance.bottlenecks.length > 0) {\n      text += `\\nBottlenecks:\\n`;\n      report.performance.bottlenecks.forEach((bottleneck) => {\n        text += `  - ${bottleneck}\\n`;\n      });\n    }\n\n    text += `\nRECOMMENDATIONS\n---------------\n`;\n    report.recommendations.forEach((rec, index) => {\n      text += `${index + 1}. ${rec}\\n`;\n    });\n\n    return text;\n  }\n\n  // Helper methods for analysis\n  private analyzeComponentPerformance(componentName: string): DiagnosticIssue[] {\n    // Placeholder implementation\n    return [];\n  }\n\n  private checkMemoryLeaks(componentName: string): DiagnosticIssue[] {\n    // Placeholder implementation\n    return [];\n  }\n\n  private getLastError(componentName: string): string | undefined {\n    const errors = this.errorHistory.get(componentName);\n    return errors && errors.length > 0 ? errors[errors.length - 1]?.message : undefined;\n  }\n\n  private getComponentUptime(componentName: string): number {\n    // Placeholder implementation\n    return process.uptime() * 1000;\n  }\n\n  private calculateThroughput(): number {\n    // Placeholder implementation\n    return 100; // ops/sec\n  }\n\n  private calculateErrorRate(): number {\n    // Placeholder implementation\n    return 0.01; // 1%\n  }\n\n  private detectMemoryLeaks(): boolean {\n    // Placeholder implementation\n    return false;\n  }\n\n  private setupEventHandlers(): void {\n    // Track performance metrics\n    this.eventBus.on('performance:metric', (metric) => {\n      if (!this.performanceHistory.has(metric.name)) {\n        this.performanceHistory.set(metric.name, []);\n      }\n\n      const history = this.performanceHistory.get(metric.name)!;\n      history.push(metric.value);\n\n      // Keep only last 100 measurements\n      if (history.length > 100) {\n        history.shift();\n      }\n    });\n\n    // Track errors\n    this.eventBus.on('system:error', (error) => {\n      const component = error.component || 'system';\n\n      if (!this.errorHistory.has(component)) {\n        this.errorHistory.set(component, []);\n      }\n\n      const history = this.errorHistory.get(component)!;\n      history.push({\n        message: error.message || error.error,\n        timestamp: Date.now(),\n        stack: error.stack,\n      });\n\n      // Keep only last 50 errors per component\n      if (history.length > 50) {\n        history.shift();\n      }\n    });\n  }\n\n  /**\n   * Run quick diagnostic check\n   */\n  async quickDiagnostic(): Promise<{\n    status: string;\n    issues: number;\n    recommendations: string[];\n  }> {\n    const health = await this.systemIntegration.getSystemHealth();\n    const components = await this.analyzeComponents({ enableDetailedAnalysis: false });\n\n    const issues = components.reduce((count, comp) => count + comp.issues.length, 0);\n    const recommendations = this.generateRecommendations(\n      health,\n      {\n        averageResponseTime: 0,\n        throughput: 0,\n        errorRate: 0,\n        memoryLeaks: false,\n        bottlenecks: [],\n        optimization: [],\n      },\n      components,\n    ).slice(0, 3); // Top 3 recommendations\n\n    return {\n      status: health.overall,\n      issues,\n      recommendations,\n    };\n  }\n}\n"],"names":["SystemIntegration","HealthCheckManager","getErrorMessage","promises","fs","DiagnosticManager","eventBus","logger","systemIntegration","healthCheckManager","performanceHistory","Map","errorHistory","getInstance","setupEventHandlers","generateDiagnosticReport","config","info","startTime","Date","now","systemHealth","getSystemHealth","metrics","getCurrentMetrics","components","analyzeComponents","performance","analyzePerformance","recommendations","generateRecommendations","severity","calculateSeverity","report","timestamp","outputPath","exportReport","duration","emit","error","componentNames","diagnostics","Promise","all","map","name","analyzeComponent","filter","d","componentName","component","getComponent","status","uptime","issues","type","message","recommendation","healthHistory","getHealthHistory","recentChecks","slice","failureRate","check","healthy","length","push","toFixed","includePerformanceMetrics","performanceIssues","analyzeComponentPerformance","memoryIssues","checkMemoryLeaks","componentMetrics","getMetrics","lastError","getLastError","getComponentUptime","bottlenecks","optimization","responseTimeHistory","get","averageResponseTime","reduce","sum","time","throughput","calculateThroughput","errorRate","calculateErrorRate","memoryLeaks","detectMemoryLeaks","cpu","memory","queuedTasks","activeTasks","health","overall","unhealthyComponents","c","highFailureComponents","some","issue","criticalIssues","count","highIssues","format","exportFormat","content","JSON","stringify","generateHtmlReport","generateTextReport","Error","writeFile","toISOString","severityColor","low","medium","high","critical","toUpperCase","totalComponents","healthyComponents","join","b","rec","text","forEach","bottleneck","index","errors","undefined","process","on","metric","has","set","history","value","shift","stack","quickDiagnostic","enableDetailedAnalysis","comp"],"mappings":"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"}