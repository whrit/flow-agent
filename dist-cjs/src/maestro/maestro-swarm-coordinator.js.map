{"version":3,"sources":["../../../src/maestro/maestro-swarm-coordinator.ts"],"sourcesContent":["/**\n * MaestroSwarmCoordinator - Native Hive Mind Implementation\n * \n * Replaces MaestroOrchestrator with native hive mind swarm coordination.\n * Uses specs-driven topology and SwarmOrchestrator for all task management.\n * Eliminates dual agent systems and leverages collective intelligence.\n */\n\nimport { EventEmitter } from 'events';\nimport { join } from 'path';\nimport { readFile, writeFile, mkdir } from 'fs/promises';\n\n// Native hive mind components\nimport { HiveMind } from '../hive-mind/core/HiveMind.js';\nimport { Agent } from '../hive-mind/core/Agent.js';\nimport { ConsensusEngine } from '../hive-mind/integration/ConsensusEngine.js';\nimport { SwarmOrchestrator } from '../hive-mind/integration/SwarmOrchestrator.js';\nimport {\n  HiveMindConfig,\n  TaskSubmitOptions,\n  AgentCapability,\n  Task,\n  ConsensusProposal\n} from '../hive-mind/types.js';\n\n// Core infrastructure\nimport { IEventBus } from '../core/event-bus.js';\nimport { ILogger } from '../core/logger.js';\nimport { SystemError } from '../utils/errors.js';\n\n// Maestro types\nimport {\n  MaestroWorkflowState,\n  WorkflowPhase,\n  MaestroSpec\n} from './maestro-types.js';\n\nexport interface MaestroSwarmConfig {\n  // Native hive mind configuration\n  hiveMindConfig: HiveMindConfig;\n  \n  // Maestro-specific features\n  enableConsensusValidation: boolean;\n  enableLivingDocumentation: boolean;\n  enableSteeringIntegration: boolean;\n  \n  // File system settings\n  specsDirectory: string;\n  steeringDirectory: string;\n}\n\n/**\n * Native Hive Mind Maestro Coordinator\n * Leverages specs-driven swarm topology for collective intelligence\n */\nexport class MaestroSwarmCoordinator extends EventEmitter {\n  private hiveMind: HiveMind;\n  private maestroState: Map<string, MaestroWorkflowState> = new Map();\n  private specsDirectory: string;\n  private steeringDirectory: string;\n  \n  constructor(\n    private config: MaestroSwarmConfig,\n    private eventBus: IEventBus,\n    private logger: ILogger\n  ) {\n    super();\n    \n    this.specsDirectory = config.specsDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'specs');\n    this.steeringDirectory = config.steeringDirectory || join(process.cwd(), '.claude', 'claude-flow', 'maestro', 'steering');\n    \n    this.setupEventHandlers();\n    this.logger.info('MaestroSwarmCoordinator initialized with native hive mind');\n  }\n  \n  /**\n   * Initialize the specs-driven hive mind swarm\n   */\n  async initialize(): Promise<string> {\n    try {\n      // Create specs-driven hive mind with native topology\n      const hiveMindConfig: HiveMindConfig = {\n        name: 'maestro-specs-driven-swarm',\n        topology: 'specs-driven',\n        queenMode: 'strategic',\n        maxAgents: 8,\n        consensusThreshold: 0.66,\n        memoryTTL: 86400000, // 24 hours\n        autoSpawn: true,  // Automatically spawn topology agents\n        enableConsensus: this.config.enableConsensusValidation,\n        enableMemory: true,\n        enableCommunication: true,\n        ...this.config.hiveMindConfig\n      };\n      \n      // Initialize native hive mind\n      this.hiveMind = new HiveMind(hiveMindConfig);\n      const swarmId = await this.hiveMind.initialize();\n      \n      // Initialize steering docs in swarm memory if enabled\n      if (this.config.enableSteeringIntegration) {\n        await this.initializeSteeringMemory();\n      }\n      \n      this.logger.info(`Maestro specs-driven swarm initialized: ${swarmId}`);\n      this.emit('initialized', { swarmId });\n      \n      return swarmId;\n      \n    } catch (error) {\n      this.logger.error(`Failed to initialize maestro swarm: ${error instanceof Error ? error.message : String(error)}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create specification using native requirements_analyst agent\n   */\n  async createSpec(featureName: string, initialRequest: string): Promise<void> {\n    const featurePath = join(this.specsDirectory, featureName);\n    await mkdir(featurePath, { recursive: true });\n    \n    // Initialize workflow state\n    const workflowState: MaestroWorkflowState = {\n      featureName,\n      currentPhase: 'Requirements Clarification' as WorkflowPhase,\n      currentTaskIndex: 0,\n      status: 'running',\n      lastActivity: new Date(),\n      history: [{\n        phase: 'Requirements Clarification' as WorkflowPhase,\n        status: 'in-progress',\n        timestamp: new Date()\n      }]\n    };\n    \n    this.maestroState.set(featureName, workflowState);\n    \n    // Submit requirements analysis task to native swarm\n    const requirementsTask: TaskSubmitOptions = {\n      description: `Generate comprehensive requirements for feature: ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['requirements_analysis' as AgentCapability, 'user_story_creation' as AgentCapability, 'acceptance_criteria' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Requirements Clarification',\n        initialRequest,\n        outputFile: join(featurePath, 'requirements.md')\n      }\n    };\n    \n    // Use native SwarmOrchestrator through HiveMind\n    const task = await this.hiveMind.submitTask(requirementsTask);\n    await this.waitForTaskCompletion(task.id, 120000); // 2 minutes\n    \n    this.logger.info(`Created specification for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:spec_created', { featureName });\n  }\n  \n  /**\n   * Generate design using native design_architect agents with consensus\n   */\n  async generateDesign(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const requirementsPath = join(featurePath, 'requirements.md');\n    const requirementsContent = await readFile(requirementsPath, 'utf8');\n    \n    // Submit design generation task with consensus requirement\n    const designTask: TaskSubmitOptions = {\n      description: `Generate comprehensive technical design for ${featureName}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple design_architect agents work in parallel\n      requiredCapabilities: ['system_design' as AgentCapability, 'architecture' as AgentCapability, 'specs_driven_design' as AgentCapability],\n      requireConsensus: this.config.enableConsensusValidation,\n      maxAgents: 2,  // Use both design_architect agents\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Research & Design',\n        requirements: requirementsContent,\n        outputFile: join(featurePath, 'design.md')\n      }\n    };\n    \n    // Native SwarmOrchestrator handles parallel execution and consensus\n    const task = await this.hiveMind.submitTask(designTask);\n    await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Research & Design' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Research & Design' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated design for '${featureName}' using native swarm consensus`);\n    this.eventBus.emit('maestro:design_generated', { featureName });\n  }\n  \n  /**\n   * Generate tasks using native task_planner agent\n   */\n  async generateTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const designPath = join(featurePath, 'design.md');\n    const designContent = await readFile(designPath, 'utf8');\n    \n    // Submit task planning to native task_planner agent\n    const taskPlanningTask: TaskSubmitOptions = {\n      description: `Generate implementation task breakdown for ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',\n      requiredCapabilities: ['task_management' as AgentCapability, 'workflow_orchestration' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Implementation Planning',\n        designContent,\n        outputFile: join(featurePath, 'tasks.md')\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(taskPlanningTask);\n    await this.waitForTaskCompletion(task.id, 180000); // 3 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Implementation Planning' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Implementation Planning' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Generated tasks for '${featureName}' using native swarm planner`);\n    this.eventBus.emit('maestro:tasks_generated', { featureName });\n  }\n  \n  /**\n   * Implement task using native implementation_coder agents\n   */\n  async implementTask(featureName: string, taskId: number): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    \n    // Parse task description\n    const taskLines = tasksContent.split('\\n').filter(line => line.startsWith('- [ ]') || line.startsWith('- [x]'));\n    if (taskId < 1 || taskId > taskLines.length) {\n      throw new SystemError(`Invalid task ID ${taskId} for feature '${featureName}'`);\n    }\n    \n    const taskDescription = taskLines[taskId - 1].substring(taskLines[taskId - 1].indexOf(']') + 2).trim();\n    \n    // Submit implementation task to native coders\n    const implementationTask: TaskSubmitOptions = {\n      description: `Implement task: ${taskDescription}`,\n      priority: 'high',\n      strategy: 'parallel',  // Multiple implementation_coder agents can work\n      requiredCapabilities: ['code_generation' as AgentCapability, 'implementation' as AgentCapability],\n      maxAgents: 2,\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Task Execution',\n        taskId,\n        taskDescription,\n        steeringContext: await this.getSteeringContext()\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(implementationTask);\n    await this.waitForTaskCompletion(task.id, 600000); // 10 minutes\n    \n    // Mark task as completed in tasks.md\n    const updatedTasksContent = tasksContent.replace(\n      taskLines[taskId - 1],\n      taskLines[taskId - 1].replace('- [ ]', '- [x]')\n    );\n    await writeFile(tasksPath, updatedTasksContent, 'utf8');\n    \n    // Update workflow state\n    state.currentPhase = 'Task Execution' as WorkflowPhase;\n    state.currentTaskIndex = taskId;\n    state.lastActivity = new Date();\n    \n    this.logger.info(`Implemented task ${taskId} for '${featureName}' using native swarm`);\n    this.eventBus.emit('maestro:task_implemented', { featureName, taskId, taskDescription });\n  }\n  \n  /**\n   * Review implemented tasks using native quality_reviewer agent\n   */\n  async reviewTasks(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    const featurePath = join(this.specsDirectory, featureName);\n    const tasksPath = join(featurePath, 'tasks.md');\n    const tasksContent = await readFile(tasksPath, 'utf8');\n    \n    // Submit quality review task to native quality_reviewer agent\n    const reviewTask: TaskSubmitOptions = {\n      description: `Review implementation quality for ${featureName}`,\n      priority: 'high',\n      strategy: 'sequential',  // Sequential validation for consistency\n      requiredCapabilities: ['code_review' as AgentCapability, 'quality_assurance' as AgentCapability, 'testing' as AgentCapability],\n      metadata: {\n        maestroFeature: featureName,\n        maestroPhase: 'Quality Gates',\n        tasksContent,\n        steeringContext: await this.getSteeringContext()\n      }\n    };\n    \n    const task = await this.hiveMind.submitTask(reviewTask);\n    await this.waitForTaskCompletion(task.id, 300000); // 5 minutes\n    \n    // Update workflow state\n    state.currentPhase = 'Quality Gates' as WorkflowPhase;\n    state.lastActivity = new Date();\n    state.history.push({\n      phase: 'Quality Gates' as WorkflowPhase,\n      status: 'completed',\n      timestamp: new Date()\n    });\n    \n    this.logger.info(`Completed quality review for '${featureName}' using native quality_reviewer`);\n    this.eventBus.emit('maestro:quality_review_completed', { featureName });\n  }\n  \n  /**\n   * Approve workflow phase with optional consensus\n   */\n  async approvePhase(featureName: string): Promise<void> {\n    const state = this.maestroState.get(featureName);\n    if (!state) {\n      throw new SystemError(`No workflow state found for '${featureName}'`);\n    }\n    \n    // Use native consensus if enabled\n    if (this.config.enableConsensusValidation) {\n      const consensusProposal: ConsensusProposal = {\n        id: `maestro-phase-approval-${featureName}-${Date.now()}`,\n        swarmId: (this.hiveMind as any).id,\n        proposal: {\n          action: 'approve_phase',\n          featureName,\n          currentPhase: state.currentPhase,\n          details: `Approve completion of ${state.currentPhase} phase for ${featureName}`\n        },\n        requiredThreshold: 0.66,\n        deadline: new Date(Date.now() + 300000), // 5 minutes\n        taskId: `maestro-approval-${featureName}`,\n        metadata: {\n          type: 'phase_approval',\n          featureName,\n          phase: state.currentPhase\n        }\n      };\n      \n      // Submit for consensus validation\n      const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n      const proposalId = await consensusEngine.createProposal(consensusProposal);\n      const consensusResult = await this.waitForConsensusResult(proposalId, 300000);\n      \n      if (!consensusResult.achieved) {\n        throw new SystemError(`Phase approval consensus failed: ${consensusResult.reason}`);\n      }\n    }\n    \n    // Progress to next phase\n    const phaseProgression: Record<string, string> = {\n      'Requirements Clarification': 'Research & Design',\n      'Research & Design': 'Implementation Planning',\n      'Implementation Planning': 'Task Execution',\n      'Task Execution': 'Completed'\n    };\n    \n    const nextPhase = phaseProgression[state.currentPhase];\n    if (nextPhase) {\n      state.currentPhase = nextPhase as WorkflowPhase;\n      state.lastActivity = new Date();\n      state.history.push({\n        phase: nextPhase as WorkflowPhase,\n        status: 'approved',\n        timestamp: new Date()\n      });\n    }\n    \n    this.logger.info(`Approved phase transition for '${featureName}': ${state.currentPhase} -> ${nextPhase}`);\n    this.eventBus.emit('maestro:phase_approved', { featureName, nextPhase });\n  }\n  \n  /**\n   * Get workflow state\n   */\n  getWorkflowState(featureName: string): MaestroWorkflowState | undefined {\n    return this.maestroState.get(featureName);\n  }\n  \n  /**\n   * Create steering document in native swarm memory\n   */\n  async createSteeringDocument(domain: string, content: string): Promise<void> {\n    if (!this.config.enableSteeringIntegration) {\n      throw new SystemError('Steering integration is disabled');\n    }\n    \n    // Store in native hive mind memory instead of files\n    await this.hiveMind.memory.store(`steering/${domain}`, {\n      content,\n      domain,\n      lastUpdated: new Date(),\n      maintainer: 'steering_documenter'\n    });\n    \n    // Notify all agents through native communication\n    await this.hiveMind.communication.broadcast({\n      type: 'steering_update',\n      domain,\n      content: content.substring(0, 200) + '...' // Summary for notification\n    });\n    \n    this.logger.info(`Created steering document for '${domain}' in swarm memory`);\n  }\n  \n  /**\n   * Get steering context from swarm memory\n   */\n  private async getSteeringContext(): Promise<string> {\n    if (!this.config.enableSteeringIntegration) {\n      return 'No steering context available.';\n    }\n    \n    try {\n      // Retrieve all steering documents from swarm memory\n      const steeringKeys = await this.hiveMind.memory.search('steering/*');\n      const steeringDocs = await Promise.all(\n        steeringKeys.map(key => this.hiveMind.memory.retrieve(key))\n      );\n      \n      return steeringDocs\n        .filter(doc => doc)\n        .map(doc => `## ${doc.domain}\\n${doc.content}`)\n        .join('\\n\\n---\\n\\n');\n        \n    } catch (error) {\n      this.logger.warn(`Failed to retrieve steering context: ${error instanceof Error ? error.message : String(error)}`);\n      return 'Steering context temporarily unavailable.';\n    }\n  }\n  \n  /**\n   * Initialize steering documents in swarm memory\n   */\n  private async initializeSteeringMemory(): Promise<void> {\n    // Initialize default steering documents in memory\n    const defaultSteering = {\n      'product': 'Focus on user value and clear requirements specification.',\n      'tech': 'Follow clean architecture patterns and maintainable code practices.',\n      'workflow': 'Use specs-driven development with clear phase progression.'\n    };\n    \n    for (const [domain, content] of Object.entries(defaultSteering)) {\n      await this.hiveMind.memory.store(`steering/${domain}`, {\n        content,\n        domain,\n        lastUpdated: new Date(),\n        maintainer: 'system'\n      });\n    }\n    \n    this.logger.info('Initialized default steering documents in swarm memory');\n  }\n  \n  /**\n   * Wait for task completion using native swarm tracking\n   */\n  private async waitForTaskCompletion(taskId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Task timeout: ${taskId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const task = await this.hiveMind.getTask(taskId);\n          \n          if (task.status === 'completed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve(task.result ? JSON.parse(task.result) : {});\n          } else if (task.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            reject(new Error(`Task failed: ${task.error || 'Unknown error'}`));\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 2000);\n    });\n  }\n  \n  /**\n   * Wait for consensus result using native ConsensusEngine\n   */\n  private async waitForConsensusResult(proposalId: string, timeoutMs: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Consensus timeout for proposal ${proposalId}`));\n      }, timeoutMs);\n      \n      const checkInterval = setInterval(async () => {\n        try {\n          const consensusEngine = (this.hiveMind as any).consensus as ConsensusEngine;\n          const status = await consensusEngine.getProposalStatus(proposalId);\n          \n          if (status.status === 'achieved') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: true,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus achieved'\n            });\n          } else if (status.status === 'failed') {\n            clearTimeout(timeout);\n            clearInterval(checkInterval);\n            resolve({\n              achieved: false,\n              finalRatio: status.currentRatio,\n              reason: 'Consensus failed'\n            });\n          }\n        } catch (error) {\n          clearTimeout(timeout);\n          clearInterval(checkInterval);\n          reject(error);\n        }\n      }, 1000);\n    });\n  }\n  \n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    this.eventBus.on('maestro:spec_created', this.handleSpecCreated.bind(this));\n    this.eventBus.on('maestro:phase_approved', this.handlePhaseApproved.bind(this));\n    this.eventBus.on('maestro:task_implemented', this.handleTaskImplemented.bind(this));\n  }\n  \n  /**\n   * Event handlers\n   */\n  private async handleSpecCreated(data: any): Promise<void> {\n    this.logger.info(`Spec created via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  private async handlePhaseApproved(data: any): Promise<void> {\n    this.logger.info(`Phase approved via native consensus: ${JSON.stringify(data)}`);\n  }\n  \n  private async handleTaskImplemented(data: any): Promise<void> {\n    this.logger.info(`Task implemented via native swarm: ${JSON.stringify(data)}`);\n  }\n  \n  /**\n   * Shutdown coordinator and native swarm\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down MaestroSwarmCoordinator');\n    \n    if (this.hiveMind) {\n      await this.hiveMind.shutdown();\n      this.logger.info('Native hive mind swarm shutdown complete');\n    }\n    \n    this.logger.info('MaestroSwarmCoordinator shutdown complete');\n  }\n}"],"names":["EventEmitter","join","readFile","writeFile","mkdir","HiveMind","SystemError","MaestroSwarmCoordinator","hiveMind","maestroState","Map","specsDirectory","steeringDirectory","config","eventBus","logger","process","cwd","setupEventHandlers","info","initialize","hiveMindConfig","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","autoSpawn","enableConsensus","enableConsensusValidation","enableMemory","enableCommunication","swarmId","enableSteeringIntegration","initializeSteeringMemory","emit","error","Error","message","String","createSpec","featureName","initialRequest","featurePath","recursive","workflowState","currentPhase","currentTaskIndex","status","lastActivity","Date","history","phase","timestamp","set","requirementsTask","description","priority","strategy","requiredCapabilities","metadata","maestroFeature","maestroPhase","outputFile","task","submitTask","waitForTaskCompletion","id","generateDesign","state","get","requirementsPath","requirementsContent","designTask","requireConsensus","requirements","push","generateTasks","designPath","designContent","taskPlanningTask","implementTask","taskId","tasksPath","tasksContent","taskLines","split","filter","line","startsWith","length","taskDescription","substring","indexOf","trim","implementationTask","steeringContext","getSteeringContext","updatedTasksContent","replace","reviewTasks","reviewTask","approvePhase","consensusProposal","now","proposal","action","details","requiredThreshold","deadline","type","consensusEngine","consensus","proposalId","createProposal","consensusResult","waitForConsensusResult","achieved","reason","phaseProgression","nextPhase","getWorkflowState","createSteeringDocument","domain","content","memory","store","lastUpdated","maintainer","communication","broadcast","steeringKeys","search","steeringDocs","Promise","all","map","key","retrieve","doc","warn","defaultSteering","Object","entries","timeoutMs","resolve","reject","timeout","setTimeout","checkInterval","setInterval","getTask","clearTimeout","clearInterval","result","JSON","parse","getProposalStatus","finalRatio","currentRatio","on","handleSpecCreated","bind","handlePhaseApproved","handleTaskImplemented","data","stringify","shutdown"],"mappings":"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"}