{"version":3,"sources":["../../../src/terminal/session.ts"],"sourcesContent":["/**\n * Terminal session management\n */\n\nimport type { Terminal } from './adapters/base.js';\nimport type { AgentProfile } from '../utils/types.js';\nimport type { ILogger } from '../core/logger.js';\nimport { TerminalCommandError } from '../utils/errors.js';\nimport { generateId, timeout } from '../utils/helpers.js';\n\n/**\n * Terminal session wrapper\n */\nexport class TerminalSession {\n  readonly id: string;\n  readonly startTime: Date;\n  private initialized = false;\n  private commandHistory: string[] = [];\n  private lastCommandTime?: Date;\n  private outputListeners = new Set<(output: string) => void>();\n\n  constructor(\n    public readonly terminal: Terminal,\n    public readonly profile: AgentProfile,\n    private commandTimeout: number,\n    private logger: ILogger,\n  ) {\n    this.id = generateId('session');\n    this.startTime = new Date();\n  }\n\n  get lastActivity(): Date {\n    return this.lastCommandTime || this.startTime;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    this.logger.debug('Initializing terminal session', {\n      sessionId: this.id,\n      agentId: this.profile.id,\n    });\n\n    try {\n      // Set up environment\n      await this.setupEnvironment();\n\n      // Run initialization commands\n      await this.runInitializationCommands();\n\n      this.initialized = true;\n\n      this.logger.info('Terminal session initialized', {\n        sessionId: this.id,\n        agentId: this.profile.id,\n      });\n    } catch (error) {\n      this.logger.error('Failed to initialize terminal session', error);\n      throw error;\n    }\n  }\n\n  async executeCommand(command: string): Promise<string> {\n    if (!this.initialized) {\n      throw new TerminalCommandError('Session not initialized');\n    }\n\n    if (!this.terminal.isAlive()) {\n      throw new TerminalCommandError('Terminal is not alive');\n    }\n\n    this.logger.debug('Executing command', {\n      sessionId: this.id,\n      command: command.substring(0, 100),\n    });\n\n    try {\n      // Notify listeners of command\n      this.notifyOutputListeners(`$ ${command}\\n`);\n\n      // Execute with timeout\n      const result = await timeout(\n        this.terminal.executeCommand(command),\n        this.commandTimeout,\n        `Command timeout after ${this.commandTimeout}ms`,\n      );\n\n      // Notify listeners of output\n      this.notifyOutputListeners(result);\n\n      // Update history\n      this.commandHistory.push(command);\n      this.lastCommandTime = new Date();\n\n      this.logger.debug('Command executed successfully', {\n        sessionId: this.id,\n        outputLength: result.length,\n      });\n\n      return result;\n    } catch (error) {\n      this.logger.error('Command execution failed', {\n        sessionId: this.id,\n        command,\n        error,\n      });\n      throw new TerminalCommandError('Command execution failed', {\n        command,\n        error,\n      });\n    }\n  }\n\n  async cleanup(): Promise<void> {\n    this.logger.debug('Cleaning up terminal session', { sessionId: this.id });\n\n    try {\n      // Run cleanup commands\n      await this.runCleanupCommands();\n    } catch (error) {\n      this.logger.warn('Error during session cleanup', {\n        sessionId: this.id,\n        error,\n      });\n    }\n  }\n\n  isHealthy(): boolean {\n    if (!this.terminal.isAlive()) {\n      return false;\n    }\n\n    // Check if terminal is responsive\n    if (this.lastCommandTime) {\n      const timeSinceLastCommand = Date.now() - this.lastCommandTime.getTime();\n      if (timeSinceLastCommand > 300000) {\n        // 5 minutes\n        // Terminal might be stale, do a health check\n        this.performHealthCheck().catch((error) => {\n          this.logger.warn('Health check failed', { sessionId: this.id, error });\n        });\n      }\n    }\n\n    return true;\n  }\n\n  getCommandHistory(): string[] {\n    return [...this.commandHistory];\n  }\n\n  private async setupEnvironment(): Promise<void> {\n    // Set environment variables\n    const envVars = {\n      CLAUDE_FLOW_SESSION: this.id,\n      CLAUDE_FLOW_AGENT: this.profile.id,\n      CLAUDE_FLOW_AGENT_TYPE: this.profile.type,\n    };\n\n    for (const [key, value] of Object.entries(envVars)) {\n      await this.terminal.executeCommand(`export ${key}=\"${value}\"`);\n    }\n\n    // Set working directory if specified\n    if (this.profile.metadata?.workingDirectory) {\n      await this.terminal.executeCommand(`cd \"${this.profile.metadata.workingDirectory}\"`);\n    }\n  }\n\n  private async runInitializationCommands(): Promise<void> {\n    // Run any profile-specific initialization commands\n    if (this.profile.metadata?.initCommands) {\n      const commands = this.profile.metadata.initCommands as string[];\n      for (const command of commands) {\n        await this.terminal.executeCommand(command);\n      }\n    }\n\n    // Set up command prompt\n    await this.terminal.executeCommand('export PS1=\"[claude-flow]$ \"');\n  }\n\n  private async runCleanupCommands(): Promise<void> {\n    // Run any profile-specific cleanup commands\n    if (this.profile.metadata?.cleanupCommands) {\n      const commands = this.profile.metadata.cleanupCommands as string[];\n      for (const command of commands) {\n        try {\n          await this.terminal.executeCommand(command);\n        } catch {\n          // Ignore cleanup errors\n        }\n      }\n    }\n  }\n\n  private async performHealthCheck(): Promise<void> {\n    try {\n      const result = await timeout(\n        this.terminal.executeCommand('echo \"HEALTH_CHECK_OK\"'),\n        5000,\n        'Health check timeout',\n      );\n\n      if (!result.includes('HEALTH_CHECK_OK')) {\n        throw new Error('Invalid health check response');\n      }\n\n      this.lastCommandTime = new Date();\n    } catch (error) {\n      throw new Error(\n        `Health check failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Stream terminal output\n   */\n  streamOutput(callback: (output: string) => void): () => void {\n    this.outputListeners.add(callback);\n\n    // Set up terminal output listener if supported\n    if (this.terminal.addOutputListener) {\n      this.terminal.addOutputListener(callback);\n    }\n\n    // Return unsubscribe function\n    return () => {\n      this.outputListeners.delete(callback);\n      if (this.terminal.removeOutputListener) {\n        this.terminal.removeOutputListener(callback);\n      }\n    };\n  }\n\n  /**\n   * Notify output listeners\n   */\n  private notifyOutputListeners(output: string): void {\n    this.outputListeners.forEach((listener) => {\n      try {\n        listener(output);\n      } catch (error) {\n        this.logger.error('Error in output listener', { sessionId: this.id, error });\n      }\n    });\n  }\n}\n"],"names":["TerminalCommandError","generateId","timeout","TerminalSession","id","startTime","initialized","commandHistory","lastCommandTime","outputListeners","Set","terminal","profile","commandTimeout","logger","Date","lastActivity","initialize","debug","sessionId","agentId","setupEnvironment","runInitializationCommands","info","error","executeCommand","command","isAlive","substring","notifyOutputListeners","result","push","outputLength","length","cleanup","runCleanupCommands","warn","isHealthy","timeSinceLastCommand","now","getTime","performHealthCheck","catch","getCommandHistory","envVars","CLAUDE_FLOW_SESSION","CLAUDE_FLOW_AGENT","CLAUDE_FLOW_AGENT_TYPE","type","key","value","Object","entries","metadata","workingDirectory","initCommands","commands","cleanupCommands","includes","Error","message","String","streamOutput","callback","add","addOutputListener","delete","removeOutputListener","output","forEach","listener"],"mappings":"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"}