{"version":3,"sources":["../../../../src/terminal/adapters/vscode.ts"],"sourcesContent":["/**\n * VSCode terminal adapter implementation\n */\n\nimport { platform } from 'os';\nimport type { ITerminalAdapter, Terminal } from './base.js';\nimport type { ILogger } from '../../core/logger.js';\nimport { TerminalError } from '../../utils/errors.js';\nimport { generateId, delay, timeout, createDeferred } from '../../utils/helpers.js';\n\n/**\n * VSCode API interface (injected via extension)\n */\ninterface VSCodeAPI {\n  window: {\n    createTerminal(options: {\n      name: string;\n      shellPath?: string;\n      shellArgs?: string[];\n      env?: Record<string, string>;\n    }): VSCodeTerminal;\n    onDidCloseTerminal(listener: (terminal: VSCodeTerminal) => void): { dispose(): void };\n  };\n}\n\ninterface VSCodeTerminal {\n  name: string;\n  processId: Promise<number | undefined>;\n  sendText(text: string, addNewLine?: boolean): void;\n  show(preserveFocus?: boolean): void;\n  hide(): void;\n  dispose(): void;\n}\n\n/**\n * VSCode terminal implementation\n */\nclass VSCodeTerminalWrapper implements Terminal {\n  id: string;\n  pid?: number;\n  private vscodeTerminal?: VSCodeTerminal;\n  private outputBuffer = '';\n  private commandMarker: string;\n  private outputDeferred = createDeferred<string>();\n  private isDisposed = false;\n\n  constructor(\n    private vscodeApi: VSCodeAPI,\n    private shellType: string,\n    private logger: ILogger,\n  ) {\n    this.id = generateId('vscode-term');\n    this.commandMarker = `__CLAUDE_FLOW_${this.id}__`;\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      // Create VSCode terminal\n      const shellPath = this.getShellPath();\n      const terminalOptions: any = {\n        name: `Claude-Flow Terminal ${this.id}`,\n        shellArgs: this.getShellArgs(),\n        env: {\n          CLAUDE_FLOW_TERMINAL: 'true',\n          CLAUDE_FLOW_TERMINAL_ID: this.id,\n          PS1: '$ ', // Simple prompt\n        },\n      };\n      if (shellPath !== undefined) {\n        terminalOptions.shellPath = shellPath;\n      }\n      this.vscodeTerminal = this.vscodeApi.window.createTerminal(terminalOptions);\n\n      // Get process ID\n      const processId = await this.vscodeTerminal.processId;\n      if (processId !== undefined) {\n        this.pid = processId;\n      }\n\n      // Show terminal (but don't steal focus)\n      this.vscodeTerminal.show(true);\n\n      // Wait for terminal to be ready\n      await this.waitForReady();\n\n      this.logger.debug('VSCode terminal initialized', { id: this.id, pid: this.pid });\n    } catch (error) {\n      throw new TerminalError('Failed to create VSCode terminal', { error });\n    }\n  }\n\n  async executeCommand(command: string): Promise<string> {\n    if (!this.vscodeTerminal || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    try {\n      // Clear output buffer\n      this.outputBuffer = '';\n      this.outputDeferred = createDeferred<string>();\n\n      // Send command with marker\n      const markedCommand = `${command} && echo \"${this.commandMarker}\"`;\n      this.vscodeTerminal.sendText(markedCommand, true);\n\n      // Wait for command to complete\n      const output = await timeout(this.outputDeferred.promise, 30000, 'Command execution timeout');\n\n      return output;\n    } catch (error) {\n      throw new TerminalError('Failed to execute command', { command, error });\n    }\n  }\n\n  async write(data: string): Promise<void> {\n    if (!this.vscodeTerminal || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    this.vscodeTerminal.sendText(data, false);\n  }\n\n  async read(): Promise<string> {\n    if (!this.vscodeTerminal || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    // Return buffered output\n    const output = this.outputBuffer;\n    this.outputBuffer = '';\n    return output;\n  }\n\n  isAlive(): boolean {\n    return !this.isDisposed && this.vscodeTerminal !== undefined;\n  }\n\n  async kill(): Promise<void> {\n    if (this.vscodeTerminal && !this.isDisposed) {\n      try {\n        // Try graceful shutdown first\n        this.vscodeTerminal.sendText('exit', true);\n        await delay(500);\n\n        // Dispose terminal\n        this.vscodeTerminal.dispose();\n        this.isDisposed = true;\n      } catch (error) {\n        this.logger.warn('Error killing VSCode terminal', { id: this.id, error });\n      }\n    }\n  }\n\n  /**\n   * Process terminal output (called by extension)\n   */\n  processOutput(data: string): void {\n    this.outputBuffer += data;\n\n    // Check for command completion marker\n    const markerIndex = this.outputBuffer.indexOf(this.commandMarker);\n    if (markerIndex !== -1) {\n      // Extract output before marker\n      const output = this.outputBuffer.substring(0, markerIndex).trim();\n\n      // Clear buffer up to after marker\n      this.outputBuffer = this.outputBuffer\n        .substring(markerIndex + this.commandMarker.length)\n        .trim();\n\n      // Resolve pending command\n      this.outputDeferred.resolve(output);\n    }\n  }\n\n  private getShellPath(): string | undefined {\n    switch (this.shellType) {\n      case 'bash':\n        return '/bin/bash';\n      case 'zsh':\n        return '/bin/zsh';\n      case 'powershell':\n        return platform() === 'win32' ? 'powershell.exe' : 'pwsh';\n      case 'cmd':\n        return platform() === 'win32' ? 'cmd.exe' : undefined;\n      default:\n        return undefined;\n    }\n  }\n\n  private getShellArgs(): string[] {\n    switch (this.shellType) {\n      case 'bash':\n        return ['--norc', '--noprofile'];\n      case 'zsh':\n        return ['--no-rcs'];\n      case 'powershell':\n        return ['-NoProfile', '-NonInteractive'];\n      case 'cmd':\n        return ['/Q'];\n      default:\n        return [];\n    }\n  }\n\n  private async waitForReady(): Promise<void> {\n    // Send a test command to ensure terminal is ready\n    this.vscodeTerminal!.sendText('echo \"READY\"', true);\n\n    const startTime = Date.now();\n    while (Date.now() - startTime < 5000) {\n      if (this.outputBuffer.includes('READY')) {\n        this.outputBuffer = '';\n        return;\n      }\n      await delay(100);\n    }\n\n    throw new TerminalError('Terminal failed to become ready');\n  }\n}\n\n/**\n * VSCode terminal adapter\n */\nexport class VSCodeAdapter implements ITerminalAdapter {\n  private terminals = new Map<string, VSCodeTerminalWrapper>();\n  private vscodeApi?: VSCodeAPI;\n  private shellType: string;\n  private terminalCloseListener?: { dispose(): void };\n\n  constructor(private logger: ILogger) {\n    this.shellType = this.detectShell();\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing VSCode terminal adapter');\n\n    // Check if running in VSCode extension context\n    if (!this.isVSCodeExtensionContext()) {\n      throw new TerminalError('Not running in VSCode extension context');\n    }\n\n    // Get VSCode API from global\n    this.vscodeApi = (globalThis as any).vscode;\n    if (!this.vscodeApi) {\n      throw new TerminalError('VSCode API not available');\n    }\n\n    // Register terminal close listener\n    this.terminalCloseListener = this.vscodeApi.window.onDidCloseTerminal((terminal) => {\n      // Find and clean up closed terminal\n      for (const [id, wrapper] of this.terminals.entries()) {\n        if ((wrapper as any).vscodeTerminal === terminal) {\n          this.logger.info('VSCode terminal closed', { id });\n          this.terminals.delete(id);\n          break;\n        }\n      }\n    });\n\n    this.logger.info('VSCode terminal adapter initialized');\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down VSCode terminal adapter');\n\n    // Dispose listener\n    if (this.terminalCloseListener) {\n      this.terminalCloseListener.dispose();\n    }\n\n    // Kill all terminals\n    const terminals = Array.from(this.terminals.values());\n    await Promise.all(terminals.map((term) => term.kill()));\n\n    this.terminals.clear();\n  }\n\n  async createTerminal(): Promise<Terminal> {\n    if (!this.vscodeApi) {\n      throw new TerminalError('VSCode API not initialized');\n    }\n\n    const terminal = new VSCodeTerminalWrapper(this.vscodeApi, this.shellType, this.logger);\n\n    await terminal.initialize();\n    this.terminals.set(terminal.id, terminal);\n\n    // Register output processor if extension provides it\n    const outputProcessor = (globalThis as any).registerTerminalOutputProcessor;\n    if (outputProcessor) {\n      outputProcessor(terminal.id, (data: string) => terminal.processOutput(data));\n    }\n\n    return terminal;\n  }\n\n  async destroyTerminal(terminal: Terminal): Promise<void> {\n    await terminal.kill();\n    this.terminals.delete(terminal.id);\n  }\n\n  private isVSCodeExtensionContext(): boolean {\n    // Check for VSCode extension environment\n    return (\n      typeof (globalThis as any).vscode !== 'undefined' &&\n      typeof (globalThis as any).vscode.window !== 'undefined'\n    );\n  }\n\n  private detectShell(): string {\n    // Get default shell from VSCode settings or environment\n    const osplatform = platform();\n\n    if (osplatform === 'win32') {\n      // Windows defaults\n      const comspec = process.env.COMSPEC;\n      if (comspec?.toLowerCase().includes('powershell')) {\n        return 'powershell';\n      }\n      return 'cmd';\n    } else {\n      // Unix-like defaults\n      const shell = process.env.SHELL;\n      if (shell) {\n        const shellName = shell.split('/').pop();\n        if (shellName && ['bash', 'zsh', 'fish', 'sh'].includes(shellName)) {\n          return shellName;\n        }\n      }\n      return 'bash';\n    }\n  }\n}\n"],"names":["platform","TerminalError","generateId","delay","timeout","createDeferred","VSCodeTerminalWrapper","id","pid","vscodeTerminal","outputBuffer","commandMarker","outputDeferred","isDisposed","vscodeApi","shellType","logger","initialize","shellPath","getShellPath","terminalOptions","name","shellArgs","getShellArgs","env","CLAUDE_FLOW_TERMINAL","CLAUDE_FLOW_TERMINAL_ID","PS1","undefined","window","createTerminal","processId","show","waitForReady","debug","error","executeCommand","command","isAlive","markedCommand","sendText","output","promise","write","data","read","kill","dispose","warn","processOutput","markerIndex","indexOf","substring","trim","length","resolve","startTime","Date","now","includes","VSCodeAdapter","terminals","Map","terminalCloseListener","detectShell","info","isVSCodeExtensionContext","globalThis","vscode","onDidCloseTerminal","terminal","wrapper","entries","delete","shutdown","Array","from","values","Promise","all","map","term","clear","set","outputProcessor","registerTerminalOutputProcessor","destroyTerminal","osplatform","comspec","process","COMSPEC","toLowerCase","shell","SHELL","shellName","split","pop"],"mappings":"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"}