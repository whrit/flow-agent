{"version":3,"sources":["../../../../src/terminal/adapters/native.ts"],"sourcesContent":["import * as process from 'node:process';\n/**\n * Native terminal adapter implementation\n */\n\nimport { spawn, ChildProcess } from 'child_process';\nimport { platform } from 'os';\nimport type { ITerminalAdapter, Terminal } from './base.js';\nimport type { ILogger } from '../../core/logger.js';\nimport { TerminalError, TerminalCommandError } from '../../utils/errors.js';\nimport { generateId, delay, timeout, createDeferred } from '../../utils/helpers.js';\n\n/**\n * Platform-specific shell configuration\n */\ninterface ShellConfig {\n  path: string;\n  args: string[];\n  env?: Record<string, string>;\n}\n\n/**\n * Native terminal implementation using Deno subprocess\n */\nclass NativeTerminal implements Terminal {\n  id: string;\n  pid?: number;\n  private process?: ChildProcess | undefined;\n  private encoder = new TextEncoder();\n  private decoder = new TextDecoder();\n  private shell: string;\n  private outputBuffer = '';\n  private errorBuffer = '';\n  private commandMarker: string;\n  private commandDeferred?: ReturnType<typeof createDeferred<string>> | undefined;\n  private outputListeners = new Set<(data: string) => void>();\n  private alive = true;\n  private stdoutData = '';\n  private stderrData = '';\n\n  constructor(\n    shell: string,\n    private logger: ILogger,\n  ) {\n    this.id = generateId('native-term');\n    this.shell = shell;\n    this.commandMarker = `__CLAUDE_FLOW_${this.id}__`;\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      const shellConfig = this.getShellConfig();\n\n      // Start shell process\n      this.process = spawn(shellConfig.path, shellConfig.args, {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        env: {\n          ...process.env,\n          ...shellConfig.env,\n          CLAUDE_FLOW_TERMINAL: 'true',\n          CLAUDE_FLOW_TERMINAL_ID: this.id,\n        },\n      });\n\n      // Get PID\n      this.pid = this.process.pid;\n\n      // Set up output handlers\n      this.setupOutputHandlers();\n\n      // Monitor process status\n      this.monitorProcess();\n\n      // Wait for shell to be ready\n      await this.waitForReady();\n\n      this.logger.debug('Native terminal initialized', {\n        id: this.id,\n        pid: this.pid,\n        shell: this.shell,\n      });\n    } catch (error) {\n      this.alive = false;\n      throw new TerminalError('Failed to create native terminal', { error });\n    }\n  }\n\n  async executeCommand(command: string): Promise<string> {\n    if (!this.process || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    try {\n      // Create deferred for this command\n      this.commandDeferred = createDeferred<string>();\n\n      // Clear output buffer\n      this.outputBuffer = '';\n\n      // Send command with marker\n      const markedCommand = this.wrapCommand(command);\n      await this.write(markedCommand + '\\n');\n\n      // Wait for command to complete\n      const output = await timeout(\n        this.commandDeferred.promise,\n        30000,\n        'Command execution timeout',\n      );\n\n      return output;\n    } catch (error) {\n      throw new TerminalCommandError('Failed to execute command', { command, error });\n    }\n  }\n\n  async write(data: string): Promise<void> {\n    if (!this.process || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.process?.stdin) {\n        reject(new TerminalError('Process stdin not available'));\n        return;\n      }\n\n      this.process.stdin.write(data, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async read(): Promise<string> {\n    if (!this.process || !this.isAlive()) {\n      throw new TerminalError('Terminal is not alive');\n    }\n\n    // Return buffered output\n    const output = this.outputBuffer;\n    this.outputBuffer = '';\n    return output;\n  }\n\n  isAlive(): boolean {\n    return this.alive && this.process !== undefined;\n  }\n\n  async kill(): Promise<void> {\n    if (!this.process) return;\n\n    try {\n      this.alive = false;\n\n      // Close streams\n      if (this.process.stdin && !this.process.stdin.destroyed) {\n        this.process.stdin.end();\n      }\n\n      // Try graceful shutdown first\n      try {\n        await this.write('exit\\n');\n        await delay(500);\n      } catch {\n        // Ignore write errors during shutdown\n      }\n\n      // Force kill if still alive\n      try {\n        this.process.kill('SIGTERM');\n        await delay(500);\n\n        // Use SIGKILL if SIGTERM didn't work\n        if (!this.process.killed) {\n          this.process.kill('SIGKILL');\n        }\n      } catch {\n        // Process might already be dead\n      }\n    } catch (error) {\n      this.logger.warn('Error killing native terminal', { id: this.id, error });\n    } finally {\n      this.process = undefined;\n    }\n  }\n\n  /**\n   * Add output listener\n   */\n  addOutputListener(listener: (data: string) => void): void {\n    this.outputListeners.add(listener);\n  }\n\n  /**\n   * Remove output listener\n   */\n  removeOutputListener(listener: (data: string) => void): void {\n    this.outputListeners.delete(listener);\n  }\n\n  private getShellConfig(): ShellConfig {\n    const osplatform = platform();\n\n    switch (this.shell) {\n      case 'bash':\n        return {\n          path: osplatform === 'win32' ? 'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe' : '/bin/bash',\n          args: ['--norc', '--noprofile'],\n          env: { PS1: '$ ' },\n        };\n\n      case 'zsh':\n        return {\n          path: '/bin/zsh',\n          args: ['--no-rcs'],\n          env: { PS1: '$ ' },\n        };\n\n      case 'powershell':\n        return {\n          path: osplatform === 'win32' ? 'powershell.exe' : 'pwsh',\n          args: ['-NoProfile', '-NonInteractive', '-NoLogo'],\n        };\n\n      case 'cmd':\n        return {\n          path: 'cmd.exe',\n          args: ['/Q', '/K', 'prompt $G'],\n        };\n\n      case 'sh':\n      default:\n        return {\n          path: '/bin/sh',\n          args: [],\n          env: { PS1: '$ ' },\n        };\n    }\n  }\n\n  private wrapCommand(command: string): string {\n    const osplatform = platform();\n\n    if (this.shell === 'powershell') {\n      // PowerShell command wrapping\n      return `${command}; Write-Host \"${this.commandMarker}\"`;\n    } else if (this.shell === 'cmd' && osplatform === 'win32') {\n      // Windows CMD command wrapping\n      return `${command} & echo ${this.commandMarker}`;\n    } else {\n      // Unix-like shell command wrapping\n      return `${command} && echo \"${this.commandMarker}\" || (echo \"${this.commandMarker}\"; false)`;\n    }\n  }\n\n  private setupOutputHandlers(): void {\n    if (!this.process) return;\n\n    // Handle stdout\n    this.process.stdout?.on('data', (data: Buffer) => {\n      const text = data.toString();\n      this.processOutput(text);\n    });\n\n    // Handle stderr\n    this.process.stderr?.on('data', (data: Buffer) => {\n      const text = data.toString();\n      this.errorBuffer += text;\n\n      // Also send stderr to output listeners\n      this.notifyListeners(text);\n    });\n\n    // Handle process errors\n    this.process.on('error', (error) => {\n      if (this.alive) {\n        this.logger.error('Process error', { id: this.id, error });\n      }\n    });\n  }\n\n  private processOutput(text: string): void {\n    this.outputBuffer += text;\n\n    // Notify listeners\n    this.notifyListeners(text);\n\n    // Check for command completion marker\n    const markerIndex = this.outputBuffer.indexOf(this.commandMarker);\n    if (markerIndex !== -1 && this.commandDeferred) {\n      // Extract output before marker\n      const output = this.outputBuffer.substring(0, markerIndex).trim();\n\n      // Include any stderr output\n      const fullOutput = this.errorBuffer ? `${output}\\n${this.errorBuffer}` : output;\n      this.errorBuffer = '';\n\n      // Clear buffer up to after marker\n      this.outputBuffer = this.outputBuffer\n        .substring(markerIndex + this.commandMarker.length)\n        .trim();\n\n      // Resolve pending command\n      this.commandDeferred.resolve(fullOutput);\n      this.commandDeferred = undefined;\n    }\n  }\n\n  private notifyListeners(data: string): void {\n    this.outputListeners.forEach((listener) => {\n      try {\n        listener(data);\n      } catch (error) {\n        this.logger.error('Error in output listener', { id: this.id, error });\n      }\n    });\n  }\n\n  private async monitorProcess(): Promise<void> {\n    if (!this.process) return;\n\n    this.process.on('exit', (code, signal) => {\n      this.logger.info('Terminal process exited', {\n        id: this.id,\n        code,\n        signal,\n      });\n      this.alive = false;\n\n      // Reject any pending command\n      if (this.commandDeferred) {\n        this.commandDeferred.reject(new Error('Terminal process exited'));\n      }\n    });\n\n    this.process.on('error', (error) => {\n      this.logger.error('Error monitoring process', { id: this.id, error });\n      this.alive = false;\n\n      // Reject any pending command\n      if (this.commandDeferred) {\n        this.commandDeferred.reject(error);\n      }\n    });\n  }\n\n  private async waitForReady(): Promise<void> {\n    // Send a test command to ensure shell is ready\n    const testCommand = this.shell === 'powershell' ? 'Write-Host \"READY\"' : 'echo \"READY\"';\n\n    await this.write(testCommand + '\\n');\n\n    const startTime = Date.now();\n    while (Date.now() - startTime < 5000) {\n      if (this.outputBuffer.includes('READY')) {\n        this.outputBuffer = '';\n        return;\n      }\n      await delay(100);\n    }\n\n    throw new TerminalError('Terminal failed to become ready');\n  }\n}\n\n/**\n * Native terminal adapter\n */\nexport class NativeAdapter implements ITerminalAdapter {\n  private terminals = new Map<string, NativeTerminal>();\n  private shell: string;\n\n  constructor(private logger: ILogger) {\n    // Detect available shell\n    this.shell = this.detectShell();\n  }\n\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing native terminal adapter', { shell: this.shell });\n\n    // Verify shell is available\n    try {\n      const testConfig = this.getTestCommand();\n      const { spawnSync } = require('child_process');\n      const result = spawnSync(testConfig.cmd, testConfig.args, { stdio: 'ignore' });\n\n      if (result.status !== 0) {\n        throw new Error('Shell test failed');\n      }\n    } catch (error) {\n      this.logger.warn(`Shell ${this.shell} not available, falling back to sh`, { error });\n      this.shell = 'sh';\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down native terminal adapter');\n\n    // Kill all terminals\n    const terminals = Array.from(this.terminals.values());\n    await Promise.all(terminals.map((term) => term.kill()));\n\n    this.terminals.clear();\n  }\n\n  async createTerminal(): Promise<Terminal> {\n    const terminal = new NativeTerminal(this.shell, this.logger);\n\n    await terminal.initialize();\n    this.terminals.set(terminal.id, terminal);\n\n    return terminal;\n  }\n\n  async destroyTerminal(terminal: Terminal): Promise<void> {\n    await terminal.kill();\n    this.terminals.delete(terminal.id);\n  }\n\n  private detectShell(): string {\n    const osplatform = platform();\n\n    if (osplatform === 'win32') {\n      // Windows shell detection\n      const comspec = process.env.COMSPEC;\n      if (comspec?.toLowerCase().includes('powershell')) {\n        return 'powershell';\n      }\n\n      // Check if PowerShell is available\n      try {\n        const { spawnSync } = require('child_process');\n        const result = spawnSync('powershell', ['-Version'], { stdio: 'ignore' });\n        if (result.status === 0) {\n          return 'powershell';\n        }\n      } catch {\n        // PowerShell not available\n      }\n\n      return 'cmd';\n    } else {\n      // Unix-like shell detection\n      const shell = process.env.SHELL;\n      if (shell) {\n        const shellName = shell.split('/').pop();\n        if (shellName && this.isShellSupported(shellName)) {\n          return shellName;\n        }\n      }\n\n      // Try common shells in order of preference\n      const shells = ['bash', 'zsh', 'sh'];\n      for (const shell of shells) {\n        try {\n          const { spawnSync } = require('child_process');\n          const result = spawnSync('which', [shell], { stdio: 'ignore' });\n          if (result.status === 0) {\n            return shell;\n          }\n        } catch {\n          // Continue to next shell\n        }\n      }\n\n      // Default to sh\n      return 'sh';\n    }\n  }\n\n  private isShellSupported(shell: string): boolean {\n    return ['bash', 'zsh', 'sh', 'fish', 'dash', 'powershell', 'cmd'].includes(shell);\n  }\n\n  private getTestCommand(): { cmd: string; args: string[] } {\n    switch (this.shell) {\n      case 'powershell':\n        return { cmd: 'powershell', args: ['-Version'] };\n      case 'cmd':\n        return { cmd: 'cmd', args: ['/C', 'echo test'] };\n      default:\n        return { cmd: this.shell, args: ['--version'] };\n    }\n  }\n}\n"],"names":["process","spawn","platform","TerminalError","TerminalCommandError","generateId","delay","timeout","createDeferred","NativeTerminal","id","pid","encoder","TextEncoder","decoder","TextDecoder","shell","outputBuffer","errorBuffer","commandMarker","commandDeferred","outputListeners","Set","alive","stdoutData","stderrData","logger","initialize","shellConfig","getShellConfig","path","args","stdio","env","CLAUDE_FLOW_TERMINAL","CLAUDE_FLOW_TERMINAL_ID","setupOutputHandlers","monitorProcess","waitForReady","debug","error","executeCommand","command","isAlive","markedCommand","wrapCommand","write","output","promise","data","Promise","resolve","reject","stdin","read","undefined","kill","destroyed","end","killed","warn","addOutputListener","listener","add","removeOutputListener","delete","osplatform","PS1","stdout","on","text","toString","processOutput","stderr","notifyListeners","markerIndex","indexOf","substring","trim","fullOutput","length","forEach","code","signal","info","Error","testCommand","startTime","Date","now","includes","NativeAdapter","terminals","Map","detectShell","testConfig","getTestCommand","spawnSync","require","result","cmd","status","shutdown","Array","from","values","all","map","term","clear","createTerminal","terminal","set","destroyTerminal","comspec","COMSPEC","toLowerCase","SHELL","shellName","split","pop","isShellSupported","shells"],"mappings":"AAAA,YAAYA,aAAa,eAAe;AAKxC,SAASC,KAAK,QAAsB,gBAAgB;AACpD,SAASC,QAAQ,QAAQ,KAAK;AAG9B,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,wBAAwB;AAC5E,SAASC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,cAAc,QAAQ,yBAAyB;AAcpF,IAAA,AAAMC,iBAAN,MAAMA;;IACJC,GAAW;IACXC,IAAa;IACLX,QAAmC;IACnCY,UAAU,IAAIC,cAAc;IAC5BC,UAAU,IAAIC,cAAc;IAC5BC,MAAc;IACdC,eAAe,GAAG;IAClBC,cAAc,GAAG;IACjBC,cAAsB;IACtBC,gBAAwE;IACxEC,kBAAkB,IAAIC,MAA8B;IACpDC,QAAQ,KAAK;IACbC,aAAa,GAAG;IAChBC,aAAa,GAAG;IAExB,YACET,KAAa,EACb,AAAQU,MAAe,CACvB;aADQA,SAAAA;QAER,IAAI,CAAChB,EAAE,GAAGL,WAAW;QACrB,IAAI,CAACW,KAAK,GAAGA;QACb,IAAI,CAACG,aAAa,GAAG,CAAC,cAAc,EAAE,IAAI,CAACT,EAAE,CAAC,EAAE,CAAC;IACnD;IAEA,MAAMiB,aAA4B;QAChC,IAAI;YACF,MAAMC,cAAc,IAAI,CAACC,cAAc;YAGvC,IAAI,CAAC7B,OAAO,GAAGC,MAAM2B,YAAYE,IAAI,EAAEF,YAAYG,IAAI,EAAE;gBACvDC,OAAO;oBAAC;oBAAQ;oBAAQ;iBAAO;gBAC/BC,KAAK;oBACH,GAAGjC,QAAQiC,GAAG;oBACd,GAAGL,YAAYK,GAAG;oBAClBC,sBAAsB;oBACtBC,yBAAyB,IAAI,CAACzB,EAAE;gBAClC;YACF;YAGA,IAAI,CAACC,GAAG,GAAG,IAAI,CAACX,OAAO,CAACW,GAAG;YAG3B,IAAI,CAACyB,mBAAmB;YAGxB,IAAI,CAACC,cAAc;YAGnB,MAAM,IAAI,CAACC,YAAY;YAEvB,IAAI,CAACZ,MAAM,CAACa,KAAK,CAAC,+BAA+B;gBAC/C7B,IAAI,IAAI,CAACA,EAAE;gBACXC,KAAK,IAAI,CAACA,GAAG;gBACbK,OAAO,IAAI,CAACA,KAAK;YACnB;QACF,EAAE,OAAOwB,OAAO;YACd,IAAI,CAACjB,KAAK,GAAG;YACb,MAAM,IAAIpB,cAAc,oCAAoC;gBAAEqC;YAAM;QACtE;IACF;IAEA,MAAMC,eAAeC,OAAe,EAAmB;QACrD,IAAI,CAAC,IAAI,CAAC1C,OAAO,IAAI,CAAC,IAAI,CAAC2C,OAAO,IAAI;YACpC,MAAM,IAAIxC,cAAc;QAC1B;QAEA,IAAI;YAEF,IAAI,CAACiB,eAAe,GAAGZ;YAGvB,IAAI,CAACS,YAAY,GAAG;YAGpB,MAAM2B,gBAAgB,IAAI,CAACC,WAAW,CAACH;YACvC,MAAM,IAAI,CAACI,KAAK,CAACF,gBAAgB;YAGjC,MAAMG,SAAS,MAAMxC,QACnB,IAAI,CAACa,eAAe,CAAC4B,OAAO,EAC5B,OACA;YAGF,OAAOD;QACT,EAAE,OAAOP,OAAO;YACd,MAAM,IAAIpC,qBAAqB,6BAA6B;gBAAEsC;gBAASF;YAAM;QAC/E;IACF;IAEA,MAAMM,MAAMG,IAAY,EAAiB;QACvC,IAAI,CAAC,IAAI,CAACjD,OAAO,IAAI,CAAC,IAAI,CAAC2C,OAAO,IAAI;YACpC,MAAM,IAAIxC,cAAc;QAC1B;QAEA,OAAO,IAAI+C,QAAQ,CAACC,SAASC;YAC3B,IAAI,CAAC,IAAI,CAACpD,OAAO,EAAEqD,OAAO;gBACxBD,OAAO,IAAIjD,cAAc;gBACzB;YACF;YAEA,IAAI,CAACH,OAAO,CAACqD,KAAK,CAACP,KAAK,CAACG,MAAM,CAACT;gBAC9B,IAAIA,OAAO;oBACTY,OAAOZ;gBACT,OAAO;oBACLW;gBACF;YACF;QACF;IACF;IAEA,MAAMG,OAAwB;QAC5B,IAAI,CAAC,IAAI,CAACtD,OAAO,IAAI,CAAC,IAAI,CAAC2C,OAAO,IAAI;YACpC,MAAM,IAAIxC,cAAc;QAC1B;QAGA,MAAM4C,SAAS,IAAI,CAAC9B,YAAY;QAChC,IAAI,CAACA,YAAY,GAAG;QACpB,OAAO8B;IACT;IAEAJ,UAAmB;QACjB,OAAO,IAAI,CAACpB,KAAK,IAAI,IAAI,CAACvB,OAAO,KAAKuD;IACxC;IAEA,MAAMC,OAAsB;QAC1B,IAAI,CAAC,IAAI,CAACxD,OAAO,EAAE;QAEnB,IAAI;YACF,IAAI,CAACuB,KAAK,GAAG;YAGb,IAAI,IAAI,CAACvB,OAAO,CAACqD,KAAK,IAAI,CAAC,IAAI,CAACrD,OAAO,CAACqD,KAAK,CAACI,SAAS,EAAE;gBACvD,IAAI,CAACzD,OAAO,CAACqD,KAAK,CAACK,GAAG;YACxB;YAGA,IAAI;gBACF,MAAM,IAAI,CAACZ,KAAK,CAAC;gBACjB,MAAMxC,MAAM;YACd,EAAE,OAAM,CAER;YAGA,IAAI;gBACF,IAAI,CAACN,OAAO,CAACwD,IAAI,CAAC;gBAClB,MAAMlD,MAAM;gBAGZ,IAAI,CAAC,IAAI,CAACN,OAAO,CAAC2D,MAAM,EAAE;oBACxB,IAAI,CAAC3D,OAAO,CAACwD,IAAI,CAAC;gBACpB;YACF,EAAE,OAAM,CAER;QACF,EAAE,OAAOhB,OAAO;YACd,IAAI,CAACd,MAAM,CAACkC,IAAI,CAAC,iCAAiC;gBAAElD,IAAI,IAAI,CAACA,EAAE;gBAAE8B;YAAM;QACzE,SAAU;YACR,IAAI,CAACxC,OAAO,GAAGuD;QACjB;IACF;IAKAM,kBAAkBC,QAAgC,EAAQ;QACxD,IAAI,CAACzC,eAAe,CAAC0C,GAAG,CAACD;IAC3B;IAKAE,qBAAqBF,QAAgC,EAAQ;QAC3D,IAAI,CAACzC,eAAe,CAAC4C,MAAM,CAACH;IAC9B;IAEQjC,iBAA8B;QACpC,MAAMqC,aAAahE;QAEnB,OAAQ,IAAI,CAACc,KAAK;YAChB,KAAK;gBACH,OAAO;oBACLc,MAAMoC,eAAe,UAAU,0CAA0C;oBACzEnC,MAAM;wBAAC;wBAAU;qBAAc;oBAC/BE,KAAK;wBAAEkC,KAAK;oBAAK;gBACnB;YAEF,KAAK;gBACH,OAAO;oBACLrC,MAAM;oBACNC,MAAM;wBAAC;qBAAW;oBAClBE,KAAK;wBAAEkC,KAAK;oBAAK;gBACnB;YAEF,KAAK;gBACH,OAAO;oBACLrC,MAAMoC,eAAe,UAAU,mBAAmB;oBAClDnC,MAAM;wBAAC;wBAAc;wBAAmB;qBAAU;gBACpD;YAEF,KAAK;gBACH,OAAO;oBACLD,MAAM;oBACNC,MAAM;wBAAC;wBAAM;wBAAM;qBAAY;gBACjC;YAEF,KAAK;YACL;gBACE,OAAO;oBACLD,MAAM;oBACNC,MAAM,EAAE;oBACRE,KAAK;wBAAEkC,KAAK;oBAAK;gBACnB;QACJ;IACF;IAEQtB,YAAYH,OAAe,EAAU;QAC3C,MAAMwB,aAAahE;QAEnB,IAAI,IAAI,CAACc,KAAK,KAAK,cAAc;YAE/B,OAAO,GAAG0B,QAAQ,cAAc,EAAE,IAAI,CAACvB,aAAa,CAAC,CAAC,CAAC;QACzD,OAAO,IAAI,IAAI,CAACH,KAAK,KAAK,SAASkD,eAAe,SAAS;YAEzD,OAAO,GAAGxB,QAAQ,QAAQ,EAAE,IAAI,CAACvB,aAAa,EAAE;QAClD,OAAO;YAEL,OAAO,GAAGuB,QAAQ,UAAU,EAAE,IAAI,CAACvB,aAAa,CAAC,YAAY,EAAE,IAAI,CAACA,aAAa,CAAC,SAAS,CAAC;QAC9F;IACF;IAEQiB,sBAA4B;QAClC,IAAI,CAAC,IAAI,CAACpC,OAAO,EAAE;QAGnB,IAAI,CAACA,OAAO,CAACoE,MAAM,EAAEC,GAAG,QAAQ,CAACpB;YAC/B,MAAMqB,OAAOrB,KAAKsB,QAAQ;YAC1B,IAAI,CAACC,aAAa,CAACF;QACrB;QAGA,IAAI,CAACtE,OAAO,CAACyE,MAAM,EAAEJ,GAAG,QAAQ,CAACpB;YAC/B,MAAMqB,OAAOrB,KAAKsB,QAAQ;YAC1B,IAAI,CAACrD,WAAW,IAAIoD;YAGpB,IAAI,CAACI,eAAe,CAACJ;QACvB;QAGA,IAAI,CAACtE,OAAO,CAACqE,EAAE,CAAC,SAAS,CAAC7B;YACxB,IAAI,IAAI,CAACjB,KAAK,EAAE;gBACd,IAAI,CAACG,MAAM,CAACc,KAAK,CAAC,iBAAiB;oBAAE9B,IAAI,IAAI,CAACA,EAAE;oBAAE8B;gBAAM;YAC1D;QACF;IACF;IAEQgC,cAAcF,IAAY,EAAQ;QACxC,IAAI,CAACrD,YAAY,IAAIqD;QAGrB,IAAI,CAACI,eAAe,CAACJ;QAGrB,MAAMK,cAAc,IAAI,CAAC1D,YAAY,CAAC2D,OAAO,CAAC,IAAI,CAACzD,aAAa;QAChE,IAAIwD,gBAAgB,CAAC,KAAK,IAAI,CAACvD,eAAe,EAAE;YAE9C,MAAM2B,SAAS,IAAI,CAAC9B,YAAY,CAAC4D,SAAS,CAAC,GAAGF,aAAaG,IAAI;YAG/D,MAAMC,aAAa,IAAI,CAAC7D,WAAW,GAAG,GAAG6B,OAAO,EAAE,EAAE,IAAI,CAAC7B,WAAW,EAAE,GAAG6B;YACzE,IAAI,CAAC7B,WAAW,GAAG;YAGnB,IAAI,CAACD,YAAY,GAAG,IAAI,CAACA,YAAY,CAClC4D,SAAS,CAACF,cAAc,IAAI,CAACxD,aAAa,CAAC6D,MAAM,EACjDF,IAAI;YAGP,IAAI,CAAC1D,eAAe,CAAC+B,OAAO,CAAC4B;YAC7B,IAAI,CAAC3D,eAAe,GAAGmC;QACzB;IACF;IAEQmB,gBAAgBzB,IAAY,EAAQ;QAC1C,IAAI,CAAC5B,eAAe,CAAC4D,OAAO,CAAC,CAACnB;YAC5B,IAAI;gBACFA,SAASb;YACX,EAAE,OAAOT,OAAO;gBACd,IAAI,CAACd,MAAM,CAACc,KAAK,CAAC,4BAA4B;oBAAE9B,IAAI,IAAI,CAACA,EAAE;oBAAE8B;gBAAM;YACrE;QACF;IACF;IAEA,MAAcH,iBAAgC;QAC5C,IAAI,CAAC,IAAI,CAACrC,OAAO,EAAE;QAEnB,IAAI,CAACA,OAAO,CAACqE,EAAE,CAAC,QAAQ,CAACa,MAAMC;YAC7B,IAAI,CAACzD,MAAM,CAAC0D,IAAI,CAAC,2BAA2B;gBAC1C1E,IAAI,IAAI,CAACA,EAAE;gBACXwE;gBACAC;YACF;YACA,IAAI,CAAC5D,KAAK,GAAG;YAGb,IAAI,IAAI,CAACH,eAAe,EAAE;gBACxB,IAAI,CAACA,eAAe,CAACgC,MAAM,CAAC,IAAIiC,MAAM;YACxC;QACF;QAEA,IAAI,CAACrF,OAAO,CAACqE,EAAE,CAAC,SAAS,CAAC7B;YACxB,IAAI,CAACd,MAAM,CAACc,KAAK,CAAC,4BAA4B;gBAAE9B,IAAI,IAAI,CAACA,EAAE;gBAAE8B;YAAM;YACnE,IAAI,CAACjB,KAAK,GAAG;YAGb,IAAI,IAAI,CAACH,eAAe,EAAE;gBACxB,IAAI,CAACA,eAAe,CAACgC,MAAM,CAACZ;YAC9B;QACF;IACF;IAEA,MAAcF,eAA8B;QAE1C,MAAMgD,cAAc,IAAI,CAACtE,KAAK,KAAK,eAAe,uBAAuB;QAEzE,MAAM,IAAI,CAAC8B,KAAK,CAACwC,cAAc;QAE/B,MAAMC,YAAYC,KAAKC,GAAG;QAC1B,MAAOD,KAAKC,GAAG,KAAKF,YAAY,KAAM;YACpC,IAAI,IAAI,CAACtE,YAAY,CAACyE,QAAQ,CAAC,UAAU;gBACvC,IAAI,CAACzE,YAAY,GAAG;gBACpB;YACF;YACA,MAAMX,MAAM;QACd;QAEA,MAAM,IAAIH,cAAc;IAC1B;AACF;AAKA,OAAO,MAAMwF;;IACHC,YAAY,IAAIC,MAA8B;IAC9C7E,MAAc;IAEtB,YAAY,AAAQU,MAAe,CAAE;aAAjBA,SAAAA;QAElB,IAAI,CAACV,KAAK,GAAG,IAAI,CAAC8E,WAAW;IAC/B;IAEA,MAAMnE,aAA4B;QAChC,IAAI,CAACD,MAAM,CAAC0D,IAAI,CAAC,wCAAwC;YAAEpE,OAAO,IAAI,CAACA,KAAK;QAAC;QAG7E,IAAI;YACF,MAAM+E,aAAa,IAAI,CAACC,cAAc;YACtC,MAAM,EAAEC,SAAS,EAAE,GAAGC,QAAQ;YAC9B,MAAMC,SAASF,UAAUF,WAAWK,GAAG,EAAEL,WAAWhE,IAAI,EAAE;gBAAEC,OAAO;YAAS;YAE5E,IAAImE,OAAOE,MAAM,KAAK,GAAG;gBACvB,MAAM,IAAIhB,MAAM;YAClB;QACF,EAAE,OAAO7C,OAAO;YACd,IAAI,CAACd,MAAM,CAACkC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC5C,KAAK,CAAC,kCAAkC,CAAC,EAAE;gBAAEwB;YAAM;YAClF,IAAI,CAACxB,KAAK,GAAG;QACf;IACF;IAEA,MAAMsF,WAA0B;QAC9B,IAAI,CAAC5E,MAAM,CAAC0D,IAAI,CAAC;QAGjB,MAAMQ,YAAYW,MAAMC,IAAI,CAAC,IAAI,CAACZ,SAAS,CAACa,MAAM;QAClD,MAAMvD,QAAQwD,GAAG,CAACd,UAAUe,GAAG,CAAC,CAACC,OAASA,KAAKpD,IAAI;QAEnD,IAAI,CAACoC,SAAS,CAACiB,KAAK;IACtB;IAEA,MAAMC,iBAAoC;QACxC,MAAMC,WAAW,IAAItG,eAAe,IAAI,CAACO,KAAK,EAAE,IAAI,CAACU,MAAM;QAE3D,MAAMqF,SAASpF,UAAU;QACzB,IAAI,CAACiE,SAAS,CAACoB,GAAG,CAACD,SAASrG,EAAE,EAAEqG;QAEhC,OAAOA;IACT;IAEA,MAAME,gBAAgBF,QAAkB,EAAiB;QACvD,MAAMA,SAASvD,IAAI;QACnB,IAAI,CAACoC,SAAS,CAAC3B,MAAM,CAAC8C,SAASrG,EAAE;IACnC;IAEQoF,cAAsB;QAC5B,MAAM5B,aAAahE;QAEnB,IAAIgE,eAAe,SAAS;YAE1B,MAAMgD,UAAUlH,QAAQiC,GAAG,CAACkF,OAAO;YACnC,IAAID,SAASE,cAAc1B,SAAS,eAAe;gBACjD,OAAO;YACT;YAGA,IAAI;gBACF,MAAM,EAAEO,SAAS,EAAE,GAAGC,QAAQ;gBAC9B,MAAMC,SAASF,UAAU,cAAc;oBAAC;iBAAW,EAAE;oBAAEjE,OAAO;gBAAS;gBACvE,IAAImE,OAAOE,MAAM,KAAK,GAAG;oBACvB,OAAO;gBACT;YACF,EAAE,OAAM,CAER;YAEA,OAAO;QACT,OAAO;YAEL,MAAMrF,QAAQhB,QAAQiC,GAAG,CAACoF,KAAK;YAC/B,IAAIrG,OAAO;gBACT,MAAMsG,YAAYtG,MAAMuG,KAAK,CAAC,KAAKC,GAAG;gBACtC,IAAIF,aAAa,IAAI,CAACG,gBAAgB,CAACH,YAAY;oBACjD,OAAOA;gBACT;YACF;YAGA,MAAMI,SAAS;gBAAC;gBAAQ;gBAAO;aAAK;YACpC,KAAK,MAAM1G,SAAS0G,OAAQ;gBAC1B,IAAI;oBACF,MAAM,EAAEzB,SAAS,EAAE,GAAGC,QAAQ;oBAC9B,MAAMC,SAASF,UAAU,SAAS;wBAACjF;qBAAM,EAAE;wBAAEgB,OAAO;oBAAS;oBAC7D,IAAImE,OAAOE,MAAM,KAAK,GAAG;wBACvB,OAAOrF;oBACT;gBACF,EAAE,OAAM,CAER;YACF;YAGA,OAAO;QACT;IACF;IAEQyG,iBAAiBzG,KAAa,EAAW;QAC/C,OAAO;YAAC;YAAQ;YAAO;YAAM;YAAQ;YAAQ;YAAc;SAAM,CAAC0E,QAAQ,CAAC1E;IAC7E;IAEQgF,iBAAkD;QACxD,OAAQ,IAAI,CAAChF,KAAK;YAChB,KAAK;gBACH,OAAO;oBAAEoF,KAAK;oBAAcrE,MAAM;wBAAC;qBAAW;gBAAC;YACjD,KAAK;gBACH,OAAO;oBAAEqE,KAAK;oBAAOrE,MAAM;wBAAC;wBAAM;qBAAY;gBAAC;YACjD;gBACE,OAAO;oBAAEqE,KAAK,IAAI,CAACpF,KAAK;oBAAEe,MAAM;wBAAC;qBAAY;gBAAC;QAClD;IACF;AACF"}