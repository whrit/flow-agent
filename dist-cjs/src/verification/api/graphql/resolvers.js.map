{"version":3,"sources":["../../../../../src/verification/api/graphql/resolvers.js"],"sourcesContent":["/**\n * GraphQL Resolvers for Verification API\n * Implements the GraphQL schema with data fetching logic\n */\n\nconst { GraphQLScalarType, GraphQLError } = require('graphql');\nconst { Kind } = require('graphql/language');\nconst { nanoid } = require('nanoid');\n\n// Mock data store (replace with actual database in production)\nlet dataStore = {\n  verifications: new Map(),\n  batches: new Map(),\n  events: [],\n  rules: new Map(),\n  agentConfigs: new Map(),\n  metrics: {\n    startTime: Date.now(),\n    totalVerifications: 0,\n    successfulVerifications: 0,\n    failedVerifications: 0,\n    pendingVerifications: 0,\n  },\n};\n\n// Custom scalar types\nconst DateTimeScalar = new GraphQLScalarType({\n  name: 'DateTime',\n  description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z',\n  serialize(value) {\n    return new Date(value).toISOString();\n  },\n  parseValue(value) {\n    return new Date(value).getTime();\n  },\n  parseLiteral(ast) {\n    if (ast.kind === Kind.STRING) {\n      return new Date(ast.value).getTime();\n    }\n    return null;\n  },\n});\n\nconst JSONScalar = new GraphQLScalarType({\n  name: 'JSON',\n  description: 'JSON scalar type',\n  serialize(value) {\n    return value;\n  },\n  parseValue(value) {\n    return value;\n  },\n  parseLiteral(ast) {\n    switch (ast.kind) {\n      case Kind.STRING:\n      case Kind.BOOLEAN:\n        return ast.value;\n      case Kind.INT:\n      case Kind.FLOAT:\n        return parseFloat(ast.value);\n      case Kind.OBJECT:\n        return parseObject(ast);\n      case Kind.LIST:\n        return ast.values.map(value => parseValue(value));\n      default:\n        return null;\n    }\n  },\n});\n\nfunction parseObject(ast) {\n  const value = Object.create(null);\n  ast.fields.forEach(field => {\n    value[field.name.value] = parseValue(field.value);\n  });\n  return value;\n}\n\nfunction parseValue(ast) {\n  switch (ast.kind) {\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n      return ast.value;\n    case Kind.INT:\n    case Kind.FLOAT:\n      return parseFloat(ast.value);\n    case Kind.OBJECT:\n      return parseObject(ast);\n    case Kind.LIST:\n      return ast.values.map(value => parseValue(value));\n    default:\n      return null;\n  }\n}\n\n// Main resolvers\nconst resolvers = {\n  DateTime: DateTimeScalar,\n  JSON: JSONScalar,\n  \n  Query: {\n    verification: async (parent, args, context) => {\n      const verification = dataStore.verifications.get(args.id);\n      if (!verification) {\n        throw new GraphQLError(`Verification ${args.id} not found`, {\n          extensions: { code: 'VERIFICATION_NOT_FOUND' },\n        });\n      }\n      return verification;\n    },\n    \n    verifications: async (parent, args, context) => {\n      const { filter = {}, pagination = {}, sort = [] } = args;\n      \n      let verifications = Array.from(dataStore.verifications.values());\n      \n      // Apply filters\n      verifications = applyVerificationFilters(verifications, filter);\n      \n      // Apply sorting\n      verifications = applySorting(verifications, sort);\n      \n      // Apply pagination\n      const { edges, pageInfo, totalCount } = applyPagination(verifications, pagination);\n      \n      return {\n        edges: edges.map(item => ({\n          node: item,\n          cursor: Buffer.from(item.id).toString('base64'),\n        })),\n        pageInfo,\n        totalCount,\n      };\n    },\n    \n    batch: async (parent, args, context) => {\n      const batch = dataStore.batches.get(args.id);\n      if (!batch) {\n        throw new GraphQLError(`Batch ${args.id} not found`, {\n          extensions: { code: 'BATCH_NOT_FOUND' },\n        });\n      }\n      return batch;\n    },\n    \n    batches: async (parent, args, context) => {\n      const { filter = {}, pagination = {} } = args;\n      \n      let batches = Array.from(dataStore.batches.values());\n      \n      // Apply filters\n      batches = applyBatchFilters(batches, filter);\n      \n      // Apply pagination\n      const { edges, pageInfo, totalCount } = applyPagination(batches, pagination);\n      \n      return {\n        edges: edges.map(item => ({\n          node: item,\n          cursor: Buffer.from(item.id).toString('base64'),\n        })),\n        pageInfo,\n        totalCount,\n      };\n    },\n    \n    verificationMetrics: async (parent, args, context) => {\n      const { timeframe = 'TWENTY_FOUR_HOURS', groupBy = [] } = args;\n      return calculateVerificationMetrics(timeframe, groupBy);\n    },\n    \n    truthEvents: async (parent, args, context) => {\n      const { filter = {}, pagination = {} } = args;\n      \n      let events = [...dataStore.events];\n      \n      // Apply filters\n      events = applyTruthEventFilters(events, filter);\n      \n      // Sort by timestamp (newest first)\n      events.sort((a, b) => b.timestamp - a.timestamp);\n      \n      // Apply pagination\n      const { edges, pageInfo, totalCount } = applyPagination(events, pagination);\n      \n      return {\n        edges: edges.map(item => ({\n          node: item,\n          cursor: Buffer.from(item.id).toString('base64'),\n        })),\n        pageInfo,\n        totalCount,\n      };\n    },\n    \n    systemHealth: async (parent, args, context) => {\n      return calculateSystemHealth();\n    },\n    \n    systemMetrics: async (parent, args, context) => {\n      return calculateSystemMetrics();\n    },\n    \n    verificationRules: async (parent, args, context) => {\n      return Array.from(dataStore.rules.values());\n    },\n    \n    agentConfigs: async (parent, args, context) => {\n      return Array.from(dataStore.agentConfigs.values());\n    },\n  },\n  \n  Mutation: {\n    createVerification: async (parent, args, context) => {\n      try {\n        const verification = createVerification(args.input);\n        \n        // Start async verification process\n        processVerification(verification.id);\n        \n        return {\n          success: true,\n          verification,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    createBatchVerification: async (parent, args, context) => {\n      try {\n        const batch = createVerificationBatch(args.input);\n        \n        // Start async batch processing\n        processBatch(batch.id);\n        \n        return {\n          success: true,\n          batch,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    updateVerification: async (parent, args, context) => {\n      try {\n        const verification = dataStore.verifications.get(args.id);\n        if (!verification) {\n          throw new Error(`Verification ${args.id} not found`);\n        }\n        \n        Object.assign(verification, args.input, {\n          updatedAt: Date.now(),\n        });\n        \n        return {\n          success: true,\n          verification,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    cancelVerification: async (parent, args, context) => {\n      try {\n        const verification = dataStore.verifications.get(args.id);\n        if (!verification) {\n          throw new Error(`Verification ${args.id} not found`);\n        }\n        \n        if (verification.status !== 'PENDING') {\n          throw new Error('Can only cancel pending verifications');\n        }\n        \n        verification.status = 'CANCELLED';\n        verification.updatedAt = Date.now();\n        verification.completedAt = Date.now();\n        \n        return {\n          success: true,\n          verification,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    createVerificationRule: async (parent, args, context) => {\n      try {\n        const rule = {\n          id: nanoid(),\n          ...args.input,\n          createdAt: Date.now(),\n          updatedAt: Date.now(),\n          executionCount: 0,\n          successCount: 0,\n        };\n        \n        dataStore.rules.set(rule.id, rule);\n        \n        return {\n          success: true,\n          rule,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    updateVerificationRule: async (parent, args, context) => {\n      try {\n        const rule = dataStore.rules.get(args.id);\n        if (!rule) {\n          throw new Error(`Rule ${args.id} not found`);\n        }\n        \n        Object.assign(rule, args.input, {\n          updatedAt: Date.now(),\n        });\n        \n        return {\n          success: true,\n          rule,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    deleteVerificationRule: async (parent, args, context) => {\n      try {\n        const exists = dataStore.rules.has(args.id);\n        if (!exists) {\n          throw new Error(`Rule ${args.id} not found`);\n        }\n        \n        dataStore.rules.delete(args.id);\n        \n        return {\n          success: true,\n          deletedId: args.id,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n    \n    updateAgentConfig: async (parent, args, context) => {\n      try {\n        let config = dataStore.agentConfigs.get(args.agentId);\n        \n        if (!config) {\n          config = {\n            agentId: args.agentId,\n            verificationEnabled: true,\n            confidenceThreshold: 0.8,\n            autoVerify: false,\n            rateLimit: {\n              requestsPerMinute: 60,\n              burstCapacity: 100,\n              currentUsage: 0,\n              resetTime: Date.now() + 60000,\n            },\n            totalRequests: 0,\n            successfulRequests: 0,\n          };\n        }\n        \n        Object.assign(config, args.input);\n        dataStore.agentConfigs.set(args.agentId, config);\n        \n        return {\n          success: true,\n          config,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.message,\n        };\n      }\n    },\n  },\n  \n  Subscription: {\n    verificationUpdates: {\n      subscribe: async function* (parent, args, context) {\n        // This is a simplified implementation\n        // In production, you'd use a proper pub/sub system\n        const filter = args.filter || {};\n        \n        while (true) {\n          // Yield verification updates that match the filter\n          const verifications = Array.from(dataStore.verifications.values())\n            .filter(v => matchesSubscriptionFilter(v, filter))\n            .filter(v => v.updatedAt > (Date.now() - 5000)); // Last 5 seconds\n          \n          for (const verification of verifications) {\n            yield { verificationUpdates: verification };\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      },\n    },\n    \n    truthMonitoring: {\n      subscribe: async function* (parent, args, context) {\n        const filter = args.filter || {};\n        \n        while (true) {\n          // Yield truth monitoring events that match the filter\n          const recentEvents = dataStore.events\n            .filter(e => e.timestamp > (Date.now() - 5000)) // Last 5 seconds\n            .filter(e => matchesTruthMonitoringFilter(e, filter));\n          \n          for (const event of recentEvents) {\n            yield { truthMonitoring: event };\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      },\n    },\n    \n    systemAlerts: {\n      subscribe: async function* (parent, args, context) {\n        const severityFilter = args.severity || ['HIGH', 'CRITICAL'];\n        \n        while (true) {\n          // Generate mock system alerts\n          if (Math.random() < 0.1) { // 10% chance per iteration\n            const alert = {\n              id: nanoid(),\n              type: 'SYSTEM',\n              severity: severityFilter[Math.floor(Math.random() * severityFilter.length)],\n              message: 'System alert generated',\n              timestamp: Date.now(),\n              data: { source: 'monitoring' },\n              acknowledged: false,\n            };\n            \n            yield { systemAlerts: alert };\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, 5000));\n        }\n      },\n    },\n    \n    metricsUpdates: {\n      subscribe: async function* (parent, args, context) {\n        const interval = (args.interval || 30) * 1000;\n        \n        while (true) {\n          const metrics = calculateVerificationMetrics('TWENTY_FOUR_HOURS', []);\n          yield { metricsUpdates: metrics };\n          \n          await new Promise(resolve => setTimeout(resolve, interval));\n        }\n      },\n    },\n  },\n  \n  // Nested resolvers\n  Verification: {\n    batch: (parent) => {\n      return parent.batchId ? dataStore.batches.get(parent.batchId) : null;\n    },\n    \n    events: (parent) => {\n      return dataStore.events.filter(e => e.verificationId === parent.id);\n    },\n    \n    appliedRules: (parent) => {\n      return parent.appliedRuleIds ? \n        parent.appliedRuleIds.map(id => dataStore.rules.get(id)).filter(Boolean) : \n        [];\n    },\n  },\n  \n  VerificationBatch: {\n    progress: (parent) => {\n      return parent.totalItems > 0 ? parent.completedItems / parent.totalItems : 0;\n    },\n    \n    successRate: (parent) => {\n      if (!parent.results || parent.results.length === 0) return null;\n      const successful = parent.results.filter(r => r.status === 'VERIFIED').length;\n      return successful / parent.results.length;\n    },\n    \n    averageConfidence: (parent) => {\n      if (!parent.results || parent.results.length === 0) return null;\n      const sum = parent.results.reduce((acc, r) => acc + r.confidence, 0);\n      return sum / parent.results.length;\n    },\n  },\n  \n  TruthMonitoringEvent: {\n    verification: (parent) => {\n      return parent.verificationId ? dataStore.verifications.get(parent.verificationId) : null;\n    },\n  },\n};\n\n// Helper functions\n\nfunction createVerification(input) {\n  const id = nanoid();\n  const verification = {\n    id,\n    timestamp: Date.now(),\n    status: 'PENDING',\n    confidence: 0,\n    source: input.source,\n    target: input.target,\n    metadata: input.metadata || {},\n    priority: input.priority || 'NORMAL',\n    timeout: input.timeout || 30000,\n    createdAt: Date.now(),\n  };\n  \n  dataStore.verifications.set(id, verification);\n  dataStore.metrics.totalVerifications++;\n  dataStore.metrics.pendingVerifications++;\n  \n  // Log event\n  logEvent({\n    type: 'VERIFICATION_COMPLETE',\n    verificationId: id,\n    data: { created: true },\n    source: input.source,\n    confidence: 1.0,\n  });\n  \n  return verification;\n}\n\nfunction createVerificationBatch(input) {\n  const id = nanoid();\n  const batch = {\n    id,\n    status: 'PENDING',\n    createdAt: Date.now(),\n    totalItems: input.items.length,\n    completedItems: 0,\n    items: input.items.map(item => createVerification(item)),\n    results: [],\n  };\n  \n  // Set batch reference on items\n  batch.items.forEach(item => {\n    item.batchId = id;\n  });\n  \n  dataStore.batches.set(id, batch);\n  \n  return batch;\n}\n\nasync function processVerification(id) {\n  const verification = dataStore.verifications.get(id);\n  if (!verification) return;\n  \n  try {\n    // Simulate verification process\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 1000));\n    \n    // Random result for demo\n    const success = Math.random() > 0.2;\n    const confidence = success ? Math.random() * 0.4 + 0.6 : Math.random() * 0.4;\n    \n    verification.status = success ? 'VERIFIED' : 'FAILED';\n    verification.confidence = confidence;\n    verification.completedAt = Date.now();\n    verification.updatedAt = Date.now();\n    \n    dataStore.metrics.pendingVerifications--;\n    if (success) {\n      dataStore.metrics.successfulVerifications++;\n    } else {\n      dataStore.metrics.failedVerifications++;\n    }\n    \n    // Log completion event\n    logEvent({\n      type: 'VERIFICATION_COMPLETE',\n      verificationId: id,\n      data: { status: verification.status, confidence },\n      source: verification.source,\n      confidence,\n    });\n    \n  } catch (error) {\n    verification.status = 'FAILED';\n    verification.error = error.message;\n    verification.completedAt = Date.now();\n    verification.updatedAt = Date.now();\n    \n    dataStore.metrics.pendingVerifications--;\n    dataStore.metrics.failedVerifications++;\n    \n    logEvent({\n      type: 'ERROR',\n      verificationId: id,\n      data: { error: error.message },\n      source: verification.source,\n      confidence: 0,\n    });\n  }\n}\n\nasync function processBatch(batchId) {\n  const batch = dataStore.batches.get(batchId);\n  if (!batch) return;\n  \n  batch.status = 'PROCESSING';\n  \n  try {\n    for (const item of batch.items) {\n      await processVerification(item.id);\n      batch.completedItems++;\n      batch.results.push(dataStore.verifications.get(item.id));\n    }\n    \n    batch.status = 'COMPLETED';\n    batch.completedAt = Date.now();\n    \n  } catch (error) {\n    batch.status = 'FAILED';\n    batch.error = error.message;\n    batch.completedAt = Date.now();\n  }\n}\n\nfunction applyVerificationFilters(verifications, filter) {\n  return verifications.filter(v => {\n    if (filter.ids && !filter.ids.includes(v.id)) return false;\n    if (filter.sources && !filter.sources.includes(v.source)) return false;\n    if (filter.targets && !filter.targets.includes(v.target)) return false;\n    if (filter.statuses && !filter.statuses.includes(v.status)) return false;\n    if (filter.priorities && !filter.priorities.includes(v.priority)) return false;\n    if (filter.batchId && v.batchId !== filter.batchId) return false;\n    if (filter.hasError !== undefined && (!!v.error) !== filter.hasError) return false;\n    \n    if (filter.confidenceRange) {\n      if (filter.confidenceRange.min !== undefined && v.confidence < filter.confidenceRange.min) return false;\n      if (filter.confidenceRange.max !== undefined && v.confidence > filter.confidenceRange.max) return false;\n    }\n    \n    if (filter.timestampRange) {\n      if (filter.timestampRange.start && v.timestamp < filter.timestampRange.start) return false;\n      if (filter.timestampRange.end && v.timestamp > filter.timestampRange.end) return false;\n    }\n    \n    return true;\n  });\n}\n\nfunction applyBatchFilters(batches, filter) {\n  return batches.filter(b => {\n    if (filter.ids && !filter.ids.includes(b.id)) return false;\n    if (filter.statuses && !filter.statuses.includes(b.status)) return false;\n    \n    if (filter.itemCountRange) {\n      if (filter.itemCountRange.min !== undefined && b.totalItems < filter.itemCountRange.min) return false;\n      if (filter.itemCountRange.max !== undefined && b.totalItems > filter.itemCountRange.max) return false;\n    }\n    \n    if (filter.timestampRange) {\n      if (filter.timestampRange.start && b.createdAt < filter.timestampRange.start) return false;\n      if (filter.timestampRange.end && b.createdAt > filter.timestampRange.end) return false;\n    }\n    \n    return true;\n  });\n}\n\nfunction applyTruthEventFilters(events, filter) {\n  return events.filter(e => {\n    if (filter.types && !filter.types.includes(e.type)) return false;\n    if (filter.severities && !filter.severities.includes(e.severity)) return false;\n    if (filter.sources && !filter.sources.includes(e.source)) return false;\n    if (filter.verificationId && e.verificationId !== filter.verificationId) return false;\n    \n    if (filter.confidenceRange) {\n      if (filter.confidenceRange.min !== undefined && e.confidence < filter.confidenceRange.min) return false;\n      if (filter.confidenceRange.max !== undefined && e.confidence > filter.confidenceRange.max) return false;\n    }\n    \n    if (filter.timestampRange) {\n      if (filter.timestampRange.start && e.timestamp < filter.timestampRange.start) return false;\n      if (filter.timestampRange.end && e.timestamp > filter.timestampRange.end) return false;\n    }\n    \n    return true;\n  });\n}\n\nfunction applySorting(items, sortInputs) {\n  if (!sortInputs || sortInputs.length === 0) {\n    return items.sort((a, b) => b.timestamp - a.timestamp); // Default: newest first\n  }\n  \n  return items.sort((a, b) => {\n    for (const sort of sortInputs) {\n      const { field, direction } = sort;\n      let aValue = a[field.toLowerCase()];\n      let bValue = b[field.toLowerCase()];\n      \n      if (aValue < bValue) return direction === 'ASC' ? -1 : 1;\n      if (aValue > bValue) return direction === 'ASC' ? 1 : -1;\n    }\n    return 0;\n  });\n}\n\nfunction applyPagination(items, pagination) {\n  const { first, after, last, before } = pagination;\n  \n  let startIndex = 0;\n  let endIndex = items.length;\n  \n  if (after) {\n    const afterId = Buffer.from(after, 'base64').toString();\n    const afterIndex = items.findIndex(item => item.id === afterId);\n    if (afterIndex !== -1) startIndex = afterIndex + 1;\n  }\n  \n  if (before) {\n    const beforeId = Buffer.from(before, 'base64').toString();\n    const beforeIndex = items.findIndex(item => item.id === beforeId);\n    if (beforeIndex !== -1) endIndex = beforeIndex;\n  }\n  \n  if (first) {\n    endIndex = Math.min(startIndex + first, endIndex);\n  }\n  \n  if (last) {\n    startIndex = Math.max(endIndex - last, startIndex);\n  }\n  \n  const edges = items.slice(startIndex, endIndex);\n  \n  return {\n    edges,\n    pageInfo: {\n      hasNextPage: endIndex < items.length,\n      hasPreviousPage: startIndex > 0,\n      startCursor: edges.length > 0 ? Buffer.from(edges[0].id).toString('base64') : null,\n      endCursor: edges.length > 0 ? Buffer.from(edges[edges.length - 1].id).toString('base64') : null,\n    },\n    totalCount: items.length,\n  };\n}\n\nfunction calculateVerificationMetrics(timeframe, groupBy) {\n  const now = Date.now();\n  const timeframePeriods = {\n    ONE_HOUR: 60 * 60 * 1000,\n    TWENTY_FOUR_HOURS: 24 * 60 * 60 * 1000,\n    SEVEN_DAYS: 7 * 24 * 60 * 60 * 1000,\n    THIRTY_DAYS: 30 * 24 * 60 * 60 * 1000,\n  };\n  \n  const period = timeframePeriods[timeframe] || timeframePeriods.TWENTY_FOUR_HOURS;\n  const cutoff = now - period;\n  \n  const verifications = Array.from(dataStore.verifications.values())\n    .filter(v => v.timestamp >= cutoff);\n  \n  const total = verifications.length;\n  const successful = verifications.filter(v => v.status === 'VERIFIED').length;\n  const failed = verifications.filter(v => v.status === 'FAILED').length;\n  const pending = verifications.filter(v => v.status === 'PENDING').length;\n  \n  const avgConfidence = verifications.length > 0 ?\n    verifications.reduce((sum, v) => sum + v.confidence, 0) / verifications.length : 0;\n  \n  return {\n    timeframe,\n    totalVerifications: total,\n    successfulVerifications: successful,\n    failedVerifications: failed,\n    pendingVerifications: pending,\n    successRate: total > 0 ? (successful / total) * 100 : 0,\n    verificationRate: total / (period / 1000 / 3600), // per hour\n    averageConfidence: avgConfidence,\n    responseTime: {\n      avg: 1250,\n      p50: 1100,\n      p95: 2800,\n      p99: 4200,\n      min: 250,\n      max: 8500,\n    },\n    trends: calculateTrends(verifications),\n    distribution: calculateDistribution(verifications),\n    timeSeries: generateTimeSeries(verifications, timeframe),\n  };\n}\n\nfunction calculateTrends(verifications) {\n  // Simplified trend calculation\n  return [\n    {\n      metric: 'success_rate',\n      direction: 'UP',\n      change: 5.2,\n      significance: 0.85,\n    },\n    {\n      metric: 'confidence',\n      direction: 'STABLE',\n      change: 0.8,\n      significance: 0.12,\n    },\n  ];\n}\n\nfunction calculateDistribution(verifications) {\n  const statusCounts = {};\n  const sourceCounts = {};\n  const priorityCounts = {};\n  \n  verifications.forEach(v => {\n    statusCounts[v.status] = (statusCounts[v.status] || 0) + 1;\n    sourceCounts[v.source] = (sourceCounts[v.source] || 0) + 1;\n    priorityCounts[v.priority] = (priorityCounts[v.priority] || 0) + 1;\n  });\n  \n  const total = verifications.length;\n  \n  return {\n    byStatus: Object.entries(statusCounts).map(([status, count]) => ({\n      status,\n      count,\n      percentage: (count / total) * 100,\n    })),\n    bySource: Object.entries(sourceCounts).map(([source, count]) => {\n      const sourceVerifications = verifications.filter(v => v.source === source);\n      const avgConfidence = sourceVerifications.reduce((sum, v) => sum + v.confidence, 0) / sourceVerifications.length;\n      return {\n        source,\n        count,\n        percentage: (count / total) * 100,\n        averageConfidence: avgConfidence,\n      };\n    }),\n    byPriority: Object.entries(priorityCounts).map(([priority, count]) => ({\n      priority,\n      count,\n      percentage: (count / total) * 100,\n      averageResponseTime: 1200 + Math.random() * 1000, // Mock data\n    })),\n    byConfidence: [\n      { range: '0.0-0.2', count: Math.floor(total * 0.05), percentage: 5 },\n      { range: '0.2-0.4', count: Math.floor(total * 0.1), percentage: 10 },\n      { range: '0.4-0.6', count: Math.floor(total * 0.15), percentage: 15 },\n      { range: '0.6-0.8', count: Math.floor(total * 0.35), percentage: 35 },\n      { range: '0.8-1.0', count: Math.floor(total * 0.35), percentage: 35 },\n    ],\n  };\n}\n\nfunction generateTimeSeries(verifications, timeframe) {\n  // Generate mock time series data\n  const points = [];\n  const now = Date.now();\n  const intervals = {\n    ONE_HOUR: 12, // 5-minute intervals\n    TWENTY_FOUR_HOURS: 24, // 1-hour intervals\n    SEVEN_DAYS: 7, // 1-day intervals\n    THIRTY_DAYS: 30, // 1-day intervals\n  };\n  \n  const intervalCount = intervals[timeframe] || 24;\n  const intervalSize = {\n    ONE_HOUR: 5 * 60 * 1000,\n    TWENTY_FOUR_HOURS: 60 * 60 * 1000,\n    SEVEN_DAYS: 24 * 60 * 60 * 1000,\n    THIRTY_DAYS: 24 * 60 * 60 * 1000,\n  }[timeframe] || 60 * 60 * 1000;\n  \n  for (let i = 0; i < intervalCount; i++) {\n    const timestamp = now - (intervalCount - i - 1) * intervalSize;\n    points.push({\n      timestamp,\n      value: Math.random() * 100 + 50,\n      metric: 'verification_count',\n    });\n  }\n  \n  return points;\n}\n\nfunction calculateSystemHealth() {\n  const now = Date.now();\n  \n  return {\n    status: 'HEALTHY',\n    timestamp: now,\n    services: {\n      api: { status: 'UP', responseTime: 45, lastCheck: now, errorCount: 0, uptime: 99.9 },\n      websocket: { status: 'UP', responseTime: 12, lastCheck: now, errorCount: 0, uptime: 99.8 },\n      graphql: { status: 'UP', responseTime: 78, lastCheck: now, errorCount: 0, uptime: 99.9 },\n      database: { status: 'UP', responseTime: 125, lastCheck: now, errorCount: 0, uptime: 99.7 },\n      cache: { status: 'UP', responseTime: 8, lastCheck: now, errorCount: 0, uptime: 99.9 },\n    },\n    metrics: {\n      memoryUsage: 67.5,\n      cpuUsage: 23.8,\n      activeConnections: 142,\n      diskUsage: 45.2,\n      networkIO: {\n        bytesIn: 1024 * 1024 * 15.7,\n        bytesOut: 1024 * 1024 * 28.3,\n        packetsIn: 12450,\n        packetsOut: 9876,\n      },\n    },\n    uptime: now - dataStore.metrics.startTime,\n    responseTime: 89.5,\n    errorRate: 0.15,\n  };\n}\n\nfunction calculateSystemMetrics() {\n  return {\n    timestamp: Date.now(),\n    performance: {\n      requestsPerSecond: 125.7,\n      averageResponseTime: 89.3,\n      throughput: 1024 * 1024 * 2.5, // 2.5 MB/s\n      errorRate: 0.12,\n    },\n    resources: {\n      memoryUsage: 68.2,\n      cpuUsage: 24.1,\n      activeConnections: 145,\n      diskUsage: 45.8,\n      networkIO: {\n        bytesIn: 1024 * 1024 * 16.2,\n        bytesOut: 1024 * 1024 * 29.1,\n        packetsIn: 12890,\n        packetsOut: 10234,\n      },\n    },\n    connections: {\n      activeWebSockets: 67,\n      totalConnections: 145,\n      connectionRate: 12.3,\n      subscriptionCount: 89,\n    },\n  };\n}\n\nfunction matchesSubscriptionFilter(verification, filter) {\n  if (filter.sources && !filter.sources.includes(verification.source)) return false;\n  if (filter.targets && !filter.targets.includes(verification.target)) return false;\n  if (filter.statuses && !filter.statuses.includes(verification.status)) return false;\n  if (filter.priorities && !filter.priorities.includes(verification.priority)) return false;\n  if (filter.confidenceThreshold && verification.confidence < filter.confidenceThreshold) return false;\n  return true;\n}\n\nfunction matchesTruthMonitoringFilter(event, filter) {\n  if (filter.eventTypes && !filter.eventTypes.includes(event.type)) return false;\n  if (filter.severityLevels && !filter.severityLevels.includes(event.severity)) return false;\n  if (filter.sources && !filter.sources.includes(event.source)) return false;\n  if (filter.targets && !filter.targets.includes(event.target)) return false;\n  if (filter.confidenceMin !== undefined && event.confidence < filter.confidenceMin) return false;\n  if (filter.confidenceMax !== undefined && event.confidence > filter.confidenceMax) return false;\n  return true;\n}\n\nfunction logEvent(eventData) {\n  const event = {\n    id: nanoid(),\n    timestamp: Date.now(),\n    severity: 'MEDIUM',\n    ...eventData,\n  };\n  \n  dataStore.events.push(event);\n  \n  // Keep only last 1000 events\n  if (dataStore.events.length > 1000) {\n    dataStore.events = dataStore.events.slice(-1000);\n  }\n}\n\nmodule.exports = resolvers;\n"],"names":["GraphQLScalarType","GraphQLError","require","Kind","nanoid","dataStore","verifications","Map","batches","events","rules","agentConfigs","metrics","startTime","Date","now","totalVerifications","successfulVerifications","failedVerifications","pendingVerifications","DateTimeScalar","name","description","serialize","value","toISOString","parseValue","getTime","parseLiteral","ast","kind","STRING","JSONScalar","BOOLEAN","INT","FLOAT","parseFloat","OBJECT","parseObject","LIST","values","map","Object","create","fields","forEach","field","resolvers","DateTime","JSON","Query","verification","parent","args","context","get","id","extensions","code","filter","pagination","sort","Array","from","applyVerificationFilters","applySorting","edges","pageInfo","totalCount","applyPagination","item","node","cursor","Buffer","toString","batch","applyBatchFilters","verificationMetrics","timeframe","groupBy","calculateVerificationMetrics","truthEvents","applyTruthEventFilters","a","b","timestamp","systemHealth","calculateSystemHealth","systemMetrics","calculateSystemMetrics","verificationRules","Mutation","createVerification","input","processVerification","success","error","message","createBatchVerification","createVerificationBatch","processBatch","updateVerification","Error","assign","updatedAt","cancelVerification","status","completedAt","createVerificationRule","rule","createdAt","executionCount","successCount","set","updateVerificationRule","deleteVerificationRule","exists","has","delete","deletedId","updateAgentConfig","config","agentId","verificationEnabled","confidenceThreshold","autoVerify","rateLimit","requestsPerMinute","burstCapacity","currentUsage","resetTime","totalRequests","successfulRequests","Subscription","verificationUpdates","subscribe","v","matchesSubscriptionFilter","Promise","resolve","setTimeout","truthMonitoring","recentEvents","e","matchesTruthMonitoringFilter","event","systemAlerts","severityFilter","severity","Math","random","alert","type","floor","length","data","source","acknowledged","metricsUpdates","interval","Verification","batchId","verificationId","appliedRules","appliedRuleIds","Boolean","VerificationBatch","progress","totalItems","completedItems","successRate","results","successful","r","averageConfidence","sum","reduce","acc","confidence","TruthMonitoringEvent","target","metadata","priority","timeout","logEvent","created","items","push","ids","includes","sources","targets","statuses","priorities","hasError","undefined","confidenceRange","min","max","timestampRange","start","end","itemCountRange","types","severities","sortInputs","direction","aValue","toLowerCase","bValue","first","after","last","before","startIndex","endIndex","afterId","afterIndex","findIndex","beforeId","beforeIndex","slice","hasNextPage","hasPreviousPage","startCursor","endCursor","timeframePeriods","ONE_HOUR","TWENTY_FOUR_HOURS","SEVEN_DAYS","THIRTY_DAYS","period","cutoff","total","failed","pending","avgConfidence","verificationRate","responseTime","avg","p50","p95","p99","trends","calculateTrends","distribution","calculateDistribution","timeSeries","generateTimeSeries","metric","change","significance","statusCounts","sourceCounts","priorityCounts","byStatus","entries","count","percentage","bySource","sourceVerifications","byPriority","averageResponseTime","byConfidence","range","points","intervals","intervalCount","intervalSize","i","services","api","lastCheck","errorCount","uptime","websocket","graphql","database","cache","memoryUsage","cpuUsage","activeConnections","diskUsage","networkIO","bytesIn","bytesOut","packetsIn","packetsOut","errorRate","performance","requestsPerSecond","throughput","resources","connections","activeWebSockets","totalConnections","connectionRate","subscriptionCount","eventTypes","severityLevels","confidenceMin","confidenceMax","eventData","module","exports"],"mappings":"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"}