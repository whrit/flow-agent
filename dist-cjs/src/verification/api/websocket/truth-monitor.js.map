{"version":3,"sources":["../../../../../src/verification/api/websocket/truth-monitor.js"],"sourcesContent":["/**\n * WebSocket Truth Monitoring Server\n * Real-time verification and truth monitoring via WebSocket\n * \n * Following patterns from existing WebSocket implementation in analysis.js\n */\n\nconst WebSocket = require('ws');\nconst { nanoid } = require('nanoid');\nconst EventEmitter = require('events');\n\nclass TruthMonitoringServer extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.port = options.port || 8080;\n    this.server = null;\n    this.clients = new Map();\n    this.subscriptions = new Map();\n    this.heartbeatInterval = options.heartbeatInterval || 30000;\n    this.messageBuffer = [];\n    this.maxBufferSize = options.maxBufferSize || 1000;\n    \n    this.setupEventHandlers();\n  }\n  \n  start() {\n    this.server = new WebSocket.Server({ port: this.port });\n    \n    this.server.on('connection', (ws, req) => {\n      this.handleConnection(ws, req);\n    });\n    \n    this.server.on('error', (error) => {\n      console.error('WebSocket server error:', error);\n      this.emit('error', error);\n    });\n    \n    // Start heartbeat interval\n    this.startHeartbeat();\n    \n    console.log(`Truth monitoring WebSocket server started on port ${this.port}`);\n    this.emit('started', { port: this.port });\n  }\n  \n  stop() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n    }\n    \n    if (this.server) {\n      this.server.close(() => {\n        console.log('Truth monitoring WebSocket server stopped');\n        this.emit('stopped');\n      });\n    }\n  }\n  \n  handleConnection(ws, req) {\n    const clientId = nanoid();\n    const clientInfo = {\n      id: clientId,\n      ws,\n      ip: req.socket.remoteAddress,\n      userAgent: req.headers['user-agent'],\n      connectedAt: Date.now(),\n      subscriptions: new Set(),\n      lastHeartbeat: Date.now(),\n    };\n    \n    this.clients.set(clientId, clientInfo);\n    \n    console.log(`Truth monitoring client connected: ${clientId}`);\n    \n    // Send welcome message\n    this.sendMessage(ws, {\n      type: 'connected',\n      payload: {\n        client_id: clientId,\n        server_time: Date.now(),\n        available_events: this.getAvailableEventTypes(),\n      },\n    });\n    \n    // Send buffered messages if any\n    this.sendBufferedMessages(ws);\n    \n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data);\n        this.handleMessage(clientId, message);\n      } catch (error) {\n        console.error('Invalid message format:', error);\n        this.sendError(ws, 'INVALID_MESSAGE_FORMAT', 'Message must be valid JSON');\n      }\n    });\n    \n    ws.on('close', () => {\n      this.handleDisconnection(clientId);\n    });\n    \n    ws.on('error', (error) => {\n      console.error(`Client ${clientId} error:`, error);\n      this.handleDisconnection(clientId);\n    });\n    \n    ws.on('pong', () => {\n      if (this.clients.has(clientId)) {\n        this.clients.get(clientId).lastHeartbeat = Date.now();\n      }\n    });\n    \n    this.emit('client_connected', { clientId, clientInfo });\n  }\n  \n  handleDisconnection(clientId) {\n    const client = this.clients.get(clientId);\n    if (client) {\n      // Clean up subscriptions\n      client.subscriptions.forEach(subscriptionId => {\n        this.removeSubscription(subscriptionId);\n      });\n      \n      this.clients.delete(clientId);\n      console.log(`Truth monitoring client disconnected: ${clientId}`);\n      this.emit('client_disconnected', { clientId });\n    }\n  }\n  \n  handleMessage(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    switch (message.type) {\n      case 'subscribe':\n        this.handleSubscribe(clientId, message);\n        break;\n        \n      case 'unsubscribe':\n        this.handleUnsubscribe(clientId, message);\n        break;\n        \n      case 'heartbeat':\n        this.handleHeartbeat(clientId, message);\n        break;\n        \n      case 'get_status':\n        this.handleGetStatus(clientId, message);\n        break;\n        \n      case 'get_metrics':\n        this.handleGetMetrics(clientId, message);\n        break;\n        \n      default:\n        this.sendError(client.ws, 'UNKNOWN_MESSAGE_TYPE', `Unknown message type: ${message.type}`);\n    }\n  }\n  \n  handleSubscribe(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    const { payload } = message;\n    const subscriptionId = nanoid();\n    \n    const subscription = {\n      id: subscriptionId,\n      clientId,\n      filter: this.validateSubscriptionFilter(payload.filter),\n      createdAt: Date.now(),\n    };\n    \n    this.subscriptions.set(subscriptionId, subscription);\n    client.subscriptions.add(subscriptionId);\n    \n    this.sendMessage(client.ws, {\n      type: 'subscription_created',\n      payload: {\n        subscription_id: subscriptionId,\n        filter: subscription.filter,\n      },\n      id: message.id,\n    });\n    \n    console.log(`Client ${clientId} subscribed with filter:`, subscription.filter);\n  }\n  \n  handleUnsubscribe(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    const { subscription_id } = message.payload;\n    \n    if (this.removeSubscription(subscription_id)) {\n      client.subscriptions.delete(subscription_id);\n      \n      this.sendMessage(client.ws, {\n        type: 'subscription_removed',\n        payload: {\n          subscription_id,\n        },\n        id: message.id,\n      });\n      \n      console.log(`Client ${clientId} unsubscribed from ${subscription_id}`);\n    } else {\n      this.sendError(client.ws, 'SUBSCRIPTION_NOT_FOUND', `Subscription ${subscription_id} not found`);\n    }\n  }\n  \n  handleHeartbeat(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    client.lastHeartbeat = Date.now();\n    \n    this.sendMessage(client.ws, {\n      type: 'heartbeat_ack',\n      payload: {\n        server_time: Date.now(),\n      },\n      id: message.id,\n    });\n  }\n  \n  handleGetStatus(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    const status = {\n      server_uptime: Date.now() - this.startTime,\n      connected_clients: this.clients.size,\n      active_subscriptions: this.subscriptions.size,\n      message_buffer_size: this.messageBuffer.length,\n      server_time: Date.now(),\n    };\n    \n    this.sendMessage(client.ws, {\n      type: 'status_response',\n      payload: status,\n      id: message.id,\n    });\n  }\n  \n  handleGetMetrics(clientId, message) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n    \n    const metrics = this.calculateServerMetrics();\n    \n    this.sendMessage(client.ws, {\n      type: 'metrics_response',\n      payload: metrics,\n      id: message.id,\n    });\n  }\n  \n  // Broadcast truth monitoring events\n  broadcastTruthEvent(event) {\n    const truthEvent = {\n      id: nanoid(),\n      type: event.type || 'truth_change',\n      timestamp: Date.now(),\n      data: event.data,\n      severity: event.severity || 'medium',\n      source: event.source,\n      confidence: event.confidence,\n      metadata: event.metadata || {},\n    };\n    \n    // Add to message buffer\n    this.addToBuffer(truthEvent);\n    \n    // Find matching subscriptions\n    const matchingSubscriptions = Array.from(this.subscriptions.values())\n      .filter(sub => this.eventMatchesFilter(truthEvent, sub.filter));\n    \n    // Send to subscribed clients\n    matchingSubscriptions.forEach(subscription => {\n      const client = this.clients.get(subscription.clientId);\n      if (client && client.ws.readyState === WebSocket.OPEN) {\n        this.sendMessage(client.ws, {\n          type: 'truth_event',\n          payload: truthEvent,\n        });\n      }\n    });\n    \n    this.emit('truth_event_broadcast', { event: truthEvent, subscribers: matchingSubscriptions.length });\n  }\n  \n  // Broadcast verification updates\n  broadcastVerificationUpdate(verification) {\n    const event = {\n      id: nanoid(),\n      type: 'verification_update',\n      timestamp: Date.now(),\n      data: verification,\n      severity: verification.status === 'failed' ? 'high' : 'medium',\n      source: verification.source,\n      confidence: verification.confidence,\n    };\n    \n    this.broadcastTruthEvent(event);\n  }\n  \n  // Broadcast system alerts\n  broadcastAlert(alert) {\n    const event = {\n      id: nanoid(),\n      type: 'system_alert',\n      timestamp: Date.now(),\n      data: alert,\n      severity: alert.severity || 'high',\n      source: 'system',\n      confidence: 1.0,\n    };\n    \n    this.broadcastTruthEvent(event);\n  }\n  \n  validateSubscriptionFilter(filter = {}) {\n    return {\n      event_types: Array.isArray(filter.event_types) ? filter.event_types : ['truth_change', 'verification_update', 'system_alert'],\n      severity_levels: Array.isArray(filter.severity_levels) ? filter.severity_levels : ['low', 'medium', 'high', 'critical'],\n      sources: Array.isArray(filter.sources) ? filter.sources : [],\n      targets: Array.isArray(filter.targets) ? filter.targets : [],\n      confidence_min: typeof filter.confidence_min === 'number' ? filter.confidence_min : 0,\n      confidence_max: typeof filter.confidence_max === 'number' ? filter.confidence_max : 1,\n    };\n  }\n  \n  eventMatchesFilter(event, filter) {\n    // Check event type\n    if (filter.event_types.length > 0 && !filter.event_types.includes(event.type)) {\n      return false;\n    }\n    \n    // Check severity\n    if (filter.severity_levels.length > 0 && !filter.severity_levels.includes(event.severity)) {\n      return false;\n    }\n    \n    // Check source\n    if (filter.sources.length > 0 && !filter.sources.includes(event.source)) {\n      return false;\n    }\n    \n    // Check confidence range\n    if (event.confidence < filter.confidence_min || event.confidence > filter.confidence_max) {\n      return false;\n    }\n    \n    return true;\n  }\n  \n  removeSubscription(subscriptionId) {\n    return this.subscriptions.delete(subscriptionId);\n  }\n  \n  sendMessage(ws, message) {\n    if (ws.readyState === WebSocket.OPEN) {\n      try {\n        ws.send(JSON.stringify(message));\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  }\n  \n  sendError(ws, code, message) {\n    this.sendMessage(ws, {\n      type: 'error',\n      payload: {\n        code,\n        message,\n        timestamp: Date.now(),\n      },\n    });\n  }\n  \n  addToBuffer(event) {\n    this.messageBuffer.push(event);\n    \n    // Keep buffer size under limit\n    if (this.messageBuffer.length > this.maxBufferSize) {\n      this.messageBuffer = this.messageBuffer.slice(-this.maxBufferSize);\n    }\n  }\n  \n  sendBufferedMessages(ws) {\n    // Send last 10 buffered messages to new clients\n    const recentMessages = this.messageBuffer.slice(-10);\n    \n    recentMessages.forEach(event => {\n      this.sendMessage(ws, {\n        type: 'truth_event',\n        payload: {\n          ...event,\n          is_historical: true,\n        },\n      });\n    });\n  }\n  \n  startHeartbeat() {\n    this.heartbeatTimer = setInterval(() => {\n      const now = Date.now();\n      \n      // Check for stale connections\n      this.clients.forEach((client, clientId) => {\n        const timeSinceLastHeartbeat = now - client.lastHeartbeat;\n        \n        if (timeSinceLastHeartbeat > this.heartbeatInterval * 2) {\n          // Client is stale, close connection\n          console.log(`Closing stale connection: ${clientId}`);\n          client.ws.terminate();\n          this.handleDisconnection(clientId);\n        } else {\n          // Send ping\n          if (client.ws.readyState === WebSocket.OPEN) {\n            client.ws.ping();\n          }\n        }\n      });\n    }, this.heartbeatInterval);\n  }\n  \n  calculateServerMetrics() {\n    const now = Date.now();\n    const clients = Array.from(this.clients.values());\n    \n    return {\n      server_uptime: now - (this.startTime || now),\n      connected_clients: clients.length,\n      active_subscriptions: this.subscriptions.size,\n      message_buffer_size: this.messageBuffer.length,\n      client_stats: {\n        newest_connection: Math.min(...clients.map(c => now - c.connectedAt)),\n        oldest_connection: Math.max(...clients.map(c => now - c.connectedAt)),\n        average_connection_age: clients.length > 0 \n          ? clients.reduce((sum, c) => sum + (now - c.connectedAt), 0) / clients.length \n          : 0,\n      },\n      subscription_stats: {\n        subscriptions_per_client: this.subscriptions.size / Math.max(clients.length, 1),\n        most_popular_event_types: this.getMostPopularEventTypes(),\n      },\n      performance: {\n        memory_usage: process.memoryUsage(),\n        cpu_usage: process.cpuUsage(),\n      },\n    };\n  }\n  \n  getMostPopularEventTypes() {\n    const eventTypeCounts = {};\n    \n    this.subscriptions.forEach(sub => {\n      sub.filter.event_types.forEach(type => {\n        eventTypeCounts[type] = (eventTypeCounts[type] || 0) + 1;\n      });\n    });\n    \n    return Object.entries(eventTypeCounts)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([type, count]) => ({ type, count }));\n  }\n  \n  getAvailableEventTypes() {\n    return [\n      'truth_change',\n      'verification_update',\n      'verification_complete',\n      'system_alert',\n      'confidence_update',\n      'error',\n      'batch_update',\n    ];\n  }\n  \n  setupEventHandlers() {\n    this.startTime = Date.now();\n    \n    // Handle process signals\n    process.on('SIGINT', () => {\n      console.log('Received SIGINT, shutting down truth monitoring server...');\n      this.stop();\n      process.exit(0);\n    });\n    \n    process.on('SIGTERM', () => {\n      console.log('Received SIGTERM, shutting down truth monitoring server...');\n      this.stop();\n      process.exit(0);\n    });\n  }\n  \n  // Utility methods for external integration\n  getClientCount() {\n    return this.clients.size;\n  }\n  \n  getSubscriptionCount() {\n    return this.subscriptions.size;\n  }\n  \n  getConnectedClients() {\n    return Array.from(this.clients.values()).map(client => ({\n      id: client.id,\n      ip: client.ip,\n      connectedAt: client.connectedAt,\n      subscriptions: client.subscriptions.size,\n    }));\n  }\n}\n\nmodule.exports = TruthMonitoringServer;\n"],"names":["WebSocket","require","nanoid","EventEmitter","TruthMonitoringServer","options","port","server","clients","Map","subscriptions","heartbeatInterval","messageBuffer","maxBufferSize","setupEventHandlers","start","Server","on","ws","req","handleConnection","error","console","emit","startHeartbeat","log","stop","heartbeatTimer","clearInterval","close","clientId","clientInfo","id","ip","socket","remoteAddress","userAgent","headers","connectedAt","Date","now","Set","lastHeartbeat","set","sendMessage","type","payload","client_id","server_time","available_events","getAvailableEventTypes","sendBufferedMessages","data","message","JSON","parse","handleMessage","sendError","handleDisconnection","has","get","client","forEach","subscriptionId","removeSubscription","delete","handleSubscribe","handleUnsubscribe","handleHeartbeat","handleGetStatus","handleGetMetrics","subscription","filter","validateSubscriptionFilter","createdAt","add","subscription_id","status","server_uptime","startTime","connected_clients","size","active_subscriptions","message_buffer_size","length","metrics","calculateServerMetrics","broadcastTruthEvent","event","truthEvent","timestamp","severity","source","confidence","metadata","addToBuffer","matchingSubscriptions","Array","from","values","sub","eventMatchesFilter","readyState","OPEN","subscribers","broadcastVerificationUpdate","verification","broadcastAlert","alert","event_types","isArray","severity_levels","sources","targets","confidence_min","confidence_max","includes","send","stringify","code","push","slice","recentMessages","is_historical","setInterval","timeSinceLastHeartbeat","terminate","ping","client_stats","newest_connection","Math","min","map","c","oldest_connection","max","average_connection_age","reduce","sum","subscription_stats","subscriptions_per_client","most_popular_event_types","getMostPopularEventTypes","performance","memory_usage","process","memoryUsage","cpu_usage","cpuUsage","eventTypeCounts","Object","entries","sort","a","b","count","exit","getClientCount","getSubscriptionCount","getConnectedClients","module","exports"],"mappings":"AAOA,MAAMA,YAAYC,QAAQ;AAC1B,MAAM,EAAEC,MAAM,EAAE,GAAGD,QAAQ;AAC3B,MAAME,eAAeF,QAAQ;AAE7B,IAAA,AAAMG,wBAAN,MAAMA,8BAA8BD;IAClC,YAAYE,UAAU,CAAC,CAAC,CAAE;QACxB,KAAK;QACL,IAAI,CAACC,IAAI,GAAGD,QAAQC,IAAI,IAAI;QAC5B,IAAI,CAACC,MAAM,GAAG;QACd,IAAI,CAACC,OAAO,GAAG,IAAIC;QACnB,IAAI,CAACC,aAAa,GAAG,IAAID;QACzB,IAAI,CAACE,iBAAiB,GAAGN,QAAQM,iBAAiB,IAAI;QACtD,IAAI,CAACC,aAAa,GAAG,EAAE;QACvB,IAAI,CAACC,aAAa,GAAGR,QAAQQ,aAAa,IAAI;QAE9C,IAAI,CAACC,kBAAkB;IACzB;IAEAC,QAAQ;QACN,IAAI,CAACR,MAAM,GAAG,IAAIP,UAAUgB,MAAM,CAAC;YAAEV,MAAM,IAAI,CAACA,IAAI;QAAC;QAErD,IAAI,CAACC,MAAM,CAACU,EAAE,CAAC,cAAc,CAACC,IAAIC;YAChC,IAAI,CAACC,gBAAgB,CAACF,IAAIC;QAC5B;QAEA,IAAI,CAACZ,MAAM,CAACU,EAAE,CAAC,SAAS,CAACI;YACvBC,QAAQD,KAAK,CAAC,2BAA2BA;YACzC,IAAI,CAACE,IAAI,CAAC,SAASF;QACrB;QAGA,IAAI,CAACG,cAAc;QAEnBF,QAAQG,GAAG,CAAC,CAAC,kDAAkD,EAAE,IAAI,CAACnB,IAAI,EAAE;QAC5E,IAAI,CAACiB,IAAI,CAAC,WAAW;YAAEjB,MAAM,IAAI,CAACA,IAAI;QAAC;IACzC;IAEAoB,OAAO;QACL,IAAI,IAAI,CAACC,cAAc,EAAE;YACvBC,cAAc,IAAI,CAACD,cAAc;QACnC;QAEA,IAAI,IAAI,CAACpB,MAAM,EAAE;YACf,IAAI,CAACA,MAAM,CAACsB,KAAK,CAAC;gBAChBP,QAAQG,GAAG,CAAC;gBACZ,IAAI,CAACF,IAAI,CAAC;YACZ;QACF;IACF;IAEAH,iBAAiBF,EAAE,EAAEC,GAAG,EAAE;QACxB,MAAMW,WAAW5B;QACjB,MAAM6B,aAAa;YACjBC,IAAIF;YACJZ;YACAe,IAAId,IAAIe,MAAM,CAACC,aAAa;YAC5BC,WAAWjB,IAAIkB,OAAO,CAAC,aAAa;YACpCC,aAAaC,KAAKC,GAAG;YACrB9B,eAAe,IAAI+B;YACnBC,eAAeH,KAAKC,GAAG;QACzB;QAEA,IAAI,CAAChC,OAAO,CAACmC,GAAG,CAACb,UAAUC;QAE3BT,QAAQG,GAAG,CAAC,CAAC,mCAAmC,EAAEK,UAAU;QAG5D,IAAI,CAACc,WAAW,CAAC1B,IAAI;YACnB2B,MAAM;YACNC,SAAS;gBACPC,WAAWjB;gBACXkB,aAAaT,KAAKC,GAAG;gBACrBS,kBAAkB,IAAI,CAACC,sBAAsB;YAC/C;QACF;QAGA,IAAI,CAACC,oBAAoB,CAACjC;QAE1BA,GAAGD,EAAE,CAAC,WAAW,CAACmC;YAChB,IAAI;gBACF,MAAMC,UAAUC,KAAKC,KAAK,CAACH;gBAC3B,IAAI,CAACI,aAAa,CAAC1B,UAAUuB;YAC/B,EAAE,OAAOhC,OAAO;gBACdC,QAAQD,KAAK,CAAC,2BAA2BA;gBACzC,IAAI,CAACoC,SAAS,CAACvC,IAAI,0BAA0B;YAC/C;QACF;QAEAA,GAAGD,EAAE,CAAC,SAAS;YACb,IAAI,CAACyC,mBAAmB,CAAC5B;QAC3B;QAEAZ,GAAGD,EAAE,CAAC,SAAS,CAACI;YACdC,QAAQD,KAAK,CAAC,CAAC,OAAO,EAAES,SAAS,OAAO,CAAC,EAAET;YAC3C,IAAI,CAACqC,mBAAmB,CAAC5B;QAC3B;QAEAZ,GAAGD,EAAE,CAAC,QAAQ;YACZ,IAAI,IAAI,CAACT,OAAO,CAACmD,GAAG,CAAC7B,WAAW;gBAC9B,IAAI,CAACtB,OAAO,CAACoD,GAAG,CAAC9B,UAAUY,aAAa,GAAGH,KAAKC,GAAG;YACrD;QACF;QAEA,IAAI,CAACjB,IAAI,CAAC,oBAAoB;YAAEO;YAAUC;QAAW;IACvD;IAEA2B,oBAAoB5B,QAAQ,EAAE;QAC5B,MAAM+B,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI+B,QAAQ;YAEVA,OAAOnD,aAAa,CAACoD,OAAO,CAACC,CAAAA;gBAC3B,IAAI,CAACC,kBAAkB,CAACD;YAC1B;YAEA,IAAI,CAACvD,OAAO,CAACyD,MAAM,CAACnC;YACpBR,QAAQG,GAAG,CAAC,CAAC,sCAAsC,EAAEK,UAAU;YAC/D,IAAI,CAACP,IAAI,CAAC,uBAAuB;gBAAEO;YAAS;QAC9C;IACF;IAEA0B,cAAc1B,QAAQ,EAAEuB,OAAO,EAAE;QAC/B,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEb,OAAQR,QAAQR,IAAI;YAClB,KAAK;gBACH,IAAI,CAACqB,eAAe,CAACpC,UAAUuB;gBAC/B;YAEF,KAAK;gBACH,IAAI,CAACc,iBAAiB,CAACrC,UAAUuB;gBACjC;YAEF,KAAK;gBACH,IAAI,CAACe,eAAe,CAACtC,UAAUuB;gBAC/B;YAEF,KAAK;gBACH,IAAI,CAACgB,eAAe,CAACvC,UAAUuB;gBAC/B;YAEF,KAAK;gBACH,IAAI,CAACiB,gBAAgB,CAACxC,UAAUuB;gBAChC;YAEF;gBACE,IAAI,CAACI,SAAS,CAACI,OAAO3C,EAAE,EAAE,wBAAwB,CAAC,sBAAsB,EAAEmC,QAAQR,IAAI,EAAE;QAC7F;IACF;IAEAqB,gBAAgBpC,QAAQ,EAAEuB,OAAO,EAAE;QACjC,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEb,MAAM,EAAEf,OAAO,EAAE,GAAGO;QACpB,MAAMU,iBAAiB7D;QAEvB,MAAMqE,eAAe;YACnBvC,IAAI+B;YACJjC;YACA0C,QAAQ,IAAI,CAACC,0BAA0B,CAAC3B,QAAQ0B,MAAM;YACtDE,WAAWnC,KAAKC,GAAG;QACrB;QAEA,IAAI,CAAC9B,aAAa,CAACiC,GAAG,CAACoB,gBAAgBQ;QACvCV,OAAOnD,aAAa,CAACiE,GAAG,CAACZ;QAEzB,IAAI,CAACnB,WAAW,CAACiB,OAAO3C,EAAE,EAAE;YAC1B2B,MAAM;YACNC,SAAS;gBACP8B,iBAAiBb;gBACjBS,QAAQD,aAAaC,MAAM;YAC7B;YACAxC,IAAIqB,QAAQrB,EAAE;QAChB;QAEAV,QAAQG,GAAG,CAAC,CAAC,OAAO,EAAEK,SAAS,wBAAwB,CAAC,EAAEyC,aAAaC,MAAM;IAC/E;IAEAL,kBAAkBrC,QAAQ,EAAEuB,OAAO,EAAE;QACnC,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEb,MAAM,EAAEe,eAAe,EAAE,GAAGvB,QAAQP,OAAO;QAE3C,IAAI,IAAI,CAACkB,kBAAkB,CAACY,kBAAkB;YAC5Cf,OAAOnD,aAAa,CAACuD,MAAM,CAACW;YAE5B,IAAI,CAAChC,WAAW,CAACiB,OAAO3C,EAAE,EAAE;gBAC1B2B,MAAM;gBACNC,SAAS;oBACP8B;gBACF;gBACA5C,IAAIqB,QAAQrB,EAAE;YAChB;YAEAV,QAAQG,GAAG,CAAC,CAAC,OAAO,EAAEK,SAAS,mBAAmB,EAAE8C,iBAAiB;QACvE,OAAO;YACL,IAAI,CAACnB,SAAS,CAACI,OAAO3C,EAAE,EAAE,0BAA0B,CAAC,aAAa,EAAE0D,gBAAgB,UAAU,CAAC;QACjG;IACF;IAEAR,gBAAgBtC,QAAQ,EAAEuB,OAAO,EAAE;QACjC,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEbA,OAAOnB,aAAa,GAAGH,KAAKC,GAAG;QAE/B,IAAI,CAACI,WAAW,CAACiB,OAAO3C,EAAE,EAAE;YAC1B2B,MAAM;YACNC,SAAS;gBACPE,aAAaT,KAAKC,GAAG;YACvB;YACAR,IAAIqB,QAAQrB,EAAE;QAChB;IACF;IAEAqC,gBAAgBvC,QAAQ,EAAEuB,OAAO,EAAE;QACjC,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEb,MAAMgB,SAAS;YACbC,eAAevC,KAAKC,GAAG,KAAK,IAAI,CAACuC,SAAS;YAC1CC,mBAAmB,IAAI,CAACxE,OAAO,CAACyE,IAAI;YACpCC,sBAAsB,IAAI,CAACxE,aAAa,CAACuE,IAAI;YAC7CE,qBAAqB,IAAI,CAACvE,aAAa,CAACwE,MAAM;YAC9CpC,aAAaT,KAAKC,GAAG;QACvB;QAEA,IAAI,CAACI,WAAW,CAACiB,OAAO3C,EAAE,EAAE;YAC1B2B,MAAM;YACNC,SAAS+B;YACT7C,IAAIqB,QAAQrB,EAAE;QAChB;IACF;IAEAsC,iBAAiBxC,QAAQ,EAAEuB,OAAO,EAAE;QAClC,MAAMQ,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAAC9B;QAChC,IAAI,CAAC+B,QAAQ;QAEb,MAAMwB,UAAU,IAAI,CAACC,sBAAsB;QAE3C,IAAI,CAAC1C,WAAW,CAACiB,OAAO3C,EAAE,EAAE;YAC1B2B,MAAM;YACNC,SAASuC;YACTrD,IAAIqB,QAAQrB,EAAE;QAChB;IACF;IAGAuD,oBAAoBC,KAAK,EAAE;QACzB,MAAMC,aAAa;YACjBzD,IAAI9B;YACJ2C,MAAM2C,MAAM3C,IAAI,IAAI;YACpB6C,WAAWnD,KAAKC,GAAG;YACnBY,MAAMoC,MAAMpC,IAAI;YAChBuC,UAAUH,MAAMG,QAAQ,IAAI;YAC5BC,QAAQJ,MAAMI,MAAM;YACpBC,YAAYL,MAAMK,UAAU;YAC5BC,UAAUN,MAAMM,QAAQ,IAAI,CAAC;QAC/B;QAGA,IAAI,CAACC,WAAW,CAACN;QAGjB,MAAMO,wBAAwBC,MAAMC,IAAI,CAAC,IAAI,CAACxF,aAAa,CAACyF,MAAM,IAC/D3B,MAAM,CAAC4B,CAAAA,MAAO,IAAI,CAACC,kBAAkB,CAACZ,YAAYW,IAAI5B,MAAM;QAG/DwB,sBAAsBlC,OAAO,CAACS,CAAAA;YAC5B,MAAMV,SAAS,IAAI,CAACrD,OAAO,CAACoD,GAAG,CAACW,aAAazC,QAAQ;YACrD,IAAI+B,UAAUA,OAAO3C,EAAE,CAACoF,UAAU,KAAKtG,UAAUuG,IAAI,EAAE;gBACrD,IAAI,CAAC3D,WAAW,CAACiB,OAAO3C,EAAE,EAAE;oBAC1B2B,MAAM;oBACNC,SAAS2C;gBACX;YACF;QACF;QAEA,IAAI,CAAClE,IAAI,CAAC,yBAAyB;YAAEiE,OAAOC;YAAYe,aAAaR,sBAAsBZ,MAAM;QAAC;IACpG;IAGAqB,4BAA4BC,YAAY,EAAE;QACxC,MAAMlB,QAAQ;YACZxD,IAAI9B;YACJ2C,MAAM;YACN6C,WAAWnD,KAAKC,GAAG;YACnBY,MAAMsD;YACNf,UAAUe,aAAa7B,MAAM,KAAK,WAAW,SAAS;YACtDe,QAAQc,aAAad,MAAM;YAC3BC,YAAYa,aAAab,UAAU;QACrC;QAEA,IAAI,CAACN,mBAAmB,CAACC;IAC3B;IAGAmB,eAAeC,KAAK,EAAE;QACpB,MAAMpB,QAAQ;YACZxD,IAAI9B;YACJ2C,MAAM;YACN6C,WAAWnD,KAAKC,GAAG;YACnBY,MAAMwD;YACNjB,UAAUiB,MAAMjB,QAAQ,IAAI;YAC5BC,QAAQ;YACRC,YAAY;QACd;QAEA,IAAI,CAACN,mBAAmB,CAACC;IAC3B;IAEAf,2BAA2BD,SAAS,CAAC,CAAC,EAAE;QACtC,OAAO;YACLqC,aAAaZ,MAAMa,OAAO,CAACtC,OAAOqC,WAAW,IAAIrC,OAAOqC,WAAW,GAAG;gBAAC;gBAAgB;gBAAuB;aAAe;YAC7HE,iBAAiBd,MAAMa,OAAO,CAACtC,OAAOuC,eAAe,IAAIvC,OAAOuC,eAAe,GAAG;gBAAC;gBAAO;gBAAU;gBAAQ;aAAW;YACvHC,SAASf,MAAMa,OAAO,CAACtC,OAAOwC,OAAO,IAAIxC,OAAOwC,OAAO,GAAG,EAAE;YAC5DC,SAAShB,MAAMa,OAAO,CAACtC,OAAOyC,OAAO,IAAIzC,OAAOyC,OAAO,GAAG,EAAE;YAC5DC,gBAAgB,OAAO1C,OAAO0C,cAAc,KAAK,WAAW1C,OAAO0C,cAAc,GAAG;YACpFC,gBAAgB,OAAO3C,OAAO2C,cAAc,KAAK,WAAW3C,OAAO2C,cAAc,GAAG;QACtF;IACF;IAEAd,mBAAmBb,KAAK,EAAEhB,MAAM,EAAE;QAEhC,IAAIA,OAAOqC,WAAW,CAACzB,MAAM,GAAG,KAAK,CAACZ,OAAOqC,WAAW,CAACO,QAAQ,CAAC5B,MAAM3C,IAAI,GAAG;YAC7E,OAAO;QACT;QAGA,IAAI2B,OAAOuC,eAAe,CAAC3B,MAAM,GAAG,KAAK,CAACZ,OAAOuC,eAAe,CAACK,QAAQ,CAAC5B,MAAMG,QAAQ,GAAG;YACzF,OAAO;QACT;QAGA,IAAInB,OAAOwC,OAAO,CAAC5B,MAAM,GAAG,KAAK,CAACZ,OAAOwC,OAAO,CAACI,QAAQ,CAAC5B,MAAMI,MAAM,GAAG;YACvE,OAAO;QACT;QAGA,IAAIJ,MAAMK,UAAU,GAAGrB,OAAO0C,cAAc,IAAI1B,MAAMK,UAAU,GAAGrB,OAAO2C,cAAc,EAAE;YACxF,OAAO;QACT;QAEA,OAAO;IACT;IAEAnD,mBAAmBD,cAAc,EAAE;QACjC,OAAO,IAAI,CAACrD,aAAa,CAACuD,MAAM,CAACF;IACnC;IAEAnB,YAAY1B,EAAE,EAAEmC,OAAO,EAAE;QACvB,IAAInC,GAAGoF,UAAU,KAAKtG,UAAUuG,IAAI,EAAE;YACpC,IAAI;gBACFrF,GAAGmG,IAAI,CAAC/D,KAAKgE,SAAS,CAACjE;YACzB,EAAE,OAAOhC,OAAO;gBACdC,QAAQD,KAAK,CAAC,0BAA0BA;YAC1C;QACF;IACF;IAEAoC,UAAUvC,EAAE,EAAEqG,IAAI,EAAElE,OAAO,EAAE;QAC3B,IAAI,CAACT,WAAW,CAAC1B,IAAI;YACnB2B,MAAM;YACNC,SAAS;gBACPyE;gBACAlE;gBACAqC,WAAWnD,KAAKC,GAAG;YACrB;QACF;IACF;IAEAuD,YAAYP,KAAK,EAAE;QACjB,IAAI,CAAC5E,aAAa,CAAC4G,IAAI,CAAChC;QAGxB,IAAI,IAAI,CAAC5E,aAAa,CAACwE,MAAM,GAAG,IAAI,CAACvE,aAAa,EAAE;YAClD,IAAI,CAACD,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC6G,KAAK,CAAC,CAAC,IAAI,CAAC5G,aAAa;QACnE;IACF;IAEAsC,qBAAqBjC,EAAE,EAAE;QAEvB,MAAMwG,iBAAiB,IAAI,CAAC9G,aAAa,CAAC6G,KAAK,CAAC,CAAC;QAEjDC,eAAe5D,OAAO,CAAC0B,CAAAA;YACrB,IAAI,CAAC5C,WAAW,CAAC1B,IAAI;gBACnB2B,MAAM;gBACNC,SAAS;oBACP,GAAG0C,KAAK;oBACRmC,eAAe;gBACjB;YACF;QACF;IACF;IAEAnG,iBAAiB;QACf,IAAI,CAACG,cAAc,GAAGiG,YAAY;YAChC,MAAMpF,MAAMD,KAAKC,GAAG;YAGpB,IAAI,CAAChC,OAAO,CAACsD,OAAO,CAAC,CAACD,QAAQ/B;gBAC5B,MAAM+F,yBAAyBrF,MAAMqB,OAAOnB,aAAa;gBAEzD,IAAImF,yBAAyB,IAAI,CAAClH,iBAAiB,GAAG,GAAG;oBAEvDW,QAAQG,GAAG,CAAC,CAAC,0BAA0B,EAAEK,UAAU;oBACnD+B,OAAO3C,EAAE,CAAC4G,SAAS;oBACnB,IAAI,CAACpE,mBAAmB,CAAC5B;gBAC3B,OAAO;oBAEL,IAAI+B,OAAO3C,EAAE,CAACoF,UAAU,KAAKtG,UAAUuG,IAAI,EAAE;wBAC3C1C,OAAO3C,EAAE,CAAC6G,IAAI;oBAChB;gBACF;YACF;QACF,GAAG,IAAI,CAACpH,iBAAiB;IAC3B;IAEA2E,yBAAyB;QACvB,MAAM9C,MAAMD,KAAKC,GAAG;QACpB,MAAMhC,UAAUyF,MAAMC,IAAI,CAAC,IAAI,CAAC1F,OAAO,CAAC2F,MAAM;QAE9C,OAAO;YACLrB,eAAetC,MAAO,CAAA,IAAI,CAACuC,SAAS,IAAIvC,GAAE;YAC1CwC,mBAAmBxE,QAAQ4E,MAAM;YACjCF,sBAAsB,IAAI,CAACxE,aAAa,CAACuE,IAAI;YAC7CE,qBAAqB,IAAI,CAACvE,aAAa,CAACwE,MAAM;YAC9C4C,cAAc;gBACZC,mBAAmBC,KAAKC,GAAG,IAAI3H,QAAQ4H,GAAG,CAACC,CAAAA,IAAK7F,MAAM6F,EAAE/F,WAAW;gBACnEgG,mBAAmBJ,KAAKK,GAAG,IAAI/H,QAAQ4H,GAAG,CAACC,CAAAA,IAAK7F,MAAM6F,EAAE/F,WAAW;gBACnEkG,wBAAwBhI,QAAQ4E,MAAM,GAAG,IACrC5E,QAAQiI,MAAM,CAAC,CAACC,KAAKL,IAAMK,MAAOlG,CAAAA,MAAM6F,EAAE/F,WAAW,AAAD,GAAI,KAAK9B,QAAQ4E,MAAM,GAC3E;YACN;YACAuD,oBAAoB;gBAClBC,0BAA0B,IAAI,CAAClI,aAAa,CAACuE,IAAI,GAAGiD,KAAKK,GAAG,CAAC/H,QAAQ4E,MAAM,EAAE;gBAC7EyD,0BAA0B,IAAI,CAACC,wBAAwB;YACzD;YACAC,aAAa;gBACXC,cAAcC,QAAQC,WAAW;gBACjCC,WAAWF,QAAQG,QAAQ;YAC7B;QACF;IACF;IAEAN,2BAA2B;QACzB,MAAMO,kBAAkB,CAAC;QAEzB,IAAI,CAAC3I,aAAa,CAACoD,OAAO,CAACsC,CAAAA;YACzBA,IAAI5B,MAAM,CAACqC,WAAW,CAAC/C,OAAO,CAACjB,CAAAA;gBAC7BwG,eAAe,CAACxG,KAAK,GAAG,AAACwG,CAAAA,eAAe,CAACxG,KAAK,IAAI,CAAA,IAAK;YACzD;QACF;QAEA,OAAOyG,OAAOC,OAAO,CAACF,iBACnBG,IAAI,CAAC,CAAC,GAAEC,EAAE,EAAE,GAAEC,EAAE,GAAKA,IAAID,GACzBhC,KAAK,CAAC,GAAG,GACTW,GAAG,CAAC,CAAC,CAACvF,MAAM8G,MAAM,GAAM,CAAA;gBAAE9G;gBAAM8G;YAAM,CAAA;IAC3C;IAEAzG,yBAAyB;QACvB,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IAEApC,qBAAqB;QACnB,IAAI,CAACiE,SAAS,GAAGxC,KAAKC,GAAG;QAGzByG,QAAQhI,EAAE,CAAC,UAAU;YACnBK,QAAQG,GAAG,CAAC;YACZ,IAAI,CAACC,IAAI;YACTuH,QAAQW,IAAI,CAAC;QACf;QAEAX,QAAQhI,EAAE,CAAC,WAAW;YACpBK,QAAQG,GAAG,CAAC;YACZ,IAAI,CAACC,IAAI;YACTuH,QAAQW,IAAI,CAAC;QACf;IACF;IAGAC,iBAAiB;QACf,OAAO,IAAI,CAACrJ,OAAO,CAACyE,IAAI;IAC1B;IAEA6E,uBAAuB;QACrB,OAAO,IAAI,CAACpJ,aAAa,CAACuE,IAAI;IAChC;IAEA8E,sBAAsB;QACpB,OAAO9D,MAAMC,IAAI,CAAC,IAAI,CAAC1F,OAAO,CAAC2F,MAAM,IAAIiC,GAAG,CAACvE,CAAAA,SAAW,CAAA;gBACtD7B,IAAI6B,OAAO7B,EAAE;gBACbC,IAAI4B,OAAO5B,EAAE;gBACbK,aAAauB,OAAOvB,WAAW;gBAC/B5B,eAAemD,OAAOnD,aAAa,CAACuE,IAAI;YAC1C,CAAA;IACF;AACF;AAEA+E,OAAOC,OAAO,GAAG7J"}