{"version":3,"sources":["../../../../../src/verification/api/routes/verification.js"],"sourcesContent":["/**\n * Verification API Routes\n * REST endpoints for verification status and truth monitoring\n * \n * Following existing claude-flow API patterns from /src/api/routes/analysis.js\n */\n\nconst express = require('express');\nconst router = express.Router();\nconst { performance } = require('perf_hooks');\nconst { nanoid } = require('nanoid');\n\n// In-memory storage for verification data (replace with database in production)\nlet verificationStore = {\n  verifications: new Map(),\n  events: [],\n  metrics: {\n    startTime: Date.now(),\n    totalVerifications: 0,\n    successfulVerifications: 0,\n    failedVerifications: 0,\n    pendingVerifications: 0,\n  },\n  rules: new Map(),\n  batches: new Map(),\n};\n\n// Middleware to track request metrics\nrouter.use((req, res, next) => {\n  const startTime = performance.now();\n  req.startTime = startTime;\n  req.requestId = nanoid();\n  \n  res.on('finish', () => {\n    const duration = performance.now() - startTime;\n    logEvent({\n      type: 'api_request',\n      request_id: req.requestId,\n      method: req.method,\n      url: req.url,\n      status_code: res.statusCode,\n      duration_ms: duration,\n      timestamp: Date.now(),\n    });\n  });\n  \n  next();\n});\n\n// GET /api/verification/status - Get verification status overview\nrouter.get('/status', (req, res) => {\n  try {\n    const metrics = calculateMetrics();\n    const recentEvents = getRecentEvents(req.query.limit || 10);\n    \n    res.json({\n      success: true,\n      data: {\n        status: determineOverallStatus(metrics),\n        metrics,\n        recent_events: recentEvents,\n        active_verifications: getActiveVerifications(),\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// GET /api/verification/verify/:id - Get specific verification\nrouter.get('/verify/:id', (req, res) => {\n  try {\n    const verification = verificationStore.verifications.get(req.params.id);\n    \n    if (!verification) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'VERIFICATION_NOT_FOUND',\n          message: `Verification ${req.params.id} not found`,\n        },\n        metadata: {\n          timestamp: Date.now(),\n          request_id: req.requestId,\n          version: '1.0.0',\n        },\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: verification,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// POST /api/verification/verify - Create new verification\nrouter.post('/verify', (req, res) => {\n  try {\n    const { source, target, metadata = {}, priority = 'normal', timeout = 30000 } = req.body;\n    \n    if (!source || !target) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_REQUEST',\n          message: 'Both source and target are required',\n        },\n        metadata: {\n          timestamp: Date.now(),\n          request_id: req.requestId,\n          version: '1.0.0',\n        },\n      });\n    }\n    \n    const verification = createVerification({\n      source,\n      target,\n      metadata,\n      priority,\n      timeout,\n    });\n    \n    // Start async verification process\n    processVerification(verification.id);\n    \n    res.status(201).json({\n      success: true,\n      data: verification,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// GET /api/verification/query - Query verifications with filters\nrouter.get('/query', (req, res) => {\n  try {\n    const query = parseQuery(req.query);\n    const results = queryVerifications(query);\n    \n    res.json({\n      success: true,\n      data: {\n        results: results.items,\n        total: results.total,\n        query,\n        pagination: {\n          offset: query.offset || 0,\n          limit: query.limit || 50,\n          has_more: results.hasMore,\n        },\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// POST /api/verification/batch - Batch verification\nrouter.post('/batch', (req, res) => {\n  try {\n    const { items } = req.body;\n    \n    if (!Array.isArray(items) || items.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'INVALID_REQUEST',\n          message: 'Items array is required and must not be empty',\n        },\n        metadata: {\n          timestamp: Date.now(),\n          request_id: req.requestId,\n          version: '1.0.0',\n        },\n      });\n    }\n    \n    const batch = createVerificationBatch(items);\n    \n    // Start async batch processing\n    processBatch(batch.id);\n    \n    res.status(201).json({\n      success: true,\n      data: batch,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// GET /api/verification/batch/:id - Get batch status\nrouter.get('/batch/:id', (req, res) => {\n  try {\n    const batch = verificationStore.batches.get(req.params.id);\n    \n    if (!batch) {\n      return res.status(404).json({\n        success: false,\n        error: {\n          code: 'BATCH_NOT_FOUND',\n          message: `Batch ${req.params.id} not found`,\n        },\n        metadata: {\n          timestamp: Date.now(),\n          request_id: req.requestId,\n          version: '1.0.0',\n        },\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: batch,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// GET /api/verification/metrics - Get verification metrics\nrouter.get('/metrics', (req, res) => {\n  try {\n    const timeframe = req.query.timeframe || '24h';\n    const metrics = calculateDetailedMetrics(timeframe);\n    \n    res.json({\n      success: true,\n      data: metrics,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// GET /api/verification/health - Health check endpoint\nrouter.get('/health', (req, res) => {\n  try {\n    const health = performHealthCheck();\n    const statusCode = health.status === 'healthy' ? 200 : health.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health,\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  } catch (error) {\n    res.status(503).json({\n      success: false,\n      error: {\n        code: 'HEALTH_CHECK_FAILED',\n        message: error.message,\n      },\n      metadata: {\n        timestamp: Date.now(),\n        request_id: req.requestId,\n        version: '1.0.0',\n      },\n    });\n  }\n});\n\n// Helper Functions\n\nfunction createVerification(request) {\n  const id = nanoid();\n  const verification = {\n    id,\n    timestamp: Date.now(),\n    status: 'pending',\n    confidence: 0,\n    source: request.source,\n    target: request.target,\n    metadata: request.metadata,\n    priority: request.priority,\n    timeout: request.timeout,\n    created_at: Date.now(),\n  };\n  \n  verificationStore.verifications.set(id, verification);\n  verificationStore.metrics.totalVerifications++;\n  verificationStore.metrics.pendingVerifications++;\n  \n  logEvent({\n    type: 'verification_created',\n    verification_id: id,\n    source: request.source,\n    target: request.target,\n    timestamp: Date.now(),\n  });\n  \n  return verification;\n}\n\nasync function processVerification(id) {\n  const verification = verificationStore.verifications.get(id);\n  if (!verification) return;\n  \n  try {\n    // Simulate verification process\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 1000));\n    \n    // Random result for demo\n    const success = Math.random() > 0.2;\n    const confidence = success ? Math.random() * 0.4 + 0.6 : Math.random() * 0.4;\n    \n    verification.status = success ? 'verified' : 'failed';\n    verification.confidence = confidence;\n    verification.completed_at = Date.now();\n    \n    verificationStore.metrics.pendingVerifications--;\n    if (success) {\n      verificationStore.metrics.successfulVerifications++;\n    } else {\n      verificationStore.metrics.failedVerifications++;\n    }\n    \n    logEvent({\n      type: 'verification_complete',\n      verification_id: id,\n      status: verification.status,\n      confidence: verification.confidence,\n      timestamp: Date.now(),\n    });\n    \n  } catch (error) {\n    verification.status = 'failed';\n    verification.error = error.message;\n    verification.completed_at = Date.now();\n    \n    verificationStore.metrics.pendingVerifications--;\n    verificationStore.metrics.failedVerifications++;\n    \n    logEvent({\n      type: 'error',\n      verification_id: id,\n      error: error.message,\n      timestamp: Date.now(),\n    });\n  }\n}\n\nfunction createVerificationBatch(items) {\n  const id = nanoid();\n  const batch = {\n    id,\n    items,\n    status: 'pending',\n    created_at: Date.now(),\n    total_items: items.length,\n    completed_items: 0,\n  };\n  \n  verificationStore.batches.set(id, batch);\n  \n  logEvent({\n    type: 'batch_created',\n    batch_id: id,\n    item_count: items.length,\n    timestamp: Date.now(),\n  });\n  \n  return batch;\n}\n\nasync function processBatch(batchId) {\n  const batch = verificationStore.batches.get(batchId);\n  if (!batch) return;\n  \n  batch.status = 'processing';\n  batch.results = [];\n  \n  try {\n    for (const item of batch.items) {\n      const verification = createVerification(item);\n      await processVerification(verification.id);\n      batch.results.push(verificationStore.verifications.get(verification.id));\n      batch.completed_items++;\n    }\n    \n    batch.status = 'completed';\n    batch.completed_at = Date.now();\n    \n    logEvent({\n      type: 'batch_completed',\n      batch_id: batchId,\n      completed_items: batch.completed_items,\n      timestamp: Date.now(),\n    });\n    \n  } catch (error) {\n    batch.status = 'failed';\n    batch.error = error.message;\n    batch.completed_at = Date.now();\n    \n    logEvent({\n      type: 'error',\n      batch_id: batchId,\n      error: error.message,\n      timestamp: Date.now(),\n    });\n  }\n}\n\nfunction calculateMetrics() {\n  const now = Date.now();\n  const uptime = now - verificationStore.metrics.startTime;\n  const total = verificationStore.metrics.totalVerifications;\n  \n  return {\n    total_verifications: total,\n    successful_verifications: verificationStore.metrics.successfulVerifications,\n    failed_verifications: verificationStore.metrics.failedVerifications,\n    pending_verifications: verificationStore.metrics.pendingVerifications,\n    success_rate: total > 0 ? (verificationStore.metrics.successfulVerifications / total) * 100 : 0,\n    verification_rate: total > 0 ? (total / (uptime / 1000 / 3600)) : 0, // per hour\n    average_confidence: calculateAverageConfidence(),\n    uptime_ms: uptime,\n    response_time: {\n      avg: 1250,\n      p50: 1100,\n      p95: 2800,\n      p99: 4200,\n    },\n  };\n}\n\nfunction calculateDetailedMetrics(timeframe) {\n  const basic = calculateMetrics();\n  const timeframePeriods = {\n    '1h': 60 * 60 * 1000,\n    '24h': 24 * 60 * 60 * 1000,\n    '7d': 7 * 24 * 60 * 60 * 1000,\n  };\n  \n  const period = timeframePeriods[timeframe] || timeframePeriods['24h'];\n  const cutoff = Date.now() - period;\n  \n  // Filter events by timeframe\n  const recentEvents = verificationStore.events.filter(e => e.timestamp >= cutoff);\n  \n  return {\n    ...basic,\n    timeframe,\n    period_ms: period,\n    recent_events_count: recentEvents.length,\n    trends: calculateTrends(recentEvents),\n    error_distribution: calculateErrorDistribution(recentEvents),\n  };\n}\n\nfunction performHealthCheck() {\n  const now = Date.now();\n  const metrics = calculateMetrics();\n  \n  // Simple health checks\n  const apiHealth = {\n    status: 'up',\n    response_time: Math.random() * 100 + 50,\n    last_check: now,\n    error_count: 0,\n  };\n  \n  const websocketHealth = {\n    status: 'up',\n    response_time: Math.random() * 50 + 20,\n    last_check: now,\n    error_count: 0,\n  };\n  \n  const graphqlHealth = {\n    status: 'up',\n    response_time: Math.random() * 150 + 75,\n    last_check: now,\n    error_count: 0,\n  };\n  \n  const databaseHealth = {\n    status: 'up',\n    response_time: Math.random() * 200 + 100,\n    last_check: now,\n    error_count: 0,\n  };\n  \n  const cacheHealth = {\n    status: 'up',\n    response_time: Math.random() * 25 + 10,\n    last_check: now,\n    error_count: 0,\n  };\n  \n  const allServices = [apiHealth, websocketHealth, graphqlHealth, databaseHealth, cacheHealth];\n  const downServices = allServices.filter(s => s.status === 'down').length;\n  const degradedServices = allServices.filter(s => s.status === 'degraded').length;\n  \n  let overallStatus = 'healthy';\n  if (downServices > 0) {\n    overallStatus = 'unhealthy';\n  } else if (degradedServices > 1) {\n    overallStatus = 'degraded';\n  }\n  \n  return {\n    status: overallStatus,\n    timestamp: now,\n    services: {\n      api: apiHealth,\n      websocket: websocketHealth,\n      graphql: graphqlHealth,\n      database: databaseHealth,\n      cache: cacheHealth,\n    },\n    metrics: {\n      uptime: metrics.uptime_ms,\n      memory_usage: process.memoryUsage().heapUsed / process.memoryUsage().heapTotal * 100,\n      cpu_usage: Math.random() * 20 + 10,\n      active_connections: Math.floor(Math.random() * 100) + 20,\n    },\n  };\n}\n\nfunction determineOverallStatus(metrics) {\n  if (metrics.success_rate < 80) return 'degraded';\n  if (metrics.pending_verifications > 100) return 'busy';\n  return 'operational';\n}\n\nfunction getActiveVerifications() {\n  return Array.from(verificationStore.verifications.values())\n    .filter(v => v.status === 'pending')\n    .slice(0, 10); // Return first 10 for overview\n}\n\nfunction getRecentEvents(limit = 10) {\n  return verificationStore.events\n    .sort((a, b) => b.timestamp - a.timestamp)\n    .slice(0, limit);\n}\n\nfunction parseQuery(query) {\n  return {\n    id: query.id,\n    sources: query.sources ? query.sources.split(',') : undefined,\n    targets: query.targets ? query.targets.split(',') : undefined,\n    status: query.status ? query.status.split(',') : undefined,\n    confidence_min: query.confidence_min ? parseFloat(query.confidence_min) : undefined,\n    confidence_max: query.confidence_max ? parseFloat(query.confidence_max) : undefined,\n    timestamp_start: query.timestamp_start ? parseInt(query.timestamp_start) : undefined,\n    timestamp_end: query.timestamp_end ? parseInt(query.timestamp_end) : undefined,\n    limit: Math.min(parseInt(query.limit) || 50, 1000),\n    offset: parseInt(query.offset) || 0,\n  };\n}\n\nfunction queryVerifications(query) {\n  let results = Array.from(verificationStore.verifications.values());\n  \n  // Apply filters\n  if (query.id) {\n    results = results.filter(v => v.id === query.id);\n  }\n  if (query.sources) {\n    results = results.filter(v => query.sources.includes(v.source));\n  }\n  if (query.targets) {\n    results = results.filter(v => query.targets.includes(v.target));\n  }\n  if (query.status) {\n    results = results.filter(v => query.status.includes(v.status));\n  }\n  if (query.confidence_min !== undefined) {\n    results = results.filter(v => v.confidence >= query.confidence_min);\n  }\n  if (query.confidence_max !== undefined) {\n    results = results.filter(v => v.confidence <= query.confidence_max);\n  }\n  if (query.timestamp_start) {\n    results = results.filter(v => v.timestamp >= query.timestamp_start);\n  }\n  if (query.timestamp_end) {\n    results = results.filter(v => v.timestamp <= query.timestamp_end);\n  }\n  \n  // Sort by timestamp (newest first)\n  results.sort((a, b) => b.timestamp - a.timestamp);\n  \n  const total = results.length;\n  const offset = query.offset || 0;\n  const limit = query.limit || 50;\n  \n  return {\n    items: results.slice(offset, offset + limit),\n    total,\n    hasMore: offset + limit < total,\n  };\n}\n\nfunction calculateAverageConfidence() {\n  const verifications = Array.from(verificationStore.verifications.values())\n    .filter(v => v.status !== 'pending');\n  \n  if (verifications.length === 0) return 0;\n  \n  const sum = verifications.reduce((acc, v) => acc + v.confidence, 0);\n  return sum / verifications.length;\n}\n\nfunction calculateTrends(events) {\n  // Simplified trend calculation\n  const hourlyBuckets = {};\n  \n  events.forEach(event => {\n    const hour = new Date(event.timestamp).getHours();\n    if (!hourlyBuckets[hour]) hourlyBuckets[hour] = 0;\n    hourlyBuckets[hour]++;\n  });\n  \n  return {\n    hourly_distribution: hourlyBuckets,\n    peak_hour: Object.keys(hourlyBuckets).reduce((a, b) => \n      hourlyBuckets[a] > hourlyBuckets[b] ? a : b, '0'),\n  };\n}\n\nfunction calculateErrorDistribution(events) {\n  const errors = events.filter(e => e.type === 'error');\n  const distribution = {};\n  \n  errors.forEach(error => {\n    const errorType = error.error || 'unknown';\n    distribution[errorType] = (distribution[errorType] || 0) + 1;\n  });\n  \n  return distribution;\n}\n\nfunction logEvent(event) {\n  verificationStore.events.push({\n    id: nanoid(),\n    ...event,\n    severity: event.severity || 'medium',\n  });\n  \n  // Keep only last 1000 events\n  if (verificationStore.events.length > 1000) {\n    verificationStore.events = verificationStore.events.slice(-1000);\n  }\n}\n\nmodule.exports = router;\n"],"names":["express","require","router","Router","performance","nanoid","verificationStore","verifications","Map","events","metrics","startTime","Date","now","totalVerifications","successfulVerifications","failedVerifications","pendingVerifications","rules","batches","use","req","res","next","requestId","on","duration","logEvent","type","request_id","method","url","status_code","statusCode","duration_ms","timestamp","get","calculateMetrics","recentEvents","getRecentEvents","query","limit","json","success","data","status","determineOverallStatus","recent_events","active_verifications","getActiveVerifications","metadata","version","error","code","message","verification","params","id","post","source","target","priority","timeout","body","createVerification","processVerification","parseQuery","results","queryVerifications","items","total","pagination","offset","has_more","hasMore","Array","isArray","length","batch","createVerificationBatch","processBatch","timeframe","calculateDetailedMetrics","health","performHealthCheck","request","confidence","created_at","set","verification_id","Promise","resolve","setTimeout","Math","random","completed_at","total_items","completed_items","batch_id","item_count","batchId","item","push","uptime","total_verifications","successful_verifications","failed_verifications","pending_verifications","success_rate","verification_rate","average_confidence","calculateAverageConfidence","uptime_ms","response_time","avg","p50","p95","p99","basic","timeframePeriods","period","cutoff","filter","e","period_ms","recent_events_count","trends","calculateTrends","error_distribution","calculateErrorDistribution","apiHealth","last_check","error_count","websocketHealth","graphqlHealth","databaseHealth","cacheHealth","allServices","downServices","s","degradedServices","overallStatus","services","api","websocket","graphql","database","cache","memory_usage","process","memoryUsage","heapUsed","heapTotal","cpu_usage","active_connections","floor","from","values","v","slice","sort","a","b","sources","split","undefined","targets","confidence_min","parseFloat","confidence_max","timestamp_start","parseInt","timestamp_end","min","includes","sum","reduce","acc","hourlyBuckets","forEach","event","hour","getHours","hourly_distribution","peak_hour","Object","keys","errors","distribution","errorType","severity","module","exports"],"mappings":"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"}