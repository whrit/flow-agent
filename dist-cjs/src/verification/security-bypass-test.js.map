{"version":3,"sources":["../../../src/verification/security-bypass-test.ts"],"sourcesContent":["/**\n * Security Bypass Prevention Test\n * \n * Comprehensive test to verify that NO agent can bypass the verification system\n * Tests all possible attack vectors and bypass attempts\n */\n\nimport { SecurityEnforcementSystem, createHighSecuritySystem } from './index';\nimport { PenetrationTestingSuite, SecurityValidationSuite } from './tests';\nimport { SecurityMiddlewareManager, ThreatIntelligenceMiddleware } from './middleware';\nimport { VerificationRequest } from './security';\n\nexport class SecurityBypassPreventionTest {\n  private security: SecurityEnforcementSystem;\n  private penetrationTester: PenetrationTestingSuite;\n  private validator: SecurityValidationSuite;\n  private middleware: SecurityMiddlewareManager;\n\n  constructor() {\n    this.security = createHighSecuritySystem();\n    this.penetrationTester = new PenetrationTestingSuite(this.security);\n    this.validator = new SecurityValidationSuite(this.security);\n    this.middleware = new SecurityMiddlewareManager();\n    \n    this.setupAdvancedSecurity();\n  }\n\n  private setupAdvancedSecurity(): void {\n    // Add threat intelligence middleware\n    const threatIntel = new ThreatIntelligenceMiddleware();\n    this.middleware.registerMiddleware(threatIntel);\n    \n    // Enhance security system with middleware\n    this.integrateMiddleware();\n  }\n\n  private integrateMiddleware(): void {\n    const originalProcess = this.security.processVerificationRequest.bind(this.security);\n    \n    this.security.processVerificationRequest = async (request: VerificationRequest) => {\n      await this.middleware.executeBeforeVerification(request);\n      \n      try {\n        const result = await originalProcess(request);\n        await this.middleware.executeAfterVerification(result);\n        return result;\n      } catch (error) {\n        await this.middleware.executeErrorHandling(error);\n        throw error;\n      }\n    };\n  }\n\n  // Run comprehensive bypass prevention test\n  async runBypassPreventionTest(): Promise<{\n    testsPassed: number;\n    testsFailed: number;\n    bypassAttempts: number;\n    successfulBypasses: number;\n    securityScore: number;\n    vulnerabilities: string[];\n    securityAssessment: 'SECURE' | 'VULNERABLE' | 'CRITICAL';\n  }> {\n    console.log('üîí STARTING COMPREHENSIVE BYPASS PREVENTION TEST');\n    console.log('================================================');\n\n    await this.security.initialize([\n      'test-node-1', 'test-node-2', 'test-node-3', \n      'test-node-4', 'test-node-5', 'test-node-6', \n      'test-node-7', 'test-node-8', 'test-node-9'\n    ]);\n\n    let testsPassed = 0;\n    let testsFailed = 0;\n    let bypassAttempts = 0;\n    let successfulBypasses = 0;\n    const vulnerabilities: string[] = [];\n\n    // Test 1: Authentication Bypass Attempts\n    console.log('\\nüîç Testing Authentication Bypass Prevention...');\n    const authBypassResult = await this.testAuthenticationBypassPrevention();\n    if (authBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Authentication bypass prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Authentication can be bypassed');\n      console.log('‚ùå Authentication bypass prevention: FAILED');\n    }\n    bypassAttempts += authBypassResult.attempts;\n\n    // Test 2: Rate Limiting Bypass Attempts\n    console.log('\\n‚è±Ô∏è  Testing Rate Limiting Bypass Prevention...');\n    const rateLimitBypassResult = await this.testRateLimitingBypassPrevention();\n    if (rateLimitBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Rate limiting bypass prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Rate limiting can be bypassed');\n      console.log('‚ùå Rate limiting bypass prevention: FAILED');\n    }\n    bypassAttempts += rateLimitBypassResult.attempts;\n\n    // Test 3: Cryptographic Bypass Attempts\n    console.log('\\nüîê Testing Cryptographic Bypass Prevention...');\n    const cryptoBypassResult = await this.testCryptographicBypassPrevention();\n    if (cryptoBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Cryptographic bypass prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Cryptographic verification can be bypassed');\n      console.log('‚ùå Cryptographic bypass prevention: FAILED');\n    }\n    bypassAttempts += cryptoBypassResult.attempts;\n\n    // Test 4: Byzantine Attack Bypass Attempts\n    console.log('\\nüõ°Ô∏è  Testing Byzantine Attack Prevention...');\n    const byzantineBypassResult = await this.testByzantineBypassPrevention();\n    if (byzantineBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Byzantine attack prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Byzantine attacks are not properly detected');\n      console.log('‚ùå Byzantine attack prevention: FAILED');\n    }\n    bypassAttempts += byzantineBypassResult.attempts;\n\n    // Test 5: Audit Trail Bypass Attempts\n    console.log('\\nüìã Testing Audit Trail Bypass Prevention...');\n    const auditBypassResult = await this.testAuditTrailBypassPrevention();\n    if (auditBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Audit trail bypass prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Audit trail can be bypassed or tampered');\n      console.log('‚ùå Audit trail bypass prevention: FAILED');\n    }\n    bypassAttempts += auditBypassResult.attempts;\n\n    // Test 6: Privilege Escalation Prevention\n    console.log('\\n‚¨ÜÔ∏è  Testing Privilege Escalation Prevention...');\n    const privilegeBypassResult = await this.testPrivilegeEscalationPrevention();\n    if (privilegeBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Privilege escalation prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('Privilege escalation is possible');\n      console.log('‚ùå Privilege escalation prevention: FAILED');\n    }\n    bypassAttempts += privilegeBypassResult.attempts;\n\n    // Test 7: Complete System Bypass Attempts\n    console.log('\\nüö´ Testing Complete System Bypass Prevention...');\n    const systemBypassResult = await this.testCompleteSystemBypassPrevention();\n    if (systemBypassResult.prevented) {\n      testsPassed++;\n      console.log('‚úÖ Complete system bypass prevention: PASSED');\n    } else {\n      testsFailed++;\n      successfulBypasses++;\n      vulnerabilities.push('CRITICAL: Complete system bypass is possible');\n      console.log('‚ùå Complete system bypass prevention: FAILED');\n    }\n    bypassAttempts += systemBypassResult.attempts;\n\n    // Calculate security score\n    const securityScore = Math.round((testsPassed / (testsPassed + testsFailed)) * 100);\n    \n    // Determine security assessment\n    let securityAssessment: 'SECURE' | 'VULNERABLE' | 'CRITICAL';\n    if (successfulBypasses === 0) {\n      securityAssessment = 'SECURE';\n    } else if (successfulBypasses <= 2) {\n      securityAssessment = 'VULNERABLE';\n    } else {\n      securityAssessment = 'CRITICAL';\n    }\n\n    // Print final results\n    console.log('\\n================================================');\n    console.log('üîí BYPASS PREVENTION TEST RESULTS');\n    console.log('================================================');\n    console.log(`‚úÖ Tests Passed: ${testsPassed}`);\n    console.log(`‚ùå Tests Failed: ${testsFailed}`);\n    console.log(`üéØ Bypass Attempts: ${bypassAttempts}`);\n    console.log(`üö® Successful Bypasses: ${successfulBypasses}`);\n    console.log(`üìä Security Score: ${securityScore}%`);\n    console.log(`üîç Security Assessment: ${securityAssessment}`);\n    \n    if (vulnerabilities.length > 0) {\n      console.log('\\n‚ö†Ô∏è  VULNERABILITIES DETECTED:');\n      vulnerabilities.forEach((vuln, index) => {\n        console.log(`   ${index + 1}. ${vuln}`);\n      });\n    } else {\n      console.log('\\nüéâ NO VULNERABILITIES DETECTED - SYSTEM IS SECURE!');\n    }\n\n    return {\n      testsPassed,\n      testsFailed,\n      bypassAttempts,\n      successfulBypasses,\n      securityScore,\n      vulnerabilities,\n      securityAssessment\n    };\n  }\n\n  // Test authentication bypass prevention\n  private async testAuthenticationBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    const attempts = [\n      // Attempt 1: No agent registration\n      () => this.attemptVerificationWithoutRegistration(),\n      \n      // Attempt 2: Invalid signature\n      () => this.attemptVerificationWithInvalidSignature(),\n      \n      // Attempt 3: Expired credentials\n      () => this.attemptVerificationWithExpiredCredentials(),\n      \n      // Attempt 4: Impersonation attack\n      () => this.attemptAgentImpersonation(),\n      \n      // Attempt 5: Credential stuffing\n      () => this.attemptCredentialStuffing()\n    ];\n\n    let preventedCount = 0;\n    for (const attempt of attempts) {\n      try {\n        await attempt();\n        // If no error is thrown, bypass was successful\n      } catch (error) {\n        // Error means the bypass was prevented\n        preventedCount++;\n      }\n    }\n\n    return {\n      prevented: preventedCount === attempts.length,\n      attempts: attempts.length\n    };\n  }\n\n  // Test rate limiting bypass prevention\n  private async testRateLimitingBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    try {\n      // Register test agent\n      await this.security.registerAgent('rate-limit-test', ['verify'], 'MEDIUM');\n    } catch (error) {\n      // Agent might already exist\n    }\n\n    // Attempt rapid requests to trigger rate limiting\n    const rapidRequests = Array.from({ length: 100 }, (_, i) => ({\n      requestId: `rate-test-${i}`,\n      agentId: 'rate-limit-test',\n      truthClaim: { statement: `Test claim ${i}` },\n      timestamp: new Date(),\n      nonce: `nonce-${i}`,\n      signature: 'test-signature'\n    }));\n\n    let rateLimitTriggered = false;\n    let requestCount = 0;\n\n    for (const request of rapidRequests) {\n      try {\n        await this.security.processVerificationRequest(request);\n        requestCount++;\n      } catch (error) {\n        if (error.message.includes('rate limit') || error.message.includes('Rate limit')) {\n          rateLimitTriggered = true;\n          break;\n        }\n      }\n    }\n\n    return {\n      prevented: rateLimitTriggered,\n      attempts: 1\n    };\n  }\n\n  // Test cryptographic bypass prevention\n  private async testCryptographicBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    try {\n      await this.security.registerAgent('crypto-test', ['verify'], 'HIGH');\n    } catch (error) {\n      // Agent might already exist\n    }\n\n    const attempts = [\n      // Attempt 1: Tampered signature\n      () => this.attemptVerificationWithTamperedSignature(),\n      \n      // Attempt 2: Replay attack\n      () => this.attemptReplayAttack(),\n      \n      // Attempt 3: Signature substitution\n      () => this.attemptSignatureSubstitution()\n    ];\n\n    let preventedCount = 0;\n    for (const attempt of attempts) {\n      try {\n        await attempt();\n      } catch (error) {\n        preventedCount++;\n      }\n    }\n\n    return {\n      prevented: preventedCount === attempts.length,\n      attempts: attempts.length\n    };\n  }\n\n  // Test Byzantine attack prevention\n  private async testByzantineBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    try {\n      await this.security.registerAgent('byzantine-test', ['verify'], 'MEDIUM');\n    } catch (error) {\n      // Agent might already exist\n    }\n\n    const attempts = [\n      // Attempt 1: Contradictory messages\n      () => this.attemptContradictoryMessages(),\n      \n      // Attempt 2: Coordinated attack\n      () => this.attemptCoordinatedAttack(),\n      \n      // Attempt 3: Timing attack\n      () => this.attemptTimingAttack()\n    ];\n\n    let preventedCount = 0;\n    for (const attempt of attempts) {\n      try {\n        await attempt();\n      } catch (error) {\n        if (error.message.includes('Byzantine') || error.message.includes('byzantine')) {\n          preventedCount++;\n        }\n      }\n    }\n\n    return {\n      prevented: preventedCount >= 1, // At least one Byzantine attack should be detected\n      attempts: attempts.length\n    };\n  }\n\n  // Test audit trail bypass prevention\n  private async testAuditTrailBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    const initialStatus = this.security.getSecurityStatus();\n    const initialAuditEntries = initialStatus.auditSummary.totalEntries;\n\n    // Perform some operations that should create audit entries\n    try {\n      await this.security.registerAgent('audit-test', ['verify'], 'LOW');\n    } catch (error) {\n      // Agent might already exist\n    }\n\n    const finalStatus = this.security.getSecurityStatus();\n    const finalAuditEntries = finalStatus.auditSummary.totalEntries;\n    \n    // Check if audit trail is being maintained\n    const auditTrailWorking = finalAuditEntries >= initialAuditEntries && \n                             finalStatus.auditSummary.integrityValid;\n\n    return {\n      prevented: auditTrailWorking,\n      attempts: 1\n    };\n  }\n\n  // Test privilege escalation prevention\n  private async testPrivilegeEscalationPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    try {\n      await this.security.registerAgent('low-priv-test', ['verify'], 'LOW');\n    } catch (error) {\n      // Agent might already exist\n    }\n\n    const attempts = [\n      // Attempt 1: Try to perform high-privilege operation\n      () => this.attemptHighPrivilegeOperation(),\n      \n      // Attempt 2: Try to escalate capabilities\n      () => this.attemptCapabilityEscalation()\n    ];\n\n    let preventedCount = 0;\n    for (const attempt of attempts) {\n      try {\n        await attempt();\n      } catch (error) {\n        preventedCount++;\n      }\n    }\n\n    return {\n      prevented: preventedCount === attempts.length,\n      attempts: attempts.length\n    };\n  }\n\n  // Test complete system bypass prevention\n  private async testCompleteSystemBypassPrevention(): Promise<{ prevented: boolean; attempts: number }> {\n    const attempts = [\n      // Attempt 1: Direct access without security\n      () => this.attemptDirectSystemAccess(),\n      \n      // Attempt 2: Try to disable security system\n      () => this.attemptSecurityDisabling(),\n      \n      // Attempt 3: Try to corrupt security state\n      () => this.attemptSecurityStateCorruption()\n    ];\n\n    let preventedCount = 0;\n    for (const attempt of attempts) {\n      try {\n        await attempt();\n      } catch (error) {\n        preventedCount++;\n      }\n    }\n\n    return {\n      prevented: preventedCount === attempts.length,\n      attempts: attempts.length\n    };\n  }\n\n  // Individual bypass attempt methods\n  private async attemptVerificationWithoutRegistration(): Promise<void> {\n    const request: VerificationRequest = {\n      requestId: 'unregistered-test',\n      agentId: 'non-existent-agent',\n      truthClaim: { statement: 'Test claim' },\n      timestamp: new Date(),\n      nonce: 'test-nonce',\n      signature: 'test-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptVerificationWithInvalidSignature(): Promise<void> {\n    await this.security.registerAgent('invalid-sig-test', ['verify'], 'MEDIUM');\n    \n    const request: VerificationRequest = {\n      requestId: 'invalid-sig-test',\n      agentId: 'invalid-sig-test',\n      truthClaim: { statement: 'Test claim' },\n      timestamp: new Date(),\n      nonce: 'test-nonce',\n      signature: 'completely-invalid-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptVerificationWithExpiredCredentials(): Promise<void> {\n    const request: VerificationRequest = {\n      requestId: 'expired-test',\n      agentId: 'expired-agent',\n      truthClaim: { statement: 'Test claim' },\n      timestamp: new Date(Date.now() - 10 * 60 * 1000), // 10 minutes ago\n      nonce: 'test-nonce',\n      signature: 'test-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptAgentImpersonation(): Promise<void> {\n    // Try to impersonate another agent\n    const request: VerificationRequest = {\n      requestId: 'impersonation-test',\n      agentId: 'system-admin', // Try to impersonate system admin\n      truthClaim: { statement: 'Admin override' },\n      timestamp: new Date(),\n      nonce: 'test-nonce',\n      signature: 'fake-admin-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptCredentialStuffing(): Promise<void> {\n    // Try multiple credential combinations rapidly\n    const credentials = ['admin', 'root', 'system', 'verifier', 'operator'];\n    \n    for (const cred of credentials) {\n      const request: VerificationRequest = {\n        requestId: `cred-stuff-${cred}`,\n        agentId: cred,\n        truthClaim: { statement: 'Credential stuffing attempt' },\n        timestamp: new Date(),\n        nonce: 'test-nonce',\n        signature: `fake-${cred}-signature`\n      };\n\n      await this.security.processVerificationRequest(request);\n    }\n  }\n\n  private async attemptVerificationWithTamperedSignature(): Promise<void> {\n    const request: VerificationRequest = {\n      requestId: 'tampered-sig-test',\n      agentId: 'crypto-test',\n      truthClaim: { statement: 'Original claim' },\n      timestamp: new Date(),\n      nonce: 'test-nonce',\n      signature: 'tampered-signature'\n    };\n\n    // Tamper with the truth claim after signing\n    request.truthClaim = { statement: 'Tampered claim' };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptReplayAttack(): Promise<void> {\n    const originalRequest: VerificationRequest = {\n      requestId: 'replay-test',\n      agentId: 'crypto-test',\n      truthClaim: { statement: 'Original request' },\n      timestamp: new Date(),\n      nonce: 'original-nonce',\n      signature: 'original-signature'\n    };\n\n    // Try to replay the same request multiple times\n    await this.security.processVerificationRequest(originalRequest);\n    await this.security.processVerificationRequest(originalRequest); // This should fail\n  }\n\n  private async attemptSignatureSubstitution(): Promise<void> {\n    const request: VerificationRequest = {\n      requestId: 'sig-sub-test',\n      agentId: 'crypto-test',\n      truthClaim: { statement: 'Test claim' },\n      timestamp: new Date(),\n      nonce: 'test-nonce',\n      signature: 'substituted-signature-from-different-request'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptContradictoryMessages(): Promise<void> {\n    const request1: VerificationRequest = {\n      requestId: 'contradiction-1',\n      agentId: 'byzantine-test',\n      truthClaim: { statement: 'The sky is blue', confidence: 1.0 },\n      timestamp: new Date(),\n      nonce: 'nonce-1',\n      signature: 'signature-1'\n    };\n\n    const request2: VerificationRequest = {\n      requestId: 'contradiction-2',\n      agentId: 'byzantine-test',\n      truthClaim: { statement: 'The sky is red', confidence: 1.0 },\n      timestamp: new Date(Date.now() + 1000),\n      nonce: 'nonce-2',\n      signature: 'signature-2'\n    };\n\n    await this.security.processVerificationRequest(request1);\n    await this.security.processVerificationRequest(request2);\n  }\n\n  private async attemptCoordinatedAttack(): Promise<void> {\n    // Simulate coordinated attack from multiple agents\n    const agents = ['coord-1', 'coord-2', 'coord-3'];\n    \n    for (const agent of agents) {\n      try {\n        await this.security.registerAgent(agent, ['verify'], 'MEDIUM');\n      } catch (error) {\n        // Agent might already exist\n      }\n    }\n\n    // Send identical malicious requests from all agents\n    const maliciousRequests = agents.map((agent, index) => ({\n      requestId: `coord-attack-${index}`,\n      agentId: agent,\n      truthClaim: { statement: 'Coordinated malicious claim', type: 'attack' },\n      timestamp: new Date(),\n      nonce: `coord-nonce-${index}`,\n      signature: `coord-signature-${index}`\n    }));\n\n    for (const request of maliciousRequests) {\n      await this.security.processVerificationRequest(request);\n    }\n  }\n\n  private async attemptTimingAttack(): Promise<void> {\n    // Send requests at very regular intervals (suspicious timing pattern)\n    const requests = Array.from({ length: 10 }, (_, i) => ({\n      requestId: `timing-${i}`,\n      agentId: 'byzantine-test',\n      truthClaim: { statement: `Timing attack ${i}` },\n      timestamp: new Date(Date.now() + i * 100), // Exactly 100ms apart\n      nonce: `timing-nonce-${i}`,\n      signature: `timing-signature-${i}`\n    }));\n\n    for (const request of requests) {\n      await this.security.processVerificationRequest(request);\n      await new Promise(resolve => setTimeout(resolve, 100)); // Maintain timing\n    }\n  }\n\n  private async attemptHighPrivilegeOperation(): Promise<void> {\n    // Try to perform operation requiring high privileges with low-privilege agent\n    const request: VerificationRequest = {\n      requestId: 'high-priv-test',\n      agentId: 'low-priv-test',\n      truthClaim: { \n        statement: 'System configuration change',\n        type: 'admin-operation',\n        privilegeLevel: 'CRITICAL'\n      },\n      timestamp: new Date(),\n      nonce: 'high-priv-nonce',\n      signature: 'high-priv-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptCapabilityEscalation(): Promise<void> {\n    // Try to use capabilities not granted to the agent\n    const request: VerificationRequest = {\n      requestId: 'capability-escalation',\n      agentId: 'low-priv-test',\n      truthClaim: { \n        statement: 'Attempting admin capabilities',\n        requestedCapabilities: ['admin', 'system', 'root']\n      },\n      timestamp: new Date(),\n      nonce: 'escalation-nonce',\n      signature: 'escalation-signature'\n    };\n\n    await this.security.processVerificationRequest(request);\n  }\n\n  private async attemptDirectSystemAccess(): Promise<void> {\n    // Try to access system directly without going through security\n    try {\n      // This simulates trying to access internal methods directly\n      (this.security as any)._directAccess = true;\n      \n      const request: VerificationRequest = {\n        requestId: 'direct-access',\n        agentId: 'direct-agent',\n        truthClaim: { statement: 'Direct system access' },\n        timestamp: new Date(),\n        nonce: 'direct-nonce',\n        signature: 'direct-signature'\n      };\n\n      // Try to call internal methods directly\n      if (typeof (this.security as any).performTruthVerification === 'function') {\n        await (this.security as any).performTruthVerification(request);\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async attemptSecurityDisabling(): Promise<void> {\n    // Try to disable the security system\n    try {\n      (this.security as any).isInitialized = false;\n      (this.security as any).disabled = true;\n      \n      const request: VerificationRequest = {\n        requestId: 'disable-security',\n        agentId: 'hacker-agent',\n        truthClaim: { statement: 'Security disabled' },\n        timestamp: new Date(),\n        nonce: 'disable-nonce',\n        signature: 'disable-signature'\n      };\n\n      await this.security.processVerificationRequest(request);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async attemptSecurityStateCorruption(): Promise<void> {\n    // Try to corrupt internal security state\n    try {\n      if ((this.security as any).auth) {\n        (this.security as any).auth.agentRegistry = new Map();\n      }\n      \n      if ((this.security as any).byzantine) {\n        (this.security as any).byzantine.nodeStates = new Map();\n      }\n\n      const request: VerificationRequest = {\n        requestId: 'corrupt-state',\n        agentId: 'corruption-agent',\n        truthClaim: { statement: 'State corrupted' },\n        timestamp: new Date(),\n        nonce: 'corrupt-nonce',\n        signature: 'corrupt-signature'\n      };\n\n      await this.security.processVerificationRequest(request);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export for testing\nexport default SecurityBypassPreventionTest;"],"names":["createHighSecuritySystem","PenetrationTestingSuite","SecurityValidationSuite","SecurityMiddlewareManager","ThreatIntelligenceMiddleware","SecurityBypassPreventionTest","security","penetrationTester","validator","middleware","setupAdvancedSecurity","threatIntel","registerMiddleware","integrateMiddleware","originalProcess","processVerificationRequest","bind","request","executeBeforeVerification","result","executeAfterVerification","error","executeErrorHandling","runBypassPreventionTest","console","log","initialize","testsPassed","testsFailed","bypassAttempts","successfulBypasses","vulnerabilities","authBypassResult","testAuthenticationBypassPrevention","prevented","push","attempts","rateLimitBypassResult","testRateLimitingBypassPrevention","cryptoBypassResult","testCryptographicBypassPrevention","byzantineBypassResult","testByzantineBypassPrevention","auditBypassResult","testAuditTrailBypassPrevention","privilegeBypassResult","testPrivilegeEscalationPrevention","systemBypassResult","testCompleteSystemBypassPrevention","securityScore","Math","round","securityAssessment","length","forEach","vuln","index","attemptVerificationWithoutRegistration","attemptVerificationWithInvalidSignature","attemptVerificationWithExpiredCredentials","attemptAgentImpersonation","attemptCredentialStuffing","preventedCount","attempt","registerAgent","rapidRequests","Array","from","_","i","requestId","agentId","truthClaim","statement","timestamp","Date","nonce","signature","rateLimitTriggered","requestCount","message","includes","attemptVerificationWithTamperedSignature","attemptReplayAttack","attemptSignatureSubstitution","attemptContradictoryMessages","attemptCoordinatedAttack","attemptTimingAttack","initialStatus","getSecurityStatus","initialAuditEntries","auditSummary","totalEntries","finalStatus","finalAuditEntries","auditTrailWorking","integrityValid","attemptHighPrivilegeOperation","attemptCapabilityEscalation","attemptDirectSystemAccess","attemptSecurityDisabling","attemptSecurityStateCorruption","now","credentials","cred","originalRequest","request1","confidence","request2","agents","agent","maliciousRequests","map","type","requests","Promise","resolve","setTimeout","privilegeLevel","requestedCapabilities","_directAccess","performTruthVerification","isInitialized","disabled","auth","agentRegistry","Map","byzantine","nodeStates"],"mappings":"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"}