{"version":3,"sources":["../../../src/verification/simple-hooks.ts"],"sourcesContent":["/**\n * Simplified Verification Hooks\n * \n * A simplified version to avoid TypeScript compiler issues\n */\n\nimport { Logger } from '../core/logger.js';\nimport { agenticHookManager } from '../services/agentic-flow-hooks/index.js';\nimport type {\n  AgenticHookContext,\n  HookHandlerResult,\n  HookRegistration,\n  WorkflowHookPayload,\n} from '../services/agentic-flow-hooks/types.js';\n\nconst logger = new Logger({\n  level: 'info',\n  format: 'text',\n  destination: 'console'\n}, { prefix: 'SimpleVerificationHooks' });\n\n// ===== Simple Types =====\n\nexport interface SimpleVerificationConfig {\n  enabled: boolean;\n  logLevel: 'info' | 'debug' | 'warn' | 'error';\n}\n\nexport interface SimpleVerificationResult {\n  success: boolean;\n  message: string;\n  details?: any;\n}\n\n// ===== Simple Verification Hook Manager =====\n\nexport class SimpleVerificationHookManager {\n  private config: SimpleVerificationConfig;\n\n  constructor(config: Partial<SimpleVerificationConfig> = {}) {\n    this.config = {\n      enabled: true,\n      logLevel: 'info',\n      ...config\n    };\n    \n    if (this.config.enabled) {\n      this.registerSimpleHooks();\n    }\n  }\n\n  private registerSimpleHooks(): void {\n    // Simple pre-task hook\n    const preTaskHook: HookRegistration = {\n      id: 'simple-verification-pre-task',\n      type: 'workflow-start',\n      priority: 100,\n      handler: async (payload: WorkflowHookPayload, context: AgenticHookContext): Promise<HookHandlerResult> => {\n        logger.info('üîç Pre-task verification starting...');\n        \n        try {\n          const result = await this.runSimpleChecks(payload, context);\n          \n          if (result.success) {\n            logger.info('‚úÖ Pre-task verification passed');\n            return {\n              continue: true,\n              metadata: {\n                verificationPassed: true,\n                message: result.message\n              }\n            };\n          } else {\n            logger.warn('‚ö†Ô∏è Pre-task verification failed:', result.message);\n            return {\n              continue: true, // Continue with warnings\n              metadata: {\n                verificationFailed: true,\n                message: result.message\n              }\n            };\n          }\n        } catch (error) {\n          logger.error('‚ùå Pre-task verification error:', error);\n          return {\n            continue: true,\n            metadata: {\n              verificationError: true,\n              error: (error as Error).message\n            }\n          };\n        }\n      }\n    };\n\n    // Simple post-task hook\n    const postTaskHook: HookRegistration = {\n      id: 'simple-verification-post-task',\n      type: 'workflow-complete',\n      priority: 90,\n      handler: async (payload: WorkflowHookPayload, context: AgenticHookContext): Promise<HookHandlerResult> => {\n        logger.info('üîç Post-task verification starting...');\n        \n        try {\n          const result = await this.runSimpleValidation(payload, context);\n          \n          logger.info(`‚úÖ Post-task verification completed: ${result.message}`);\n          return {\n            continue: true,\n            metadata: {\n              validationComplete: true,\n              success: result.success,\n              message: result.message\n            }\n          };\n        } catch (error) {\n          logger.error('‚ùå Post-task verification error:', error);\n          return {\n            continue: true,\n            metadata: {\n              validationError: true,\n              error: (error as Error).message\n            }\n          };\n        }\n      }\n    };\n\n    // Register hooks\n    agenticHookManager.register(preTaskHook);\n    agenticHookManager.register(postTaskHook);\n    \n    logger.info('Simple verification hooks registered successfully');\n  }\n\n  private async runSimpleChecks(\n    payload: WorkflowHookPayload, \n    context: AgenticHookContext\n  ): Promise<SimpleVerificationResult> {\n    // Simple environment check\n    const nodeEnv = process.env.NODE_ENV;\n    if (!nodeEnv) {\n      return {\n        success: false,\n        message: 'NODE_ENV environment variable not set',\n        details: { missing: ['NODE_ENV'] }\n      };\n    }\n\n    // Simple memory check\n    const memUsage = process.memoryUsage();\n    const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\n    if (heapUsedMB > 1000) { // More than 1GB\n      return {\n        success: false,\n        message: `High memory usage detected: ${heapUsedMB.toFixed(2)}MB`,\n        details: { memoryUsage: heapUsedMB }\n      };\n    }\n\n    return {\n      success: true,\n      message: 'All pre-task checks passed',\n      details: {\n        nodeEnv,\n        memoryUsage: heapUsedMB\n      }\n    };\n  }\n\n  private async runSimpleValidation(\n    payload: WorkflowHookPayload, \n    context: AgenticHookContext\n  ): Promise<SimpleVerificationResult> {\n    // Simple validation - check if workflow has state\n    if (!payload.state || Object.keys(payload.state).length === 0) {\n      return {\n        success: false,\n        message: 'Workflow completed with empty state',\n        details: { state: payload.state }\n      };\n    }\n\n    // Check for errors in metadata\n    if (payload.error) {\n      return {\n        success: false,\n        message: 'Workflow completed with errors',\n        details: { error: payload.error }\n      };\n    }\n\n    return {\n      success: true,\n      message: 'Post-task validation passed',\n      details: { \n        stateKeys: Object.keys(payload.state),\n        timestamp: Date.now()\n      }\n    };\n  }\n\n  public getStatus(): any {\n    return {\n      enabled: this.config.enabled,\n      hooksRegistered: this.config.enabled ? 2 : 0,\n      config: this.config\n    };\n  }\n\n  public updateConfig(newConfig: Partial<SimpleVerificationConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    logger.info('Simple verification configuration updated', this.config);\n  }\n}\n\n// Export singleton instance\nexport const simpleVerificationHookManager = new SimpleVerificationHookManager();\n\n// Initialize\nlogger.info('Simple verification hooks module initialized');"],"names":["Logger","agenticHookManager","logger","level","format","destination","prefix","SimpleVerificationHookManager","config","enabled","logLevel","registerSimpleHooks","preTaskHook","id","type","priority","handler","payload","context","info","result","runSimpleChecks","success","continue","metadata","verificationPassed","message","warn","verificationFailed","error","verificationError","postTaskHook","runSimpleValidation","validationComplete","validationError","register","nodeEnv","process","env","NODE_ENV","details","missing","memUsage","memoryUsage","heapUsedMB","heapUsed","toFixed","state","Object","keys","length","stateKeys","timestamp","Date","now","getStatus","hooksRegistered","updateConfig","newConfig","simpleVerificationHookManager"],"mappings":"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"}