{"version":3,"sources":["../../../src/verification/dashboard-exporter.ts"],"sourcesContent":["/**\n * Dashboard Exporter - Advanced data visualization and export system\n * \n * Provides comprehensive dashboard generation, real-time data export,\n * and visualization capabilities for truth telemetry metrics.\n */\n\nimport type { ILogger } from '../core/logger.js';\nimport type {\n  DashboardData,\n  DataPoint,\n  AgentPerformanceChart,\n  ErrorDistributionChart,\n  SystemLoadChart,\n  AgentRanking,\n  CriticalIssue,\n  SystemInsight,\n  TruthMetric,\n  AgentTruthScore,\n  SystemTruthMetrics,\n  TruthAlert,\n  TruthTelemetryConfig,\n} from './telemetry.js';\n\nexport interface DashboardConfiguration {\n  title: string;\n  description: string;\n  refreshInterval: number;\n  timeRange: {\n    default: string; // '1h', '24h', '7d', '30d'\n    options: string[];\n  };\n  panels: DashboardPanel[];\n  filters: DashboardFilter[];\n  layout: DashboardLayout;\n  styling: DashboardStyling;\n}\n\nexport interface DashboardPanel {\n  id: string;\n  title: string;\n  type: 'chart' | 'table' | 'stat' | 'gauge' | 'heatmap' | 'timeline' | 'alert';\n  chartType?: 'line' | 'bar' | 'pie' | 'scatter' | 'area' | 'histogram';\n  dataSource: string;\n  query: string;\n  position: { x: number; y: number; width: number; height: number };\n  config: PanelConfiguration;\n  drillDown?: DrillDownConfig;\n}\n\nexport interface PanelConfiguration {\n  yAxis?: {\n    min?: number;\n    max?: number;\n    label?: string;\n    scale?: 'linear' | 'logarithmic';\n  };\n  xAxis?: {\n    label?: string;\n    format?: string;\n  };\n  colors?: string[];\n  thresholds?: Array<{\n    value: number;\n    color: string;\n    condition: 'gt' | 'lt' | 'eq';\n  }>;\n  aggregation?: 'sum' | 'avg' | 'min' | 'max' | 'count' | 'p50' | 'p95' | 'p99';\n  groupBy?: string[];\n  orderBy?: { field: string; direction: 'asc' | 'desc' };\n  limit?: number;\n  format?: {\n    decimals?: number;\n    unit?: string;\n    prefix?: string;\n    suffix?: string;\n  };\n}\n\nexport interface DrillDownConfig {\n  enabled: boolean;\n  target: string; // dashboard ID or URL\n  parameters: Record<string, string>;\n}\n\nexport interface DashboardFilter {\n  id: string;\n  name: string;\n  type: 'dropdown' | 'text' | 'date' | 'range' | 'multiselect';\n  field: string;\n  options?: Array<{ label: string; value: string }>;\n  defaultValue?: any;\n  dependencies?: string[]; // Other filter IDs this depends on\n}\n\nexport interface DashboardLayout {\n  type: 'grid' | 'flow' | 'tabs';\n  gridSize: { columns: number; rows: number };\n  responsive: boolean;\n  breakpoints: Record<string, { columns: number; margin: number; padding: number }>;\n}\n\nexport interface DashboardStyling {\n  theme: 'light' | 'dark' | 'auto';\n  primaryColor: string;\n  secondaryColor: string;\n  backgroundColor: string;\n  textColor: string;\n  borderColor: string;\n  fontFamily: string;\n  fontSize: {\n    small: string;\n    medium: string;\n    large: string;\n  };\n}\n\nexport interface ExportFormat {\n  type: 'json' | 'csv' | 'excel' | 'pdf' | 'png' | 'svg' | 'prometheus';\n  options: {\n    compression?: 'none' | 'gzip' | 'brotli';\n    delimiter?: string; // for CSV\n    orientation?: 'portrait' | 'landscape'; // for PDF\n    quality?: number; // for images\n    width?: number;\n    height?: number;\n  };\n}\n\nexport interface ReportTemplate {\n  id: string;\n  name: string;\n  description: string;\n  type: 'executive' | 'technical' | 'operational' | 'compliance';\n  schedule?: {\n    frequency: 'hourly' | 'daily' | 'weekly' | 'monthly';\n    time?: string; // HH:MM\n    dayOfWeek?: number; // 0-6\n    dayOfMonth?: number; // 1-31\n  };\n  recipients: string[];\n  format: ExportFormat;\n  sections: ReportSection[];\n}\n\nexport interface ReportSection {\n  title: string;\n  type: 'summary' | 'chart' | 'table' | 'text' | 'alert_summary';\n  query?: string;\n  template?: string;\n  config?: Record<string, any>;\n}\n\nexport interface VisualizationData {\n  series: DataSeries[];\n  annotations: Annotation[];\n  metadata: VisualizationMetadata;\n}\n\nexport interface DataSeries {\n  name: string;\n  data: DataPoint[];\n  type: 'line' | 'bar' | 'area' | 'scatter';\n  color?: string;\n  yAxis?: 'left' | 'right';\n  visible: boolean;\n  style?: {\n    lineWidth?: number;\n    fillOpacity?: number;\n    markerSize?: number;\n  };\n}\n\nexport interface Annotation {\n  type: 'line' | 'band' | 'point' | 'text';\n  timestamp?: Date;\n  startTime?: Date;\n  endTime?: Date;\n  value?: number;\n  text?: string;\n  color?: string;\n  style?: 'solid' | 'dashed' | 'dotted';\n}\n\nexport interface VisualizationMetadata {\n  title: string;\n  subtitle?: string;\n  yAxisLabel?: string;\n  xAxisLabel?: string;\n  timeRange: { start: Date; end: Date };\n  dataPoints: number;\n  lastUpdated: Date;\n  aggregationLevel: string;\n}\n\nexport class DashboardExporter {\n  private config: TruthTelemetryConfig;\n  private logger: ILogger;\n  \n  // Dashboard management\n  private dashboards = new Map<string, DashboardConfiguration>();\n  private reportTemplates = new Map<string, ReportTemplate>();\n  private scheduledReports = new Map<string, NodeJS.Timeout>();\n  \n  // Data processing\n  private dataProcessors = new Map<string, DataProcessor>();\n  private visualizationCache = new Map<string, VisualizationData>();\n  \n  // Export state\n  private exportQueue: ExportJob[] = [];\n  private activeExports = new Set<string>();\n  \n  constructor(config: TruthTelemetryConfig, logger: ILogger) {\n    this.config = config;\n    this.logger = logger;\n    \n    this.initializeDataProcessors();\n    this.initializeDefaultDashboards();\n  }\n  \n  async initialize(): Promise<void> {\n    this.logger.info('Initializing Dashboard Exporter', {\n      dashboardEnabled: this.config.dashboardEnabled,\n      exportFormat: this.config.exportFormat,\n    });\n    \n    // Load dashboard configurations\n    await this.loadDashboardConfigurations();\n    \n    // Start scheduled reports\n    this.startScheduledReports();\n    \n    this.logger.info('Dashboard Exporter initialized successfully', {\n      dashboards: this.dashboards.size,\n      reportTemplates: this.reportTemplates.size,\n    });\n  }\n  \n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Dashboard Exporter');\n    \n    // Stop scheduled reports\n    this.stopScheduledReports();\n    \n    // Wait for active exports to complete\n    await this.waitForActiveExports();\n    \n    // Save configurations\n    await this.saveDashboardConfigurations();\n    \n    this.logger.info('Dashboard Exporter shutdown complete');\n  }\n  \n  // ========================================================================================\n  // Dashboard Generation\n  // ========================================================================================\n  \n  async generateDashboard(data: {\n    systemMetrics: SystemTruthMetrics;\n    agentScores: AgentTruthScore[];\n    truthMetrics: TruthMetric[];\n    activeAlerts: TruthAlert[];\n  }): Promise<DashboardData> {\n    try {\n      // Generate summary statistics\n      const summary = await this.generateSummary(data);\n      \n      // Generate charts\n      const charts = await this.generateCharts(data);\n      \n      // Generate tables\n      const tables = await this.generateTables(data);\n      \n      // Generate insights\n      const insights = await this.generateInsights(data);\n      \n      const dashboardData: DashboardData = {\n        timestamp: new Date(),\n        summary,\n        charts,\n        tables,\n        insights,\n      };\n      \n      // Cache the result\n      this.cacheDashboardData(dashboardData);\n      \n      return dashboardData;\n      \n    } catch (error) {\n      this.logger.error('Error generating dashboard', error);\n      throw error;\n    }\n  }\n  \n  private async generateSummary(data: any): Promise<DashboardData['summary']> {\n    const { systemMetrics, agentScores, activeAlerts } = data;\n    \n    // Calculate overall system health\n    const healthScore = this.calculateOverallHealth(systemMetrics, agentScores);\n    \n    return {\n      overallHealth: healthScore,\n      truthAccuracy: systemMetrics.overallAccuracy,\n      humanInterventionRate: systemMetrics.humanInterventionRate,\n      systemEfficiency: systemMetrics.efficiency,\n      alertCount: activeAlerts.length,\n    };\n  }\n  \n  private async generateCharts(data: any): Promise<DashboardData['charts']> {\n    const { systemMetrics, agentScores, truthMetrics, activeAlerts } = data;\n    \n    return {\n      accuracyTrend: await this.generateAccuracyTrend(truthMetrics),\n      interventionTrend: await this.generateInterventionTrend(truthMetrics),\n      agentPerformance: await this.generateAgentPerformanceChart(agentScores),\n      errorDistribution: await this.generateErrorDistribution(truthMetrics),\n      systemLoad: await this.generateSystemLoadChart(systemMetrics),\n    };\n  }\n  \n  private async generateTables(data: any): Promise<DashboardData['tables']> {\n    const { agentScores, activeAlerts } = data;\n    \n    return {\n      topPerformers: await this.generateTopPerformers(agentScores),\n      recentAlerts: activeAlerts.slice(-10).map(this.formatAlertForTable),\n      criticalIssues: await this.generateCriticalIssues(data),\n    };\n  }\n  \n  private async generateInsights(data: any): Promise<SystemInsight[]> {\n    const insights: SystemInsight[] = [];\n    \n    // Performance insights\n    const performanceInsight = await this.analyzePerformanceInsights(data);\n    if (performanceInsight) insights.push(performanceInsight);\n    \n    // Efficiency insights\n    const efficiencyInsight = await this.analyzeEfficiencyInsights(data);\n    if (efficiencyInsight) insights.push(efficiencyInsight);\n    \n    // Quality insights\n    const qualityInsight = await this.analyzeQualityInsights(data);\n    if (qualityInsight) insights.push(qualityInsight);\n    \n    // Risk insights\n    const riskInsight = await this.analyzeRiskInsights(data);\n    if (riskInsight) insights.push(riskInsight);\n    \n    return insights;\n  }\n  \n  // ========================================================================================\n  // Chart Generation\n  // ========================================================================================\n  \n  private async generateAccuracyTrend(truthMetrics: TruthMetric[]): Promise<DataPoint[]> {\n    const accuracyMetrics = truthMetrics\n      .filter(m => m.metricType === 'accuracy')\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n    \n    // Group by time intervals (hourly)\n    const hourlyData = new Map<number, number[]>();\n    \n    accuracyMetrics.forEach(metric => {\n      const hour = Math.floor(metric.timestamp.getTime() / (60 * 60 * 1000)) * (60 * 60 * 1000);\n      if (!hourlyData.has(hour)) {\n        hourlyData.set(hour, []);\n      }\n      hourlyData.get(hour)!.push(metric.value);\n    });\n    \n    // Calculate hourly averages\n    const dataPoints: DataPoint[] = [];\n    for (const [hour, values] of hourlyData) {\n      const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n      dataPoints.push({\n        timestamp: new Date(hour),\n        value: average,\n        label: `${values.length} samples`,\n      });\n    }\n    \n    return dataPoints.slice(-24); // Last 24 hours\n  }\n  \n  private async generateInterventionTrend(truthMetrics: TruthMetric[]): Promise<DataPoint[]> {\n    const hourlyData = new Map<number, { total: number; interventions: number }>();\n    \n    truthMetrics.forEach(metric => {\n      const hour = Math.floor(metric.timestamp.getTime() / (60 * 60 * 1000)) * (60 * 60 * 1000);\n      if (!hourlyData.has(hour)) {\n        hourlyData.set(hour, { total: 0, interventions: 0 });\n      }\n      \n      const data = hourlyData.get(hour)!;\n      data.total++;\n      \n      if (metric.context.verificationMethod === 'human' || metric.context.verificationMethod === 'hybrid') {\n        data.interventions++;\n      }\n    });\n    \n    const dataPoints: DataPoint[] = [];\n    for (const [hour, data] of hourlyData) {\n      const rate = data.total > 0 ? data.interventions / data.total : 0;\n      dataPoints.push({\n        timestamp: new Date(hour),\n        value: rate,\n        label: `${data.interventions}/${data.total}`,\n      });\n    }\n    \n    return dataPoints.slice(-24);\n  }\n  \n  private async generateAgentPerformanceChart(agentScores: AgentTruthScore[]): Promise<AgentPerformanceChart[]> {\n    return agentScores\n      .sort((a, b) => b.overallScore - a.overallScore)\n      .slice(0, 20) // Top 20 agents\n      .map(score => {\n        const recentWindow = score.recentPerformance.find(w => w.period === 'recent');\n        const trend = this.calculateTrend(score.trends);\n        \n        return {\n          agentId: score.agentId,\n          score: score.overallScore,\n          trend,\n          tasks: recentWindow?.metrics.totalTasks || 0,\n          accuracy: score.components.accuracy,\n        };\n      });\n  }\n  \n  private async generateErrorDistribution(truthMetrics: TruthMetric[]): Promise<ErrorDistributionChart[]> {\n    const errorCounts = new Map<string, number>();\n    const severityCounts = new Map<string, number>();\n    \n    let totalErrors = 0;\n    \n    truthMetrics.forEach(metric => {\n      metric.validation.errors.forEach(error => {\n        totalErrors++;\n        \n        // Count by error type\n        errorCounts.set(error.type, (errorCounts.get(error.type) || 0) + 1);\n        \n        // Count by severity\n        severityCounts.set(error.severity, (severityCounts.get(error.severity) || 0) + 1);\n      });\n    });\n    \n    const distribution: ErrorDistributionChart[] = [];\n    \n    // Add error types\n    for (const [errorType, count] of errorCounts) {\n      distribution.push({\n        category: errorType,\n        count,\n        percentage: totalErrors > 0 ? (count / totalErrors) * 100 : 0,\n        severity: 'mixed',\n      });\n    }\n    \n    return distribution.sort((a, b) => b.count - a.count).slice(0, 10);\n  }\n  \n  private async generateSystemLoadChart(systemMetrics: SystemTruthMetrics): Promise<SystemLoadChart[]> {\n    // Generate synthetic load data (would typically come from time-series DB)\n    const dataPoints: SystemLoadChart[] = [];\n    const now = Date.now();\n    const hourMs = 60 * 60 * 1000;\n    \n    for (let i = 23; i >= 0; i--) {\n      const timestamp = new Date(now - (i * hourMs));\n      \n      // Simulate load variation\n      const baseLoad = systemMetrics.totalTasks / 24; // Average per hour\n      const variation = (Math.random() - 0.5) * 0.3; // ±30% variation\n      const load = Math.max(0, baseLoad * (1 + variation));\n      \n      const capacity = systemMetrics.agentCount * 10; // 10 tasks per agent per hour\n      const utilization = capacity > 0 ? Math.min(1, load / capacity) : 0;\n      \n      dataPoints.push({\n        timestamp,\n        load,\n        capacity,\n        utilization,\n      });\n    }\n    \n    return dataPoints;\n  }\n  \n  // ========================================================================================\n  // Table Generation\n  // ========================================================================================\n  \n  private async generateTopPerformers(agentScores: AgentTruthScore[]): Promise<AgentRanking[]> {\n    return agentScores\n      .sort((a, b) => b.overallScore - a.overallScore)\n      .slice(0, 10)\n      .map((score, index) => {\n        const recentWindow = score.recentPerformance.find(w => w.period === 'recent');\n        \n        return {\n          rank: index + 1,\n          agentId: score.agentId,\n          score: score.overallScore,\n          tasks: recentWindow?.metrics.totalTasks || 0,\n          accuracy: score.components.accuracy,\n          efficiency: score.components.efficiency,\n        };\n      });\n  }\n  \n  private formatAlertForTable = (alert: TruthAlert): any => ({\n    id: alert.id,\n    timestamp: alert.timestamp,\n    severity: alert.severity,\n    type: alert.type,\n    message: alert.message.substring(0, 100) + (alert.message.length > 100 ? '...' : ''),\n    source: alert.source,\n    resolved: alert.resolved,\n  });\n  \n  private async generateCriticalIssues(data: any): Promise<CriticalIssue[]> {\n    const { systemMetrics, agentScores, activeAlerts } = data;\n    const issues: CriticalIssue[] = [];\n    \n    // System-wide issues\n    if (systemMetrics.overallAccuracy < 0.9) {\n      issues.push({\n        id: 'system-accuracy-low',\n        severity: 'critical',\n        description: `System accuracy (${(systemMetrics.overallAccuracy * 100).toFixed(1)}%) below target`,\n        affectedAgents: ['system-wide'],\n        impact: 'High risk of incorrect outputs across all agents',\n        eta: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n      });\n    }\n    \n    // Agent-specific issues\n    const problematicAgents = agentScores.filter(score => \n      score.riskAssessment.level === 'critical' || score.riskAssessment.level === 'high'\n    );\n    \n    if (problematicAgents.length > 0) {\n      issues.push({\n        id: 'agents-at-risk',\n        severity: problematicAgents.some(a => a.riskAssessment.level === 'critical') ? 'critical' : 'high',\n        description: `${problematicAgents.length} agents at risk`,\n        affectedAgents: problematicAgents.map(a => a.agentId),\n        impact: 'Reduced system reliability and increased intervention needs',\n        eta: new Date(Date.now() + 12 * 60 * 60 * 1000), // 12 hours\n      });\n    }\n    \n    // Alert-based issues\n    const criticalAlerts = activeAlerts.filter(a => a.severity === 'critical' || a.severity === 'emergency');\n    if (criticalAlerts.length > 5) {\n      issues.push({\n        id: 'high-alert-volume',\n        severity: 'high',\n        description: `${criticalAlerts.length} critical alerts active`,\n        affectedAgents: [...new Set(criticalAlerts.map(a => a.source))],\n        impact: 'System may be overwhelmed, requiring immediate attention',\n        eta: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 hours\n      });\n    }\n    \n    return issues.slice(0, 5); // Top 5 issues\n  }\n  \n  // ========================================================================================\n  // Insight Generation\n  // ========================================================================================\n  \n  private async analyzePerformanceInsights(data: any): Promise<SystemInsight | null> {\n    const { systemMetrics, agentScores } = data;\n    \n    const avgScore = agentScores.length > 0 ? \n      agentScores.reduce((sum, s) => sum + s.overallScore, 0) / agentScores.length : 0;\n    \n    if (avgScore < 0.8) {\n      return {\n        type: 'performance',\n        title: 'Performance Below Target',\n        description: `Average agent performance (${(avgScore * 100).toFixed(1)}%) is below the 80% target. Consider reviewing agent training or task distribution.`,\n        impact: 'high',\n        actionable: true,\n        recommendations: [\n          'Review agent training data quality',\n          'Analyze common failure patterns',\n          'Consider load balancing adjustments',\n          'Implement performance coaching for underperforming agents',\n        ],\n      };\n    }\n    \n    if (systemMetrics.throughput < 50) { // Assuming 50 tasks/hour target\n      return {\n        type: 'performance',\n        title: 'Low System Throughput',\n        description: `Current throughput (${systemMetrics.throughput.toFixed(1)} tasks/hour) is below expected levels.`,\n        impact: 'medium',\n        actionable: true,\n        recommendations: [\n          'Scale up agent capacity',\n          'Optimize task routing algorithms',\n          'Reduce task complexity where possible',\n        ],\n      };\n    }\n    \n    return null;\n  }\n  \n  private async analyzeEfficiencyInsights(data: any): Promise<SystemInsight | null> {\n    const { systemMetrics } = data;\n    \n    if (systemMetrics.humanInterventionRate > 0.15) {\n      return {\n        type: 'efficiency',\n        title: 'High Human Intervention Rate',\n        description: `Human intervention rate (${(systemMetrics.humanInterventionRate * 100).toFixed(1)}%) exceeds the 10% target, indicating automation gaps.`,\n        impact: 'medium',\n        actionable: true,\n        recommendations: [\n          'Identify common intervention patterns',\n          'Improve agent decision-making capabilities',\n          'Implement better confidence scoring',\n          'Add more automated validation rules',\n        ],\n      };\n    }\n    \n    if (systemMetrics.efficiency < 0.8) {\n      return {\n        type: 'efficiency',\n        title: 'System Efficiency Below Target',\n        description: `Current system efficiency (${(systemMetrics.efficiency * 100).toFixed(1)}%) is below the 80% target.`,\n        impact: 'medium',\n        actionable: true,\n        recommendations: [\n          'Optimize resource allocation',\n          'Reduce task processing overhead',\n          'Implement caching strategies',\n        ],\n      };\n    }\n    \n    return null;\n  }\n  \n  private async analyzeQualityInsights(data: any): Promise<SystemInsight | null> {\n    const { systemMetrics, truthMetrics } = data;\n    \n    if (systemMetrics.overallAccuracy < 0.95) {\n      const recentErrors = truthMetrics\n        .filter(m => m.timestamp > new Date(Date.now() - 24 * 60 * 60 * 1000))\n        .flatMap(m => m.validation.errors);\n      \n      const commonErrors = this.getTopErrorTypes(recentErrors);\n      \n      return {\n        type: 'quality',\n        title: 'Accuracy Below Target',\n        description: `System accuracy (${(systemMetrics.overallAccuracy * 100).toFixed(1)}%) is below the 95% target. Most common error: ${commonErrors[0]?.type || 'unknown'}.`,\n        impact: 'high',\n        actionable: true,\n        recommendations: [\n          `Focus on resolving ${commonErrors[0]?.type || 'common'} errors`,\n          'Implement additional validation checks',\n          'Review training data for bias or gaps',\n          'Consider ensemble approaches for critical tasks',\n        ],\n      };\n    }\n    \n    return null;\n  }\n  \n  private async analyzeRiskInsights(data: any): Promise<SystemInsight | null> {\n    const { agentScores } = data;\n    \n    const highRiskAgents = agentScores.filter(s => \n      s.riskAssessment.level === 'high' || s.riskAssessment.level === 'critical'\n    );\n    \n    if (highRiskAgents.length > agentScores.length * 0.2) { // More than 20% at risk\n      return {\n        type: 'risk',\n        title: 'High Risk Agent Population',\n        description: `${highRiskAgents.length} agents (${((highRiskAgents.length / agentScores.length) * 100).toFixed(1)}%) are classified as high risk.`,\n        impact: 'high',\n        actionable: true,\n        recommendations: [\n          'Implement immediate monitoring for at-risk agents',\n          'Consider redistributing tasks away from high-risk agents',\n          'Investigate common risk factors',\n          'Implement risk mitigation strategies',\n        ],\n      };\n    }\n    \n    return null;\n  }\n  \n  // ========================================================================================\n  // Export System\n  // ========================================================================================\n  \n  async exportDashboard(\n    dashboardId: string,\n    format: ExportFormat,\n    options?: {\n      timeRange?: { start: Date; end: Date };\n      filters?: Record<string, any>;\n    }\n  ): Promise<string> {\n    const exportId = `export-${Date.now()}-${Math.random().toString(36).slice(2)}`;\n    \n    const exportJob: ExportJob = {\n      id: exportId,\n      type: 'dashboard',\n      target: dashboardId,\n      format,\n      options: options || {},\n      status: 'pending',\n      createdAt: new Date(),\n      progress: 0,\n    };\n    \n    this.exportQueue.push(exportJob);\n    this.processExportQueue();\n    \n    return exportId;\n  }\n  \n  async generateReport(templateId: string, options?: Record<string, any>): Promise<string> {\n    const template = this.reportTemplates.get(templateId);\n    if (!template) {\n      throw new Error(`Report template not found: ${templateId}`);\n    }\n    \n    const exportId = `report-${Date.now()}-${Math.random().toString(36).slice(2)}`;\n    \n    const exportJob: ExportJob = {\n      id: exportId,\n      type: 'report',\n      target: templateId,\n      format: template.format,\n      options: options || {},\n      status: 'pending',\n      createdAt: new Date(),\n      progress: 0,\n    };\n    \n    this.exportQueue.push(exportJob);\n    this.processExportQueue();\n    \n    return exportId;\n  }\n  \n  private async processExportQueue(): Promise<void> {\n    if (this.exportQueue.length === 0 || this.activeExports.size >= 3) {\n      return; // No jobs or max concurrent exports reached\n    }\n    \n    const job = this.exportQueue.shift();\n    if (!job) return;\n    \n    this.activeExports.add(job.id);\n    job.status = 'processing';\n    \n    try {\n      const result = await this.executeExportJob(job);\n      job.status = 'completed';\n      job.result = result;\n      job.completedAt = new Date();\n      \n      this.logger.info('Export job completed', {\n        jobId: job.id,\n        type: job.type,\n        format: job.format.type,\n        duration: job.completedAt.getTime() - job.createdAt.getTime(),\n      });\n      \n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : String(error);\n      \n      this.logger.error('Export job failed', {\n        jobId: job.id,\n        error: job.error,\n      });\n    } finally {\n      this.activeExports.delete(job.id);\n      job.progress = 100;\n      \n      // Process next job\n      setTimeout(() => this.processExportQueue(), 100);\n    }\n  }\n  \n  private async executeExportJob(job: ExportJob): Promise<ExportResult> {\n    switch (job.type) {\n      case 'dashboard':\n        return await this.exportDashboardData(job);\n      case 'report':\n        return await this.generateReportData(job);\n      default:\n        throw new Error(`Unknown export type: ${job.type}`);\n    }\n  }\n  \n  private async exportDashboardData(job: ExportJob): Promise<ExportResult> {\n    // Implementation would generate actual export data\n    // For now, returning a placeholder\n    \n    job.progress = 50;\n    \n    const data = {\n      dashboardId: job.target,\n      exportedAt: new Date(),\n      format: job.format.type,\n      data: {}, // Would contain actual dashboard data\n    };\n    \n    job.progress = 100;\n    \n    return {\n      format: job.format.type,\n      size: JSON.stringify(data).length,\n      path: `/exports/${job.id}.${job.format.type}`,\n      data: job.format.type === 'json' ? data : `Exported data (${job.format.type})`,\n    };\n  }\n  \n  private async generateReportData(job: ExportJob): Promise<ExportResult> {\n    const template = this.reportTemplates.get(job.target);\n    if (!template) {\n      throw new Error(`Report template not found: ${job.target}`);\n    }\n    \n    job.progress = 25;\n    \n    // Generate report sections\n    const sections = await Promise.all(\n      template.sections.map(section => this.generateReportSection(section))\n    );\n    \n    job.progress = 75;\n    \n    const reportData = {\n      template: template.name,\n      type: template.type,\n      generatedAt: new Date(),\n      sections,\n    };\n    \n    job.progress = 100;\n    \n    return {\n      format: template.format.type,\n      size: JSON.stringify(reportData).length,\n      path: `/reports/${job.id}.${template.format.type}`,\n      data: reportData,\n    };\n  }\n  \n  private async generateReportSection(section: ReportSection): Promise<any> {\n    switch (section.type) {\n      case 'summary':\n        return { type: 'summary', title: section.title, data: {} };\n      case 'chart':\n        return { type: 'chart', title: section.title, data: [] };\n      case 'table':\n        return { type: 'table', title: section.title, data: [] };\n      case 'text':\n        return { type: 'text', title: section.title, content: section.template || '' };\n      case 'alert_summary':\n        return { type: 'alert_summary', title: section.title, data: [] };\n      default:\n        return { type: 'unknown', title: section.title, data: null };\n    }\n  }\n  \n  // ========================================================================================\n  // Utility Methods\n  // ========================================================================================\n  \n  private calculateOverallHealth(systemMetrics: SystemTruthMetrics, agentScores: AgentTruthScore[]): number {\n    const systemHealth = (\n      systemMetrics.overallAccuracy * 0.4 +\n      systemMetrics.systemReliability * 0.3 +\n      systemMetrics.efficiency * 0.2 +\n      (1 - systemMetrics.humanInterventionRate) * 0.1\n    );\n    \n    const agentHealth = agentScores.length > 0 ?\n      agentScores.reduce((sum, score) => sum + score.overallScore, 0) / agentScores.length : 0.8;\n    \n    return (systemHealth * 0.6) + (agentHealth * 0.4);\n  }\n  \n  private calculateTrend(trends: any[]): 'up' | 'down' | 'stable' {\n    const improvingTrends = trends.filter(t => t.direction === 'improving').length;\n    const decliningTrends = trends.filter(t => t.direction === 'declining').length;\n    \n    if (improvingTrends > decliningTrends) return 'up';\n    if (decliningTrends > improvingTrends) return 'down';\n    return 'stable';\n  }\n  \n  private getTopErrorTypes(errors: any[]): Array<{ type: string; count: number }> {\n    const errorCounts = new Map<string, number>();\n    \n    errors.forEach(error => {\n      errorCounts.set(error.type, (errorCounts.get(error.type) || 0) + 1);\n    });\n    \n    return Array.from(errorCounts.entries())\n      .map(([type, count]) => ({ type, count }))\n      .sort((a, b) => b.count - a.count);\n  }\n  \n  private cacheDashboardData(data: DashboardData): void {\n    // Implement caching logic\n    const cacheKey = `dashboard-${data.timestamp.toISOString()}`;\n    // Would typically use Redis or similar for caching\n  }\n  \n  private initializeDataProcessors(): void {\n    // Initialize data processing functions\n    this.dataProcessors.set('accuracy', new AccuracyProcessor());\n    this.dataProcessors.set('efficiency', new EfficiencyProcessor());\n    this.dataProcessors.set('alerts', new AlertProcessor());\n  }\n  \n  private initializeDefaultDashboards(): void {\n    // Create default dashboard configurations\n    const defaultDashboard: DashboardConfiguration = {\n      title: 'Truth Telemetry Overview',\n      description: 'Comprehensive view of system truth metrics and agent performance',\n      refreshInterval: 30000,\n      timeRange: {\n        default: '24h',\n        options: ['1h', '6h', '24h', '7d', '30d'],\n      },\n      panels: [\n        {\n          id: 'accuracy-trend',\n          title: 'Accuracy Trend',\n          type: 'chart',\n          chartType: 'line',\n          dataSource: 'truthMetrics',\n          query: 'SELECT timestamp, AVG(value) FROM truth_metrics WHERE metric_type = \"accuracy\" GROUP BY hour',\n          position: { x: 0, y: 0, width: 6, height: 4 },\n          config: {\n            yAxis: { min: 0, max: 1, label: 'Accuracy' },\n            colors: ['#2196F3'],\n            thresholds: [\n              { value: 0.95, color: '#4CAF50', condition: 'gt' },\n              { value: 0.9, color: '#FF9800', condition: 'gt' },\n            ],\n          },\n        },\n        {\n          id: 'system-health',\n          title: 'System Health',\n          type: 'stat',\n          dataSource: 'systemMetrics',\n          query: 'SELECT overall_health FROM system_metrics ORDER BY timestamp DESC LIMIT 1',\n          position: { x: 6, y: 0, width: 3, height: 2 },\n          config: {\n            format: { decimals: 1, suffix: '%' },\n            thresholds: [\n              { value: 95, color: '#4CAF50', condition: 'gt' },\n              { value: 80, color: '#FF9800', condition: 'gt' },\n            ],\n          },\n        },\n      ],\n      filters: [\n        {\n          id: 'timeRange',\n          name: 'Time Range',\n          type: 'dropdown',\n          field: 'timestamp',\n          options: [\n            { label: 'Last Hour', value: '1h' },\n            { label: 'Last 24 Hours', value: '24h' },\n            { label: 'Last Week', value: '7d' },\n          ],\n          defaultValue: '24h',\n        },\n      ],\n      layout: {\n        type: 'grid',\n        gridSize: { columns: 12, rows: 8 },\n        responsive: true,\n        breakpoints: {\n          lg: { columns: 12, margin: 16, padding: 16 },\n          md: { columns: 8, margin: 12, padding: 12 },\n          sm: { columns: 4, margin: 8, padding: 8 },\n        },\n      },\n      styling: {\n        theme: 'light',\n        primaryColor: '#2196F3',\n        secondaryColor: '#FFC107',\n        backgroundColor: '#FFFFFF',\n        textColor: '#333333',\n        borderColor: '#E0E0E0',\n        fontFamily: 'Inter, sans-serif',\n        fontSize: {\n          small: '12px',\n          medium: '14px',\n          large: '16px',\n        },\n      },\n    };\n    \n    this.dashboards.set('default', defaultDashboard);\n  }\n  \n  private async loadDashboardConfigurations(): Promise<void> {\n    // Placeholder for loading configurations from storage\n    this.logger.debug('Loading dashboard configurations');\n  }\n  \n  private async saveDashboardConfigurations(): Promise<void> {\n    // Placeholder for saving configurations to storage\n    this.logger.debug('Saving dashboard configurations');\n  }\n  \n  private startScheduledReports(): void {\n    for (const [templateId, template] of this.reportTemplates) {\n      if (template.schedule) {\n        const interval = this.calculateScheduleInterval(template.schedule);\n        if (interval > 0) {\n          const timeout = setInterval(() => {\n            this.generateReport(templateId);\n          }, interval);\n          \n          this.scheduledReports.set(templateId, timeout);\n        }\n      }\n    }\n  }\n  \n  private stopScheduledReports(): void {\n    for (const timeout of this.scheduledReports.values()) {\n      clearInterval(timeout);\n    }\n    this.scheduledReports.clear();\n  }\n  \n  private calculateScheduleInterval(schedule: ReportTemplate['schedule']): number {\n    if (!schedule) return 0;\n    \n    switch (schedule.frequency) {\n      case 'hourly': return 60 * 60 * 1000;\n      case 'daily': return 24 * 60 * 60 * 1000;\n      case 'weekly': return 7 * 24 * 60 * 60 * 1000;\n      case 'monthly': return 30 * 24 * 60 * 60 * 1000;\n      default: return 0;\n    }\n  }\n  \n  private async waitForActiveExports(): Promise<void> {\n    while (this.activeExports.size > 0) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  \n  // ========================================================================================\n  // Public API\n  // ========================================================================================\n  \n  getDashboardConfiguration(dashboardId: string): DashboardConfiguration | undefined {\n    return this.dashboards.get(dashboardId);\n  }\n  \n  getAllDashboards(): DashboardConfiguration[] {\n    return Array.from(this.dashboards.values());\n  }\n  \n  createDashboard(config: Omit<DashboardConfiguration, 'id'>): string {\n    const dashboardId = `dashboard-${Date.now()}`;\n    this.dashboards.set(dashboardId, { ...config } as DashboardConfiguration);\n    return dashboardId;\n  }\n  \n  updateDashboard(dashboardId: string, updates: Partial<DashboardConfiguration>): boolean {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) return false;\n    \n    this.dashboards.set(dashboardId, { ...dashboard, ...updates });\n    return true;\n  }\n  \n  deleteDashboard(dashboardId: string): boolean {\n    return this.dashboards.delete(dashboardId);\n  }\n  \n  getExportStatus(exportId: string): ExportJob | null {\n    return this.exportQueue.find(job => job.id === exportId) || null;\n  }\n  \n  cancelExport(exportId: string): boolean {\n    const jobIndex = this.exportQueue.findIndex(job => job.id === exportId);\n    if (jobIndex >= 0) {\n      this.exportQueue.splice(jobIndex, 1);\n      return true;\n    }\n    return false;\n  }\n}\n\n// ========================================================================================\n// Supporting Classes and Interfaces\n// ========================================================================================\n\ninterface ExportJob {\n  id: string;\n  type: 'dashboard' | 'report';\n  target: string;\n  format: ExportFormat;\n  options: Record<string, any>;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  progress: number;\n  createdAt: Date;\n  completedAt?: Date;\n  result?: ExportResult;\n  error?: string;\n}\n\ninterface ExportResult {\n  format: string;\n  size: number;\n  path: string;\n  data: any;\n}\n\nabstract class DataProcessor {\n  abstract process(data: any, options?: any): Promise<any>;\n}\n\nclass AccuracyProcessor extends DataProcessor {\n  async process(data: TruthMetric[], options?: any): Promise<any> {\n    // Process accuracy-specific data\n    return data.filter(m => m.metricType === 'accuracy');\n  }\n}\n\nclass EfficiencyProcessor extends DataProcessor {\n  async process(data: TruthMetric[], options?: any): Promise<any> {\n    // Process efficiency-specific data\n    return data.filter(m => m.metricType === 'efficiency');\n  }\n}\n\nclass AlertProcessor extends DataProcessor {\n  async process(data: TruthAlert[], options?: any): Promise<any> {\n    // Process alert-specific data\n    return data.filter(a => !a.resolved);\n  }\n}"],"names":["DashboardExporter","config","logger","dashboards","Map","reportTemplates","scheduledReports","dataProcessors","visualizationCache","exportQueue","activeExports","Set","initializeDataProcessors","initializeDefaultDashboards","initialize","info","dashboardEnabled","exportFormat","loadDashboardConfigurations","startScheduledReports","size","shutdown","stopScheduledReports","waitForActiveExports","saveDashboardConfigurations","generateDashboard","data","summary","generateSummary","charts","generateCharts","tables","generateTables","insights","generateInsights","dashboardData","timestamp","Date","cacheDashboardData","error","systemMetrics","agentScores","activeAlerts","healthScore","calculateOverallHealth","overallHealth","truthAccuracy","overallAccuracy","humanInterventionRate","systemEfficiency","efficiency","alertCount","length","truthMetrics","accuracyTrend","generateAccuracyTrend","interventionTrend","generateInterventionTrend","agentPerformance","generateAgentPerformanceChart","errorDistribution","generateErrorDistribution","systemLoad","generateSystemLoadChart","topPerformers","generateTopPerformers","recentAlerts","slice","map","formatAlertForTable","criticalIssues","generateCriticalIssues","performanceInsight","analyzePerformanceInsights","push","efficiencyInsight","analyzeEfficiencyInsights","qualityInsight","analyzeQualityInsights","riskInsight","analyzeRiskInsights","accuracyMetrics","filter","m","metricType","sort","a","b","getTime","hourlyData","forEach","metric","hour","Math","floor","has","set","get","value","dataPoints","values","average","reduce","sum","val","label","total","interventions","context","verificationMethod","rate","overallScore","score","recentWindow","recentPerformance","find","w","period","trend","calculateTrend","trends","agentId","tasks","metrics","totalTasks","accuracy","components","errorCounts","severityCounts","totalErrors","validation","errors","type","severity","distribution","errorType","count","category","percentage","now","hourMs","i","baseLoad","variation","random","load","max","capacity","agentCount","utilization","min","index","rank","alert","id","message","substring","source","resolved","issues","description","toFixed","affectedAgents","impact","eta","problematicAgents","riskAssessment","level","some","criticalAlerts","avgScore","s","title","actionable","recommendations","throughput","recentErrors","flatMap","commonErrors","getTopErrorTypes","highRiskAgents","exportDashboard","dashboardId","format","options","exportId","toString","exportJob","target","status","createdAt","progress","processExportQueue","generateReport","templateId","template","Error","job","shift","add","result","executeExportJob","completedAt","jobId","duration","String","delete","setTimeout","exportDashboardData","generateReportData","exportedAt","JSON","stringify","path","sections","Promise","all","section","generateReportSection","reportData","name","generatedAt","content","systemHealth","systemReliability","agentHealth","improvingTrends","t","direction","decliningTrends","Array","from","entries","cacheKey","toISOString","AccuracyProcessor","EfficiencyProcessor","AlertProcessor","defaultDashboard","refreshInterval","timeRange","default","panels","chartType","dataSource","query","position","x","y","width","height","yAxis","colors","thresholds","color","condition","decimals","suffix","filters","field","defaultValue","layout","gridSize","columns","rows","responsive","breakpoints","lg","margin","padding","md","sm","styling","theme","primaryColor","secondaryColor","backgroundColor","textColor","borderColor","fontFamily","fontSize","small","medium","large","debug","schedule","interval","calculateScheduleInterval","timeout","setInterval","clearInterval","clear","frequency","resolve","getDashboardConfiguration","getAllDashboards","createDashboard","updateDashboard","updates","dashboard","deleteDashboard","getExportStatus","cancelExport","jobIndex","findIndex","splice","DataProcessor","process"],"mappings":"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"}