{"version":3,"sources":["../../../../../src/verification/tests/unit/truth-scoring.test.ts"],"sourcesContent":["/**\n * Unit Tests for Truth Scoring System\n * \n * Tests the core truth scoring functionality including:\n * - Score calculation algorithms\n * - Evidence validation\n * - Agent reliability tracking\n * - Trend analysis\n */\n\nimport { jest } from '@jest/globals';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Import the truth scoring system\nimport TruthScoreCalculator from '../../../../.claude/helpers/truth-score.js';\n\ndescribe('Truth Scoring System', () => {\n  let calculator: any;\n  let tempDir: string;\n  let originalConfigPath: string;\n  let originalMemoryPath: string;\n\n  beforeEach(async () => {\n    calculator = new TruthScoreCalculator();\n    \n    // Create temporary directory for testing\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'truth-scoring-test-'));\n    \n    // Override paths to use temp directory\n    originalConfigPath = calculator.configPath;\n    originalMemoryPath = calculator.memoryPath;\n    \n    calculator.configPath = path.join(tempDir, 'verification.json');\n    calculator.memoryPath = path.join(tempDir, 'truth-scores');\n    \n    await calculator.init();\n  });\n\n  afterEach(async () => {\n    // Cleanup temp directory\n    await fs.rm(tempDir, { recursive: true, force: true });\n    \n    // Restore original paths\n    calculator.configPath = originalConfigPath;\n    calculator.memoryPath = originalMemoryPath;\n  });\n\n  describe('Score Calculation', () => {\n    test('should calculate perfect score with all evidence passing', () => {\n      const evidence = {\n        test_results: { passed: 10, total: 10 },\n        lint_results: { errors: 0 },\n        type_results: { errors: 0 },\n        build_results: { success: true }\n      };\n\n      const score = calculator.calculateScore(evidence);\n      expect(score).toBe(1.0);\n    });\n\n    test('should calculate partial score with mixed evidence', () => {\n      const evidence = {\n        test_results: { passed: 8, total: 10 }, // 80% pass rate\n        lint_results: { errors: 2 }, // Failed\n        type_results: { errors: 0 }, // Passed\n        build_results: { success: true } // Passed\n      };\n\n      const score = calculator.calculateScore(evidence);\n      \n      // Expected: (0.8 * 0.4) + (0 * 0.2) + (1 * 0.2) + (1 * 0.2) = 0.72\n      expect(score).toBe(0.72);\n    });\n\n    test('should handle missing evidence gracefully', () => {\n      const evidence = {\n        test_results: { passed: 5, total: 10 }\n        // Missing other evidence types\n      };\n\n      const score = calculator.calculateScore(evidence);\n      \n      // Only test weight should contribute: 0.5 * 0.4 = 0.2\n      expect(score).toBe(0.2);\n    });\n\n    test('should handle zero total tests', () => {\n      const evidence = {\n        test_results: { passed: 0, total: 0 },\n        lint_results: { errors: 0 },\n        type_results: { errors: 0 },\n        build_results: { success: true }\n      };\n\n      const score = calculator.calculateScore(evidence);\n      \n      // Test score should be 0/1 = 0, others pass: 0 + 0.2 + 0.2 + 0.2 = 0.6\n      expect(score).toBe(0.6);\n    });\n\n    test('should round scores to two decimal places', () => {\n      const evidence = {\n        test_results: { passed: 1, total: 3 }, // 0.333...\n        lint_results: { errors: 0 },\n        type_results: { errors: 0 },\n        build_results: { success: true }\n      };\n\n      const score = calculator.calculateScore(evidence);\n      \n      // Expected: (0.333... * 0.4) + 0.6 = 0.733..., rounded to 0.73\n      expect(score).toBe(0.73);\n    });\n  });\n\n  describe('Claim vs Reality Comparison', () => {\n    test('should identify accurate claims', () => {\n      const claim = {\n        tests_pass: true,\n        no_lint_errors: true,\n        no_type_errors: true,\n        builds_successfully: true\n      };\n\n      const reality = {\n        tests_pass: true,\n        lint_errors: 0,\n        type_errors: 0,\n        build_success: true\n      };\n\n      const comparison = calculator.compareClaimToReality(claim, reality);\n\n      expect(comparison.discrepancies).toHaveLength(0);\n      expect(comparison.truth_score).toBe(1.0);\n    });\n\n    test('should detect false claims about test results', () => {\n      const claim = {\n        tests_pass: true,\n        no_lint_errors: true\n      };\n\n      const reality = {\n        tests_pass: false,\n        lint_errors: 0\n      };\n\n      const comparison = calculator.compareClaimToReality(claim, reality);\n\n      expect(comparison.discrepancies).toContain('Claimed tests pass but they fail');\n      expect(comparison.truth_score).toBe(0.5); // 1 out of 2 claims accurate\n    });\n\n    test('should detect false claims about lint errors', () => {\n      const claim = {\n        tests_pass: true,\n        no_lint_errors: true,\n        no_type_errors: true\n      };\n\n      const reality = {\n        tests_pass: true,\n        lint_errors: 5,\n        type_errors: 0\n      };\n\n      const comparison = calculator.compareClaimToReality(claim, reality);\n\n      expect(comparison.discrepancies).toContain('Claimed no lint errors but found 5');\n      expect(comparison.truth_score).toBeCloseTo(0.67, 2);\n    });\n\n    test('should detect multiple false claims', () => {\n      const claim = {\n        tests_pass: true,\n        no_lint_errors: true,\n        no_type_errors: true,\n        builds_successfully: true\n      };\n\n      const reality = {\n        tests_pass: false,\n        lint_errors: 3,\n        type_errors: 2,\n        build_success: false\n      };\n\n      const comparison = calculator.compareClaimToReality(claim, reality);\n\n      expect(comparison.discrepancies).toHaveLength(4);\n      expect(comparison.truth_score).toBe(0.0);\n    });\n  });\n\n  describe('Truth Score Storage', () => {\n    test('should store truth score with metadata', async () => {\n      const agentId = 'test-agent';\n      const taskId = 'task-123';\n      const score = 0.85;\n      const evidence = { test_results: { passed: 8, total: 10 } };\n\n      const filepath = await calculator.storeTruthScore(agentId, taskId, score, evidence);\n\n      expect(filepath).toContain(`${agentId}_${taskId}`);\n      \n      // Verify file exists and contains correct data\n      const fileContent = await fs.readFile(filepath, 'utf8');\n      const data = JSON.parse(fileContent);\n\n      expect(data.agent_id).toBe(agentId);\n      expect(data.task_id).toBe(taskId);\n      expect(data.truth_score).toBe(score);\n      expect(data.evidence).toEqual(evidence);\n      expect(data.threshold).toBe(calculator.config.truth_threshold);\n      expect(data.passed).toBe(score >= calculator.config.truth_threshold);\n    });\n\n    test('should create memory directory if it does not exist', async () => {\n      const agentId = 'test-agent';\n      const taskId = 'task-456';\n      \n      // Ensure directory doesn't exist\n      await fs.rm(calculator.memoryPath, { recursive: true, force: true });\n\n      await calculator.storeTruthScore(agentId, taskId, 0.9, {});\n\n      // Directory should now exist\n      const stats = await fs.stat(calculator.memoryPath);\n      expect(stats.isDirectory()).toBe(true);\n    });\n  });\n\n  describe('Agent History Tracking', () => {\n    beforeEach(async () => {\n      // Create test history files\n      await fs.mkdir(calculator.memoryPath, { recursive: true });\n      \n      const testData = [\n        { agent_id: 'agent-1', task_id: 'task-1', truth_score: 0.9, timestamp: 1000, passed: true },\n        { agent_id: 'agent-1', task_id: 'task-2', truth_score: 0.7, timestamp: 2000, passed: false },\n        { agent_id: 'agent-1', task_id: 'task-3', truth_score: 0.95, timestamp: 3000, passed: true },\n        { agent_id: 'agent-2', task_id: 'task-4', truth_score: 0.6, timestamp: 4000, passed: false }\n      ];\n\n      for (const data of testData) {\n        const filename = `${data.agent_id}_${data.task_id}_${data.timestamp}.json`;\n        await fs.writeFile(\n          path.join(calculator.memoryPath, filename),\n          JSON.stringify(data, null, 2)\n        );\n      }\n    });\n\n    test('should retrieve agent history in chronological order', async () => {\n      const history = await calculator.getAgentHistory('agent-1');\n\n      expect(history).toHaveLength(3);\n      expect(history[0].timestamp).toBe(3000); // Most recent first\n      expect(history[1].timestamp).toBe(2000);\n      expect(history[2].timestamp).toBe(1000);\n    });\n\n    test('should limit history results', async () => {\n      const history = await calculator.getAgentHistory('agent-1', 2);\n\n      expect(history).toHaveLength(2);\n      expect(history[0].timestamp).toBe(3000);\n      expect(history[1].timestamp).toBe(2000);\n    });\n\n    test('should return empty array for non-existent agent', async () => {\n      const history = await calculator.getAgentHistory('non-existent-agent');\n\n      expect(history).toEqual([]);\n    });\n  });\n\n  describe('Agent Reliability Calculation', () => {\n    beforeEach(async () => {\n      // Create comprehensive test data for reliability calculation\n      await fs.mkdir(calculator.memoryPath, { recursive: true });\n      \n      const scores = [0.9, 0.8, 0.85, 0.75, 0.9, 0.95, 0.7, 0.85, 0.8, 0.9];\n      const threshold = calculator.config.truth_threshold;\n      \n      for (let i = 0; i < scores.length; i++) {\n        const data = {\n          agent_id: 'reliability-agent',\n          task_id: `task-${i}`,\n          truth_score: scores[i],\n          timestamp: 1000 + (i * 1000),\n          passed: scores[i] >= threshold\n        };\n        \n        const filename = `reliability-agent_task-${i}_${data.timestamp}.json`;\n        await fs.writeFile(\n          path.join(calculator.memoryPath, filename),\n          JSON.stringify(data, null, 2)\n        );\n      }\n    });\n\n    test('should calculate agent reliability metrics', async () => {\n      const reliability = await calculator.calculateAgentReliability('reliability-agent');\n\n      expect(reliability.reliability).toBeGreaterThan(0.8);\n      expect(reliability.pass_rate).toBeGreaterThan(0.7);\n      expect(reliability.sample_size).toBe(10);\n      expect(['improving', 'declining', 'stable']).toContain(reliability.trend);\n    });\n\n    test('should handle agent with no history', async () => {\n      const reliability = await calculator.calculateAgentReliability('new-agent');\n\n      expect(reliability.reliability).toBe(1.0);\n      expect(reliability.sample_size).toBe(0);\n    });\n  });\n\n  describe('Trend Analysis', () => {\n    test('should detect improving trend', () => {\n      const history = [\n        { truth_score: 0.9 }, { truth_score: 0.85 }, { truth_score: 0.9 },\n        { truth_score: 0.7 }, { truth_score: 0.75 }, { truth_score: 0.65 }\n      ];\n\n      const trend = calculator.calculateTrend(history);\n      expect(trend).toBe('improving');\n    });\n\n    test('should detect declining trend', () => {\n      const history = [\n        { truth_score: 0.6 }, { truth_score: 0.65 }, { truth_score: 0.7 },\n        { truth_score: 0.85 }, { truth_score: 0.9 }, { truth_score: 0.95 }\n      ];\n\n      const trend = calculator.calculateTrend(history);\n      expect(trend).toBe('declining');\n    });\n\n    test('should detect stable trend', () => {\n      const history = [\n        { truth_score: 0.8 }, { truth_score: 0.82 }, { truth_score: 0.78 },\n        { truth_score: 0.81 }, { truth_score: 0.79 }, { truth_score: 0.8 }\n      ];\n\n      const trend = calculator.calculateTrend(history);\n      expect(trend).toBe('stable');\n    });\n\n    test('should handle insufficient data', () => {\n      const history = [{ truth_score: 0.8 }];\n\n      const trend = calculator.calculateTrend(history);\n      expect(trend).toBe('insufficient_data');\n    });\n  });\n\n  describe('Report Generation', () => {\n    beforeEach(async () => {\n      // Create test data for multiple agents\n      await fs.mkdir(calculator.memoryPath, { recursive: true });\n      \n      const testAgents = [\n        { id: 'agent-high', scores: [0.9, 0.95, 0.85, 0.9] },\n        { id: 'agent-medium', scores: [0.75, 0.8, 0.7, 0.85] },\n        { id: 'agent-low', scores: [0.6, 0.55, 0.65, 0.7] }\n      ];\n\n      for (const agent of testAgents) {\n        for (let i = 0; i < agent.scores.length; i++) {\n          const data = {\n            agent_id: agent.id,\n            task_id: `task-${i}`,\n            truth_score: agent.scores[i],\n            timestamp: 1000 + (i * 1000),\n            passed: agent.scores[i] >= calculator.config.truth_threshold\n          };\n          \n          const filename = `${agent.id}_task-${i}_${data.timestamp}.json`;\n          await fs.writeFile(\n            path.join(calculator.memoryPath, filename),\n            JSON.stringify(data, null, 2)\n          );\n        }\n      }\n    });\n\n    test('should generate JSON report', async () => {\n      const report = await calculator.generateReport('json');\n\n      expect(report.generated_at).toBeDefined();\n      expect(report.total_verifications).toBe(12);\n      expect(Object.keys(report.agents)).toHaveLength(3);\n\n      const highAgent = report.agents['agent-high'];\n      expect(highAgent.total_tasks).toBe(4);\n      expect(highAgent.average_truth_score).toBeGreaterThan(0.85);\n      expect(highAgent.pass_rate).toBeGreaterThan(0.75);\n    });\n\n    test('should generate markdown report', async () => {\n      const report = await calculator.generateReport('markdown');\n\n      expect(typeof report).toBe('string');\n      expect(report).toContain('# Truth Score Report');\n      expect(report).toContain('## Agent Performance');\n      expect(report).toContain('| Agent | Tasks | Avg Truth Score | Pass Rate | Trend |');\n      expect(report).toContain('agent-high');\n      expect(report).toContain('agent-medium');\n      expect(report).toContain('agent-low');\n    });\n\n    test('should include trend indicators in markdown', async () => {\n      const report = await calculator.generateReport('markdown');\n\n      // Check for trend emoji indicators\n      expect(report).toMatch(/[📈📉➡️]/);\n    });\n  });\n\n  describe('Configuration Management', () => {\n    test('should use default config when file does not exist', async () => {\n      const newCalculator = new TruthScoreCalculator();\n      newCalculator.configPath = path.join(tempDir, 'non-existent.json');\n      \n      await newCalculator.init();\n\n      expect(newCalculator.config.enabled).toBe(false);\n      expect(newCalculator.config.mode).toBe('passive');\n      expect(newCalculator.config.truth_threshold).toBe(0.80);\n      expect(newCalculator.config.weights.tests).toBe(0.40);\n    });\n\n    test('should load custom config from file', async () => {\n      const customConfig = {\n        enabled: true,\n        mode: 'active',\n        truth_threshold: 0.90,\n        weights: {\n          tests: 0.50,\n          lint: 0.25,\n          types: 0.15,\n          build: 0.10\n        }\n      };\n\n      await fs.writeFile(calculator.configPath, JSON.stringify(customConfig, null, 2));\n      \n      const newCalculator = new TruthScoreCalculator();\n      newCalculator.configPath = calculator.configPath;\n      await newCalculator.init();\n\n      expect(newCalculator.config.enabled).toBe(true);\n      expect(newCalculator.config.mode).toBe('active');\n      expect(newCalculator.config.truth_threshold).toBe(0.90);\n      expect(newCalculator.config.weights.tests).toBe(0.50);\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    test('should handle malformed evidence data', () => {\n      const evidence = {\n        test_results: null,\n        lint_results: undefined,\n        type_results: 'invalid',\n        build_results: { success: 'maybe' }\n      };\n\n      // Should not throw and should handle gracefully\n      expect(() => calculator.calculateScore(evidence)).not.toThrow();\n      \n      const score = calculator.calculateScore(evidence);\n      expect(typeof score).toBe('number');\n      expect(score).toBeGreaterThanOrEqual(0);\n      expect(score).toBeLessThanOrEqual(1);\n    });\n\n    test('should handle very large numbers in evidence', () => {\n      const evidence = {\n        test_results: { passed: Number.MAX_SAFE_INTEGER, total: Number.MAX_SAFE_INTEGER },\n        lint_results: { errors: Number.MAX_SAFE_INTEGER },\n        type_results: { errors: 0 },\n        build_results: { success: true }\n      };\n\n      const score = calculator.calculateScore(evidence);\n      expect(score).toBeGreaterThanOrEqual(0);\n      expect(score).toBeLessThanOrEqual(1);\n    });\n\n    test('should handle empty memory directory gracefully', async () => {\n      const emptyCalculator = new TruthScoreCalculator();\n      emptyCalculator.memoryPath = path.join(tempDir, 'empty-memory');\n      \n      const history = await emptyCalculator.getAgentHistory('any-agent');\n      expect(history).toEqual([]);\n      \n      const reliability = await emptyCalculator.calculateAgentReliability('any-agent');\n      expect(reliability.reliability).toBe(1.0);\n      expect(reliability.sample_size).toBe(0);\n    });\n  });\n});"],"names":["fs","path","os","TruthScoreCalculator","describe","calculator","tempDir","originalConfigPath","originalMemoryPath","beforeEach","mkdtemp","join","tmpdir","configPath","memoryPath","init","afterEach","rm","recursive","force","test","evidence","test_results","passed","total","lint_results","errors","type_results","build_results","success","score","calculateScore","expect","toBe","claim","tests_pass","no_lint_errors","no_type_errors","builds_successfully","reality","lint_errors","type_errors","build_success","comparison","compareClaimToReality","discrepancies","toHaveLength","truth_score","toContain","toBeCloseTo","agentId","taskId","filepath","storeTruthScore","fileContent","readFile","data","JSON","parse","agent_id","task_id","toEqual","threshold","config","truth_threshold","stats","stat","isDirectory","mkdir","testData","timestamp","filename","writeFile","stringify","history","getAgentHistory","scores","i","length","reliability","calculateAgentReliability","toBeGreaterThan","pass_rate","sample_size","trend","calculateTrend","testAgents","id","agent","report","generateReport","generated_at","toBeDefined","total_verifications","Object","keys","agents","highAgent","total_tasks","average_truth_score","toMatch","newCalculator","enabled","mode","weights","tests","customConfig","lint","types","build","undefined","not","toThrow","toBeGreaterThanOrEqual","toBeLessThanOrEqual","Number","MAX_SAFE_INTEGER","emptyCalculator"],"mappings":"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"}