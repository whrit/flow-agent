{"version":3,"sources":["../../../../../src/verification/tests/e2e/verification-pipeline.test.ts"],"sourcesContent":["/**\n * End-to-End Tests for Complete Verification Pipeline\n * \n * Tests the entire verification system including:\n * - Full workflow verification from task assignment to completion\n * - Integration with truth scoring and cross-agent verification\n * - Real-world scenarios with multiple agents and complex tasks\n * - Error handling and recovery mechanisms\n */\n\nimport { jest } from '@jest/globals';\nimport { spawn, ChildProcess } from 'child_process';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { EventEmitter } from 'events';\n\ninterface PipelineConfig {\n  agents: AgentConfig[];\n  tasks: TaskConfig[];\n  verificationRules: VerificationRule[];\n  truthThreshold: number;\n  timeoutMs: number;\n}\n\ninterface AgentConfig {\n  id: string;\n  type: string;\n  capabilities: string[];\n  reliability: number;\n  verificationEnabled: boolean;\n}\n\ninterface TaskConfig {\n  id: string;\n  description: string;\n  requiredCapabilities: string[];\n  expectedDuration: number;\n  verificationCriteria: VerificationCriteria;\n}\n\ninterface VerificationRule {\n  name: string;\n  condition: string;\n  action: 'warn' | 'reject' | 'escalate';\n  threshold: number;\n}\n\ninterface VerificationCriteria {\n  requiresTests: boolean;\n  requiresCodeReview: boolean;\n  requiresBuild: boolean;\n  minTruthScore: number;\n  crossVerificationRequired: boolean;\n}\n\ninterface PipelineResult {\n  taskId: string;\n  status: 'completed' | 'failed' | 'timeout' | 'rejected';\n  truthScore: number;\n  verificationResults: VerificationStepResult[];\n  duration: number;\n  agentPerformance: Map<string, AgentPerformance>;\n  errors: string[];\n}\n\ninterface VerificationStepResult {\n  step: string;\n  agentId: string;\n  passed: boolean;\n  truthScore: number;\n  evidence: any;\n  conflicts: string[];\n  timestamp: number;\n}\n\ninterface AgentPerformance {\n  tasksCompleted: number;\n  averageTruthScore: number;\n  conflictRate: number;\n  responseTime: number;\n}\n\ndescribe('Verification Pipeline E2E Tests', () => {\n  let tempDir: string;\n  let pipeline: VerificationPipeline;\n  let config: PipelineConfig;\n\n  beforeEach(async () => {\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'verification-e2e-'));\n    \n    // Setup pipeline configuration\n    config = createTestPipelineConfig();\n    pipeline = new VerificationPipeline(config, tempDir);\n    \n    await pipeline.initialize();\n  });\n\n  afterEach(async () => {\n    await pipeline.shutdown();\n    await fs.rm(tempDir, { recursive: true, force: true });\n  });\n\n  function createTestPipelineConfig(): PipelineConfig {\n    return {\n      agents: [\n        {\n          id: 'coder-alpha',\n          type: 'coder',\n          capabilities: ['implement', 'test', 'debug'],\n          reliability: 0.9,\n          verificationEnabled: true\n        },\n        {\n          id: 'reviewer-beta',\n          type: 'reviewer',\n          capabilities: ['review', 'verify', 'validate'],\n          reliability: 0.95,\n          verificationEnabled: true\n        },\n        {\n          id: 'tester-gamma',\n          type: 'tester',\n          capabilities: ['test', 'benchmark', 'validate'],\n          reliability: 0.85,\n          verificationEnabled: true\n        },\n        {\n          id: 'coordinator-delta',\n          type: 'coordinator',\n          capabilities: ['orchestrate', 'monitor', 'report'],\n          reliability: 0.92,\n          verificationEnabled: true\n        }\n      ],\n      tasks: [\n        {\n          id: 'implement-auth-system',\n          description: 'Implement user authentication system with JWT tokens',\n          requiredCapabilities: ['implement', 'test'],\n          expectedDuration: 300000, // 5 minutes\n          verificationCriteria: {\n            requiresTests: true,\n            requiresCodeReview: true,\n            requiresBuild: true,\n            minTruthScore: 0.8,\n            crossVerificationRequired: true\n          }\n        },\n        {\n          id: 'optimize-database-queries',\n          description: 'Optimize slow database queries and add indexing',\n          requiredCapabilities: ['implement', 'benchmark'],\n          expectedDuration: 240000, // 4 minutes\n          verificationCriteria: {\n            requiresTests: true,\n            requiresCodeReview: true,\n            requiresBuild: false,\n            minTruthScore: 0.75,\n            crossVerificationRequired: true\n          }\n        }\n      ],\n      verificationRules: [\n        {\n          name: 'truth-score-threshold',\n          condition: 'truthScore < 0.7',\n          action: 'reject',\n          threshold: 0.7\n        },\n        {\n          name: 'cross-verification-conflict',\n          condition: 'conflictCount > 0',\n          action: 'escalate',\n          threshold: 1\n        },\n        {\n          name: 'agent-reliability-warning',\n          condition: 'agentReliability < 0.8',\n          action: 'warn',\n          threshold: 0.8\n        }\n      ],\n      truthThreshold: 0.8,\n      timeoutMs: 600000 // 10 minutes\n    };\n  }\n\n  describe('Complete Workflow Verification', () => {\n    test('should execute full authentication system implementation workflow', async () => {\n      const taskId = 'implement-auth-system';\n      const task = config.tasks.find(t => t.id === taskId)!;\n\n      // Start the pipeline\n      const resultPromise = pipeline.executeTask(taskId);\n\n      // Monitor pipeline execution\n      const executionSteps: string[] = [];\n      pipeline.on('step:start', (step) => {\n        executionSteps.push(step.name);\n      });\n\n      pipeline.on('verification:complete', (result) => {\n        console.log(`Verification completed: ${result.step} by ${result.agentId}`);\n      });\n\n      // Wait for completion\n      const result = await resultPromise;\n\n      // Verify workflow completed successfully\n      expect(result.status).toBe('completed');\n      expect(result.truthScore).toBeGreaterThanOrEqual(task.verificationCriteria.minTruthScore);\n      expect(result.verificationResults.length).toBeGreaterThan(0);\n\n      // Verify all required steps were executed\n      expect(executionSteps).toContain('implementation');\n      expect(executionSteps).toContain('testing');\n      expect(executionSteps).toContain('code-review');\n      expect(executionSteps).toContain('build-verification');\n      expect(executionSteps).toContain('cross-verification');\n\n      // Verify no conflicts were detected\n      const hasConflicts = result.verificationResults.some(r => r.conflicts.length > 0);\n      expect(hasConflicts).toBe(false);\n\n      // Verify duration is within expected range\n      expect(result.duration).toBeLessThan(task.expectedDuration * 1.5);\n    }, 30000);\n\n    test('should handle workflow with verification failures', async () => {\n      // Create a task that will fail verification\n      const failingTaskId = 'failing-implementation';\n      const failingTask: TaskConfig = {\n        id: failingTaskId,\n        description: 'Intentionally failing implementation for testing',\n        requiredCapabilities: ['implement'],\n        expectedDuration: 60000,\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: true,\n          requiresBuild: true,\n          minTruthScore: 0.9, // Very high threshold\n          crossVerificationRequired: true\n        }\n      };\n\n      // Add failing task to config\n      config.tasks.push(failingTask);\n      await pipeline.updateConfig(config);\n\n      // Inject failure simulation\n      pipeline.setFailureSimulation(failingTaskId, {\n        implementation: { success: false, reason: 'Syntax errors in code' },\n        tests: { success: false, reason: 'Tests fail to run' },\n        build: { success: false, reason: 'Build compilation errors' }\n      });\n\n      const result = await pipeline.executeTask(failingTaskId);\n\n      // Verify failure handling\n      expect(result.status).toBe('rejected');\n      expect(result.truthScore).toBeLessThan(failingTask.verificationCriteria.minTruthScore);\n      expect(result.errors.length).toBeGreaterThan(0);\n\n      // Verify verification rules were applied\n      const rejectionResult = result.verificationResults.find(r => r.step === 'rule-evaluation');\n      expect(rejectionResult).toBeDefined();\n      expect(rejectionResult!.passed).toBe(false);\n    }, 15000);\n\n    test('should handle timeout scenarios gracefully', async () => {\n      const timeoutTaskId = 'timeout-task';\n      const timeoutTask: TaskConfig = {\n        id: timeoutTaskId,\n        description: 'Task that will timeout',\n        requiredCapabilities: ['implement'],\n        expectedDuration: 30000, // 30 seconds\n        verificationCriteria: {\n          requiresTests: false,\n          requiresCodeReview: false,\n          requiresBuild: false,\n          minTruthScore: 0.5,\n          crossVerificationRequired: false\n        }\n      };\n\n      config.tasks.push(timeoutTask);\n      config.timeoutMs = 5000; // 5 second timeout for testing\n      await pipeline.updateConfig(config);\n\n      // Inject delay simulation\n      pipeline.setDelaySimulation(timeoutTaskId, 10000); // 10 second delay\n\n      const startTime = Date.now();\n      const result = await pipeline.executeTask(timeoutTaskId);\n      const duration = Date.now() - startTime;\n\n      // Verify timeout handling\n      expect(result.status).toBe('timeout');\n      expect(duration).toBeLessThan(7000); // Should timeout around 5 seconds\n      expect(result.errors).toContain('Task execution timed out');\n    }, 10000);\n  });\n\n  describe('Multi-Agent Coordination', () => {\n    test('should coordinate multiple agents for complex task', async () => {\n      const complexTaskId = 'multi-agent-coordination';\n      const complexTask: TaskConfig = {\n        id: complexTaskId,\n        description: 'Complex task requiring multiple agent types',\n        requiredCapabilities: ['implement', 'test', 'review', 'orchestrate'],\n        expectedDuration: 420000, // 7 minutes\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: true,\n          requiresBuild: true,\n          minTruthScore: 0.85,\n          crossVerificationRequired: true\n        }\n      };\n\n      config.tasks.push(complexTask);\n      await pipeline.updateConfig(config);\n\n      const agentAssignments: Map<string, string[]> = new Map();\n      pipeline.on('agent:assigned', (assignment) => {\n        if (!agentAssignments.has(assignment.agentId)) {\n          agentAssignments.set(assignment.agentId, []);\n        }\n        agentAssignments.get(assignment.agentId)!.push(assignment.taskStep);\n      });\n\n      const result = await pipeline.executeTask(complexTaskId);\n\n      // Verify all agent types were involved\n      expect(agentAssignments.size).toBeGreaterThanOrEqual(3);\n      expect(Array.from(agentAssignments.keys())).toContain('coder-alpha');\n      expect(Array.from(agentAssignments.keys())).toContain('reviewer-beta');\n      expect(Array.from(agentAssignments.keys())).toContain('tester-gamma');\n\n      // Verify coordination was successful\n      expect(result.status).toBe('completed');\n      expect(result.truthScore).toBeGreaterThanOrEqual(complexTask.verificationCriteria.minTruthScore);\n\n      // Verify cross-verification occurred\n      const crossVerificationResults = result.verificationResults.filter(r => \n        r.step === 'cross-verification'\n      );\n      expect(crossVerificationResults.length).toBeGreaterThan(0);\n    }, 45000);\n\n    test('should detect and handle agent conflicts', async () => {\n      const conflictTaskId = 'conflict-resolution-test';\n      const conflictTask: TaskConfig = {\n        id: conflictTaskId,\n        description: 'Task designed to create agent conflicts',\n        requiredCapabilities: ['implement', 'review'],\n        expectedDuration: 180000,\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: true,\n          requiresBuild: false,\n          minTruthScore: 0.7,\n          crossVerificationRequired: true\n        }\n      };\n\n      config.tasks.push(conflictTask);\n      await pipeline.updateConfig(config);\n\n      // Inject conflict scenario\n      pipeline.setConflictSimulation(conflictTaskId, {\n        'coder-alpha': { claimSuccess: true, actualSuccess: true },\n        'reviewer-beta': { claimSuccess: false, actualSuccess: true }, // Conflicting assessment\n        'tester-gamma': { claimSuccess: true, actualSuccess: true }\n      });\n\n      const result = await pipeline.executeTask(conflictTaskId);\n\n      // Verify conflict detection\n      const conflictResults = result.verificationResults.filter(r => r.conflicts.length > 0);\n      expect(conflictResults.length).toBeGreaterThan(0);\n\n      // Verify conflict resolution was attempted\n      const resolutionResults = result.verificationResults.filter(r => \n        r.step === 'conflict-resolution'\n      );\n      expect(resolutionResults.length).toBeGreaterThan(0);\n\n      // Final result should still be reasonable despite conflicts\n      expect(result.status).toBe('completed');\n      expect(result.truthScore).toBeGreaterThan(0.5);\n    }, 25000);\n  });\n\n  describe('Real-World Scenario Simulation', () => {\n    test('should handle database optimization project end-to-end', async () => {\n      const dbTaskId = 'optimize-database-queries';\n      const task = config.tasks.find(t => t.id === dbTaskId)!;\n\n      // Simulate realistic implementation scenario\n      pipeline.setRealisticSimulation(dbTaskId, {\n        implementation: {\n          files_changed: 8,\n          lines_added: 250,\n          lines_removed: 100,\n          complexity_score: 0.7,\n          duration: 180000 // 3 minutes\n        },\n        testing: {\n          unit_tests_added: 15,\n          integration_tests_added: 5,\n          test_coverage: 0.85,\n          performance_tests: true,\n          duration: 90000 // 1.5 minutes\n        },\n        review: {\n          code_quality_score: 0.9,\n          security_issues: 0,\n          style_violations: 2,\n          approved: true,\n          duration: 60000 // 1 minute\n        },\n        verification: {\n          performance_improvement: 0.35, // 35% improvement\n          memory_usage_reduction: 0.15,\n          query_optimization_verified: true\n        }\n      });\n\n      const result = await pipeline.executeTask(dbTaskId);\n\n      // Verify realistic outcomes\n      expect(result.status).toBe('completed');\n      expect(result.truthScore).toBeGreaterThanOrEqual(0.8);\n      expect(result.duration).toBeGreaterThan(300000); // At least 5 minutes\n      expect(result.duration).toBeLessThan(400000); // Less than 7 minutes\n\n      // Verify performance improvements were verified\n      const performanceVerification = result.verificationResults.find(r => \n        r.evidence?.performance_improvement > 0\n      );\n      expect(performanceVerification).toBeDefined();\n      expect(performanceVerification!.evidence.performance_improvement).toBeGreaterThan(0.3);\n\n      // Verify all steps completed successfully\n      const allStepsPassed = result.verificationResults.every(r => r.passed);\n      expect(allStepsPassed).toBe(true);\n    }, 30000);\n\n    test('should simulate microservices architecture verification', async () => {\n      const microservicesTaskId = 'implement-microservices';\n      const microservicesTask: TaskConfig = {\n        id: microservicesTaskId,\n        description: 'Implement microservices architecture with service discovery',\n        requiredCapabilities: ['implement', 'test', 'review', 'orchestrate'],\n        expectedDuration: 600000, // 10 minutes\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: true,\n          requiresBuild: true,\n          minTruthScore: 0.85,\n          crossVerificationRequired: true\n        }\n      };\n\n      config.tasks.push(microservicesTask);\n      await pipeline.updateConfig(config);\n\n      // Simulate complex microservices scenario\n      pipeline.setMicroservicesSimulation(microservicesTaskId, {\n        services_implemented: 4,\n        api_endpoints: 24,\n        service_discovery_working: true,\n        load_balancing_configured: true,\n        circuit_breakers_implemented: true,\n        monitoring_setup: true,\n        distributed_tracing: true,\n        containerization: true\n      });\n\n      const result = await pipeline.executeTask(microservicesTaskId);\n\n      // Verify complex architecture verification\n      expect(result.status).toBe('completed');\n      expect(result.verificationResults.length).toBeGreaterThan(10);\n\n      // Verify service integration tests passed\n      const integrationTest = result.verificationResults.find(r => \n        r.step === 'service-integration-test'\n      );\n      expect(integrationTest).toBeDefined();\n      expect(integrationTest!.passed).toBe(true);\n\n      // Verify load testing was performed\n      const loadTest = result.verificationResults.find(r => \n        r.step === 'load-testing'\n      );\n      expect(loadTest).toBeDefined();\n      expect(loadTest!.evidence?.requests_per_second).toBeGreaterThan(100);\n\n      // Verify security scanning was performed\n      const securityScan = result.verificationResults.find(r => \n        r.step === 'security-scan'\n      );\n      expect(securityScan).toBeDefined();\n      expect(securityScan!.evidence?.vulnerabilities_found).toBeLessThan(5);\n    }, 60000);\n  });\n\n  describe('Error Handling and Recovery', () => {\n    test('should recover from agent failures', async () => {\n      const recoveryTaskId = 'agent-failure-recovery';\n      const recoveryTask: TaskConfig = {\n        id: recoveryTaskId,\n        description: 'Task to test agent failure recovery',\n        requiredCapabilities: ['implement', 'test'],\n        expectedDuration: 120000,\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: false,\n          requiresBuild: false,\n          minTruthScore: 0.7,\n          crossVerificationRequired: false\n        }\n      };\n\n      config.tasks.push(recoveryTask);\n      await pipeline.updateConfig(config);\n\n      // Simulate agent failure and recovery\n      pipeline.setAgentFailureSimulation('coder-alpha', {\n        failAfter: 30000, // Fail after 30 seconds\n        failureDuration: 15000, // Down for 15 seconds\n        backupAgent: 'coder-beta' // Not in original config, should be created\n      });\n\n      const result = await pipeline.executeTask(recoveryTaskId);\n\n      // Verify recovery was successful\n      expect(result.status).toBe('completed');\n      expect(result.errors.some(e => e.includes('Agent failure detected'))).toBe(true);\n      expect(result.errors.some(e => e.includes('Backup agent deployed'))).toBe(true);\n\n      // Verify task still completed within reasonable time\n      expect(result.duration).toBeLessThan(180000); // 3 minutes max\n    }, 20000);\n\n    test('should handle verification system failures', async () => {\n      const systemFailureTaskId = 'verification-system-failure';\n      const systemFailureTask: TaskConfig = {\n        id: systemFailureTaskId,\n        description: 'Task to test verification system failure handling',\n        requiredCapabilities: ['implement'],\n        expectedDuration: 60000,\n        verificationCriteria: {\n          requiresTests: true,\n          requiresCodeReview: true,\n          requiresBuild: false,\n          minTruthScore: 0.8,\n          crossVerificationRequired: false\n        }\n      };\n\n      config.tasks.push(systemFailureTask);\n      await pipeline.updateConfig(config);\n\n      // Simulate verification system failure\n      pipeline.setVerificationFailureSimulation({\n        failureProbability: 0.3, // 30% chance of failure per verification\n        recoveryTime: 5000, // 5 second recovery\n        fallbackMode: 'basic' // Use basic verification when system fails\n      });\n\n      const result = await pipeline.executeTask(systemFailureTaskId);\n\n      // Verify task completed despite verification failures\n      expect(['completed', 'rejected']).toContain(result.status);\n      \n      if (result.status === 'completed') {\n        // If completed, should have some verification results\n        expect(result.verificationResults.length).toBeGreaterThan(0);\n      }\n\n      // Should have recorded system failure recovery\n      const hasRecoveryLog = result.verificationResults.some(r => \n        r.step === 'system-recovery'\n      );\n      expect(hasRecoveryLog).toBe(true);\n    }, 15000);\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle concurrent task execution', async () => {\n      const concurrentTasks = [\n        'concurrent-task-1',\n        'concurrent-task-2', \n        'concurrent-task-3'\n      ].map(id => ({\n        id,\n        description: `Concurrent task ${id}`,\n        requiredCapabilities: ['implement'],\n        expectedDuration: 60000,\n        verificationCriteria: {\n          requiresTests: false,\n          requiresCodeReview: false,\n          requiresBuild: false,\n          minTruthScore: 0.6,\n          crossVerificationRequired: false\n        }\n      }));\n\n      // Add concurrent tasks to config\n      config.tasks.push(...concurrentTasks);\n      await pipeline.updateConfig(config);\n\n      // Execute tasks concurrently\n      const startTime = Date.now();\n      const resultPromises = concurrentTasks.map(task => \n        pipeline.executeTask(task.id)\n      );\n\n      const results = await Promise.all(resultPromises);\n      const totalDuration = Date.now() - startTime;\n\n      // Verify all tasks completed\n      expect(results.every(r => r.status === 'completed')).toBe(true);\n\n      // Verify concurrent execution was efficient (not sequential)\n      const sequentialDuration = concurrentTasks.length * 60000;\n      expect(totalDuration).toBeLessThan(sequentialDuration * 0.7);\n\n      // Verify no resource conflicts occurred\n      const hasResourceConflicts = results.some(r => \n        r.errors.some(e => e.includes('resource conflict'))\n      );\n      expect(hasResourceConflicts).toBe(false);\n    }, 30000);\n\n    test('should maintain performance under load', async () => {\n      // Create many small tasks\n      const loadTasks = Array.from({ length: 20 }, (_, i) => ({\n        id: `load-task-${i}`,\n        description: `Load test task ${i}`,\n        requiredCapabilities: ['implement'],\n        expectedDuration: 10000, // 10 seconds each\n        verificationCriteria: {\n          requiresTests: false,\n          requiresCodeReview: false,\n          requiresBuild: false,\n          minTruthScore: 0.5,\n          crossVerificationRequired: false\n        }\n      }));\n\n      config.tasks.push(...loadTasks);\n      await pipeline.updateConfig(config);\n\n      // Monitor performance metrics during load test\n      const performanceMetrics = await pipeline.startPerformanceMonitoring();\n\n      const startTime = Date.now();\n      \n      // Execute in batches to simulate realistic load\n      const batchSize = 5;\n      const batches = [];\n      for (let i = 0; i < loadTasks.length; i += batchSize) {\n        const batch = loadTasks.slice(i, i + batchSize);\n        batches.push(\n          Promise.all(batch.map(task => pipeline.executeTask(task.id)))\n        );\n      }\n\n      const allResults = await Promise.all(batches);\n      const flatResults = allResults.flat();\n      const totalDuration = Date.now() - startTime;\n\n      await pipeline.stopPerformanceMonitoring();\n\n      // Verify load handling\n      expect(flatResults.every(r => r.status === 'completed')).toBe(true);\n      expect(totalDuration).toBeLessThan(120000); // Should complete within 2 minutes\n\n      // Verify performance didn't degrade significantly\n      expect(performanceMetrics.averageResponseTime).toBeLessThan(15000);\n      expect(performanceMetrics.memoryUsage.peak).toBeLessThan(500 * 1024 * 1024); // 500MB\n      expect(performanceMetrics.errorRate).toBeLessThan(0.05); // Less than 5% errors\n    }, 60000);\n  });\n});\n\n// Mock Verification Pipeline Implementation\nclass VerificationPipeline extends EventEmitter {\n  private config: PipelineConfig;\n  private dataPath: string;\n  private agents: Map<string, any> = new Map();\n  private activeRequests: Set<string> = new Set();\n  private simulationConfig: any = {};\n  private performanceMonitor: any = null;\n\n  constructor(config: PipelineConfig, dataPath: string) {\n    super();\n    this.config = config;\n    this.dataPath = dataPath;\n  }\n\n  async initialize() {\n    // Initialize agents\n    for (const agentConfig of this.config.agents) {\n      const agent = new MockPipelineAgent(agentConfig);\n      this.agents.set(agentConfig.id, agent);\n    }\n\n    // Setup verification system\n    await fs.mkdir(path.join(this.dataPath, 'verification'), { recursive: true });\n    await fs.mkdir(path.join(this.dataPath, 'results'), { recursive: true });\n  }\n\n  async updateConfig(newConfig: PipelineConfig) {\n    this.config = newConfig;\n    // Re-initialize with new config\n    await this.initialize();\n  }\n\n  async executeTask(taskId: string): Promise<PipelineResult> {\n    const task = this.config.tasks.find(t => t.id === taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    this.activeRequests.add(taskId);\n    const startTime = Date.now();\n\n    try {\n      const result: PipelineResult = {\n        taskId,\n        status: 'completed',\n        truthScore: 0,\n        verificationResults: [],\n        duration: 0,\n        agentPerformance: new Map(),\n        errors: []\n      };\n\n      // Execute task steps based on simulation config\n      if (this.simulationConfig[taskId]) {\n        await this.executeSimulatedTask(taskId, task, result);\n      } else {\n        await this.executeStandardTask(taskId, task, result);\n      }\n\n      result.duration = Date.now() - startTime;\n      result.truthScore = this.calculateOverallTruthScore(result.verificationResults);\n\n      // Apply verification rules\n      await this.applyVerificationRules(result);\n\n      return result;\n\n    } catch (error) {\n      return {\n        taskId,\n        status: 'failed',\n        truthScore: 0,\n        verificationResults: [],\n        duration: Date.now() - startTime,\n        agentPerformance: new Map(),\n        errors: [error.message]\n      };\n    } finally {\n      this.activeRequests.delete(taskId);\n    }\n  }\n\n  private async executeStandardTask(taskId: string, task: TaskConfig, result: PipelineResult) {\n    // Implementation step\n    this.emit('step:start', { name: 'implementation', taskId });\n    const implementationResult = await this.simulateStep('implementation', 'coder-alpha', task);\n    result.verificationResults.push(implementationResult);\n\n    // Testing step\n    if (task.verificationCriteria.requiresTests) {\n      this.emit('step:start', { name: 'testing', taskId });\n      const testingResult = await this.simulateStep('testing', 'tester-gamma', task);\n      result.verificationResults.push(testingResult);\n    }\n\n    // Code review step\n    if (task.verificationCriteria.requiresCodeReview) {\n      this.emit('step:start', { name: 'code-review', taskId });\n      const reviewResult = await this.simulateStep('code-review', 'reviewer-beta', task);\n      result.verificationResults.push(reviewResult);\n    }\n\n    // Build verification\n    if (task.verificationCriteria.requiresBuild) {\n      this.emit('step:start', { name: 'build-verification', taskId });\n      const buildResult = await this.simulateStep('build-verification', 'coordinator-delta', task);\n      result.verificationResults.push(buildResult);\n    }\n\n    // Cross verification\n    if (task.verificationCriteria.crossVerificationRequired) {\n      this.emit('step:start', { name: 'cross-verification', taskId });\n      const crossResult = await this.simulateCrossVerification(task);\n      result.verificationResults.push(crossResult);\n    }\n  }\n\n  private async executeSimulatedTask(taskId: string, task: TaskConfig, result: PipelineResult) {\n    const simulation = this.simulationConfig[taskId];\n\n    // Handle various simulation types\n    if (simulation.delay) {\n      await new Promise(resolve => setTimeout(resolve, simulation.delay));\n    }\n\n    if (simulation.failure) {\n      Object.keys(simulation.failure).forEach(step => {\n        const stepResult = this.createFailureResult(step, simulation.failure[step]);\n        result.verificationResults.push(stepResult);\n      });\n      result.status = 'rejected';\n      return;\n    }\n\n    if (simulation.realistic) {\n      await this.executeRealisticSimulation(taskId, task, result, simulation.realistic);\n    }\n\n    if (simulation.microservices) {\n      await this.executeMicroservicesSimulation(taskId, task, result, simulation.microservices);\n    }\n  }\n\n  private async simulateStep(step: string, agentId: string, task: TaskConfig): Promise<VerificationStepResult> {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));\n\n    const agent = this.agents.get(agentId);\n    const truthScore = Math.random() * 0.3 + 0.7; // 0.7 to 1.0\n\n    this.emit('agent:assigned', { agentId, taskStep: step });\n\n    return {\n      step,\n      agentId,\n      passed: truthScore >= 0.7,\n      truthScore,\n      evidence: {\n        execution_time: Math.random() * 2000 + 1000,\n        quality_score: truthScore,\n        [step + '_specific_metric']: Math.random() * 100\n      },\n      conflicts: [],\n      timestamp: Date.now()\n    };\n  }\n\n  private async simulateCrossVerification(task: TaskConfig): Promise<VerificationStepResult> {\n    // Multiple agents verify the same claim\n    const verifiers = ['reviewer-beta', 'tester-gamma'];\n    const scores = verifiers.map(() => Math.random() * 0.4 + 0.6);\n    \n    const avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;\n    const conflicts = Math.abs(scores[0] - scores[1]) > 0.3 ? ['Verification disagreement detected'] : [];\n\n    this.emit('verification:complete', { step: 'cross-verification', conflicts });\n\n    return {\n      step: 'cross-verification',\n      agentId: 'verification-system',\n      passed: conflicts.length === 0,\n      truthScore: avgScore,\n      evidence: {\n        verifier_scores: scores,\n        consensus_reached: conflicts.length === 0\n      },\n      conflicts,\n      timestamp: Date.now()\n    };\n  }\n\n  private calculateOverallTruthScore(results: VerificationStepResult[]): number {\n    if (results.length === 0) return 0;\n    return results.reduce((sum, r) => sum + r.truthScore, 0) / results.length;\n  }\n\n  private async applyVerificationRules(result: PipelineResult) {\n    for (const rule of this.config.verificationRules) {\n      const ruleResult = this.evaluateRule(rule, result);\n      \n      if (ruleResult.triggered) {\n        switch (rule.action) {\n          case 'reject':\n            result.status = 'rejected';\n            result.errors.push(`Rule violation: ${rule.name}`);\n            break;\n          case 'warn':\n            result.errors.push(`Warning: ${rule.name}`);\n            break;\n          case 'escalate':\n            result.errors.push(`Escalated: ${rule.name}`);\n            break;\n        }\n\n        result.verificationResults.push({\n          step: 'rule-evaluation',\n          agentId: 'verification-system',\n          passed: rule.action !== 'reject',\n          truthScore: rule.action === 'reject' ? 0 : 0.5,\n          evidence: { rule: rule.name, action: rule.action },\n          conflicts: [],\n          timestamp: Date.now()\n        });\n      }\n    }\n  }\n\n  private evaluateRule(rule: VerificationRule, result: PipelineResult): { triggered: boolean } {\n    switch (rule.name) {\n      case 'truth-score-threshold':\n        return { triggered: result.truthScore < rule.threshold };\n      case 'cross-verification-conflict':\n        const conflictCount = result.verificationResults.reduce((sum, r) => sum + r.conflicts.length, 0);\n        return { triggered: conflictCount > rule.threshold };\n      case 'agent-reliability-warning':\n        // Simplified agent reliability check\n        return { triggered: Math.random() < 0.1 }; // 10% chance for testing\n      default:\n        return { triggered: false };\n    }\n  }\n\n  // Simulation configuration methods\n  setFailureSimulation(taskId: string, failures: any) {\n    this.simulationConfig[taskId] = { failure: failures };\n  }\n\n  setDelaySimulation(taskId: string, delay: number) {\n    this.simulationConfig[taskId] = { delay };\n  }\n\n  setConflictSimulation(taskId: string, conflicts: any) {\n    this.simulationConfig[taskId] = { conflicts };\n  }\n\n  setRealisticSimulation(taskId: string, config: any) {\n    this.simulationConfig[taskId] = { realistic: config };\n  }\n\n  setMicroservicesSimulation(taskId: string, config: any) {\n    this.simulationConfig[taskId] = { microservices: config };\n  }\n\n  setAgentFailureSimulation(agentId: string, config: any) {\n    // Agent failure simulation logic\n  }\n\n  setVerificationFailureSimulation(config: any) {\n    // Verification system failure simulation\n  }\n\n  private async executeRealisticSimulation(taskId: string, task: TaskConfig, result: PipelineResult, config: any) {\n    // Simulate realistic implementation scenario\n    const implementationResult: VerificationStepResult = {\n      step: 'implementation',\n      agentId: 'coder-alpha',\n      passed: true,\n      truthScore: 0.9,\n      evidence: config.implementation,\n      conflicts: [],\n      timestamp: Date.now()\n    };\n    result.verificationResults.push(implementationResult);\n\n    await new Promise(resolve => setTimeout(resolve, config.implementation.duration / 10)); // Sped up for testing\n\n    if (config.testing) {\n      const testingResult: VerificationStepResult = {\n        step: 'testing',\n        agentId: 'tester-gamma',\n        passed: config.testing.test_coverage > 0.8,\n        truthScore: config.testing.test_coverage,\n        evidence: config.testing,\n        conflicts: [],\n        timestamp: Date.now()\n      };\n      result.verificationResults.push(testingResult);\n    }\n\n    if (config.verification) {\n      const verificationResult: VerificationStepResult = {\n        step: 'performance-verification',\n        agentId: 'reviewer-beta',\n        passed: config.verification.performance_improvement > 0.2,\n        truthScore: 0.9,\n        evidence: config.verification,\n        conflicts: [],\n        timestamp: Date.now()\n      };\n      result.verificationResults.push(verificationResult);\n    }\n  }\n\n  private async executeMicroservicesSimulation(taskId: string, task: TaskConfig, result: PipelineResult, config: any) {\n    // Service integration test\n    const integrationResult: VerificationStepResult = {\n      step: 'service-integration-test',\n      agentId: 'tester-gamma',\n      passed: config.service_discovery_working && config.load_balancing_configured,\n      truthScore: 0.9,\n      evidence: {\n        services_tested: config.services_implemented,\n        endpoints_validated: config.api_endpoints\n      },\n      conflicts: [],\n      timestamp: Date.now()\n    };\n    result.verificationResults.push(integrationResult);\n\n    // Load testing\n    const loadTestResult: VerificationStepResult = {\n      step: 'load-testing',\n      agentId: 'tester-gamma',\n      passed: true,\n      truthScore: 0.85,\n      evidence: {\n        requests_per_second: 250,\n        average_response_time: 120,\n        error_rate: 0.02\n      },\n      conflicts: [],\n      timestamp: Date.now()\n    };\n    result.verificationResults.push(loadTestResult);\n\n    // Security scan\n    const securityResult: VerificationStepResult = {\n      step: 'security-scan',\n      agentId: 'reviewer-beta',\n      passed: true,\n      truthScore: 0.95,\n      evidence: {\n        vulnerabilities_found: 2,\n        severity_levels: { high: 0, medium: 1, low: 1 }\n      },\n      conflicts: [],\n      timestamp: Date.now()\n    };\n    result.verificationResults.push(securityResult);\n  }\n\n  private createFailureResult(step: string, failure: any): VerificationStepResult {\n    return {\n      step,\n      agentId: 'failed-agent',\n      passed: false,\n      truthScore: 0.1,\n      evidence: { failure_reason: failure.reason },\n      conflicts: ['Execution failed'],\n      timestamp: Date.now()\n    };\n  }\n\n  async startPerformanceMonitoring() {\n    this.performanceMonitor = {\n      startTime: Date.now(),\n      requestCount: 0,\n      responseTimeSum: 0,\n      memoryUsage: { initial: process.memoryUsage().heapUsed, peak: 0 },\n      errorCount: 0\n    };\n\n    return {\n      averageResponseTime: 0,\n      memoryUsage: this.performanceMonitor.memoryUsage,\n      errorRate: 0\n    };\n  }\n\n  async stopPerformanceMonitoring() {\n    if (!this.performanceMonitor) return {};\n\n    const duration = Date.now() - this.performanceMonitor.startTime;\n    const currentMemory = process.memoryUsage().heapUsed;\n    \n    return {\n      averageResponseTime: this.performanceMonitor.responseTimeSum / Math.max(1, this.performanceMonitor.requestCount),\n      memoryUsage: {\n        initial: this.performanceMonitor.memoryUsage.initial,\n        peak: Math.max(this.performanceMonitor.memoryUsage.peak, currentMemory),\n        final: currentMemory\n      },\n      errorRate: this.performanceMonitor.errorCount / Math.max(1, this.performanceMonitor.requestCount),\n      totalDuration: duration\n    };\n  }\n\n  async shutdown() {\n    this.removeAllListeners();\n    this.agents.clear();\n    this.activeRequests.clear();\n  }\n}\n\nclass MockPipelineAgent {\n  public id: string;\n  public type: string;\n  public capabilities: string[];\n  public reliability: number;\n\n  constructor(config: AgentConfig) {\n    this.id = config.id;\n    this.type = config.type;\n    this.capabilities = config.capabilities;\n    this.reliability = config.reliability;\n  }\n}"],"names":["fs","path","os","EventEmitter","describe","tempDir","pipeline","config","beforeEach","mkdtemp","join","tmpdir","createTestPipelineConfig","VerificationPipeline","initialize","afterEach","shutdown","rm","recursive","force","agents","id","type","capabilities","reliability","verificationEnabled","tasks","description","requiredCapabilities","expectedDuration","verificationCriteria","requiresTests","requiresCodeReview","requiresBuild","minTruthScore","crossVerificationRequired","verificationRules","name","condition","action","threshold","truthThreshold","timeoutMs","test","taskId","task","find","t","resultPromise","executeTask","executionSteps","on","step","push","result","console","log","agentId","expect","status","toBe","truthScore","toBeGreaterThanOrEqual","verificationResults","length","toBeGreaterThan","toContain","hasConflicts","some","r","conflicts","duration","toBeLessThan","failingTaskId","failingTask","updateConfig","setFailureSimulation","implementation","success","reason","tests","build","errors","rejectionResult","toBeDefined","passed","timeoutTaskId","timeoutTask","setDelaySimulation","startTime","Date","now","complexTaskId","complexTask","agentAssignments","Map","assignment","has","set","get","taskStep","size","Array","from","keys","crossVerificationResults","filter","conflictTaskId","conflictTask","setConflictSimulation","claimSuccess","actualSuccess","conflictResults","resolutionResults","dbTaskId","setRealisticSimulation","files_changed","lines_added","lines_removed","complexity_score","testing","unit_tests_added","integration_tests_added","test_coverage","performance_tests","review","code_quality_score","security_issues","style_violations","approved","verification","performance_improvement","memory_usage_reduction","query_optimization_verified","performanceVerification","evidence","allStepsPassed","every","microservicesTaskId","microservicesTask","setMicroservicesSimulation","services_implemented","api_endpoints","service_discovery_working","load_balancing_configured","circuit_breakers_implemented","monitoring_setup","distributed_tracing","containerization","integrationTest","loadTest","requests_per_second","securityScan","vulnerabilities_found","recoveryTaskId","recoveryTask","setAgentFailureSimulation","failAfter","failureDuration","backupAgent","e","includes","systemFailureTaskId","systemFailureTask","setVerificationFailureSimulation","failureProbability","recoveryTime","fallbackMode","hasRecoveryLog","concurrentTasks","map","resultPromises","results","Promise","all","totalDuration","sequentialDuration","hasResourceConflicts","loadTasks","_","i","performanceMetrics","startPerformanceMonitoring","batchSize","batches","batch","slice","allResults","flatResults","flat","stopPerformanceMonitoring","averageResponseTime","memoryUsage","peak","errorRate","dataPath","activeRequests","Set","simulationConfig","performanceMonitor","agentConfig","agent","MockPipelineAgent","mkdir","newConfig","Error","add","agentPerformance","executeSimulatedTask","executeStandardTask","calculateOverallTruthScore","applyVerificationRules","error","message","delete","emit","implementationResult","simulateStep","testingResult","reviewResult","buildResult","crossResult","simulateCrossVerification","simulation","delay","resolve","setTimeout","failure","Object","forEach","stepResult","createFailureResult","realistic","executeRealisticSimulation","microservices","executeMicroservicesSimulation","Math","random","execution_time","quality_score","timestamp","verifiers","scores","avgScore","reduce","a","b","abs","verifier_scores","consensus_reached","sum","rule","ruleResult","evaluateRule","triggered","conflictCount","failures","verificationResult","integrationResult","services_tested","endpoints_validated","loadTestResult","average_response_time","error_rate","securityResult","severity_levels","high","medium","low","failure_reason","requestCount","responseTimeSum","initial","process","heapUsed","errorCount","currentMemory","max","final","removeAllListeners","clear"],"mappings":"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"}