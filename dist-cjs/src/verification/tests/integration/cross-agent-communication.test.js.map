{"version":3,"sources":["../../../../../src/verification/tests/integration/cross-agent-communication.test.ts"],"sourcesContent":["/**\n * Integration Tests for Cross-Agent Communication Verification\n * \n * Tests the verification of communication patterns between agents including:\n * - Message integrity verification\n * - Communication protocol validation\n * - Agent response verification\n * - Cross-verification between agents\n */\n\nimport { jest } from '@jest/globals';\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock agent types for testing\ninterface MockAgent {\n  id: string;\n  type: string;\n  capabilities: string[];\n  messageHistory: AgentMessage[];\n  verificationResults: VerificationResult[];\n  truthScore: number;\n  emit: (event: string, data: any) => void;\n  on: (event: string, callback: (data: any) => void) => void;\n}\n\ninterface AgentMessage {\n  id: string;\n  from: string;\n  to: string;\n  type: 'task' | 'result' | 'verification' | 'status';\n  content: any;\n  timestamp: number;\n  hash: string;\n}\n\ninterface VerificationResult {\n  messageId: string;\n  verifiedBy: string;\n  truthScore: number;\n  evidence: any;\n  timestamp: number;\n  conflicts: string[];\n}\n\ninterface CrossVerificationReport {\n  totalMessages: number;\n  verifiedMessages: number;\n  conflictingClaims: number;\n  avgTruthScore: number;\n  agentReliability: Map<string, number>;\n  communicationIntegrity: number;\n}\n\ndescribe('Cross-Agent Communication Verification', () => {\n  let communicationBus: EventEmitter;\n  let mockAgents: Map<string, MockAgent>;\n  let verificationSystem: CrossAgentVerificationSystem;\n  let tempDir: string;\n\n  beforeEach(async () => {\n    // Setup test environment\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'cross-agent-test-'));\n    \n    communicationBus = new EventEmitter();\n    mockAgents = new Map();\n    verificationSystem = new CrossAgentVerificationSystem(communicationBus, tempDir);\n\n    // Create mock agents\n    await createMockAgents();\n    \n    // Initialize verification system\n    await verificationSystem.initialize();\n  });\n\n  afterEach(async () => {\n    await fs.rm(tempDir, { recursive: true, force: true });\n    communicationBus.removeAllListeners();\n  });\n\n  async function createMockAgents() {\n    const agentConfigs = [\n      { id: 'coder-001', type: 'coder', capabilities: ['implement', 'test', 'debug'] },\n      { id: 'reviewer-001', type: 'reviewer', capabilities: ['review', 'verify', 'validate'] },\n      { id: 'tester-001', type: 'tester', capabilities: ['test', 'benchmark', 'validate'] },\n      { id: 'coordinator-001', type: 'coordinator', capabilities: ['orchestrate', 'monitor', 'report'] }\n    ];\n\n    for (const config of agentConfigs) {\n      const agent = createMockAgent(config);\n      mockAgents.set(config.id, agent);\n      \n      // Register agent with communication bus\n      communicationBus.on(`message:${config.id}`, (message: AgentMessage) => {\n        agent.messageHistory.push(message);\n        agent.emit('message:received', message);\n      });\n    }\n  }\n\n  function createMockAgent(config: any): MockAgent {\n    const agent = new EventEmitter() as any;\n    \n    Object.assign(agent, {\n      id: config.id,\n      type: config.type,\n      capabilities: config.capabilities,\n      messageHistory: [],\n      verificationResults: [],\n      truthScore: 1.0,\n      \n      sendMessage(to: string, type: string, content: any) {\n        const message: AgentMessage = {\n          id: `msg-${Date.now()}-${Math.random()}`,\n          from: this.id,\n          to,\n          type,\n          content,\n          timestamp: Date.now(),\n          hash: generateMessageHash(content)\n        };\n        \n        communicationBus.emit(`message:${to}`, message);\n        communicationBus.emit('message:sent', message);\n        return message;\n      },\n      \n      verifyMessage(message: AgentMessage, evidence: any): VerificationResult {\n        const result: VerificationResult = {\n          messageId: message.id,\n          verifiedBy: this.id,\n          truthScore: calculateTruthScore(message, evidence),\n          evidence,\n          timestamp: Date.now(),\n          conflicts: detectConflicts(message, evidence)\n        };\n        \n        this.verificationResults.push(result);\n        communicationBus.emit('verification:complete', result);\n        return result;\n      }\n    });\n    \n    return agent;\n  }\n\n  function generateMessageHash(content: any): string {\n    return `hash-${JSON.stringify(content).length}-${Date.now()}`;\n  }\n\n  function calculateTruthScore(message: AgentMessage, evidence: any): number {\n    // Simplified truth score calculation for testing\n    const baseScore = 0.8;\n    const evidenceQuality = evidence?.quality || 0.5;\n    const messageIntegrity = message.hash ? 0.2 : 0;\n    \n    return Math.min(1.0, baseScore + evidenceQuality * 0.15 + messageIntegrity);\n  }\n\n  function detectConflicts(message: AgentMessage, evidence: any): string[] {\n    const conflicts: string[] = [];\n    \n    // Simulate conflict detection\n    if (message.content?.claimed_success && evidence?.actual_success === false) {\n      conflicts.push('Claimed success but evidence shows failure');\n    }\n    \n    if (message.content?.test_count && evidence?.actual_test_count !== message.content.test_count) {\n      conflicts.push(`Test count mismatch: claimed ${message.content.test_count}, actual ${evidence.actual_test_count}`);\n    }\n    \n    return conflicts;\n  }\n\n  describe('Message Integrity Verification', () => {\n    test('should verify message integrity through hash validation', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      // Coder sends implementation result\n      const message = coder.sendMessage(reviewer.id, 'result', {\n        task: 'implement-auth',\n        status: 'completed',\n        files_created: 5,\n        tests_added: 12,\n        claimed_success: true\n      });\n\n      // Wait for message to be delivered\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Verify message was received with correct hash\n      expect(reviewer.messageHistory).toHaveLength(1);\n      expect(reviewer.messageHistory[0].hash).toBe(message.hash);\n      expect(reviewer.messageHistory[0].content).toEqual(message.content);\n    });\n\n    test('should detect message tampering through hash mismatch', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      const message = coder.sendMessage(reviewer.id, 'result', {\n        task: 'implement-feature',\n        status: 'completed'\n      });\n\n      // Simulate message tampering\n      const tamperedMessage = { ...message };\n      tamperedMessage.content.status = 'failed';\n      // Hash remains the same, creating mismatch\n\n      const expectedHash = generateMessageHash(tamperedMessage.content);\n      expect(expectedHash).not.toBe(tamperedMessage.hash);\n    });\n\n    test('should track message delivery and acknowledgment', async () => {\n      const coordinator = mockAgents.get('coordinator-001')!;\n      const tester = mockAgents.get('tester-001')!;\n\n      let messageDelivered = false;\n      let acknowledgmentReceived = false;\n\n      communicationBus.on('message:sent', (message) => {\n        if (message.from === coordinator.id && message.to === tester.id) {\n          messageDelivered = true;\n        }\n      });\n\n      // Tester acknowledges receipt\n      tester.on('message:received', (message) => {\n        tester.sendMessage(message.from, 'acknowledgment', {\n          messageId: message.id,\n          received: true\n        });\n        acknowledgmentReceived = true;\n      });\n\n      // Send message\n      coordinator.sendMessage(tester.id, 'task', {\n        task: 'run-performance-tests',\n        timeout: 300000\n      });\n\n      await new Promise(resolve => setTimeout(resolve, 20));\n\n      expect(messageDelivered).toBe(true);\n      expect(acknowledgmentReceived).toBe(true);\n    });\n  });\n\n  describe('Communication Protocol Validation', () => {\n    test('should validate message format and required fields', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      const validMessage = coder.sendMessage(reviewer.id, 'result', {\n        task: 'implement-api',\n        status: 'completed',\n        timestamp: Date.now(),\n        metadata: {\n          files_changed: 3,\n          lines_added: 150,\n          tests_added: 8\n        }\n      });\n\n      // Validate message structure\n      expect(validMessage.id).toBeDefined();\n      expect(validMessage.from).toBe(coder.id);\n      expect(validMessage.to).toBe(reviewer.id);\n      expect(validMessage.type).toBe('result');\n      expect(validMessage.content).toBeDefined();\n      expect(validMessage.timestamp).toBeGreaterThan(0);\n      expect(validMessage.hash).toBeDefined();\n    });\n\n    test('should validate agent capability permissions', async () => {\n      const agents = Array.from(mockAgents.values());\n\n      // Test that each agent only performs actions within their capabilities\n      for (const agent of agents) {\n        if (agent.capabilities.includes('implement')) {\n          expect(() => agent.sendMessage('test', 'result', { code: 'implementation' }))\n            .not.toThrow();\n        }\n        \n        if (agent.capabilities.includes('review')) {\n          expect(() => agent.sendMessage('test', 'verification', { approved: true }))\n            .not.toThrow();\n        }\n        \n        if (agent.capabilities.includes('test')) {\n          expect(() => agent.sendMessage('test', 'result', { tests_passed: 10 }))\n            .not.toThrow();\n        }\n      }\n    });\n\n    test('should enforce message routing rules', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const tester = mockAgents.get('tester-001')!;\n      const coordinator = mockAgents.get('coordinator-001')!;\n\n      // Implementation results should go to reviewer first\n      const implementationMessage = coder.sendMessage('reviewer-001', 'result', {\n        implementation: 'completed'\n      });\n\n      // Test results should go to coordinator\n      const testMessage = tester.sendMessage(coordinator.id, 'result', {\n        tests_passed: 15,\n        tests_failed: 2\n      });\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Verify routing\n      const reviewer = mockAgents.get('reviewer-001')!;\n      expect(reviewer.messageHistory).toHaveLength(1);\n      expect(reviewer.messageHistory[0].type).toBe('result');\n\n      expect(coordinator.messageHistory).toHaveLength(1);\n      expect(coordinator.messageHistory[0].from).toBe(tester.id);\n    });\n  });\n\n  describe('Agent Response Verification', () => {\n    test('should verify agent claims against actual evidence', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      // Coder claims task completion\n      const claimMessage = coder.sendMessage(reviewer.id, 'result', {\n        task: 'implement-user-auth',\n        status: 'completed',\n        claimed_success: true,\n        files_created: 4,\n        tests_added: 10\n      });\n\n      // Reviewer verifies with evidence\n      const evidence = {\n        actual_success: true,\n        files_found: 4,\n        tests_found: 10,\n        quality: 0.9,\n        lint_errors: 0,\n        test_coverage: 0.85\n      };\n\n      const verification = reviewer.verifyMessage(claimMessage, evidence);\n\n      expect(verification.truthScore).toBeGreaterThan(0.8);\n      expect(verification.conflicts).toHaveLength(0);\n      expect(verification.verifiedBy).toBe(reviewer.id);\n    });\n\n    test('should detect false claims in agent responses', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      // Coder makes false claims\n      const falseClaimMessage = coder.sendMessage(reviewer.id, 'result', {\n        task: 'fix-bugs',\n        status: 'completed',\n        claimed_success: true,\n        bugs_fixed: 5,\n        test_count: 20\n      });\n\n      // Evidence contradicts claims\n      const evidence = {\n        actual_success: false,\n        bugs_remaining: 3,\n        actual_test_count: 15,\n        quality: 0.3,\n        build_success: false\n      };\n\n      const verification = reviewer.verifyMessage(falseClaimMessage, evidence);\n\n      expect(verification.truthScore).toBeLessThan(0.5);\n      expect(verification.conflicts.length).toBeGreaterThan(0);\n      expect(verification.conflicts).toContain('Claimed success but evidence shows failure');\n      expect(verification.conflicts).toContain('Test count mismatch: claimed 20, actual 15');\n    });\n\n    test('should track agent reliability over time', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      // Send multiple messages with varying truth scores\n      const scenarios = [\n        { claimed: true, actual: true, score: 0.95 },\n        { claimed: true, actual: false, score: 0.2 },\n        { claimed: true, actual: true, score: 0.9 },\n        { claimed: false, actual: false, score: 1.0 },\n        { claimed: true, actual: true, score: 0.85 }\n      ];\n\n      for (let i = 0; i < scenarios.length; i++) {\n        const scenario = scenarios[i];\n        const message = coder.sendMessage(reviewer.id, 'result', {\n          task: `task-${i}`,\n          claimed_success: scenario.claimed\n        });\n\n        const evidence = {\n          actual_success: scenario.actual,\n          quality: scenario.score\n        };\n\n        reviewer.verifyMessage(message, evidence);\n      }\n\n      // Calculate reliability\n      const verifications = reviewer.verificationResults;\n      const avgTruthScore = verifications.reduce((sum, v) => sum + v.truthScore, 0) / verifications.length;\n      \n      expect(verifications).toHaveLength(5);\n      expect(avgTruthScore).toBeGreaterThan(0.6);\n      expect(avgTruthScore).toBeLessThan(0.9);\n    });\n  });\n\n  describe('Cross-Verification Between Agents', () => {\n    test('should enable multiple agents to verify same claim', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n      const tester = mockAgents.get('tester-001')!;\n\n      // Coder claims implementation is complete\n      const claimMessage = coder.sendMessage(reviewer.id, 'result', {\n        task: 'implement-payment-flow',\n        status: 'completed',\n        claimed_success: true\n      });\n\n      // Send copy to tester for independent verification\n      const testMessage = { ...claimMessage, to: tester.id };\n      communicationBus.emit(`message:${tester.id}`, testMessage);\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Both agents verify independently\n      const reviewerEvidence = {\n        actual_success: true,\n        code_quality: 0.9,\n        standards_compliance: true\n      };\n\n      const testerEvidence = {\n        actual_success: true,\n        tests_pass: true,\n        performance_acceptable: true\n      };\n\n      const reviewerVerification = reviewer.verifyMessage(claimMessage, reviewerEvidence);\n      const testerVerification = tester.verifyMessage(testMessage, testerEvidence);\n\n      // Compare verification results\n      expect(reviewerVerification.truthScore).toBeGreaterThan(0.8);\n      expect(testerVerification.truthScore).toBeGreaterThan(0.8);\n      \n      const scoreDifference = Math.abs(reviewerVerification.truthScore - testerVerification.truthScore);\n      expect(scoreDifference).toBeLessThan(0.2); // Should be reasonably consistent\n    });\n\n    test('should detect conflicting verifications between agents', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n      const tester = mockAgents.get('tester-001')!;\n\n      const claimMessage = coder.sendMessage(reviewer.id, 'result', {\n        task: 'optimize-performance',\n        claimed_success: true,\n        performance_improvement: '50%'\n      });\n\n      // Send to tester\n      const testMessage = { ...claimMessage, to: tester.id };\n      communicationBus.emit(`message:${tester.id}`, testMessage);\n\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Conflicting evidence\n      const reviewerEvidence = {\n        actual_success: true,\n        code_looks_good: true,\n        quality: 0.8\n      };\n\n      const testerEvidence = {\n        actual_success: false,\n        performance_worse: true,\n        quality: 0.2\n      };\n\n      const reviewerVerification = reviewer.verifyMessage(claimMessage, reviewerEvidence);\n      const testerVerification = tester.verifyMessage(testMessage, testerEvidence);\n\n      // Detect conflict\n      const scoreDifference = Math.abs(reviewerVerification.truthScore - testerVerification.truthScore);\n      expect(scoreDifference).toBeGreaterThan(0.5); // Significant disagreement\n\n      expect(reviewerVerification.conflicts).toHaveLength(0);\n      expect(testerVerification.conflicts.length).toBeGreaterThan(0);\n    });\n\n    test('should aggregate cross-verification results', async () => {\n      const report = await verificationSystem.generateCrossVerificationReport();\n\n      expect(report).toBeDefined();\n      expect(report.totalMessages).toBeGreaterThanOrEqual(0);\n      expect(report.verifiedMessages).toBeGreaterThanOrEqual(0);\n      expect(report.conflictingClaims).toBeGreaterThanOrEqual(0);\n      expect(report.communicationIntegrity).toBeGreaterThanOrEqual(0);\n      expect(report.communicationIntegrity).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('Communication Pattern Analysis', () => {\n    test('should analyze communication patterns for anomalies', async () => {\n      const agents = Array.from(mockAgents.values());\n\n      // Simulate normal communication pattern\n      for (let i = 0; i < 10; i++) {\n        const sender = agents[i % agents.length];\n        const receiver = agents[(i + 1) % agents.length];\n        \n        sender.sendMessage(receiver.id, 'status', {\n          update: `Status update ${i}`,\n          timestamp: Date.now() + i * 1000\n        });\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 50));\n\n      // Analyze patterns\n      const patterns = await verificationSystem.analyzeCommunicationPatterns();\n\n      expect(patterns.messageFrequency).toBeGreaterThan(0);\n      expect(patterns.averageResponseTime).toBeGreaterThan(0);\n      expect(patterns.communicationGraph).toBeDefined();\n      expect(patterns.anomalies).toBeDefined();\n    });\n\n    test('should detect spam or flooding attacks', async () => {\n      const coder = mockAgents.get('coder-001')!;\n      const reviewer = mockAgents.get('reviewer-001')!;\n\n      // Simulate spam attack\n      const spamPromises = [];\n      for (let i = 0; i < 100; i++) {\n        spamPromises.push(\n          Promise.resolve(coder.sendMessage(reviewer.id, 'status', {\n            spam: `Message ${i}`,\n            timestamp: Date.now()\n          }))\n        );\n      }\n\n      await Promise.all(spamPromises);\n\n      // Check for flood detection\n      const messageCount = reviewer.messageHistory.length;\n      expect(messageCount).toBe(100);\n\n      // Verification system should detect anomalous message volume\n      const anomalyReport = await verificationSystem.detectAnomalies();\n      expect(anomalyReport.highVolumeDetected).toBe(true);\n      expect(anomalyReport.suspiciousAgents).toContain(coder.id);\n    });\n  });\n\n  describe('Evidence Validation', () => {\n    test('should validate evidence quality and completeness', async () => {\n      const reviewer = mockAgents.get('reviewer-001')!;\n      \n      const message: AgentMessage = {\n        id: 'test-msg',\n        from: 'coder-001',\n        to: reviewer.id,\n        type: 'result',\n        content: { task: 'test', claimed_success: true },\n        timestamp: Date.now(),\n        hash: 'test-hash'\n      };\n\n      // Test with complete evidence\n      const completeEvidence = {\n        actual_success: true,\n        test_results: { passed: 10, failed: 0 },\n        build_logs: 'SUCCESS',\n        performance_metrics: { response_time: 150 },\n        quality: 0.9\n      };\n\n      const completeVerification = reviewer.verifyMessage(message, completeEvidence);\n      expect(completeVerification.truthScore).toBeGreaterThan(0.8);\n\n      // Test with incomplete evidence\n      const incompleteEvidence = {\n        actual_success: true,\n        quality: 0.5\n      };\n\n      const incompleteVerification = reviewer.verifyMessage(message, incompleteEvidence);\n      expect(incompleteVerification.truthScore).toBeLessThan(completeVerification.truthScore);\n    });\n\n    test('should detect fabricated or inconsistent evidence', async () => {\n      const reviewer = mockAgents.get('reviewer-001')!;\n      \n      const message: AgentMessage = {\n        id: 'test-msg-2',\n        from: 'coder-001',\n        to: reviewer.id,\n        type: 'result',\n        content: { \n          task: 'optimize-database',\n          claimed_success: true,\n          performance_improved: true\n        },\n        timestamp: Date.now(),\n        hash: 'test-hash-2'\n      };\n\n      // Inconsistent evidence\n      const inconsistentEvidence = {\n        actual_success: true,\n        performance_metrics: {\n          before: { query_time: 100 },\n          after: { query_time: 200 } // Actually worse!\n        },\n        quality: 0.9 // High quality score doesn't match actual results\n      };\n\n      const verification = reviewer.verifyMessage(message, inconsistentEvidence);\n      \n      // Should detect inconsistency between claimed improvement and actual metrics\n      expect(verification.conflicts.length).toBeGreaterThan(0);\n      expect(verification.truthScore).toBeLessThan(0.6);\n    });\n  });\n});\n\n// Mock Cross-Agent Verification System\nclass CrossAgentVerificationSystem {\n  private communicationBus: EventEmitter;\n  private dataPath: string;\n  private verificationHistory: VerificationResult[] = [];\n  private messageHistory: AgentMessage[] = [];\n\n  constructor(communicationBus: EventEmitter, dataPath: string) {\n    this.communicationBus = communicationBus;\n    this.dataPath = dataPath;\n  }\n\n  async initialize() {\n    // Setup event listeners\n    this.communicationBus.on('message:sent', (message: AgentMessage) => {\n      this.messageHistory.push(message);\n    });\n\n    this.communicationBus.on('verification:complete', (result: VerificationResult) => {\n      this.verificationHistory.push(result);\n    });\n\n    // Create data directory\n    await fs.mkdir(this.dataPath, { recursive: true });\n  }\n\n  async generateCrossVerificationReport(): Promise<CrossVerificationReport> {\n    const totalMessages = this.messageHistory.length;\n    const verifiedMessages = this.verificationHistory.length;\n    const conflictingClaims = this.verificationHistory.filter(v => v.conflicts.length > 0).length;\n    \n    const avgTruthScore = this.verificationHistory.length > 0\n      ? this.verificationHistory.reduce((sum, v) => sum + v.truthScore, 0) / this.verificationHistory.length\n      : 1.0;\n\n    const agentReliability = new Map<string, number>();\n    const communicationIntegrity = Math.max(0, 1 - (conflictingClaims / Math.max(1, verifiedMessages)));\n\n    return {\n      totalMessages,\n      verifiedMessages,\n      conflictingClaims,\n      avgTruthScore,\n      agentReliability,\n      communicationIntegrity\n    };\n  }\n\n  async analyzeCommunicationPatterns() {\n    const now = Date.now();\n    const recentMessages = this.messageHistory.filter(m => now - m.timestamp < 60000); // Last minute\n\n    return {\n      messageFrequency: recentMessages.length,\n      averageResponseTime: 50, // Simplified\n      communicationGraph: new Map(),\n      anomalies: []\n    };\n  }\n\n  async detectAnomalies() {\n    const now = Date.now();\n    const recentMessages = this.messageHistory.filter(m => now - m.timestamp < 5000); // Last 5 seconds\n    const highVolumeThreshold = 50;\n\n    const messageCounts = new Map<string, number>();\n    recentMessages.forEach(m => {\n      messageCounts.set(m.from, (messageCounts.get(m.from) || 0) + 1);\n    });\n\n    const suspiciousAgents = Array.from(messageCounts.entries())\n      .filter(([agent, count]) => count > highVolumeThreshold)\n      .map(([agent]) => agent);\n\n    return {\n      highVolumeDetected: suspiciousAgents.length > 0,\n      suspiciousAgents,\n      totalRecentMessages: recentMessages.length\n    };\n  }\n}"],"names":["EventEmitter","fs","path","os","describe","communicationBus","mockAgents","verificationSystem","tempDir","beforeEach","mkdtemp","join","tmpdir","Map","CrossAgentVerificationSystem","createMockAgents","initialize","afterEach","rm","recursive","force","removeAllListeners","agentConfigs","id","type","capabilities","config","agent","createMockAgent","set","on","message","messageHistory","push","emit","Object","assign","verificationResults","truthScore","sendMessage","to","content","Date","now","Math","random","from","timestamp","hash","generateMessageHash","verifyMessage","evidence","result","messageId","verifiedBy","calculateTruthScore","conflicts","detectConflicts","JSON","stringify","length","baseScore","evidenceQuality","quality","messageIntegrity","min","claimed_success","actual_success","test_count","actual_test_count","test","coder","get","reviewer","task","status","files_created","tests_added","Promise","resolve","setTimeout","expect","toHaveLength","toBe","toEqual","tamperedMessage","expectedHash","not","coordinator","tester","messageDelivered","acknowledgmentReceived","received","timeout","validMessage","metadata","files_changed","lines_added","toBeDefined","toBeGreaterThan","agents","Array","values","includes","code","toThrow","approved","tests_passed","implementationMessage","implementation","testMessage","tests_failed","claimMessage","files_found","tests_found","lint_errors","test_coverage","verification","falseClaimMessage","bugs_fixed","bugs_remaining","build_success","toBeLessThan","toContain","scenarios","claimed","actual","score","i","scenario","verifications","avgTruthScore","reduce","sum","v","reviewerEvidence","code_quality","standards_compliance","testerEvidence","tests_pass","performance_acceptable","reviewerVerification","testerVerification","scoreDifference","abs","performance_improvement","code_looks_good","performance_worse","report","generateCrossVerificationReport","totalMessages","toBeGreaterThanOrEqual","verifiedMessages","conflictingClaims","communicationIntegrity","toBeLessThanOrEqual","sender","receiver","update","patterns","analyzeCommunicationPatterns","messageFrequency","averageResponseTime","communicationGraph","anomalies","spamPromises","spam","all","messageCount","anomalyReport","detectAnomalies","highVolumeDetected","suspiciousAgents","completeEvidence","test_results","passed","failed","build_logs","performance_metrics","response_time","completeVerification","incompleteEvidence","incompleteVerification","performance_improved","inconsistentEvidence","before","query_time","after","dataPath","verificationHistory","mkdir","filter","agentReliability","max","recentMessages","m","highVolumeThreshold","messageCounts","forEach","entries","count","map","totalRecentMessages"],"mappings":"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"}