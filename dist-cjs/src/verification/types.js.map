{"version":3,"sources":["../../../src/verification/types.ts"],"sourcesContent":["/**\n * Verification Engine Types and Interfaces\n * Comprehensive type definitions for the verification system\n */\n\nimport type { AgentId, TaskId, SwarmId, TaskResult, AgentState } from '../swarm/types.js';\n\n// ===== CORE VERIFICATION TYPES =====\n\nexport type VerificationLevel = 'basic' | 'standard' | 'strict' | 'critical';\nexport type VerificationStatus = 'pending' | 'running' | 'passed' | 'failed' | 'error' | 'cancelled';\nexport type CheckpointType = 'pre_execution' | 'mid_execution' | 'post_execution' | 'rollback_point';\nexport type ClaimType = 'task_completion' | 'quality_metric' | 'performance_benchmark' | 'system_state' | 'agent_capability';\n\n// ===== TRUTH SCORING =====\n\nexport interface TruthScoreConfig {\n  /** Minimum threshold for truth score (0-1, default: 0.95) */\n  threshold: number;\n  /** Weighted factors for scoring */\n  weights: TruthScoringWeights;\n  /** Enable/disable specific validation checks */\n  checks: TruthValidationChecks;\n  /** Confidence intervals for statistical validation */\n  confidence: ConfidenceConfig;\n}\n\nexport interface TruthScoringWeights {\n  /** Weight for agent reliability history (0-1) */\n  agentReliability: number;\n  /** Weight for cross-validation results (0-1) */\n  crossValidation: number;\n  /** Weight for external verification (0-1) */\n  externalVerification: number;\n  /** Weight for consistency with known facts (0-1) */\n  factualConsistency: number;\n  /** Weight for logical coherence (0-1) */\n  logicalCoherence: number;\n}\n\nexport interface TruthValidationChecks {\n  /** Validate against agent performance history */\n  historicalValidation: boolean;\n  /** Cross-check with multiple agents */\n  crossAgentValidation: boolean;\n  /** Verify against external sources */\n  externalValidation: boolean;\n  /** Check for logical consistency */\n  logicalValidation: boolean;\n  /** Validate statistical claims */\n  statisticalValidation: boolean;\n}\n\nexport interface ConfidenceConfig {\n  /** Confidence level for statistical tests (e.g., 0.95 for 95%) */\n  level: number;\n  /** Sample size requirements */\n  minSampleSize: number;\n  /** Maximum acceptable error margin */\n  maxErrorMargin: number;\n}\n\nexport interface TruthScore {\n  /** Overall truth score (0-1) */\n  score: number;\n  /** Individual component scores */\n  components: TruthScoreComponents;\n  /** Confidence intervals */\n  confidence: ConfidenceInterval;\n  /** Evidence supporting the score */\n  evidence: TruthEvidence[];\n  /** Computed timestamp */\n  timestamp: Date;\n  /** Validation metadata */\n  metadata: Record<string, unknown>;\n}\n\nexport interface TruthScoreComponents {\n  agentReliability: number;\n  crossValidation: number;\n  externalVerification: number;\n  factualConsistency: number;\n  logicalCoherence: number;\n  overall: number;\n}\n\nexport interface ConfidenceInterval {\n  lower: number;\n  upper: number;\n  level: number;\n}\n\nexport interface TruthEvidence {\n  type: 'agent_history' | 'cross_validation' | 'external_source' | 'logical_proof' | 'statistical_test';\n  source: string;\n  weight: number;\n  score: number;\n  details: Record<string, unknown>;\n  timestamp: Date;\n}\n\n// ===== VERIFICATION PIPELINE =====\n\nexport interface VerificationPipelineConfig {\n  /** Pipeline identification */\n  id: string;\n  name: string;\n  description: string;\n  \n  /** Pipeline configuration */\n  level: VerificationLevel;\n  checkpoints: VerificationCheckpoint[];\n  truthScoreConfig: TruthScoreConfig;\n  \n  /** Execution settings */\n  parallel: boolean;\n  timeout: number;\n  retryAttempts: number;\n  \n  /** Rollback settings */\n  enableRollback: boolean;\n  snapshotInterval: number;\n  maxSnapshots: number;\n  \n  /** Reporting settings */\n  reportLevel: 'minimal' | 'standard' | 'detailed' | 'comprehensive';\n  notifications: NotificationConfig[];\n}\n\nexport interface VerificationCheckpoint {\n  /** Checkpoint identification */\n  id: string;\n  name: string;\n  type: CheckpointType;\n  \n  /** Execution configuration */\n  mandatory: boolean;\n  order: number;\n  dependencies: string[];\n  \n  /** Validation rules */\n  validators: CheckpointValidator[];\n  conditions: CheckpointCondition[];\n  \n  /** Execution settings */\n  timeout: number;\n  retryAttempts: number;\n  \n  /** Rollback configuration */\n  createSnapshot: boolean;\n  rollbackOnFailure: boolean;\n}\n\nexport interface CheckpointValidator {\n  id: string;\n  type: 'truth_score' | 'agent_claim' | 'integration_test' | 'state_validation' | 'custom';\n  config: Record<string, unknown>;\n  weight: number;\n  required: boolean;\n}\n\nexport interface CheckpointCondition {\n  field: string;\n  operator: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte' | 'in' | 'nin' | 'regex' | 'custom';\n  value: unknown;\n  description: string;\n}\n\nexport interface NotificationConfig {\n  type: 'email' | 'webhook' | 'slack' | 'teams' | 'custom';\n  endpoint: string;\n  conditions: string[];\n  template: string;\n}\n\nexport interface VerificationResult {\n  /** Result identification */\n  id: string;\n  pipelineId: string;\n  timestamp: Date;\n  \n  /** Overall result */\n  status: VerificationStatus;\n  score: number;\n  passed: boolean;\n  \n  /** Detailed results */\n  checkpointResults: CheckpointResult[];\n  truthScore: TruthScore;\n  \n  /** Performance metrics */\n  duration: number;\n  resourceUsage: ResourceUsage;\n  \n  /** Evidence and artifacts */\n  evidence: VerificationEvidence[];\n  artifacts: Record<string, unknown>;\n  \n  /** Error information */\n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n  \n  /** Recommendations */\n  recommendations: string[];\n  nextSteps: string[];\n}\n\nexport interface CheckpointResult {\n  checkpointId: string;\n  status: VerificationStatus;\n  score: number;\n  passed: boolean;\n  duration: number;\n  validatorResults: ValidatorResult[];\n  evidence: VerificationEvidence[];\n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n}\n\nexport interface ValidatorResult {\n  validatorId: string;\n  status: VerificationStatus;\n  score: number;\n  passed: boolean;\n  details: Record<string, unknown>;\n  evidence: VerificationEvidence[];\n}\n\nexport interface ResourceUsage {\n  cpu: number;\n  memory: number;\n  disk: number;\n  network: number;\n  tokens?: number;\n  apiCalls?: number;\n}\n\nexport interface VerificationEvidence {\n  type: string;\n  source: string;\n  timestamp: Date;\n  data: Record<string, unknown>;\n  reliability: number;\n  weight: number;\n}\n\nexport interface VerificationError {\n  code: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  context: Record<string, unknown>;\n  recoverable: boolean;\n  timestamp: Date;\n}\n\nexport interface VerificationWarning {\n  code: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high';\n  context: Record<string, unknown>;\n  recommendation: string;\n  timestamp: Date;\n}\n\n// ===== AGENT CLAIM VALIDATION =====\n\nexport interface AgentClaim {\n  /** Claim identification */\n  id: string;\n  agentId: AgentId;\n  taskId?: TaskId;\n  swarmId?: SwarmId;\n  \n  /** Claim details */\n  type: ClaimType;\n  title: string;\n  description: string;\n  \n  /** Claim data */\n  data: Record<string, unknown>;\n  metrics: ClaimMetrics;\n  \n  /** Supporting evidence */\n  evidence: ClaimEvidence[];\n  references: string[];\n  \n  /** Validation status */\n  status: VerificationStatus;\n  confidence: number;\n  \n  /** Timestamps */\n  submittedAt: Date;\n  validatedAt?: Date;\n  \n  /** Validation metadata */\n  metadata: Record<string, unknown>;\n}\n\nexport interface ClaimMetrics {\n  /** Performance metrics */\n  executionTime?: number;\n  resourceUsage?: ResourceUsage;\n  throughput?: number;\n  errorRate?: number;\n  \n  /** Quality metrics */\n  accuracy?: number;\n  precision?: number;\n  recall?: number;\n  f1Score?: number;\n  \n  /** Custom metrics */\n  custom: Record<string, number>;\n}\n\nexport interface ClaimEvidence {\n  type: 'log_entry' | 'test_result' | 'measurement' | 'artifact' | 'witness_testimony' | 'external_verification';\n  source: string;\n  timestamp: Date;\n  data: Record<string, unknown>;\n  reliability: number;\n  verifiable: boolean;\n}\n\nexport interface ClaimValidationConfig {\n  /** Validation rules */\n  requiredEvidence: string[];\n  minimumConfidence: number;\n  crossValidationRequired: boolean;\n  \n  /** Verification methods */\n  methods: ClaimValidationMethod[];\n  \n  /** Timeout and retry settings */\n  timeout: number;\n  retryAttempts: number;\n  \n  /** Quality thresholds */\n  qualityThresholds: Record<string, number>;\n}\n\nexport interface ClaimValidationMethod {\n  name: string;\n  type: 'historical_comparison' | 'cross_agent_verification' | 'external_validation' | 'statistical_test' | 'custom';\n  config: Record<string, unknown>;\n  weight: number;\n  required: boolean;\n}\n\nexport interface ClaimValidationResult {\n  claimId: string;\n  status: VerificationStatus;\n  confidence: number;\n  score: number;\n  passed: boolean;\n  \n  methodResults: MethodValidationResult[];\n  evidence: VerificationEvidence[];\n  \n  duration: number;\n  timestamp: Date;\n  \n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n  recommendations: string[];\n}\n\nexport interface MethodValidationResult {\n  methodName: string;\n  status: VerificationStatus;\n  score: number;\n  confidence: number;\n  details: Record<string, unknown>;\n  evidence: VerificationEvidence[];\n}\n\n// ===== INTEGRATION TESTING =====\n\nexport interface IntegrationTestConfig {\n  /** Test identification */\n  id: string;\n  name: string;\n  description: string;\n  \n  /** Test scope */\n  agents: AgentId[];\n  tasks: TaskId[];\n  swarms: SwarmId[];\n  \n  /** Test scenarios */\n  scenarios: TestScenario[];\n  \n  /** Execution settings */\n  parallel: boolean;\n  timeout: number;\n  retryAttempts: number;\n  \n  /** Environment settings */\n  environment: TestEnvironment;\n  \n  /** Validation criteria */\n  validationCriteria: ValidationCriteria;\n}\n\nexport interface TestScenario {\n  id: string;\n  name: string;\n  description: string;\n  \n  /** Test steps */\n  steps: TestStep[];\n  \n  /** Setup and teardown */\n  setup?: TestStep[];\n  teardown?: TestStep[];\n  \n  /** Dependencies */\n  dependencies: string[];\n  \n  /** Expected outcomes */\n  expectedResults: ExpectedResult[];\n  \n  /** Resource requirements */\n  resources: ResourceRequirements;\n}\n\nexport interface TestStep {\n  id: string;\n  name: string;\n  type: 'agent_action' | 'system_action' | 'validation' | 'wait' | 'custom';\n  \n  /** Step configuration */\n  config: Record<string, unknown>;\n  params: Record<string, unknown>;\n  \n  /** Execution settings */\n  timeout: number;\n  retryAttempts: number;\n  continueOnError: boolean;\n  \n  /** Validation */\n  validators: TestValidator[];\n  assertions: TestAssertion[];\n}\n\nexport interface TestValidator {\n  type: string;\n  config: Record<string, unknown>;\n  weight: number;\n  required: boolean;\n}\n\nexport interface TestAssertion {\n  field: string;\n  operator: string;\n  expected: unknown;\n  actual?: unknown;\n  passed?: boolean;\n  message?: string;\n}\n\nexport interface ExpectedResult {\n  type: 'agent_state' | 'task_result' | 'system_metric' | 'custom';\n  criteria: Record<string, unknown>;\n  tolerance: number;\n  required: boolean;\n}\n\nexport interface ResourceRequirements {\n  cpu: number;\n  memory: number;\n  disk: number;\n  network: number;\n  agents: number;\n  duration: number;\n}\n\nexport interface TestEnvironment {\n  name: string;\n  variables: Record<string, string>;\n  services: ServiceConfig[];\n  constraints: EnvironmentConstraint[];\n}\n\nexport interface ServiceConfig {\n  name: string;\n  type: string;\n  config: Record<string, unknown>;\n  healthCheck: HealthCheck;\n}\n\nexport interface HealthCheck {\n  type: 'http' | 'tcp' | 'exec' | 'custom';\n  config: Record<string, unknown>;\n  interval: number;\n  timeout: number;\n  retries: number;\n}\n\nexport interface EnvironmentConstraint {\n  type: string;\n  value: unknown;\n  description: string;\n}\n\nexport interface ValidationCriteria {\n  /** Performance criteria */\n  maxExecutionTime: number;\n  minThroughput: number;\n  maxErrorRate: number;\n  \n  /** Quality criteria */\n  minAccuracy: number;\n  minReliability: number;\n  minConsistency: number;\n  \n  /** Resource criteria */\n  maxResourceUsage: ResourceUsage;\n  \n  /** Custom criteria */\n  custom: Record<string, unknown>;\n}\n\nexport interface IntegrationTestResult {\n  /** Test identification */\n  testId: string;\n  timestamp: Date;\n  \n  /** Overall result */\n  status: VerificationStatus;\n  passed: boolean;\n  score: number;\n  \n  /** Scenario results */\n  scenarioResults: ScenarioResult[];\n  \n  /** Performance metrics */\n  duration: number;\n  resourceUsage: ResourceUsage;\n  \n  /** Quality metrics */\n  coverage: TestCoverage;\n  reliability: number;\n  \n  /** Evidence and artifacts */\n  evidence: VerificationEvidence[];\n  artifacts: Record<string, unknown>;\n  logs: TestLog[];\n  \n  /** Error information */\n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n  \n  /** Analysis and recommendations */\n  analysis: TestAnalysis;\n  recommendations: string[];\n}\n\nexport interface ScenarioResult {\n  scenarioId: string;\n  status: VerificationStatus;\n  passed: boolean;\n  score: number;\n  duration: number;\n  \n  stepResults: StepResult[];\n  validationResults: ValidationResult[];\n  \n  evidence: VerificationEvidence[];\n  artifacts: Record<string, unknown>;\n  \n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n}\n\nexport interface StepResult {\n  stepId: string;\n  status: VerificationStatus;\n  passed: boolean;\n  duration: number;\n  \n  validatorResults: ValidatorResult[];\n  assertionResults: AssertionResult[];\n  \n  output: Record<string, unknown>;\n  evidence: VerificationEvidence[];\n}\n\nexport interface AssertionResult {\n  field: string;\n  operator: string;\n  expected: unknown;\n  actual: unknown;\n  passed: boolean;\n  message: string;\n  timestamp: Date;\n}\n\nexport interface ValidationResult {\n  type: string;\n  passed: boolean;\n  score: number;\n  details: Record<string, unknown>;\n  evidence: VerificationEvidence[];\n}\n\nexport interface TestCoverage {\n  agents: number;\n  tasks: number;\n  scenarios: number;\n  steps: number;\n  assertions: number;\n  percentage: number;\n}\n\nexport interface TestLog {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  timestamp: Date;\n  source: string;\n  context: Record<string, unknown>;\n}\n\nexport interface TestAnalysis {\n  bottlenecks: PerformanceBottleneck[];\n  patterns: TestPattern[];\n  insights: TestInsight[];\n  trends: TestTrend[];\n}\n\nexport interface PerformanceBottleneck {\n  type: string;\n  location: string;\n  impact: number;\n  description: string;\n  recommendations: string[];\n}\n\nexport interface TestPattern {\n  type: string;\n  pattern: string;\n  frequency: number;\n  significance: number;\n  examples: string[];\n}\n\nexport interface TestInsight {\n  category: string;\n  insight: string;\n  confidence: number;\n  evidence: string[];\n  implications: string[];\n}\n\nexport interface TestTrend {\n  metric: string;\n  direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\n  magnitude: number;\n  significance: number;\n  period: string;\n}\n\n// ===== STATE SNAPSHOT SYSTEM =====\n\nexport interface StateSnapshotConfig {\n  /** Snapshot identification */\n  id: string;\n  name: string;\n  description: string;\n  \n  /** Snapshot scope */\n  scope: SnapshotScope;\n  \n  /** Storage settings */\n  storage: SnapshotStorageConfig;\n  \n  /** Retention settings */\n  retention: SnapshotRetentionConfig;\n  \n  /** Compression settings */\n  compression: SnapshotCompressionConfig;\n  \n  /** Encryption settings */\n  encryption?: SnapshotEncryptionConfig;\n}\n\nexport interface SnapshotScope {\n  /** Include agent states */\n  includeAgents: boolean;\n  agentFilter?: AgentFilter;\n  \n  /** Include task states */\n  includeTasks: boolean;\n  taskFilter?: TaskFilter;\n  \n  /** Include swarm states */\n  includeSwarms: boolean;\n  swarmFilter?: SwarmFilter;\n  \n  /** Include system state */\n  includeSystem: boolean;\n  systemComponents: string[];\n  \n  /** Include memory state */\n  includeMemory: boolean;\n  memoryPartitions: string[];\n  \n  /** Custom inclusions */\n  custom: Record<string, boolean>;\n}\n\nexport interface AgentFilter {\n  types: string[];\n  statuses: string[];\n  tags: string[];\n  exclude: AgentId[];\n}\n\nexport interface TaskFilter {\n  types: string[];\n  statuses: string[];\n  priorities: string[];\n  exclude: TaskId[];\n}\n\nexport interface SwarmFilter {\n  modes: string[];\n  strategies: string[];\n  statuses: string[];\n  exclude: SwarmId[];\n}\n\nexport interface SnapshotStorageConfig {\n  type: 'local' | 'remote' | 'distributed' | 'cloud';\n  location: string;\n  redundancy: number;\n  checksum: boolean;\n  versioning: boolean;\n}\n\nexport interface SnapshotRetentionConfig {\n  maxSnapshots: number;\n  maxAge: number;\n  strategy: 'fifo' | 'lru' | 'importance' | 'custom';\n  archiveOld: boolean;\n  archiveLocation?: string;\n}\n\nexport interface SnapshotCompressionConfig {\n  enabled: boolean;\n  algorithm: 'gzip' | 'brotli' | 'lz4' | 'zstd';\n  level: number;\n  threshold: number;\n}\n\nexport interface SnapshotEncryptionConfig {\n  enabled: boolean;\n  algorithm: 'aes-256-gcm' | 'chacha20-poly1305' | 'custom';\n  keyDerivation: 'pbkdf2' | 'scrypt' | 'argon2';\n  saltLength: number;\n}\n\nexport interface StateSnapshot {\n  /** Snapshot identification */\n  id: string;\n  name: string;\n  description: string;\n  \n  /** Snapshot metadata */\n  timestamp: Date;\n  version: string;\n  checksum: string;\n  \n  /** Snapshot scope */\n  scope: SnapshotScope;\n  \n  /** Snapshot data */\n  agentStates: Record<string, AgentState>;\n  taskStates: Record<string, TaskResult>;\n  swarmStates: Record<string, SwarmState>;\n  systemState: SystemState;\n  memoryState: MemoryState;\n  customState: Record<string, unknown>;\n  \n  /** Snapshot statistics */\n  statistics: SnapshotStatistics;\n  \n  /** Storage information */\n  storage: SnapshotStorageInfo;\n  \n  /** Validation information */\n  validation: SnapshotValidation;\n}\n\nexport interface SwarmState {\n  id: SwarmId;\n  status: string;\n  progress: Record<string, unknown>;\n  metrics: Record<string, unknown>;\n  configuration: Record<string, unknown>;\n  timestamp: Date;\n}\n\nexport interface SystemState {\n  timestamp: Date;\n  version: string;\n  uptime: number;\n  resources: ResourceUsage;\n  services: ServiceState[];\n  configuration: Record<string, unknown>;\n  health: HealthState;\n}\n\nexport interface ServiceState {\n  name: string;\n  status: string;\n  health: string;\n  metrics: Record<string, unknown>;\n  configuration: Record<string, unknown>;\n  timestamp: Date;\n}\n\nexport interface HealthState {\n  overall: string;\n  components: Record<string, string>;\n  checks: HealthCheckResult[];\n  timestamp: Date;\n}\n\nexport interface HealthCheckResult {\n  name: string;\n  status: string;\n  message: string;\n  duration: number;\n  timestamp: Date;\n}\n\nexport interface MemoryState {\n  timestamp: Date;\n  partitions: Record<string, MemoryPartitionState>;\n  statistics: MemoryStatistics;\n  integrity: MemoryIntegrity;\n}\n\nexport interface MemoryPartitionState {\n  id: string;\n  type: string;\n  entries: number;\n  size: number;\n  lastModified: Date;\n  checksum: string;\n}\n\nexport interface MemoryStatistics {\n  totalEntries: number;\n  totalSize: number;\n  utilizationRate: number;\n  accessPatterns: Record<string, number>;\n  performance: Record<string, number>;\n}\n\nexport interface MemoryIntegrity {\n  checksumValid: boolean;\n  corruptedEntries: string[];\n  missingReferences: string[];\n  inconsistencies: string[];\n}\n\nexport interface SnapshotStatistics {\n  totalSize: number;\n  compressedSize: number;\n  compressionRatio: number;\n  entryCount: Record<string, number>;\n  captureTime: number;\n  validationTime: number;\n}\n\nexport interface SnapshotStorageInfo {\n  type: string;\n  location: string;\n  size: number;\n  checksum: string;\n  encrypted: boolean;\n  redundancy: number;\n  accessibility: string;\n}\n\nexport interface SnapshotValidation {\n  checksumValid: boolean;\n  structureValid: boolean;\n  dataIntegrity: boolean;\n  versionCompatible: boolean;\n  errors: string[];\n  warnings: string[];\n  timestamp: Date;\n}\n\nexport interface RollbackConfig {\n  /** Rollback identification */\n  id: string;\n  snapshotId: string;\n  reason: string;\n  \n  /** Rollback scope */\n  scope: RollbackScope;\n  \n  /** Rollback strategy */\n  strategy: RollbackStrategy;\n  \n  /** Safety settings */\n  safety: RollbackSafetyConfig;\n  \n  /** Notification settings */\n  notifications: NotificationConfig[];\n}\n\nexport interface RollbackScope {\n  includeAgents: boolean;\n  includeTasks: boolean;\n  includeSwarms: boolean;\n  includeSystem: boolean;\n  includeMemory: boolean;\n  \n  /** Partial rollback filters */\n  agentFilter?: AgentFilter;\n  taskFilter?: TaskFilter;\n  swarmFilter?: SwarmFilter;\n  \n  /** Exclude from rollback */\n  preserveData: string[];\n}\n\nexport interface RollbackStrategy {\n  type: 'immediate' | 'gradual' | 'selective' | 'custom';\n  stopRunningTasks: boolean;\n  backupCurrent: boolean;\n  validateBefore: boolean;\n  validateAfter: boolean;\n  rollbackTimeout: number;\n}\n\nexport interface RollbackSafetyConfig {\n  requireConfirmation: boolean;\n  maxRollbackTime: number;\n  emergencyStop: boolean;\n  backupRequired: boolean;\n  validationRequired: boolean;\n  approvalRequired: boolean;\n}\n\nexport interface RollbackResult {\n  /** Rollback identification */\n  id: string;\n  snapshotId: string;\n  timestamp: Date;\n  \n  /** Result status */\n  status: 'completed' | 'partial' | 'failed' | 'cancelled';\n  success: boolean;\n  \n  /** Rollback details */\n  scope: RollbackScope;\n  duration: number;\n  \n  /** Component results */\n  componentResults: ComponentRollbackResult[];\n  \n  /** Validation results */\n  validation: RollbackValidation;\n  \n  /** Data preservation */\n  preservedData: string[];\n  lostData: string[];\n  \n  /** Backup information */\n  backupSnapshot?: string;\n  \n  /** Error information */\n  errors: VerificationError[];\n  warnings: VerificationWarning[];\n  \n  /** Recovery information */\n  recoveryActions: string[];\n  nextSteps: string[];\n}\n\nexport interface ComponentRollbackResult {\n  component: string;\n  status: 'completed' | 'failed' | 'skipped';\n  duration: number;\n  itemsRolledBack: number;\n  itemsFailed: number;\n  errors: string[];\n}\n\nexport interface RollbackValidation {\n  preValidation: ValidationResult;\n  postValidation: ValidationResult;\n  dataIntegrity: boolean;\n  systemHealth: boolean;\n  functionalityPreserved: boolean;\n}\n\n// ===== UTILITY TYPES =====\n\nexport type VerificationCallback = (result: VerificationResult) => void | Promise<void>;\nexport type CheckpointCallback = (result: CheckpointResult) => void | Promise<void>;\nexport type ClaimValidationCallback = (result: ClaimValidationResult) => void | Promise<void>;\nexport type TestCompletionCallback = (result: IntegrationTestResult) => void | Promise<void>;\nexport type SnapshotCallback = (snapshot: StateSnapshot) => void | Promise<void>;\nexport type RollbackCallback = (result: RollbackResult) => void | Promise<void>;\n\n// ===== TYPE GUARDS =====\n\nexport function isTruthScore(obj: unknown): obj is TruthScore {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof (obj as TruthScore).score === 'number' &&\n    typeof (obj as TruthScore).components === 'object' &&\n    (obj as TruthScore).timestamp instanceof Date\n  );\n}\n\nexport function isVerificationResult(obj: unknown): obj is VerificationResult {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof (obj as VerificationResult).id === 'string' &&\n    typeof (obj as VerificationResult).status === 'string' &&\n    typeof (obj as VerificationResult).passed === 'boolean'\n  );\n}\n\nexport function isAgentClaim(obj: unknown): obj is AgentClaim {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof (obj as AgentClaim).id === 'string' &&\n    typeof (obj as AgentClaim).type === 'string' &&\n    (obj as AgentClaim).submittedAt instanceof Date\n  );\n}\n\nexport function isStateSnapshot(obj: unknown): obj is StateSnapshot {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    typeof (obj as StateSnapshot).id === 'string' &&\n    (obj as StateSnapshot).timestamp instanceof Date &&\n    typeof (obj as StateSnapshot).checksum === 'string'\n  );\n}\n\n// ===== CONSTANTS =====\n\nexport const VERIFICATION_CONSTANTS = {\n  // Default thresholds\n  DEFAULT_TRUTH_THRESHOLD: 0.95,\n  DEFAULT_CONFIDENCE_LEVEL: 0.95,\n  DEFAULT_MIN_SAMPLE_SIZE: 30,\n  DEFAULT_MAX_ERROR_MARGIN: 0.05,\n  \n  // Timeouts\n  DEFAULT_VERIFICATION_TIMEOUT: 5 * 60 * 1000, // 5 minutes\n  DEFAULT_CHECKPOINT_TIMEOUT: 2 * 60 * 1000, // 2 minutes\n  DEFAULT_CLAIM_VALIDATION_TIMEOUT: 1 * 60 * 1000, // 1 minute\n  DEFAULT_TEST_TIMEOUT: 10 * 60 * 1000, // 10 minutes\n  DEFAULT_ROLLBACK_TIMEOUT: 3 * 60 * 1000, // 3 minutes\n  \n  // Retry limits\n  DEFAULT_RETRY_ATTEMPTS: 3,\n  MAX_RETRY_ATTEMPTS: 10,\n  \n  // Snapshot limits\n  DEFAULT_MAX_SNAPSHOTS: 100,\n  DEFAULT_SNAPSHOT_RETENTION_DAYS: 30,\n  DEFAULT_COMPRESSION_THRESHOLD: 1024 * 1024, // 1MB\n  \n  // Quality thresholds\n  MIN_TRUTH_SCORE: 0.0,\n  MAX_TRUTH_SCORE: 1.0,\n  HIGH_CONFIDENCE_THRESHOLD: 0.9,\n  MEDIUM_CONFIDENCE_THRESHOLD: 0.7,\n  LOW_CONFIDENCE_THRESHOLD: 0.5,\n  \n  // Resource limits\n  MAX_VERIFICATION_MEMORY: 512 * 1024 * 1024, // 512MB\n  MAX_SNAPSHOT_SIZE: 1024 * 1024 * 1024, // 1GB\n  MAX_TEST_DURATION: 60 * 60 * 1000, // 1 hour\n} as const;\n\nexport default {\n  VERIFICATION_CONSTANTS,\n  isTruthScore,\n  isVerificationResult,\n  isAgentClaim,\n  isStateSnapshot,\n};"],"names":["isTruthScore","obj","score","components","timestamp","Date","isVerificationResult","id","status","passed","isAgentClaim","type","submittedAt","isStateSnapshot","checksum","VERIFICATION_CONSTANTS","DEFAULT_TRUTH_THRESHOLD","DEFAULT_CONFIDENCE_LEVEL","DEFAULT_MIN_SAMPLE_SIZE","DEFAULT_MAX_ERROR_MARGIN","DEFAULT_VERIFICATION_TIMEOUT","DEFAULT_CHECKPOINT_TIMEOUT","DEFAULT_CLAIM_VALIDATION_TIMEOUT","DEFAULT_TEST_TIMEOUT","DEFAULT_ROLLBACK_TIMEOUT","DEFAULT_RETRY_ATTEMPTS","MAX_RETRY_ATTEMPTS","DEFAULT_MAX_SNAPSHOTS","DEFAULT_SNAPSHOT_RETENTION_DAYS","DEFAULT_COMPRESSION_THRESHOLD","MIN_TRUTH_SCORE","MAX_TRUTH_SCORE","HIGH_CONFIDENCE_THRESHOLD","MEDIUM_CONFIDENCE_THRESHOLD","LOW_CONFIDENCE_THRESHOLD","MAX_VERIFICATION_MEMORY","MAX_SNAPSHOT_SIZE","MAX_TEST_DURATION"],"mappings":"AAs/BA,OAAO,SAASA,aAAaC,GAAY;IACvC,OACE,OAAOA,QAAQ,YACfA,QAAQ,QACR,OAAO,AAACA,IAAmBC,KAAK,KAAK,YACrC,OAAO,AAACD,IAAmBE,UAAU,KAAK,YAC1C,AAACF,IAAmBG,SAAS,YAAYC;AAE7C;AAEA,OAAO,SAASC,qBAAqBL,GAAY;IAC/C,OACE,OAAOA,QAAQ,YACfA,QAAQ,QACR,OAAO,AAACA,IAA2BM,EAAE,KAAK,YAC1C,OAAO,AAACN,IAA2BO,MAAM,KAAK,YAC9C,OAAO,AAACP,IAA2BQ,MAAM,KAAK;AAElD;AAEA,OAAO,SAASC,aAAaT,GAAY;IACvC,OACE,OAAOA,QAAQ,YACfA,QAAQ,QACR,OAAO,AAACA,IAAmBM,EAAE,KAAK,YAClC,OAAO,AAACN,IAAmBU,IAAI,KAAK,YACpC,AAACV,IAAmBW,WAAW,YAAYP;AAE/C;AAEA,OAAO,SAASQ,gBAAgBZ,GAAY;IAC1C,OACE,OAAOA,QAAQ,YACfA,QAAQ,QACR,OAAO,AAACA,IAAsBM,EAAE,KAAK,YACrC,AAACN,IAAsBG,SAAS,YAAYC,QAC5C,OAAO,AAACJ,IAAsBa,QAAQ,KAAK;AAE/C;AAIA,OAAO,MAAMC,yBAAyB;IAEpCC,yBAAyB;IACzBC,0BAA0B;IAC1BC,yBAAyB;IACzBC,0BAA0B;IAG1BC,8BAA8B,IAAI,KAAK;IACvCC,4BAA4B,IAAI,KAAK;IACrCC,kCAAkC,IAAI,KAAK;IAC3CC,sBAAsB,KAAK,KAAK;IAChCC,0BAA0B,IAAI,KAAK;IAGnCC,wBAAwB;IACxBC,oBAAoB;IAGpBC,uBAAuB;IACvBC,iCAAiC;IACjCC,+BAA+B,OAAO;IAGtCC,iBAAiB;IACjBC,iBAAiB;IACjBC,2BAA2B;IAC3BC,6BAA6B;IAC7BC,0BAA0B;IAG1BC,yBAAyB,MAAM,OAAO;IACtCC,mBAAmB,OAAO,OAAO;IACjCC,mBAAmB,KAAK,KAAK;AAC/B,EAAW;AAEX,eAAe;IACbtB;IACAf;IACAM;IACAI;IACAG;AACF,EAAE"}