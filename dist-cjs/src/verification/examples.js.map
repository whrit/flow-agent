{"version":3,"sources":["../../../src/verification/examples.ts"],"sourcesContent":["/**\n * Security System Integration Examples\n * \n * Demonstrates how to integrate the security enforcement system\n * with existing Claude Flow components and real-world scenarios.\n */\n\nimport { EventEmitter } from 'events';\nimport { SecurityEnforcementSystem, createProductionSecuritySystem, createHighSecuritySystem } from './index';\nimport { SecurityMiddlewareManager, ThreatIntelligenceMiddleware, IPFilterMiddleware } from './middleware';\nimport { PenetrationTestingSuite, LoadTestingSuite, SecurityValidationSuite } from './tests';\nimport { VerificationRequest, VerificationResult } from './security';\n\n// ======================== BASIC INTEGRATION EXAMPLE ========================\n\nexport class BasicSecurityIntegration {\n  private security: SecurityEnforcementSystem;\n  private isInitialized = false;\n\n  constructor() {\n    // Create production-ready security system\n    this.security = createProductionSecuritySystem();\n    \n    // Set up event listeners\n    this.setupEventHandlers();\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    // Initialize with trusted participants\n    const participants = [\n      'claude-verification-node-1',\n      'claude-verification-node-2',\n      'claude-verification-node-3',\n      'claude-verification-node-4',\n      'claude-verification-node-5'\n    ];\n\n    await this.security.initialize(participants);\n\n    // Register initial agents\n    await this.registerDefaultAgents();\n\n    this.isInitialized = true;\n    console.log('Security system initialized successfully');\n  }\n\n  private async registerDefaultAgents(): Promise<void> {\n    const defaultAgents = [\n      { id: 'truth-verifier-1', capabilities: ['verify', 'audit'], level: 'HIGH' as const },\n      { id: 'truth-verifier-2', capabilities: ['verify', 'sign'], level: 'HIGH' as const },\n      { id: 'consensus-node-1', capabilities: ['verify', 'consensus'], level: 'CRITICAL' as const },\n      { id: 'monitoring-agent', capabilities: ['audit', 'monitor'], level: 'MEDIUM' as const }\n    ];\n\n    for (const agent of defaultAgents) {\n      try {\n        await this.security.registerAgent(agent.id, agent.capabilities, agent.level);\n        console.log(`Registered agent: ${agent.id}`);\n      } catch (error) {\n        console.error(`Failed to register agent ${agent.id}:`, error.message);\n      }\n    }\n  }\n\n  private setupEventHandlers(): void {\n    this.security.on('verificationCompleted', (result: VerificationResult) => {\n      console.log(`✓ Verification completed: ${result.resultId} (confidence: ${result.confidence})`);\n    });\n\n    this.security.on('verificationError', (event: { request: VerificationRequest; error: string }) => {\n      console.error(`✗ Verification failed: ${event.error}`);\n    });\n\n    this.security.on('agentRegistered', (identity) => {\n      console.log(`+ Agent registered: ${identity.agentId} (level: ${identity.securityLevel})`);\n    });\n\n    this.security.on('emergencyShutdown', (event) => {\n      console.error(`🚨 EMERGENCY SHUTDOWN: ${event.reason}`);\n    });\n  }\n\n  // Process a truth claim with full security\n  async verifyTruthClaim(claim: any, agentId: string): Promise<VerificationResult> {\n    const request: VerificationRequest = {\n      requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      agentId,\n      truthClaim: claim,\n      timestamp: new Date(),\n      nonce: require('crypto').randomBytes(32).toString('hex'),\n      signature: 'placeholder-signature' // In real implementation, this would be properly signed\n    };\n\n    return await this.security.processVerificationRequest(request);\n  }\n\n  // Get system status\n  getSecurityStatus() {\n    return this.security.getSecurityStatus();\n  }\n\n  // Emergency shutdown\n  async shutdown(reason: string): Promise<void> {\n    await this.security.emergencyShutdown(reason);\n    this.isInitialized = false;\n  }\n}\n\n// ======================== ADVANCED INTEGRATION WITH MIDDLEWARE ========================\n\nexport class AdvancedSecurityIntegration {\n  private security: SecurityEnforcementSystem;\n  private middlewareManager: SecurityMiddlewareManager;\n  private threatIntelligence: ThreatIntelligenceMiddleware;\n\n  constructor() {\n    this.security = createHighSecuritySystem();\n    this.middlewareManager = new SecurityMiddlewareManager();\n    this.threatIntelligence = new ThreatIntelligenceMiddleware();\n    \n    this.setupAdvancedSecurity();\n  }\n\n  private setupAdvancedSecurity(): void {\n    // Register security middleware\n    this.middlewareManager.registerMiddleware(this.threatIntelligence);\n    this.middlewareManager.registerMiddleware(new IPFilterMiddleware(\n      ['127.0.0.1', '10.0.0.0/8'], // Whitelist\n      ['192.168.1.100'] // Blacklist\n    ));\n\n    // Integrate middleware with security system\n    this.integrateMiddleware();\n  }\n\n  private integrateMiddleware(): void {\n    // Override the security system's verification process to include middleware\n    const originalProcess = this.security.processVerificationRequest.bind(this.security);\n    \n    this.security.processVerificationRequest = async (request: VerificationRequest): Promise<VerificationResult> => {\n      // Execute before-verification middleware\n      await this.middlewareManager.executeBeforeVerification(request);\n      \n      try {\n        // Process with original security system\n        const result = await originalProcess(request);\n        \n        // Execute after-verification middleware\n        await this.middlewareManager.executeAfterVerification(result);\n        \n        return result;\n      } catch (error) {\n        // Execute error handling middleware\n        await this.middlewareManager.executeErrorHandling(error);\n        throw error;\n      }\n    };\n  }\n\n  async initialize(): Promise<void> {\n    await this.security.initialize([\n      'secure-node-1', 'secure-node-2', 'secure-node-3',\n      'secure-node-4', 'secure-node-5', 'secure-node-6',\n      'secure-node-7', 'secure-node-8', 'secure-node-9'\n    ]);\n\n    // Register high-security agents\n    await this.security.registerAgent('high-security-verifier', ['verify', 'audit', 'sign'], 'CRITICAL');\n    \n    console.log('Advanced security system initialized');\n  }\n\n  // Add threat indicator dynamically\n  addThreatIndicator(indicator: string): void {\n    this.threatIntelligence.addThreatIndicator(indicator);\n  }\n\n  // Process high-security verification\n  async processHighSecurityVerification(claim: any, agentId: string): Promise<VerificationResult> {\n    const request: VerificationRequest = {\n      requestId: `hs_req_${Date.now()}`,\n      agentId,\n      truthClaim: claim,\n      timestamp: new Date(),\n      nonce: require('crypto').randomBytes(64).toString('hex'), // Larger nonce for high security\n      signature: 'high-security-signature'\n    };\n\n    return await this.security.processVerificationRequest(request);\n  }\n}\n\n// ======================== CLAUDE FLOW AGENT INTEGRATION ========================\n\nexport class ClaudeFlowAgentSecurityWrapper {\n  private security: SecurityEnforcementSystem;\n  private registeredAgents = new Set<string>();\n\n  constructor(security: SecurityEnforcementSystem) {\n    this.security = security;\n  }\n\n  // Secure agent registration for Claude Flow\n  async registerClaudeFlowAgent(agentConfig: {\n    agentId: string;\n    type: string;\n    capabilities: string[];\n    securityLevel?: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  }): Promise<void> {\n    const securityLevel = agentConfig.securityLevel || 'MEDIUM';\n    const capabilities = [...agentConfig.capabilities, 'verify'];\n\n    await this.security.registerAgent(agentConfig.agentId, capabilities, securityLevel);\n    this.registeredAgents.add(agentConfig.agentId);\n    \n    console.log(`Claude Flow agent secured: ${agentConfig.agentId} (${agentConfig.type})`);\n  }\n\n  // Secure task execution wrapper\n  async executeSecureTask(\n    agentId: string,\n    task: string,\n    truthClaim: any\n  ): Promise<{\n    taskResult: any;\n    verificationResult: VerificationResult;\n    securityStatus: 'SECURE' | 'SUSPICIOUS' | 'BLOCKED';\n  }> {\n    if (!this.registeredAgents.has(agentId)) {\n      throw new Error(`Agent ${agentId} not registered for secure operations`);\n    }\n\n    try {\n      // Process verification first\n      const verificationResult = await this.security.processVerificationRequest({\n        requestId: `task_${Date.now()}`,\n        agentId,\n        truthClaim,\n        timestamp: new Date(),\n        nonce: require('crypto').randomBytes(32).toString('hex'),\n        signature: 'task-signature'\n      });\n\n      // Execute task (placeholder)\n      const taskResult = await this.simulateTaskExecution(task);\n\n      return {\n        taskResult,\n        verificationResult,\n        securityStatus: 'SECURE'\n      };\n    } catch (error) {\n      if (error.message.includes('Byzantine') || error.message.includes('rate limit')) {\n        return {\n          taskResult: null,\n          verificationResult: null as any,\n          securityStatus: 'BLOCKED'\n        };\n      }\n      \n      return {\n        taskResult: null,\n        verificationResult: null as any,\n        securityStatus: 'SUSPICIOUS'\n      };\n    }\n  }\n\n  private async simulateTaskExecution(task: string): Promise<any> {\n    // Simulate task execution\n    await new Promise(resolve => setTimeout(resolve, 100));\n    return { task, completed: true, timestamp: new Date() };\n  }\n\n  // Get security metrics for agents\n  getAgentSecurityMetrics(): Map<string, any> {\n    const status = this.security.getSecurityStatus();\n    const agentMetrics = new Map();\n\n    for (const agentId of this.registeredAgents) {\n      agentMetrics.set(agentId, {\n        reputation: status.metrics.reputationScores.get(agentId) || 100,\n        registered: true,\n        securityLevel: 'ACTIVE'\n      });\n    }\n\n    return agentMetrics;\n  }\n}\n\n// ======================== COMPREHENSIVE SECURITY TESTING EXAMPLE ========================\n\nexport class SecurityTestingExample {\n  private security: SecurityEnforcementSystem;\n  private penetrationTester: PenetrationTestingSuite;\n  private loadTester: LoadTestingSuite;\n  private validator: SecurityValidationSuite;\n\n  constructor() {\n    this.security = createProductionSecuritySystem();\n    this.penetrationTester = new PenetrationTestingSuite(this.security);\n    this.loadTester = new LoadTestingSuite(this.security);\n    this.validator = new SecurityValidationSuite(this.security);\n  }\n\n  async runComprehensiveSecurityTest(): Promise<{\n    penetrationTestResults: any;\n    loadTestResults: any;\n    validationResults: any;\n    overallAssessment: {\n      securityScore: number;\n      riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n      recommendations: string[];\n    };\n  }> {\n    console.log('🔒 Starting comprehensive security testing...');\n\n    // Initialize security system\n    await this.security.initialize(['test-node-1', 'test-node-2', 'test-node-3', 'test-node-4', 'test-node-5']);\n\n    // Run penetration tests\n    console.log('🔍 Running penetration tests...');\n    const penetrationTestResults = await this.penetrationTester.runFullPenetrationTest();\n\n    // Run load tests\n    console.log('⚡ Running load tests...');\n    const loadTestResults = await this.loadTester.runConcurrentLoadTest(10, 50, 30);\n\n    // Run validation tests\n    console.log('✅ Running validation tests...');\n    const validationResults = await this.validator.validateSecuritySystem();\n\n    // Generate overall assessment\n    const overallAssessment = this.generateOverallAssessment(\n      penetrationTestResults,\n      loadTestResults,\n      validationResults\n    );\n\n    console.log('🏁 Security testing completed');\n\n    return {\n      penetrationTestResults,\n      loadTestResults,\n      validationResults,\n      overallAssessment\n    };\n  }\n\n  private generateOverallAssessment(\n    pentestResults: any,\n    loadResults: any,\n    validationResults: any\n  ): {\n    securityScore: number;\n    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n    recommendations: string[];\n  } {\n    // Calculate weighted security score\n    const pentestScore = pentestResults.securityScore * 0.4;\n    const loadScore = (loadResults.successfulRequests / loadResults.totalRequests) * 100 * 0.3;\n    const validationScore = validationResults.overallHealth ? 100 : 50;\n    const validationWeight = 0.3;\n\n    const securityScore = Math.round(pentestScore + loadScore + (validationScore * validationWeight));\n\n    // Determine risk level\n    let riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n    if (securityScore >= 90) riskLevel = 'LOW';\n    else if (securityScore >= 75) riskLevel = 'MEDIUM';\n    else if (securityScore >= 60) riskLevel = 'HIGH';\n    else riskLevel = 'CRITICAL';\n\n    // Generate recommendations\n    const recommendations: string[] = [\n      ...pentestResults.recommendations,\n      ...validationResults.recommendations\n    ];\n\n    if (loadResults.failedRequests > loadResults.totalRequests * 0.1) {\n      recommendations.push('Improve system resilience under load');\n    }\n\n    return { securityScore, riskLevel, recommendations };\n  }\n}\n\n// ======================== REAL-WORLD DEPLOYMENT EXAMPLE ========================\n\nexport class ProductionDeploymentExample {\n  private security: SecurityEnforcementSystem;\n  private monitoring: EventEmitter;\n  private alerting: EventEmitter;\n\n  constructor() {\n    this.security = createProductionSecuritySystem();\n    this.monitoring = new EventEmitter();\n    this.alerting = new EventEmitter();\n    \n    this.setupProductionMonitoring();\n  }\n\n  private setupProductionMonitoring(): void {\n    // Security event monitoring\n    this.security.on('verificationError', (event) => {\n      this.monitoring.emit('securityIncident', {\n        type: 'VERIFICATION_FAILURE',\n        severity: 'HIGH',\n        details: event,\n        timestamp: new Date()\n      });\n    });\n\n    this.security.on('emergencyShutdown', (event) => {\n      this.alerting.emit('criticalAlert', {\n        type: 'EMERGENCY_SHUTDOWN',\n        message: event.reason,\n        timestamp: new Date()\n      });\n    });\n\n    // Regular health checks\n    setInterval(() => {\n      this.performHealthCheck();\n    }, 60000); // Every minute\n  }\n\n  async deployToProduction(): Promise<void> {\n    console.log('🚀 Deploying security system to production...');\n\n    // Initialize with production nodes\n    const productionNodes = [\n      'prod-security-node-us-east-1',\n      'prod-security-node-us-west-2',\n      'prod-security-node-eu-west-1',\n      'prod-security-node-ap-southeast-1',\n      'prod-security-node-ap-northeast-1'\n    ];\n\n    await this.security.initialize(productionNodes);\n\n    // Register production agents\n    await this.registerProductionAgents();\n\n    // Start monitoring\n    this.startMonitoring();\n\n    console.log('✅ Security system deployed to production');\n  }\n\n  private async registerProductionAgents(): Promise<void> {\n    const productionAgents = [\n      { id: 'primary-verifier', capabilities: ['verify', 'audit', 'sign'], level: 'CRITICAL' as const },\n      { id: 'backup-verifier', capabilities: ['verify', 'audit'], level: 'HIGH' as const },\n      { id: 'consensus-coordinator', capabilities: ['consensus', 'audit'], level: 'CRITICAL' as const },\n      { id: 'security-monitor', capabilities: ['audit', 'monitor'], level: 'HIGH' as const }\n    ];\n\n    for (const agent of productionAgents) {\n      await this.security.registerAgent(agent.id, agent.capabilities, agent.level);\n    }\n  }\n\n  private startMonitoring(): void {\n    console.log('📊 Starting production monitoring...');\n    \n    // Monitor for security incidents\n    this.monitoring.on('securityIncident', (incident) => {\n      console.warn(`⚠️  Security incident: ${incident.type} - ${incident.details.error}`);\n      \n      // Could integrate with external monitoring systems here\n      // e.g., DataDog, New Relic, Prometheus, etc.\n    });\n\n    // Handle critical alerts\n    this.alerting.on('criticalAlert', (alert) => {\n      console.error(`🚨 CRITICAL ALERT: ${alert.type} - ${alert.message}`);\n      \n      // Could integrate with PagerDuty, Slack, etc.\n    });\n  }\n\n  private performHealthCheck(): void {\n    const status = this.security.getSecurityStatus();\n    \n    if (!status.systemHealth.consensusCapable) {\n      this.alerting.emit('criticalAlert', {\n        type: 'CONSENSUS_FAILURE',\n        message: 'System cannot achieve consensus',\n        timestamp: new Date()\n      });\n    }\n\n    if (status.systemHealth.byzantineNodes > 0) {\n      this.monitoring.emit('securityIncident', {\n        type: 'BYZANTINE_NODES_DETECTED',\n        severity: 'HIGH',\n        details: { count: status.systemHealth.byzantineNodes },\n        timestamp: new Date()\n      });\n    }\n  }\n\n  // Graceful shutdown for maintenance\n  async gracefulShutdown(): Promise<void> {\n    console.log('🔄 Initiating graceful shutdown...');\n    \n    // Export final security report\n    const report = this.security.exportSecurityReport();\n    console.log('💾 Security report exported');\n    \n    // Shutdown security system\n    await this.security.emergencyShutdown('Scheduled maintenance');\n    \n    console.log('✅ Graceful shutdown completed');\n  }\n}\n\n// Export all examples\nexport {\n  BasicSecurityIntegration,\n  AdvancedSecurityIntegration,\n  ClaudeFlowAgentSecurityWrapper,\n  SecurityTestingExample,\n  ProductionDeploymentExample\n};\n\n// Usage examples as comments:\n/*\n// Basic usage:\nconst basicSecurity = new BasicSecurityIntegration();\nawait basicSecurity.initialize();\nconst result = await basicSecurity.verifyTruthClaim({ statement: \"Test claim\" }, \"agent-1\");\n\n// Advanced usage with middleware:\nconst advancedSecurity = new AdvancedSecurityIntegration();\nawait advancedSecurity.initialize();\nadvancedSecurity.addThreatIndicator(\"malicious-pattern-x\");\n\n// Claude Flow integration:\nconst wrapper = new ClaudeFlowAgentSecurityWrapper(securitySystem);\nawait wrapper.registerClaudeFlowAgent({\n  agentId: \"claude-coder-1\",\n  type: \"coder\",\n  capabilities: [\"code\", \"review\", \"test\"]\n});\n\n// Comprehensive testing:\nconst tester = new SecurityTestingExample();\nconst results = await tester.runComprehensiveSecurityTest();\nconsole.log(\"Security score:\", results.overallAssessment.securityScore);\n\n// Production deployment:\nconst production = new ProductionDeploymentExample();\nawait production.deployToProduction();\n*/"],"names":["EventEmitter","createProductionSecuritySystem","createHighSecuritySystem","SecurityMiddlewareManager","ThreatIntelligenceMiddleware","IPFilterMiddleware","PenetrationTestingSuite","LoadTestingSuite","SecurityValidationSuite","BasicSecurityIntegration","security","isInitialized","setupEventHandlers","initialize","participants","registerDefaultAgents","console","log","defaultAgents","id","capabilities","level","agent","registerAgent","error","message","on","result","resultId","confidence","event","identity","agentId","securityLevel","reason","verifyTruthClaim","claim","request","requestId","Date","now","Math","random","toString","substr","truthClaim","timestamp","nonce","require","randomBytes","signature","processVerificationRequest","getSecurityStatus","shutdown","emergencyShutdown","AdvancedSecurityIntegration","middlewareManager","threatIntelligence","setupAdvancedSecurity","registerMiddleware","integrateMiddleware","originalProcess","bind","executeBeforeVerification","executeAfterVerification","executeErrorHandling","addThreatIndicator","indicator","processHighSecurityVerification","ClaudeFlowAgentSecurityWrapper","registeredAgents","Set","registerClaudeFlowAgent","agentConfig","add","type","executeSecureTask","task","has","Error","verificationResult","taskResult","simulateTaskExecution","securityStatus","includes","Promise","resolve","setTimeout","completed","getAgentSecurityMetrics","status","agentMetrics","Map","set","reputation","metrics","reputationScores","get","registered","SecurityTestingExample","penetrationTester","loadTester","validator","runComprehensiveSecurityTest","penetrationTestResults","runFullPenetrationTest","loadTestResults","runConcurrentLoadTest","validationResults","validateSecuritySystem","overallAssessment","generateOverallAssessment","pentestResults","loadResults","pentestScore","securityScore","loadScore","successfulRequests","totalRequests","validationScore","overallHealth","validationWeight","round","riskLevel","recommendations","failedRequests","push","ProductionDeploymentExample","monitoring","alerting","setupProductionMonitoring","emit","severity","details","setInterval","performHealthCheck","deployToProduction","productionNodes","registerProductionAgents","startMonitoring","productionAgents","incident","warn","alert","systemHealth","consensusCapable","byzantineNodes","count","gracefulShutdown","report","exportSecurityReport"],"mappings":"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"}