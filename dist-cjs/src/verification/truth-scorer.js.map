{"version":3,"sources":["../../../src/verification/truth-scorer.ts"],"sourcesContent":["/**\n * TruthScorer - Advanced truth scoring system with configurable thresholds\n * Provides statistical validation and confidence analysis for agent claims and system states\n */\n\nimport type { ILogger } from '../core/logger.js';\nimport { logger } from '../core/logger.js';\nimport { AppError } from '../utils/error-handler.js';\nimport type {\n  TruthScore,\n  TruthScoreConfig,\n  TruthScoringWeights,\n  TruthValidationChecks,\n  ConfidenceConfig,\n  TruthScoreComponents,\n  ConfidenceInterval,\n  TruthEvidence,\n  AgentClaim,\n  VerificationError,\n} from './types.js';\nimport { VERIFICATION_CONSTANTS } from './types.js';\nimport type { AgentId, AgentState } from '../swarm/types.js';\n\nexport interface TruthScorerOptions {\n  config?: Partial<TruthScoreConfig>;\n  logger?: ILogger;\n}\n\nexport class TruthScorer {\n  private readonly config: TruthScoreConfig;\n  private readonly logger: ILogger;\n  private readonly agentHistory: Map<string, AgentPerformanceHistory> = new Map();\n  private readonly validationCache: Map<string, CachedValidation> = new Map();\n\n  constructor(options: TruthScorerOptions = {}) {\n    this.logger = options.logger || logger.child({ component: 'TruthScorer' });\n    this.config = this.mergeConfig(options.config);\n    \n    this.logger.info('TruthScorer initialized', {\n      threshold: this.config.threshold,\n      checks: this.config.checks,\n      weights: this.config.weights,\n    });\n  }\n\n  /**\n   * Calculate truth score for an agent claim\n   */\n  async scoreClaim(claim: AgentClaim, context?: ScoringContext): Promise<TruthScore> {\n    const startTime = Date.now();\n    this.logger.debug('Starting truth score calculation', {\n      claimId: claim.id,\n      claimType: claim.type,\n      agentId: claim.agentId,\n    });\n\n    try {\n      // Initialize score components\n      const components: Partial<TruthScoreComponents> = {};\n      const evidence: TruthEvidence[] = [];\n      const errors: VerificationError[] = [];\n\n      // Calculate individual components\n      if (this.config.checks.historicalValidation) {\n        components.agentReliability = await this.calculateAgentReliability(claim, evidence, errors);\n      }\n\n      if (this.config.checks.crossAgentValidation && context?.peers) {\n        components.crossValidation = await this.calculateCrossValidation(claim, context.peers, evidence, errors);\n      }\n\n      if (this.config.checks.externalValidation && context?.externalSources) {\n        components.externalVerification = await this.calculateExternalVerification(claim, context.externalSources, evidence, errors);\n      }\n\n      if (this.config.checks.logicalValidation) {\n        components.logicalCoherence = await this.calculateLogicalCoherence(claim, evidence, errors);\n      }\n\n      if (this.config.checks.statisticalValidation) {\n        components.factualConsistency = await this.calculateFactualConsistency(claim, evidence, errors);\n      }\n\n      // Calculate overall score using weighted average\n      const overall = this.calculateWeightedScore(components as TruthScoreComponents);\n      const fullComponents: TruthScoreComponents = {\n        agentReliability: components.agentReliability || 0,\n        crossValidation: components.crossValidation || 0,\n        externalVerification: components.externalVerification || 0,\n        logicalCoherence: components.logicalCoherence || 0,\n        factualConsistency: components.factualConsistency || 0,\n        overall,\n      };\n\n      // Calculate confidence interval\n      const confidence = this.calculateConfidenceInterval(fullComponents, evidence.length);\n\n      const score: TruthScore = {\n        score: overall,\n        components: fullComponents,\n        confidence,\n        evidence,\n        timestamp: new Date(),\n        metadata: {\n          claimId: claim.id,\n          agentId: claim.agentId,\n          calculationTime: Date.now() - startTime,\n          evidenceCount: evidence.length,\n          errorCount: errors.length,\n          config: this.config,\n        },\n      };\n\n      this.logger.info('Truth score calculated', {\n        claimId: claim.id,\n        score: overall,\n        components: fullComponents,\n        confidence: confidence.level,\n        duration: Date.now() - startTime,\n      });\n\n      return score;\n    } catch (error) {\n      this.logger.error('Failed to calculate truth score', error);\n      throw new AppError(\n        `Truth score calculation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'TRUTH_SCORE_CALCULATION_FAILED',\n        500\n      );\n    }\n  }\n\n  /**\n   * Validate if a truth score meets the configured threshold\n   */\n  validateScore(score: TruthScore): boolean {\n    const passes = score.score >= this.config.threshold;\n    this.logger.debug('Truth score validation', {\n      score: score.score,\n      threshold: this.config.threshold,\n      passes,\n    });\n    return passes;\n  }\n\n  /**\n   * Update agent performance history\n   */\n  updateAgentHistory(agentId: AgentId, performance: AgentPerformanceRecord): void {\n    const agentKey = typeof agentId === 'string' ? agentId : agentId.id;\n    \n    if (!this.agentHistory.has(agentKey)) {\n      this.agentHistory.set(agentKey, {\n        agentId: agentKey,\n        records: [],\n        statistics: {\n          averageScore: 0,\n          successRate: 0,\n          totalClaims: 0,\n          recentTrend: 'stable',\n        },\n      });\n    }\n\n    const history = this.agentHistory.get(agentKey)!;\n    history.records.push(performance);\n\n    // Keep only recent records (last 100)\n    if (history.records.length > 100) {\n      history.records = history.records.slice(-100);\n    }\n\n    // Update statistics\n    this.updateAgentStatistics(history);\n\n    this.logger.debug('Agent history updated', {\n      agentId: agentKey,\n      recordCount: history.records.length,\n      averageScore: history.statistics.averageScore,\n    });\n  }\n\n  /**\n   * Get agent reliability score\n   */\n  getAgentReliability(agentId: AgentId): number {\n    const agentKey = typeof agentId === 'string' ? agentId : agentId.id;\n    const history = this.agentHistory.get(agentKey);\n    \n    if (!history || history.records.length === 0) {\n      return 0.5; // Default neutral score for unknown agents\n    }\n\n    return history.statistics.averageScore;\n  }\n\n  /**\n   * Clear validation cache\n   */\n  clearCache(): void {\n    this.validationCache.clear();\n    this.logger.debug('Validation cache cleared');\n  }\n\n  private mergeConfig(partialConfig?: Partial<TruthScoreConfig>): TruthScoreConfig {\n    const defaultWeights: TruthScoringWeights = {\n      agentReliability: 0.3,\n      crossValidation: 0.25,\n      externalVerification: 0.2,\n      factualConsistency: 0.15,\n      logicalCoherence: 0.1,\n    };\n\n    const defaultChecks: TruthValidationChecks = {\n      historicalValidation: true,\n      crossAgentValidation: true,\n      externalValidation: false,\n      logicalValidation: true,\n      statisticalValidation: true,\n    };\n\n    const defaultConfidence: ConfidenceConfig = {\n      level: VERIFICATION_CONSTANTS.DEFAULT_CONFIDENCE_LEVEL,\n      minSampleSize: VERIFICATION_CONSTANTS.DEFAULT_MIN_SAMPLE_SIZE,\n      maxErrorMargin: VERIFICATION_CONSTANTS.DEFAULT_MAX_ERROR_MARGIN,\n    };\n\n    return {\n      threshold: partialConfig?.threshold || VERIFICATION_CONSTANTS.DEFAULT_TRUTH_THRESHOLD,\n      weights: { ...defaultWeights, ...partialConfig?.weights },\n      checks: { ...defaultChecks, ...partialConfig?.checks },\n      confidence: { ...defaultConfidence, ...partialConfig?.confidence },\n    };\n  }\n\n  private async calculateAgentReliability(\n    claim: AgentClaim,\n    evidence: TruthEvidence[],\n    errors: VerificationError[]\n  ): Promise<number> {\n    try {\n      const agentKey = typeof claim.agentId === 'string' ? claim.agentId : claim.agentId.id;\n      const history = this.agentHistory.get(agentKey);\n\n      if (!history || history.records.length < 3) {\n        // Insufficient data - use neutral score\n        evidence.push({\n          type: 'agent_history',\n          source: 'internal_history',\n          weight: this.config.weights.agentReliability,\n          score: 0.5,\n          details: { reason: 'insufficient_data', recordCount: history?.records.length || 0 },\n          timestamp: new Date(),\n        });\n        return 0.5;\n      }\n\n      // Calculate reliability based on recent performance\n      const recentRecords = history.records.slice(-10); // Last 10 records\n      const avgScore = recentRecords.reduce((sum, record) => sum + record.score, 0) / recentRecords.length;\n      const consistency = 1 - this.calculateVariance(recentRecords.map(r => r.score));\n      const trendFactor = this.calculateTrendFactor(recentRecords);\n\n      const reliability = (avgScore * 0.6) + (consistency * 0.3) + (trendFactor * 0.1);\n\n      evidence.push({\n        type: 'agent_history',\n        source: 'internal_history',\n        weight: this.config.weights.agentReliability,\n        score: reliability,\n        details: {\n          averageScore: avgScore,\n          consistency,\n          trendFactor,\n          recordCount: recentRecords.length,\n        },\n        timestamp: new Date(),\n      });\n\n      return Math.max(0, Math.min(1, reliability));\n    } catch (error) {\n      errors.push({\n        code: 'AGENT_RELIABILITY_CALCULATION_FAILED',\n        message: `Failed to calculate agent reliability: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        severity: 'medium',\n        context: { claimId: claim.id, agentId: claim.agentId },\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      return 0.5; // Default score on error\n    }\n  }\n\n  private async calculateCrossValidation(\n    claim: AgentClaim,\n    peers: AgentState[],\n    evidence: TruthEvidence[],\n    errors: VerificationError[]\n  ): Promise<number> {\n    try {\n      if (peers.length === 0) {\n        evidence.push({\n          type: 'cross_validation',\n          source: 'peer_agents',\n          weight: this.config.weights.crossValidation,\n          score: 0.5,\n          details: { reason: 'no_peers_available' },\n          timestamp: new Date(),\n        });\n        return 0.5;\n      }\n\n      // Simulate cross-validation with peer agents\n      // In a real implementation, this would involve querying other agents\n      const validationScores: number[] = [];\n      const reliablePeers = peers.filter(peer => this.getAgentReliability(peer.id) > 0.7);\n\n      for (const peer of reliablePeers.slice(0, 5)) { // Limit to 5 peers\n        const peerReliability = this.getAgentReliability(peer.id);\n        const validationScore = this.simulatePeerValidation(claim, peer);\n        validationScores.push(validationScore * peerReliability);\n      }\n\n      if (validationScores.length === 0) {\n        evidence.push({\n          type: 'cross_validation',\n          source: 'peer_agents',\n          weight: this.config.weights.crossValidation,\n          score: 0.5,\n          details: { reason: 'no_reliable_peers' },\n          timestamp: new Date(),\n        });\n        return 0.5;\n      }\n\n      const avgValidation = validationScores.reduce((sum, score) => sum + score, 0) / validationScores.length;\n      const consensus = 1 - this.calculateVariance(validationScores);\n      const crossValidationScore = (avgValidation * 0.8) + (consensus * 0.2);\n\n      evidence.push({\n        type: 'cross_validation',\n        source: 'peer_agents',\n        weight: this.config.weights.crossValidation,\n        score: crossValidationScore,\n        details: {\n          peerCount: validationScores.length,\n          averageValidation: avgValidation,\n          consensus,\n          validationScores,\n        },\n        timestamp: new Date(),\n      });\n\n      return Math.max(0, Math.min(1, crossValidationScore));\n    } catch (error) {\n      errors.push({\n        code: 'CROSS_VALIDATION_FAILED',\n        message: `Cross validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        severity: 'medium',\n        context: { claimId: claim.id, peerCount: peers.length },\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      return 0.5;\n    }\n  }\n\n  private async calculateExternalVerification(\n    claim: AgentClaim,\n    externalSources: ExternalSource[],\n    evidence: TruthEvidence[],\n    errors: VerificationError[]\n  ): Promise<number> {\n    try {\n      if (externalSources.length === 0) {\n        evidence.push({\n          type: 'external_source',\n          source: 'external_verification',\n          weight: this.config.weights.externalVerification,\n          score: 0.5,\n          details: { reason: 'no_external_sources' },\n          timestamp: new Date(),\n        });\n        return 0.5;\n      }\n\n      // Simulate external verification\n      // In a real implementation, this would query external APIs, databases, etc.\n      const verificationResults: number[] = [];\n\n      for (const source of externalSources.slice(0, 3)) { // Limit to 3 sources\n        const verificationScore = await this.simulateExternalVerification(claim, source);\n        verificationResults.push(verificationScore * source.reliability);\n      }\n\n      const avgVerification = verificationResults.reduce((sum, score) => sum + score, 0) / verificationResults.length;\n      const sourceAgreement = 1 - this.calculateVariance(verificationResults);\n      const externalScore = (avgVerification * 0.7) + (sourceAgreement * 0.3);\n\n      evidence.push({\n        type: 'external_source',\n        source: 'external_verification',\n        weight: this.config.weights.externalVerification,\n        score: externalScore,\n        details: {\n          sourceCount: verificationResults.length,\n          averageVerification: avgVerification,\n          sourceAgreement,\n          verificationResults,\n        },\n        timestamp: new Date(),\n      });\n\n      return Math.max(0, Math.min(1, externalScore));\n    } catch (error) {\n      errors.push({\n        code: 'EXTERNAL_VERIFICATION_FAILED',\n        message: `External verification failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        severity: 'medium',\n        context: { claimId: claim.id, sourceCount: externalSources.length },\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      return 0.5;\n    }\n  }\n\n  private async calculateLogicalCoherence(\n    claim: AgentClaim,\n    evidence: TruthEvidence[],\n    errors: VerificationError[]\n  ): Promise<number> {\n    try {\n      // Analyze logical consistency of the claim\n      const coherenceChecks = {\n        structuralIntegrity: this.checkStructuralIntegrity(claim),\n        causalConsistency: this.checkCausalConsistency(claim),\n        temporalCoherence: this.checkTemporalCoherence(claim),\n        metricConsistency: this.checkMetricConsistency(claim),\n      };\n\n      const coherenceScore = Object.values(coherenceChecks).reduce((sum, score) => sum + score, 0) / 4;\n\n      evidence.push({\n        type: 'logical_proof',\n        source: 'logical_analyzer',\n        weight: this.config.weights.logicalCoherence,\n        score: coherenceScore,\n        details: coherenceChecks,\n        timestamp: new Date(),\n      });\n\n      return Math.max(0, Math.min(1, coherenceScore));\n    } catch (error) {\n      errors.push({\n        code: 'LOGICAL_COHERENCE_FAILED',\n        message: `Logical coherence analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        severity: 'medium',\n        context: { claimId: claim.id },\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      return 0.5;\n    }\n  }\n\n  private async calculateFactualConsistency(\n    claim: AgentClaim,\n    evidence: TruthEvidence[],\n    errors: VerificationError[]\n  ): Promise<number> {\n    try {\n      // Perform statistical validation of claim metrics\n      const statisticalTests = {\n        distributionTest: this.performDistributionTest(claim),\n        outlierDetection: this.performOutlierDetection(claim),\n        trendAnalysis: this.performTrendAnalysis(claim),\n        correlationAnalysis: this.performCorrelationAnalysis(claim),\n      };\n\n      const consistencyScore = Object.values(statisticalTests).reduce((sum, score) => sum + score, 0) / 4;\n\n      evidence.push({\n        type: 'statistical_test',\n        source: 'statistical_analyzer',\n        weight: this.config.weights.factualConsistency,\n        score: consistencyScore,\n        details: statisticalTests,\n        timestamp: new Date(),\n      });\n\n      return Math.max(0, Math.min(1, consistencyScore));\n    } catch (error) {\n      errors.push({\n        code: 'FACTUAL_CONSISTENCY_FAILED',\n        message: `Factual consistency analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        severity: 'medium',\n        context: { claimId: claim.id },\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      return 0.5;\n    }\n  }\n\n  private calculateWeightedScore(components: TruthScoreComponents): number {\n    const weights = this.config.weights;\n    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);\n    \n    const weightedSum = \n      (components.agentReliability * weights.agentReliability) +\n      (components.crossValidation * weights.crossValidation) +\n      (components.externalVerification * weights.externalVerification) +\n      (components.factualConsistency * weights.factualConsistency) +\n      (components.logicalCoherence * weights.logicalCoherence);\n\n    return weightedSum / totalWeight;\n  }\n\n  private calculateConfidenceInterval(components: TruthScoreComponents, evidenceCount: number): ConfidenceInterval {\n    const score = components.overall;\n    const sampleSize = Math.max(evidenceCount, 1);\n    const confidenceLevel = this.config.confidence.level;\n    \n    // Calculate standard error (simplified)\n    const variance = this.calculateComponentVariance(components);\n    const standardError = Math.sqrt(variance / sampleSize);\n    \n    // Z-score for confidence level (approximation)\n    const zScore = this.getZScore(confidenceLevel);\n    const margin = zScore * standardError;\n    \n    return {\n      lower: Math.max(0, score - margin),\n      upper: Math.min(1, score + margin),\n      level: confidenceLevel,\n    };\n  }\n\n  private calculateComponentVariance(components: TruthScoreComponents): number {\n    const scores = [\n      components.agentReliability,\n      components.crossValidation,\n      components.externalVerification,\n      components.factualConsistency,\n      components.logicalCoherence,\n    ];\n    \n    return this.calculateVariance(scores);\n  }\n\n  private calculateVariance(values: number[]): number {\n    if (values.length === 0) return 0;\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / values.length;\n  }\n\n  private calculateTrendFactor(records: AgentPerformanceRecord[]): number {\n    if (records.length < 2) return 0.5;\n    \n    // Simple linear trend calculation\n    const scores = records.map(r => r.score);\n    const n = scores.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    \n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = scores.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * scores[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    \n    // Convert slope to factor (positive trend increases score)\n    return 0.5 + Math.max(-0.5, Math.min(0.5, slope));\n  }\n\n  private getZScore(confidenceLevel: number): number {\n    // Simplified Z-score lookup\n    if (confidenceLevel >= 0.99) return 2.576;\n    if (confidenceLevel >= 0.95) return 1.96;\n    if (confidenceLevel >= 0.90) return 1.645;\n    if (confidenceLevel >= 0.80) return 1.282;\n    return 1.0;\n  }\n\n  private updateAgentStatistics(history: AgentPerformanceHistory): void {\n    const records = history.records;\n    if (records.length === 0) return;\n\n    const scores = records.map(r => r.score);\n    const successCount = records.filter(r => r.success).length;\n\n    history.statistics.averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    history.statistics.successRate = successCount / records.length;\n    history.statistics.totalClaims = records.length;\n\n    // Calculate trend\n    if (records.length >= 5) {\n      const recentScores = scores.slice(-5);\n      const earlierScores = scores.slice(-10, -5);\n      \n      if (earlierScores.length > 0) {\n        const recentAvg = recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length;\n        const earlierAvg = earlierScores.reduce((sum, score) => sum + score, 0) / earlierScores.length;\n        \n        if (recentAvg > earlierAvg + 0.05) {\n          history.statistics.recentTrend = 'improving';\n        } else if (recentAvg < earlierAvg - 0.05) {\n          history.statistics.recentTrend = 'declining';\n        } else {\n          history.statistics.recentTrend = 'stable';\n        }\n      }\n    }\n  }\n\n  // Simulation methods for demo purposes - replace with real implementations\n  private simulatePeerValidation(claim: AgentClaim, peer: AgentState): number {\n    // Simulate peer validation logic\n    const baseScore = 0.7;\n    const randomFactor = (Math.random() - 0.5) * 0.4;\n    return Math.max(0, Math.min(1, baseScore + randomFactor));\n  }\n\n  private async simulateExternalVerification(claim: AgentClaim, source: ExternalSource): Promise<number> {\n    // Simulate external source verification\n    const baseScore = source.reliability * 0.8;\n    const randomFactor = (Math.random() - 0.5) * 0.3;\n    return Math.max(0, Math.min(1, baseScore + randomFactor));\n  }\n\n  private checkStructuralIntegrity(claim: AgentClaim): number {\n    // Check if claim has required fields and proper structure\n    let score = 0.8;\n    \n    if (!claim.data || typeof claim.data !== 'object') score -= 0.3;\n    if (!claim.evidence || claim.evidence.length === 0) score -= 0.2;\n    if (!claim.metrics) score -= 0.2;\n    \n    return Math.max(0, score);\n  }\n\n  private checkCausalConsistency(claim: AgentClaim): number {\n    // Check for causal relationships in claim data\n    return 0.8; // Simplified - implement actual causal analysis\n  }\n\n  private checkTemporalCoherence(claim: AgentClaim): number {\n    // Check temporal consistency of claim\n    const now = new Date();\n    const claimAge = now.getTime() - claim.submittedAt.getTime();\n    \n    // Claims should be recent\n    if (claimAge > 24 * 60 * 60 * 1000) { // More than 24 hours\n      return 0.5;\n    }\n    \n    return 0.9;\n  }\n\n  private checkMetricConsistency(claim: AgentClaim): number {\n    // Check consistency of metrics in claim\n    if (!claim.metrics) return 0.5;\n    \n    // Check for reasonable metric values\n    const metrics = claim.metrics;\n    let score = 0.8;\n    \n    if (metrics.accuracy && (metrics.accuracy < 0 || metrics.accuracy > 1)) score -= 0.3;\n    if (metrics.errorRate && metrics.errorRate < 0) score -= 0.2;\n    if (metrics.executionTime && metrics.executionTime < 0) score -= 0.2;\n    \n    return Math.max(0, score);\n  }\n\n  private performDistributionTest(claim: AgentClaim): number {\n    // Perform statistical distribution test\n    return 0.8; // Simplified - implement actual statistical tests\n  }\n\n  private performOutlierDetection(claim: AgentClaim): number {\n    // Detect outliers in claim metrics\n    return 0.8; // Simplified - implement actual outlier detection\n  }\n\n  private performTrendAnalysis(claim: AgentClaim): number {\n    // Analyze trends in claim data\n    return 0.8; // Simplified - implement actual trend analysis\n  }\n\n  private performCorrelationAnalysis(claim: AgentClaim): number {\n    // Analyze correlations in claim metrics\n    return 0.8; // Simplified - implement actual correlation analysis\n  }\n}\n\n// Supporting interfaces\ninterface AgentPerformanceHistory {\n  agentId: string;\n  records: AgentPerformanceRecord[];\n  statistics: AgentStatistics;\n}\n\ninterface AgentPerformanceRecord {\n  timestamp: Date;\n  claimId: string;\n  score: number;\n  success: boolean;\n  executionTime: number;\n  resourceUsage: number;\n  metadata: Record<string, unknown>;\n}\n\ninterface AgentStatistics {\n  averageScore: number;\n  successRate: number;\n  totalClaims: number;\n  recentTrend: 'improving' | 'stable' | 'declining';\n}\n\ninterface CachedValidation {\n  key: string;\n  result: number;\n  timestamp: Date;\n  expiry: Date;\n}\n\ninterface ScoringContext {\n  peers?: AgentState[];\n  externalSources?: ExternalSource[];\n  historicalData?: Record<string, unknown>;\n  constraints?: Record<string, unknown>;\n}\n\ninterface ExternalSource {\n  id: string;\n  name: string;\n  type: string;\n  endpoint: string;\n  reliability: number;\n  credentials?: Record<string, string>;\n}\n\nexport default TruthScorer;"],"names":["logger","AppError","VERIFICATION_CONSTANTS","TruthScorer","config","agentHistory","Map","validationCache","options","child","component","mergeConfig","info","threshold","checks","weights","scoreClaim","claim","context","startTime","Date","now","debug","claimId","id","claimType","type","agentId","components","evidence","errors","historicalValidation","agentReliability","calculateAgentReliability","crossAgentValidation","peers","crossValidation","calculateCrossValidation","externalValidation","externalSources","externalVerification","calculateExternalVerification","logicalValidation","logicalCoherence","calculateLogicalCoherence","statisticalValidation","factualConsistency","calculateFactualConsistency","overall","calculateWeightedScore","fullComponents","confidence","calculateConfidenceInterval","length","score","timestamp","metadata","calculationTime","evidenceCount","errorCount","level","duration","error","Error","message","validateScore","passes","updateAgentHistory","performance","agentKey","has","set","records","statistics","averageScore","successRate","totalClaims","recentTrend","history","get","push","slice","updateAgentStatistics","recordCount","getAgentReliability","clearCache","clear","partialConfig","defaultWeights","defaultChecks","defaultConfidence","DEFAULT_CONFIDENCE_LEVEL","minSampleSize","DEFAULT_MIN_SAMPLE_SIZE","maxErrorMargin","DEFAULT_MAX_ERROR_MARGIN","DEFAULT_TRUTH_THRESHOLD","source","weight","details","reason","recentRecords","avgScore","reduce","sum","record","consistency","calculateVariance","map","r","trendFactor","calculateTrendFactor","reliability","Math","max","min","code","severity","recoverable","validationScores","reliablePeers","filter","peer","peerReliability","validationScore","simulatePeerValidation","avgValidation","consensus","crossValidationScore","peerCount","averageValidation","verificationResults","verificationScore","simulateExternalVerification","avgVerification","sourceAgreement","externalScore","sourceCount","averageVerification","coherenceChecks","structuralIntegrity","checkStructuralIntegrity","causalConsistency","checkCausalConsistency","temporalCoherence","checkTemporalCoherence","metricConsistency","checkMetricConsistency","coherenceScore","Object","values","statisticalTests","distributionTest","performDistributionTest","outlierDetection","performOutlierDetection","trendAnalysis","performTrendAnalysis","correlationAnalysis","performCorrelationAnalysis","consistencyScore","totalWeight","weightedSum","sampleSize","confidenceLevel","variance","calculateComponentVariance","standardError","sqrt","zScore","getZScore","margin","lower","upper","scores","mean","val","squaredDiffs","pow","diff","n","x","Array","from","_","i","sumX","a","b","sumY","sumXY","xi","sumXX","slope","successCount","success","recentScores","earlierScores","recentAvg","earlierAvg","baseScore","randomFactor","random","data","metrics","claimAge","getTime","submittedAt","accuracy","errorRate","executionTime"],"mappings":"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"}