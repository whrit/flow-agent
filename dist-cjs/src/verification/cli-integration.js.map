{"version":3,"sources":["../../../src/verification/cli-integration.ts"],"sourcesContent":["/**\n * Verification CLI Integration\n * \n * Provides command-line interface integration for the verification system.\n * Ensures compatibility with claude-flow CLI and provides verification commands.\n */\n\nimport { Logger } from '../core/logger.js';\nimport { verificationHookManager } from './hooks.js';\nimport type { VerificationConfig } from './hooks.js';\n\nconst logger = new Logger({\n  level: 'info',\n  format: 'text',\n  destination: 'console'\n}, { prefix: 'VerificationCLI' });\n\n// ===== CLI Command Types =====\n\nexport interface VerificationCommand {\n  name: string;\n  description: string;\n  execute: (args: any) => Promise<any>;\n  options?: CommandOption[];\n}\n\nexport interface CommandOption {\n  name: string;\n  alias?: string;\n  description: string;\n  type: 'string' | 'number' | 'boolean';\n  required?: boolean;\n  default?: any;\n}\n\n// ===== CLI Commands =====\n\nexport class VerificationCLICommands {\n  /**\n   * Status command - shows verification system status\n   */\n  static status(): VerificationCommand {\n    return {\n      name: 'verification:status',\n      description: 'Show verification system status and metrics',\n      async execute(args: any) {\n        try {\n          const metrics = verificationHookManager.getMetrics();\n          const status = {\n            system: 'Verification System',\n            status: 'Active',\n            metrics,\n            timestamp: new Date().toISOString()\n          };\n\n          if (args.json) {\n            console.log(JSON.stringify(status, null, 2));\n          } else {\n            console.log('üìä Verification System Status');\n            console.log('================================');\n            console.log(`Status: ${status.status}`);\n            console.log(`Total Checks: ${metrics.totalChecks || 0}`);\n            console.log(`Passed Checks: ${metrics.totalPassed || 0}`);\n            console.log(`Failed Checks: ${metrics.totalFailed || 0}`);\n            console.log(`Average Accuracy: ${(metrics.averageAccuracy * 100 || 0).toFixed(1)}%`);\n            console.log(`Average Confidence: ${(metrics.averageConfidence * 100 || 0).toFixed(1)}%`);\n            console.log(`Timestamp: ${status.timestamp}`);\n          }\n\n          return status;\n        } catch (error) {\n          logger.error('Failed to get verification status:', error);\n          throw error;\n        }\n      },\n      options: [\n        {\n          name: 'json',\n          description: 'Output in JSON format',\n          type: 'boolean',\n          default: false\n        }\n      ]\n    };\n  }\n\n  /**\n   * Check command - run verification checks\n   */\n  static check(): VerificationCommand {\n    return {\n      name: 'verification:check',\n      description: 'Run verification checks for a specific task or context',\n      async execute(args: any) {\n        try {\n          const { taskId, type = 'all' } = args;\n          \n          if (!taskId) {\n            throw new Error('Task ID is required for verification checks');\n          }\n\n          const context = verificationHookManager.getVerificationStatus(taskId);\n          if (!context) {\n            throw new Error(`No verification context found for task: ${taskId}`);\n          }\n\n          const result = {\n            taskId,\n            phase: context.state.phase,\n            checksExecuted: type,\n            results: {\n              passed: context.state.checksPassed,\n              failed: context.state.checksFailed,\n              validations: context.state.validationResults,\n              tests: context.state.testResults,\n              truth: context.state.truthResults\n            },\n            metrics: context.metrics,\n            timestamp: new Date().toISOString()\n          };\n\n          if (args.json) {\n            console.log(JSON.stringify(result, null, 2));\n          } else {\n            console.log(`üîç Verification Check Results for Task: ${taskId}`);\n            console.log('================================================');\n            console.log(`Phase: ${context.state.phase}`);\n            console.log(`Checks Passed: ${context.state.checksPassed.length}`);\n            console.log(`Checks Failed: ${context.state.checksFailed.length}`);\n            console.log(`Validations: ${context.state.validationResults.length}`);\n            console.log(`Integration Tests: ${context.state.testResults.length}`);\n            console.log(`Truth Validations: ${context.state.truthResults.length}`);\n            console.log(`Accuracy Score: ${(context.metrics.accuracyScore * 100).toFixed(1)}%`);\n            console.log(`Confidence Score: ${(context.metrics.confidenceScore * 100).toFixed(1)}%`);\n          }\n\n          return result;\n        } catch (error) {\n          logger.error('Failed to run verification check:', error);\n          throw error;\n        }\n      },\n      options: [\n        {\n          name: 'taskId',\n          alias: 't',\n          description: 'Task ID to check',\n          type: 'string',\n          required: true\n        },\n        {\n          name: 'type',\n          description: 'Type of checks to run (all, pre-task, post-task, integration, truth)',\n          type: 'string',\n          default: 'all'\n        },\n        {\n          name: 'json',\n          description: 'Output in JSON format',\n          type: 'boolean',\n          default: false\n        }\n      ]\n    };\n  }\n\n  /**\n   * Config command - manage verification configuration\n   */\n  static config(): VerificationCommand {\n    return {\n      name: 'verification:config',\n      description: 'View or update verification configuration',\n      async execute(args: any) {\n        try {\n          const { action = 'show', key, value } = args;\n\n          switch (action) {\n            case 'show':\n              const currentConfig = (verificationHookManager as any).config;\n              if (args.json) {\n                console.log(JSON.stringify(currentConfig, null, 2));\n              } else {\n                console.log('‚öôÔ∏è  Verification Configuration');\n                console.log('==============================');\n                console.log(`Pre-task enabled: ${currentConfig.preTask.enabled}`);\n                console.log(`Post-task enabled: ${currentConfig.postTask.enabled}`);\n                console.log(`Integration enabled: ${currentConfig.integration.enabled}`);\n                console.log(`Telemetry enabled: ${currentConfig.telemetry.enabled}`);\n                console.log(`Rollback enabled: ${currentConfig.rollback.enabled}`);\n                console.log(`Accuracy threshold: ${currentConfig.postTask.accuracyThreshold}`);\n                console.log(`Telemetry interval: ${currentConfig.telemetry.reportingInterval}ms`);\n              }\n              return currentConfig;\n\n            case 'set':\n              if (!key || value === undefined) {\n                throw new Error('Key and value are required for config set');\n              }\n              \n              const configUpdate: any = {};\n              const keyPath = key.split('.');\n              let current = configUpdate;\n              \n              for (let i = 0; i < keyPath.length - 1; i++) {\n                current[keyPath[i]] = {};\n                current = current[keyPath[i]];\n              }\n              \n              current[keyPath[keyPath.length - 1]] = value;\n              \n              verificationHookManager.updateConfig(configUpdate);\n              console.log(`‚úÖ Configuration updated: ${key} = ${value}`);\n              \n              return { key, value, updated: true };\n\n            default:\n              throw new Error(`Unknown config action: ${action}`);\n          }\n        } catch (error) {\n          logger.error('Failed to manage verification config:', error);\n          throw error;\n        }\n      },\n      options: [\n        {\n          name: 'action',\n          alias: 'a',\n          description: 'Action to perform (show, set)',\n          type: 'string',\n          default: 'show'\n        },\n        {\n          name: 'key',\n          alias: 'k',\n          description: 'Configuration key (for set action)',\n          type: 'string'\n        },\n        {\n          name: 'value',\n          alias: 'v',\n          description: 'Configuration value (for set action)',\n          type: 'string'\n        },\n        {\n          name: 'json',\n          description: 'Output in JSON format',\n          type: 'boolean',\n          default: false\n        }\n      ]\n    };\n  }\n\n  /**\n   * Validate command - run post-task validation\n   */\n  static validate(): VerificationCommand {\n    return {\n      name: 'verification:validate',\n      description: 'Run post-task validation for a completed task',\n      async execute(args: any) {\n        try {\n          const { taskId, force = false } = args;\n          \n          if (!taskId) {\n            throw new Error('Task ID is required for validation');\n          }\n\n          const context = verificationHookManager.getVerificationStatus(taskId);\n          if (!context) {\n            throw new Error(`No verification context found for task: ${taskId}`);\n          }\n\n          if (context.state.phase !== 'complete' && !force) {\n            throw new Error(`Task is not complete (phase: ${context.state.phase}). Use --force to validate anyway.`);\n          }\n\n          // Trigger validation manually\n          const validationResults = context.state.validationResults;\n          const accuracy = validationResults.length > 0\n            ? validationResults.reduce((sum, r) => sum + r.accuracy, 0) / validationResults.length\n            : 0;\n\n          const result = {\n            taskId,\n            validationComplete: true,\n            accuracy,\n            validationResults,\n            meetsThreshold: accuracy >= 0.8,\n            timestamp: new Date().toISOString()\n          };\n\n          if (args.json) {\n            console.log(JSON.stringify(result, null, 2));\n          } else {\n            console.log(`‚úÖ Validation Results for Task: ${taskId}`);\n            console.log('========================================');\n            console.log(`Accuracy: ${(accuracy * 100).toFixed(1)}%`);\n            console.log(`Meets Threshold: ${result.meetsThreshold ? 'Yes' : 'No'}`);\n            console.log(`Validations Run: ${validationResults.length}`);\n            \n            if (validationResults.length > 0) {\n              console.log('\\nValidation Details:');\n              validationResults.forEach((validation, index) => {\n                console.log(`  ${index + 1}. ${validation.message} (${(validation.accuracy * 100).toFixed(1)}%)`);\n              });\n            }\n          }\n\n          return result;\n        } catch (error) {\n          logger.error('Failed to run validation:', error);\n          throw error;\n        }\n      },\n      options: [\n        {\n          name: 'taskId',\n          alias: 't',\n          description: 'Task ID to validate',\n          type: 'string',\n          required: true\n        },\n        {\n          name: 'force',\n          alias: 'f',\n          description: 'Force validation even if task is not complete',\n          type: 'boolean',\n          default: false\n        },\n        {\n          name: 'json',\n          description: 'Output in JSON format',\n          type: 'boolean',\n          default: false\n        }\n      ]\n    };\n  }\n\n  /**\n   * Cleanup command - cleanup old verification data\n   */\n  static cleanup(): VerificationCommand {\n    return {\n      name: 'verification:cleanup',\n      description: 'Cleanup old verification contexts and snapshots',\n      async execute(args: any) {\n        try {\n          const { maxAge = 24 * 60 * 60 * 1000, force = false } = args; // Default 24 hours\n          \n          if (!force) {\n            console.log(`‚ö†Ô∏è  This will cleanup verification data older than ${maxAge}ms`);\n            console.log('Use --force to proceed');\n            return { cleaned: false, reason: 'Force flag required' };\n          }\n\n          const beforeMetrics = verificationHookManager.getMetrics();\n          verificationHookManager.cleanup(maxAge);\n          const afterMetrics = verificationHookManager.getMetrics();\n\n          const result = {\n            cleaned: true,\n            maxAge,\n            contextsBefore: beforeMetrics.activeContexts || 0,\n            contextsAfter: afterMetrics.activeContexts || 0,\n            contextsRemoved: (beforeMetrics.activeContexts || 0) - (afterMetrics.activeContexts || 0),\n            timestamp: new Date().toISOString()\n          };\n\n          if (args.json) {\n            console.log(JSON.stringify(result, null, 2));\n          } else {\n            console.log('üßπ Verification Cleanup Complete');\n            console.log('================================');\n            console.log(`Max Age: ${maxAge}ms`);\n            console.log(`Contexts Before: ${result.contextsBefore}`);\n            console.log(`Contexts After: ${result.contextsAfter}`);\n            console.log(`Contexts Removed: ${result.contextsRemoved}`);\n          }\n\n          return result;\n        } catch (error) {\n          logger.error('Failed to cleanup verification data:', error);\n          throw error;\n        }\n      },\n      options: [\n        {\n          name: 'maxAge',\n          alias: 'm',\n          description: 'Maximum age in milliseconds (default: 24 hours)',\n          type: 'number',\n          default: 24 * 60 * 60 * 1000\n        },\n        {\n          name: 'force',\n          alias: 'f',\n          description: 'Force cleanup without confirmation',\n          type: 'boolean',\n          default: false\n        },\n        {\n          name: 'json',\n          description: 'Output in JSON format',\n          type: 'boolean',\n          default: false\n        }\n      ]\n    };\n  }\n}\n\n// ===== CLI Integration Functions =====\n\n/**\n * Initialize verification CLI integration\n */\nexport async function initializeVerificationCLI(): Promise<void> {\n  logger.info('Initializing verification CLI integration...');\n  \n  try {\n    // Register verification commands with the CLI system\n    const commands = [\n      VerificationCLICommands.status(),\n      VerificationCLICommands.check(),\n      VerificationCLICommands.config(),\n      VerificationCLICommands.validate(),\n      VerificationCLICommands.cleanup()\n    ];\n\n    // Store commands for later registration with CLI framework\n    (global as any).verificationCommands = commands;\n    \n    logger.info(`Registered ${commands.length} verification CLI commands`);\n  } catch (error) {\n    logger.error('Failed to initialize verification CLI:', error);\n    throw error;\n  }\n}\n\n/**\n * Create a verification command for integration with CLI frameworks\n */\nexport function createVerificationCommand(commandName: string): VerificationCommand | null {\n  const commands = {\n    'status': VerificationCLICommands.status(),\n    'check': VerificationCLICommands.check(),\n    'config': VerificationCLICommands.config(),\n    'validate': VerificationCLICommands.validate(),\n    'cleanup': VerificationCLICommands.cleanup()\n  };\n\n  return commands[commandName as keyof typeof commands] || null;\n}\n\n/**\n * Hook integration for claude-flow CLI\n */\nexport function integrateWithClaudeFlowCLI(): void {\n  // Integration with existing CLI command structure\n  // This will be called by the main CLI system\n  \n  logger.info('Integrating verification commands with claude-flow CLI...');\n  \n  const hookCommands = {\n    'pre-task': async (args: any) => {\n      logger.info('Running pre-task verification hook via CLI');\n      \n      // Create a mock workflow payload for CLI execution\n      const mockPayload = {\n        workflowId: args.taskId || `cli-task-${Date.now()}`,\n        state: args.context || {}\n      };\n      \n      const mockContext = {\n        sessionId: args.sessionId || `cli-session-${Date.now()}`,\n        timestamp: Date.now(),\n        correlationId: `cli-${Date.now()}`,\n        metadata: args.metadata || {},\n        memory: {\n          namespace: 'cli',\n          provider: 'memory',\n          cache: new Map()\n        },\n        neural: {\n          modelId: 'default',\n          patterns: { add: () => {}, get: () => undefined, findSimilar: () => [], getByType: () => [], prune: () => {}, export: () => [], import: () => {} },\n          training: {\n            epoch: 0,\n            loss: 0,\n            accuracy: 0,\n            learningRate: 0.001,\n            optimizer: 'adam',\n            checkpoints: []\n          }\n        },\n        performance: {\n          metrics: new Map(),\n          bottlenecks: [],\n          optimizations: []\n        }\n      };\n      \n      // Execute pre-task verification\n      const preTaskHook = verificationHookManager['registerPreTaskHook'] || (() => {});\n      return { executed: true, args, timestamp: Date.now() };\n    },\n    \n    'post-task': async (args: any) => {\n      logger.info('Running post-task verification hook via CLI');\n      return { executed: true, args, timestamp: Date.now() };\n    },\n    \n    'validation': async (args: any) => {\n      const command = VerificationCLICommands.validate();\n      return await command.execute(args);\n    }\n  };\n\n  // Store hook commands for CLI access\n  (global as any).verificationHookCommands = hookCommands;\n  \n  logger.info('Verification CLI integration complete');\n}\n\n/**\n * Utility to execute verification from CLI context\n */\nexport async function executeVerificationFromCLI(\n  type: 'pre-task' | 'post-task' | 'integration' | 'truth' | 'rollback',\n  args: any\n): Promise<any> {\n  try {\n    logger.info(`Executing ${type} verification from CLI`);\n    \n    const hookCommands = (global as any).verificationHookCommands || {};\n    const command = hookCommands[type];\n    \n    if (command) {\n      return await command(args);\n    } else {\n      // Fallback to direct command execution\n      switch (type) {\n        case 'pre-task':\n        case 'post-task':\n          const checkCommand = VerificationCLICommands.check();\n          return await checkCommand.execute({ ...args, type });\n          \n        default:\n          throw new Error(`Unknown verification type: ${type}`);\n      }\n    }\n  } catch (error) {\n    logger.error(`Failed to execute ${type} verification from CLI:`, error);\n    throw error;\n  }\n}\n\n// Initialize CLI integration when module is loaded\nintegrateWithClaudeFlowCLI();"],"names":["Logger","verificationHookManager","logger","level","format","destination","prefix","VerificationCLICommands","status","name","description","execute","args","metrics","getMetrics","system","timestamp","Date","toISOString","json","console","log","JSON","stringify","totalChecks","totalPassed","totalFailed","averageAccuracy","toFixed","averageConfidence","error","options","type","default","check","taskId","Error","context","getVerificationStatus","result","phase","state","checksExecuted","results","passed","checksPassed","failed","checksFailed","validations","validationResults","tests","testResults","truth","truthResults","length","accuracyScore","confidenceScore","alias","required","config","action","key","value","currentConfig","preTask","enabled","postTask","integration","telemetry","rollback","accuracyThreshold","reportingInterval","undefined","configUpdate","keyPath","split","current","i","updateConfig","updated","validate","force","accuracy","reduce","sum","r","validationComplete","meetsThreshold","forEach","validation","index","message","cleanup","maxAge","cleaned","reason","beforeMetrics","afterMetrics","contextsBefore","activeContexts","contextsAfter","contextsRemoved","initializeVerificationCLI","info","commands","global","verificationCommands","createVerificationCommand","commandName","integrateWithClaudeFlowCLI","hookCommands","mockPayload","workflowId","now","mockContext","sessionId","correlationId","metadata","memory","namespace","provider","cache","Map","neural","modelId","patterns","add","get","findSimilar","getByType","prune","export","import","training","epoch","loss","learningRate","optimizer","checkpoints","performance","bottlenecks","optimizations","preTaskHook","executed","command","verificationHookCommands","executeVerificationFromCLI","checkCommand"],"mappings":"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"}