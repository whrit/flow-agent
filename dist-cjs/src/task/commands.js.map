{"version":3,"sources":["../../../src/task/commands.ts"],"sourcesContent":["// Task command creators\nimport type { TaskCommandContext } from './types.js';\n\nexport function createTaskCreateCommand(context: TaskCommandContext) {\n  return {\n    name: 'create',\n    description: 'Create a new task',\n    execute: async (args: any) => {\n      try {\n        const task = await context.taskEngine.createTask(args);\n        context.logger?.info('Task created successfully', { taskId: task.id });\n        return task;\n      } catch (error) {\n        context.logger?.error('Failed to create task', error);\n        throw error;\n      }\n    },\n  };\n}\n\nexport function createTaskListCommand(context: TaskCommandContext) {\n  return {\n    name: 'list',\n    description: 'List all tasks',\n    execute: async (filter?: any, sort?: any, limit?: number, offset?: number) => {\n      try {\n        const result = await context.taskEngine.listTasks(filter, sort, limit, offset);\n        context.logger?.info('Tasks listed successfully', { count: result.tasks.length });\n        return result;\n      } catch (error) {\n        context.logger?.error('Failed to list tasks', error);\n        throw error;\n      }\n    },\n  };\n}\n\nexport function createTaskStatusCommand(context: TaskCommandContext) {\n  return {\n    name: 'status',\n    description: 'Get task status',\n    execute: async (taskId: string) => {\n      try {\n        const status = await context.taskEngine.getTaskStatus(taskId);\n        if (!status) {\n          throw new Error(`Task ${taskId} not found`);\n        }\n        context.logger?.info('Task status retrieved', { taskId });\n        return status;\n      } catch (error) {\n        context.logger?.error('Failed to get task status', error);\n        throw error;\n      }\n    },\n  };\n}\n\nexport function createTaskCancelCommand(context: TaskCommandContext) {\n  return {\n    name: 'cancel',\n    description: 'Cancel a task',\n    execute: async (\n      taskId: string,\n      reason: string = 'User requested',\n      rollback: boolean = true,\n    ) => {\n      try {\n        await context.taskEngine.cancelTask(taskId, reason, rollback);\n        context.logger?.info('Task cancelled successfully', { taskId, reason });\n        return { success: true, taskId, reason };\n      } catch (error) {\n        context.logger?.error('Failed to cancel task', error);\n        throw error;\n      }\n    },\n  };\n}\n\nexport function createTaskWorkflowCommand(context: TaskCommandContext) {\n  return {\n    name: 'workflow',\n    description: 'Manage task workflows',\n    execute: async (action: 'create' | 'execute' | 'list' | 'get', ...args: any[]) => {\n      try {\n        switch (action) {\n          case 'create':\n            const [workflowData] = args;\n            const createdWorkflow = await context.taskEngine.createWorkflow(workflowData);\n            context.logger?.info('Workflow created successfully', {\n              workflowId: createdWorkflow.id,\n            });\n            return createdWorkflow;\n          case 'execute':\n            const [workflowToExecute] = args;\n            await context.taskEngine.executeWorkflow(workflowToExecute);\n            context.logger?.info('Workflow execution started', {\n              workflowId: workflowToExecute.id,\n            });\n            return { success: true, workflowId: workflowToExecute.id };\n          case 'list':\n            context.logger?.info('Workflow list requested');\n            return { workflows: [] }; // Would need additional implementation\n          case 'get':\n            const [workflowId] = args;\n            context.logger?.info('Workflow details requested', { workflowId });\n            return { workflowId }; // Would need additional implementation\n          default:\n            throw new Error(`Unknown workflow action: ${action}`);\n        }\n      } catch (error) {\n        context.logger?.error('Workflow operation failed', error);\n        throw error;\n      }\n    },\n  };\n}\n"],"names":["createTaskCreateCommand","context","name","description","execute","args","task","taskEngine","createTask","logger","info","taskId","id","error","createTaskListCommand","filter","sort","limit","offset","result","listTasks","count","tasks","length","createTaskStatusCommand","status","getTaskStatus","Error","createTaskCancelCommand","reason","rollback","cancelTask","success","createTaskWorkflowCommand","action","workflowData","createdWorkflow","createWorkflow","workflowId","workflowToExecute","executeWorkflow","workflows"],"mappings":"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"}