{"version":3,"sources":["../../../src/task/index.ts"],"sourcesContent":["/**\n * Task Management System - Main Export\n * Comprehensive task management with orchestration features\n * Integrates with TodoWrite/TodoRead for coordination and Memory for persistence\n */\n\nexport {\n  TaskEngine,\n  type WorkflowTask,\n  type TaskDependency,\n  type ResourceRequirement,\n  type TaskSchedule,\n  type TaskExecution,\n  type TaskMetrics,\n  type TaskLog,\n  type Workflow,\n  type TaskFilter,\n  type TaskSort,\n  type TaskCheckpoint,\n} from './engine.js';\n\nexport {\n  createTaskCreateCommand,\n  createTaskListCommand,\n  createTaskStatusCommand,\n  createTaskCancelCommand,\n  createTaskWorkflowCommand,\n} from './commands.js';\n\nexport {\n  type TaskCommandContext,\n  type TodoItem,\n  type MemoryEntry,\n  type CoordinationContext,\n  type TaskMetadata,\n} from './types.js';\n\nexport { TaskCoordinator } from './coordination.js';\n\n/**\n * Initialize the complete task management system\n */\nexport async function initializeTaskManagement(\n  config: {\n    maxConcurrentTasks?: number;\n    memoryManager?: any;\n    logger?: any;\n  } = {},\n): Promise<{\n  taskEngine: any;\n  taskCoordinator: any;\n  commands: {\n    create: any;\n    list: any;\n    status: any;\n    cancel: any;\n    workflow: any;\n  };\n}> {\n  // Import required classes dynamically to avoid circular dependencies\n  const { TaskEngine } = await import('./engine.js');\n  const { TaskCoordinator } = await import('./coordination.js');\n  const {\n    createTaskCreateCommand,\n    createTaskListCommand,\n    createTaskStatusCommand,\n    createTaskCancelCommand,\n    createTaskWorkflowCommand,\n  } = await import('./commands.js');\n\n  const taskEngine = new TaskEngine(config.maxConcurrentTasks || 10, config.memoryManager);\n\n  const taskCoordinator = new TaskCoordinator(taskEngine, config.memoryManager);\n\n  const commandContext = {\n    taskEngine,\n    taskCoordinator,\n    memoryManager: config.memoryManager,\n    logger: config.logger,\n  };\n\n  const commands = {\n    create: createTaskCreateCommand(commandContext),\n    list: createTaskListCommand(commandContext),\n    status: createTaskStatusCommand(commandContext),\n    cancel: createTaskCancelCommand(commandContext),\n    workflow: createTaskWorkflowCommand(commandContext),\n  };\n\n  return {\n    taskEngine,\n    taskCoordinator,\n    commands,\n  };\n}\n\n/**\n * Helper function to create TodoWrite-style task breakdown\n */\nexport async function createTaskTodos(\n  objective: string,\n  options: {\n    strategy?: 'research' | 'development' | 'analysis' | 'testing' | 'optimization' | 'maintenance';\n    maxTasks?: number;\n    batchOptimized?: boolean;\n    parallelExecution?: boolean;\n    memoryCoordination?: boolean;\n  } = {},\n  coordinator?: any,\n): Promise<any[]> {\n  if (!coordinator) {\n    throw new Error('TaskCoordinator instance required for todo creation');\n  }\n\n  const context = {\n    sessionId: `session-${Date.now()}`,\n    coordinationMode: options.batchOptimized ? 'distributed' : 'centralized',\n  };\n\n  return await coordinator.createTaskTodos(objective, context, options);\n}\n\n/**\n * Helper function to launch parallel agents (Task tool pattern)\n */\nexport async function launchParallelAgents(\n  tasks: Array<{\n    agentType: string;\n    objective: string;\n    mode?: string;\n    configuration?: Record<string, unknown>;\n    memoryKey?: string;\n    batchOptimized?: boolean;\n  }>,\n  coordinator?: any,\n): Promise<string[]> {\n  if (!coordinator) {\n    throw new Error('TaskCoordinator instance required for agent launching');\n  }\n\n  const context = {\n    sessionId: `session-${Date.now()}`,\n    coordinationMode: 'distributed',\n  };\n\n  return await coordinator.launchParallelAgents(tasks, context);\n}\n\n/**\n * Helper function to store coordination data in Memory\n */\nexport async function storeCoordinationData(\n  key: string,\n  value: any,\n  options: {\n    namespace?: string;\n    tags?: string[];\n    expiresAt?: Date;\n  } = {},\n  coordinator?: any,\n): Promise<void> {\n  if (!coordinator) {\n    throw new Error('TaskCoordinator instance required for memory storage');\n  }\n\n  await coordinator.storeInMemory(key, value, options);\n}\n\n/**\n * Helper function to retrieve coordination data from Memory\n */\nexport async function retrieveCoordinationData(\n  key: string,\n  namespace?: string,\n  coordinator?: any,\n): Promise<any | null> {\n  if (!coordinator) {\n    throw new Error('TaskCoordinator instance required for memory retrieval');\n  }\n\n  return await coordinator.retrieveFromMemory(key, namespace);\n}\n\n/**\n * Examples and usage patterns for Claude Code integration\n */\nexport const USAGE_EXAMPLES = {\n  todoWrite: `\n// Example: Using TodoWrite for task coordination\nimport { createTaskTodos } from './task.js';\n\nconst todos = await createTaskTodos(\n  \"Build e-commerce platform\",\n  {\n    strategy: 'development',\n    batchOptimized: true,\n    parallelExecution: true,\n    memoryCoordination: true\n  },\n  coordinator\n);\n\n// This creates a structured todo list with:\n// - System architecture design (high priority)\n// - Frontend development (parallel execution)\n// - Backend development (parallel execution) \n// - Testing and integration (depends on frontend/backend)\n`,\n\n  taskTool: `\n// Example: Using Task tool pattern for parallel agents\nimport { launchParallelAgents } from './task.js';\n\nconst agentIds = await launchParallelAgents([\n  {\n    agentType: 'researcher',\n    objective: 'Research best practices for microservices',\n    mode: 'researcher',\n    memoryKey: 'microservices_research',\n    batchOptimized: true\n  },\n  {\n    agentType: 'architect',\n    objective: 'Design system architecture based on research',\n    mode: 'architect',\n    memoryKey: 'system_architecture',\n    batchOptimized: true\n  },\n  {\n    agentType: 'coder',\n    objective: 'Implement core services',\n    mode: 'coder',\n    memoryKey: 'core_implementation',\n    batchOptimized: true\n  }\n], coordinator);\n`,\n\n  memoryCoordination: `\n// Example: Using Memory for cross-agent coordination\nimport { storeCoordinationData, retrieveCoordinationData } from './task.js';\n\n// Store research findings for other agents\nawait storeCoordinationData(\n  'research_findings',\n  {\n    bestPractices: [...],\n    technologies: [...],\n    patterns: [...]\n  },\n  {\n    namespace: 'project_coordination',\n    tags: ['research', 'architecture']\n  },\n  coordinator\n);\n\n// Retrieve findings in another agent\nconst findings = await retrieveCoordinationData(\n  'research_findings',\n  'project_coordination',\n  coordinator\n);\n`,\n\n  batchOperations: `\n// Example: Coordinated batch operations\nimport { TaskCoordinator } from './task.js';\n\nconst results = await coordinator.coordinateBatchOperations([\n  {\n    type: 'read',\n    targets: ['src/**/*.ts'],\n    configuration: { pattern: 'class.*{' }\n  },\n  {\n    type: 'analyze',\n    targets: ['package.json', 'tsconfig.json'],\n    configuration: { focus: 'dependencies' }\n  },\n  {\n    type: 'search',\n    targets: ['docs/**/*.md'],\n    configuration: { term: 'API documentation' }\n  }\n], context);\n`,\n\n  swarmCoordination: `\n// Example: Swarm coordination patterns\nawait coordinator.coordinateSwarm(\n  \"Comprehensive system development\",\n  {\n    sessionId: 'dev-session-1',\n    coordinationMode: 'hierarchical'\n  },\n  [\n    { type: 'lead-architect', role: 'team-lead', capabilities: ['design', 'coordination'] },\n    { type: 'frontend-dev-1', role: 'coder', capabilities: ['react', 'ui'] },\n    { type: 'frontend-dev-2', role: 'coder', capabilities: ['react', 'testing'] },\n    { type: 'backend-dev-1', role: 'coder', capabilities: ['nodejs', 'api'] },\n    { type: 'backend-dev-2', role: 'coder', capabilities: ['database', 'scaling'] },\n    { type: 'devops-engineer', role: 'specialist', capabilities: ['deployment', 'monitoring'] }\n  ]\n);\n`,\n};\n\n/**\n * Command line usage examples\n */\nexport const CLI_EXAMPLES = {\n  taskCreate: `\n# Create a complex task with dependencies and scheduling\nclaude-flow task create development \"Implement user authentication system\" \\\\\n  --priority 80 \\\\\n  --dependencies \"task-123,task-456\" \\\\\n  --dep-type finish-to-start \\\\\n  --assign backend-team \\\\\n  --tags \"auth,security,backend\" \\\\\n  --deadline \"2024-02-15T18:00:00Z\" \\\\\n  --cpu 2 \\\\\n  --memory 1024 \\\\\n  --max-retries 5 \\\\\n  --rollback previous-checkpoint\n`,\n\n  taskList: `\n# List tasks with advanced filtering and visualization\nclaude-flow task list \\\\\n  --status running,pending \\\\\n  --priority 70-100 \\\\\n  --tags auth,security \\\\\n  --sort deadline \\\\\n  --sort-dir asc \\\\\n  --format table \\\\\n  --show-dependencies \\\\\n  --show-progress \\\\\n  --limit 20\n`,\n\n  taskStatus: `\n# Get detailed task status with all metrics\nclaude-flow task status task-789 \\\\\n  --show-logs \\\\\n  --show-checkpoints \\\\\n  --show-metrics \\\\\n  --show-dependencies \\\\\n  --show-resources \\\\\n  --watch\n`,\n\n  taskCancel: `\n# Cancel task with safe rollback and cascade\nclaude-flow task cancel task-789 \\\\\n  --reason \"Requirements changed\" \\\\\n  --cascade \\\\\n  --dry-run\n`,\n\n  taskWorkflow: `\n# Create and execute workflows\nclaude-flow task workflow create \"E-commerce Platform\" \\\\\n  --description \"Complete e-commerce development workflow\" \\\\\n  --max-concurrent 8 \\\\\n  --strategy priority-based \\\\\n  --error-handling continue-on-error\n\nclaude-flow task workflow execute workflow-123 \\\\\n  --variables '{\"environment\":\"staging\",\"version\":\"2.1.0\"}' \\\\\n  --monitor\n\nclaude-flow task workflow visualize workflow-123 \\\\\n  --format dot \\\\\n  --output workflow-graph.dot\n`,\n};\n\nexport default {\n  initializeTaskManagement,\n  createTaskTodos,\n  launchParallelAgents,\n  storeCoordinationData,\n  retrieveCoordinationData,\n  USAGE_EXAMPLES,\n  CLI_EXAMPLES,\n};\n"],"names":["TaskEngine","createTaskCreateCommand","createTaskListCommand","createTaskStatusCommand","createTaskCancelCommand","createTaskWorkflowCommand","TaskCoordinator","initializeTaskManagement","config","taskEngine","maxConcurrentTasks","memoryManager","taskCoordinator","commandContext","logger","commands","create","list","status","cancel","workflow","createTaskTodos","objective","options","coordinator","Error","context","sessionId","Date","now","coordinationMode","batchOptimized","launchParallelAgents","tasks","storeCoordinationData","key","value","storeInMemory","retrieveCoordinationData","namespace","retrieveFromMemory","USAGE_EXAMPLES","todoWrite","taskTool","memoryCoordination","batchOperations","swarmCoordination","CLI_EXAMPLES","taskCreate","taskList","taskStatus","taskCancel","taskWorkflow"],"mappings":"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"}