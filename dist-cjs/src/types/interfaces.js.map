{"version":3,"sources":["../../../src/types/interfaces.ts"],"sourcesContent":["/**\n * Core interfaces for the claude-flow init system\n */\n\nexport type InitMode = 'standard' | 'github' | 'hive-mind' | 'sparc' | 'neural' | 'enterprise';\nexport type TopologyType = 'mesh' | 'hierarchical' | 'ring' | 'star';\nexport type ConsensusType = 'raft' | 'byzantine' | 'gossip' | 'proof-of-learning';\nexport type AgentType = 'researcher' | 'coder' | 'analyst' | 'optimizer' | 'coordinator' | 'tester' | 'reviewer';\n\n// Core initialization interfaces\nexport interface IInitMode {\n  initialize(config: InitConfig): Promise<InitResult>;\n  validate(): boolean;\n  getDescription(): string;\n  getRequiredComponents(): string[];\n}\n\nexport interface InitConfig {\n  mode?: InitMode;\n  topology?: TopologyType;\n  maxAgents?: number;\n  strategy?: 'balanced' | 'specialized' | 'adaptive';\n  database?: 'sqlite' | 'json';\n  configPath?: string;\n  debug?: boolean;\n  configManager?: any;\n  databaseManager?: any;\n  topologyManager?: any;\n  agentRegistry?: any;\n  metricsCollector?: any;\n}\n\nexport interface InitResult {\n  success: boolean;\n  mode: InitMode;\n  components?: string[];\n  topology?: TopologyType;\n  duration?: number;\n  message?: string;\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\n// Consensus interfaces\nexport interface IConsensusAlgorithm {\n  propose(decision: Decision): Promise<Vote[]>;\n  execute(consensus: Consensus): Promise<Result>;\n  getType(): ConsensusType;\n  initialize(): Promise<void>;\n}\n\nexport interface Decision {\n  id: string;\n  type: 'agent-spawn' | 'task-assignment' | 'resource-allocation' | 'topology-change';\n  proposer: string;\n  data: any;\n  timestamp: Date;\n}\n\nexport interface Vote {\n  agentId: string;\n  decision: boolean;\n  confidence: number;\n  reasoning?: string;\n}\n\nexport interface Consensus {\n  decisionId: string;\n  outcome: boolean;\n  votes: Vote[];\n  confidence: number;\n  timestamp: Date;\n}\n\nexport interface Result {\n  success: boolean;\n  data?: any;\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\n// Topology interfaces\nexport interface ITopology {\n  configure(agents: Agent[]): Promise<Network>;\n  optimize(): Promise<Optimization>;\n  getConnections(): Connection[];\n  getType(): TopologyType;\n}\n\nexport interface Agent {\n  id: string;\n  type: AgentType;\n  capabilities: string[];\n  status: 'active' | 'idle' | 'busy' | 'offline';\n  metadata: Record<string, any>;\n  connections?: string[];\n  performance?: AgentPerformance;\n}\n\nexport interface Network {\n  topology: TopologyType;\n  agents: Agent[];\n  connections: Connection[];\n  metrics: NetworkMetrics;\n}\n\nexport interface Connection {\n  from: string;\n  to: string;\n  type: 'direct' | 'relay' | 'broadcast';\n  weight?: number;\n  latency?: number;\n}\n\nexport interface Optimization {\n  type: 'latency' | 'throughput' | 'reliability';\n  changes: TopologyChange[];\n  expectedImprovement: number;\n}\n\nexport interface TopologyChange {\n  action: 'add-connection' | 'remove-connection' | 'modify-weight';\n  connection: Connection;\n  reason: string;\n}\n\nexport interface NetworkMetrics {\n  totalAgents: number;\n  totalConnections: number;\n  averageLatency: number;\n  throughput: number;\n  reliability: number;\n}\n\n// Database interfaces\nexport interface IDatabaseProvider {\n  initialize(): Promise<void>;\n  store(key: string, value: any, namespace?: string): Promise<void>;\n  retrieve(key: string, namespace?: string): Promise<any>;\n  delete(key: string, namespace?: string): Promise<boolean>;\n  list(namespace?: string): Promise<string[]>;\n  close(): Promise<void>;\n}\n\n// Agent coordination interfaces\nexport interface IAgentCoordinator {\n  spawn(type: AgentType, config: AgentConfig): Promise<Agent>;\n  coordinate(task: Task): Promise<Result>;\n  monitor(): Promise<Metrics>;\n  shutdown(agentId: string): Promise<void>;\n}\n\nexport interface AgentConfig {\n  capabilities?: string[];\n  maxConcurrency?: number;\n  timeout?: number;\n  resources?: ResourceAllocation;\n  metadata?: Record<string, any>;\n}\n\nexport interface Task {\n  id: string;\n  type: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  requiredCapabilities: string[];\n  deadline?: Date;\n  dependencies?: string[];\n  data?: any;\n}\n\nexport interface ResourceAllocation {\n  memory: number;\n  cpu: number;\n  storage: number;\n  network: number;\n}\n\nexport interface AgentPerformance {\n  tasksCompleted: number;\n  averageResponseTime: number;\n  successRate: number;\n  resourceUtilization: ResourceAllocation;\n  lastActivity: Date;\n}\n\nexport interface Metrics {\n  agents: AgentMetrics[];\n  system: SystemMetrics;\n  performance: PerformanceMetrics;\n}\n\nexport interface AgentMetrics {\n  agentId: string;\n  type: AgentType;\n  performance: AgentPerformance;\n  status: 'active' | 'idle' | 'busy' | 'offline';\n}\n\nexport interface SystemMetrics {\n  uptime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkLatency: number;\n  activeConnections: number;\n}\n\nexport interface PerformanceMetrics {\n  throughput: number;\n  latency: number;\n  errorRate: number;\n  bottlenecks: string[];\n}\n\n// Hive Mind interfaces\nexport interface IHiveMindQueen {\n  strategize(objective: Objective): Promise<Strategy>;\n  delegate(tasks: Task[]): Promise<Assignment[]>;\n  monitor(): Promise<QueenMetrics>;\n  adapt(feedback: Feedback[]): Promise<void>;\n}\n\nexport interface Objective {\n  id: string;\n  description: string;\n  goals: Goal[];\n  constraints: Constraint[];\n  deadline?: Date;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface Goal {\n  description: string;\n  metric: string;\n  target: number;\n  weight: number;\n}\n\nexport interface Constraint {\n  type: 'resource' | 'time' | 'dependency' | 'capability';\n  description: string;\n  value: any;\n}\n\nexport interface Strategy {\n  approach: string;\n  phases: StrategyPhase[];\n  resourceAllocation: ResourceAllocation;\n  expectedOutcome: string;\n  riskAssessment: Risk[];\n}\n\nexport interface StrategyPhase {\n  name: string;\n  description: string;\n  tasks: Task[];\n  dependencies: string[];\n  duration: number;\n}\n\nexport interface Risk {\n  description: string;\n  probability: number;\n  impact: number;\n  mitigation: string;\n}\n\nexport interface Assignment {\n  agentId: string;\n  task: Task;\n  deadline: Date;\n  resources: ResourceAllocation;\n}\n\nexport interface QueenMetrics {\n  strategiesCreated: number;\n  tasksAssigned: number;\n  successRate: number;\n  adaptationCount: number;\n  performanceScore: number;\n}\n\nexport interface Feedback {\n  source: string;\n  type: 'performance' | 'outcome' | 'suggestion';\n  rating: number;\n  comments: string;\n  data?: any;\n}\n\n// Configuration interfaces\nexport interface ConfigValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface DatabaseConfig {\n  type: 'sqlite' | 'json';\n  path?: string;\n  options?: Record<string, any>;\n}\n\nexport interface TopologyConfig {\n  type: TopologyType;\n  maxAgents: number;\n  connectionStrategy: 'full' | 'sparse' | 'hub' | 'ring';\n  optimization: boolean;\n}\n\nexport interface InitializationMetrics {\n  mode: InitMode;\n  duration: number;\n  success: boolean;\n  components?: string[];\n  error?: string;\n  timestamp: string;\n}"],"names":[],"mappings":"AAsTA,WAOC"}