{"version":3,"sources":["../../../src/types/index.ts"],"sourcesContent":["// Re-export all types for convenience\n// export * from '../core/types.js'; // File not found\n// export * from '../agents/types.js'; // File not found\n// export * from '../integrations/types.js'; // File not found\n// export * from '../memory/types.js'; // File not found\nexport * from '../swarm/types.js';\n// export * from '../workflows/types.js'; // File not found\n\n// Memory-specific types that may be referenced\nexport interface MemoryEntry {\n  id: string;\n  key: string;\n  value: any;\n  data?: any; // For backward compatibility\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n  partition?: string;\n}\n\n// Task types for swarm\nexport type TaskId = string;\nexport type TaskStatus = 'pending' | 'active' | 'completed' | 'failed';\n\n// Component monitoring types\nexport enum ComponentStatus {\n  HEALTHY = 'healthy',\n  WARNING = 'warning',\n  ERROR = 'error',\n  UNKNOWN = 'unknown',\n}\n\n// Alert types for monitoring\nexport interface AlertData {\n  id: string;\n  level: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n  timestamp: Date;\n  component?: string;\n  metadata?: Record<string, any>;\n}\n"],"names":["ComponentStatus"],"mappings":"AAKA,cAAc,oBAAoB;AAoBlC,OAAO,IAAA,AAAKA,yCAAAA;;;;;WAAAA;MAKX"}