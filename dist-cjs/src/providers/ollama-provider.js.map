{"version":3,"sources":["../../../src/providers/ollama-provider.ts"],"sourcesContent":["/**\n * Ollama Provider Implementation\n * Supports local models running via Ollama\n */\n\nimport { BaseProvider } from './base-provider.js';\nimport {\n  LLMProvider,\n  LLMModel,\n  LLMRequest,\n  LLMResponse,\n  LLMStreamEvent,\n  ModelInfo,\n  ProviderCapabilities,\n  HealthCheckResult,\n  LLMProviderError,\n  ProviderUnavailableError,\n} from './types.js';\n\ninterface OllamaGenerateRequest {\n  model: string;\n  prompt: string;\n  system?: string;\n  template?: string;\n  context?: number[];\n  stream?: boolean;\n  raw?: boolean;\n  format?: 'json';\n  options?: {\n    temperature?: number;\n    top_k?: number;\n    top_p?: number;\n    num_predict?: number;\n    stop?: string[];\n    seed?: number;\n    num_ctx?: number;\n  };\n}\n\ninterface OllamaChatRequest {\n  model: string;\n  messages: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>;\n  stream?: boolean;\n  format?: 'json';\n  options?: OllamaGenerateRequest['options'];\n}\n\ninterface OllamaResponse {\n  model: string;\n  created_at: string;\n  response?: string;\n  message?: {\n    role: string;\n    content: string;\n  };\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\ninterface OllamaModelInfo {\n  name: string;\n  modified_at: string;\n  size: number;\n  digest: string;\n  details: {\n    format: string;\n    family: string;\n    families: string[] | null;\n    parameter_size: string;\n    quantization_level: string;\n  };\n}\n\nexport class OllamaProvider extends BaseProvider {\n  readonly name: LLMProvider = 'ollama';\n  readonly capabilities: ProviderCapabilities = {\n    supportedModels: [\n      'llama-2-7b',\n      'llama-2-13b',\n      'llama-2-70b',\n      'mistral-7b',\n      'mixtral-8x7b',\n      'custom-model',\n    ],\n    maxContextLength: {\n      'llama-2-7b': 4096,\n      'llama-2-13b': 4096,\n      'llama-2-70b': 4096,\n      'mistral-7b': 8192,\n      'mixtral-8x7b': 32768,\n      'custom-model': 4096,\n    } as Record<LLMModel, number>,\n    maxOutputTokens: {\n      'llama-2-7b': 2048,\n      'llama-2-13b': 2048,\n      'llama-2-70b': 2048,\n      'mistral-7b': 4096,\n      'mixtral-8x7b': 4096,\n      'custom-model': 2048,\n    } as Record<LLMModel, number>,\n    supportsStreaming: true,\n    supportsFunctionCalling: false,\n    supportsSystemMessages: true,\n    supportsVision: false,\n    supportsAudio: false,\n    supportsTools: false,\n    supportsFineTuning: false,\n    supportsEmbeddings: true,\n    supportsLogprobs: false,\n    supportsBatching: false,\n    pricing: {\n      // Local models have no API cost\n      'llama-2-7b': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n      'llama-2-13b': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n      'llama-2-70b': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n      'mistral-7b': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n      'mixtral-8x7b': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n      'custom-model': { promptCostPer1k: 0, completionCostPer1k: 0, currency: 'USD' },\n    },\n  };\n\n  private baseUrl: string;\n  private availableModels: Set<string> = new Set();\n\n  protected async doInitialize(): Promise<void> {\n    this.baseUrl = this.config.apiUrl || 'http://localhost:11434';\n    \n    // Check if Ollama is running and get available models\n    try {\n      await this.fetchAvailableModels();\n    } catch (error) {\n      this.logger.warn('Failed to fetch Ollama models, will retry on first request', error);\n    }\n  }\n\n  private async fetchAvailableModels(): Promise<void> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch models: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      this.availableModels.clear();\n      \n      if (data.models && Array.isArray(data.models)) {\n        data.models.forEach((model: OllamaModelInfo) => {\n          this.availableModels.add(model.name);\n          // Map common model names\n          if (model.name.includes('llama2:7b')) {\n            this.availableModels.add('llama-2-7b');\n          } else if (model.name.includes('llama2:13b')) {\n            this.availableModels.add('llama-2-13b');\n          } else if (model.name.includes('llama2:70b')) {\n            this.availableModels.add('llama-2-70b');\n          } else if (model.name.includes('mistral')) {\n            this.availableModels.add('mistral-7b');\n          } else if (model.name.includes('mixtral')) {\n            this.availableModels.add('mixtral-8x7b');\n          }\n        });\n      }\n    } catch (error) {\n      throw new ProviderUnavailableError('ollama', {\n        message: 'Ollama service is not available',\n        details: error,\n      });\n    }\n  }\n\n  protected async doComplete(request: LLMRequest): Promise<LLMResponse> {\n    // Use chat endpoint for multi-turn conversations\n    const ollamaRequest: OllamaChatRequest = {\n      model: this.mapToOllamaModel(request.model || this.config.model),\n      messages: request.messages.map(msg => ({\n        role: msg.role === 'system' ? 'system' : msg.role === 'assistant' ? 'assistant' : 'user',\n        content: msg.content,\n      })),\n      stream: false,\n      options: {\n        temperature: request.temperature ?? this.config.temperature,\n        top_k: request.topK ?? this.config.topK,\n        top_p: request.topP ?? this.config.topP,\n        num_predict: request.maxTokens ?? this.config.maxTokens,\n        stop: request.stopSequences ?? this.config.stopSequences,\n      },\n    };\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.config.timeout || 120000); // Longer timeout for local models\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ollamaRequest),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        await this.handleErrorResponse(response);\n      }\n\n      const data: OllamaResponse = await response.json();\n      \n      // Calculate metrics\n      const promptTokens = data.prompt_eval_count || this.estimateTokens(JSON.stringify(request.messages));\n      const completionTokens = data.eval_count || this.estimateTokens(data.message?.content || '');\n      const totalDuration = data.total_duration ? data.total_duration / 1000000 : 0; // Convert nanoseconds to milliseconds\n\n      return {\n        id: `ollama-${Date.now()}`,\n        model: request.model || this.config.model,\n        provider: 'ollama',\n        content: data.message?.content || '',\n        usage: {\n          promptTokens,\n          completionTokens,\n          totalTokens: promptTokens + completionTokens,\n        },\n        cost: {\n          promptCost: 0,\n          completionCost: 0,\n          totalCost: 0,\n          currency: 'USD',\n        },\n        latency: totalDuration,\n        finishReason: data.done ? 'stop' : 'length',\n        metadata: {\n          loadDuration: data.load_duration,\n          promptEvalDuration: data.prompt_eval_duration,\n          evalDuration: data.eval_duration,\n        },\n      };\n    } catch (error) {\n      clearTimeout(timeout);\n      \n      // Check if Ollama is running\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        throw new ProviderUnavailableError('ollama', {\n          message: 'Cannot connect to Ollama. Make sure Ollama is running on ' + this.baseUrl,\n        });\n      }\n      \n      throw this.transformError(error);\n    }\n  }\n\n  protected async *doStreamComplete(request: LLMRequest): AsyncIterable<LLMStreamEvent> {\n    const ollamaRequest: OllamaChatRequest = {\n      model: this.mapToOllamaModel(request.model || this.config.model),\n      messages: request.messages.map(msg => ({\n        role: msg.role === 'system' ? 'system' : msg.role === 'assistant' ? 'assistant' : 'user',\n        content: msg.content,\n      })),\n      stream: true,\n      options: {\n        temperature: request.temperature ?? this.config.temperature,\n        top_k: request.topK ?? this.config.topK,\n        top_p: request.topP ?? this.config.topP,\n        num_predict: request.maxTokens ?? this.config.maxTokens,\n        stop: request.stopSequences ?? this.config.stopSequences,\n      },\n    };\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), (this.config.timeout || 120000) * 2);\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ollamaRequest),\n        signal: controller.signal,\n      });\n\n      if (!response.ok) {\n        await this.handleErrorResponse(response);\n      }\n\n      const reader = response.body!.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let totalContent = '';\n      let promptTokens = 0;\n      let completionTokens = 0;\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.trim() === '') continue;\n          \n          try {\n            const data: OllamaResponse = JSON.parse(line);\n            \n            if (data.message?.content) {\n              totalContent += data.message.content;\n              yield {\n                type: 'content',\n                delta: { content: data.message.content },\n              };\n            }\n            \n            if (data.done) {\n              promptTokens = data.prompt_eval_count || this.estimateTokens(JSON.stringify(request.messages));\n              completionTokens = data.eval_count || this.estimateTokens(totalContent);\n              \n              yield {\n                type: 'done',\n                usage: {\n                  promptTokens,\n                  completionTokens,\n                  totalTokens: promptTokens + completionTokens,\n                },\n                cost: {\n                  promptCost: 0,\n                  completionCost: 0,\n                  totalCost: 0,\n                  currency: 'USD',\n                },\n              };\n            }\n          } catch (e) {\n            this.logger.warn('Failed to parse Ollama stream chunk', { line, error: e });\n          }\n        }\n      }\n    } catch (error) {\n      clearTimeout(timeout);\n      \n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        throw new ProviderUnavailableError('ollama', {\n          message: 'Cannot connect to Ollama. Make sure Ollama is running on ' + this.baseUrl,\n        });\n      }\n      \n      throw this.transformError(error);\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  async listModels(): Promise<LLMModel[]> {\n    // Refresh available models\n    await this.fetchAvailableModels();\n    \n    // Return intersection of supported models and available models\n    return this.capabilities.supportedModels.filter(model => \n      this.availableModels.has(this.mapToOllamaModel(model))\n    );\n  }\n\n  async getModelInfo(model: LLMModel): Promise<ModelInfo> {\n    const ollamaModel = this.mapToOllamaModel(model);\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/api/show`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: ollamaModel }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Model not found');\n      }\n\n      const data = await response.json();\n      \n      return {\n        model,\n        name: data.name || model,\n        description: data.description || this.getModelDescription(model),\n        contextLength: this.capabilities.maxContextLength[model] || 4096,\n        maxOutputTokens: this.capabilities.maxOutputTokens[model] || 2048,\n        supportedFeatures: ['chat', 'completion'],\n        pricing: this.capabilities.pricing![model],\n        metadata: {\n          parameterSize: data.details?.parameter_size,\n          quantization: data.details?.quantization_level,\n          format: data.details?.format,\n        },\n      };\n    } catch (error) {\n      // Fallback to default info\n      return {\n        model,\n        name: model,\n        description: this.getModelDescription(model),\n        contextLength: this.capabilities.maxContextLength[model] || 4096,\n        maxOutputTokens: this.capabilities.maxOutputTokens[model] || 2048,\n        supportedFeatures: ['chat', 'completion'],\n        pricing: this.capabilities.pricing![model],\n      };\n    }\n  }\n\n  protected async doHealthCheck(): Promise<HealthCheckResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      \n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n\n      return {\n        healthy: true,\n        timestamp: new Date(),\n        details: {\n          modelsAvailable: this.availableModels.size,\n        },\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error instanceof Error ? error.message : 'Cannot connect to Ollama',\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  private mapToOllamaModel(model: LLMModel): string {\n    const modelMap: Record<string, string> = {\n      'llama-2-7b': 'llama2:7b',\n      'llama-2-13b': 'llama2:13b',\n      'llama-2-70b': 'llama2:70b',\n      'mistral-7b': 'mistral:7b',\n      'mixtral-8x7b': 'mixtral:8x7b',\n      'custom-model': this.config.providerOptions?.customModel || 'llama2:latest',\n    };\n    return modelMap[model] || model;\n  }\n\n  private getModelDescription(model: LLMModel): string {\n    const descriptions: Record<string, string> = {\n      'llama-2-7b': 'Llama 2 7B - Efficient open-source model',\n      'llama-2-13b': 'Llama 2 13B - Balanced performance model',\n      'llama-2-70b': 'Llama 2 70B - Large open-source model',\n      'mistral-7b': 'Mistral 7B - Fast and efficient model',\n      'mixtral-8x7b': 'Mixtral 8x7B - Mixture of experts model',\n      'custom-model': 'Custom local model',\n    };\n    return descriptions[model] || 'Local language model via Ollama';\n  }\n\n  private async handleErrorResponse(response: Response): Promise<void> {\n    const errorText = await response.text();\n    let errorData: any;\n\n    try {\n      errorData = JSON.parse(errorText);\n    } catch {\n      errorData = { error: errorText };\n    }\n\n    const message = errorData.error || 'Unknown error';\n\n    throw new LLMProviderError(\n      message,\n      `OLLAMA_${response.status}`,\n      'ollama',\n      response.status,\n      response.status >= 500,\n      errorData\n    );\n  }\n}"],"names":["BaseProvider","LLMProviderError","ProviderUnavailableError","OllamaProvider","name","capabilities","supportedModels","maxContextLength","maxOutputTokens","supportsStreaming","supportsFunctionCalling","supportsSystemMessages","supportsVision","supportsAudio","supportsTools","supportsFineTuning","supportsEmbeddings","supportsLogprobs","supportsBatching","pricing","promptCostPer1k","completionCostPer1k","currency","baseUrl","availableModels","Set","doInitialize","config","apiUrl","fetchAvailableModels","error","logger","warn","response","fetch","ok","Error","status","data","json","clear","models","Array","isArray","forEach","model","add","includes","message","details","doComplete","request","ollamaRequest","mapToOllamaModel","messages","map","msg","role","content","stream","options","temperature","top_k","topK","top_p","topP","num_predict","maxTokens","stop","stopSequences","controller","AbortController","timeout","setTimeout","abort","method","headers","body","JSON","stringify","signal","clearTimeout","handleErrorResponse","promptTokens","prompt_eval_count","estimateTokens","completionTokens","eval_count","totalDuration","total_duration","id","Date","now","provider","usage","totalTokens","cost","promptCost","completionCost","totalCost","latency","finishReason","done","metadata","loadDuration","load_duration","promptEvalDuration","prompt_eval_duration","evalDuration","eval_duration","TypeError","transformError","doStreamComplete","reader","getReader","decoder","TextDecoder","buffer","totalContent","value","read","decode","lines","split","pop","line","trim","parse","type","delta","e","listModels","filter","has","getModelInfo","ollamaModel","description","getModelDescription","contextLength","supportedFeatures","parameterSize","parameter_size","quantization","quantization_level","format","doHealthCheck","healthy","timestamp","modelsAvailable","size","modelMap","providerOptions","customModel","descriptions","errorText","text","errorData"],"mappings":"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"}