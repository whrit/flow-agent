{"version":3,"sources":["../../../src/providers/anthropic-provider.ts"],"sourcesContent":["/**\n * Anthropic (Claude) Provider Implementation\n * Extends the existing Claude client with unified provider interface\n */\n\nimport { BaseProvider } from './base-provider.js';\nimport { ClaudeAPIClient, ClaudeModel as AnthropicModel } from '../api/claude-client.js';\nimport {\n  LLMProvider,\n  LLMModel,\n  LLMRequest,\n  LLMResponse,\n  LLMStreamEvent,\n  ModelInfo,\n  ProviderCapabilities,\n  HealthCheckResult,\n  LLMProviderError,\n} from './types.js';\n\nexport class AnthropicProvider extends BaseProvider {\n  readonly name: LLMProvider = 'anthropic';\n  readonly capabilities: ProviderCapabilities = {\n    supportedModels: [\n      'claude-3-opus-20240229',\n      'claude-3-sonnet-20240229',\n      'claude-3-haiku-20240307',\n      'claude-2.1',\n      'claude-2.0',\n      'claude-instant-1.2',\n    ],\n    maxContextLength: {\n      'claude-3-opus-20240229': 200000,\n      'claude-3-sonnet-20240229': 200000,\n      'claude-3-haiku-20240307': 200000,\n      'claude-2.1': 200000,\n      'claude-2.0': 100000,\n      'claude-instant-1.2': 100000,\n    } as Record<LLMModel, number>,\n    maxOutputTokens: {\n      'claude-3-opus-20240229': 4096,\n      'claude-3-sonnet-20240229': 4096,\n      'claude-3-haiku-20240307': 4096,\n      'claude-2.1': 4096,\n      'claude-2.0': 4096,\n      'claude-instant-1.2': 4096,\n    } as Record<LLMModel, number>,\n    supportsStreaming: true,\n    supportsFunctionCalling: false, // Claude doesn't have native function calling yet\n    supportsSystemMessages: true,\n    supportsVision: true, // Claude 3 models support vision\n    supportsAudio: false,\n    supportsTools: false,\n    supportsFineTuning: false,\n    supportsEmbeddings: false,\n    supportsLogprobs: false,\n    supportsBatching: false,\n    pricing: {\n      'claude-3-opus-20240229': {\n        promptCostPer1k: 0.015,\n        completionCostPer1k: 0.075,\n        currency: 'USD',\n      },\n      'claude-3-sonnet-20240229': {\n        promptCostPer1k: 0.003,\n        completionCostPer1k: 0.015,\n        currency: 'USD',\n      },\n      'claude-3-haiku-20240307': {\n        promptCostPer1k: 0.00025,\n        completionCostPer1k: 0.00125,\n        currency: 'USD',\n      },\n      'claude-2.1': {\n        promptCostPer1k: 0.008,\n        completionCostPer1k: 0.024,\n        currency: 'USD',\n      },\n      'claude-2.0': {\n        promptCostPer1k: 0.008,\n        completionCostPer1k: 0.024,\n        currency: 'USD',\n      },\n      'claude-instant-1.2': {\n        promptCostPer1k: 0.0008,\n        completionCostPer1k: 0.0024,\n        currency: 'USD',\n      },\n    },\n  };\n\n  private claudeClient!: ClaudeAPIClient;\n\n  protected async doInitialize(): Promise<void> {\n    // Create Claude client with our config\n    this.claudeClient = new ClaudeAPIClient(\n      this.logger,\n      { get: () => this.config } as any, // Mock config manager\n      {\n        apiKey: this.config.apiKey!,\n        model: this.mapToAnthropicModel(this.config.model),\n        temperature: this.config.temperature,\n        maxTokens: this.config.maxTokens,\n        topP: this.config.topP,\n        topK: this.config.topK,\n        timeout: this.config.timeout,\n        retryAttempts: this.config.retryAttempts,\n        retryDelay: this.config.retryDelay,\n      }\n    );\n  }\n\n  protected async doComplete(request: LLMRequest): Promise<LLMResponse> {\n    // Convert request to Claude format\n    const claudeMessages = request.messages.map((msg) => ({\n      role: msg.role === 'system' ? 'user' : msg.role as 'user' | 'assistant',\n      content: msg.role === 'system' ? `System: ${msg.content}` : msg.content,\n    }));\n\n    // Extract system message if present\n    const systemMessage = request.messages.find((m) => m.role === 'system');\n    \n    // Call Claude API\n    const response = await this.claudeClient.sendMessage(claudeMessages, {\n      model: request.model ? this.mapToAnthropicModel(request.model) : undefined,\n      temperature: request.temperature,\n      maxTokens: request.maxTokens,\n      systemPrompt: systemMessage?.content,\n      stream: false,\n    }) as any; // ClaudeResponse type\n\n    // Calculate cost\n    const pricing = this.capabilities.pricing![response.model];\n    const promptCost = (response.usage.input_tokens / 1000) * pricing.promptCostPer1k;\n    const completionCost = (response.usage.output_tokens / 1000) * pricing.completionCostPer1k;\n\n    // Convert to unified response format\n    return {\n      id: response.id,\n      model: this.mapFromAnthropicModel(response.model),\n      provider: 'anthropic',\n      content: response.content[0].text,\n      usage: {\n        promptTokens: response.usage.input_tokens,\n        completionTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n      },\n      cost: {\n        promptCost,\n        completionCost,\n        totalCost: promptCost + completionCost,\n        currency: 'USD',\n      },\n      finishReason: response.stop_reason === 'end_turn' ? 'stop' : 'length',\n    };\n  }\n\n  protected async *doStreamComplete(request: LLMRequest): AsyncIterable<LLMStreamEvent> {\n    // Convert request to Claude format\n    const claudeMessages = request.messages.map((msg) => ({\n      role: msg.role === 'system' ? 'user' : msg.role as 'user' | 'assistant',\n      content: msg.role === 'system' ? `System: ${msg.content}` : msg.content,\n    }));\n\n    const systemMessage = request.messages.find((m) => m.role === 'system');\n    \n    // Get stream from Claude API\n    const stream = await this.claudeClient.sendMessage(claudeMessages, {\n      model: request.model ? this.mapToAnthropicModel(request.model) : undefined,\n      temperature: request.temperature,\n      maxTokens: request.maxTokens,\n      systemPrompt: systemMessage?.content,\n      stream: true,\n    }) as AsyncIterable<any>; // ClaudeStreamEvent type\n\n    let accumulatedContent = '';\n    let totalTokens = 0;\n\n    // Process stream events\n    for await (const event of stream) {\n      if (event.type === 'content_block_delta' && event.delta?.text) {\n        accumulatedContent += event.delta.text;\n        yield {\n          type: 'content',\n          delta: {\n            content: event.delta.text,\n          },\n        };\n      } else if (event.type === 'message_delta' && event.usage) {\n        totalTokens = event.usage.output_tokens;\n      } else if (event.type === 'message_stop') {\n        // Calculate final cost\n        const model = request.model || this.config.model;\n        const pricing = this.capabilities.pricing![model];\n        \n        // Estimate prompt tokens (rough approximation)\n        const promptTokens = this.estimateTokens(JSON.stringify(request.messages));\n        const completionTokens = totalTokens;\n        \n        const promptCost = (promptTokens / 1000) * pricing.promptCostPer1k;\n        const completionCost = (completionTokens / 1000) * pricing.completionCostPer1k;\n\n        yield {\n          type: 'done',\n          usage: {\n            promptTokens,\n            completionTokens,\n            totalTokens: promptTokens + completionTokens,\n          },\n          cost: {\n            promptCost,\n            completionCost,\n            totalCost: promptCost + completionCost,\n            currency: 'USD',\n          },\n        };\n      }\n    }\n  }\n\n  async listModels(): Promise<LLMModel[]> {\n    return this.capabilities.supportedModels;\n  }\n\n  async getModelInfo(model: LLMModel): Promise<ModelInfo> {\n    const anthropicModel = this.mapToAnthropicModel(model);\n    const info = this.claudeClient.getModelInfo(anthropicModel);\n    \n    return {\n      model,\n      name: info.name,\n      description: info.description,\n      contextLength: info.contextWindow,\n      maxOutputTokens: this.capabilities.maxOutputTokens[model] || 4096,\n      supportedFeatures: [\n        'chat',\n        'completion',\n        ...(model.startsWith('claude-3') ? ['vision'] : []),\n      ],\n      pricing: this.capabilities.pricing![model],\n    };\n  }\n\n  protected async doHealthCheck(): Promise<HealthCheckResult> {\n    try {\n      // Use a minimal request to check API availability\n      await this.claudeClient.complete('Hi', {\n        maxTokens: 1,\n      });\n      \n      return {\n        healthy: true,\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Map unified model to Anthropic model\n   */\n  private mapToAnthropicModel(model: LLMModel): AnthropicModel {\n    // Direct mapping since we use the same model names\n    return model as AnthropicModel;\n  }\n\n  /**\n   * Map Anthropic model to unified model\n   */\n  private mapFromAnthropicModel(model: AnthropicModel): LLMModel {\n    return model as LLMModel;\n  }\n\n  destroy(): void {\n    super.destroy();\n    this.claudeClient?.destroy();\n  }\n}"],"names":["BaseProvider","ClaudeAPIClient","AnthropicProvider","name","capabilities","supportedModels","maxContextLength","maxOutputTokens","supportsStreaming","supportsFunctionCalling","supportsSystemMessages","supportsVision","supportsAudio","supportsTools","supportsFineTuning","supportsEmbeddings","supportsLogprobs","supportsBatching","pricing","promptCostPer1k","completionCostPer1k","currency","claudeClient","doInitialize","logger","get","config","apiKey","model","mapToAnthropicModel","temperature","maxTokens","topP","topK","timeout","retryAttempts","retryDelay","doComplete","request","claudeMessages","messages","map","msg","role","content","systemMessage","find","m","response","sendMessage","undefined","systemPrompt","stream","promptCost","usage","input_tokens","completionCost","output_tokens","id","mapFromAnthropicModel","provider","text","promptTokens","completionTokens","totalTokens","cost","totalCost","finishReason","stop_reason","doStreamComplete","accumulatedContent","event","type","delta","estimateTokens","JSON","stringify","listModels","getModelInfo","anthropicModel","info","description","contextLength","contextWindow","supportedFeatures","startsWith","doHealthCheck","complete","healthy","timestamp","Date","error","Error","message","destroy"],"mappings":"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"}