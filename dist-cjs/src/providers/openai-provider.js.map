{"version":3,"sources":["../../../src/providers/openai-provider.ts"],"sourcesContent":["/**\n * OpenAI Provider Implementation\n * Supports GPT-4, GPT-3.5, and other OpenAI models\n */\n\nimport { BaseProvider } from './base-provider.js';\nimport {\n  LLMProvider,\n  LLMModel,\n  LLMRequest,\n  LLMResponse,\n  LLMStreamEvent,\n  ModelInfo,\n  ProviderCapabilities,\n  HealthCheckResult,\n  LLMProviderError,\n  RateLimitError,\n  AuthenticationError,\n  ModelNotFoundError,\n} from './types.js';\n\ninterface OpenAIRequest {\n  model: string;\n  messages: Array<{\n    role: 'system' | 'user' | 'assistant' | 'function';\n    content: string;\n    name?: string;\n    function_call?: {\n      name: string;\n      arguments: string;\n    };\n  }>;\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string[];\n  stream?: boolean;\n  functions?: Array<{\n    name: string;\n    description: string;\n    parameters: any;\n  }>;\n  function_call?: 'auto' | 'none' | { name: string };\n}\n\ninterface OpenAIResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string | null;\n      function_call?: {\n        name: string;\n        arguments: string;\n      };\n    };\n    finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter';\n  }>;\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\ninterface OpenAIStreamChunk {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    delta: {\n      role?: string;\n      content?: string;\n      function_call?: {\n        name?: string;\n        arguments?: string;\n      };\n    };\n    finish_reason?: string;\n  }>;\n}\n\nexport class OpenAIProvider extends BaseProvider {\n  readonly name: LLMProvider = 'openai';\n  readonly capabilities: ProviderCapabilities = {\n    supportedModels: [\n      'gpt-4-turbo-preview',\n      'gpt-4',\n      'gpt-4-32k',\n      'gpt-3.5-turbo',\n      'gpt-3.5-turbo-16k',\n    ],\n    maxContextLength: {\n      'gpt-4-turbo-preview': 128000,\n      'gpt-4': 8192,\n      'gpt-4-32k': 32768,\n      'gpt-3.5-turbo': 4096,\n      'gpt-3.5-turbo-16k': 16384,\n    } as Record<LLMModel, number>,\n    maxOutputTokens: {\n      'gpt-4-turbo-preview': 4096,\n      'gpt-4': 4096,\n      'gpt-4-32k': 4096,\n      'gpt-3.5-turbo': 4096,\n      'gpt-3.5-turbo-16k': 4096,\n    } as Record<LLMModel, number>,\n    supportsStreaming: true,\n    supportsFunctionCalling: true,\n    supportsSystemMessages: true,\n    supportsVision: true, // GPT-4 with vision\n    supportsAudio: false,\n    supportsTools: true,\n    supportsFineTuning: true,\n    supportsEmbeddings: true,\n    supportsLogprobs: true,\n    supportsBatching: true,\n    rateLimit: {\n      requestsPerMinute: 3500,\n      tokensPerMinute: 90000,\n      concurrentRequests: 100,\n    },\n    pricing: {\n      'gpt-4-turbo-preview': {\n        promptCostPer1k: 0.01,\n        completionCostPer1k: 0.03,\n        currency: 'USD',\n      },\n      'gpt-4': {\n        promptCostPer1k: 0.03,\n        completionCostPer1k: 0.06,\n        currency: 'USD',\n      },\n      'gpt-4-32k': {\n        promptCostPer1k: 0.06,\n        completionCostPer1k: 0.12,\n        currency: 'USD',\n      },\n      'gpt-3.5-turbo': {\n        promptCostPer1k: 0.0005,\n        completionCostPer1k: 0.0015,\n        currency: 'USD',\n      },\n      'gpt-3.5-turbo-16k': {\n        promptCostPer1k: 0.003,\n        completionCostPer1k: 0.004,\n        currency: 'USD',\n      },\n    },\n  };\n\n  private baseUrl: string;\n  private headers: Record<string, string>;\n\n  protected async doInitialize(): Promise<void> {\n    if (!this.config.apiKey) {\n      throw new AuthenticationError('OpenAI API key is required', 'openai');\n    }\n\n    this.baseUrl = this.config.apiUrl || 'https://api.openai.com/v1';\n    this.headers = {\n      'Authorization': `Bearer ${this.config.apiKey}`,\n      'Content-Type': 'application/json',\n    };\n\n    // Add organization header if provided\n    if (this.config.providerOptions?.organization) {\n      this.headers['OpenAI-Organization'] = this.config.providerOptions.organization;\n    }\n  }\n\n  protected async doComplete(request: LLMRequest): Promise<LLMResponse> {\n    const openAIRequest: OpenAIRequest = {\n      model: this.mapToOpenAIModel(request.model || this.config.model),\n      messages: request.messages.map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.name && { name: msg.name }),\n        ...(msg.functionCall && { function_call: msg.functionCall }),\n      })),\n      temperature: request.temperature ?? this.config.temperature,\n      max_tokens: request.maxTokens ?? this.config.maxTokens,\n      top_p: request.topP ?? this.config.topP,\n      frequency_penalty: request.frequencyPenalty ?? this.config.frequencyPenalty,\n      presence_penalty: request.presencePenalty ?? this.config.presencePenalty,\n      stop: request.stopSequences ?? this.config.stopSequences,\n      stream: false,\n    };\n\n    // Add function calling if present\n    if (request.functions) {\n      openAIRequest.functions = request.functions;\n      openAIRequest.function_call = request.functionCall;\n    }\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), this.config.timeout || 60000);\n\n    try {\n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(openAIRequest),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        await this.handleErrorResponse(response);\n      }\n\n      const data: OpenAIResponse = await response.json();\n      const choice = data.choices[0];\n\n      // Calculate cost\n      const model = request.model || this.config.model;\n      const pricing = this.capabilities.pricing![model];\n      const promptCost = (data.usage.prompt_tokens / 1000) * pricing.promptCostPer1k;\n      const completionCost = (data.usage.completion_tokens / 1000) * pricing.completionCostPer1k;\n\n      return {\n        id: data.id,\n        model: this.mapFromOpenAIModel(data.model),\n        provider: 'openai',\n        content: choice.message.content || '',\n        functionCall: choice.message.function_call,\n        usage: {\n          promptTokens: data.usage.prompt_tokens,\n          completionTokens: data.usage.completion_tokens,\n          totalTokens: data.usage.total_tokens,\n        },\n        cost: {\n          promptCost,\n          completionCost,\n          totalCost: promptCost + completionCost,\n          currency: 'USD',\n        },\n        finishReason: choice.finish_reason,\n      };\n    } catch (error) {\n      clearTimeout(timeout);\n      throw this.transformError(error);\n    }\n  }\n\n  protected async *doStreamComplete(request: LLMRequest): AsyncIterable<LLMStreamEvent> {\n    const openAIRequest: OpenAIRequest = {\n      model: this.mapToOpenAIModel(request.model || this.config.model),\n      messages: request.messages.map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.name && { name: msg.name }),\n        ...(msg.functionCall && { function_call: msg.functionCall }),\n      })),\n      temperature: request.temperature ?? this.config.temperature,\n      max_tokens: request.maxTokens ?? this.config.maxTokens,\n      top_p: request.topP ?? this.config.topP,\n      frequency_penalty: request.frequencyPenalty ?? this.config.frequencyPenalty,\n      presence_penalty: request.presencePenalty ?? this.config.presencePenalty,\n      stop: request.stopSequences ?? this.config.stopSequences,\n      stream: true,\n    };\n\n    if (request.functions) {\n      openAIRequest.functions = request.functions;\n      openAIRequest.function_call = request.functionCall;\n    }\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), (this.config.timeout || 60000) * 2);\n\n    try {\n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(openAIRequest),\n        signal: controller.signal,\n      });\n\n      if (!response.ok) {\n        await this.handleErrorResponse(response);\n      }\n\n      const reader = response.body!.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let totalPromptTokens = 0;\n      let totalCompletionTokens = 0;\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') continue;\n\n            try {\n              const chunk: OpenAIStreamChunk = JSON.parse(data);\n              const delta = chunk.choices[0].delta;\n\n              if (delta.content) {\n                yield {\n                  type: 'content',\n                  delta: { content: delta.content },\n                };\n              }\n\n              if (delta.function_call) {\n                yield {\n                  type: 'function_call',\n                  delta: { functionCall: delta.function_call },\n                };\n              }\n\n              if (chunk.choices[0].finish_reason) {\n                // Estimate tokens for streaming\n                const promptTokens = this.estimateTokens(JSON.stringify(request.messages));\n                const completionTokens = Math.max(totalCompletionTokens, 100); // Minimum estimate\n\n                const model = request.model || this.config.model;\n                const pricing = this.capabilities.pricing![model];\n                const promptCost = (promptTokens / 1000) * pricing.promptCostPer1k;\n                const completionCost = (completionTokens / 1000) * pricing.completionCostPer1k;\n\n                yield {\n                  type: 'done',\n                  usage: {\n                    promptTokens,\n                    completionTokens,\n                    totalTokens: promptTokens + completionTokens,\n                  },\n                  cost: {\n                    promptCost,\n                    completionCost,\n                    totalCost: promptCost + completionCost,\n                    currency: 'USD',\n                  },\n                };\n              }\n            } catch (e) {\n              this.logger.warn('Failed to parse OpenAI stream chunk', { data, error: e });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      clearTimeout(timeout);\n      throw this.transformError(error);\n    } finally {\n      clearTimeout(timeout);\n    }\n  }\n\n  async listModels(): Promise<LLMModel[]> {\n    return this.capabilities.supportedModels;\n  }\n\n  async getModelInfo(model: LLMModel): Promise<ModelInfo> {\n    return {\n      model,\n      name: model,\n      description: this.getModelDescription(model),\n      contextLength: this.capabilities.maxContextLength[model] || 4096,\n      maxOutputTokens: this.capabilities.maxOutputTokens[model] || 4096,\n      supportedFeatures: [\n        'chat',\n        'completion',\n        'function_calling',\n        ...(model.includes('gpt-4') ? ['vision'] : []),\n      ],\n      pricing: this.capabilities.pricing![model],\n    };\n  }\n\n  protected async doHealthCheck(): Promise<HealthCheckResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/models`, {\n        headers: this.headers,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n\n      return {\n        healthy: true,\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  private mapToOpenAIModel(model: LLMModel): string {\n    // Map our model names to OpenAI model names if needed\n    const modelMap: Record<string, string> = {\n      'gpt-4-turbo-preview': 'gpt-4-turbo-preview',\n      'gpt-4': 'gpt-4',\n      'gpt-4-32k': 'gpt-4-32k',\n      'gpt-3.5-turbo': 'gpt-3.5-turbo',\n      'gpt-3.5-turbo-16k': 'gpt-3.5-turbo-16k',\n    };\n    return modelMap[model] || model;\n  }\n\n  private mapFromOpenAIModel(model: string): LLMModel {\n    // Ensure the model is in our supported list\n    return this.capabilities.supportedModels.find((m) => m === model) || 'gpt-3.5-turbo';\n  }\n\n  private getModelDescription(model: LLMModel): string {\n    const descriptions: Record<string, string> = {\n      'gpt-4-turbo-preview': 'Latest GPT-4 Turbo model with improved performance',\n      'gpt-4': 'Most capable GPT-4 model for complex tasks',\n      'gpt-4-32k': 'GPT-4 with extended 32k context window',\n      'gpt-3.5-turbo': 'Fast and efficient model for most tasks',\n      'gpt-3.5-turbo-16k': 'GPT-3.5 Turbo with extended context',\n    };\n    return descriptions[model] || 'OpenAI language model';\n  }\n\n  private async handleErrorResponse(response: Response): Promise<void> {\n    const errorText = await response.text();\n    let errorData: any;\n\n    try {\n      errorData = JSON.parse(errorText);\n    } catch {\n      errorData = { error: { message: errorText } };\n    }\n\n    const message = errorData.error?.message || 'Unknown error';\n\n    switch (response.status) {\n      case 401:\n        throw new AuthenticationError(message, 'openai', errorData);\n      case 429:\n        const retryAfter = response.headers.get('retry-after');\n        throw new RateLimitError(\n          message,\n          'openai',\n          retryAfter ? parseInt(retryAfter) : undefined,\n          errorData\n        );\n      case 404:\n        throw new ModelNotFoundError(this.config.model, 'openai', errorData);\n      default:\n        throw new LLMProviderError(\n          message,\n          `OPENAI_${response.status}`,\n          'openai',\n          response.status,\n          response.status >= 500,\n          errorData\n        );\n    }\n  }\n}"],"names":["BaseProvider","LLMProviderError","RateLimitError","AuthenticationError","ModelNotFoundError","OpenAIProvider","name","capabilities","supportedModels","maxContextLength","maxOutputTokens","supportsStreaming","supportsFunctionCalling","supportsSystemMessages","supportsVision","supportsAudio","supportsTools","supportsFineTuning","supportsEmbeddings","supportsLogprobs","supportsBatching","rateLimit","requestsPerMinute","tokensPerMinute","concurrentRequests","pricing","promptCostPer1k","completionCostPer1k","currency","baseUrl","headers","doInitialize","config","apiKey","apiUrl","providerOptions","organization","doComplete","request","openAIRequest","model","mapToOpenAIModel","messages","map","msg","role","content","functionCall","function_call","temperature","max_tokens","maxTokens","top_p","topP","frequency_penalty","frequencyPenalty","presence_penalty","presencePenalty","stop","stopSequences","stream","functions","controller","AbortController","timeout","setTimeout","abort","response","fetch","method","body","JSON","stringify","signal","clearTimeout","ok","handleErrorResponse","data","json","choice","choices","promptCost","usage","prompt_tokens","completionCost","completion_tokens","id","mapFromOpenAIModel","provider","message","promptTokens","completionTokens","totalTokens","total_tokens","cost","totalCost","finishReason","finish_reason","error","transformError","doStreamComplete","reader","getReader","decoder","TextDecoder","buffer","totalPromptTokens","totalCompletionTokens","done","value","read","decode","lines","split","pop","line","startsWith","slice","chunk","parse","delta","type","estimateTokens","Math","max","e","logger","warn","listModels","getModelInfo","description","getModelDescription","contextLength","supportedFeatures","includes","doHealthCheck","Error","status","healthy","timestamp","Date","modelMap","find","m","descriptions","errorText","text","errorData","retryAfter","get","parseInt","undefined"],"mappings":"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"}