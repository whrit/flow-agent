{"version":3,"sources":["../../../src/core/InitController.ts"],"sourcesContent":["/**\n * InitController - Main orchestration and mode selection\n * Handles the core initialization flow and coordinates with all other components\n */\n\nimport { ConfigManager } from './ConfigManager.js';\nimport { DatabaseManager } from './DatabaseManager.js';\nimport { ModeFactory } from './ModeFactory.js';\nimport { TopologyManager } from './TopologyManager.js';\nimport { AgentRegistry } from './AgentRegistry.js';\nimport { MetricsCollector } from './MetricsCollector.js';\nimport { IInitMode, InitConfig, InitResult, InitMode } from '../types/interfaces.js';\n\nexport interface InitControllerConfig {\n  mode?: InitMode;\n  topology?: 'mesh' | 'hierarchical' | 'ring' | 'star';\n  maxAgents?: number;\n  strategy?: 'balanced' | 'specialized' | 'adaptive';\n  database?: 'sqlite' | 'json';\n  configPath?: string;\n  debug?: boolean;\n}\n\nexport class InitController {\n  private configManager: ConfigManager;\n  private databaseManager: DatabaseManager;\n  private modeFactory: ModeFactory;\n  private topologyManager: TopologyManager;\n  private agentRegistry: AgentRegistry;\n  private metricsCollector: MetricsCollector;\n  private initialized: boolean = false;\n\n  constructor(private config: InitControllerConfig = {}) {\n    this.configManager = new ConfigManager(config.configPath);\n    this.databaseManager = new DatabaseManager(config.database || 'sqlite');\n    this.modeFactory = new ModeFactory();\n    this.topologyManager = new TopologyManager(this.databaseManager);\n    this.agentRegistry = new AgentRegistry(this.databaseManager);\n    this.metricsCollector = new MetricsCollector(this.databaseManager);\n  }\n\n  /**\n   * Main initialization method - orchestrates the entire init process\n   */\n  async initialize(): Promise<InitResult> {\n    const startTime = Date.now();\n\n    try {\n      // Validate and load configuration\n      const validationResult = await this.configManager.validate();\n      if (!validationResult.valid) {\n        throw new Error(`Configuration validation failed: ${validationResult.errors.join(', ')}`);\n      }\n\n      // Initialize database\n      await this.databaseManager.initialize();\n\n      // Set up topology\n      await this.topologyManager.configure(this.config.topology || 'mesh');\n\n      // Initialize agent registry\n      await this.agentRegistry.initialize();\n\n      // Create and execute the specific initialization mode\n      const mode = this.modeFactory.createMode(this.config.mode || 'standard');\n      const initConfig: InitConfig = {\n        ...this.config,\n        configManager: this.configManager,\n        databaseManager: this.databaseManager,\n        topologyManager: this.topologyManager,\n        agentRegistry: this.agentRegistry,\n        metricsCollector: this.metricsCollector\n      };\n\n      const result = await mode.initialize(initConfig);\n\n      // Collect initialization metrics\n      const endTime = Date.now();\n      await this.metricsCollector.recordInitialization({\n        mode: this.config.mode || 'standard',\n        duration: endTime - startTime,\n        success: true,\n        components: result.components || [],\n        timestamp: new Date().toISOString()\n      });\n\n      this.initialized = true;\n\n      return {\n        success: true,\n        mode: this.config.mode || 'standard',\n        components: result.components,\n        topology: this.config.topology || 'mesh',\n        duration: endTime - startTime,\n        message: result.message || 'Initialization completed successfully',\n        metadata: {\n          configValid: true,\n          databaseInitialized: true,\n          topologyConfigured: true,\n          agentRegistryReady: true,\n          ...result.metadata\n        }\n      };\n\n    } catch (error) {\n      const endTime = Date.now();\n      await this.metricsCollector.recordInitialization({\n        mode: this.config.mode || 'standard',\n        duration: endTime - startTime,\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n\n      return {\n        success: false,\n        mode: this.config.mode || 'standard',\n        duration: endTime - startTime,\n        error: error instanceof Error ? error.message : String(error),\n        message: 'Initialization failed'\n      };\n    }\n  }\n\n  /**\n   * Get current initialization status\n   */\n  getStatus(): { initialized: boolean; mode?: InitMode; components?: string[] } {\n    return {\n      initialized: this.initialized,\n      mode: this.config.mode,\n      components: this.initialized ? ['ConfigManager', 'DatabaseManager', 'TopologyManager', 'AgentRegistry'] : []\n    };\n  }\n\n  /**\n   * Shutdown and cleanup resources\n   */\n  async shutdown(): Promise<void> {\n    if (this.databaseManager) {\n      await this.databaseManager.close();\n    }\n    this.initialized = false;\n  }\n\n  /**\n   * Validate the current configuration\n   */\n  async validateConfiguration(): Promise<{ valid: boolean; errors: string[] }> {\n    return await this.configManager.validate();\n  }\n\n  /**\n   * Get available initialization modes\n   */\n  getAvailableModes(): InitMode[] {\n    return this.modeFactory.getAvailableModes();\n  }\n\n  /**\n   * Get topology information\n   */\n  async getTopologyInfo(): Promise<any> {\n    return await this.topologyManager.getTopologyInfo();\n  }\n\n  /**\n   * Get registered agents\n   */\n  async getAgents(): Promise<any[]> {\n    return await this.agentRegistry.getActiveAgents();\n  }\n\n  /**\n   * Get initialization metrics\n   */\n  async getMetrics(): Promise<any> {\n    return await this.metricsCollector.getInitializationMetrics();\n  }\n}"],"names":["ConfigManager","DatabaseManager","ModeFactory","TopologyManager","AgentRegistry","MetricsCollector","InitController","configManager","databaseManager","modeFactory","topologyManager","agentRegistry","metricsCollector","initialized","config","configPath","database","initialize","startTime","Date","now","validationResult","validate","valid","Error","errors","join","configure","topology","mode","createMode","initConfig","result","endTime","recordInitialization","duration","success","components","timestamp","toISOString","message","metadata","configValid","databaseInitialized","topologyConfigured","agentRegistryReady","error","String","getStatus","shutdown","close","validateConfiguration","getAvailableModes","getTopologyInfo","getAgents","getActiveAgents","getMetrics","getInitializationMetrics"],"mappings":"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"}