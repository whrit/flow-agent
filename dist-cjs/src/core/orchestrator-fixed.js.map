{"version":3,"sources":["../../../src/core/orchestrator-fixed.ts"],"sourcesContent":["/**\n * Fixed orchestrator implementation for Claude-Flow\n */\n\nimport type { EventBus } from './event-bus.js';\nimport type { Logger } from './logger.js';\nimport type { ConfigManager } from './config.js';\nimport { JsonPersistenceManager } from './json-persistence.js';\n\nexport interface AgentInfo {\n  id: string;\n  type: string;\n  name: string;\n  status: string;\n  assignedTasks: string[];\n  createdAt: number;\n}\n\nexport interface TaskInfo {\n  id: string;\n  type: string;\n  description: string;\n  status: string;\n  progress: number;\n  assignedAgent?: string;\n  error?: string;\n}\n\nexport interface SessionInfo {\n  id: string;\n  type: string;\n  agentId: string;\n}\n\nexport interface WorkflowStatus {\n  status: string;\n  progress: number;\n  error?: string;\n}\n\nexport interface HealthCheckResult {\n  healthy: boolean;\n  memory: boolean;\n  terminalPool: boolean;\n  mcp: boolean;\n}\n\nexport class Orchestrator {\n  private agents: Map<string, AgentInfo> = new Map();\n  private tasks: Map<string, TaskInfo> = new Map();\n  private sessions: Map<string, SessionInfo> = new Map();\n  private persistence: JsonPersistenceManager;\n  private workflows: Map<string, WorkflowStatus> = new Map();\n  private started = false;\n\n  constructor(\n    private config: ConfigManager,\n    private eventBus: EventBus,\n    private logger: Logger,\n  ) {\n    this.persistence = new JsonPersistenceManager();\n  }\n\n  async start(): Promise<void> {\n    if (this.started) {\n      throw new Error('Orchestrator already started');\n    }\n\n    this.logger.info('Starting orchestrator...');\n\n    // Initialize persistence\n    await this.persistence.initialize();\n\n    // Load existing agents and tasks from database\n    await this.loadFromPersistence();\n\n    // Initialize components\n    this.eventBus.emit('system:ready', { timestamp: new Date() });\n\n    this.started = true;\n    this.logger.info('Orchestrator started successfully');\n  }\n\n  private async loadFromPersistence(): Promise<void> {\n    // Load agents\n    const persistedAgents = await this.persistence.getActiveAgents();\n    for (const agent of persistedAgents) {\n      this.agents.set(agent.id, {\n        id: agent.id,\n        type: agent.type,\n        name: agent.name,\n        status: agent.status,\n        assignedTasks: [],\n        createdAt: agent.createdAt,\n      });\n    }\n\n    // Load tasks\n    const persistedTasks = await this.persistence.getActiveTasks();\n    for (const task of persistedTasks) {\n      this.tasks.set(task.id, {\n        id: task.id,\n        type: task.type,\n        description: task.description,\n        status: task.status,\n        progress: task.progress,\n        assignedAgent: task.assignedAgent,\n        error: task.error,\n      });\n    }\n\n    this.logger.info(\n      `Loaded ${this.agents.size} agents and ${this.tasks.size} tasks from persistence`,\n    );\n  }\n\n  async stop(): Promise<void> {\n    if (!this.started) {\n      return;\n    }\n\n    this.logger.info('Stopping orchestrator...');\n\n    // Clean up resources\n    this.agents.clear();\n    this.tasks.clear();\n    this.sessions.clear();\n    this.workflows.clear();\n\n    // Close persistence\n    this.persistence.close();\n\n    this.started = false;\n    this.logger.info('Orchestrator stopped');\n  }\n\n  async spawnAgent(profile: {\n    type: string;\n    name: string;\n    capabilities: string[];\n    systemPrompt: string;\n    maxConcurrentTasks: number;\n    priority: number;\n  }): Promise<string> {\n    const agentId = `agent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const agent: AgentInfo = {\n      id: agentId,\n      type: profile.type,\n      name: profile.name,\n      status: 'active',\n      assignedTasks: [],\n      createdAt: Date.now(),\n    };\n\n    // Save to persistence\n    await this.persistence.saveAgent({\n      id: agentId,\n      type: profile.type,\n      name: profile.name,\n      status: 'active',\n      capabilities: profile.capabilities,\n      systemPrompt: profile.systemPrompt,\n      maxConcurrentTasks: profile.maxConcurrentTasks,\n      priority: profile.priority,\n      createdAt: Date.now(),\n    });\n\n    this.agents.set(agentId, agent);\n    this.eventBus.emit('agent:spawned', { agentId, profile });\n\n    return agentId;\n  }\n\n  async terminateAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    // Update persistence\n    await this.persistence.updateAgentStatus(agentId, 'terminated');\n\n    this.agents.delete(agentId);\n    this.eventBus.emit('agent:terminated', { agentId, reason: 'User requested' });\n  }\n\n  getActiveAgents(): AgentInfo[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgentInfo(agentId: string): AgentInfo | undefined {\n    return this.agents.get(agentId);\n  }\n\n  async submitTask(task: {\n    type: string;\n    description: string;\n    priority: number;\n    dependencies: string[];\n    metadata: Record<string, unknown>;\n  }): Promise<string> {\n    const taskId = `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const taskInfo: TaskInfo = {\n      id: taskId,\n      type: task.type,\n      description: task.description,\n      status: 'pending',\n      progress: 0,\n    };\n\n    // Save to persistence\n    await this.persistence.saveTask({\n      id: taskId,\n      type: task.type,\n      description: task.description,\n      status: 'pending',\n      priority: task.priority,\n      dependencies: task.dependencies,\n      metadata: task.metadata,\n      progress: 0,\n      createdAt: Date.now(),\n    });\n\n    this.tasks.set(taskId, taskInfo);\n    this.eventBus.emit('task:created', { taskId, task });\n\n    // Simulate task assignment\n    const availableAgents = Array.from(this.agents.values()).filter((a) => a.status === 'active');\n    if (availableAgents.length > 0) {\n      const agent = availableAgents[0];\n      taskInfo.assignedAgent = agent.id;\n      taskInfo.status = 'assigned';\n      agent.assignedTasks.push(taskId);\n      this.eventBus.emit('task:assigned', { taskId, agentId: agent.id });\n\n      // Update persistence with assignment\n      await this.persistence.updateTaskStatus(taskId, 'assigned', agent.id);\n    }\n\n    return taskId;\n  }\n\n  getTaskQueue(): TaskInfo[] {\n    return Array.from(this.tasks.values());\n  }\n\n  getTaskStatus(taskId: string): TaskInfo | undefined {\n    return this.tasks.get(taskId);\n  }\n\n  async cancelTask(taskId: string): Promise<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task ${taskId} not found`);\n    }\n\n    task.status = 'cancelled';\n    this.eventBus.emit('task:cancelled', { taskId });\n  }\n\n  getActiveSessions(): SessionInfo[] {\n    return Array.from(this.sessions.values());\n  }\n\n  async terminateSession(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error(`Session ${sessionId} not found`);\n    }\n\n    this.sessions.delete(sessionId);\n    this.eventBus.emit('session:terminated', { sessionId });\n  }\n\n  async executeWorkflow(workflow: any): Promise<string> {\n    const workflowId = `workflow-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const status: WorkflowStatus = {\n      status: 'running',\n      progress: 0,\n    };\n\n    this.workflows.set(workflowId, status);\n    this.eventBus.emit('workflow:started', { workflowId, workflow });\n\n    // Simulate workflow execution\n    setTimeout(() => {\n      status.status = 'completed';\n      status.progress = 100;\n      this.eventBus.emit('workflow:completed', { workflowId });\n    }, 5000);\n\n    return workflowId;\n  }\n\n  async getWorkflowStatus(workflowId: string): Promise<WorkflowStatus> {\n    const status = this.workflows.get(workflowId);\n    if (!status) {\n      throw new Error(`Workflow ${workflowId} not found`);\n    }\n    return status;\n  }\n\n  async healthCheck(): Promise<HealthCheckResult> {\n    return {\n      healthy: this.started,\n      memory: true,\n      terminalPool: true,\n      mcp: this.started,\n    };\n  }\n}\n"],"names":["JsonPersistenceManager","Orchestrator","agents","Map","tasks","sessions","persistence","workflows","started","config","eventBus","logger","start","Error","info","initialize","loadFromPersistence","emit","timestamp","Date","persistedAgents","getActiveAgents","agent","set","id","type","name","status","assignedTasks","createdAt","persistedTasks","getActiveTasks","task","description","progress","assignedAgent","error","size","stop","clear","close","spawnAgent","profile","agentId","now","Math","random","toString","substr","saveAgent","capabilities","systemPrompt","maxConcurrentTasks","priority","terminateAgent","get","updateAgentStatus","delete","reason","Array","from","values","getAgentInfo","submitTask","taskId","taskInfo","saveTask","dependencies","metadata","availableAgents","filter","a","length","push","updateTaskStatus","getTaskQueue","getTaskStatus","cancelTask","getActiveSessions","terminateSession","sessionId","session","executeWorkflow","workflow","workflowId","setTimeout","getWorkflowStatus","healthCheck","healthy","memory","terminalPool","mcp"],"mappings":"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"}