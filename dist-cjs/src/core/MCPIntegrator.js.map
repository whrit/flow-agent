{"version":3,"sources":["../../../src/core/MCPIntegrator.ts"],"sourcesContent":["/**\n * MCPIntegrator - Manages MCP tool coordination\n * Provides integration with external MCP tools and orchestration services\n */\n\nexport interface MCPTool {\n  name: string;\n  server: string;\n  functions: MCPFunction[];\n  status: 'connected' | 'disconnected' | 'error';\n  lastPing?: Date;\n}\n\nexport interface MCPFunction {\n  name: string;\n  description: string;\n  parameters: any;\n  required: string[];\n}\n\nexport interface MCPCommand {\n  tool: string;\n  function: string;\n  parameters: any;\n  timeout?: number;\n}\n\nexport interface MCPResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n  metadata?: {\n    executionTime: number;\n    tool: string;\n    function: string;\n  };\n}\n\nexport class MCPIntegrator {\n  private tools: Map<string, MCPTool> = new Map();\n  private initialized: boolean = false;\n\n  constructor() {\n    this.registerDefaultTools();\n  }\n\n  /**\n   * Initialize MCP integrator and discover available tools\n   */\n  async initialize(): Promise<void> {\n    await this.discoverTools();\n    await this.testConnections();\n    this.initialized = true;\n  }\n\n  /**\n   * Register default MCP tools\n   */\n  private registerDefaultTools(): void {\n    // Claude Flow MCP tools\n    this.tools.set('claude-flow', {\n      name: 'claude-flow',\n      server: 'npx claude-flow@alpha mcp start',\n      functions: [\n        {\n          name: 'swarm_init',\n          description: 'Initialize swarm with topology',\n          parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n          required: ['topology']\n        },\n        {\n          name: 'agent_spawn',\n          description: 'Spawn specialized agents',\n          parameters: { type: 'string', capabilities: 'array', name: 'string' },\n          required: ['type']\n        },\n        {\n          name: 'task_orchestrate',\n          description: 'Orchestrate complex tasks',\n          parameters: { task: 'string', strategy: 'string', priority: 'string' },\n          required: ['task']\n        },\n        {\n          name: 'memory_usage',\n          description: 'Manage coordination memory',\n          parameters: { action: 'string', key: 'string', value: 'string', namespace: 'string' },\n          required: ['action']\n        },\n        {\n          name: 'swarm_status',\n          description: 'Get swarm status and metrics',\n          parameters: { detailed: 'boolean' },\n          required: []\n        }\n      ],\n      status: 'disconnected'\n    });\n\n    // ruv-swarm MCP tools (optional)\n    this.tools.set('ruv-swarm', {\n      name: 'ruv-swarm',\n      server: 'npx ruv-swarm mcp start',\n      functions: [\n        {\n          name: 'swarm_init',\n          description: 'Initialize RUV swarm',\n          parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n          required: ['topology']\n        },\n        {\n          name: 'neural_status',\n          description: 'Get neural network status',\n          parameters: { agentId: 'string' },\n          required: []\n        },\n        {\n          name: 'benchmark_run',\n          description: 'Run performance benchmarks',\n          parameters: { type: 'string', iterations: 'number' },\n          required: []\n        }\n      ],\n      status: 'disconnected'\n    });\n\n    // Flow Nexus MCP tools (optional)\n    this.tools.set('flow-nexus', {\n      name: 'flow-nexus',\n      server: 'npx flow-nexus@latest mcp start',\n      functions: [\n        {\n          name: 'swarm_init',\n          description: 'Initialize Flow Nexus swarm',\n          parameters: { topology: 'string', maxAgents: 'number', strategy: 'string' },\n          required: ['topology']\n        },\n        {\n          name: 'sandbox_create',\n          description: 'Create execution sandbox',\n          parameters: { template: 'string', env_vars: 'object' },\n          required: ['template']\n        },\n        {\n          name: 'neural_train',\n          description: 'Train neural networks',\n          parameters: { config: 'object', tier: 'string' },\n          required: ['config']\n        }\n      ],\n      status: 'disconnected'\n    });\n\n    // Agentic Payments MCP tools (optional)\n    this.tools.set('agentic-payments', {\n      name: 'agentic-payments',\n      server: 'npx agentic-payments@latest mcp',\n      functions: [\n        {\n          name: 'create_active_mandate',\n          description: 'Create Active Mandate for autonomous payment authorization',\n          parameters: { agent: 'string', holder: 'string', amount: 'number', currency: 'string', period: 'string', kind: 'string' },\n          required: ['agent', 'holder', 'amount', 'currency', 'period', 'kind']\n        },\n        {\n          name: 'sign_mandate',\n          description: 'Sign mandate with Ed25519 cryptographic proof',\n          parameters: { mandate: 'object', private_key: 'string' },\n          required: ['mandate', 'private_key']\n        },\n        {\n          name: 'verify_mandate',\n          description: 'Verify mandate signature and execution guards',\n          parameters: { signed_mandate: 'object', check_guards: 'boolean' },\n          required: ['signed_mandate']\n        },\n        {\n          name: 'revoke_mandate',\n          description: 'Revoke mandate by ID',\n          parameters: { mandate_id: 'string', reason: 'string' },\n          required: ['mandate_id']\n        },\n        {\n          name: 'generate_agent_identity',\n          description: 'Generate Ed25519 keypair for agent',\n          parameters: { include_private_key: 'boolean' },\n          required: []\n        },\n        {\n          name: 'create_intent_mandate',\n          description: 'Create intent-based payment mandate',\n          parameters: { merchant_id: 'string', customer_id: 'string', intent: 'string', max_amount: 'number' },\n          required: ['merchant_id', 'customer_id', 'intent', 'max_amount']\n        },\n        {\n          name: 'create_cart_mandate',\n          description: 'Create cart-based payment mandate',\n          parameters: { merchant_id: 'string', customer_id: 'string', items: 'array' },\n          required: ['merchant_id', 'customer_id', 'items']\n        }\n      ],\n      status: 'disconnected'\n    });\n  }\n\n  /**\n   * Discover available MCP tools\n   */\n  private async discoverTools(): Promise<void> {\n    // In a real implementation, this would probe for available MCP servers\n    // For now, we'll simulate the discovery process\n\n    for (const [name, tool] of this.tools) {\n      try {\n        // Simulate tool discovery\n        const isAvailable = await this.checkToolAvailability(name);\n        tool.status = isAvailable ? 'connected' : 'disconnected';\n        tool.lastPing = new Date();\n      } catch (error) {\n        tool.status = 'error';\n        console.warn(`Failed to discover MCP tool ${name}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Check if a specific tool is available\n   */\n  private async checkToolAvailability(toolName: string): Promise<boolean> {\n    // Simulate availability check\n    // In real implementation, this would try to connect to the MCP server\n    return Math.random() > 0.3; // 70% availability simulation\n  }\n\n  /**\n   * Test connections to all tools\n   */\n  private async testConnections(): Promise<void> {\n    for (const [name, tool] of this.tools) {\n      if (tool.status === 'connected') {\n        try {\n          // Simulate connection test\n          await new Promise(resolve => setTimeout(resolve, 100));\n          console.log(`✓ MCP tool ${name} connected successfully`);\n        } catch (error) {\n          tool.status = 'error';\n          console.warn(`✗ MCP tool ${name} connection failed:`, error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Execute MCP command\n   */\n  async executeCommand(command: MCPCommand): Promise<MCPResult> {\n    const startTime = Date.now();\n\n    try {\n      const tool = this.tools.get(command.tool);\n      if (!tool) {\n        return {\n          success: false,\n          error: `Unknown MCP tool: ${command.tool}`,\n          metadata: {\n            executionTime: Date.now() - startTime,\n            tool: command.tool,\n            function: command.function\n          }\n        };\n      }\n\n      if (tool.status !== 'connected') {\n        return {\n          success: false,\n          error: `MCP tool ${command.tool} is not connected (status: ${tool.status})`,\n          metadata: {\n            executionTime: Date.now() - startTime,\n            tool: command.tool,\n            function: command.function\n          }\n        };\n      }\n\n      // Validate function exists\n      const func = tool.functions.find(f => f.name === command.function);\n      if (!func) {\n        return {\n          success: false,\n          error: `Function ${command.function} not found in tool ${command.tool}`,\n          metadata: {\n            executionTime: Date.now() - startTime,\n            tool: command.tool,\n            function: command.function\n          }\n        };\n      }\n\n      // Validate required parameters\n      const missingParams = func.required.filter(param => !(param in command.parameters));\n      if (missingParams.length > 0) {\n        return {\n          success: false,\n          error: `Missing required parameters: ${missingParams.join(', ')}`,\n          metadata: {\n            executionTime: Date.now() - startTime,\n            tool: command.tool,\n            function: command.function\n          }\n        };\n      }\n\n      // Execute the command (simulation)\n      const result = await this.simulateCommandExecution(command);\n\n      return {\n        success: true,\n        data: result,\n        metadata: {\n          executionTime: Date.now() - startTime,\n          tool: command.tool,\n          function: command.function\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        metadata: {\n          executionTime: Date.now() - startTime,\n          tool: command.tool,\n          function: command.function\n        }\n      };\n    }\n  }\n\n  /**\n   * Simulate command execution (replace with real MCP calls in production)\n   */\n  private async simulateCommandExecution(command: MCPCommand): Promise<any> {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 800));\n\n    // Return different results based on function\n    switch (command.function) {\n      case 'swarm_init':\n        return {\n          swarmId: `swarm-${Date.now()}`,\n          topology: command.parameters.topology,\n          maxAgents: command.parameters.maxAgents || 8,\n          status: 'initialized'\n        };\n\n      case 'agent_spawn':\n        return {\n          agentId: `agent-${Date.now()}`,\n          type: command.parameters.type,\n          capabilities: command.parameters.capabilities || [],\n          status: 'spawned'\n        };\n\n      case 'task_orchestrate':\n        return {\n          taskId: `task-${Date.now()}`,\n          task: command.parameters.task,\n          strategy: command.parameters.strategy || 'adaptive',\n          status: 'orchestrating'\n        };\n\n      case 'memory_usage':\n        if (command.parameters.action === 'store') {\n          return { stored: true, key: command.parameters.key };\n        } else if (command.parameters.action === 'retrieve') {\n          return { found: Math.random() > 0.3, value: 'simulated-value' };\n        }\n        return { action: command.parameters.action, success: true };\n\n      case 'swarm_status':\n        return {\n          activeAgents: Math.floor(Math.random() * 8) + 1,\n          topology: 'mesh',\n          health: 'good',\n          metrics: {\n            throughput: Math.random() * 100,\n            latency: Math.random() * 50 + 10\n          }\n        };\n\n      case 'neural_status':\n        return {\n          modelLoaded: true,\n          accuracy: 0.85 + Math.random() * 0.1,\n          trainingProgress: Math.random() * 100\n        };\n\n      case 'benchmark_run':\n        return {\n          benchmarks: [\n            { name: 'cpu', value: Math.random() * 100, unit: 'ms' },\n            { name: 'memory', value: Math.random() * 512, unit: 'MB' },\n            { name: 'network', value: Math.random() * 50, unit: 'ms' }\n          ]\n        };\n\n      default:\n        return { function: command.function, executed: true };\n    }\n  }\n\n  /**\n   * Get available tools\n   */\n  getAvailableTools(): MCPTool[] {\n    return Array.from(this.tools.values());\n  }\n\n  /**\n   * Get connected tools\n   */\n  getConnectedTools(): MCPTool[] {\n    return Array.from(this.tools.values()).filter(tool => tool.status === 'connected');\n  }\n\n  /**\n   * Get tool by name\n   */\n  getTool(name: string): MCPTool | undefined {\n    return this.tools.get(name);\n  }\n\n  /**\n   * Check if a tool is available\n   */\n  isToolAvailable(name: string): boolean {\n    const tool = this.tools.get(name);\n    return tool?.status === 'connected' || false;\n  }\n\n  /**\n   * Get tool functions\n   */\n  getToolFunctions(toolName: string): MCPFunction[] {\n    const tool = this.tools.get(toolName);\n    return tool?.functions || [];\n  }\n\n  /**\n   * Initialize swarm coordination using MCP tools\n   */\n  async initializeSwarmCoordination(config: {\n    topology: string;\n    maxAgents: number;\n    strategy: string;\n  }): Promise<MCPResult> {\n    // Try claude-flow first, then fallback to other tools\n    const toolPriority = ['claude-flow', 'ruv-swarm', 'flow-nexus'];\n\n    for (const toolName of toolPriority) {\n      if (this.isToolAvailable(toolName)) {\n        return await this.executeCommand({\n          tool: toolName,\n          function: 'swarm_init',\n          parameters: config\n        });\n      }\n    }\n\n    return {\n      success: false,\n      error: 'No MCP tools available for swarm initialization',\n      metadata: {\n        executionTime: 0,\n        tool: 'none',\n        function: 'swarm_init'\n      }\n    };\n  }\n\n  /**\n   * Coordinate memory across swarm using MCP tools\n   */\n  async coordinateMemory(action: string, key: string, value?: string, namespace?: string): Promise<MCPResult> {\n    const command: MCPCommand = {\n      tool: 'claude-flow',\n      function: 'memory_usage',\n      parameters: { action, key, value, namespace: namespace || 'coordination' }\n    };\n\n    return await this.executeCommand(command);\n  }\n\n  /**\n   * Spawn agents using MCP tools\n   */\n  async spawnAgent(type: string, capabilities?: string[], name?: string): Promise<MCPResult> {\n    const command: MCPCommand = {\n      tool: 'claude-flow',\n      function: 'agent_spawn',\n      parameters: { type, capabilities, name }\n    };\n\n    return await this.executeCommand(command);\n  }\n\n  /**\n   * Orchestrate tasks using MCP tools\n   */\n  async orchestrateTask(task: string, strategy?: string, priority?: string): Promise<MCPResult> {\n    const command: MCPCommand = {\n      tool: 'claude-flow',\n      function: 'task_orchestrate',\n      parameters: { task, strategy, priority }\n    };\n\n    return await this.executeCommand(command);\n  }\n\n  /**\n   * Get swarm status using MCP tools\n   */\n  async getSwarmStatus(detailed: boolean = false): Promise<MCPResult> {\n    const command: MCPCommand = {\n      tool: 'claude-flow',\n      function: 'swarm_status',\n      parameters: { detailed }\n    };\n\n    return await this.executeCommand(command);\n  }\n\n  /**\n   * Refresh tool connections\n   */\n  async refreshConnections(): Promise<void> {\n    await this.discoverTools();\n    await this.testConnections();\n  }\n\n  /**\n   * Register a custom tool\n   */\n  registerTool(tool: MCPTool): void {\n    this.tools.set(tool.name, tool);\n  }\n\n  /**\n   * Unregister a tool\n   */\n  unregisterTool(name: string): boolean {\n    return this.tools.delete(name);\n  }\n\n  /**\n   * Get integration status\n   */\n  getIntegrationStatus(): {\n    initialized: boolean;\n    totalTools: number;\n    connectedTools: number;\n    availableFunctions: number;\n  } {\n    const tools = Array.from(this.tools.values());\n    const connectedTools = tools.filter(tool => tool.status === 'connected');\n    const availableFunctions = connectedTools.reduce((sum, tool) => sum + tool.functions.length, 0);\n\n    return {\n      initialized: this.initialized,\n      totalTools: tools.length,\n      connectedTools: connectedTools.length,\n      availableFunctions\n    };\n  }\n}"],"names":["MCPIntegrator","tools","Map","initialized","registerDefaultTools","initialize","discoverTools","testConnections","set","name","server","functions","description","parameters","topology","maxAgents","strategy","required","type","capabilities","task","priority","action","key","value","namespace","detailed","status","agentId","iterations","template","env_vars","config","tier","agent","holder","amount","currency","period","kind","mandate","private_key","signed_mandate","check_guards","mandate_id","reason","include_private_key","merchant_id","customer_id","intent","max_amount","items","tool","isAvailable","checkToolAvailability","lastPing","Date","error","console","warn","toolName","Math","random","Promise","resolve","setTimeout","log","executeCommand","command","startTime","now","get","success","metadata","executionTime","function","func","find","f","missingParams","filter","param","length","join","result","simulateCommandExecution","data","Error","message","String","swarmId","taskId","stored","found","activeAgents","floor","health","metrics","throughput","latency","modelLoaded","accuracy","trainingProgress","benchmarks","unit","executed","getAvailableTools","Array","from","values","getConnectedTools","getTool","isToolAvailable","getToolFunctions","initializeSwarmCoordination","toolPriority","coordinateMemory","spawnAgent","orchestrateTask","getSwarmStatus","refreshConnections","registerTool","unregisterTool","delete","getIntegrationStatus","connectedTools","availableFunctions","reduce","sum","totalTools"],"mappings":"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"}