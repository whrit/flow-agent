{"version":3,"sources":["../../../src/core/logger.ts"],"sourcesContent":["/**\n * Logging infrastructure for Claude-Flow\n */\n\nimport { promises as fs } from 'node:fs';\nimport * as path from 'node:path';\nimport { Buffer } from 'node:buffer';\nimport process from 'node:process';\nimport type { LoggingConfig } from '../utils/types.js';\nimport { formatBytes } from '../utils/helpers.js';\n\nexport interface ILogger {\n  debug(message: string, meta?: unknown): void;\n  info(message: string, meta?: unknown): void;\n  warn(message: string, meta?: unknown): void;\n  error(message: string, error?: unknown): void;\n  configure(config: LoggingConfig): Promise<void>;\n  level?: string;\n}\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: string;\n  message: string;\n  context: Record<string, unknown>;\n  data?: unknown;\n  error?: unknown;\n}\n\n/**\n * Logger implementation with context support\n */\nexport class Logger implements ILogger {\n  private static instance: Logger;\n  private config: LoggingConfig;\n  private context: Record<string, unknown>;\n  private fileHandle?: fs.FileHandle;\n  private currentFileSize = 0;\n  private currentFileIndex = 0;\n  private isClosing = false;\n\n  get level(): string {\n    return this.config.level;\n  }\n\n  constructor(\n    config: LoggingConfig = {\n      level: 'info',\n      format: 'json',\n      destination: 'console',\n    },\n    context: Record<string, unknown> = {},\n  ) {\n    // Validate file path if file destination\n    if ((config.destination === 'file' || config.destination === 'both') && !config.filePath) {\n      throw new Error('File path required for file logging');\n    }\n\n    this.config = config;\n    this.context = context;\n  }\n\n  /**\n   * Gets the singleton instance of the logger\n   */\n  static getInstance(config?: LoggingConfig): Logger {\n    if (!Logger.instance) {\n      if (!config) {\n        // Use default config if none provided and not in test environment\n        const isTestEnv = process.env.CLAUDE_FLOW_ENV === 'test';\n        if (isTestEnv) {\n          throw new Error('Logger configuration required for initialization');\n        }\n        config = {\n          level: 'info',\n          format: 'json',\n          destination: 'console',\n        };\n      }\n      Logger.instance = new Logger(config);\n    }\n    return Logger.instance;\n  }\n\n  /**\n   * Updates logger configuration\n   */\n  async configure(config: LoggingConfig): Promise<void> {\n    this.config = config;\n\n    // Reset file handle if destination changed\n    if (this.fileHandle && config.destination !== 'file' && config.destination !== 'both') {\n      await this.fileHandle.close();\n      delete this.fileHandle;\n    }\n  }\n\n  debug(message: string, meta?: unknown): void {\n    this.log(LogLevel.DEBUG, message, meta);\n  }\n\n  info(message: string, meta?: unknown): void {\n    this.log(LogLevel.INFO, message, meta);\n  }\n\n  warn(message: string, meta?: unknown): void {\n    this.log(LogLevel.WARN, message, meta);\n  }\n\n  error(message: string, error?: unknown): void {\n    this.log(LogLevel.ERROR, message, undefined, error);\n  }\n\n  /**\n   * Creates a child logger with additional context\n   */\n  child(context: Record<string, unknown>): Logger {\n    return new Logger(this.config, { ...this.context, ...context });\n  }\n\n  /**\n   * Properly close the logger and release resources\n   */\n  async close(): Promise<void> {\n    this.isClosing = true;\n    if (this.fileHandle) {\n      try {\n        await this.fileHandle.close();\n      } catch (error) {\n        console.error('Error closing log file handle:', error);\n      } finally {\n        delete this.fileHandle;\n      }\n    }\n  }\n\n  private log(level: LogLevel, message: string, data?: unknown, error?: unknown): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level: LogLevel[level],\n      message,\n      context: this.context,\n      data,\n      error,\n    };\n\n    const formatted = this.format(entry);\n\n    if (this.config.destination === 'console' || this.config.destination === 'both') {\n      this.writeToConsole(level, formatted);\n    }\n\n    if (this.config.destination === 'file' || this.config.destination === 'both') {\n      this.writeToFile(formatted);\n    }\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const configLevel = LogLevel[this.config.level.toUpperCase() as keyof typeof LogLevel];\n    return level >= configLevel;\n  }\n\n  private format(entry: LogEntry): string {\n    if (this.config.format === 'json') {\n      // Handle error serialization for JSON format\n      const jsonEntry = { ...entry };\n      if (jsonEntry.error instanceof Error) {\n        jsonEntry.error = {\n          name: jsonEntry.error.name,\n          message: jsonEntry.error.message,\n          stack: jsonEntry.error.stack,\n        };\n      }\n      return JSON.stringify(jsonEntry);\n    }\n\n    // Text format\n    const contextStr =\n      Object.keys(entry.context).length > 0 ? ` ${JSON.stringify(entry.context)}` : '';\n    const dataStr = entry.data !== undefined ? ` ${JSON.stringify(entry.data)}` : '';\n    const errorStr =\n      entry.error !== undefined\n        ? entry.error instanceof Error\n          ? `\\n  Error: ${entry.error.message}\\n  Stack: ${entry.error.stack}`\n          : ` Error: ${JSON.stringify(entry.error)}`\n        : '';\n\n    return `[${entry.timestamp}] ${entry.level} ${entry.message}${contextStr}${dataStr}${errorStr}`;\n  }\n\n  private writeToConsole(level: LogLevel, message: string): void {\n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(message);\n        break;\n      case LogLevel.INFO:\n        console.info(message);\n        break;\n      case LogLevel.WARN:\n        console.warn(message);\n        break;\n      case LogLevel.ERROR:\n        console.error(message);\n        break;\n    }\n  }\n\n  private async writeToFile(message: string): Promise<void> {\n    if (!this.config.filePath || this.isClosing) {\n      return;\n    }\n\n    try {\n      // Check if we need to rotate the log file\n      if (await this.shouldRotate()) {\n        await this.rotate();\n      }\n\n      // Open file handle if not already open\n      if (!this.fileHandle) {\n        this.fileHandle = await fs.open(this.config.filePath, 'a');\n      }\n\n      // Write the message\n      const data = Buffer.from(message + '\\n', 'utf8');\n      await this.fileHandle.write(data);\n      this.currentFileSize += data.length;\n    } catch (error) {\n      console.error('Failed to write to log file:', error);\n    }\n  }\n\n  private async shouldRotate(): Promise<boolean> {\n    if (!this.config.maxFileSize || !this.config.filePath) {\n      return false;\n    }\n\n    try {\n      const stat = await fs.stat(this.config.filePath);\n      return stat.size >= this.config.maxFileSize;\n    } catch {\n      return false;\n    }\n  }\n\n  private async rotate(): Promise<void> {\n    if (!this.config.filePath || !this.config.maxFiles) {\n      return;\n    }\n\n    // Close current file\n    if (this.fileHandle) {\n      await this.fileHandle.close();\n      delete this.fileHandle;\n    }\n\n    // Rename current file\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const rotatedPath = `${this.config.filePath}.${timestamp}`;\n    await fs.rename(this.config.filePath, rotatedPath);\n\n    // Clean up old files\n    await this.cleanupOldFiles();\n\n    // Reset file size\n    this.currentFileSize = 0;\n  }\n\n  private async cleanupOldFiles(): Promise<void> {\n    if (!this.config.filePath || !this.config.maxFiles) {\n      return;\n    }\n\n    const dir = path.dirname(this.config.filePath);\n    const baseFileName = path.basename(this.config.filePath);\n\n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n      const files: string[] = [];\n\n      for (const entry of entries) {\n        if (entry.isFile() && entry.name.startsWith(baseFileName + '.')) {\n          files.push(entry.name);\n        }\n      }\n\n      // Sort files by timestamp (newest first)\n      files.sort().reverse();\n\n      // Remove old files\n      const filesToRemove = files.slice(this.config.maxFiles - 1);\n      for (const file of filesToRemove) {\n        await fs.unlink(path.join(dir, file));\n      }\n    } catch (error) {\n      console.error('Failed to cleanup old log files:', error);\n    }\n  }\n}\n\n// Export singleton instance with lazy initialization\nexport const logger = Logger.getInstance();\n"],"names":["promises","fs","path","Buffer","process","LogLevel","Logger","instance","config","context","fileHandle","currentFileSize","currentFileIndex","isClosing","level","format","destination","filePath","Error","getInstance","isTestEnv","env","CLAUDE_FLOW_ENV","configure","close","debug","message","meta","log","info","warn","error","undefined","child","console","data","shouldLog","entry","timestamp","Date","toISOString","formatted","writeToConsole","writeToFile","configLevel","toUpperCase","jsonEntry","name","stack","JSON","stringify","contextStr","Object","keys","length","dataStr","errorStr","shouldRotate","rotate","open","from","write","maxFileSize","stat","size","maxFiles","replace","rotatedPath","rename","cleanupOldFiles","dir","dirname","baseFileName","basename","entries","readdir","withFileTypes","files","isFile","startsWith","push","sort","reverse","filesToRemove","slice","file","unlink","join","logger"],"mappings":"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"}