{"version":3,"sources":["../../../src/core/ConfigManager.ts"],"sourcesContent":["/**\n * ConfigManager - Handles configuration validation and setup\n * Manages environment variables, file-based config, and validation schemas\n */\n\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { ConfigValidationResult, InitConfig, DatabaseConfig, TopologyConfig } from '../types/interfaces.js';\n\nexport interface ClaudeFlowConfig {\n  // Core settings\n  mode?: string;\n  topology?: string;\n  maxAgents?: number;\n  strategy?: string;\n\n  // Database configuration\n  database?: DatabaseConfig;\n\n  // Topology configuration\n  topologyConfig?: TopologyConfig;\n\n  // MCP integration\n  mcpServers?: MCPServerConfig[];\n\n  // GitHub integration\n  github?: GitHubConfig;\n\n  // Neural network settings\n  neural?: NeuralConfig;\n\n  // Hive mind settings\n  hiveMind?: HiveMindConfig;\n\n  // Enterprise features\n  enterprise?: EnterpriseConfig;\n\n  // Debugging and logging\n  debug?: boolean;\n  logLevel?: 'error' | 'warn' | 'info' | 'debug';\n  logPath?: string;\n\n  // Performance settings\n  performance?: PerformanceConfig;\n}\n\nexport interface MCPServerConfig {\n  name: string;\n  command: string;\n  args?: string[];\n  env?: Record<string, string>;\n  enabled: boolean;\n}\n\nexport interface GitHubConfig {\n  token?: string;\n  owner?: string;\n  repo?: string;\n  webhookSecret?: string;\n  autoSync?: boolean;\n}\n\nexport interface NeuralConfig {\n  modelPath?: string;\n  wasmOptimization?: boolean;\n  simdAcceleration?: boolean;\n  trainingEnabled?: boolean;\n}\n\nexport interface HiveMindConfig {\n  queenEnabled?: boolean;\n  workerPoolSize?: number;\n  consensusThreshold?: number;\n  adaptationRate?: number;\n}\n\nexport interface EnterpriseConfig {\n  authentication?: boolean;\n  encryption?: boolean;\n  audit?: boolean;\n  compliance?: string[];\n}\n\nexport interface PerformanceConfig {\n  maxConcurrency?: number;\n  timeout?: number;\n  retryAttempts?: number;\n  cacheEnabled?: boolean;\n}\n\nexport class ConfigManager {\n  private config: ClaudeFlowConfig = {};\n  private configPath: string;\n\n  constructor(configPath?: string) {\n    this.configPath = configPath || this.findConfigFile();\n    this.loadConfiguration();\n  }\n\n  /**\n   * Find configuration file in standard locations\n   */\n  private findConfigFile(): string {\n    const possiblePaths = [\n      'claude-flow.config.json',\n      'claude-flow.config.js',\n      '.claude-flow.json',\n      '.claude-flow/config.json',\n      'config/claude-flow.json',\n      path.join(process.cwd(), 'claude-flow.config.json')\n    ];\n\n    for (const configPath of possiblePaths) {\n      if (fs.existsSync(configPath)) {\n        return configPath;\n      }\n    }\n\n    return 'claude-flow.config.json'; // Default\n  }\n\n  /**\n   * Load configuration from file and environment variables\n   */\n  private loadConfiguration(): void {\n    // Load from file if exists\n    if (fs.existsSync(this.configPath)) {\n      try {\n        const fileContent = fs.readFileSync(this.configPath, 'utf8');\n        this.config = JSON.parse(fileContent);\n      } catch (error) {\n        console.warn(`Failed to load config from ${this.configPath}:`, error);\n      }\n    }\n\n    // Override with environment variables\n    this.loadEnvironmentVariables();\n  }\n\n  /**\n   * Load configuration from environment variables\n   */\n  private loadEnvironmentVariables(): void {\n    const envConfig: Partial<ClaudeFlowConfig> = {};\n\n    // Core settings\n    if (process.env.CLAUDE_FLOW_MODE) envConfig.mode = process.env.CLAUDE_FLOW_MODE;\n    if (process.env.CLAUDE_FLOW_TOPOLOGY) envConfig.topology = process.env.CLAUDE_FLOW_TOPOLOGY;\n    if (process.env.CLAUDE_FLOW_MAX_AGENTS) envConfig.maxAgents = parseInt(process.env.CLAUDE_FLOW_MAX_AGENTS);\n    if (process.env.CLAUDE_FLOW_STRATEGY) envConfig.strategy = process.env.CLAUDE_FLOW_STRATEGY;\n\n    // Database\n    if (process.env.CLAUDE_FLOW_DATABASE_TYPE || process.env.CLAUDE_FLOW_DATABASE_PATH) {\n      envConfig.database = {\n        type: (process.env.CLAUDE_FLOW_DATABASE_TYPE as 'sqlite' | 'json') || 'sqlite',\n        path: process.env.CLAUDE_FLOW_DATABASE_PATH\n      };\n    }\n\n    // GitHub\n    if (process.env.GITHUB_TOKEN) {\n      envConfig.github = {\n        token: process.env.GITHUB_TOKEN,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        webhookSecret: process.env.GITHUB_WEBHOOK_SECRET,\n        autoSync: process.env.GITHUB_AUTO_SYNC === 'true'\n      };\n    }\n\n    // Debug\n    if (process.env.CLAUDE_FLOW_DEBUG) envConfig.debug = process.env.CLAUDE_FLOW_DEBUG === 'true';\n    if (process.env.CLAUDE_FLOW_LOG_LEVEL) envConfig.logLevel = process.env.CLAUDE_FLOW_LOG_LEVEL as any;\n\n    // Merge with existing config\n    this.config = { ...this.config, ...envConfig };\n  }\n\n  /**\n   * Validate the configuration\n   */\n  async validate(): Promise<ConfigValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate mode\n    const validModes = ['standard', 'github', 'hive-mind', 'sparc', 'neural', 'enterprise'];\n    if (this.config.mode && !validModes.includes(this.config.mode)) {\n      errors.push(`Invalid mode: ${this.config.mode}. Valid modes: ${validModes.join(', ')}`);\n    }\n\n    // Validate topology\n    const validTopologies = ['mesh', 'hierarchical', 'ring', 'star'];\n    if (this.config.topology && !validTopologies.includes(this.config.topology)) {\n      errors.push(`Invalid topology: ${this.config.topology}. Valid topologies: ${validTopologies.join(', ')}`);\n    }\n\n    // Validate maxAgents\n    if (this.config.maxAgents !== undefined) {\n      if (this.config.maxAgents < 1 || this.config.maxAgents > 100) {\n        errors.push('maxAgents must be between 1 and 100');\n      }\n    }\n\n    // Validate strategy\n    const validStrategies = ['balanced', 'specialized', 'adaptive'];\n    if (this.config.strategy && !validStrategies.includes(this.config.strategy)) {\n      errors.push(`Invalid strategy: ${this.config.strategy}. Valid strategies: ${validStrategies.join(', ')}`);\n    }\n\n    // Validate database configuration\n    if (this.config.database) {\n      if (!['sqlite', 'json'].includes(this.config.database.type)) {\n        errors.push('Database type must be either \"sqlite\" or \"json\"');\n      }\n\n      if (this.config.database.path && !fs.existsSync(path.dirname(this.config.database.path))) {\n        warnings.push(`Database directory does not exist: ${path.dirname(this.config.database.path)}`);\n      }\n    }\n\n    // Validate GitHub configuration\n    if (this.config.github?.token && !this.config.github.token.startsWith('ghp_')) {\n      warnings.push('GitHub token format appears invalid');\n    }\n\n    // Validate performance configuration\n    if (this.config.performance?.maxConcurrency && this.config.performance.maxConcurrency < 1) {\n      errors.push('maxConcurrency must be at least 1');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Get the current configuration\n   */\n  getConfig(): ClaudeFlowConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get a specific configuration value\n   */\n  get<K extends keyof ClaudeFlowConfig>(key: K): ClaudeFlowConfig[K] {\n    return this.config[key];\n  }\n\n  /**\n   * Set a configuration value\n   */\n  set<K extends keyof ClaudeFlowConfig>(key: K, value: ClaudeFlowConfig[K]): void {\n    this.config[key] = value;\n  }\n\n  /**\n   * Save configuration to file\n   */\n  async save(): Promise<void> {\n    try {\n      await fs.ensureDir(path.dirname(this.configPath));\n      await fs.writeJSON(this.configPath, this.config, { spaces: 2 });\n    } catch (error) {\n      throw new Error(`Failed to save configuration: ${error}`);\n    }\n  }\n\n  /**\n   * Reset configuration to defaults\n   */\n  reset(): void {\n    this.config = {\n      mode: 'standard',\n      topology: 'mesh',\n      maxAgents: 8,\n      strategy: 'balanced',\n      database: {\n        type: 'sqlite',\n        path: '.claude-flow/database.sqlite'\n      },\n      debug: false,\n      logLevel: 'info'\n    };\n  }\n\n  /**\n   * Merge additional configuration\n   */\n  merge(additionalConfig: Partial<ClaudeFlowConfig>): void {\n    this.config = { ...this.config, ...additionalConfig };\n  }\n\n  /**\n   * Create InitConfig from current configuration\n   */\n  toInitConfig(): InitConfig {\n    return {\n      mode: this.config.mode as any,\n      topology: this.config.topology as any,\n      maxAgents: this.config.maxAgents,\n      strategy: this.config.strategy as any,\n      database: this.config.database?.type,\n      debug: this.config.debug\n    };\n  }\n}"],"names":["fs","path","ConfigManager","config","configPath","findConfigFile","loadConfiguration","possiblePaths","join","process","cwd","existsSync","fileContent","readFileSync","JSON","parse","error","console","warn","loadEnvironmentVariables","envConfig","env","CLAUDE_FLOW_MODE","mode","CLAUDE_FLOW_TOPOLOGY","topology","CLAUDE_FLOW_MAX_AGENTS","maxAgents","parseInt","CLAUDE_FLOW_STRATEGY","strategy","CLAUDE_FLOW_DATABASE_TYPE","CLAUDE_FLOW_DATABASE_PATH","database","type","GITHUB_TOKEN","github","token","owner","GITHUB_OWNER","repo","GITHUB_REPO","webhookSecret","GITHUB_WEBHOOK_SECRET","autoSync","GITHUB_AUTO_SYNC","CLAUDE_FLOW_DEBUG","debug","CLAUDE_FLOW_LOG_LEVEL","logLevel","validate","errors","warnings","validModes","includes","push","validTopologies","undefined","validStrategies","dirname","startsWith","performance","maxConcurrency","valid","length","getConfig","get","key","set","value","save","ensureDir","writeJSON","spaces","Error","reset","merge","additionalConfig","toInitConfig"],"mappings":"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"}