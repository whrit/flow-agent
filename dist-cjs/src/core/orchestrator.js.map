{"version":3,"sources":["../../../src/core/orchestrator.ts"],"sourcesContent":["/**\n * Main orchestrator for Claude-Flow\n */\n\nimport {\n  Config,\n  SystemEvents,\n  AgentProfile,\n  AgentSession,\n  Task,\n  HealthStatus,\n  ComponentHealth,\n  TaskStatus,\n  OrchestratorMetrics,\n} from '../utils/types.js';\nimport { IEventBus } from './event-bus.js';\nimport type { ILogger } from './logger.js';\nimport type { ITerminalManager } from '../terminal/manager.js';\nimport type { IMemoryManager } from '../memory/manager.js';\nimport type { ICoordinationManager } from '../coordination/manager.js';\nimport type { IMCPServer } from '../mcp/server.js';\nimport { SystemError, InitializationError, ShutdownError } from '../utils/errors.js';\nimport { delay, retry, circuitBreaker, CircuitBreaker } from '../utils/helpers.js';\nimport { mkdir, writeFile, readFile } from 'fs/promises';\nimport { join, dirname } from 'path';\nimport { ClaudeAPIClient } from '../api/claude-client.js';\nimport { ConfigManager } from '../config/config-manager.js';\nimport { ParallelSwarmExecutor, type ParallelAgentConfig } from '../sdk/session-forking.js';\nimport { RealTimeQueryController } from '../sdk/query-control.js';\n\nexport interface ISessionManager {\n  createSession(profile: AgentProfile): Promise<AgentSession>;\n  getSession(sessionId: string): AgentSession | undefined;\n  getActiveSessions(): AgentSession[];\n  terminateSession(sessionId: string): Promise<void>;\n  terminateAllSessions(): Promise<void>;\n  persistSessions(): Promise<void>;\n  restoreSessions(): Promise<void>;\n  removeSession(sessionId: string): void;\n}\n\nexport interface IOrchestrator {\n  initialize(): Promise<void>;\n  shutdown(): Promise<void>;\n  spawnAgent(profile: AgentProfile): Promise<string>;\n  spawnParallelAgents(profiles: AgentProfile[]): Promise<Map<string, string>>;\n  terminateAgent(agentId: string): Promise<void>;\n  assignTask(task: Task): Promise<void>;\n  getHealthStatus(): Promise<HealthStatus>;\n  getMetrics(): Promise<OrchestratorMetrics>;\n  performMaintenance(): Promise<void>;\n}\n\nexport interface SessionPersistence {\n  sessions: Array<AgentSession & { profile: AgentProfile }>;\n  taskQueue: Task[];\n  metrics: {\n    completedTasks: number;\n    failedTasks: number;\n    totalTaskDuration: number;\n  };\n  savedAt: Date;\n}\n\n/**\n * Session manager implementation with persistence\n */\nclass SessionManager implements ISessionManager {\n  private sessions = new Map<string, AgentSession>();\n  private sessionProfiles = new Map<string, AgentProfile>();\n  private persistencePath: string;\n  private persistenceCircuitBreaker: CircuitBreaker;\n\n  constructor(\n    private terminalManager: ITerminalManager,\n    private memoryManager: IMemoryManager,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n    private config: Config,\n  ) {\n    this.persistencePath = join(config.orchestrator.dataDir || './data', 'sessions.json');\n\n    // Circuit breaker for persistence operations\n    this.persistenceCircuitBreaker = circuitBreaker('SessionPersistence', {\n      threshold: 5,\n      timeout: 30000,\n      resetTimeout: 60000,\n    });\n  }\n\n  async createSession(profile: AgentProfile): Promise<AgentSession> {\n    try {\n      // Create terminal with retry logic\n      const terminalId = await retry(() => this.terminalManager.spawnTerminal(profile), {\n        maxAttempts: 3,\n        initialDelay: 1000,\n      });\n\n      // Create memory bank with retry logic\n      const memoryBankId = await retry(() => this.memoryManager.createBank(profile.id), {\n        maxAttempts: 3,\n        initialDelay: 1000,\n      });\n\n      // Create session\n      const session: AgentSession = {\n        id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        agentId: profile.id,\n        terminalId,\n        startTime: new Date(),\n        status: 'active',\n        lastActivity: new Date(),\n        memoryBankId,\n      };\n\n      this.sessions.set(session.id, session);\n      this.sessionProfiles.set(session.id, profile);\n\n      this.logger.info('Session created', {\n        sessionId: session.id,\n        agentId: profile.id,\n        terminalId,\n        memoryBankId,\n      });\n\n      // Persist sessions asynchronously\n      this.persistSessions().catch((error) =>\n        this.logger.error('Failed to persist sessions', error),\n      );\n\n      return session;\n    } catch (error) {\n      this.logger.error('Failed to create session', { agentId: profile.id, error });\n      throw new SystemError(`Failed to create session for agent ${profile.id}`, { error });\n    }\n  }\n\n  getSession(sessionId: string): AgentSession | undefined {\n    return this.sessions.get(sessionId);\n  }\n\n  getActiveSessions(): AgentSession[] {\n    return Array.from(this.sessions.values()).filter(\n      (session) => session.status === 'active' || session.status === 'idle',\n    );\n  }\n\n  async terminateSession(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      throw new Error(`Session not found: ${sessionId}`);\n    }\n\n    try {\n      // Update session status first\n      session.status = 'terminated';\n      session.endTime = new Date();\n\n      // Terminate terminal with timeout\n      await Promise.race([\n        this.terminalManager.terminateTerminal(session.terminalId),\n        delay(5000).then(() => {\n          throw new Error('Terminal termination timeout');\n        }),\n      ]).catch((error) => {\n        this.logger.error('Error terminating terminal', { sessionId, error });\n      });\n\n      // Close memory bank with timeout\n      await Promise.race([\n        this.memoryManager.closeBank(session.memoryBankId),\n        delay(5000).then(() => {\n          throw new Error('Memory bank close timeout');\n        }),\n      ]).catch((error) => {\n        this.logger.error('Error closing memory bank', { sessionId, error });\n      });\n\n      // Clean up\n      this.sessionProfiles.delete(sessionId);\n\n      this.logger.info('Session terminated', {\n        sessionId,\n        duration: session.endTime.getTime() - session.startTime.getTime(),\n      });\n\n      // Persist sessions asynchronously\n      this.persistSessions().catch((error) =>\n        this.logger.error('Failed to persist sessions', error),\n      );\n    } catch (error) {\n      this.logger.error('Error during session termination', { sessionId, error });\n      throw error;\n    }\n  }\n\n  async terminateAllSessions(): Promise<void> {\n    const sessions = this.getActiveSessions();\n\n    // Terminate sessions in batches to avoid overwhelming the system\n    const batchSize = 5;\n    for (let i = 0; i < sessions.length; i += batchSize) {\n      const batch = sessions.slice(i, i + batchSize);\n      await Promise.allSettled(batch.map((session) => this.terminateSession(session.id)));\n    }\n  }\n\n  removeSession(sessionId: string): void {\n    this.sessions.delete(sessionId);\n    this.sessionProfiles.delete(sessionId);\n  }\n\n  async persistSessions(): Promise<void> {\n    if (!this.config.orchestrator.persistSessions) {\n      return;\n    }\n\n    try {\n      await this.persistenceCircuitBreaker.execute(async () => {\n        const data: SessionPersistence = {\n          sessions: Array.from(this.sessions.values())\n            .map((session) => ({\n              ...session,\n              profile: this.sessionProfiles.get(session.id)!,\n            }))\n            .filter((s) => s.profile),\n          taskQueue: [],\n          metrics: {\n            completedTasks: 0,\n            failedTasks: 0,\n            totalTaskDuration: 0,\n          },\n          savedAt: new Date(),\n        };\n\n        await mkdir(dirname(this.persistencePath), { recursive: true });\n        await writeFile(this.persistencePath, JSON.stringify(data, null, 2), 'utf8');\n\n        this.logger.debug('Sessions persisted', { count: data.sessions.length });\n      });\n    } catch (error) {\n      this.logger.error('Failed to persist sessions', error);\n    }\n  }\n\n  async restoreSessions(): Promise<void> {\n    if (!this.config.orchestrator.persistSessions) {\n      return;\n    }\n\n    try {\n      const data = await readFile(this.persistencePath, 'utf8');\n      const persistence: SessionPersistence = JSON.parse(data);\n\n      // Restore only active/idle sessions\n      const sessionsToRestore = persistence.sessions.filter(\n        (s) => s.status === 'active' || s.status === 'idle',\n      );\n\n      for (const sessionData of sessionsToRestore) {\n        try {\n          // Recreate session\n          const session = await this.createSession(sessionData.profile);\n\n          // Update with persisted data\n          Object.assign(session, {\n            id: sessionData.id,\n            startTime: new Date(sessionData.startTime),\n            lastActivity: new Date(sessionData.lastActivity),\n          });\n\n          this.logger.info('Session restored', { sessionId: session.id });\n        } catch (error) {\n          this.logger.error('Failed to restore session', {\n            sessionId: sessionData.id,\n            error,\n          });\n        }\n      }\n    } catch (error) {\n      if ((error as NodeJS.ErrnoException).code !== 'ENOENT') {\n        this.logger.error('Failed to restore sessions', error);\n      }\n    }\n  }\n}\n\n/**\n * Main orchestrator implementation with enhanced features\n */\nexport class Orchestrator implements IOrchestrator {\n  private initialized = false;\n  private shutdownInProgress = false;\n  private sessionManager: ISessionManager;\n  private healthCheckInterval?: number;\n  private maintenanceInterval?: number;\n  private metricsInterval?: number;\n  private agents = new Map<string, AgentProfile>();\n  private taskQueue: Task[] = [];\n  private taskHistory = new Map<string, Task>();\n  private startTime = Date.now();\n  private claudeClient?: ClaudeAPIClient;\n  private configManager: ConfigManager;\n  private parallelExecutor?: ParallelSwarmExecutor;\n  private queryController?: RealTimeQueryController;\n\n  // Metrics tracking\n  private metrics = {\n    completedTasks: 0,\n    failedTasks: 0,\n    totalTaskDuration: 0,\n  };\n\n  // Circuit breakers for critical operations\n  private healthCheckCircuitBreaker: CircuitBreaker;\n  private taskAssignmentCircuitBreaker: CircuitBreaker;\n\n  constructor(\n    private config: Config,\n    private terminalManager: ITerminalManager,\n    private memoryManager: IMemoryManager,\n    private coordinationManager: ICoordinationManager,\n    private mcpServer: IMCPServer,\n    private eventBus: IEventBus,\n    private logger: ILogger,\n  ) {\n    this.sessionManager = new SessionManager(\n      terminalManager,\n      memoryManager,\n      eventBus,\n      logger,\n      config,\n    );\n\n    this.configManager = ConfigManager.getInstance();\n\n    // Initialize circuit breakers\n    this.healthCheckCircuitBreaker = circuitBreaker('HealthCheck', {\n      threshold: 3,\n      timeout: 10000,\n      resetTimeout: 30000,\n    });\n\n    this.taskAssignmentCircuitBreaker = circuitBreaker('TaskAssignment', {\n      threshold: 5,\n      timeout: 5000,\n      resetTimeout: 20000,\n    });\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      throw new InitializationError('Orchestrator already initialized');\n    }\n\n    this.logger.info('Initializing orchestrator...');\n    const startTime = Date.now();\n\n    try {\n      // Initialize components in parallel where possible\n      await Promise.all([\n        this.initializeComponent('Terminal Manager', () => this.terminalManager.initialize()),\n        this.initializeComponent('Memory Manager', () => this.memoryManager.initialize()),\n        this.initializeComponent('Coordination Manager', () =>\n          this.coordinationManager.initialize(),\n        ),\n      ]);\n\n      // MCP server needs to be started after other components\n      await this.initializeComponent('MCP Server', () => this.mcpServer.start());\n\n      // Initialize Claude API client if configured\n      if (this.configManager.isClaudeAPIConfigured()) {\n        try {\n          this.claudeClient = new ClaudeAPIClient(this.logger, this.configManager);\n          this.logger.info('Claude API client initialized', {\n            model: this.claudeClient.getConfig().model,\n            temperature: this.claudeClient.getConfig().temperature,\n          });\n        } catch (error) {\n          this.logger.warn('Failed to initialize Claude API client', error);\n        }\n      }\n\n      // Initialize parallel executor and query controller\n      this.parallelExecutor = new ParallelSwarmExecutor();\n      this.queryController = new RealTimeQueryController({\n        allowPause: true,\n        allowModelChange: true,\n        allowPermissionChange: true,\n        monitoringInterval: 1000\n      });\n\n      this.logger.info('Session forking and query control initialized', {\n        parallelExecutor: 'enabled',\n        queryController: 'enabled'\n      });\n\n      // Restore persisted sessions\n      await this.sessionManager.restoreSessions();\n\n      // Set up event handlers\n      this.setupEventHandlers();\n\n      // Start background tasks\n      this.startHealthChecks();\n      this.startMaintenanceTasks();\n      this.startMetricsCollection();\n\n      this.initialized = true;\n\n      const initDuration = Date.now() - startTime;\n      this.eventBus.emit(SystemEvents.SYSTEM_READY, { timestamp: new Date() });\n      this.logger.info('Orchestrator initialized successfully', { duration: initDuration });\n    } catch (error) {\n      this.logger.error('Failed to initialize orchestrator', error);\n\n      // Attempt cleanup on initialization failure\n      await this.emergencyShutdown();\n\n      throw new InitializationError('Orchestrator', { error });\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    if (!this.initialized || this.shutdownInProgress) {\n      return;\n    }\n\n    this.shutdownInProgress = true;\n    this.logger.info('Shutting down orchestrator...');\n    const shutdownStart = Date.now();\n\n    try {\n      // Stop background tasks\n      this.stopBackgroundTasks();\n\n      // Save current state\n      await this.sessionManager.persistSessions();\n\n      // Process any remaining critical tasks\n      await this.processShutdownTasks();\n\n      // Terminate all sessions\n      await this.sessionManager.terminateAllSessions();\n\n      // Shutdown components with timeout\n      await Promise.race([\n        this.shutdownComponents(),\n        delay(this.config.orchestrator.shutdownTimeout),\n      ]);\n\n      const shutdownDuration = Date.now() - shutdownStart;\n      this.eventBus.emit(SystemEvents.SYSTEM_SHUTDOWN, { reason: 'Graceful shutdown' });\n      this.logger.info('Orchestrator shutdown complete', { duration: shutdownDuration });\n    } catch (error) {\n      this.logger.error('Error during shutdown', error);\n\n      // Force shutdown if graceful shutdown fails\n      await this.emergencyShutdown();\n\n      throw new ShutdownError('Failed to shutdown gracefully', { error });\n    } finally {\n      this.initialized = false;\n      this.shutdownInProgress = false;\n    }\n  }\n\n  async spawnAgent(profile: AgentProfile): Promise<string> {\n    if (!this.initialized) {\n      throw new SystemError('Orchestrator not initialized');\n    }\n\n    // Check agent limit\n    if (this.agents.size >= this.config.orchestrator.maxConcurrentAgents) {\n      throw new SystemError('Maximum concurrent agents reached');\n    }\n\n    // Validate agent profile\n    this.validateAgentProfile(profile);\n\n    this.logger.info('Spawning agent', { agentId: profile.id, type: profile.type });\n\n    try {\n      // Create session with retry\n      const session = await retry(() => this.sessionManager.createSession(profile), {\n        maxAttempts: 3,\n        initialDelay: 2000,\n      });\n\n      // Store agent profile\n      this.agents.set(profile.id, profile);\n\n      // Emit event\n      this.eventBus.emit(SystemEvents.AGENT_SPAWNED, {\n        agentId: profile.id,\n        profile,\n        sessionId: session.id,\n      });\n\n      // Start agent health monitoring\n      this.startAgentHealthMonitoring(profile.id);\n\n      return session.id;\n    } catch (error) {\n      this.logger.error('Failed to spawn agent', { agentId: profile.id, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Spawn multiple agents in parallel using session forking\n   * Achieves 10-20x performance improvement over sequential spawning\n   */\n  async spawnParallelAgents(profiles: AgentProfile[]): Promise<Map<string, string>> {\n    if (!this.initialized) {\n      throw new SystemError('Orchestrator not initialized');\n    }\n\n    if (!this.parallelExecutor) {\n      throw new SystemError('Parallel executor not initialized');\n    }\n\n    // Check agent limit\n    if (this.agents.size + profiles.length > this.config.orchestrator.maxConcurrentAgents) {\n      throw new SystemError('Would exceed maximum concurrent agents');\n    }\n\n    // Validate all profiles\n    profiles.forEach(profile => this.validateAgentProfile(profile));\n\n    this.logger.info('Spawning parallel agents', {\n      count: profiles.length,\n      types: profiles.map(p => p.type)\n    });\n\n    try {\n      // Convert profiles to agent configs\n      const agentConfigs: ParallelAgentConfig[] = profiles.map(profile => ({\n        agentId: profile.id,\n        agentType: profile.type,\n        task: `Initialize ${profile.type} agent with capabilities: ${profile.capabilities.join(', ')}`,\n        capabilities: profile.capabilities,\n        priority: profile.priority >= 90 ? 'critical' :\n                  profile.priority >= 70 ? 'high' :\n                  profile.priority >= 40 ? 'medium' : 'low',\n        timeout: 60000\n      }));\n\n      // Execute parallel spawning using session forking\n      const result = await this.parallelExecutor.spawnParallelAgents(agentConfigs, {\n        maxParallelAgents: Math.min(profiles.length, 10),\n        timeout: 60000,\n        model: 'claude-sonnet-4'\n      });\n\n      // Create session mappings\n      const sessionMap = new Map<string, string>();\n\n      // Store successful agents\n      for (const profile of profiles) {\n        if (result.successfulAgents.includes(profile.id)) {\n          // Create a lightweight session for the forked agent\n          const session: AgentSession = {\n            id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            agentId: profile.id,\n            terminalId: 'forked',\n            startTime: new Date(),\n            status: 'active',\n            lastActivity: new Date(),\n            memoryBankId: `memory_${profile.id}`\n          };\n\n          this.agents.set(profile.id, profile);\n          sessionMap.set(profile.id, session.id);\n\n          // Emit event\n          this.eventBus.emit(SystemEvents.AGENT_SPAWNED, {\n            agentId: profile.id,\n            profile,\n            sessionId: session.id,\n            parallel: true\n          });\n\n          // Start health monitoring\n          this.startAgentHealthMonitoring(profile.id);\n        }\n      }\n\n      this.logger.info('Parallel agent spawning completed', {\n        successful: result.successfulAgents.length,\n        failed: result.failedAgents.length,\n        duration: result.totalDuration,\n        performanceGain: this.parallelExecutor.getMetrics().performanceGain\n      });\n\n      return sessionMap;\n    } catch (error) {\n      this.logger.error('Failed to spawn parallel agents', { error });\n      throw error;\n    }\n  }\n\n  async terminateAgent(agentId: string): Promise<void> {\n    if (!this.initialized) {\n      throw new SystemError('Orchestrator not initialized');\n    }\n\n    const profile = this.agents.get(agentId);\n    if (!profile) {\n      throw new SystemError(`Agent not found: ${agentId}`);\n    }\n\n    this.logger.info('Terminating agent', { agentId });\n\n    try {\n      // Cancel any assigned tasks\n      await this.cancelAgentTasks(agentId);\n\n      // Find and terminate all sessions for this agent\n      const sessions = this.sessionManager\n        .getActiveSessions()\n        .filter((session) => session.agentId === agentId);\n\n      await Promise.allSettled(\n        sessions.map((session) => this.sessionManager.terminateSession(session.id)),\n      );\n\n      // Remove agent\n      this.agents.delete(agentId);\n\n      // Emit event\n      this.eventBus.emit(SystemEvents.AGENT_TERMINATED, {\n        agentId,\n        reason: 'User requested',\n      });\n    } catch (error) {\n      this.logger.error('Failed to terminate agent', { agentId, error });\n      throw error;\n    }\n  }\n\n  async assignTask(task: Task): Promise<void> {\n    if (!this.initialized) {\n      throw new SystemError('Orchestrator not initialized');\n    }\n\n    // Validate task\n    this.validateTask(task);\n\n    // Store task in history\n    this.taskHistory.set(task.id, task);\n\n    try {\n      await this.taskAssignmentCircuitBreaker.execute(async () => {\n        // Add to queue if no agent assigned\n        if (!task.assignedAgent) {\n          if (this.taskQueue.length >= this.config.orchestrator.taskQueueSize) {\n            throw new SystemError('Task queue is full');\n          }\n\n          this.taskQueue.push(task);\n          this.eventBus.emit(SystemEvents.TASK_CREATED, { task });\n\n          // Try to assign immediately\n          await this.processTaskQueue();\n          return;\n        }\n\n        // Assign to specific agent\n        const agent = this.agents.get(task.assignedAgent);\n        if (!agent) {\n          throw new SystemError(`Agent not found: ${task.assignedAgent}`);\n        }\n\n        await this.coordinationManager.assignTask(task, task.assignedAgent);\n\n        this.eventBus.emit(SystemEvents.TASK_ASSIGNED, {\n          taskId: task.id,\n          agentId: task.assignedAgent,\n        });\n      });\n    } catch (error) {\n      this.logger.error('Failed to assign task', { taskId: task.id, error });\n      throw error;\n    }\n  }\n\n  async getHealthStatus(): Promise<HealthStatus> {\n    try {\n      return await this.healthCheckCircuitBreaker.execute(async () => {\n        const components: Record<string, ComponentHealth> = {};\n\n        // Check all components in parallel\n        const [terminal, memory, coordination, mcp] = await Promise.allSettled([\n          this.getComponentHealth(\n            'Terminal Manager',\n            async () => await this.terminalManager.getHealthStatus(),\n          ),\n          this.getComponentHealth(\n            'Memory Manager',\n            async () => await this.memoryManager.getHealthStatus(),\n          ),\n          this.getComponentHealth(\n            'Coordination Manager',\n            async () => await this.coordinationManager.getHealthStatus(),\n          ),\n          this.getComponentHealth('MCP Server', async () => await this.mcpServer.getHealthStatus()),\n        ]);\n\n        // Process results\n        components.terminal = this.processHealthResult(terminal, 'Terminal Manager');\n        components.memory = this.processHealthResult(memory, 'Memory Manager');\n        components.coordination = this.processHealthResult(coordination, 'Coordination Manager');\n        components.mcp = this.processHealthResult(mcp, 'MCP Server');\n\n        // Add orchestrator self-check\n        components.orchestrator = {\n          name: 'Orchestrator',\n          status: 'healthy',\n          lastCheck: new Date(),\n          metrics: {\n            uptime: Date.now() - this.startTime,\n            activeAgents: this.agents.size,\n            queuedTasks: this.taskQueue.length,\n            memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024, // MB\n          },\n        };\n\n        // Determine overall status\n        const statuses = Object.values(components).map((c) => c.status);\n        let overallStatus: HealthStatus['status'] = 'healthy';\n\n        if (statuses.some((s) => s === 'unhealthy')) {\n          overallStatus = 'unhealthy';\n        } else if (statuses.some((s) => s === 'degraded')) {\n          overallStatus = 'degraded';\n        }\n\n        return {\n          status: overallStatus,\n          components,\n          timestamp: new Date(),\n        };\n      });\n    } catch (error) {\n      this.logger.error('Health check failed', error);\n\n      // Return degraded status if health check fails\n      return {\n        status: 'degraded',\n        components: {\n          orchestrator: {\n            name: 'Orchestrator',\n            status: 'degraded',\n            lastCheck: new Date(),\n            error: 'Health check circuit breaker open',\n          },\n        },\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  async getMetrics(): Promise<OrchestratorMetrics> {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    const avgTaskDuration =\n      this.metrics.completedTasks > 0\n        ? this.metrics.totalTaskDuration / this.metrics.completedTasks\n        : 0;\n\n    return {\n      uptime: Date.now() - this.startTime,\n      totalAgents: this.agents.size,\n      activeAgents: this.sessionManager.getActiveSessions().length,\n      totalTasks: this.taskHistory.size,\n      completedTasks: this.metrics.completedTasks,\n      failedTasks: this.metrics.failedTasks,\n      queuedTasks: this.taskQueue.length,\n      avgTaskDuration,\n      memoryUsage: memUsage,\n      cpuUsage: cpuUsage,\n      timestamp: new Date(),\n    };\n  }\n\n  async performMaintenance(): Promise<void> {\n    this.logger.debug('Performing maintenance tasks');\n\n    try {\n      // Clean up terminated sessions\n      await this.cleanupTerminatedSessions();\n\n      // Clean up old task history\n      await this.cleanupTaskHistory();\n\n      // Perform component maintenance\n      await Promise.allSettled([\n        this.terminalManager.performMaintenance(),\n        this.memoryManager.performMaintenance(),\n        this.coordinationManager.performMaintenance(),\n      ]);\n\n      // Persist current state\n      await this.sessionManager.persistSessions();\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n\n      this.logger.debug('Maintenance tasks completed');\n    } catch (error) {\n      this.logger.error('Error during maintenance', error);\n    }\n  }\n\n  private setupEventHandlers(): void {\n    // Handle task lifecycle events\n    this.eventBus.on(SystemEvents.TASK_STARTED, (data: unknown) => {\n      const { taskId, agentId } = data as { taskId: string; agentId: string };\n      const task = this.taskHistory.get(taskId);\n      if (task) {\n        task.status = 'running';\n        task.startedAt = new Date();\n      }\n    });\n\n    this.eventBus.on(SystemEvents.TASK_COMPLETED, async (data: unknown) => {\n      const { taskId, result } = data as { taskId: string; result: unknown };\n      const task = this.taskHistory.get(taskId);\n      if (task) {\n        task.status = 'completed';\n        task.completedAt = new Date();\n        if (result !== undefined) {\n          task.output = result as Record<string, unknown>;\n        }\n\n        // Update metrics\n        this.metrics.completedTasks++;\n        if (task.startedAt) {\n          this.metrics.totalTaskDuration += task.completedAt.getTime() - task.startedAt.getTime();\n        }\n      }\n\n      await this.processTaskQueue();\n    });\n\n    this.eventBus.on(SystemEvents.TASK_FAILED, async (data: unknown) => {\n      const { taskId, error } = data as { taskId: string; error: Error };\n      const task = this.taskHistory.get(taskId);\n      if (task) {\n        task.status = 'failed';\n        task.completedAt = new Date();\n        task.error = error;\n\n        // Update metrics\n        this.metrics.failedTasks++;\n      }\n\n      // Retry or requeue based on configuration\n      await this.handleTaskFailure(taskId, error);\n    });\n\n    // Handle agent events\n    this.eventBus.on(SystemEvents.AGENT_ERROR, async (data: unknown) => {\n      const { agentId, error } = data as { agentId: string; error: Error };\n      this.logger.error('Agent error', { agentId, error });\n\n      // Implement agent recovery\n      await this.handleAgentError(agentId, error);\n    });\n\n    this.eventBus.on(SystemEvents.AGENT_IDLE, async (data: unknown) => {\n      const { agentId } = data as { agentId: string };\n      // Update session status\n      const sessions = this.sessionManager.getActiveSessions().filter((s) => s.agentId === agentId);\n      sessions.forEach((s) => (s.status = 'idle'));\n\n      // Try to assign queued tasks\n      await this.processTaskQueue();\n    });\n\n    // Handle system events\n    this.eventBus.on(SystemEvents.SYSTEM_ERROR, (data: unknown) => {\n      const { error, component } = data as { error: Error; component: string };\n      this.logger.error('System error', { component, error });\n\n      // Implement system-level error recovery\n      this.handleSystemError(component, error);\n    });\n\n    // Handle resource events\n    this.eventBus.on(SystemEvents.DEADLOCK_DETECTED, (data: unknown) => {\n      const { agents, resources } = data as { agents: string[]; resources: string[] };\n      this.logger.error('Deadlock detected', { agents, resources });\n\n      // Implement deadlock resolution\n      this.resolveDeadlock(agents, resources);\n    });\n  }\n\n  private startHealthChecks(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        const health = await this.getHealthStatus();\n        this.eventBus.emit(SystemEvents.SYSTEM_HEALTHCHECK, { status: health });\n\n        if (health.status === 'unhealthy') {\n          this.logger.warn('System health check failed', health);\n\n          // Attempt recovery for unhealthy components\n          await this.recoverUnhealthyComponents(health);\n        }\n      } catch (error) {\n        this.logger.error('Health check error', error);\n      }\n    }, this.config.orchestrator.healthCheckInterval);\n  }\n\n  private startMaintenanceTasks(): void {\n    this.maintenanceInterval = setInterval(async () => {\n      await this.performMaintenance();\n    }, this.config.orchestrator.maintenanceInterval || 300000); // 5 minutes default\n  }\n\n  private startMetricsCollection(): void {\n    this.metricsInterval = setInterval(async () => {\n      try {\n        const metrics = await this.getMetrics();\n        this.logger.debug('Metrics collected', metrics);\n\n        // Emit metrics event for monitoring systems\n        this.eventBus.emit('metrics:collected', metrics);\n      } catch (error) {\n        this.logger.error('Metrics collection error', error);\n      }\n    }, this.config.orchestrator.metricsInterval || 60000); // 1 minute default\n  }\n\n  private stopBackgroundTasks(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    if (this.maintenanceInterval) {\n      clearInterval(this.maintenanceInterval);\n    }\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval);\n    }\n  }\n\n  private async shutdownComponents(): Promise<void> {\n    const shutdownTasks = [\n      this.shutdownComponent('Terminal Manager', () => this.terminalManager.shutdown()),\n      this.shutdownComponent('Memory Manager', () => this.memoryManager.shutdown()),\n      this.shutdownComponent('Coordination Manager', () => this.coordinationManager.shutdown()),\n      this.shutdownComponent('MCP Server', () => this.mcpServer.stop()),\n    ];\n\n    const results = await Promise.allSettled(shutdownTasks);\n\n    // Log any shutdown failures\n    results.forEach((result, index) => {\n      if (result.status === 'rejected') {\n        const componentName = [\n          'Terminal Manager',\n          'Memory Manager',\n          'Coordination Manager',\n          'MCP Server',\n        ][index];\n        this.logger.error(`Failed to shutdown ${componentName}`, result.reason);\n      }\n    });\n  }\n\n  private async emergencyShutdown(): Promise<void> {\n    this.logger.warn('Performing emergency shutdown');\n\n    try {\n      // Force stop all components\n      await Promise.allSettled([\n        this.terminalManager.shutdown().catch(() => {}),\n        this.memoryManager.shutdown().catch(() => {}),\n        this.coordinationManager.shutdown().catch(() => {}),\n        this.mcpServer.stop().catch(() => {}),\n      ]);\n    } catch (error) {\n      this.logger.error('Emergency shutdown error', error);\n    }\n  }\n\n  private async processTaskQueue(): Promise<void> {\n    if (this.taskQueue.length === 0) {\n      return;\n    }\n\n    const availableAgents = await this.getAvailableAgents();\n\n    while (this.taskQueue.length > 0 && availableAgents.length > 0) {\n      const task = this.taskQueue.shift()!;\n      const agent = this.selectAgentForTask(task, availableAgents);\n\n      if (agent) {\n        task.assignedAgent = agent.id;\n        task.status = 'assigned';\n\n        try {\n          await this.coordinationManager.assignTask(task, agent.id);\n\n          this.eventBus.emit(SystemEvents.TASK_ASSIGNED, {\n            taskId: task.id,\n            agentId: agent.id,\n          });\n\n          // Remove agent from available list\n          const index = availableAgents.indexOf(agent);\n          availableAgents.splice(index, 1);\n        } catch (error) {\n          // Put task back in queue\n          this.taskQueue.unshift(task);\n          this.logger.error('Failed to assign task', { taskId: task.id, error });\n          break;\n        }\n      } else {\n        // No suitable agent, put task back\n        this.taskQueue.unshift(task);\n        break;\n      }\n    }\n  }\n\n  private async getAvailableAgents(): Promise<AgentProfile[]> {\n    const sessions = this.sessionManager.getActiveSessions();\n    const available: AgentProfile[] = [];\n\n    for (const session of sessions) {\n      if (session.status === 'idle' || session.status === 'active') {\n        const profile = this.agents.get(session.agentId);\n        if (profile) {\n          try {\n            const taskCount = await this.coordinationManager.getAgentTaskCount(profile.id);\n            if (taskCount < profile.maxConcurrentTasks) {\n              available.push(profile);\n            }\n          } catch (error) {\n            this.logger.error('Failed to get agent task count', { agentId: profile.id, error });\n          }\n        }\n      }\n    }\n\n    return available.sort((a, b) => b.priority - a.priority);\n  }\n\n  private selectAgentForTask(task: Task, agents: AgentProfile[]): AgentProfile | undefined {\n    // Score agents based on capabilities, load, and priority\n    const scoredAgents = agents.map((agent) => {\n      let score = agent.priority * 10;\n\n      // Check capability match\n      const requiredCapabilities = (task.metadata?.requiredCapabilities as string[]) || [];\n      const matchedCapabilities = requiredCapabilities.filter((cap) =>\n        agent.capabilities.includes(cap),\n      ).length;\n\n      if (requiredCapabilities.length > 0 && matchedCapabilities === 0) {\n        return { agent, score: -1 }; // Can't handle task\n      }\n\n      score += matchedCapabilities * 5;\n\n      // Prefer agents with matching type\n      if (task.type === agent.type) {\n        score += 20;\n      }\n\n      return { agent, score };\n    });\n\n    // Filter out agents that can't handle the task\n    const eligibleAgents = scoredAgents.filter(({ score }) => score >= 0);\n\n    if (eligibleAgents.length === 0) {\n      return undefined;\n    }\n\n    // Select agent with highest score\n    eligibleAgents.sort((a, b) => b.score - a.score);\n    return eligibleAgents[0].agent;\n  }\n\n  private async getComponentHealth(\n    name: string,\n    check: () => Promise<{ healthy: boolean; error?: string; metrics?: Record<string, number> }>,\n  ): Promise<ComponentHealth> {\n    try {\n      const result = await Promise.race([\n        check(),\n        delay(5000).then(() => ({ healthy: false, error: 'Health check timeout' })),\n      ]);\n\n      const health: ComponentHealth = {\n        name,\n        status: result.healthy ? 'healthy' : 'unhealthy',\n        lastCheck: new Date(),\n      };\n      if (result.error !== undefined) {\n        health.error = result.error;\n      }\n      if ('metrics' in result && result.metrics !== undefined) {\n        health.metrics = result.metrics;\n      }\n      return health;\n    } catch (error) {\n      return {\n        name,\n        status: 'unhealthy',\n        lastCheck: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private processHealthResult(\n    result: PromiseSettledResult<ComponentHealth>,\n    componentName: string,\n  ): ComponentHealth {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return {\n        name: componentName,\n        status: 'unhealthy',\n        lastCheck: new Date(),\n        error: result.reason?.message || 'Health check failed',\n      };\n    }\n  }\n\n  private async initializeComponent(name: string, init: () => Promise<void>): Promise<void> {\n    try {\n      await retry(init, { maxAttempts: 3, initialDelay: 2000 });\n      this.logger.info(`${name} initialized`);\n    } catch (error) {\n      this.logger.error(`Failed to initialize ${name}`, error);\n      throw new InitializationError(name, { error });\n    }\n  }\n\n  private async shutdownComponent(name: string, shutdown: () => Promise<void>): Promise<void> {\n    try {\n      await Promise.race([\n        shutdown(),\n        delay(10000), // 10 second timeout per component\n      ]);\n      this.logger.info(`${name} shut down`);\n    } catch (error) {\n      this.logger.error(`Failed to shutdown ${name}`, error);\n      throw error;\n    }\n  }\n\n  private validateAgentProfile(profile: AgentProfile): void {\n    if (!profile.id || !profile.name || !profile.type) {\n      throw new Error('Invalid agent profile: missing required fields');\n    }\n\n    if (profile.maxConcurrentTasks < 1) {\n      throw new Error('Invalid agent profile: maxConcurrentTasks must be at least 1');\n    }\n\n    if (this.agents.has(profile.id)) {\n      throw new Error(`Agent with ID ${profile.id} already exists`);\n    }\n  }\n\n  private validateTask(task: Task): void {\n    if (!task.id || !task.type || !task.description) {\n      throw new Error('Invalid task: missing required fields');\n    }\n\n    if (task.priority < 0 || task.priority > 100) {\n      throw new Error('Invalid task: priority must be between 0 and 100');\n    }\n\n    if (this.taskHistory.has(task.id)) {\n      throw new Error(`Task with ID ${task.id} already exists`);\n    }\n  }\n\n  private async handleAgentError(agentId: string, error: Error): Promise<void> {\n    const profile = this.agents.get(agentId);\n    if (!profile) {\n      return;\n    }\n\n    // Log error details\n    this.logger.error('Handling agent error', { agentId, error });\n\n    // Check if agent should be restarted\n    const errorCount = (profile.metadata?.errorCount as number) || 0;\n    profile.metadata = { ...profile.metadata, errorCount: errorCount + 1 };\n\n    if (errorCount < 3) {\n      // Attempt to restart agent\n      try {\n        await this.terminateAgent(agentId);\n        await delay(2000); // Wait before restart\n        await this.spawnAgent({ ...profile, metadata: { ...profile.metadata, errorCount: 0 } });\n        this.logger.info('Agent restarted after error', { agentId });\n      } catch (restartError) {\n        this.logger.error('Failed to restart agent', { agentId, error: restartError });\n      }\n    } else {\n      // Too many errors, terminate agent\n      this.logger.error('Agent exceeded error threshold, terminating', { agentId, errorCount });\n      await this.terminateAgent(agentId);\n    }\n  }\n\n  private async handleTaskFailure(taskId: string, error: Error): Promise<void> {\n    const task = this.taskHistory.get(taskId);\n    if (!task) {\n      return;\n    }\n\n    const retryCount = (task.metadata?.retryCount as number) || 0;\n    const maxRetries = this.config.orchestrator.taskMaxRetries || 3;\n\n    if (retryCount < maxRetries) {\n      // Retry task\n      task.metadata = { ...task.metadata, retryCount: retryCount + 1 };\n      task.status = 'queued';\n      delete task.assignedAgent;\n\n      // Add back to queue with delay\n      setTimeout(\n        () => {\n          this.taskQueue.push(task);\n          this.processTaskQueue();\n        },\n        Math.pow(2, retryCount) * 1000,\n      ); // Exponential backoff\n\n      this.logger.info('Task queued for retry', { taskId, retryCount: retryCount + 1 });\n    } else {\n      this.logger.error('Task exceeded retry limit', { taskId, retryCount });\n    }\n  }\n\n  private handleSystemError(component: string, error: Error): void {\n    // Implement system-level error recovery strategies\n    this.logger.error('Handling system error', { component, error });\n\n    // TODO: Implement specific recovery strategies based on component and error type\n  }\n\n  private async resolveDeadlock(agents: string[], resources: string[]): Promise<void> {\n    this.logger.warn('Resolving deadlock', { agents, resources });\n\n    // Simple deadlock resolution: cancel lowest priority agent's tasks\n    const agentProfiles = agents.map((id) => this.agents.get(id)).filter(Boolean) as AgentProfile[];\n\n    if (agentProfiles.length === 0) {\n      return;\n    }\n\n    // Sort by priority (lowest first)\n    agentProfiles.sort((a, b) => a.priority - b.priority);\n\n    // Cancel tasks for lowest priority agent\n    const targetAgent = agentProfiles[0];\n    await this.cancelAgentTasks(targetAgent.id);\n\n    this.logger.info('Deadlock resolved by cancelling tasks', { agentId: targetAgent.id });\n  }\n\n  private async cancelAgentTasks(agentId: string): Promise<void> {\n    try {\n      const tasks = await this.coordinationManager.getAgentTasks(agentId);\n\n      for (const task of tasks) {\n        await this.coordinationManager.cancelTask(task.id);\n\n        // Update task status\n        const trackedTask = this.taskHistory.get(task.id);\n        if (trackedTask) {\n          trackedTask.status = 'cancelled';\n          trackedTask.completedAt = new Date();\n        }\n\n        this.eventBus.emit(SystemEvents.TASK_CANCELLED, {\n          taskId: task.id,\n          reason: 'Agent termination',\n        });\n      }\n    } catch (error) {\n      this.logger.error('Failed to cancel agent tasks', { agentId, error });\n    }\n  }\n\n  private startAgentHealthMonitoring(agentId: string): void {\n    // TODO: Implement periodic health checks for individual agents\n  }\n\n  private async recoverUnhealthyComponents(health: HealthStatus): Promise<void> {\n    for (const [name, component] of Object.entries(health.components)) {\n      if (component.status === 'unhealthy') {\n        this.logger.warn('Attempting to recover unhealthy component', { name });\n\n        // TODO: Implement component-specific recovery strategies\n        switch (name) {\n          case 'Terminal Manager':\n            // Restart terminal pools, etc.\n            break;\n          case 'Memory Manager':\n            // Clear cache, reconnect to backends, etc.\n            break;\n          case 'Coordination Manager':\n            // Reset locks, clear message queues, etc.\n            break;\n          case 'MCP Server':\n            // Restart server, reset connections, etc.\n            break;\n        }\n      }\n    }\n  }\n\n  private async cleanupTerminatedSessions(): Promise<void> {\n    const allSessions = this.sessionManager.getActiveSessions();\n    const terminatedSessions = allSessions.filter((s) => (s as any).status === 'terminated');\n\n    const cutoffTime = Date.now() - (this.config.orchestrator.sessionRetentionMs || 3600000); // 1 hour default\n\n    for (const session of terminatedSessions) {\n      const typedSession = session as any;\n      if (typedSession.endTime && typedSession.endTime.getTime() < cutoffTime) {\n        await this.sessionManager.terminateSession(typedSession.id);\n        this.logger.debug('Cleaned up old session', { sessionId: typedSession.id });\n      }\n    }\n  }\n\n  private async cleanupTaskHistory(): Promise<void> {\n    const cutoffTime = Date.now() - (this.config.orchestrator.taskHistoryRetentionMs || 86400000); // 24 hours default\n\n    for (const [taskId, task] of this.taskHistory.entries()) {\n      if (task.completedAt && task.completedAt.getTime() < cutoffTime) {\n        this.taskHistory.delete(taskId);\n        this.logger.debug('Cleaned up old task', { taskId });\n      }\n    }\n  }\n\n  private async processShutdownTasks(): Promise<void> {\n    // Process any critical tasks before shutdown\n    const criticalTasks = this.taskQueue.filter(\n      (t) => t.priority >= 90 || t.metadata?.critical === true,\n    );\n\n    if (criticalTasks.length > 0) {\n      this.logger.info('Processing critical tasks before shutdown', {\n        count: criticalTasks.length,\n      });\n\n      // TODO: Implement critical task processing\n    }\n  }\n\n  /**\n   * Get Claude API client instance\n   */\n  getClaudeClient(): ClaudeAPIClient | undefined {\n    return this.claudeClient;\n  }\n\n  /**\n   * Get parallel executor instance\n   */\n  getParallelExecutor(): ParallelSwarmExecutor | undefined {\n    return this.parallelExecutor;\n  }\n\n  /**\n   * Get query controller instance\n   */\n  getQueryController(): RealTimeQueryController | undefined {\n    return this.queryController;\n  }\n\n  /**\n   * Update Claude API configuration dynamically\n   */\n  updateClaudeConfig(config: Partial<Config['claude']>): void {\n    this.configManager.setClaudeConfig(config);\n\n    if (this.claudeClient) {\n      this.claudeClient.updateConfig(config);\n    } else if (this.configManager.isClaudeAPIConfigured()) {\n      // Initialize Claude client with new config\n      try {\n        this.claudeClient = new ClaudeAPIClient(this.logger, this.configManager);\n        this.logger.info('Claude API client initialized with new configuration');\n      } catch (error) {\n        this.logger.error('Failed to initialize Claude API client', error);\n      }\n    }\n  }\n\n  /**\n   * Execute a Claude API request\n   */\n  async executeClaudeRequest(\n    prompt: string,\n    options?: {\n      model?: string;\n      temperature?: number;\n      maxTokens?: number;\n      systemPrompt?: string;\n    },\n  ): Promise<string | null> {\n    if (!this.claudeClient) {\n      this.logger.error('Claude API client not initialized');\n      return null;\n    }\n\n    try {\n      const response = await this.claudeClient.complete(prompt, options as any);\n      return response;\n    } catch (error) {\n      this.logger.error('Claude API request failed', error);\n      return null;\n    }\n  }\n}\n"],"names":["SystemEvents","SystemError","InitializationError","ShutdownError","delay","retry","circuitBreaker","mkdir","writeFile","readFile","join","dirname","ClaudeAPIClient","ConfigManager","ParallelSwarmExecutor","RealTimeQueryController","SessionManager","sessions","Map","sessionProfiles","persistencePath","persistenceCircuitBreaker","terminalManager","memoryManager","eventBus","logger","config","orchestrator","dataDir","threshold","timeout","resetTimeout","createSession","profile","terminalId","spawnTerminal","maxAttempts","initialDelay","memoryBankId","createBank","id","session","Date","now","Math","random","toString","substr","agentId","startTime","status","lastActivity","set","info","sessionId","persistSessions","catch","error","getSession","get","getActiveSessions","Array","from","values","filter","terminateSession","Error","endTime","Promise","race","terminateTerminal","then","closeBank","delete","duration","getTime","terminateAllSessions","batchSize","i","length","batch","slice","allSettled","map","removeSession","execute","data","s","taskQueue","metrics","completedTasks","failedTasks","totalTaskDuration","savedAt","recursive","JSON","stringify","debug","count","restoreSessions","persistence","parse","sessionsToRestore","sessionData","Object","assign","code","Orchestrator","initialized","shutdownInProgress","sessionManager","healthCheckInterval","maintenanceInterval","metricsInterval","agents","taskHistory","claudeClient","configManager","parallelExecutor","queryController","healthCheckCircuitBreaker","taskAssignmentCircuitBreaker","coordinationManager","mcpServer","getInstance","initialize","all","initializeComponent","start","isClaudeAPIConfigured","model","getConfig","temperature","warn","allowPause","allowModelChange","allowPermissionChange","monitoringInterval","setupEventHandlers","startHealthChecks","startMaintenanceTasks","startMetricsCollection","initDuration","emit","SYSTEM_READY","timestamp","emergencyShutdown","shutdown","shutdownStart","stopBackgroundTasks","processShutdownTasks","shutdownComponents","shutdownTimeout","shutdownDuration","SYSTEM_SHUTDOWN","reason","spawnAgent","size","maxConcurrentAgents","validateAgentProfile","type","AGENT_SPAWNED","startAgentHealthMonitoring","spawnParallelAgents","profiles","forEach","types","p","agentConfigs","agentType","task","capabilities","priority","result","maxParallelAgents","min","sessionMap","successfulAgents","includes","parallel","successful","failed","failedAgents","totalDuration","performanceGain","getMetrics","terminateAgent","cancelAgentTasks","AGENT_TERMINATED","assignTask","validateTask","assignedAgent","taskQueueSize","push","TASK_CREATED","processTaskQueue","agent","TASK_ASSIGNED","taskId","getHealthStatus","components","terminal","memory","coordination","mcp","getComponentHealth","processHealthResult","name","lastCheck","uptime","activeAgents","queuedTasks","memoryUsage","process","heapUsed","statuses","c","overallStatus","some","memUsage","cpuUsage","avgTaskDuration","totalAgents","totalTasks","performMaintenance","cleanupTerminatedSessions","cleanupTaskHistory","global","gc","on","TASK_STARTED","startedAt","TASK_COMPLETED","completedAt","undefined","output","TASK_FAILED","handleTaskFailure","AGENT_ERROR","handleAgentError","AGENT_IDLE","SYSTEM_ERROR","component","handleSystemError","DEADLOCK_DETECTED","resources","resolveDeadlock","setInterval","health","SYSTEM_HEALTHCHECK","recoverUnhealthyComponents","clearInterval","shutdownTasks","shutdownComponent","stop","results","index","componentName","availableAgents","getAvailableAgents","shift","selectAgentForTask","indexOf","splice","unshift","available","taskCount","getAgentTaskCount","maxConcurrentTasks","sort","a","b","scoredAgents","score","requiredCapabilities","metadata","matchedCapabilities","cap","eligibleAgents","check","healthy","message","value","init","has","description","errorCount","restartError","retryCount","maxRetries","taskMaxRetries","setTimeout","pow","agentProfiles","Boolean","targetAgent","tasks","getAgentTasks","cancelTask","trackedTask","TASK_CANCELLED","entries","allSessions","terminatedSessions","cutoffTime","sessionRetentionMs","typedSession","taskHistoryRetentionMs","criticalTasks","t","critical","getClaudeClient","getParallelExecutor","getQueryController","updateClaudeConfig","setClaudeConfig","updateConfig","executeClaudeRequest","prompt","options","response","complete"],"mappings":"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"}