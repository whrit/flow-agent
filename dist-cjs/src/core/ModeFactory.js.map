{"version":3,"sources":["../../../src/core/ModeFactory.ts"],"sourcesContent":["/**\n * ModeFactory - Creates specific initialization modes\n * Implements the Factory pattern for different initialization strategies\n */\n\nimport { IInitMode, InitMode } from '../types/interfaces.js';\nimport { StandardInit } from '../modes/StandardInit.js';\nimport { GitHubInit } from '../modes/GitHubInit.js';\nimport { HiveMindInit } from '../modes/HiveMindInit.js';\nimport { SparcInit } from '../modes/SparcInit.js';\nimport { NeuralInit } from '../modes/NeuralInit.js';\nimport { EnterpriseInit } from '../modes/EnterpriseInit.js';\n\nexport class ModeFactory {\n  private modes: Map<InitMode, () => IInitMode> = new Map();\n\n  constructor() {\n    this.registerModes();\n  }\n\n  /**\n   * Register all available initialization modes\n   */\n  private registerModes(): void {\n    this.modes.set('standard', () => new StandardInit());\n    this.modes.set('github', () => new GitHubInit());\n    this.modes.set('hive-mind', () => new HiveMindInit());\n    this.modes.set('sparc', () => new SparcInit());\n    this.modes.set('neural', () => new NeuralInit());\n    this.modes.set('enterprise', () => new EnterpriseInit());\n  }\n\n  /**\n   * Create a specific initialization mode\n   */\n  createMode(mode: InitMode): IInitMode {\n    const modeFactory = this.modes.get(mode);\n\n    if (!modeFactory) {\n      throw new Error(`Unknown initialization mode: ${mode}. Available modes: ${this.getAvailableModes().join(', ')}`);\n    }\n\n    return modeFactory();\n  }\n\n  /**\n   * Get list of available initialization modes\n   */\n  getAvailableModes(): InitMode[] {\n    return Array.from(this.modes.keys());\n  }\n\n  /**\n   * Get mode descriptions\n   */\n  getModeDescriptions(): Record<InitMode, string> {\n    const descriptions: Partial<Record<InitMode, string>> = {};\n\n    for (const mode of this.getAvailableModes()) {\n      try {\n        const modeInstance = this.createMode(mode);\n        descriptions[mode] = modeInstance.getDescription();\n      } catch (error) {\n        descriptions[mode] = `Error loading mode: ${error}`;\n      }\n    }\n\n    return descriptions as Record<InitMode, string>;\n  }\n\n  /**\n   * Validate if a mode exists and is functional\n   */\n  validateMode(mode: InitMode): boolean {\n    try {\n      const modeInstance = this.createMode(mode);\n      return modeInstance.validate();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get required components for a specific mode\n   */\n  getRequiredComponents(mode: InitMode): string[] {\n    try {\n      const modeInstance = this.createMode(mode);\n      return modeInstance.getRequiredComponents();\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Register a custom initialization mode\n   */\n  registerCustomMode(mode: InitMode, factory: () => IInitMode): void {\n    this.modes.set(mode, factory);\n  }\n\n  /**\n   * Remove a registered mode\n   */\n  unregisterMode(mode: InitMode): boolean {\n    return this.modes.delete(mode);\n  }\n}"],"names":["StandardInit","GitHubInit","HiveMindInit","SparcInit","NeuralInit","EnterpriseInit","ModeFactory","modes","Map","registerModes","set","createMode","mode","modeFactory","get","Error","getAvailableModes","join","Array","from","keys","getModeDescriptions","descriptions","modeInstance","getDescription","error","validateMode","validate","getRequiredComponents","registerCustomMode","factory","unregisterMode","delete"],"mappings":"AAMA,SAASA,YAAY,QAAQ,2BAA2B;AACxD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,cAAc,QAAQ,6BAA6B;AAE5D,OAAO,MAAMC;IACHC,QAAwC,IAAIC,MAAM;IAE1D,aAAc;QACZ,IAAI,CAACC,aAAa;IACpB;IAKQA,gBAAsB;QAC5B,IAAI,CAACF,KAAK,CAACG,GAAG,CAAC,YAAY,IAAM,IAAIV;QACrC,IAAI,CAACO,KAAK,CAACG,GAAG,CAAC,UAAU,IAAM,IAAIT;QACnC,IAAI,CAACM,KAAK,CAACG,GAAG,CAAC,aAAa,IAAM,IAAIR;QACtC,IAAI,CAACK,KAAK,CAACG,GAAG,CAAC,SAAS,IAAM,IAAIP;QAClC,IAAI,CAACI,KAAK,CAACG,GAAG,CAAC,UAAU,IAAM,IAAIN;QACnC,IAAI,CAACG,KAAK,CAACG,GAAG,CAAC,cAAc,IAAM,IAAIL;IACzC;IAKAM,WAAWC,IAAc,EAAa;QACpC,MAAMC,cAAc,IAAI,CAACN,KAAK,CAACO,GAAG,CAACF;QAEnC,IAAI,CAACC,aAAa;YAChB,MAAM,IAAIE,MAAM,CAAC,6BAA6B,EAAEH,KAAK,mBAAmB,EAAE,IAAI,CAACI,iBAAiB,GAAGC,IAAI,CAAC,OAAO;QACjH;QAEA,OAAOJ;IACT;IAKAG,oBAAgC;QAC9B,OAAOE,MAAMC,IAAI,CAAC,IAAI,CAACZ,KAAK,CAACa,IAAI;IACnC;IAKAC,sBAAgD;QAC9C,MAAMC,eAAkD,CAAC;QAEzD,KAAK,MAAMV,QAAQ,IAAI,CAACI,iBAAiB,GAAI;YAC3C,IAAI;gBACF,MAAMO,eAAe,IAAI,CAACZ,UAAU,CAACC;gBACrCU,YAAY,CAACV,KAAK,GAAGW,aAAaC,cAAc;YAClD,EAAE,OAAOC,OAAO;gBACdH,YAAY,CAACV,KAAK,GAAG,CAAC,oBAAoB,EAAEa,OAAO;YACrD;QACF;QAEA,OAAOH;IACT;IAKAI,aAAad,IAAc,EAAW;QACpC,IAAI;YACF,MAAMW,eAAe,IAAI,CAACZ,UAAU,CAACC;YACrC,OAAOW,aAAaI,QAAQ;QAC9B,EAAE,OAAOF,OAAO;YACd,OAAO;QACT;IACF;IAKAG,sBAAsBhB,IAAc,EAAY;QAC9C,IAAI;YACF,MAAMW,eAAe,IAAI,CAACZ,UAAU,CAACC;YACrC,OAAOW,aAAaK,qBAAqB;QAC3C,EAAE,OAAOH,OAAO;YACd,OAAO,EAAE;QACX;IACF;IAKAI,mBAAmBjB,IAAc,EAAEkB,OAAwB,EAAQ;QACjE,IAAI,CAACvB,KAAK,CAACG,GAAG,CAACE,MAAMkB;IACvB;IAKAC,eAAenB,IAAc,EAAW;QACtC,OAAO,IAAI,CAACL,KAAK,CAACyB,MAAM,CAACpB;IAC3B;AACF"}