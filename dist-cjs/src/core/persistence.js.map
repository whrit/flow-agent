{"version":3,"sources":["../../../src/core/persistence.ts"],"sourcesContent":["/**\n * Persistence layer for Claude-Flow using SQLite\n */\n\nimport Database from 'better-sqlite3';\nimport { join } from 'path';\nimport { mkdir } from 'fs/promises';\n\nexport interface PersistedAgent {\n  id: string;\n  type: string;\n  name: string;\n  status: string;\n  capabilities: string;\n  systemPrompt: string;\n  maxConcurrentTasks: number;\n  priority: number;\n  createdAt: number;\n}\n\nexport interface PersistedTask {\n  id: string;\n  type: string;\n  description: string;\n  status: string;\n  priority: number;\n  dependencies: string;\n  metadata: string;\n  assignedAgent?: string;\n  progress: number;\n  error?: string;\n  createdAt: number;\n  completedAt?: number;\n}\n\nexport class PersistenceManager {\n  private db: Database.Database;\n  private dbPath: string;\n\n  constructor(dataDir: string = './memory') {\n    this.dbPath = join(dataDir, 'claude-flow.db');\n  }\n\n  async initialize(): Promise<void> {\n    // Ensure directory exists\n    await mkdir(join(this.dbPath, '..'), { recursive: true });\n\n    // Open database\n    this.db = new Database(this.dbPath);\n\n    // Create tables if they don't exist\n    this.createTables();\n  }\n\n  private createTables(): void {\n    // Agents table\n    this.db.execute(`\n      CREATE TABLE IF NOT EXISTS agents (\n        id TEXT PRIMARY KEY,\n        type TEXT NOT NULL,\n        name TEXT NOT NULL,\n        status TEXT NOT NULL,\n        capabilities TEXT NOT NULL,\n        system_prompt TEXT NOT NULL,\n        max_concurrent_tasks INTEGER NOT NULL,\n        priority INTEGER NOT NULL,\n        created_at INTEGER NOT NULL\n      )\n    `);\n\n    // Tasks table\n    this.db.execute(`\n      CREATE TABLE IF NOT EXISTS tasks (\n        id TEXT PRIMARY KEY,\n        type TEXT NOT NULL,\n        description TEXT NOT NULL,\n        status TEXT NOT NULL,\n        priority INTEGER NOT NULL,\n        dependencies TEXT NOT NULL,\n        metadata TEXT NOT NULL,\n        assigned_agent TEXT,\n        progress INTEGER DEFAULT 0,\n        error TEXT,\n        created_at INTEGER NOT NULL,\n        completed_at INTEGER\n      )\n    `);\n\n    // Sessions table for terminal sessions\n    this.db.execute(`\n      CREATE TABLE IF NOT EXISTS sessions (\n        id TEXT PRIMARY KEY,\n        agent_id TEXT NOT NULL,\n        terminal_id TEXT NOT NULL,\n        status TEXT NOT NULL,\n        created_at INTEGER NOT NULL,\n        FOREIGN KEY (agent_id) REFERENCES agents(id)\n      )\n    `);\n  }\n\n  // Agent operations\n  async saveAgent(agent: PersistedAgent): Promise<void> {\n    const stmt = this.db.prepare(\n      `INSERT OR REPLACE INTO agents \n       (id, type, name, status, capabilities, system_prompt, max_concurrent_tasks, priority, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n    );\n    stmt.run(\n      agent.id,\n      agent.type,\n      agent.name,\n      agent.status,\n      agent.capabilities,\n      agent.systemPrompt,\n      agent.maxConcurrentTasks,\n      agent.priority,\n      agent.createdAt,\n    );\n  }\n\n  async getAgent(id: string): Promise<PersistedAgent | null> {\n    const stmt = this.db.prepare('SELECT * FROM agents WHERE id = ?');\n    const row = stmt.get(id) as any;\n\n    if (!row) return null;\n\n    return {\n      id: row.id,\n      type: row.type,\n      name: row.name,\n      status: row.status,\n      capabilities: row.capabilities,\n      systemPrompt: row.system_prompt,\n      maxConcurrentTasks: row.max_concurrent_tasks,\n      priority: row.priority,\n      createdAt: row.created_at,\n    };\n  }\n\n  async getActiveAgents(): Promise<PersistedAgent[]> {\n    const stmt = this.db.prepare(\n      \"SELECT * FROM agents WHERE status IN ('active', 'idle') ORDER BY created_at DESC\",\n    );\n    const rows = stmt.all() as any[];\n\n    return rows.map((row) => ({\n      id: row.id,\n      type: row.type,\n      name: row.name,\n      status: row.status,\n      capabilities: row.capabilities,\n      systemPrompt: row.system_prompt,\n      maxConcurrentTasks: row.max_concurrent_tasks,\n      priority: row.priority,\n      createdAt: row.created_at,\n    }));\n  }\n\n  async updateAgentStatus(id: string, status: string): Promise<void> {\n    const stmt = this.db.prepare('UPDATE agents SET status = ? WHERE id = ?');\n    stmt.run(status, id);\n  }\n\n  // Task operations\n  async saveTask(task: PersistedTask): Promise<void> {\n    const stmt = this.db.prepare(\n      `INSERT OR REPLACE INTO tasks \n       (id, type, description, status, priority, dependencies, metadata, assigned_agent, progress, error, created_at, completed_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n    );\n    stmt.run(\n      task.id,\n      task.type,\n      task.description,\n      task.status,\n      task.priority,\n      task.dependencies,\n      task.metadata,\n      task.assignedAgent || null,\n      task.progress,\n      task.error || null,\n      task.createdAt,\n      task.completedAt || null,\n    );\n  }\n\n  async getTask(id: string): Promise<PersistedTask | null> {\n    const stmt = this.db.prepare('SELECT * FROM tasks WHERE id = ?');\n    const row = stmt.get(id) as any;\n\n    if (!row) return null;\n\n    return {\n      id: row.id,\n      type: row.type,\n      description: row.description,\n      status: row.status,\n      priority: row.priority,\n      dependencies: row.dependencies,\n      metadata: row.metadata,\n      assignedAgent: row.assigned_agent || undefined,\n      progress: row.progress,\n      error: row.error || undefined,\n      createdAt: row.created_at,\n      completedAt: row.completed_at || undefined,\n    };\n  }\n\n  async getActiveTasks(): Promise<PersistedTask[]> {\n    const stmt = this.db.prepare(\n      \"SELECT * FROM tasks WHERE status IN ('pending', 'in_progress', 'assigned') ORDER BY priority DESC, created_at ASC\",\n    );\n    const rows = stmt.all() as any[];\n\n    return rows.map((row) => ({\n      id: row.id,\n      type: row.type,\n      description: row.description,\n      status: row.status,\n      priority: row.priority,\n      dependencies: row.dependencies,\n      metadata: row.metadata,\n      assignedAgent: row.assigned_agent || undefined,\n      progress: row.progress,\n      error: row.error || undefined,\n      createdAt: row.created_at,\n      completedAt: row.completed_at || undefined,\n    }));\n  }\n\n  async updateTaskStatus(id: string, status: string, assignedAgent?: string): Promise<void> {\n    if (assignedAgent) {\n      const stmt = this.db.prepare('UPDATE tasks SET status = ?, assigned_agent = ? WHERE id = ?');\n      stmt.run(status, assignedAgent, id);\n    } else {\n      const stmt = this.db.prepare('UPDATE tasks SET status = ? WHERE id = ?');\n      stmt.run(status, id);\n    }\n  }\n\n  async updateTaskProgress(id: string, progress: number): Promise<void> {\n    const stmt = this.db.prepare('UPDATE tasks SET progress = ? WHERE id = ?');\n    stmt.run(progress, id);\n  }\n\n  // Statistics\n  async getStats(): Promise<{\n    totalAgents: number;\n    activeAgents: number;\n    totalTasks: number;\n    pendingTasks: number;\n    completedTasks: number;\n  }> {\n    const totalAgents = this.db.prepare('SELECT COUNT(*) as count FROM agents').get() as any;\n    const activeAgents = this.db\n      .prepare(\"SELECT COUNT(*) as count FROM agents WHERE status IN ('active', 'idle')\")\n      .get() as any;\n    const totalTasks = this.db.prepare('SELECT COUNT(*) as count FROM tasks').get() as any;\n    const pendingTasks = this.db\n      .prepare(\n        \"SELECT COUNT(*) as count FROM tasks WHERE status IN ('pending', 'in_progress', 'assigned')\",\n      )\n      .get() as any;\n    const completedTasks = this.db\n      .prepare(\"SELECT COUNT(*) as count FROM tasks WHERE status = 'completed'\")\n      .get() as any;\n\n    return {\n      totalAgents: totalAgents.count,\n      activeAgents: activeAgents.count,\n      totalTasks: totalTasks.count,\n      pendingTasks: pendingTasks.count,\n      completedTasks: completedTasks.count,\n    };\n  }\n\n  close(): void {\n    this.db.close();\n  }\n}\n"],"names":["Database","join","mkdir","PersistenceManager","db","dbPath","dataDir","initialize","recursive","createTables","execute","saveAgent","agent","stmt","prepare","run","id","type","name","status","capabilities","systemPrompt","maxConcurrentTasks","priority","createdAt","getAgent","row","get","system_prompt","max_concurrent_tasks","created_at","getActiveAgents","rows","all","map","updateAgentStatus","saveTask","task","description","dependencies","metadata","assignedAgent","progress","error","completedAt","getTask","assigned_agent","undefined","completed_at","getActiveTasks","updateTaskStatus","updateTaskProgress","getStats","totalAgents","activeAgents","totalTasks","pendingTasks","completedTasks","count","close"],"mappings":"AAIA,OAAOA,cAAc,iBAAiB;AACtC,SAASC,IAAI,QAAQ,OAAO;AAC5B,SAASC,KAAK,QAAQ,cAAc;AA6BpC,OAAO,MAAMC;IACHC,GAAsB;IACtBC,OAAe;IAEvB,YAAYC,UAAkB,UAAU,CAAE;QACxC,IAAI,CAACD,MAAM,GAAGJ,KAAKK,SAAS;IAC9B;IAEA,MAAMC,aAA4B;QAEhC,MAAML,MAAMD,KAAK,IAAI,CAACI,MAAM,EAAE,OAAO;YAAEG,WAAW;QAAK;QAGvD,IAAI,CAACJ,EAAE,GAAG,IAAIJ,SAAS,IAAI,CAACK,MAAM;QAGlC,IAAI,CAACI,YAAY;IACnB;IAEQA,eAAqB;QAE3B,IAAI,CAACL,EAAE,CAACM,OAAO,CAAC,CAAC;;;;;;;;;;;;IAYjB,CAAC;QAGD,IAAI,CAACN,EAAE,CAACM,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;IAejB,CAAC;QAGD,IAAI,CAACN,EAAE,CAACM,OAAO,CAAC,CAAC;;;;;;;;;IASjB,CAAC;IACH;IAGA,MAAMC,UAAUC,KAAqB,EAAiB;QACpD,MAAMC,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAC1B,CAAC;;yCAEkC,CAAC;QAEtCD,KAAKE,GAAG,CACNH,MAAMI,EAAE,EACRJ,MAAMK,IAAI,EACVL,MAAMM,IAAI,EACVN,MAAMO,MAAM,EACZP,MAAMQ,YAAY,EAClBR,MAAMS,YAAY,EAClBT,MAAMU,kBAAkB,EACxBV,MAAMW,QAAQ,EACdX,MAAMY,SAAS;IAEnB;IAEA,MAAMC,SAAST,EAAU,EAAkC;QACzD,MAAMH,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;QAC7B,MAAMY,MAAMb,KAAKc,GAAG,CAACX;QAErB,IAAI,CAACU,KAAK,OAAO;QAEjB,OAAO;YACLV,IAAIU,IAAIV,EAAE;YACVC,MAAMS,IAAIT,IAAI;YACdC,MAAMQ,IAAIR,IAAI;YACdC,QAAQO,IAAIP,MAAM;YAClBC,cAAcM,IAAIN,YAAY;YAC9BC,cAAcK,IAAIE,aAAa;YAC/BN,oBAAoBI,IAAIG,oBAAoB;YAC5CN,UAAUG,IAAIH,QAAQ;YACtBC,WAAWE,IAAII,UAAU;QAC3B;IACF;IAEA,MAAMC,kBAA6C;QACjD,MAAMlB,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAC1B;QAEF,MAAMkB,OAAOnB,KAAKoB,GAAG;QAErB,OAAOD,KAAKE,GAAG,CAAC,CAACR,MAAS,CAAA;gBACxBV,IAAIU,IAAIV,EAAE;gBACVC,MAAMS,IAAIT,IAAI;gBACdC,MAAMQ,IAAIR,IAAI;gBACdC,QAAQO,IAAIP,MAAM;gBAClBC,cAAcM,IAAIN,YAAY;gBAC9BC,cAAcK,IAAIE,aAAa;gBAC/BN,oBAAoBI,IAAIG,oBAAoB;gBAC5CN,UAAUG,IAAIH,QAAQ;gBACtBC,WAAWE,IAAII,UAAU;YAC3B,CAAA;IACF;IAEA,MAAMK,kBAAkBnB,EAAU,EAAEG,MAAc,EAAiB;QACjE,MAAMN,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;QAC7BD,KAAKE,GAAG,CAACI,QAAQH;IACnB;IAGA,MAAMoB,SAASC,IAAmB,EAAiB;QACjD,MAAMxB,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAC1B,CAAC;;kDAE2C,CAAC;QAE/CD,KAAKE,GAAG,CACNsB,KAAKrB,EAAE,EACPqB,KAAKpB,IAAI,EACToB,KAAKC,WAAW,EAChBD,KAAKlB,MAAM,EACXkB,KAAKd,QAAQ,EACbc,KAAKE,YAAY,EACjBF,KAAKG,QAAQ,EACbH,KAAKI,aAAa,IAAI,MACtBJ,KAAKK,QAAQ,EACbL,KAAKM,KAAK,IAAI,MACdN,KAAKb,SAAS,EACda,KAAKO,WAAW,IAAI;IAExB;IAEA,MAAMC,QAAQ7B,EAAU,EAAiC;QACvD,MAAMH,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;QAC7B,MAAMY,MAAMb,KAAKc,GAAG,CAACX;QAErB,IAAI,CAACU,KAAK,OAAO;QAEjB,OAAO;YACLV,IAAIU,IAAIV,EAAE;YACVC,MAAMS,IAAIT,IAAI;YACdqB,aAAaZ,IAAIY,WAAW;YAC5BnB,QAAQO,IAAIP,MAAM;YAClBI,UAAUG,IAAIH,QAAQ;YACtBgB,cAAcb,IAAIa,YAAY;YAC9BC,UAAUd,IAAIc,QAAQ;YACtBC,eAAef,IAAIoB,cAAc,IAAIC;YACrCL,UAAUhB,IAAIgB,QAAQ;YACtBC,OAAOjB,IAAIiB,KAAK,IAAII;YACpBvB,WAAWE,IAAII,UAAU;YACzBc,aAAalB,IAAIsB,YAAY,IAAID;QACnC;IACF;IAEA,MAAME,iBAA2C;QAC/C,MAAMpC,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAC1B;QAEF,MAAMkB,OAAOnB,KAAKoB,GAAG;QAErB,OAAOD,KAAKE,GAAG,CAAC,CAACR,MAAS,CAAA;gBACxBV,IAAIU,IAAIV,EAAE;gBACVC,MAAMS,IAAIT,IAAI;gBACdqB,aAAaZ,IAAIY,WAAW;gBAC5BnB,QAAQO,IAAIP,MAAM;gBAClBI,UAAUG,IAAIH,QAAQ;gBACtBgB,cAAcb,IAAIa,YAAY;gBAC9BC,UAAUd,IAAIc,QAAQ;gBACtBC,eAAef,IAAIoB,cAAc,IAAIC;gBACrCL,UAAUhB,IAAIgB,QAAQ;gBACtBC,OAAOjB,IAAIiB,KAAK,IAAII;gBACpBvB,WAAWE,IAAII,UAAU;gBACzBc,aAAalB,IAAIsB,YAAY,IAAID;YACnC,CAAA;IACF;IAEA,MAAMG,iBAAiBlC,EAAU,EAAEG,MAAc,EAAEsB,aAAsB,EAAiB;QACxF,IAAIA,eAAe;YACjB,MAAM5B,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;YAC7BD,KAAKE,GAAG,CAACI,QAAQsB,eAAezB;QAClC,OAAO;YACL,MAAMH,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;YAC7BD,KAAKE,GAAG,CAACI,QAAQH;QACnB;IACF;IAEA,MAAMmC,mBAAmBnC,EAAU,EAAE0B,QAAgB,EAAiB;QACpE,MAAM7B,OAAO,IAAI,CAACT,EAAE,CAACU,OAAO,CAAC;QAC7BD,KAAKE,GAAG,CAAC2B,UAAU1B;IACrB;IAGA,MAAMoC,WAMH;QACD,MAAMC,cAAc,IAAI,CAACjD,EAAE,CAACU,OAAO,CAAC,wCAAwCa,GAAG;QAC/E,MAAM2B,eAAe,IAAI,CAAClD,EAAE,CACzBU,OAAO,CAAC,2EACRa,GAAG;QACN,MAAM4B,aAAa,IAAI,CAACnD,EAAE,CAACU,OAAO,CAAC,uCAAuCa,GAAG;QAC7E,MAAM6B,eAAe,IAAI,CAACpD,EAAE,CACzBU,OAAO,CACN,8FAEDa,GAAG;QACN,MAAM8B,iBAAiB,IAAI,CAACrD,EAAE,CAC3BU,OAAO,CAAC,kEACRa,GAAG;QAEN,OAAO;YACL0B,aAAaA,YAAYK,KAAK;YAC9BJ,cAAcA,aAAaI,KAAK;YAChCH,YAAYA,WAAWG,KAAK;YAC5BF,cAAcA,aAAaE,KAAK;YAChCD,gBAAgBA,eAAeC,KAAK;QACtC;IACF;IAEAC,QAAc;QACZ,IAAI,CAACvD,EAAE,CAACuD,KAAK;IACf;AACF"}