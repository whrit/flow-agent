{"version":3,"sources":["../../../src/core/ConsensusEngine.ts"],"sourcesContent":["/**\n * ConsensusEngine - Implements consensus algorithms for distributed decision making\n * Supports multiple consensus algorithms: Raft, Byzantine, Gossip, and Proof-of-Learning\n */\n\nimport { IDatabaseProvider, IConsensusAlgorithm, Decision, Vote, Consensus, Result, ConsensusType } from '../types/interfaces.js';\nimport { nanoid } from 'nanoid';\n\nexport class ConsensusEngine {\n  private algorithms: Map<ConsensusType, IConsensusAlgorithm> = new Map();\n  private currentAlgorithm: IConsensusAlgorithm | null = null;\n  private pendingDecisions: Map<string, Decision> = new Map();\n  private consensusHistory: Map<string, Consensus> = new Map();\n\n  constructor(private database: IDatabaseProvider) {\n    this.initializeAlgorithms();\n  }\n\n  /**\n   * Initialize available consensus algorithms\n   */\n  private initializeAlgorithms(): void {\n    this.algorithms.set('raft', new RaftConsensus(this.database));\n    this.algorithms.set('byzantine', new ByzantineConsensus(this.database));\n    this.algorithms.set('gossip', new GossipConsensus(this.database));\n    this.algorithms.set('proof-of-learning', new ProofOfLearningConsensus(this.database));\n  }\n\n  /**\n   * Set the active consensus algorithm\n   */\n  async setAlgorithm(type: ConsensusType): Promise<void> {\n    const algorithm = this.algorithms.get(type);\n    if (!algorithm) {\n      throw new Error(`Unknown consensus algorithm: ${type}`);\n    }\n\n    this.currentAlgorithm = algorithm;\n    await algorithm.initialize();\n\n    await this.database.store('consensus-algorithm', type, 'system');\n  }\n\n  /**\n   * Propose a decision for consensus\n   */\n  async propose(decision: Omit<Decision, 'id' | 'timestamp'>): Promise<string> {\n    if (!this.currentAlgorithm) {\n      throw new Error('No consensus algorithm selected');\n    }\n\n    const fullDecision: Decision = {\n      ...decision,\n      id: nanoid(),\n      timestamp: new Date()\n    };\n\n    this.pendingDecisions.set(fullDecision.id, fullDecision);\n    await this.database.store(`decision:${fullDecision.id}`, fullDecision, 'consensus');\n\n    // Start consensus process\n    const votes = await this.currentAlgorithm.propose(fullDecision);\n\n    // Process votes and determine consensus\n    const consensus = await this.processVotes(fullDecision, votes);\n\n    return fullDecision.id;\n  }\n\n  /**\n   * Process votes and determine consensus\n   */\n  private async processVotes(decision: Decision, votes: Vote[]): Promise<Consensus> {\n    // Calculate consensus based on votes\n    const positiveVotes = votes.filter(vote => vote.decision);\n    const totalConfidence = votes.reduce((sum, vote) => sum + vote.confidence, 0);\n    const averageConfidence = totalConfidence / votes.length;\n\n    // Simple majority rule with confidence weighting\n    const weightedPositive = positiveVotes.reduce((sum, vote) => sum + vote.confidence, 0);\n    const totalWeight = votes.reduce((sum, vote) => sum + vote.confidence, 0);\n\n    const outcome = weightedPositive > (totalWeight / 2) && averageConfidence > 0.6;\n\n    const consensus: Consensus = {\n      decisionId: decision.id,\n      outcome,\n      votes,\n      confidence: averageConfidence,\n      timestamp: new Date()\n    };\n\n    this.consensusHistory.set(decision.id, consensus);\n    await this.database.store(`consensus:${decision.id}`, consensus, 'consensus');\n\n    // Execute if consensus reached\n    if (outcome) {\n      await this.executeConsensus(consensus);\n    }\n\n    return consensus;\n  }\n\n  /**\n   * Execute a consensus decision\n   */\n  private async executeConsensus(consensus: Consensus): Promise<Result> {\n    if (!this.currentAlgorithm) {\n      throw new Error('No consensus algorithm available for execution');\n    }\n\n    const result = await this.currentAlgorithm.execute(consensus);\n    await this.database.store(`result:${consensus.decisionId}`, result, 'consensus');\n\n    // Clean up pending decision\n    this.pendingDecisions.delete(consensus.decisionId);\n\n    return result;\n  }\n\n  /**\n   * Get consensus status for a decision\n   */\n  async getConsensusStatus(decisionId: string): Promise<{\n    decision: Decision | null;\n    consensus: Consensus | null;\n    status: 'pending' | 'reached' | 'failed';\n  }> {\n    const decision = this.pendingDecisions.get(decisionId) ||\n      await this.database.retrieve(`decision:${decisionId}`, 'consensus');\n\n    const consensus = this.consensusHistory.get(decisionId) ||\n      await this.database.retrieve(`consensus:${decisionId}`, 'consensus');\n\n    let status: 'pending' | 'reached' | 'failed' = 'pending';\n    if (consensus) {\n      status = consensus.outcome ? 'reached' : 'failed';\n    }\n\n    return { decision, consensus, status };\n  }\n\n  /**\n   * Get all pending decisions\n   */\n  getPendingDecisions(): Decision[] {\n    return Array.from(this.pendingDecisions.values());\n  }\n\n  /**\n   * Get consensus history\n   */\n  getConsensusHistory(): Consensus[] {\n    return Array.from(this.consensusHistory.values());\n  }\n\n  /**\n   * Get current algorithm type\n   */\n  getCurrentAlgorithm(): ConsensusType | null {\n    return this.currentAlgorithm?.getType() || null;\n  }\n\n  /**\n   * Get available algorithms\n   */\n  getAvailableAlgorithms(): ConsensusType[] {\n    return Array.from(this.algorithms.keys());\n  }\n}\n\n/**\n * Raft Consensus Algorithm\n * Leader-based consensus with strong consistency\n */\nclass RaftConsensus implements IConsensusAlgorithm {\n  private leaderId: string | null = null;\n  private term: number = 0;\n  private votedFor: string | null = null;\n\n  constructor(private database: IDatabaseProvider) {}\n\n  getType(): ConsensusType {\n    return 'raft';\n  }\n\n  async initialize(): Promise<void> {\n    // Load state from database\n    const state = await this.database.retrieve('raft-state', 'consensus');\n    if (state) {\n      this.term = state.term || 0;\n      this.leaderId = state.leaderId || null;\n      this.votedFor = state.votedFor || null;\n    }\n  }\n\n  async propose(decision: Decision): Promise<Vote[]> {\n    // In Raft, only the leader can propose\n    if (!this.leaderId) {\n      await this.electLeader();\n    }\n\n    // Simulate distributed voting\n    const votes: Vote[] = [];\n    const agentIds = await this.getAgentIds();\n\n    for (const agentId of agentIds) {\n      const vote: Vote = {\n        agentId,\n        decision: Math.random() > 0.2, // 80% approval rate\n        confidence: 0.8 + Math.random() * 0.2, // High confidence in Raft\n        reasoning: `Raft consensus vote for decision ${decision.id}`\n      };\n      votes.push(vote);\n    }\n\n    return votes;\n  }\n\n  async execute(consensus: Consensus): Promise<Result> {\n    if (!consensus.outcome) {\n      return {\n        success: false,\n        error: 'Consensus was not reached'\n      };\n    }\n\n    // Execute the decision through the leader\n    return {\n      success: true,\n      data: {\n        algorithm: 'raft',\n        leader: this.leaderId,\n        term: this.term,\n        executedAt: new Date().toISOString()\n      },\n      metadata: {\n        consensusId: consensus.decisionId,\n        votes: consensus.votes.length\n      }\n    };\n  }\n\n  private async electLeader(): Promise<void> {\n    this.term++;\n    const agentIds = await this.getAgentIds();\n    this.leaderId = agentIds[0] || 'default-leader';\n    this.votedFor = this.leaderId;\n\n    await this.database.store('raft-state', {\n      term: this.term,\n      leaderId: this.leaderId,\n      votedFor: this.votedFor\n    }, 'consensus');\n  }\n\n  private async getAgentIds(): Promise<string[]> {\n    try {\n      const agentKeys = await this.database.list('agents');\n      return agentKeys.map(key => key.replace('agent:', ''));\n    } catch {\n      return ['agent-1', 'agent-2', 'agent-3']; // Default agents\n    }\n  }\n}\n\n/**\n * Byzantine Fault Tolerant Consensus\n * Handles up to 1/3 malicious agents\n */\nclass ByzantineConsensus implements IConsensusAlgorithm {\n  constructor(private database: IDatabaseProvider) {}\n\n  getType(): ConsensusType {\n    return 'byzantine';\n  }\n\n  async initialize(): Promise<void> {\n    // Byzantine consensus initialization\n  }\n\n  async propose(decision: Decision): Promise<Vote[]> {\n    const votes: Vote[] = [];\n    const agentIds = await this.getAgentIds();\n\n    // Simulate Byzantine environment with some malicious agents\n    for (const agentId of agentIds) {\n      const isMalicious = Math.random() < 0.2; // 20% malicious agents\n      const vote: Vote = {\n        agentId,\n        decision: isMalicious ? Math.random() < 0.3 : Math.random() > 0.3, // Malicious agents vote randomly\n        confidence: isMalicious ? Math.random() * 0.5 : 0.7 + Math.random() * 0.3,\n        reasoning: `Byzantine consensus vote (${isMalicious ? 'malicious' : 'honest'})`\n      };\n      votes.push(vote);\n    }\n\n    return votes;\n  }\n\n  async execute(consensus: Consensus): Promise<Result> {\n    // Byzantine consensus requires 2/3 + 1 majority\n    const honestVotes = consensus.votes.filter(vote => vote.confidence > 0.6);\n    const required = Math.floor(consensus.votes.length * 2 / 3) + 1;\n\n    if (honestVotes.length >= required && consensus.outcome) {\n      return {\n        success: true,\n        data: {\n          algorithm: 'byzantine',\n          honestVotes: honestVotes.length,\n          totalVotes: consensus.votes.length,\n          executedAt: new Date().toISOString()\n        }\n      };\n    }\n\n    return {\n      success: false,\n      error: 'Byzantine consensus failed - insufficient honest votes'\n    };\n  }\n\n  private async getAgentIds(): Promise<string[]> {\n    try {\n      const agentKeys = await this.database.list('agents');\n      return agentKeys.map(key => key.replace('agent:', ''));\n    } catch {\n      return ['agent-1', 'agent-2', 'agent-3', 'agent-4', 'agent-5'];\n    }\n  }\n}\n\n/**\n * Gossip Protocol Consensus\n * Eventually consistent through peer-to-peer communication\n */\nclass GossipConsensus implements IConsensusAlgorithm {\n  constructor(private database: IDatabaseProvider) {}\n\n  getType(): ConsensusType {\n    return 'gossip';\n  }\n\n  async initialize(): Promise<void> {\n    // Gossip protocol initialization\n  }\n\n  async propose(decision: Decision): Promise<Vote[]> {\n    const votes: Vote[] = [];\n    const agentIds = await this.getAgentIds();\n\n    // Simulate gossip propagation delays and eventual consistency\n    for (const agentId of agentIds) {\n      const delay = Math.random() * 1000; // Random delay\n      const informed = Math.random() > 0.1; // 90% eventually receive the message\n\n      if (informed) {\n        const vote: Vote = {\n          agentId,\n          decision: Math.random() > 0.25, // 75% approval\n          confidence: 0.6 + Math.random() * 0.3,\n          reasoning: `Gossip consensus vote (delay: ${Math.round(delay)}ms)`\n        };\n        votes.push(vote);\n      }\n    }\n\n    return votes;\n  }\n\n  async execute(consensus: Consensus): Promise<Result> {\n    // Gossip consensus is eventually consistent\n    const participation = consensus.votes.length / (await this.getAgentIds()).length;\n\n    if (consensus.outcome && participation > 0.7) {\n      return {\n        success: true,\n        data: {\n          algorithm: 'gossip',\n          participation: participation,\n          convergenceTime: Math.random() * 5000 + 1000,\n          executedAt: new Date().toISOString()\n        }\n      };\n    }\n\n    return {\n      success: false,\n      error: 'Gossip consensus failed - insufficient participation or negative outcome'\n    };\n  }\n\n  private async getAgentIds(): Promise<string[]> {\n    try {\n      const agentKeys = await this.database.list('agents');\n      return agentKeys.map(key => key.replace('agent:', ''));\n    } catch {\n      return Array.from({ length: 8 }, (_, i) => `agent-${i + 1}`);\n    }\n  }\n}\n\n/**\n * Proof of Learning Consensus\n * Consensus based on agent learning and performance\n */\nclass ProofOfLearningConsensus implements IConsensusAlgorithm {\n  constructor(private database: IDatabaseProvider) {}\n\n  getType(): ConsensusType {\n    return 'proof-of-learning';\n  }\n\n  async initialize(): Promise<void> {\n    // Proof of Learning initialization\n  }\n\n  async propose(decision: Decision): Promise<Vote[]> {\n    const votes: Vote[] = [];\n    const agentIds = await this.getAgentIds();\n\n    for (const agentId of agentIds) {\n      // Get agent performance for voting weight\n      const performance = await this.getAgentPerformance(agentId);\n      const learningScore = this.calculateLearningScore(performance);\n\n      const vote: Vote = {\n        agentId,\n        decision: learningScore > 0.5 ? Math.random() > 0.2 : Math.random() > 0.6,\n        confidence: learningScore,\n        reasoning: `Proof of Learning vote (learning score: ${learningScore.toFixed(2)})`\n      };\n      votes.push(vote);\n    }\n\n    return votes;\n  }\n\n  async execute(consensus: Consensus): Promise<Result> {\n    // Weight votes by learning scores\n    const weightedVotes = consensus.votes.reduce((sum, vote) => {\n      return sum + (vote.decision ? vote.confidence : -vote.confidence);\n    }, 0);\n\n    const totalWeight = consensus.votes.reduce((sum, vote) => sum + vote.confidence, 0);\n    const weightedOutcome = weightedVotes > 0 && (weightedVotes / totalWeight) > 0.6;\n\n    if (weightedOutcome) {\n      return {\n        success: true,\n        data: {\n          algorithm: 'proof-of-learning',\n          weightedScore: weightedVotes / totalWeight,\n          highPerformers: consensus.votes.filter(v => v.confidence > 0.8).length,\n          executedAt: new Date().toISOString()\n        }\n      };\n    }\n\n    return {\n      success: false,\n      error: 'Proof of Learning consensus failed - insufficient weighted support'\n    };\n  }\n\n  private async getAgentPerformance(agentId: string): Promise<any> {\n    try {\n      const agent = await this.database.retrieve(agentId, 'agents');\n      return agent?.performance || { successRate: 0.5, tasksCompleted: 0 };\n    } catch {\n      return { successRate: 0.5, tasksCompleted: 0 };\n    }\n  }\n\n  private calculateLearningScore(performance: any): number {\n    // Combine success rate and experience\n    const successWeight = 0.7;\n    const experienceWeight = 0.3;\n\n    const successScore = performance.successRate || 0.5;\n    const experienceScore = Math.min(1.0, (performance.tasksCompleted || 0) / 100);\n\n    return successScore * successWeight + experienceScore * experienceWeight;\n  }\n\n  private async getAgentIds(): Promise<string[]> {\n    try {\n      const agentKeys = await this.database.list('agents');\n      return agentKeys.map(key => key.replace('agent:', ''));\n    } catch {\n      return Array.from({ length: 6 }, (_, i) => `agent-${i + 1}`);\n    }\n  }\n}"],"names":["nanoid","ConsensusEngine","algorithms","Map","currentAlgorithm","pendingDecisions","consensusHistory","database","initializeAlgorithms","set","RaftConsensus","ByzantineConsensus","GossipConsensus","ProofOfLearningConsensus","setAlgorithm","type","algorithm","get","Error","initialize","store","propose","decision","fullDecision","id","timestamp","Date","votes","consensus","processVotes","positiveVotes","filter","vote","totalConfidence","reduce","sum","confidence","averageConfidence","length","weightedPositive","totalWeight","outcome","decisionId","executeConsensus","result","execute","delete","getConsensusStatus","retrieve","status","getPendingDecisions","Array","from","values","getConsensusHistory","getCurrentAlgorithm","getType","getAvailableAlgorithms","keys","leaderId","term","votedFor","state","electLeader","agentIds","getAgentIds","agentId","Math","random","reasoning","push","success","error","data","leader","executedAt","toISOString","metadata","consensusId","agentKeys","list","map","key","replace","isMalicious","honestVotes","required","floor","totalVotes","delay","informed","round","participation","convergenceTime","_","i","performance","getAgentPerformance","learningScore","calculateLearningScore","toFixed","weightedVotes","weightedOutcome","weightedScore","highPerformers","v","agent","successRate","tasksCompleted","successWeight","experienceWeight","successScore","experienceScore","min"],"mappings":"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"}