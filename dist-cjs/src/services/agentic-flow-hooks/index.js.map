{"version":3,"sources":["../../../../src/services/agentic-flow-hooks/index.ts"],"sourcesContent":["/**\n * Agentic Flow Hook System\n * \n * Main entry point for the hook system integration with agentic-flow.\n * Provides initialization, registration, and management of all hook types.\n */\n\nimport { agenticHookManager } from './hook-manager.js';\nimport { registerLLMHooks } from './llm-hooks.js';\nimport { registerMemoryHooks } from './memory-hooks.js';\nimport { registerNeuralHooks } from './neural-hooks.js';\nimport { registerPerformanceHooks } from './performance-hooks.js';\nimport { registerWorkflowHooks } from './workflow-hooks.js';\nimport { Logger } from '../../core/logger.js';\n\nexport * from './types.js';\nexport { agenticHookManager } from './hook-manager.js';\nexport * from './llm-hooks.js';\nexport * from './memory-hooks.js';\nexport * from './neural-hooks.js';\nexport * from './performance-hooks.js';\nexport * from './workflow-hooks.js';\n\nconst logger = new Logger({\n  level: 'info',\n  format: 'text',\n  destination: 'console'\n}, { prefix: 'AgenticFlowHooks' });\n\n/**\n * Initialize the agentic-flow hook system\n */\nexport async function initializeAgenticFlowHooks(): Promise<void> {\n  logger.info('Initializing agentic-flow hook system...');\n  \n  try {\n    // Register all hook types\n    registerLLMHooks();\n    logger.debug('LLM hooks registered');\n    \n    registerMemoryHooks();\n    logger.debug('Memory hooks registered');\n    \n    registerNeuralHooks();\n    logger.debug('Neural hooks registered');\n    \n    registerPerformanceHooks();\n    logger.debug('Performance hooks registered');\n    \n    registerWorkflowHooks();\n    logger.debug('Workflow hooks registered');\n    \n    // Set up default pipelines\n    await setupDefaultPipelines();\n    \n    // Initialize metrics collection\n    startMetricsCollection();\n    \n    logger.info('Agentic-flow hook system initialized successfully');\n  } catch (error) {\n    logger.error('Failed to initialize agentic-flow hooks:', error);\n    throw error;\n  }\n}\n\n/**\n * Set up default hook pipelines\n */\nasync function setupDefaultPipelines(): Promise<void> {\n  // LLM Call Pipeline\n  agenticHookManager.createPipeline({\n    id: 'llm-call-pipeline',\n    name: 'LLM Call Pipeline',\n    stages: [\n      {\n        name: 'pre-call',\n        hooks: agenticHookManager.getHooks('pre-llm-call'),\n        parallel: false,\n      },\n      {\n        name: 'call-execution',\n        hooks: [], // Actual LLM call happens here\n        parallel: false,\n      },\n      {\n        name: 'post-call',\n        hooks: agenticHookManager.getHooks('post-llm-call'),\n        parallel: true,\n      },\n    ],\n    errorStrategy: 'continue',\n  });\n  \n  // Memory Operation Pipeline\n  agenticHookManager.createPipeline({\n    id: 'memory-operation-pipeline',\n    name: 'Memory Operation Pipeline',\n    stages: [\n      {\n        name: 'validation',\n        hooks: agenticHookManager.getHooks('pre-memory-store'),\n        parallel: false,\n      },\n      {\n        name: 'storage',\n        hooks: agenticHookManager.getHooks('post-memory-store'),\n        parallel: true,\n      },\n      {\n        name: 'sync',\n        hooks: agenticHookManager.getHooks('memory-sync'),\n        parallel: true,\n        condition: (ctx) => ctx.metadata.crossProvider === true,\n      },\n    ],\n    errorStrategy: 'rollback',\n  });\n  \n  // Workflow Execution Pipeline\n  agenticHookManager.createPipeline({\n    id: 'workflow-execution-pipeline',\n    name: 'Workflow Execution Pipeline',\n    stages: [\n      {\n        name: 'initialization',\n        hooks: agenticHookManager.getHooks('workflow-start'),\n        parallel: false,\n      },\n      {\n        name: 'execution',\n        hooks: [\n          ...agenticHookManager.getHooks('workflow-step'),\n          ...agenticHookManager.getHooks('workflow-decision'),\n        ],\n        parallel: false,\n      },\n      {\n        name: 'completion',\n        hooks: agenticHookManager.getHooks('workflow-complete'),\n        parallel: true,\n      },\n    ],\n    errorStrategy: 'fail-fast',\n  });\n}\n\n/**\n * Start background metrics collection\n */\nfunction startMetricsCollection(): void {\n  // Collect metrics every 30 seconds\n  setInterval(() => {\n    const metrics = agenticHookManager.getMetrics();\n    \n    // Log high-level metrics\n    logger.debug('Hook system metrics:', {\n      totalHooks: metrics['hooks.count'],\n      totalExecutions: metrics['hooks.executions'],\n      errorRate: metrics['hooks.errors'] / metrics['hooks.executions'] || 0,\n      cacheHitRate: metrics['hooks.cacheHits'] / metrics['hooks.executions'] || 0,\n    });\n    \n    // Emit metrics event\n    agenticHookManager.emit('metrics:collected', metrics);\n  }, 30000);\n}\n\n/**\n * Shutdown the hook system gracefully\n */\nexport async function shutdownAgenticFlowHooks(): Promise<void> {\n  logger.info('Shutting down agentic-flow hook system...');\n  \n  try {\n    // Wait for active executions to complete\n    const maxWaitTime = 10000; // 10 seconds\n    const startTime = Date.now();\n    \n    while (agenticHookManager.getMetrics()['executions.active'] > 0) {\n      if (Date.now() - startTime > maxWaitTime) {\n        logger.warn('Timeout waiting for active executions to complete');\n        break;\n      }\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    // Remove all listeners\n    agenticHookManager.removeAllListeners();\n    \n    logger.info('Agentic-flow hook system shut down successfully');\n  } catch (error) {\n    logger.error('Error during hook system shutdown:', error);\n    throw error;\n  }\n}\n\n/**\n * Get hook system status\n */\nexport function getHookSystemStatus(): {\n  initialized: boolean;\n  metrics: Record<string, any>;\n  pipelines: string[];\n  activeExecutions: number;\n} {\n  const metrics = agenticHookManager.getMetrics();\n  \n  return {\n    initialized: metrics['hooks.count'] > 0,\n    metrics,\n    pipelines: [\n      'llm-call-pipeline',\n      'memory-operation-pipeline',\n      'workflow-execution-pipeline',\n    ],\n    activeExecutions: metrics['executions.active'] || 0,\n  };\n}\n\n/**\n * Create a context builder for hook execution\n */\nexport function createHookContext(): HookContextBuilder {\n  class ContextBuilder implements HookContextBuilder {\n    private context: Partial<AgenticHookContext> = {\n      timestamp: Date.now(),\n      correlationId: this.generateCorrelationId(),\n      metadata: {},\n    };\n    \n    withSession(sessionId: string): HookContextBuilder {\n      this.context.sessionId = sessionId;\n      return this;\n    }\n    \n    withMemory(namespace: string, provider: string): HookContextBuilder {\n      this.context.memory = {\n        namespace,\n        provider,\n        cache: new Map(),\n      };\n      return this;\n    }\n    \n    withNeural(modelId: string): HookContextBuilder {\n      this.context.neural = {\n        modelId,\n        patterns: this.createPatternStore(),\n        training: {\n          epoch: 0,\n          loss: 0,\n          accuracy: 0,\n          learningRate: 0.001,\n          optimizer: 'adam',\n          checkpoints: [],\n        },\n      };\n      return this;\n    }\n    \n    withPerformance(metrics: PerformanceMetric[]): HookContextBuilder {\n      const metricsMap = new Map<string, PerformanceMetric>();\n      metrics.forEach(m => metricsMap.set(m.name, m));\n      \n      this.context.performance = {\n        metrics: metricsMap,\n        bottlenecks: [],\n        optimizations: [],\n      };\n      return this;\n    }\n    \n    withMetadata(metadata: Record<string, any>): HookContextBuilder {\n      this.context.metadata = { ...this.context.metadata, ...metadata };\n      return this;\n    }\n    \n    build(): AgenticHookContext {\n      if (!this.context.sessionId) {\n        this.context.sessionId = this.generateSessionId();\n      }\n      \n      if (!this.context.memory) {\n        this.context.memory = {\n          namespace: 'default',\n          provider: 'memory',\n          cache: new Map(),\n        };\n      }\n      \n      if (!this.context.neural) {\n        this.context.neural = {\n          modelId: 'default',\n          patterns: this.createPatternStore(),\n          training: {\n            epoch: 0,\n            loss: 0,\n            accuracy: 0,\n            learningRate: 0.001,\n            optimizer: 'adam',\n            checkpoints: [],\n          },\n        };\n      }\n      \n      if (!this.context.performance) {\n        this.context.performance = {\n          metrics: new Map(),\n          bottlenecks: [],\n          optimizations: [],\n        };\n      }\n      \n      return this.context as AgenticHookContext;\n    }\n    \n    private generateCorrelationId(): string {\n      return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    private generateSessionId(): string {\n      return `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    private createPatternStore(): PatternStore {\n      const patterns = new Map<string, Pattern>();\n      \n      return {\n        add(pattern: Pattern): void {\n          patterns.set(pattern.id, pattern);\n        },\n        \n        get(id: string): Pattern | undefined {\n          return patterns.get(id);\n        },\n        \n        findSimilar(pattern: Partial<Pattern>, threshold: number): Pattern[] {\n          const results: Pattern[] = [];\n          \n          for (const p of patterns.values()) {\n            // Simple similarity check\n            if (p.type === pattern.type && p.confidence >= threshold) {\n              results.push(p);\n            }\n          }\n          \n          return results;\n        },\n        \n        getByType(type: Pattern['type']): Pattern[] {\n          return Array.from(patterns.values()).filter(p => p.type === type);\n        },\n        \n        prune(maxAge: number): void {\n          const cutoff = Date.now() - maxAge;\n          for (const [id, pattern] of patterns) {\n            if (pattern.context.timestamp < cutoff) {\n              patterns.delete(id);\n            }\n          }\n        },\n        \n        export(): Pattern[] {\n          return Array.from(patterns.values());\n        },\n        \n        import(newPatterns: Pattern[]): void {\n          for (const pattern of newPatterns) {\n            patterns.set(pattern.id, pattern);\n          }\n        },\n      };\n    }\n  }\n  \n  return new ContextBuilder();\n}\n\n// Import types for the context builder\nimport type {\n  AgenticHookContext,\n  HookContextBuilder,\n  PatternStore,\n  Pattern,\n  PerformanceMetric,\n} from './types.js';"],"names":["agenticHookManager","registerLLMHooks","registerMemoryHooks","registerNeuralHooks","registerPerformanceHooks","registerWorkflowHooks","Logger","logger","level","format","destination","prefix","initializeAgenticFlowHooks","info","debug","setupDefaultPipelines","startMetricsCollection","error","createPipeline","id","name","stages","hooks","getHooks","parallel","errorStrategy","condition","ctx","metadata","crossProvider","setInterval","metrics","getMetrics","totalHooks","totalExecutions","errorRate","cacheHitRate","emit","shutdownAgenticFlowHooks","maxWaitTime","startTime","Date","now","warn","Promise","resolve","setTimeout","removeAllListeners","getHookSystemStatus","initialized","pipelines","activeExecutions","createHookContext","ContextBuilder","context","timestamp","correlationId","generateCorrelationId","withSession","sessionId","withMemory","namespace","provider","memory","cache","Map","withNeural","modelId","neural","patterns","createPatternStore","training","epoch","loss","accuracy","learningRate","optimizer","checkpoints","withPerformance","metricsMap","forEach","m","set","performance","bottlenecks","optimizations","withMetadata","build","generateSessionId","Math","random","toString","substr","add","pattern","get","findSimilar","threshold","results","p","values","type","confidence","push","getByType","Array","from","filter","prune","maxAge","cutoff","delete","export","import","newPatterns"],"mappings":"AAOA,SAASA,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,wBAAwB,QAAQ,yBAAyB;AAClE,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,MAAM,QAAQ,uBAAuB;AAE9C,cAAc,aAAa;AAC3B,SAASN,kBAAkB,QAAQ,oBAAoB;AACvD,cAAc,iBAAiB;AAC/B,cAAc,oBAAoB;AAClC,cAAc,oBAAoB;AAClC,cAAc,yBAAyB;AACvC,cAAc,sBAAsB;AAEpC,MAAMO,SAAS,IAAID,OAAO;IACxBE,OAAO;IACPC,QAAQ;IACRC,aAAa;AACf,GAAG;IAAEC,QAAQ;AAAmB;AAKhC,OAAO,eAAeC;IACpBL,OAAOM,IAAI,CAAC;IAEZ,IAAI;QAEFZ;QACAM,OAAOO,KAAK,CAAC;QAEbZ;QACAK,OAAOO,KAAK,CAAC;QAEbX;QACAI,OAAOO,KAAK,CAAC;QAEbV;QACAG,OAAOO,KAAK,CAAC;QAEbT;QACAE,OAAOO,KAAK,CAAC;QAGb,MAAMC;QAGNC;QAEAT,OAAOM,IAAI,CAAC;IACd,EAAE,OAAOI,OAAO;QACdV,OAAOU,KAAK,CAAC,4CAA4CA;QACzD,MAAMA;IACR;AACF;AAKA,eAAeF;IAEbf,mBAAmBkB,cAAc,CAAC;QAChCC,IAAI;QACJC,MAAM;QACNC,QAAQ;YACN;gBACED,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAO,EAAE;gBACTE,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;SACD;QACDC,eAAe;IACjB;IAGAzB,mBAAmBkB,cAAc,CAAC;QAChCC,IAAI;QACJC,MAAM;QACNC,QAAQ;YACN;gBACED,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;gBACVE,WAAW,CAACC,MAAQA,IAAIC,QAAQ,CAACC,aAAa,KAAK;YACrD;SACD;QACDJ,eAAe;IACjB;IAGAzB,mBAAmBkB,cAAc,CAAC;QAChCC,IAAI;QACJC,MAAM;QACNC,QAAQ;YACN;gBACED,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAO;uBACFtB,mBAAmBuB,QAAQ,CAAC;uBAC5BvB,mBAAmBuB,QAAQ,CAAC;iBAChC;gBACDC,UAAU;YACZ;YACA;gBACEJ,MAAM;gBACNE,OAAOtB,mBAAmBuB,QAAQ,CAAC;gBACnCC,UAAU;YACZ;SACD;QACDC,eAAe;IACjB;AACF;AAKA,SAAST;IAEPc,YAAY;QACV,MAAMC,UAAU/B,mBAAmBgC,UAAU;QAG7CzB,OAAOO,KAAK,CAAC,wBAAwB;YACnCmB,YAAYF,OAAO,CAAC,cAAc;YAClCG,iBAAiBH,OAAO,CAAC,mBAAmB;YAC5CI,WAAWJ,OAAO,CAAC,eAAe,GAAGA,OAAO,CAAC,mBAAmB,IAAI;YACpEK,cAAcL,OAAO,CAAC,kBAAkB,GAAGA,OAAO,CAAC,mBAAmB,IAAI;QAC5E;QAGA/B,mBAAmBqC,IAAI,CAAC,qBAAqBN;IAC/C,GAAG;AACL;AAKA,OAAO,eAAeO;IACpB/B,OAAOM,IAAI,CAAC;IAEZ,IAAI;QAEF,MAAM0B,cAAc;QACpB,MAAMC,YAAYC,KAAKC,GAAG;QAE1B,MAAO1C,mBAAmBgC,UAAU,EAAE,CAAC,oBAAoB,GAAG,EAAG;YAC/D,IAAIS,KAAKC,GAAG,KAAKF,YAAYD,aAAa;gBACxChC,OAAOoC,IAAI,CAAC;gBACZ;YACF;YACA,MAAM,IAAIC,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QACnD;QAGA7C,mBAAmB+C,kBAAkB;QAErCxC,OAAOM,IAAI,CAAC;IACd,EAAE,OAAOI,OAAO;QACdV,OAAOU,KAAK,CAAC,sCAAsCA;QACnD,MAAMA;IACR;AACF;AAKA,OAAO,SAAS+B;IAMd,MAAMjB,UAAU/B,mBAAmBgC,UAAU;IAE7C,OAAO;QACLiB,aAAalB,OAAO,CAAC,cAAc,GAAG;QACtCA;QACAmB,WAAW;YACT;YACA;YACA;SACD;QACDC,kBAAkBpB,OAAO,CAAC,oBAAoB,IAAI;IACpD;AACF;AAKA,OAAO,SAASqB;IACd,IAAA,AAAMC,iBAAN,MAAMA;QACIC,UAAuC;YAC7CC,WAAWd,KAAKC,GAAG;YACnBc,eAAe,IAAI,CAACC,qBAAqB;YACzC7B,UAAU,CAAC;QACb,EAAE;QAEF8B,YAAYC,SAAiB,EAAsB;YACjD,IAAI,CAACL,OAAO,CAACK,SAAS,GAAGA;YACzB,OAAO,IAAI;QACb;QAEAC,WAAWC,SAAiB,EAAEC,QAAgB,EAAsB;YAClE,IAAI,CAACR,OAAO,CAACS,MAAM,GAAG;gBACpBF;gBACAC;gBACAE,OAAO,IAAIC;YACb;YACA,OAAO,IAAI;QACb;QAEAC,WAAWC,OAAe,EAAsB;YAC9C,IAAI,CAACb,OAAO,CAACc,MAAM,GAAG;gBACpBD;gBACAE,UAAU,IAAI,CAACC,kBAAkB;gBACjCC,UAAU;oBACRC,OAAO;oBACPC,MAAM;oBACNC,UAAU;oBACVC,cAAc;oBACdC,WAAW;oBACXC,aAAa,EAAE;gBACjB;YACF;YACA,OAAO,IAAI;QACb;QAEAC,gBAAgB/C,OAA4B,EAAsB;YAChE,MAAMgD,aAAa,IAAId;YACvBlC,QAAQiD,OAAO,CAACC,CAAAA,IAAKF,WAAWG,GAAG,CAACD,EAAE7D,IAAI,EAAE6D;YAE5C,IAAI,CAAC3B,OAAO,CAAC6B,WAAW,GAAG;gBACzBpD,SAASgD;gBACTK,aAAa,EAAE;gBACfC,eAAe,EAAE;YACnB;YACA,OAAO,IAAI;QACb;QAEAC,aAAa1D,QAA6B,EAAsB;YAC9D,IAAI,CAAC0B,OAAO,CAAC1B,QAAQ,GAAG;gBAAE,GAAG,IAAI,CAAC0B,OAAO,CAAC1B,QAAQ;gBAAE,GAAGA,QAAQ;YAAC;YAChE,OAAO,IAAI;QACb;QAEA2D,QAA4B;YAC1B,IAAI,CAAC,IAAI,CAACjC,OAAO,CAACK,SAAS,EAAE;gBAC3B,IAAI,CAACL,OAAO,CAACK,SAAS,GAAG,IAAI,CAAC6B,iBAAiB;YACjD;YAEA,IAAI,CAAC,IAAI,CAAClC,OAAO,CAACS,MAAM,EAAE;gBACxB,IAAI,CAACT,OAAO,CAACS,MAAM,GAAG;oBACpBF,WAAW;oBACXC,UAAU;oBACVE,OAAO,IAAIC;gBACb;YACF;YAEA,IAAI,CAAC,IAAI,CAACX,OAAO,CAACc,MAAM,EAAE;gBACxB,IAAI,CAACd,OAAO,CAACc,MAAM,GAAG;oBACpBD,SAAS;oBACTE,UAAU,IAAI,CAACC,kBAAkB;oBACjCC,UAAU;wBACRC,OAAO;wBACPC,MAAM;wBACNC,UAAU;wBACVC,cAAc;wBACdC,WAAW;wBACXC,aAAa,EAAE;oBACjB;gBACF;YACF;YAEA,IAAI,CAAC,IAAI,CAACvB,OAAO,CAAC6B,WAAW,EAAE;gBAC7B,IAAI,CAAC7B,OAAO,CAAC6B,WAAW,GAAG;oBACzBpD,SAAS,IAAIkC;oBACbmB,aAAa,EAAE;oBACfC,eAAe,EAAE;gBACnB;YACF;YAEA,OAAO,IAAI,CAAC/B,OAAO;QACrB;QAEQG,wBAAgC;YACtC,OAAO,CAAC,KAAK,EAAEhB,KAAKC,GAAG,GAAG,CAAC,EAAE+C,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;QACxE;QAEQJ,oBAA4B;YAClC,OAAO,CAAC,KAAK,EAAE/C,KAAKC,GAAG,GAAG,CAAC,EAAE+C,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;QACxE;QAEQtB,qBAAmC;YACzC,MAAMD,WAAW,IAAIJ;YAErB,OAAO;gBACL4B,KAAIC,OAAgB;oBAClBzB,SAASa,GAAG,CAACY,QAAQ3E,EAAE,EAAE2E;gBAC3B;gBAEAC,KAAI5E,EAAU;oBACZ,OAAOkD,SAAS0B,GAAG,CAAC5E;gBACtB;gBAEA6E,aAAYF,OAAyB,EAAEG,SAAiB;oBACtD,MAAMC,UAAqB,EAAE;oBAE7B,KAAK,MAAMC,KAAK9B,SAAS+B,MAAM,GAAI;wBAEjC,IAAID,EAAEE,IAAI,KAAKP,QAAQO,IAAI,IAAIF,EAAEG,UAAU,IAAIL,WAAW;4BACxDC,QAAQK,IAAI,CAACJ;wBACf;oBACF;oBAEA,OAAOD;gBACT;gBAEAM,WAAUH,IAAqB;oBAC7B,OAAOI,MAAMC,IAAI,CAACrC,SAAS+B,MAAM,IAAIO,MAAM,CAACR,CAAAA,IAAKA,EAAEE,IAAI,KAAKA;gBAC9D;gBAEAO,OAAMC,MAAc;oBAClB,MAAMC,SAASrE,KAAKC,GAAG,KAAKmE;oBAC5B,KAAK,MAAM,CAAC1F,IAAI2E,QAAQ,IAAIzB,SAAU;wBACpC,IAAIyB,QAAQxC,OAAO,CAACC,SAAS,GAAGuD,QAAQ;4BACtCzC,SAAS0C,MAAM,CAAC5F;wBAClB;oBACF;gBACF;gBAEA6F;oBACE,OAAOP,MAAMC,IAAI,CAACrC,SAAS+B,MAAM;gBACnC;gBAEAa,QAAOC,WAAsB;oBAC3B,KAAK,MAAMpB,WAAWoB,YAAa;wBACjC7C,SAASa,GAAG,CAACY,QAAQ3E,EAAE,EAAE2E;oBAC3B;gBACF;YACF;QACF;IACF;IAEA,OAAO,IAAIzC;AACb"}