{"version":3,"sources":["../../../../src/hive-mind/integration/ConsensusEngine.ts"],"sourcesContent":["/**\n * ConsensusEngine Class\n *\n * Manages consensus mechanisms, voting, and collective decision-making\n * within the Hive Mind swarm.\n */\n\nimport { EventEmitter } from 'events';\nimport { DatabaseManager } from '../core/DatabaseManager.js';\nimport { MCPToolWrapper } from './MCPToolWrapper.js';\nimport {\n  ConsensusProposal,\n  ConsensusVote,\n  ConsensusResult,\n  VotingStrategy,\n  ConsensusMetrics,\n} from '../types.js';\n\nexport class ConsensusEngine extends EventEmitter {\n  private threshold: number;\n  private db: DatabaseManager;\n  private mcpWrapper: MCPToolWrapper;\n  private activeProposals: Map<string, ConsensusProposal>;\n  private votingStrategies: Map<string, VotingStrategy>;\n  private metrics: ConsensusMetrics;\n  private isActive: boolean = false;\n\n  constructor(threshold: number = 0.66) {\n    super();\n    this.threshold = threshold;\n    this.activeProposals = new Map();\n    this.votingStrategies = new Map();\n    this.metrics = {\n      totalProposals: 0,\n      achievedConsensus: 0,\n      failedConsensus: 0,\n      avgVotingTime: 0,\n      avgParticipation: 0,\n    };\n\n    this.initializeVotingStrategies();\n  }\n\n  /**\n   * Initialize consensus engine\n   */\n  async initialize(): Promise<void> {\n    this.db = await DatabaseManager.getInstance();\n    this.mcpWrapper = new MCPToolWrapper();\n\n    // Start consensus monitoring\n    this.startProposalMonitor();\n    this.startTimeoutChecker();\n    this.startMetricsCollector();\n\n    this.isActive = true;\n    this.emit('initialized');\n  }\n\n  /**\n   * Create a new consensus proposal\n   */\n  async createProposal(proposal: ConsensusProposal): Promise<string> {\n    // Store in database\n    await this.db.createConsensusProposal(proposal);\n\n    // Add to active proposals\n    this.activeProposals.set(proposal.id, proposal);\n\n    // Update metrics\n    this.metrics.totalProposals++;\n\n    // Initiate voting\n    await this.initiateVoting(proposal);\n\n    this.emit('proposalCreated', proposal);\n\n    return proposal.id;\n  }\n\n  /**\n   * Submit a vote for a proposal\n   */\n  async submitVote(vote: ConsensusVote): Promise<void> {\n    const proposal = this.activeProposals.get(vote.proposalId);\n    if (!proposal) {\n      throw new Error('Proposal not found or no longer active');\n    }\n\n    // Validate vote\n    if (!this.validateVote(vote, proposal)) {\n      throw new Error('Invalid vote');\n    }\n\n    // Store vote\n    await this.db.submitConsensusVote(vote.proposalId, vote.agentId, vote.vote, vote.reason);\n\n    // Check if consensus achieved\n    await this.checkConsensus(proposal);\n\n    this.emit('voteSubmitted', vote);\n  }\n\n  /**\n   * Get proposal status\n   */\n  async getProposalStatus(proposalId: string): Promise<any> {\n    const dbProposal = await this.db.getConsensusProposal(proposalId);\n    if (!dbProposal) {\n      throw new Error('Proposal not found');\n    }\n\n    const votes = JSON.parse(dbProposal.votes || '{}');\n    const voteCount = Object.keys(votes).length;\n    const positiveVotes = Object.values(votes).filter((v: any) => v.vote).length;\n\n    return {\n      id: proposalId,\n      status: dbProposal.status,\n      proposal: JSON.parse(dbProposal.proposal),\n      requiredThreshold: dbProposal.required_threshold,\n      currentVotes: dbProposal.current_votes,\n      totalVoters: dbProposal.total_voters,\n      currentRatio: voteCount > 0 ? positiveVotes / voteCount : 0,\n      votes: votes,\n      deadline: dbProposal.deadline_at,\n      timeRemaining: new Date(dbProposal.deadline_at).getTime() - Date.now(),\n    };\n  }\n\n  /**\n   * Get voting recommendation for an agent\n   */\n  async getVotingRecommendation(\n    proposalId: string,\n    agentId: string,\n    agentType: string,\n  ): Promise<any> {\n    const proposal = this.activeProposals.get(proposalId);\n    if (!proposal) {\n      throw new Error('Proposal not found');\n    }\n\n    // Analyze proposal using neural patterns\n    const analysis = await this.mcpWrapper.analyzePattern({\n      action: 'analyze',\n      operation: 'consensus_proposal',\n      metadata: {\n        proposal: proposal.proposal,\n        agentType,\n        requiredThreshold: proposal.requiredThreshold,\n      },\n    });\n\n    // Get strategy recommendation\n    const strategy = this.selectVotingStrategy(proposal, agentType);\n    const recommendation = strategy.recommend(proposal, analysis);\n\n    return {\n      proposalId,\n      recommendation: recommendation.vote,\n      confidence: recommendation.confidence,\n      reasoning: recommendation.reasoning,\n      factors: recommendation.factors,\n    };\n  }\n\n  /**\n   * Force consensus check (for testing or manual intervention)\n   */\n  async forceConsensusCheck(proposalId: string): Promise<ConsensusResult> {\n    const proposal = this.activeProposals.get(proposalId);\n    if (!proposal) {\n      throw new Error('Proposal not found');\n    }\n\n    return this.checkConsensus(proposal);\n  }\n\n  /**\n   * Get consensus metrics\n   */\n  getMetrics(): ConsensusMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Initialize voting strategies\n   */\n  private initializeVotingStrategies(): void {\n    // Simple majority strategy\n    this.votingStrategies.set('simple_majority', {\n      name: 'Simple Majority',\n      description: 'Requires more than 50% positive votes',\n      threshold: 0.5,\n      recommend: (proposal, analysis) => ({\n        vote: analysis.data?.recommendation || true,\n        confidence: 0.7,\n        reasoning: 'Based on simple majority principle',\n        factors: ['proposal_quality', 'impact_assessment'],\n      }),\n    });\n\n    // Supermajority strategy\n    this.votingStrategies.set('supermajority', {\n      name: 'Supermajority',\n      description: 'Requires 2/3 or more positive votes',\n      threshold: 0.66,\n      recommend: (proposal, analysis) => ({\n        vote: analysis.data?.strongRecommendation || false,\n        confidence: 0.8,\n        reasoning: 'Requires strong consensus for critical decisions',\n        factors: ['criticality', 'risk_assessment', 'broad_support'],\n      }),\n    });\n\n    // Unanimous strategy\n    this.votingStrategies.set('unanimous', {\n      name: 'Unanimous',\n      description: 'Requires 100% agreement',\n      threshold: 1.0,\n      recommend: (proposal, analysis) => ({\n        vote: analysis.data?.perfectAlignment || false,\n        confidence: 0.9,\n        reasoning: 'All agents must agree for this decision',\n        factors: ['absolute_necessity', 'zero_dissent'],\n      }),\n    });\n\n    // Qualified majority strategy\n    this.votingStrategies.set('qualified_majority', {\n      name: 'Qualified Majority',\n      description: 'Weighted voting based on agent expertise',\n      threshold: 0.6,\n      recommend: (proposal, analysis) => {\n        const expertise = analysis.data?.expertiseAlignment || 0.5;\n        return {\n          vote: expertise > 0.6,\n          confidence: expertise,\n          reasoning: 'Based on agent expertise and proposal alignment',\n          factors: ['expertise_level', 'domain_knowledge', 'past_performance'],\n        };\n      },\n    });\n  }\n\n  /**\n   * Initiate voting process\n   */\n  private async initiateVoting(proposal: ConsensusProposal): Promise<void> {\n    // Broadcast proposal to all eligible voters\n    await this.db.createCommunication({\n      from_agent_id: 'consensus-engine',\n      to_agent_id: null, // broadcast\n      swarm_id: proposal.swarmId,\n      message_type: 'consensus',\n      content: JSON.stringify({\n        type: 'voting_request',\n        proposal,\n      }),\n      priority: 'high',\n      requires_response: true,\n    });\n\n    // Set up voting deadline monitoring\n    if (proposal.deadline) {\n      const timeUntilDeadline = proposal.deadline.getTime() - Date.now();\n\n      setTimeout(async () => {\n        await this.handleVotingDeadline(proposal.id);\n      }, timeUntilDeadline);\n    }\n  }\n\n  /**\n   * Validate a vote\n   */\n  private validateVote(vote: ConsensusVote, proposal: ConsensusProposal): boolean {\n    // Check if voting is still open\n    if (proposal.deadline && new Date() > proposal.deadline) {\n      return false;\n    }\n\n    // Check if agent already voted\n    // This would be checked in the database layer\n\n    // Validate vote structure\n    if (typeof vote.vote !== 'boolean') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if consensus has been achieved\n   */\n  private async checkConsensus(proposal: ConsensusProposal): Promise<ConsensusResult> {\n    const status = await this.getProposalStatus(proposal.id);\n\n    const result: ConsensusResult = {\n      proposalId: proposal.id,\n      achieved: false,\n      finalRatio: status.currentRatio,\n      totalVotes: status.currentVotes,\n      positiveVotes: Math.round(status.currentVotes * status.currentRatio),\n      negativeVotes: status.currentVotes - Math.round(status.currentVotes * status.currentRatio),\n      participationRate: status.totalVoters > 0 ? status.currentVotes / status.totalVoters : 0,\n    };\n\n    // Check if threshold met\n    if (status.currentRatio >= proposal.requiredThreshold) {\n      result.achieved = true;\n      await this.handleConsensusAchieved(proposal, result);\n    } else if (status.currentVotes === status.totalVoters) {\n      // All votes are in but consensus not achieved\n      await this.handleConsensusFailed(proposal, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Handle consensus achieved\n   */\n  private async handleConsensusAchieved(\n    proposal: ConsensusProposal,\n    result: ConsensusResult,\n  ): Promise<void> {\n    // Update proposal status\n    await this.db.updateConsensusStatus(proposal.id, 'achieved');\n\n    // Remove from active proposals\n    this.activeProposals.delete(proposal.id);\n\n    // Update metrics\n    this.metrics.achievedConsensus++;\n    this.updateAverageMetrics(result);\n\n    // Notify all agents\n    await this.broadcastConsensusResult(proposal, result, true);\n\n    // Execute consensus decision if applicable\n    if (proposal.taskId) {\n      await this.executeConsensusDecision(proposal, result);\n    }\n\n    this.emit('consensusAchieved', { proposal, result });\n  }\n\n  /**\n   * Handle consensus failed\n   */\n  private async handleConsensusFailed(\n    proposal: ConsensusProposal,\n    result: ConsensusResult,\n  ): Promise<void> {\n    // Update proposal status\n    await this.db.updateConsensusStatus(proposal.id, 'failed');\n\n    // Remove from active proposals\n    this.activeProposals.delete(proposal.id);\n\n    // Update metrics\n    this.metrics.failedConsensus++;\n    this.updateAverageMetrics(result);\n\n    // Notify all agents\n    await this.broadcastConsensusResult(proposal, result, false);\n\n    this.emit('consensusFailed', { proposal, result });\n  }\n\n  /**\n   * Handle voting deadline\n   */\n  private async handleVotingDeadline(proposalId: string): Promise<void> {\n    const proposal = this.activeProposals.get(proposalId);\n    if (!proposal) return;\n\n    const result = await this.checkConsensus(proposal);\n\n    if (!result.achieved) {\n      await this.handleConsensusFailed(proposal, result);\n    }\n  }\n\n  /**\n   * Select voting strategy\n   */\n  private selectVotingStrategy(proposal: ConsensusProposal, agentType: string): VotingStrategy {\n    // Select strategy based on threshold\n    if (proposal.requiredThreshold >= 1.0) {\n      return this.votingStrategies.get('unanimous')!;\n    } else if (proposal.requiredThreshold >= 0.66) {\n      return this.votingStrategies.get('supermajority')!;\n    } else {\n      return this.votingStrategies.get('simple_majority')!;\n    }\n  }\n\n  /**\n   * Update average metrics\n   */\n  private updateAverageMetrics(result: ConsensusResult): void {\n    // Update average participation rate\n    const totalDecisions = this.metrics.achievedConsensus + this.metrics.failedConsensus;\n    this.metrics.avgParticipation =\n      (this.metrics.avgParticipation * (totalDecisions - 1) + result.participationRate) /\n      totalDecisions;\n  }\n\n  /**\n   * Broadcast consensus result\n   */\n  private async broadcastConsensusResult(\n    proposal: ConsensusProposal,\n    result: ConsensusResult,\n    achieved: boolean,\n  ): Promise<void> {\n    await this.db.createCommunication({\n      from_agent_id: 'consensus-engine',\n      to_agent_id: null, // broadcast\n      swarm_id: proposal.swarmId,\n      message_type: 'consensus',\n      content: JSON.stringify({\n        type: 'consensus_result',\n        proposal,\n        result,\n        achieved,\n      }),\n      priority: 'high',\n    });\n  }\n\n  /**\n   * Execute consensus decision\n   */\n  private async executeConsensusDecision(\n    proposal: ConsensusProposal,\n    result: ConsensusResult,\n  ): Promise<void> {\n    if (!proposal.taskId) return;\n\n    // Update task based on consensus decision\n    const decision = proposal.proposal;\n\n    if (decision.action === 'approve_task') {\n      await this.db.updateTaskStatus(proposal.taskId, 'approved');\n    } else if (decision.action === 'modify_task') {\n      await this.db.updateTask(proposal.taskId, decision.modifications);\n    } else if (decision.action === 'cancel_task') {\n      await this.db.updateTaskStatus(proposal.taskId, 'cancelled');\n    }\n\n    this.emit('consensusExecuted', { proposal, result, taskId: proposal.taskId });\n  }\n\n  /**\n   * Start proposal monitor\n   */\n  private startProposalMonitor(): void {\n    setInterval(async () => {\n      if (!this.isActive) return;\n\n      try {\n        // Check active proposals for updates\n        for (const proposal of this.activeProposals.values()) {\n          await this.checkConsensus(proposal);\n        }\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }, 5000); // Every 5 seconds\n  }\n\n  /**\n   * Start timeout checker\n   */\n  private startTimeoutChecker(): void {\n    setInterval(async () => {\n      if (!this.isActive) return;\n\n      try {\n        const now = Date.now();\n\n        for (const proposal of this.activeProposals.values()) {\n          if (proposal.deadline && proposal.deadline.getTime() < now) {\n            await this.handleVotingDeadline(proposal.id);\n          }\n        }\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }, 1000); // Every second\n  }\n\n  /**\n   * Start metrics collector\n   */\n  private startMetricsCollector(): void {\n    setInterval(async () => {\n      if (!this.isActive) return;\n\n      try {\n        // Calculate average voting time\n        const recentProposals = await this.db.getRecentConsensusProposals(10);\n\n        if (recentProposals.length > 0) {\n          const votingTimes = recentProposals\n            .filter((p) => p.completed_at)\n            .map((p) => new Date(p.completed_at).getTime() - new Date(p.created_at).getTime());\n\n          if (votingTimes.length > 0) {\n            this.metrics.avgVotingTime =\n              votingTimes.reduce((a, b) => a + b, 0) / votingTimes.length;\n          }\n        }\n\n        // Store metrics\n        await this.storeMetrics();\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Store consensus metrics\n   */\n  private async storeMetrics(): Promise<void> {\n    await this.mcpWrapper.storeMemory({\n      action: 'store',\n      key: 'consensus-metrics',\n      value: JSON.stringify(this.metrics),\n      namespace: 'performance-metrics',\n      ttl: 86400 * 30, // 30 days\n    });\n  }\n\n  /**\n   * Database helper methods (to be implemented in DatabaseManager)\n   */\n  private async getConsensusProposal(id: string): Promise<any> {\n    return this.db.prepare('SELECT * FROM consensus WHERE id = ?').get(id);\n  }\n\n  private async updateConsensusStatus(id: string, status: string): Promise<void> {\n    this.db\n      .prepare('UPDATE consensus SET status = ?, completed_at = CURRENT_TIMESTAMP WHERE id = ?')\n      .run(status, id);\n  }\n\n  private async getRecentConsensusProposals(limit: number): Promise<any[]> {\n    return this.db.prepare('SELECT * FROM consensus ORDER BY created_at DESC LIMIT ?').all(limit);\n  }\n\n  /**\n   * Shutdown consensus engine\n   */\n  async shutdown(): Promise<void> {\n    this.isActive = false;\n\n    // Clear active proposals\n    this.activeProposals.clear();\n\n    this.emit('shutdown');\n  }\n}\n"],"names":["EventEmitter","DatabaseManager","MCPToolWrapper","ConsensusEngine","threshold","db","mcpWrapper","activeProposals","votingStrategies","metrics","isActive","Map","totalProposals","achievedConsensus","failedConsensus","avgVotingTime","avgParticipation","initializeVotingStrategies","initialize","getInstance","startProposalMonitor","startTimeoutChecker","startMetricsCollector","emit","createProposal","proposal","createConsensusProposal","set","id","initiateVoting","submitVote","vote","get","proposalId","Error","validateVote","submitConsensusVote","agentId","reason","checkConsensus","getProposalStatus","dbProposal","getConsensusProposal","votes","JSON","parse","voteCount","Object","keys","length","positiveVotes","values","filter","v","status","requiredThreshold","required_threshold","currentVotes","current_votes","totalVoters","total_voters","currentRatio","deadline","deadline_at","timeRemaining","Date","getTime","now","getVotingRecommendation","agentType","analysis","analyzePattern","action","operation","metadata","strategy","selectVotingStrategy","recommendation","recommend","confidence","reasoning","factors","forceConsensusCheck","getMetrics","name","description","data","strongRecommendation","perfectAlignment","expertise","expertiseAlignment","createCommunication","from_agent_id","to_agent_id","swarm_id","swarmId","message_type","content","stringify","type","priority","requires_response","timeUntilDeadline","setTimeout","handleVotingDeadline","result","achieved","finalRatio","totalVotes","Math","round","negativeVotes","participationRate","handleConsensusAchieved","handleConsensusFailed","updateConsensusStatus","delete","updateAverageMetrics","broadcastConsensusResult","taskId","executeConsensusDecision","totalDecisions","decision","updateTaskStatus","updateTask","modifications","setInterval","error","recentProposals","getRecentConsensusProposals","votingTimes","p","completed_at","map","created_at","reduce","a","b","storeMetrics","storeMemory","key","value","namespace","ttl","prepare","run","limit","all","shutdown","clear"],"mappings":"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"}