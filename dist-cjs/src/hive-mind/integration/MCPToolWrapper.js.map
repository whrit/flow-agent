{"version":3,"sources":["../../../../src/hive-mind/integration/MCPToolWrapper.ts"],"sourcesContent":["/**\n * MCPToolWrapper Class\n *\n * Wraps all MCP tools for use within the Hive Mind system,\n * providing a unified interface for swarm coordination, neural processing,\n * and memory management.\n */\n\nimport { EventEmitter } from 'events';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { getErrorMessage } from '../../utils/type-guards.js';\n\nconst execAsync = promisify(exec);\n\ninterface MCPToolResponse {\n  success: boolean;\n  data?: any;\n  error?: string;\n}\n\nexport class MCPToolWrapper extends EventEmitter {\n  private toolPrefix = 'mcp__ruv-swarm__';\n  private isInitialized = false;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialize MCP tools\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Check if MCP tools are available\n      await this.checkToolAvailability();\n      this.isInitialized = true;\n      this.emit('initialized');\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if MCP tools are available\n   */\n  private async checkToolAvailability(): Promise<void> {\n    try {\n      const { stdout } = await execAsync('npx ruv-swarm --version');\n      if (!stdout) {\n        throw new Error('ruv-swarm MCP tools not found');\n      }\n    } catch (error) {\n      throw new Error('MCP tools not available. Please ensure ruv-swarm is installed.');\n    }\n  }\n\n  /**\n   * Execute MCP tool via CLI\n   */\n  private async executeTool(toolName: string, params: any): Promise<MCPToolResponse> {\n    try {\n      const command = `npx ruv-swarm mcp-execute ${toolName} '${JSON.stringify(params)}'`;\n      const { stdout, stderr } = await execAsync(command);\n\n      if (stderr) {\n        return { success: false, error: stderr };\n      }\n\n      const result = JSON.parse(stdout);\n      return { success: true, data: result };\n    } catch (error) {\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  // Swarm coordination tools\n\n  async initSwarm(params: {\n    topology: string;\n    maxAgents?: number;\n    strategy?: string;\n  }): Promise<any> {\n    return this.executeTool('swarm_init', params);\n  }\n\n  async spawnAgent(params: {\n    type: string;\n    name?: string;\n    swarmId?: string;\n    capabilities?: string[];\n  }): Promise<any> {\n    return this.executeTool('agent_spawn', params);\n  }\n\n  async orchestrateTask(params: {\n    task: string;\n    priority?: string;\n    strategy?: string;\n    dependencies?: string[];\n  }): Promise<any> {\n    return this.executeTool('task_orchestrate', params);\n  }\n\n  async getSwarmStatus(swarmId?: string): Promise<any> {\n    return this.executeTool('swarm_status', { swarmId });\n  }\n\n  async monitorSwarm(params: { swarmId?: string; interval?: number }): Promise<any> {\n    return this.executeTool('swarm_monitor', params);\n  }\n\n  // Neural and pattern tools\n\n  async analyzePattern(params: {\n    action: string;\n    operation?: string;\n    metadata?: any;\n  }): Promise<any> {\n    return this.executeTool('neural_patterns', params);\n  }\n\n  async trainNeural(params: {\n    pattern_type: string;\n    training_data: string;\n    epochs?: number;\n  }): Promise<any> {\n    return this.executeTool('neural_train', params);\n  }\n\n  async predict(params: { modelId: string; input: string }): Promise<any> {\n    return this.executeTool('neural_predict', params);\n  }\n\n  async getNeuralStatus(modelId?: string): Promise<any> {\n    return this.executeTool('neural_status', { modelId });\n  }\n\n  // Memory management tools\n\n  async storeMemory(params: {\n    action: 'store';\n    key: string;\n    value: string;\n    namespace?: string;\n    ttl?: number;\n  }): Promise<any> {\n    return this.executeTool('memory_usage', params);\n  }\n\n  async retrieveMemory(params: {\n    action: 'retrieve';\n    key: string;\n    namespace?: string;\n  }): Promise<any> {\n    const result = await this.executeTool('memory_usage', params);\n    return result.success ? result.data : null;\n  }\n\n  async searchMemory(params: {\n    pattern: string;\n    namespace?: string;\n    limit?: number;\n  }): Promise<any> {\n    return this.executeTool('memory_search', params);\n  }\n\n  async deleteMemory(params: { action: 'delete'; key: string; namespace?: string }): Promise<any> {\n    return this.executeTool('memory_usage', params);\n  }\n\n  async listMemory(params: { action: 'list'; namespace?: string }): Promise<any> {\n    return this.executeTool('memory_usage', params);\n  }\n\n  // Performance and monitoring tools\n\n  async getPerformanceReport(params?: { format?: string; timeframe?: string }): Promise<any> {\n    return this.executeTool('performance_report', params || {});\n  }\n\n  async analyzeBottlenecks(params?: { component?: string; metrics?: string[] }): Promise<any> {\n    return this.executeTool('bottleneck_analyze', params || {});\n  }\n\n  async getTokenUsage(params?: { operation?: string; timeframe?: string }): Promise<any> {\n    return this.executeTool('token_usage', params || {});\n  }\n\n  // Agent management tools\n\n  async listAgents(swarmId?: string): Promise<any> {\n    return this.executeTool('agent_list', { swarmId });\n  }\n\n  async getAgentMetrics(agentId: string): Promise<any> {\n    return this.executeTool('agent_metrics', { agentId });\n  }\n\n  // Task management tools\n\n  async getTaskStatus(taskId: string): Promise<any> {\n    return this.executeTool('task_status', { taskId });\n  }\n\n  async getTaskResults(taskId: string): Promise<any> {\n    return this.executeTool('task_results', { taskId });\n  }\n\n  // Advanced coordination tools\n\n  async optimizeTopology(swarmId?: string): Promise<any> {\n    return this.executeTool('topology_optimize', { swarmId });\n  }\n\n  async loadBalance(params: { swarmId?: string; tasks: any[] }): Promise<any> {\n    return this.executeTool('load_balance', params);\n  }\n\n  async syncCoordination(swarmId?: string): Promise<any> {\n    return this.executeTool('coordination_sync', { swarmId });\n  }\n\n  async scaleSwarm(params: { swarmId?: string; targetSize: number }): Promise<any> {\n    return this.executeTool('swarm_scale', params);\n  }\n\n  // SPARC mode integration\n\n  async runSparcMode(params: {\n    mode: string;\n    task_description: string;\n    options?: any;\n  }): Promise<any> {\n    return this.executeTool('sparc_mode', params);\n  }\n\n  // Workflow tools\n\n  async createWorkflow(params: { name: string; steps: any[]; triggers?: any[] }): Promise<any> {\n    return this.executeTool('workflow_create', params);\n  }\n\n  async executeWorkflow(params: { workflowId: string; params?: any }): Promise<any> {\n    return this.executeTool('workflow_execute', params);\n  }\n\n  // GitHub integration tools\n\n  async analyzeRepository(params: { repo: string; analysis_type?: string }): Promise<any> {\n    return this.executeTool('github_repo_analyze', params);\n  }\n\n  async manageGitHubPR(params: { repo: string; action: string; pr_number?: number }): Promise<any> {\n    return this.executeTool('github_pr_manage', params);\n  }\n\n  // Dynamic Agent Architecture tools\n\n  async createDynamicAgent(params: {\n    agent_type: string;\n    capabilities?: string[];\n    resources?: any;\n  }): Promise<any> {\n    return this.executeTool('daa_agent_create', params);\n  }\n\n  async matchCapabilities(params: {\n    task_requirements: string[];\n    available_agents?: any[];\n  }): Promise<any> {\n    return this.executeTool('daa_capability_match', params);\n  }\n\n  // System tools\n\n  async runBenchmark(suite?: string): Promise<any> {\n    return this.executeTool('benchmark_run', { suite });\n  }\n\n  async collectMetrics(components?: string[]): Promise<any> {\n    return this.executeTool('metrics_collect', { components });\n  }\n\n  async analyzeTrends(params: { metric: string; period?: string }): Promise<any> {\n    return this.executeTool('trend_analysis', params);\n  }\n\n  async analyzeCost(timeframe?: string): Promise<any> {\n    return this.executeTool('cost_analysis', { timeframe });\n  }\n\n  async assessQuality(params: { target: string; criteria?: string[] }): Promise<any> {\n    return this.executeTool('quality_assess', params);\n  }\n\n  async healthCheck(components?: string[]): Promise<any> {\n    return this.executeTool('health_check', { components });\n  }\n\n  // Batch operations\n\n  async batchProcess(params: { items: any[]; operation: string }): Promise<any> {\n    return this.executeTool('batch_process', params);\n  }\n\n  async parallelExecute(tasks: any[]): Promise<any> {\n    return this.executeTool('parallel_execute', { tasks });\n  }\n\n  /**\n   * Generic tool execution for custom tools\n   */\n  async executeMCPTool(toolName: string, params: any): Promise<any> {\n    return this.executeTool(toolName, params);\n  }\n\n  /**\n   * Helper to format tool responses\n   */\n  private formatResponse(response: MCPToolResponse): any {\n    if (response.success) {\n      return response.data;\n    } else {\n      throw new Error(`MCP Tool Error: ${response.error}`);\n    }\n  }\n}\n"],"names":["EventEmitter","exec","promisify","getErrorMessage","execAsync","MCPToolWrapper","toolPrefix","isInitialized","initialize","checkToolAvailability","emit","error","stdout","Error","executeTool","toolName","params","command","JSON","stringify","stderr","success","result","parse","data","initSwarm","spawnAgent","orchestrateTask","getSwarmStatus","swarmId","monitorSwarm","analyzePattern","trainNeural","predict","getNeuralStatus","modelId","storeMemory","retrieveMemory","searchMemory","deleteMemory","listMemory","getPerformanceReport","analyzeBottlenecks","getTokenUsage","listAgents","getAgentMetrics","agentId","getTaskStatus","taskId","getTaskResults","optimizeTopology","loadBalance","syncCoordination","scaleSwarm","runSparcMode","createWorkflow","executeWorkflow","analyzeRepository","manageGitHubPR","createDynamicAgent","matchCapabilities","runBenchmark","suite","collectMetrics","components","analyzeTrends","analyzeCost","timeframe","assessQuality","healthCheck","batchProcess","parallelExecute","tasks","executeMCPTool","formatResponse","response"],"mappings":"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"}