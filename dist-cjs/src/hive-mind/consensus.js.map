{"version":3,"sources":["../../../src/hive-mind/consensus.js"],"sourcesContent":["/**\n * Hive Mind Consensus Engine\n * \n * Implements multiple consensus algorithms for distributed decision making:\n * - Majority voting (simple and weighted)\n * - Byzantine fault tolerance\n * - Dynamic threshold adjustment\n * - Quorum management\n */\n\nimport { EventEmitter } from 'node:events';\nimport { generateId } from '../utils/helpers.js';\n\nexport class ConsensusEngine extends EventEmitter {\n  constructor(config = {}) {\n    super();\n    \n    this.config = {\n      defaultThreshold: 0.6,\n      byzantineTolerance: 0.33, // Max 33% Byzantine actors\n      quorumSize: 0.75, // Minimum 75% participation\n      votingTimeout: 30000, // 30 seconds\n      maxRetries: 3,\n      weightDecay: 0.95, // Weight decay for agents with failures\n      ...config\n    };\n    \n    this.proposals = new Map();\n    this.agents = new Map();\n    this.votingHistory = new Map();\n    this.metrics = {\n      totalProposals: 0,\n      successfulConsensus: 0,\n      failedConsensus: 0,\n      byzantineDetected: 0,\n      avgVotingTime: 0\n    };\n  }\n\n  /**\n   * Register agent with initial reputation weight\n   */\n  registerAgent(agentId, initialWeight = 1.0, capabilities = []) {\n    this.agents.set(agentId, {\n      id: agentId,\n      weight: initialWeight,\n      reputation: 1.0,\n      capabilities,\n      votescast: 0,\n      correctVotes: 0,\n      byzantineFlags: 0,\n      lastActivity: Date.now(),\n      isOnline: true\n    });\n    \n    this.emit('agent:registered', { agentId, weight: initialWeight });\n  }\n\n  /**\n   * Create a new consensus proposal\n   */\n  async createProposal(data) {\n    const proposalId = generateId('proposal');\n    const proposal = {\n      id: proposalId,\n      type: data.type || 'general',\n      content: data.content,\n      threshold: data.threshold || this.config.defaultThreshold,\n      algorithm: data.algorithm || 'weighted_majority',\n      creator: data.creator,\n      requiredCapabilities: data.requiredCapabilities || [],\n      metadata: data.metadata || {},\n      \n      // Voting state\n      votes: new Map(),\n      eligibleAgents: new Set(),\n      startTime: Date.now(),\n      deadline: Date.now() + (data.timeout || this.config.votingTimeout),\n      status: 'active',\n      \n      // Results\n      result: null,\n      finalRatio: 0,\n      participationRate: 0,\n      consensus: false,\n      \n      // Byzantine detection\n      suspiciousVotes: new Set(),\n      consistencyChecks: new Map()\n    };\n\n    // Determine eligible agents based on capabilities\n    this.determineEligibleAgents(proposal);\n    \n    this.proposals.set(proposalId, proposal);\n    this.metrics.totalProposals++;\n    \n    this.emit('proposal:created', proposal);\n    \n    // Set timeout for proposal\n    setTimeout(() => this.finalizeProposal(proposalId), proposal.deadline - proposal.startTime);\n    \n    return proposalId;\n  }\n\n  /**\n   * Determine which agents are eligible to vote\n   */\n  determineEligibleAgents(proposal) {\n    for (const [agentId, agent] of this.agents) {\n      if (!agent.isOnline) continue;\n      \n      // Check capabilities if required\n      if (proposal.requiredCapabilities.length > 0) {\n        const hasRequiredCapability = proposal.requiredCapabilities.some(cap => \n          agent.capabilities.includes(cap)\n        );\n        if (!hasRequiredCapability) continue;\n      }\n      \n      // Exclude agents with too many Byzantine flags\n      if (agent.byzantineFlags > 3) continue;\n      \n      proposal.eligibleAgents.add(agentId);\n    }\n    \n    console.log(`Proposal ${proposal.id}: ${proposal.eligibleAgents.size} eligible agents`);\n  }\n\n  /**\n   * Submit a vote for a proposal\n   */\n  async submitVote(proposalId, agentId, vote, reasoning = '') {\n    const proposal = this.proposals.get(proposalId);\n    if (!proposal) {\n      throw new Error(`Proposal ${proposalId} not found`);\n    }\n\n    if (proposal.status !== 'active') {\n      throw new Error(`Proposal ${proposalId} is no longer active`);\n    }\n\n    if (!proposal.eligibleAgents.has(agentId)) {\n      throw new Error(`Agent ${agentId} is not eligible to vote on this proposal`);\n    }\n\n    if (Date.now() > proposal.deadline) {\n      throw new Error(`Voting deadline has passed for proposal ${proposalId}`);\n    }\n\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not registered`);\n    }\n\n    // Record the vote\n    const voteRecord = {\n      agentId,\n      vote: Boolean(vote),\n      weight: agent.weight,\n      reasoning,\n      timestamp: Date.now(),\n      confidence: this.calculateVoteConfidence(agent, proposal)\n    };\n\n    proposal.votes.set(agentId, voteRecord);\n    agent.votescast++;\n    agent.lastActivity = Date.now();\n\n    this.emit('vote:submitted', { proposalId, agentId, vote, reasoning });\n\n    // Perform Byzantine detection\n    this.detectByzantineBehavior(proposal, voteRecord);\n\n    // Check if we can finalize early\n    if (this.canFinalizeEarly(proposal)) {\n      return this.finalizeProposal(proposalId);\n    }\n\n    return { status: 'recorded', proposal: proposal.id };\n  }\n\n  /**\n   * Calculate vote confidence based on agent history\n   */\n  calculateVoteConfidence(agent, proposal) {\n    const reputationFactor = agent.reputation;\n    const experienceFactor = Math.min(agent.votescast / 10, 1.0);\n    const consistencyFactor = agent.votescast > 0 ? agent.correctVotes / agent.votescast : 0.5;\n    const recencyFactor = Math.max(0.1, 1.0 - (Date.now() - agent.lastActivity) / (24 * 60 * 60 * 1000));\n    \n    return (reputationFactor + experienceFactor + consistencyFactor + recencyFactor) / 4;\n  }\n\n  /**\n   * Detect Byzantine behavior patterns\n   */\n  detectByzantineBehavior(proposal, voteRecord) {\n    const { agentId, vote, confidence } = voteRecord;\n    const agent = this.agents.get(agentId);\n    \n    // Pattern 1: Vote flipping (changing votes frequently)\n    const recentVotes = Array.from(this.votingHistory.values())\n      .filter(v => v.agentId === agentId && Date.now() - v.timestamp < 3600000) // Last hour\n      .slice(-5);\n    \n    if (recentVotes.length >= 3) {\n      const voteChanges = recentVotes.reduce((changes, v, i) => \n        i > 0 && v.vote !== recentVotes[i-1].vote ? changes + 1 : changes, 0);\n      \n      if (voteChanges >= 2) {\n        this.flagByzantineAgent(agentId, 'vote_flipping', proposal.id);\n      }\n    }\n\n    // Pattern 2: Extremely low confidence with definitive votes\n    if (confidence < 0.3 && Math.abs(vote ? 1 : 0) === 1) {\n      this.flagByzantineAgent(agentId, 'confidence_mismatch', proposal.id);\n    }\n\n    // Pattern 3: Consistent minority voting (contrarian behavior)\n    const agentHistory = Array.from(this.votingHistory.values())\n      .filter(v => v.agentId === agentId)\n      .slice(-10);\n    \n    if (agentHistory.length >= 5) {\n      const minorityVotes = agentHistory.filter(v => {\n        const proposalResult = this.proposals.get(v.proposalId);\n        return proposalResult && proposalResult.consensus !== v.vote;\n      }).length;\n      \n      if (minorityVotes / agentHistory.length > 0.8) {\n        this.flagByzantineAgent(agentId, 'contrarian_pattern', proposal.id);\n      }\n    }\n\n    // Store vote in history\n    this.votingHistory.set(`${proposal.id}:${agentId}`, {\n      proposalId: proposal.id,\n      agentId,\n      vote,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Flag an agent for Byzantine behavior\n   */\n  flagByzantineAgent(agentId, reason, proposalId) {\n    const agent = this.agents.get(agentId);\n    if (!agent) return;\n\n    agent.byzantineFlags++;\n    agent.weight *= this.config.weightDecay;\n    this.metrics.byzantineDetected++;\n    \n    console.warn(`Byzantine behavior detected: Agent ${agentId}, Reason: ${reason}, Proposal: ${proposalId}`);\n    this.emit('byzantine:detected', { agentId, reason, proposalId, newWeight: agent.weight });\n    \n    // Quarantine agent if too many flags\n    if (agent.byzantineFlags >= 5) {\n      agent.isOnline = false;\n      this.emit('agent:quarantined', { agentId, flags: agent.byzantineFlags });\n    }\n  }\n\n  /**\n   * Check if proposal can be finalized early\n   */\n  canFinalizeEarly(proposal) {\n    const totalEligible = proposal.eligibleAgents.size;\n    const votesReceived = proposal.votes.size;\n    \n    // Early finalization conditions:\n    // 1. Unanimous agreement\n    // 2. Impossible to change outcome\n    // 3. Sufficient participation with clear majority\n    \n    if (votesReceived < Math.ceil(totalEligible * this.config.quorumSize)) {\n      return false;\n    }\n\n    const { positiveVotes, negativeVotes } = this.calculateVotes(proposal);\n    const totalWeightedVotes = positiveVotes + negativeVotes;\n    const ratio = totalWeightedVotes > 0 ? positiveVotes / totalWeightedVotes : 0;\n    \n    // Unanimous or overwhelming majority\n    if (ratio >= 0.95 || ratio <= 0.05) {\n      return true;\n    }\n    \n    // Mathematically impossible to change outcome\n    const remainingVotes = totalEligible - votesReceived;\n    const maxPossibleChange = remainingVotes * Math.max(...Array.from(this.agents.values()).map(a => a.weight));\n    \n    if (ratio > proposal.threshold && positiveVotes - negativeVotes > maxPossibleChange) {\n      return true;\n    }\n    \n    if (ratio < proposal.threshold && negativeVotes - positiveVotes > maxPossibleChange) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Calculate weighted votes\n   */\n  calculateVotes(proposal) {\n    let positiveVotes = 0;\n    let negativeVotes = 0;\n    let totalWeight = 0;\n    \n    for (const [agentId, vote] of proposal.votes) {\n      const agent = this.agents.get(agentId);\n      if (!agent) continue;\n      \n      const voteWeight = agent.weight;\n      totalWeight += voteWeight;\n      \n      if (vote.vote) {\n        positiveVotes += voteWeight;\n      } else {\n        negativeVotes += voteWeight;\n      }\n    }\n    \n    return { positiveVotes, negativeVotes, totalWeight };\n  }\n\n  /**\n   * Apply different consensus algorithms\n   */\n  applyConsensusAlgorithm(proposal) {\n    switch (proposal.algorithm) {\n      case 'simple_majority':\n        return this.simpleMajorityConsensus(proposal);\n      case 'weighted_majority':\n        return this.weightedMajorityConsensus(proposal);\n      case 'byzantine_tolerant':\n        return this.byzantineTolerantConsensus(proposal);\n      case 'unanimous':\n        return this.unanimousConsensus(proposal);\n      default:\n        return this.weightedMajorityConsensus(proposal);\n    }\n  }\n\n  /**\n   * Simple majority consensus (one vote per agent)\n   */\n  simpleMajorityConsensus(proposal) {\n    const votes = Array.from(proposal.votes.values());\n    const positiveVotes = votes.filter(v => v.vote).length;\n    const negativeVotes = votes.filter(v => !v.vote).length;\n    const totalVotes = votes.length;\n    \n    const ratio = totalVotes > 0 ? positiveVotes / totalVotes : 0;\n    const consensus = ratio >= proposal.threshold;\n    \n    return {\n      consensus,\n      ratio,\n      positiveVotes,\n      negativeVotes,\n      totalVotes,\n      algorithm: 'simple_majority'\n    };\n  }\n\n  /**\n   * Weighted majority consensus\n   */\n  weightedMajorityConsensus(proposal) {\n    const { positiveVotes, negativeVotes, totalWeight } = this.calculateVotes(proposal);\n    const ratio = totalWeight > 0 ? positiveVotes / totalWeight : 0;\n    const consensus = ratio >= proposal.threshold;\n    \n    return {\n      consensus,\n      ratio,\n      positiveVotes,\n      negativeVotes,\n      totalWeight,\n      algorithm: 'weighted_majority'\n    };\n  }\n\n  /**\n   * Byzantine fault tolerant consensus\n   */\n  byzantineTolerantConsensus(proposal) {\n    const votes = Array.from(proposal.votes.values());\n    const trustedVotes = votes.filter(v => {\n      const agent = this.agents.get(v.agentId);\n      return agent && agent.byzantineFlags === 0 && agent.reputation > 0.7;\n    });\n    \n    if (trustedVotes.length === 0) {\n      return this.weightedMajorityConsensus(proposal);\n    }\n    \n    const positiveVotes = trustedVotes.filter(v => v.vote).length;\n    const totalTrusted = trustedVotes.length;\n    const ratio = positiveVotes / totalTrusted;\n    \n    // Require higher threshold for Byzantine tolerance\n    const byzantineThreshold = Math.max(proposal.threshold, 0.67);\n    const consensus = ratio >= byzantineThreshold;\n    \n    return {\n      consensus,\n      ratio,\n      positiveVotes,\n      negativeVotes: totalTrusted - positiveVotes,\n      totalVotes: totalTrusted,\n      algorithm: 'byzantine_tolerant',\n      trustedVotesOnly: true\n    };\n  }\n\n  /**\n   * Unanimous consensus\n   */\n  unanimousConsensus(proposal) {\n    const votes = Array.from(proposal.votes.values());\n    const allAgree = votes.every(v => v.vote) || votes.every(v => !v.vote);\n    const consensus = allAgree && votes.length > 0;\n    \n    return {\n      consensus,\n      ratio: consensus ? 1.0 : 0.0,\n      positiveVotes: votes.filter(v => v.vote).length,\n      negativeVotes: votes.filter(v => !v.vote).length,\n      totalVotes: votes.length,\n      algorithm: 'unanimous'\n    };\n  }\n\n  /**\n   * Finalize a proposal\n   */\n  async finalizeProposal(proposalId) {\n    const proposal = this.proposals.get(proposalId);\n    if (!proposal || proposal.status !== 'active') {\n      return null;\n    }\n\n    proposal.status = 'finalized';\n    proposal.endTime = Date.now();\n    \n    // Check quorum\n    const participationRate = proposal.votes.size / proposal.eligibleAgents.size;\n    proposal.participationRate = participationRate;\n    \n    if (participationRate < this.config.quorumSize) {\n      proposal.result = this.handleInsufficientQuorum(proposal);\n    } else {\n      proposal.result = this.applyConsensusAlgorithm(proposal);\n    }\n    \n    proposal.consensus = proposal.result.consensus;\n    proposal.finalRatio = proposal.result.ratio;\n    \n    // Update metrics\n    if (proposal.consensus) {\n      this.metrics.successfulConsensus++;\n    } else {\n      this.metrics.failedConsensus++;\n    }\n    \n    const votingTime = proposal.endTime - proposal.startTime;\n    this.metrics.avgVotingTime = \n      (this.metrics.avgVotingTime * (this.metrics.totalProposals - 1) + votingTime) / \n      this.metrics.totalProposals;\n    \n    // Update agent reputations\n    this.updateAgentReputations(proposal);\n    \n    this.emit('proposal:finalized', proposal);\n    \n    return proposal;\n  }\n\n  /**\n   * Handle insufficient quorum\n   */\n  handleInsufficientQuorum(proposal) {\n    return {\n      consensus: false,\n      ratio: 0,\n      positiveVotes: 0,\n      negativeVotes: 0,\n      totalVotes: proposal.votes.size,\n      algorithm: 'quorum_failed',\n      error: `Insufficient quorum: ${proposal.participationRate.toFixed(2)} < ${this.config.quorumSize}`\n    };\n  }\n\n  /**\n   * Update agent reputations based on consensus accuracy\n   */\n  updateAgentReputations(proposal) {\n    if (!proposal.consensus) return;\n    \n    const majorityVote = proposal.finalRatio >= 0.5;\n    \n    for (const [agentId, vote] of proposal.votes) {\n      const agent = this.agents.get(agentId);\n      if (!agent) continue;\n      \n      const votedWithMajority = vote.vote === majorityVote;\n      \n      if (votedWithMajority) {\n        agent.correctVotes++;\n        agent.reputation = Math.min(2.0, agent.reputation * 1.05);\n        agent.weight = Math.min(2.0, agent.weight * 1.02);\n      } else {\n        agent.reputation *= 0.98;\n        agent.weight *= 0.99;\n      }\n    }\n  }\n\n  /**\n   * Get consensus metrics\n   */\n  getMetrics() {\n    const activeProposals = Array.from(this.proposals.values()).filter(p => p.status === 'active');\n    const totalAgents = this.agents.size;\n    const onlineAgents = Array.from(this.agents.values()).filter(a => a.isOnline).length;\n    const byzantineAgents = Array.from(this.agents.values()).filter(a => a.byzantineFlags > 0).length;\n    \n    return {\n      ...this.metrics,\n      activeProposals: activeProposals.length,\n      totalAgents,\n      onlineAgents,\n      byzantineAgents,\n      successRate: this.metrics.totalProposals > 0 ? \n        this.metrics.successfulConsensus / this.metrics.totalProposals : 0,\n      avgParticipationRate: this.calculateAverageParticipation()\n    };\n  }\n\n  /**\n   * Calculate average participation rate\n   */\n  calculateAverageParticipation() {\n    const finalizedProposals = Array.from(this.proposals.values())\n      .filter(p => p.status === 'finalized');\n    \n    if (finalizedProposals.length === 0) return 0;\n    \n    return finalizedProposals.reduce((sum, p) => sum + p.participationRate, 0) / \n           finalizedProposals.length;\n  }\n\n  /**\n   * Get proposal status\n   */\n  getProposal(proposalId) {\n    return this.proposals.get(proposalId);\n  }\n\n  /**\n   * Get agent information\n   */\n  getAgent(agentId) {\n    return this.agents.get(agentId);\n  }\n\n  /**\n   * List all proposals\n   */\n  listProposals(filter = {}) {\n    let proposals = Array.from(this.proposals.values());\n    \n    if (filter.status) {\n      proposals = proposals.filter(p => p.status === filter.status);\n    }\n    \n    if (filter.type) {\n      proposals = proposals.filter(p => p.type === filter.type);\n    }\n    \n    if (filter.creator) {\n      proposals = proposals.filter(p => p.creator === filter.creator);\n    }\n    \n    return proposals.sort((a, b) => b.startTime - a.startTime);\n  }\n\n  /**\n   * Cleanup expired proposals and old history\n   */\n  cleanup() {\n    const now = Date.now();\n    const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n    \n    // Remove old proposals\n    for (const [id, proposal] of this.proposals) {\n      if (now - proposal.startTime > maxAge && proposal.status === 'finalized') {\n        this.proposals.delete(id);\n      }\n    }\n    \n    // Remove old voting history\n    for (const [key, vote] of this.votingHistory) {\n      if (now - vote.timestamp > maxAge) {\n        this.votingHistory.delete(key);\n      }\n    }\n    \n    this.emit('cleanup:completed', {\n      proposalsRemoved: this.proposals.size,\n      historyRemoved: this.votingHistory.size\n    });\n  }\n}"],"names":["EventEmitter","generateId","ConsensusEngine","config","defaultThreshold","byzantineTolerance","quorumSize","votingTimeout","maxRetries","weightDecay","proposals","Map","agents","votingHistory","metrics","totalProposals","successfulConsensus","failedConsensus","byzantineDetected","avgVotingTime","registerAgent","agentId","initialWeight","capabilities","set","id","weight","reputation","votescast","correctVotes","byzantineFlags","lastActivity","Date","now","isOnline","emit","createProposal","data","proposalId","proposal","type","content","threshold","algorithm","creator","requiredCapabilities","metadata","votes","eligibleAgents","Set","startTime","deadline","timeout","status","result","finalRatio","participationRate","consensus","suspiciousVotes","consistencyChecks","determineEligibleAgents","setTimeout","finalizeProposal","agent","length","hasRequiredCapability","some","cap","includes","add","console","log","size","submitVote","vote","reasoning","get","Error","has","voteRecord","Boolean","timestamp","confidence","calculateVoteConfidence","detectByzantineBehavior","canFinalizeEarly","reputationFactor","experienceFactor","Math","min","consistencyFactor","recencyFactor","max","recentVotes","Array","from","values","filter","v","slice","voteChanges","reduce","changes","i","flagByzantineAgent","abs","agentHistory","minorityVotes","proposalResult","reason","warn","newWeight","flags","totalEligible","votesReceived","ceil","positiveVotes","negativeVotes","calculateVotes","totalWeightedVotes","ratio","remainingVotes","maxPossibleChange","map","a","totalWeight","voteWeight","applyConsensusAlgorithm","simpleMajorityConsensus","weightedMajorityConsensus","byzantineTolerantConsensus","unanimousConsensus","totalVotes","trustedVotes","totalTrusted","byzantineThreshold","trustedVotesOnly","allAgree","every","endTime","handleInsufficientQuorum","votingTime","updateAgentReputations","error","toFixed","majorityVote","votedWithMajority","getMetrics","activeProposals","p","totalAgents","onlineAgents","byzantineAgents","successRate","avgParticipationRate","calculateAverageParticipation","finalizedProposals","sum","getProposal","getAgent","listProposals","sort","b","cleanup","maxAge","delete","key","proposalsRemoved","historyRemoved"],"mappings":"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"}