{"version":3,"sources":["../../../../src/hive-mind/core/MemoryMonitor.ts"],"sourcesContent":["/**\n * Memory Monitor and Optimization System\n *\n * Provides real-time monitoring, analysis, and optimization\n * recommendations for the Hive Mind memory subsystem.\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport { Memory } from './Memory.js';\nimport { DatabaseManager } from './DatabaseManager.js';\n\ninterface MemoryAlert {\n  level: 'info' | 'warning' | 'critical';\n  type: string;\n  message: string;\n  value: number;\n  threshold: number;\n  timestamp: Date;\n  recommendations: string[];\n}\n\ninterface OptimizationSuggestion {\n  type: 'cache' | 'database' | 'pool' | 'compression' | 'cleanup';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  estimatedImpact: string;\n  implementation: string;\n  effort: 'minimal' | 'moderate' | 'significant';\n}\n\ninterface MemoryHealthReport {\n  overall: {\n    score: number;\n    status: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';\n    summary: string;\n  };\n  metrics: {\n    cacheHitRate: number;\n    avgQueryTime: number;\n    memoryUtilization: number;\n    compressionRatio: number;\n    poolEfficiency: number;\n  };\n  alerts: MemoryAlert[];\n  suggestions: OptimizationSuggestion[];\n  trends: {\n    performance: 'improving' | 'stable' | 'degrading';\n    memoryUsage: 'increasing' | 'stable' | 'decreasing';\n    cacheEfficiency: 'improving' | 'stable' | 'degrading';\n  };\n}\n\nexport class MemoryMonitor extends EventEmitter {\n  private memory: Memory;\n  private db: DatabaseManager;\n  private isActive = false;\n  private monitoringTimers: NodeJS.Timeout[] = [];\n  private historicalData: Map<string, number[]> = new Map();\n  private alertThresholds = {\n    cacheHitRate: { warning: 50, critical: 30 },\n    avgQueryTime: { warning: 100, critical: 500 },\n    memoryUtilization: { warning: 80, critical: 95 },\n    poolReuseRate: { warning: 30, critical: 10 },\n  };\n  private alerts: MemoryAlert[] = [];\n  private maxHistorySize = 1000;\n\n  constructor(memory: Memory, db: DatabaseManager) {\n    super();\n    this.memory = memory;\n    this.db = db;\n  }\n\n  /**\n   * Start memory monitoring\n   */\n  async start(): Promise<void> {\n    if (this.isActive) return;\n\n    this.isActive = true;\n\n    // Real-time monitoring (every 10 seconds)\n    const realtimeTimer = setInterval(() => {\n      this.collectMetrics();\n    }, 10000);\n\n    // Health analysis (every minute)\n    const healthTimer = setInterval(() => {\n      this.analyzeHealth();\n    }, 60000);\n\n    // Trend analysis (every 5 minutes)\n    const trendTimer = setInterval(() => {\n      this.analyzeTrends();\n    }, 300000);\n\n    // Optimization suggestions (every 15 minutes)\n    const optimizationTimer = setInterval(() => {\n      this.generateOptimizationSuggestions();\n    }, 900000);\n\n    // Alert cleanup (every hour)\n    const cleanupTimer = setInterval(() => {\n      this.cleanupOldAlerts();\n    }, 3600000);\n\n    this.monitoringTimers.push(\n      realtimeTimer,\n      healthTimer,\n      trendTimer,\n      optimizationTimer,\n      cleanupTimer,\n    );\n\n    // Initial baseline collection\n    await this.establishBaseline();\n\n    this.emit('monitoring:started');\n  }\n\n  /**\n   * Stop memory monitoring\n   */\n  stop(): void {\n    this.isActive = false;\n\n    this.monitoringTimers.forEach((timer) => clearInterval(timer));\n    this.monitoringTimers.length = 0;\n\n    this.emit('monitoring:stopped');\n  }\n\n  /**\n   * Collect real-time metrics\n   */\n  private async collectMetrics(): Promise<void> {\n    if (!this.isActive) return;\n\n    try {\n      const startTime = performance.now();\n\n      // Get memory analytics\n      const memoryAnalytics = this.memory.getAdvancedAnalytics();\n      const dbAnalytics = this.db.getDatabaseAnalytics();\n\n      // Extract key metrics\n      const metrics = {\n        cacheHitRate: memoryAnalytics.cache.hitRate || 0,\n        avgQueryTime: dbAnalytics.performance.query_execution?.avg || 0,\n        memoryUtilization: memoryAnalytics.cache.utilizationPercent || 0,\n        poolEfficiency: this.calculatePoolEfficiency(memoryAnalytics.pools),\n        dbFragmentation: dbAnalytics.fragmentation || 0,\n        activeConnections: 1, // Simplified for now\n        timestamp: Date.now(),\n      };\n\n      // Store historical data\n      this.storeHistoricalData(metrics);\n\n      // Check for alerts\n      this.checkAlerts(metrics);\n\n      const duration = performance.now() - startTime;\n      this.emit('metrics:collected', { metrics, duration });\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Establish performance baseline\n   */\n  private async establishBaseline(): Promise<void> {\n    const samples = [];\n\n    for (let i = 0; i < 10; i++) {\n      await this.collectMetrics();\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    this.emit('baseline:established', { samples: samples.length });\n  }\n\n  /**\n   * Store historical performance data\n   */\n  private storeHistoricalData(metrics: any): void {\n    for (const [key, value] of Object.entries(metrics)) {\n      if (typeof value === 'number') {\n        if (!this.historicalData.has(key)) {\n          this.historicalData.set(key, []);\n        }\n\n        const history = this.historicalData.get(key)!;\n        history.push(value);\n\n        // Limit history size\n        if (history.length > this.maxHistorySize) {\n          history.shift();\n        }\n      }\n    }\n  }\n\n  /**\n   * Check metrics against alert thresholds\n   */\n  private checkAlerts(metrics: any): void {\n    const newAlerts: MemoryAlert[] = [];\n\n    // Cache hit rate alerts\n    const cacheHitRate = metrics.cacheHitRate;\n    if (cacheHitRate < this.alertThresholds.cacheHitRate.critical) {\n      newAlerts.push({\n        level: 'critical',\n        type: 'cache_performance',\n        message: `Cache hit rate critically low: ${cacheHitRate.toFixed(1)}%`,\n        value: cacheHitRate,\n        threshold: this.alertThresholds.cacheHitRate.critical,\n        timestamp: new Date(),\n        recommendations: [\n          'Increase cache size immediately',\n          'Review access patterns',\n          'Consider cache warming strategies',\n        ],\n      });\n    } else if (cacheHitRate < this.alertThresholds.cacheHitRate.warning) {\n      newAlerts.push({\n        level: 'warning',\n        type: 'cache_performance',\n        message: `Cache hit rate below optimal: ${cacheHitRate.toFixed(1)}%`,\n        value: cacheHitRate,\n        threshold: this.alertThresholds.cacheHitRate.warning,\n        timestamp: new Date(),\n        recommendations: [\n          'Monitor cache patterns',\n          'Consider increasing cache size',\n          'Review cache eviction policy',\n        ],\n      });\n    }\n\n    // Query performance alerts\n    const avgQueryTime = metrics.avgQueryTime;\n    if (avgQueryTime > this.alertThresholds.avgQueryTime.critical) {\n      newAlerts.push({\n        level: 'critical',\n        type: 'query_performance',\n        message: `Query performance critically slow: ${avgQueryTime.toFixed(1)}ms`,\n        value: avgQueryTime,\n        threshold: this.alertThresholds.avgQueryTime.critical,\n        timestamp: new Date(),\n        recommendations: [\n          'Immediate database optimization required',\n          'Review query plans and indexes',\n          'Consider query result caching',\n        ],\n      });\n    } else if (avgQueryTime > this.alertThresholds.avgQueryTime.warning) {\n      newAlerts.push({\n        level: 'warning',\n        type: 'query_performance',\n        message: `Query performance degraded: ${avgQueryTime.toFixed(1)}ms`,\n        value: avgQueryTime,\n        threshold: this.alertThresholds.avgQueryTime.warning,\n        timestamp: new Date(),\n        recommendations: [\n          'Monitor query performance trends',\n          'Consider database maintenance',\n          'Review recent schema changes',\n        ],\n      });\n    }\n\n    // Memory utilization alerts\n    const memoryUtilization = metrics.memoryUtilization;\n    if (memoryUtilization > this.alertThresholds.memoryUtilization.critical) {\n      newAlerts.push({\n        level: 'critical',\n        type: 'memory_utilization',\n        message: `Memory utilization critical: ${memoryUtilization.toFixed(1)}%`,\n        value: memoryUtilization,\n        threshold: this.alertThresholds.memoryUtilization.critical,\n        timestamp: new Date(),\n        recommendations: [\n          'Immediate memory cleanup required',\n          'Increase memory limits',\n          'Enable aggressive garbage collection',\n        ],\n      });\n    } else if (memoryUtilization > this.alertThresholds.memoryUtilization.warning) {\n      newAlerts.push({\n        level: 'warning',\n        type: 'memory_utilization',\n        message: `Memory utilization high: ${memoryUtilization.toFixed(1)}%`,\n        value: memoryUtilization,\n        threshold: this.alertThresholds.memoryUtilization.warning,\n        timestamp: new Date(),\n        recommendations: [\n          'Monitor memory usage trends',\n          'Consider memory optimization',\n          'Review cache sizes',\n        ],\n      });\n    }\n\n    // Add new alerts and emit events\n    if (newAlerts.length > 0) {\n      this.alerts.push(...newAlerts);\n      newAlerts.forEach((alert) => {\n        this.emit('alert', alert);\n      });\n    }\n  }\n\n  /**\n   * Analyze overall system health\n   */\n  private async analyzeHealth(): Promise<void> {\n    const memoryHealth = await this.memory.healthCheck();\n    const dbHealth = await this.db.healthCheck();\n    const analytics = this.memory.getAdvancedAnalytics();\n\n    const healthReport: MemoryHealthReport = {\n      overall: {\n        score: this.calculateOverallScore(memoryHealth, dbHealth, analytics),\n        status: 'good',\n        summary: '',\n      },\n      metrics: {\n        cacheHitRate: analytics.cache.hitRate || 0,\n        avgQueryTime: this.getAverageFromHistory('avgQueryTime'),\n        memoryUtilization: analytics.cache.utilizationPercent || 0,\n        compressionRatio: 0.7, // Simplified\n        poolEfficiency: this.calculatePoolEfficiency(analytics.pools),\n      },\n      alerts: this.getActiveAlerts(),\n      suggestions: this.generateHealthSuggestions(analytics),\n      trends: this.calculateTrends(),\n    };\n\n    // Determine status\n    if (healthReport.overall.score >= 90) {\n      healthReport.overall.status = 'excellent';\n    } else if (healthReport.overall.score >= 75) {\n      healthReport.overall.status = 'good';\n    } else if (healthReport.overall.score >= 60) {\n      healthReport.overall.status = 'fair';\n    } else if (healthReport.overall.score >= 40) {\n      healthReport.overall.status = 'poor';\n    } else {\n      healthReport.overall.status = 'critical';\n    }\n\n    // Generate summary\n    healthReport.overall.summary = this.generateHealthSummary(healthReport);\n\n    this.emit('health:analyzed', healthReport);\n  }\n\n  /**\n   * Generate optimization suggestions\n   */\n  private generateOptimizationSuggestions(): void {\n    const analytics = this.memory.getAdvancedAnalytics();\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // Cache optimization suggestions\n    if ((analytics.cache.hitRate || 0) < 70) {\n      suggestions.push({\n        type: 'cache',\n        priority: 'high',\n        title: 'Optimize Cache Configuration',\n        description: 'Cache hit rate is below optimal threshold',\n        estimatedImpact: 'Reduce database queries by 20-40%',\n        implementation: 'Increase cache size and adjust eviction policy',\n        effort: 'minimal',\n      });\n    }\n\n    // Database optimization suggestions\n    const avgQueryTime = this.getAverageFromHistory('avgQueryTime');\n    if (avgQueryTime > 50) {\n      suggestions.push({\n        type: 'database',\n        priority: 'medium',\n        title: 'Database Performance Tuning',\n        description: 'Query execution times are above optimal range',\n        estimatedImpact: 'Improve query performance by 30-50%',\n        implementation: 'Add indexes, optimize queries, run ANALYZE',\n        effort: 'moderate',\n      });\n    }\n\n    // Pool optimization suggestions\n    const poolEfficiency = this.calculatePoolEfficiency(analytics.pools);\n    if (poolEfficiency < 50) {\n      suggestions.push({\n        type: 'pool',\n        priority: 'low',\n        title: 'Object Pool Optimization',\n        description: 'Object pools have low reuse rates',\n        estimatedImpact: 'Reduce garbage collection pressure',\n        implementation: 'Increase pool sizes and improve object lifecycle',\n        effort: 'minimal',\n      });\n    }\n\n    this.emit('suggestions:generated', suggestions);\n  }\n\n  /**\n   * Calculate pool efficiency\n   */\n  private calculatePoolEfficiency(pools: any): number {\n    if (!pools) return 0;\n\n    const efficiencies = Object.values(pools).map((pool: any) => pool.reuseRate || 0);\n    return efficiencies.length > 0\n      ? efficiencies.reduce((a, b) => a + b, 0) / efficiencies.length\n      : 0;\n  }\n\n  /**\n   * Get average value from historical data\n   */\n  private getAverageFromHistory(metric: string): number {\n    const history = this.historicalData.get(metric);\n    if (!history || history.length === 0) return 0;\n\n    return history.reduce((a, b) => a + b, 0) / history.length;\n  }\n\n  /**\n   * Calculate overall health score\n   */\n  private calculateOverallScore(memoryHealth: any, dbHealth: any, analytics: any): number {\n    let score = 100;\n\n    // Cache performance impact (30%)\n    const cacheHitRate = analytics.cache.hitRate || 0;\n    score -= Math.max(0, (70 - cacheHitRate) * 0.3);\n\n    // Query performance impact (25%)\n    const avgQueryTime = this.getAverageFromHistory('avgQueryTime');\n    if (avgQueryTime > 50) {\n      score -= Math.min(25, (avgQueryTime - 50) * 0.5);\n    }\n\n    // Memory utilization impact (20%)\n    const memoryUtil = analytics.cache.utilizationPercent || 0;\n    if (memoryUtil > 80) {\n      score -= (memoryUtil - 80) * 0.5;\n    }\n\n    // Active alerts impact (15%)\n    const criticalAlerts = this.alerts.filter((a) => a.level === 'critical').length;\n    const warningAlerts = this.alerts.filter((a) => a.level === 'warning').length;\n    score -= criticalAlerts * 10 + warningAlerts * 5;\n\n    // Pool efficiency impact (10%)\n    const poolEff = this.calculatePoolEfficiency(analytics.pools);\n    score -= Math.max(0, (50 - poolEff) * 0.2);\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Get active alerts (within last hour)\n   */\n  private getActiveAlerts(): MemoryAlert[] {\n    const oneHourAgo = Date.now() - 3600000;\n    return this.alerts.filter((alert) => alert.timestamp.getTime() > oneHourAgo);\n  }\n\n  /**\n   * Generate health-based suggestions\n   */\n  private generateHealthSuggestions(analytics: any): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // Add specific suggestions based on current state\n    if ((analytics.cache.utilizationPercent || 0) > 90) {\n      suggestions.push({\n        type: 'cache',\n        priority: 'critical',\n        title: 'Immediate Cache Memory Relief',\n        description: 'Cache memory utilization is critically high',\n        estimatedImpact: 'Prevent system instability',\n        implementation: 'Increase cache memory limit or enable aggressive cleanup',\n        effort: 'minimal',\n      });\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Calculate performance trends\n   */\n  private calculateTrends(): any {\n    const trends = {\n      performance: 'stable' as 'improving' | 'stable' | 'degrading',\n      memoryUsage: 'stable' as 'increasing' | 'stable' | 'decreasing',\n      cacheEfficiency: 'stable' as 'improving' | 'stable' | 'degrading',\n    };\n\n    // Analyze query time trend\n    const queryTimes = this.historicalData.get('avgQueryTime') || [];\n    if (queryTimes.length >= 10) {\n      const recent = queryTimes.slice(-5);\n      const older = queryTimes.slice(-10, -5);\n      const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;\n      const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;\n\n      if (recentAvg < olderAvg * 0.9) {\n        trends.performance = 'improving';\n      } else if (recentAvg > olderAvg * 1.1) {\n        trends.performance = 'degrading';\n      }\n    }\n\n    // Analyze memory usage trend\n    const memoryUsage = this.historicalData.get('memoryUtilization') || [];\n    if (memoryUsage.length >= 10) {\n      const recent = memoryUsage.slice(-5);\n      const older = memoryUsage.slice(-10, -5);\n      const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;\n      const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;\n\n      if (recentAvg > olderAvg * 1.05) {\n        trends.memoryUsage = 'increasing';\n      } else if (recentAvg < olderAvg * 0.95) {\n        trends.memoryUsage = 'decreasing';\n      }\n    }\n\n    // Analyze cache efficiency trend\n    const cacheHitRates = this.historicalData.get('cacheHitRate') || [];\n    if (cacheHitRates.length >= 10) {\n      const recent = cacheHitRates.slice(-5);\n      const older = cacheHitRates.slice(-10, -5);\n      const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;\n      const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;\n\n      if (recentAvg > olderAvg * 1.05) {\n        trends.cacheEfficiency = 'improving';\n      } else if (recentAvg < olderAvg * 0.95) {\n        trends.cacheEfficiency = 'degrading';\n      }\n    }\n\n    return trends;\n  }\n\n  /**\n   * Analyze trends over time\n   */\n  private analyzeTrends(): void {\n    const trends = this.calculateTrends();\n    this.emit('trends:analyzed', trends);\n  }\n\n  /**\n   * Generate health summary\n   */\n  private generateHealthSummary(report: MemoryHealthReport): string {\n    const { overall, metrics, alerts } = report;\n\n    if (overall.status === 'excellent') {\n      return 'All memory systems are operating at peak efficiency with optimal performance metrics.';\n    } else if (overall.status === 'good') {\n      return 'Memory systems are performing well with minor optimization opportunities.';\n    } else if (overall.status === 'fair') {\n      return `Memory performance is acceptable but ${alerts.length} issue(s) need attention.`;\n    } else if (overall.status === 'poor') {\n      return `Memory systems require optimization. Cache hit rate: ${metrics.cacheHitRate.toFixed(1)}%, Avg query time: ${metrics.avgQueryTime.toFixed(1)}ms.`;\n    } else {\n      return `Critical memory issues detected. Immediate intervention required. ${alerts.filter((a) => a.level === 'critical').length} critical alert(s) active.`;\n    }\n  }\n\n  /**\n   * Clean up old alerts\n   */\n  private cleanupOldAlerts(): void {\n    const cutoff = Date.now() - 86400000; // 24 hours\n    const initialCount = this.alerts.length;\n\n    this.alerts = this.alerts.filter((alert) => alert.timestamp.getTime() > cutoff);\n\n    const cleaned = initialCount - this.alerts.length;\n    if (cleaned > 0) {\n      this.emit('alerts:cleaned', { cleaned });\n    }\n  }\n\n  /**\n   * Get current monitoring status\n   */\n  getStatus() {\n    return {\n      isActive: this.isActive,\n      alertCount: this.alerts.length,\n      criticalAlerts: this.alerts.filter((a) => a.level === 'critical').length,\n      warningAlerts: this.alerts.filter((a) => a.level === 'warning').length,\n      historicalDataPoints: Array.from(this.historicalData.entries()).map(([key, values]) => ({\n        metric: key,\n        samples: values.length,\n      })),\n    };\n  }\n\n  /**\n   * Get detailed memory report\n   */\n  async generateDetailedReport(): Promise<MemoryHealthReport> {\n    const memoryHealth = await this.memory.healthCheck();\n    const dbHealth = await this.db.healthCheck();\n    const analytics = this.memory.getAdvancedAnalytics();\n\n    return {\n      overall: {\n        score: this.calculateOverallScore(memoryHealth, dbHealth, analytics),\n        status: 'good',\n        summary: '',\n      },\n      metrics: {\n        cacheHitRate: analytics.cache.hitRate || 0,\n        avgQueryTime: this.getAverageFromHistory('avgQueryTime'),\n        memoryUtilization: analytics.cache.utilizationPercent || 0,\n        compressionRatio: 0.7,\n        poolEfficiency: this.calculatePoolEfficiency(analytics.pools),\n      },\n      alerts: this.getActiveAlerts(),\n      suggestions: this.generateHealthSuggestions(analytics),\n      trends: this.calculateTrends(),\n    };\n  }\n\n  /**\n   * Export monitoring data for analysis\n   */\n  exportData() {\n    return {\n      historicalData: Object.fromEntries(this.historicalData),\n      alerts: this.alerts,\n      thresholds: this.alertThresholds,\n      status: this.getStatus(),\n    };\n  }\n}\n"],"names":["EventEmitter","performance","MemoryMonitor","memory","db","isActive","monitoringTimers","historicalData","Map","alertThresholds","cacheHitRate","warning","critical","avgQueryTime","memoryUtilization","poolReuseRate","alerts","maxHistorySize","start","realtimeTimer","setInterval","collectMetrics","healthTimer","analyzeHealth","trendTimer","analyzeTrends","optimizationTimer","generateOptimizationSuggestions","cleanupTimer","cleanupOldAlerts","push","establishBaseline","emit","stop","forEach","timer","clearInterval","length","startTime","now","memoryAnalytics","getAdvancedAnalytics","dbAnalytics","getDatabaseAnalytics","metrics","cache","hitRate","query_execution","avg","utilizationPercent","poolEfficiency","calculatePoolEfficiency","pools","dbFragmentation","fragmentation","activeConnections","timestamp","Date","storeHistoricalData","checkAlerts","duration","error","samples","i","Promise","resolve","setTimeout","key","value","Object","entries","has","set","history","get","shift","newAlerts","level","type","message","toFixed","threshold","recommendations","alert","memoryHealth","healthCheck","dbHealth","analytics","healthReport","overall","score","calculateOverallScore","status","summary","getAverageFromHistory","compressionRatio","getActiveAlerts","suggestions","generateHealthSuggestions","trends","calculateTrends","generateHealthSummary","priority","title","description","estimatedImpact","implementation","effort","efficiencies","values","map","pool","reuseRate","reduce","a","b","metric","Math","max","min","memoryUtil","criticalAlerts","filter","warningAlerts","poolEff","oneHourAgo","getTime","memoryUsage","cacheEfficiency","queryTimes","recent","slice","older","recentAvg","olderAvg","cacheHitRates","report","cutoff","initialCount","cleaned","getStatus","alertCount","historicalDataPoints","Array","from","generateDetailedReport","exportData","fromEntries","thresholds"],"mappings":"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"}