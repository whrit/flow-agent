{"version":3,"sources":["../../../../src/hive-mind/core/DatabaseManager.ts"],"sourcesContent":["/**\n * DatabaseManager Class\n *\n * Manages all database operations for the Hive Mind system\n * using SQLite as the persistence layer.\n */\n\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { EventEmitter } from 'events';\nimport { fileURLToPath } from 'url';\n\n// ES module compatibility - define __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Dynamic import for SQLite wrapper\nlet createDatabase: any;\nlet isSQLiteAvailable: any;\nlet isWindows: any;\n\nasync function loadSQLiteWrapper() {\n  const module = await import('../../memory/sqlite-wrapper.js');\n  createDatabase = module.createDatabase;\n  isSQLiteAvailable = module.isSQLiteAvailable;\n  isWindows = module.isWindows;\n}\n\nexport class DatabaseManager extends EventEmitter {\n  private static instance: DatabaseManager;\n  private db: any; // Database instance or in-memory fallback\n  private statements: Map<string, any>;\n  private dbPath: string;\n  private isInMemory: boolean = false;\n  private memoryStore: any = null;\n\n  private constructor() {\n    super();\n    this.statements = new Map();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static async getInstance(): Promise<DatabaseManager> {\n    if (!DatabaseManager.instance) {\n      DatabaseManager.instance = new DatabaseManager();\n      await DatabaseManager.instance.initialize();\n    }\n    return DatabaseManager.instance;\n  }\n\n  /**\n   * Initialize database\n   */\n  async initialize(): Promise<void> {\n    // Load SQLite wrapper functions\n    await loadSQLiteWrapper();\n    \n    // Check if SQLite is available\n    const sqliteAvailable = await isSQLiteAvailable();\n    \n    if (!sqliteAvailable) {\n      console.warn('SQLite not available, using in-memory storage for Hive Mind');\n      this.initializeInMemoryFallback();\n      return;\n    }\n\n    try {\n      // Ensure data directory exists\n      const dataDir = path.join(process.cwd(), 'data');\n      await fs.mkdir(dataDir, { recursive: true });\n\n      // Set database path\n      this.dbPath = path.join(dataDir, 'hive-mind.db');\n\n      // Open database\n      this.db = await createDatabase(this.dbPath);\n\n      // Enable foreign keys\n      this.db.pragma('foreign_keys = ON');\n\n      // Load schema\n      await this.loadSchema();\n\n      // Prepare statements\n      this.prepareStatements();\n\n      this.emit('initialized');\n    } catch (error) {\n      console.error('Failed to initialize SQLite database:', error);\n      console.warn('Falling back to in-memory storage');\n      this.initializeInMemoryFallback();\n    }\n  }\n\n  /**\n   * Initialize in-memory fallback\n   */\n  private initializeInMemoryFallback(): void {\n    this.isInMemory = true;\n    this.memoryStore = {\n      swarms: new Map(),\n      agents: new Map(),\n      tasks: new Map(),\n      memory: new Map(),\n      communications: new Map(),\n      performance_metrics: new Map(),\n      consensus: new Map()\n    };\n\n    // Create mock statement methods\n    this.statements = new Map();\n    \n    if (isWindows && isWindows()) {\n      console.info(`\nNote: Hive Mind data will not persist between runs on Windows without SQLite.\nFor persistent storage options, see: https://github.com/ruvnet/claude-code-flow/docs/windows-installation.md\n`);\n    }\n\n    this.emit('initialized');\n  }\n\n  /**\n   * Load database schema\n   */\n  private async loadSchema(): Promise<void> {\n    const schemaPath = path.join(__dirname, '..', '..', 'db', 'hive-mind-schema.sql');\n    const schema = await fs.readFile(schemaPath, 'utf-8');\n\n    // Execute schema\n    this.db.exec(schema);\n  }\n\n  /**\n   * Prepare common SQL statements\n   */\n  private prepareStatements(): void {\n    // Swarm statements\n    this.statements.set(\n      'createSwarm',\n      this.db.prepare(`\n      INSERT INTO swarms (id, name, topology, queen_mode, max_agents, consensus_threshold, memory_ttl, config)\n      VALUES (@id, @name, @topology, @queenMode, @maxAgents, @consensusThreshold, @memoryTTL, @config)\n    `),\n    );\n\n    this.statements.set(\n      'getSwarm',\n      this.db.prepare(`\n      SELECT * FROM swarms WHERE id = ?\n    `),\n    );\n\n    this.statements.set(\n      'getActiveSwarm',\n      this.db.prepare(`\n      SELECT id FROM swarms WHERE is_active = 1 LIMIT 1\n    `),\n    );\n\n    this.statements.set(\n      'setActiveSwarm',\n      this.db.prepare(`\n      UPDATE swarms SET is_active = CASE WHEN id = ? THEN 1 ELSE 0 END\n    `),\n    );\n\n    // Agent statements\n    this.statements.set(\n      'createAgent',\n      this.db.prepare(`\n      INSERT INTO agents (id, swarm_id, name, type, status, capabilities, metadata)\n      VALUES (@id, @swarmId, @name, @type, @status, @capabilities, @metadata)\n    `),\n    );\n\n    this.statements.set(\n      'getAgent',\n      this.db.prepare(`\n      SELECT * FROM agents WHERE id = ?\n    `),\n    );\n\n    this.statements.set(\n      'getAgents',\n      this.db.prepare(`\n      SELECT * FROM agents WHERE swarm_id = ?\n    `),\n    );\n\n    this.statements.set(\n      'updateAgent',\n      this.db.prepare(`\n      UPDATE agents SET ? WHERE id = ?\n    `),\n    );\n\n    // Task statements\n    this.statements.set(\n      'createTask',\n      this.db.prepare(`\n      INSERT INTO tasks (\n        id, swarm_id, description, priority, strategy, status, \n        dependencies, assigned_agents, require_consensus, max_agents, \n        required_capabilities, metadata\n      ) VALUES (\n        @id, @swarmId, @description, @priority, @strategy, @status,\n        @dependencies, @assignedAgents, @requireConsensus, @maxAgents,\n        @requiredCapabilities, @metadata\n      )\n    `),\n    );\n\n    this.statements.set(\n      'getTask',\n      this.db.prepare(`\n      SELECT * FROM tasks WHERE id = ?\n    `),\n    );\n\n    this.statements.set(\n      'getTasks',\n      this.db.prepare(`\n      SELECT * FROM tasks WHERE swarm_id = ? ORDER BY created_at DESC\n    `),\n    );\n\n    this.statements.set(\n      'updateTaskStatus',\n      this.db.prepare(`\n      UPDATE tasks SET status = ? WHERE id = ?\n    `),\n    );\n\n    // Memory statements\n    this.statements.set(\n      'storeMemory',\n      this.db.prepare(`\n      INSERT OR REPLACE INTO memory (key, namespace, value, ttl, metadata)\n      VALUES (@key, @namespace, @value, @ttl, @metadata)\n    `),\n    );\n\n    this.statements.set(\n      'getMemory',\n      this.db.prepare(`\n      SELECT * FROM memory WHERE key = ? AND namespace = ?\n    `),\n    );\n\n    this.statements.set(\n      'searchMemory',\n      this.db.prepare(`\n      SELECT * FROM memory \n      WHERE namespace = ? AND (key LIKE ? OR value LIKE ?)\n      ORDER BY last_accessed_at DESC\n      LIMIT ?\n    `),\n    );\n\n    // Communication statements\n    this.statements.set(\n      'createCommunication',\n      this.db.prepare(`\n      INSERT INTO communications (\n        from_agent_id, to_agent_id, swarm_id, message_type, \n        content, priority, requires_response\n      ) VALUES (\n        @from_agent_id, @to_agent_id, @swarm_id, @message_type,\n        @content, @priority, @requires_response\n      )\n    `),\n    );\n\n    // Performance statements\n    this.statements.set(\n      'storeMetric',\n      this.db.prepare(`\n      INSERT INTO performance_metrics (swarm_id, agent_id, metric_type, metric_value, metadata)\n      VALUES (@swarm_id, @agent_id, @metric_type, @metric_value, @metadata)\n    `),\n    );\n  }\n\n  /**\n   * Raw SQL helper for complex updates\n   */\n  raw(sql: string): any {\n    return { _raw: sql };\n  }\n\n  // Swarm operations\n\n  async createSwarm(data: any): Promise<void> {\n    this.statements.get('createSwarm')!.run(data);\n  }\n\n  async getSwarm(id: string): Promise<any> {\n    return this.statements.get('getSwarm')!.get(id);\n  }\n\n  async getActiveSwarmId(): Promise<string | null> {\n    const result = this.statements.get('getActiveSwarm')!.get();\n    return result ? result.id : null;\n  }\n\n  async setActiveSwarm(id: string): Promise<void> {\n    this.statements.get('setActiveSwarm')!.run(id);\n  }\n\n  async getAllSwarms(): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT s.*, COUNT(a.id) as agentCount \n      FROM swarms s \n      LEFT JOIN agents a ON s.id = a.swarm_id \n      GROUP BY s.id \n      ORDER BY s.created_at DESC\n    `,\n      )\n      .all();\n  }\n\n  // Agent operations\n\n  async createAgent(data: any): Promise<void> {\n    this.statements.get('createAgent')!.run(data);\n  }\n\n  async getAgent(id: string): Promise<any> {\n    return this.statements.get('getAgent')!.get(id);\n  }\n\n  async getAgents(swarmId: string): Promise<any[]> {\n    return this.statements.get('getAgents')!.all(swarmId);\n  }\n\n  async updateAgent(id: string, updates: any): Promise<void> {\n    const setClauses: string[] = [];\n    const values: any[] = [];\n\n    for (const [key, value] of Object.entries(updates)) {\n      if (value && typeof value === 'object' && value._raw) {\n        setClauses.push(`${key} = ${value._raw}`);\n      } else {\n        setClauses.push(`${key} = ?`);\n        values.push(value);\n      }\n    }\n\n    values.push(id);\n\n    const stmt = this.db.prepare(`\n      UPDATE agents SET ${setClauses.join(', ')} WHERE id = ?\n    `);\n\n    stmt.run(...values);\n  }\n\n  async updateAgentStatus(id: string, status: string): Promise<void> {\n    this.db.prepare('UPDATE agents SET status = ? WHERE id = ?').run(status, id);\n  }\n\n  async getAgentPerformance(agentId: string): Promise<any> {\n    const agent = await this.getAgent(agentId);\n    if (!agent) return null;\n\n    return {\n      successRate: agent.success_count / (agent.success_count + agent.error_count) || 0,\n      totalTasks: agent.success_count + agent.error_count,\n      messageCount: agent.message_count,\n    };\n  }\n\n  // Task operations\n\n  async createTask(data: any): Promise<void> {\n    this.statements.get('createTask')!.run({\n      ...data,\n      requireConsensus: data.requireConsensus ? 1 : 0,\n    });\n  }\n\n  async getTask(id: string): Promise<any> {\n    return this.statements.get('getTask')!.get(id);\n  }\n\n  async getTasks(swarmId: string): Promise<any[]> {\n    return this.statements.get('getTasks')!.all(swarmId);\n  }\n\n  async updateTask(id: string, updates: any): Promise<void> {\n    const setClauses: string[] = [];\n    const values: any[] = [];\n\n    for (const [key, value] of Object.entries(updates)) {\n      setClauses.push(`${key} = ?`);\n      values.push(value);\n    }\n\n    values.push(id);\n\n    const stmt = this.db.prepare(`\n      UPDATE tasks SET ${setClauses.join(', ')} WHERE id = ?\n    `);\n\n    stmt.run(...values);\n  }\n\n  async updateTaskStatus(id: string, status: string): Promise<void> {\n    this.statements.get('updateTaskStatus')!.run(status, id);\n  }\n\n  async getPendingTasks(swarmId: string): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM tasks \n      WHERE swarm_id = ? AND status = 'pending'\n      ORDER BY \n        CASE priority \n          WHEN 'critical' THEN 1 \n          WHEN 'high' THEN 2 \n          WHEN 'medium' THEN 3 \n          WHEN 'low' THEN 4 \n        END,\n        created_at ASC\n    `,\n      )\n      .all(swarmId);\n  }\n\n  async getActiveTasks(swarmId: string): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM tasks \n      WHERE swarm_id = ? AND status IN ('assigned', 'in_progress')\n    `,\n      )\n      .all(swarmId);\n  }\n\n  async reassignTask(taskId: string, newAgentId: string): Promise<void> {\n    const task = await this.getTask(taskId);\n    if (!task) return;\n\n    const assignedAgents = JSON.parse(task.assigned_agents || '[]');\n    if (!assignedAgents.includes(newAgentId)) {\n      assignedAgents.push(newAgentId);\n    }\n\n    await this.updateTask(taskId, {\n      assigned_agents: JSON.stringify(assignedAgents),\n    });\n  }\n\n  // Memory operations\n\n  async storeMemory(data: any): Promise<void> {\n    this.statements.get('storeMemory')!.run(data);\n  }\n\n  async getMemory(key: string, namespace: string): Promise<any> {\n    return this.statements.get('getMemory')!.get(key, namespace);\n  }\n\n  async updateMemoryAccess(key: string, namespace: string): Promise<void> {\n    this.db\n      .prepare(\n        `\n      UPDATE memory \n      SET access_count = access_count + 1, last_accessed_at = CURRENT_TIMESTAMP\n      WHERE key = ? AND namespace = ?\n    `,\n      )\n      .run(key, namespace);\n  }\n\n  async searchMemory(options: any): Promise<any[]> {\n    const pattern = `%${options.pattern || ''}%`;\n    return this.statements\n      .get('searchMemory')!\n      .all(options.namespace || 'default', pattern, pattern, options.limit || 10);\n  }\n\n  async deleteMemory(key: string, namespace: string): Promise<void> {\n    this.db.prepare('DELETE FROM memory WHERE key = ? AND namespace = ?').run(key, namespace);\n  }\n\n  async listMemory(namespace: string, limit: number): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM memory \n      WHERE namespace = ? \n      ORDER BY last_accessed_at DESC \n      LIMIT ?\n    `,\n      )\n      .all(namespace, limit);\n  }\n\n  async getMemoryStats(): Promise<any> {\n    const result = this.db\n      .prepare(\n        `\n      SELECT \n        COUNT(*) as totalEntries,\n        SUM(LENGTH(value)) as totalSize\n      FROM memory\n    `,\n      )\n      .get();\n\n    return result || { totalEntries: 0, totalSize: 0 };\n  }\n\n  async getNamespaceStats(namespace: string): Promise<any> {\n    return (\n      this.db\n        .prepare(\n          `\n      SELECT \n        COUNT(*) as entries,\n        SUM(LENGTH(value)) as size,\n        AVG(ttl) as avgTTL\n      FROM memory\n      WHERE namespace = ?\n    `,\n        )\n        .get(namespace) || { entries: 0, size: 0, avgTTL: 0 }\n    );\n  }\n\n  async getAllMemoryEntries(): Promise<any[]> {\n    return this.db.prepare('SELECT * FROM memory').all();\n  }\n\n  async getRecentMemoryEntries(limit: number): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM memory \n      ORDER BY last_accessed_at DESC \n      LIMIT ?\n    `,\n      )\n      .all(limit);\n  }\n\n  async getOldMemoryEntries(daysOld: number): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM memory \n      WHERE created_at < datetime('now', '-' || ? || ' days')\n    `,\n      )\n      .all(daysOld);\n  }\n\n  async updateMemoryEntry(entry: any): Promise<void> {\n    this.db\n      .prepare(\n        `\n      UPDATE memory \n      SET value = ?, access_count = ?, last_accessed_at = ?\n      WHERE key = ? AND namespace = ?\n    `,\n      )\n      .run(entry.value, entry.accessCount, entry.lastAccessedAt, entry.key, entry.namespace);\n  }\n\n  async clearMemory(swarmId: string): Promise<void> {\n    // Clear memory related to a specific swarm\n    this.db\n      .prepare(\n        `\n      DELETE FROM memory \n      WHERE metadata LIKE '%\"swarmId\":\"${swarmId}\"%'\n    `,\n      )\n      .run();\n  }\n\n  async deleteOldEntries(namespace: string, ttl: number): Promise<void> {\n    this.db\n      .prepare(\n        `\n      DELETE FROM memory \n      WHERE namespace = ? AND created_at < datetime('now', '-' || ? || ' seconds')\n    `,\n      )\n      .run(namespace, ttl);\n  }\n\n  async trimNamespace(namespace: string, maxEntries: number): Promise<void> {\n    this.db\n      .prepare(\n        `\n      DELETE FROM memory \n      WHERE namespace = ? AND key NOT IN (\n        SELECT key FROM memory \n        WHERE namespace = ? \n        ORDER BY last_accessed_at DESC \n        LIMIT ?\n      )\n    `,\n      )\n      .run(namespace, namespace, maxEntries);\n  }\n\n  // Communication operations\n\n  async createCommunication(data: any): Promise<void> {\n    this.statements.get('createCommunication')!.run(data);\n  }\n\n  async getPendingMessages(agentId: string): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM communications \n      WHERE to_agent_id = ? AND delivered_at IS NULL\n      ORDER BY \n        CASE priority \n          WHEN 'urgent' THEN 1 \n          WHEN 'high' THEN 2 \n          WHEN 'normal' THEN 3 \n          WHEN 'low' THEN 4 \n        END,\n        timestamp ASC\n    `,\n      )\n      .all(agentId);\n  }\n\n  async markMessageDelivered(messageId: string): Promise<void> {\n    this.db\n      .prepare(\n        `\n      UPDATE communications \n      SET delivered_at = CURRENT_TIMESTAMP \n      WHERE id = ?\n    `,\n      )\n      .run(messageId);\n  }\n\n  async markMessageRead(messageId: string): Promise<void> {\n    this.db\n      .prepare(\n        `\n      UPDATE communications \n      SET read_at = CURRENT_TIMESTAMP \n      WHERE id = ?\n    `,\n      )\n      .run(messageId);\n  }\n\n  async getRecentMessages(swarmId: string, timeWindow: number): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM communications \n      WHERE swarm_id = ? AND timestamp > datetime('now', '-' || ? || ' milliseconds')\n    `,\n      )\n      .all(swarmId, timeWindow);\n  }\n\n  // Consensus operations\n\n  async createConsensusProposal(proposal: any): Promise<void> {\n    this.db\n      .prepare(\n        `\n      INSERT INTO consensus (\n        id, swarm_id, task_id, proposal, required_threshold, \n        status, deadline_at\n      ) VALUES (\n        @id, @swarmId, @taskId, @proposal, @requiredThreshold,\n        'pending', @deadline\n      )\n    `,\n      )\n      .run({\n        id: proposal.id,\n        swarmId: proposal.swarmId,\n        taskId: proposal.taskId || null,\n        proposal: JSON.stringify(proposal.proposal),\n        requiredThreshold: proposal.requiredThreshold,\n        deadline: proposal.deadline,\n      });\n  }\n\n  async submitConsensusVote(\n    proposalId: string,\n    agentId: string,\n    vote: boolean,\n    reason?: string,\n  ): Promise<void> {\n    const proposal = this.db.prepare('SELECT * FROM consensus WHERE id = ?').get(proposalId);\n    if (!proposal) return;\n\n    const votes = JSON.parse(proposal.votes || '{}');\n    votes[agentId] = { vote, reason: reason || '', timestamp: new Date() };\n\n    const totalVoters = Object.keys(votes).length;\n    const positiveVotes = Object.values(votes).filter((v: any) => v.vote).length;\n    const currentRatio = positiveVotes / totalVoters;\n\n    const status = currentRatio >= proposal.required_threshold ? 'achieved' : 'pending';\n\n    this.db\n      .prepare(\n        `\n      UPDATE consensus \n      SET votes = ?, current_votes = ?, total_voters = ?, status = ?\n      WHERE id = ?\n    `,\n      )\n      .run(JSON.stringify(votes), positiveVotes, totalVoters, status, proposalId);\n  }\n\n  // Performance operations\n\n  async storePerformanceMetric(data: any): Promise<void> {\n    this.statements.get('storeMetric')!.run({\n      ...data,\n      metadata: data.metadata ? JSON.stringify(data.metadata) : null,\n    });\n  }\n\n  async getSwarmStats(swarmId: string): Promise<any> {\n    const agentStats = this.db\n      .prepare(\n        `\n      SELECT \n        COUNT(*) as agentCount,\n        SUM(CASE WHEN status = 'busy' THEN 1 ELSE 0 END) as busyAgents\n      FROM agents \n      WHERE swarm_id = ?\n    `,\n      )\n      .get(swarmId);\n\n    const taskStats = this.db\n      .prepare(\n        `\n      SELECT \n        COUNT(*) as taskBacklog\n      FROM tasks \n      WHERE swarm_id = ? AND status IN ('pending', 'assigned')\n    `,\n      )\n      .get(swarmId);\n\n    return {\n      ...agentStats,\n      ...taskStats,\n      agentUtilization:\n        agentStats.agentCount > 0 ? agentStats.busyAgents / agentStats.agentCount : 0,\n    };\n  }\n\n  async getStrategyPerformance(swarmId: string): Promise<any> {\n    const results = this.db\n      .prepare(\n        `\n      SELECT \n        strategy,\n        COUNT(*) as totalTasks,\n        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as successful,\n        AVG(JULIANDAY(completed_at) - JULIANDAY(created_at)) * 24 * 60 * 60 * 1000 as avgCompletionTime\n      FROM tasks \n      WHERE swarm_id = ? AND completed_at IS NOT NULL\n      GROUP BY strategy\n    `,\n      )\n      .all(swarmId);\n\n    const performance: any = {};\n    for (const result of results) {\n      performance[result.strategy] = {\n        successRate: result.successful / result.totalTasks,\n        avgCompletionTime: result.avgCompletionTime,\n        totalTasks: result.totalTasks,\n      };\n    }\n\n    return performance;\n  }\n\n  async getSuccessfulDecisions(swarmId: string): Promise<any[]> {\n    return this.db\n      .prepare(\n        `\n      SELECT * FROM memory \n      WHERE namespace = 'queen-decisions' \n      AND key LIKE 'decision/%'\n      AND metadata LIKE '%\"swarmId\":\"${swarmId}\"%'\n      ORDER BY created_at DESC\n      LIMIT 100\n    `,\n      )\n      .all();\n  }\n\n  // Utility operations\n\n  async deleteMemoryEntry(key: string, namespace: string): Promise<void> {\n    const startTime = performance.now();\n\n    try {\n      this.db.prepare('DELETE FROM memory WHERE key = ? AND namespace = ?').run(key, namespace);\n\n      const duration = performance.now() - startTime;\n      this.recordPerformance('delete_memory', duration);\n    } catch (error) {\n      this.recordPerformance('delete_memory_error', performance.now() - startTime);\n      throw error;\n    }\n  }\n\n  /**\n   * Get database analytics\n   */\n  getDatabaseAnalytics(): any {\n    try {\n      const stats = this.db.prepare('PRAGMA table_info(swarms)').all();\n      return {\n        fragmentation: 0, // Placeholder - could implement actual fragmentation detection\n        tableCount: stats.length,\n        schemaVersion: '1.0.0',\n      };\n    } catch (error) {\n      return {\n        fragmentation: 0,\n        tableCount: 0,\n        schemaVersion: 'unknown',\n      };\n    }\n  }\n\n  /**\n   * Record performance metric\n   */\n  private recordPerformance(operation: string, duration: number): void {\n    // Simple performance tracking - could be expanded\n    console.debug(`DB Operation ${operation}: ${duration.toFixed(2)}ms`);\n  }\n\n  /**\n   * Close database connection\n   */\n  close(): void {\n    this.db.close();\n  }\n}\n"],"names":["path","fs","EventEmitter","fileURLToPath","__filename","url","__dirname","dirname","createDatabase","isSQLiteAvailable","isWindows","loadSQLiteWrapper","module","DatabaseManager","instance","db","statements","dbPath","isInMemory","memoryStore","Map","getInstance","initialize","sqliteAvailable","console","warn","initializeInMemoryFallback","dataDir","join","process","cwd","mkdir","recursive","pragma","loadSchema","prepareStatements","emit","error","swarms","agents","tasks","memory","communications","performance_metrics","consensus","info","schemaPath","schema","readFile","exec","set","prepare","raw","sql","_raw","createSwarm","data","get","run","getSwarm","id","getActiveSwarmId","result","setActiveSwarm","getAllSwarms","all","createAgent","getAgent","getAgents","swarmId","updateAgent","updates","setClauses","values","key","value","Object","entries","push","stmt","updateAgentStatus","status","getAgentPerformance","agentId","agent","successRate","success_count","error_count","totalTasks","messageCount","message_count","createTask","requireConsensus","getTask","getTasks","updateTask","updateTaskStatus","getPendingTasks","getActiveTasks","reassignTask","taskId","newAgentId","task","assignedAgents","JSON","parse","assigned_agents","includes","stringify","storeMemory","getMemory","namespace","updateMemoryAccess","searchMemory","options","pattern","limit","deleteMemory","listMemory","getMemoryStats","totalEntries","totalSize","getNamespaceStats","size","avgTTL","getAllMemoryEntries","getRecentMemoryEntries","getOldMemoryEntries","daysOld","updateMemoryEntry","entry","accessCount","lastAccessedAt","clearMemory","deleteOldEntries","ttl","trimNamespace","maxEntries","createCommunication","getPendingMessages","markMessageDelivered","messageId","markMessageRead","getRecentMessages","timeWindow","createConsensusProposal","proposal","requiredThreshold","deadline","submitConsensusVote","proposalId","vote","reason","votes","timestamp","Date","totalVoters","keys","length","positiveVotes","filter","v","currentRatio","required_threshold","storePerformanceMetric","metadata","getSwarmStats","agentStats","taskStats","agentUtilization","agentCount","busyAgents","getStrategyPerformance","results","performance","strategy","successful","avgCompletionTime","getSuccessfulDecisions","deleteMemoryEntry","startTime","now","duration","recordPerformance","getDatabaseAnalytics","stats","fragmentation","tableCount","schemaVersion","operation","debug","toFixed","close"],"mappings":"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"}