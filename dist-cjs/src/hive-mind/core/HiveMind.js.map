{"version":3,"sources":["../../../../src/hive-mind/core/HiveMind.ts"],"sourcesContent":["/**\n * HiveMind Core Class\n *\n * Main orchestrator for the collective intelligence swarm system.\n * Manages agents, tasks, memory, and coordination.\n */\n\nimport { EventEmitter } from 'events';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Queen } from './Queen.js';\nimport { Agent } from './Agent.js';\nimport { Memory } from './Memory.js';\nimport { Communication } from './Communication.js';\nimport { DatabaseManager } from './DatabaseManager.js';\nimport { SwarmOrchestrator } from '../integration/SwarmOrchestrator.js';\nimport { ConsensusEngine } from '../integration/ConsensusEngine.js';\nimport {\n  HiveMindConfig,\n  SwarmTopology,\n  AgentType,\n  Task,\n  TaskPriority,\n  TaskStrategy,\n  SwarmStatus,\n  AgentSpawnOptions,\n  TaskSubmitOptions,\n} from '../types.js';\n\nexport class HiveMind extends EventEmitter {\n  private id: string;\n  private config: HiveMindConfig;\n  private queen: Queen;\n  private agents: Map<string, Agent>;\n  private memory: Memory;\n  private communication: Communication;\n  private orchestrator: SwarmOrchestrator;\n  private consensus: ConsensusEngine;\n  private db: DatabaseManager;\n  private started: boolean = false;\n  private startTime: number;\n\n  constructor(config: HiveMindConfig) {\n    super();\n    this.config = config;\n    this.id = uuidv4();\n    this.agents = new Map();\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Initialize the Hive Mind and all subsystems\n   */\n  async initialize(): Promise<string> {\n    try {\n      // Initialize database\n      this.db = await DatabaseManager.getInstance();\n\n      // Create swarm in database\n      await this.db.createSwarm({\n        id: this.id,\n        name: this.config.name,\n        topology: this.config.topology,\n        queenMode: this.config.queenMode,\n        maxAgents: this.config.maxAgents,\n        consensusThreshold: this.config.consensusThreshold,\n        memoryTTL: this.config.memoryTTL,\n        config: JSON.stringify(this.config),\n      });\n\n      // Initialize Queen\n      this.queen = new Queen({\n        swarmId: this.id,\n        mode: this.config.queenMode,\n        topology: this.config.topology,\n      });\n\n      // Initialize subsystems\n      this.memory = new Memory(this.id);\n      this.communication = new Communication(this.id);\n      this.orchestrator = new SwarmOrchestrator(this);\n      this.consensus = new ConsensusEngine(this.config.consensusThreshold);\n\n      // Initialize subsystems\n      await Promise.all([\n        this.queen.initialize(),\n        this.memory.initialize(),\n        this.communication.initialize(),\n        this.orchestrator.initialize(),\n      ]);\n\n      // Set as active swarm\n      await this.db.setActiveSwarm(this.id);\n\n      // Auto-spawn agents if configured\n      if (this.config.autoSpawn) {\n        await this.autoSpawnAgents();\n      }\n\n      this.started = true;\n      this.emit('initialized', { swarmId: this.id });\n\n      return this.id;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load an existing Hive Mind from the database\n   */\n  static async load(swarmId: string): Promise<HiveMind> {\n    const db = await DatabaseManager.getInstance();\n    const swarmData = await db.getSwarm(swarmId);\n\n    if (!swarmData) {\n      throw new Error(`Swarm ${swarmId} not found`);\n    }\n\n    const config = JSON.parse(swarmData.config);\n    const hiveMind = new HiveMind(config);\n    hiveMind.id = swarmId;\n\n    await hiveMind.initialize();\n\n    // Load existing agents\n    const agents = await db.getAgents(swarmId);\n    for (const agentData of agents) {\n      const agent = new Agent({\n        id: agentData.id,\n        name: agentData.name,\n        type: agentData.type,\n        swarmId: swarmId,\n        capabilities: JSON.parse(agentData.capabilities),\n      });\n\n      await agent.initialize();\n      hiveMind.agents.set(agent.id, agent);\n    }\n\n    return hiveMind;\n  }\n\n  /**\n   * Auto-spawn initial agents based on topology\n   */\n  async autoSpawnAgents(): Promise<Agent[]> {\n    const topologyConfigs = {\n      hierarchical: [\n        { type: 'coordinator', count: 1 },\n        { type: 'researcher', count: 2 },\n        { type: 'coder', count: 2 },\n        { type: 'analyst', count: 1 },\n        { type: 'tester', count: 1 },\n      ],\n      mesh: [\n        { type: 'coordinator', count: 2 },\n        { type: 'researcher', count: 2 },\n        { type: 'coder', count: 2 },\n        { type: 'specialist', count: 2 },\n      ],\n      ring: [\n        { type: 'coordinator', count: 1 },\n        { type: 'coder', count: 3 },\n        { type: 'reviewer', count: 2 },\n      ],\n      star: [\n        { type: 'coordinator', count: 1 },\n        { type: 'specialist', count: 4 },\n      ],\n      // Maestro specs-driven topology\n      'specs-driven': [\n        { type: 'requirements_analyst', count: 1 },\n        { type: 'design_architect', count: 2 },\n        { type: 'task_planner', count: 1 },\n        { type: 'implementation_coder', count: 2 },\n        { type: 'quality_reviewer', count: 1 },\n        { type: 'steering_documenter', count: 1 },\n      ],\n    };\n\n    const config = topologyConfigs[this.config.topology];\n    const spawnedAgents: Agent[] = [];\n\n    for (const agentConfig of config) {\n      for (let i = 0; i < agentConfig.count; i++) {\n        const agent = await this.spawnAgent({\n          type: agentConfig.type as AgentType,\n          name: `${agentConfig.type}-${i + 1}`,\n        });\n        spawnedAgents.push(agent);\n      }\n    }\n\n    return spawnedAgents;\n  }\n\n  /**\n   * Spawn a new agent into the swarm\n   */\n  async spawnAgent(options: AgentSpawnOptions): Promise<Agent> {\n    if (this.agents.size >= this.config.maxAgents) {\n      throw new Error('Maximum agent limit reached');\n    }\n\n    const agent = new Agent({\n      name: options.name || `${options.type}-${Date.now()}`,\n      type: options.type,\n      swarmId: this.id,\n      capabilities: options.capabilities || this.getDefaultCapabilities(options.type),\n    });\n\n    await agent.initialize();\n\n    // Register with Queen\n    await this.queen.registerAgent(agent);\n\n    // Store in database\n    await this.db.createAgent({\n      id: agent.id,\n      swarmId: this.id,\n      name: agent.name,\n      type: agent.type,\n      capabilities: JSON.stringify(agent.capabilities),\n      status: 'idle',\n    });\n\n    // Add to local map\n    this.agents.set(agent.id, agent);\n\n    // Setup communication channels\n    this.communication.addAgent(agent);\n\n    // Auto-assign to pending tasks if configured\n    if (options.autoAssign) {\n      await this.assignPendingTasksToAgent(agent);\n    }\n\n    this.emit('agentSpawned', { agent });\n\n    return agent;\n  }\n\n  /**\n   * Submit a task to the Hive Mind\n   */\n  async submitTask(options: TaskSubmitOptions): Promise<Task> {\n    const task: Task = {\n      id: uuidv4(),\n      swarmId: this.id,\n      description: options.description,\n      priority: options.priority,\n      strategy: options.strategy,\n      status: 'pending',\n      progress: 0,\n      dependencies: options.dependencies || [],\n      assignedAgents: [],\n      requireConsensus: options.requireConsensus || false,\n      maxAgents: options.maxAgents || 3,\n      requiredCapabilities: options.requiredCapabilities || [],\n      createdAt: new Date(),\n      metadata: options.metadata || {},\n    };\n\n    // Store in database\n    await this.db.createTask({\n      ...task,\n      dependencies: JSON.stringify(task.dependencies),\n      assignedAgents: JSON.stringify(task.assignedAgents),\n      requiredCapabilities: JSON.stringify(task.requiredCapabilities),\n      metadata: JSON.stringify(task.metadata),\n    });\n\n    // Submit to orchestrator\n    await this.orchestrator.submitTask(task);\n\n    // Notify Queen\n    await this.queen.onTaskSubmitted(task);\n\n    this.emit('taskSubmitted', { task });\n\n    return task;\n  }\n\n  /**\n   * Get full status of the Hive Mind\n   */\n  async getFullStatus(): Promise<SwarmStatus> {\n    const agents = Array.from(this.agents.values());\n    const tasks = await this.db.getTasks(this.id);\n    const memoryStats = await this.memory.getStats();\n    const communicationStats = await this.communication.getStats();\n\n    // Calculate agent statistics\n    const agentsByType = agents.reduce(\n      (acc, agent) => {\n        acc[agent.type] = (acc[agent.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Calculate task statistics\n    const taskStats = {\n      total: tasks.length,\n      pending: tasks.filter((t) => t.status === 'pending').length,\n      inProgress: tasks.filter((t) => t.status === 'in_progress').length,\n      completed: tasks.filter((t) => t.status === 'completed').length,\n      failed: tasks.filter((t) => t.status === 'failed').length,\n    };\n\n    // Calculate performance metrics\n    const performance = await this.calculatePerformanceMetrics();\n\n    // Determine health status\n    const health = this.determineHealth(agents, tasks, performance);\n\n    // Get any warnings\n    const warnings = this.getSystemWarnings(agents, tasks, performance);\n\n    return {\n      swarmId: this.id,\n      name: this.config.name,\n      topology: this.config.topology,\n      queenMode: this.config.queenMode,\n      health,\n      uptime: Date.now() - this.startTime,\n      agents: agents.map((a) => ({\n        id: a.id,\n        name: a.name,\n        type: a.type,\n        status: a.status,\n        currentTask: a.currentTask,\n        messageCount: a.messageCount,\n        createdAt: a.createdAt.getTime(),\n      })),\n      agentsByType,\n      tasks: tasks.map((t) => ({\n        id: t.id,\n        description: t.description,\n        status: t.status,\n        priority: t.priority,\n        progress: t.progress,\n        assignedAgent: t.assigned_agents ? JSON.parse(t.assigned_agents)[0] : null,\n      })),\n      taskStats,\n      memoryStats,\n      communicationStats,\n      performance,\n      warnings,\n    };\n  }\n\n  /**\n   * Get basic statistics\n   */\n  async getStats() {\n    const agents = Array.from(this.agents.values());\n    const tasks = await this.db.getTasks(this.id);\n\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === 'busy').length,\n      pendingTasks: tasks.filter((t) => t.status === 'pending').length,\n      availableCapacity: Math.round(\n        (1 - agents.filter((a) => a.status === 'busy').length / agents.length) * 100,\n      ),\n    };\n  }\n\n  /**\n   * Get list of agents\n   */\n  async getAgents(): Promise<Agent[]> {\n    return Array.from(this.agents.values());\n  }\n\n  /**\n   * Get list of tasks\n   */\n  async getTasks(): Promise<any[]> {\n    return this.db.getTasks(this.id);\n  }\n\n  /**\n   * Get specific task\n   */\n  async getTask(taskId: string): Promise<any> {\n    return this.db.getTask(taskId);\n  }\n\n  /**\n   * Cancel a task\n   */\n  async cancelTask(taskId: string): Promise<void> {\n    await this.orchestrator.cancelTask(taskId);\n    await this.db.updateTaskStatus(taskId, 'cancelled');\n    this.emit('taskCancelled', { taskId });\n  }\n\n  /**\n   * Retry a failed task\n   */\n  async retryTask(taskId: string): Promise<Task> {\n    const originalTask = await this.db.getTask(taskId);\n    if (!originalTask) {\n      throw new Error('Task not found');\n    }\n\n    const newTask = await this.submitTask({\n      description: originalTask.description + ' (Retry)',\n      priority: originalTask.priority,\n      strategy: originalTask.strategy,\n      dependencies: [],\n      requireConsensus: originalTask.require_consensus,\n      maxAgents: originalTask.max_agents,\n      requiredCapabilities: JSON.parse(originalTask.required_capabilities || '[]'),\n      metadata: {\n        ...JSON.parse(originalTask.metadata || '{}'),\n        retryOf: taskId,\n      },\n    });\n\n    return newTask;\n  }\n\n  /**\n   * Rebalance agents across tasks\n   */\n  async rebalanceAgents(): Promise<void> {\n    await this.orchestrator.rebalance();\n    this.emit('agentsRebalanced');\n  }\n\n  /**\n   * Shutdown the Hive Mind\n   */\n  async shutdown(): Promise<void> {\n    this.started = false;\n\n    // Shutdown all agents\n    for (const agent of this.agents.values()) {\n      await agent.shutdown();\n    }\n\n    // Shutdown subsystems\n    await Promise.all([\n      this.queen.shutdown(),\n      this.memory.shutdown(),\n      this.communication.shutdown(),\n      this.orchestrator.shutdown(),\n    ]);\n\n    this.emit('shutdown');\n  }\n\n  // Private helper methods\n\n  private getDefaultCapabilities(type: AgentType): string[] {\n    const capabilityMap: Record<AgentType, string[]> = {\n      coordinator: ['task_management', 'resource_allocation', 'consensus_building'],\n      researcher: ['information_gathering', 'pattern_recognition', 'knowledge_synthesis'],\n      coder: ['code_generation', 'refactoring', 'debugging'],\n      analyst: ['data_analysis', 'performance_metrics', 'bottleneck_detection'],\n      architect: ['system_design', 'architecture_patterns', 'integration_planning'],\n      tester: ['test_generation', 'quality_assurance', 'edge_case_detection'],\n      reviewer: ['code_review', 'standards_enforcement', 'best_practices'],\n      optimizer: ['performance_optimization', 'resource_optimization', 'algorithm_improvement'],\n      documenter: ['documentation_generation', 'api_docs', 'user_guides'],\n      monitor: ['system_monitoring', 'health_checks', 'alerting'],\n      specialist: ['domain_expertise', 'custom_capabilities', 'problem_solving'],\n      // Maestro specs-driven agent capabilities\n      requirements_analyst: ['requirements_analysis', 'user_story_creation', 'acceptance_criteria'],\n      design_architect: ['system_design', 'architecture', 'technical_writing', 'specs_driven_design'],\n      task_planner: ['task_management', 'workflow_orchestration', 'project_management'],\n      implementation_coder: ['code_generation', 'implementation', 'debugging', 'refactoring'],\n      quality_reviewer: ['code_review', 'quality_assurance', 'testing', 'standards_enforcement'],\n      steering_documenter: ['documentation_generation', 'governance', 'technical_writing'],\n    };\n\n    return capabilityMap[type] || [];\n  }\n\n  private async assignPendingTasksToAgent(agent: Agent): Promise<void> {\n    const pendingTasks = await this.db.getPendingTasks(this.id);\n\n    for (const task of pendingTasks) {\n      const requiredCapabilities = JSON.parse(task.required_capabilities || '[]');\n\n      // Check if agent has required capabilities\n      if (requiredCapabilities.every((cap: string) => agent.capabilities.includes(cap))) {\n        await this.orchestrator.assignTaskToAgent(task.id, agent.id);\n        break; // Only assign one task at a time\n      }\n    }\n  }\n\n  private async calculatePerformanceMetrics() {\n    // This would calculate real metrics from the database\n    return {\n      avgTaskCompletion: 3500,\n      messageThroughput: 120,\n      consensusSuccessRate: 92,\n      memoryHitRate: 85,\n      agentUtilization: 78,\n    };\n  }\n\n  private determineHealth(agents: Agent[], tasks: any[], performance: any): string {\n    if (agents.length === 0) return 'critical';\n\n    const busyAgents = agents.filter((a) => a.status === 'busy').length;\n    const utilization = busyAgents / agents.length;\n\n    if (utilization > 0.9) return 'degraded';\n    if (performance.consensusSuccessRate < 50) return 'degraded';\n    if (agents.filter((a) => a.status === 'error').length > agents.length * 0.2) return 'critical';\n\n    return 'healthy';\n  }\n\n  private getSystemWarnings(agents: Agent[], tasks: any[], performance: any): string[] {\n    const warnings: string[] = [];\n\n    const utilization = agents.filter((a) => a.status === 'busy').length / agents.length;\n    if (utilization > 0.8) {\n      warnings.push('High agent utilization - consider spawning more agents');\n    }\n\n    const pendingTasks = tasks.filter((t) => t.status === 'pending').length;\n    if (pendingTasks > agents.length * 2) {\n      warnings.push('Large task backlog - tasks may be delayed');\n    }\n\n    if (performance.memoryHitRate < 60) {\n      warnings.push('Low memory hit rate - consider optimizing memory usage');\n    }\n\n    return warnings;\n  }\n}\n"],"names":["EventEmitter","v4","uuidv4","Queen","Agent","Memory","Communication","DatabaseManager","SwarmOrchestrator","ConsensusEngine","HiveMind","id","config","queen","agents","memory","communication","orchestrator","consensus","db","started","startTime","Map","Date","now","initialize","getInstance","createSwarm","name","topology","queenMode","maxAgents","consensusThreshold","memoryTTL","JSON","stringify","swarmId","mode","Promise","all","setActiveSwarm","autoSpawn","autoSpawnAgents","emit","error","load","swarmData","getSwarm","Error","parse","hiveMind","getAgents","agentData","agent","type","capabilities","set","topologyConfigs","hierarchical","count","mesh","ring","star","spawnedAgents","agentConfig","i","spawnAgent","push","options","size","getDefaultCapabilities","registerAgent","createAgent","status","addAgent","autoAssign","assignPendingTasksToAgent","submitTask","task","description","priority","strategy","progress","dependencies","assignedAgents","requireConsensus","requiredCapabilities","createdAt","metadata","createTask","onTaskSubmitted","getFullStatus","Array","from","values","tasks","getTasks","memoryStats","getStats","communicationStats","agentsByType","reduce","acc","taskStats","total","length","pending","filter","t","inProgress","completed","failed","performance","calculatePerformanceMetrics","health","determineHealth","warnings","getSystemWarnings","uptime","map","a","currentTask","messageCount","getTime","assignedAgent","assigned_agents","totalAgents","activeAgents","pendingTasks","availableCapacity","Math","round","getTask","taskId","cancelTask","updateTaskStatus","retryTask","originalTask","newTask","require_consensus","max_agents","required_capabilities","retryOf","rebalanceAgents","rebalance","shutdown","capabilityMap","coordinator","researcher","coder","analyst","architect","tester","reviewer","optimizer","documenter","monitor","specialist","requirements_analyst","design_architect","task_planner","implementation_coder","quality_reviewer","steering_documenter","getPendingTasks","every","cap","includes","assignTaskToAgent","avgTaskCompletion","messageThroughput","consensusSuccessRate","memoryHitRate","agentUtilization","busyAgents","utilization"],"mappings":"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"}